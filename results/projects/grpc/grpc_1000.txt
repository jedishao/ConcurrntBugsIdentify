5
Adopt token-based flow control from reactive-streams 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6
Implement outbound flow control 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Should be token-based a la reactive streams. Although it also seems that maybe we will only ever have at most 1 token passed to the application.
Currently we provide no method of pushback to the application and buffer infinitely as the application sends.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7
Investigate excessive flushing in Netty 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Determine ways to reduce number of flushes we perform. For example, if the header frame is being sent, flushing afterward is generally a waste since a DATA frame typically follows. We want methods that allow smart semi-automatic flushing or using knowledge from application layer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8
Optimize buffer usage in MessageFramer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently allocate a large non-direct buffer per stream due to MessageFramer, only to copy immediately out of it. We should instead write directly to the transport-native buffer, which will cause us to have a WriteableBuffer or some such like our current Buffer class that is ready-only.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

9
Choose benchmark framework: JMH vs Caliper 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

10
Unary requests always send an empty DATA frame with EOS=true to close stream 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a performance issue. We should be able to set EOS=true on the DATA frame with the request payload rather than having to always write N+1 DATA frames. Likely fix is in frame interfaces.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

16
Do we need both gradle and maven?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Keeping dependencies and other details in pom.xml and build.gradle will become a tedious overhead.  Any reason to support two build systems?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

17
Race for Netty between cancel and stream creation · 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AbstractClientStream.cancel won't cancel the stream on the wire if it appears the stream has not yet been allocated, as is described by the comment:
// Only send a cancellation to remote side if we have actually been allocated
// a stream id and we are not already closed. i.e. the server side is aware of the stream.
However, what happens if this is the case, is that the transport is not notified of the stream destruction, and the stream will still eventually be created by the transport and not be cancelled. This issue does not seem a problem with the OkHttp transport, since it allocates the stream id before returning any newly created stream. However, Netty delays id allocation until just before the stream headers are sent, which 1) is always done asynchronously and 2) may be strongly delayed due to MAX_CONCURRENT_STREAMS.
It appears that the optimization in AbstractClientStream should be removed outright and sendCancel's doc be updated to specify the expectation to handle such cases (as opposed to directly cause RST_STREAM). Both OkHttp and Netty seem to be handling such cases already. More importantly, the optimization seems highly prone for races given that id allocation is occurring in the transport thread whereas AbstractClientStream.cancel is happening on some application thread; using the normal synchronization between application and transport threads seems more than efficient enough and simpler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

18
Decompression occurring in Transport thread 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Apparently we are decompressing in the transport thread just so that we are able to provide the correct byte length to messageRead(). It seems we should remove the length argument to messageRead(), use Buffers.openStream(nextFrame, true), pass that stream to messageRead() (instead of calling toByteArray), and then set nextFrame = null.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

19
Change base package name to io.grpc 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Lots of renames, but not really hard.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

21
Remove Guava's Service from our immediate API 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Service doesn't gain us anything and is just painful for our users. We should remove it and just make our own API (start and stop, plus health-checking API).
This has already been done for Channel. It still needs to be done for Server, but I'm already working on that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

22
TLS support for OkHttp when not running on Android
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OkHttp transport current accepts a SSLSocketFactory which when on Android is provided by the OS. For testing when not running on Android we don't have a way to do TLS/ALPN. We need one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

23
Figure out what names we want for Client Foos vs Server Foos
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have Call on both Client and Server. When adding the server, we chose ServerCall as the name of the server-side Call, and discussed renaming the client-side to ClientCall. ClientInterceptor was named based on this idea. However, the rename hasn't happened yet and now some have suggested having the Client names simply lack "Client" (so it would remain "Call"). It seems it has simply been too long since the original discussion for us to remember what was decided.
We need to decide to either prefix Client with Client and Server with Server or only prefix Server with Server. After the decision, whatever needs fixing needs to be fixed.
Note that in the transport we must have ClientStream prefixed with Client, since Stream is a shared interface between Client and Server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

24
Add unit tests to AbstractServerStream 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some unit tests from NettyServerStream are probably appropriate to move.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

25
Add unit tests for AbstractClientStream 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some unit tests from NettyClientStream are probably appropriate to move.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

26
Add tests for convert non-200 HTTP status codes to GRPC codes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The GRPC runtime should handle receiving HTTP2 responses with :status set to something other than 200. The runtime will need to map this to a GRPC status
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

27
Add unit tests for ChannelImpl ·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

28
Channel-state API 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At this moment, creating TCP connections are created lazily on first call of a Channel, and if the TCP connection goes down it isn't reconnected until a subsequent call. However, some users will want the TCP connection to be created and maintained during the lifetime of the Channel.
This "constant connection" behavior does not make as much sense when accessing a third party service, as the service may purposefully be disconnecting idle clients, but is very reasonable in low-latency, intra-datacenter communication.
We need an API to choose between those behaviors and to export failure information about the Channel. All of this is bundled together for the moment under the name "health-checking API," but we can split it apart as it makes sense.
They are tied together for the moment because certain operations like "wait until Channel is healthy" assume that the channel will actively try to connect.
Some notes from @louiscryan:
Do we want to canonicalize transport failure modes into an enum or are we
happy with a boolean indicating transient vs. durable. What failure modes
will we have
wire incompatability which can occur at any time and while is in theory
transient you may not want your application to continue working
unreachable
internal implementation error
redirection. the addressed service has moved elsewhere
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

30
Netty HTTP/2 negotiation fails silently if ALPN/NPN in classpath, but jetty_alpn not in bootclasspath·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you properly have ALPN/NPN in your classpath, but lack jetty_alpn in your bootclasspath, then we just hang after sending a SETTINGS frame. ALPN never happens, but "unsupported" isn't even called because that is normally called by jetty_alpn.
This makes it hard for users to determine what is wrong with their setup.
The only idea I have for a fix is to set a boolean when our ClientProvider is called and detect if it isn't set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

35
Remove Guava's Service from transport API 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For similar reasons as #21, but more for ourselves instead of our users.
This will allow us to be much more precise and have nuances explicitly like how a connection can GOAWAY for new streams but keep the old streams processing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

36
Idea config breaks clean gradle build
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FAILURE: Build failed with an exception.
A problem occurred evaluating project ':stubby-integration-testing'.
Commenting out line 31 works around the problem, but obviously doesn't solve it:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

43
Add compiler and examples to the build 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is already a build.gradle file, but we need to be using protoc built from HEAD.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

44
Add examples module into the build
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's already there, we just need to add a build.gradle file for it and add it to settings.gradle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

57
Implement timeout/deadline in Channel
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

58
Implement timeout/deadline in Server 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

60
OkHttp transport has high latency
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For some unknown reason, OkHttp transport regressed in performance dramatically, considering it used to be beating Netty. Unfortunately we don't know when. We need to do some profiling and figure out where the latency is coming from.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

61
"No cached instance found" exception in integration test
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The exception does not cause any problem other than noise, but we should still figure out what is going wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

64
Channel interface needs shutdown/close  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With the elimination of Service the Channel interface is now insufficient for normal use.
While ChannelImpl has a shutdown Channel does not and intercepting a ChannelImpl immediately converts it into Channel.
Closeable/AutoCloseable would be fine too
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

65
Consider making Channel/Server abstract classes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
They were interfaces previously because of the bane of Service and the need to extend Abstract*Service in ChannelImpl/ServerImpl. Now that Service is gone from those APIs, we could swap to using abstract classes to give us greater ability to add to the APIs in the future.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

67
Perform hostname checking on :authority before issuing call 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We allow users to override the authority per-call, but we currently don't do any verification that that authority would be permitted for the current server. We should verify the provided authority against the TLS cert of the connection and fail in some way if the cert is not good for the requested authority. We would cache these verifications for the connection in a simple hash map.
It is the Java equivalent of grpc/grpc#471
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

70
Create CONTRIBUTING file 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

71
Figure out how our users will use the protoc plugin 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Whether it should be installed to /usr/local or similar for protoc to find, or we do some gradle dependency magic (which seems like it is likely difficult).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

72
Add getPort() or similar to ServerImpl
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that there doesn't seem to be a way to programatically retrieve a way to get the port a ServerImpl is listening on. Could we add a method that provides this information?
I would argue it's useful for when one wants to bind to port 0 i.e.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

73
Naming inconsistency in NettyServerBuilder
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that NettyServerBuilder has the methods userBossEventLoopGroup and workerEventLoopGroup.
Why the user prefix in userBossEventLoopGroup, why not simply bossEventLoopGroup?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

80
Daemon Threads in grpc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have to decide how to deal with daemon threads. Grpc uses non-daemon threads by default and so the pattern
works fine.
However, if one was to provide a custom executor that uses daemon threads the above would terminate immediately. It's quite likely that people will unknowingly provide daemon threads to grpc by passing in custom Netty EventLoopGroup.
Netty's EventLoops use a ForkJoinPool executor by default, which uses daemon threads.
The same issue exists on the client.
OkHttp uses non-daemon threads by default as @ejona86 pointed out to me.
One solution would be to add an infinite awaitTermination() method that does what the name suggests. Another solution would be to create a dummy non-daemon thread on startup and thus ensure that the JVM doesn't exit prematurely.
@nmittler @louiscryan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

82
netty: Use DEFAULT_WORKER_EVENT_LOOP_GROUP for both client and server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have separate thread pool for client workers vs server workers. We would be better suited by using a single worker thread pool for client and server (still likely having a separate boss thread pool on server). It would use fewer threads and reduce thrashing on a server that was also a busy client.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

83
Add timing to QPS Client.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Java and C++ versions of the QPS Client allow one to perform a fixed number of calls. When using them for benchmarking I think it would make much more sense if we could tell the client to hit the server for some period of time (i.e. 30 minutes) i.e. 1 million calls just mean something completely different on GCE, Prod and your local workstation.
WDYT @vjpai . If you agree, I could also come up with a PR for the C++ version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

87
Get protoc plugin compiling on Windows 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

88
Create new example for route_guide.proto 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After we have the new example, we can probably remove the old ones.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

90
Missing Copyright Headers in gradle build files and protos
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Do we need those?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

93
Fix inbound flow control for Calls.blockingServerStreamingCall
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need to explicitly call request(). Ideally, buffer would be removed and we only request a single message at a time; when returning a message with next(), we also call request(1). We would need a request(1) during init.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

99
Replace use of InputStream in transport APIs 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current use of InputStream has a few problems:
it is non-idiomatic to split the responsibility for opening and closing a stream; it also prevents features such as try-with-resources
it essentially forces extra byte copying in order to consume the data
I haven't looked at the implementation, but since the comments say that the InputStream is non-blocking, I assume that it is used instead of byte[] simply to prevent modifications of the data when it is passed to multiple listeners (a reasonable concern).
Since there already appears to be a Guava dependency, the obvious alternative would be to pass a (inherently read-only) ByteSource instead.
(ByteString from protobuf would be another option, but for various reasons ByteSource is probably a better choice)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

104
Plugin is not building following current instructions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Final gradle install is giving me:
Could not resolve all dependencies for configuration ':grpc-netty:compile'.
Could not find io.netty:netty-codec-http2:5.0.0.Alpha2-SNAPSHOT.
Searched in the following locations:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

109
Tidy up Javadoc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Need to ensure that Javadoc in the major interfaces and exposed types is of high quality and properly makes of referencing annotations.
Suggest we divide and conquer as follows...
Builders  @nmittler
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

110
Create architectural doc with diagram 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

111
Enforce coding conventions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a checkstyle.xml here: https
This was borrowed from the googleapis java client library (I believe).  We should expand this as needed and enforce the conventions when building.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

116
Buffer Messages until TLS Handshake and HTTP2 Negotiation complete 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When grpc uses Netty as the client transport all RPC calls (aka HTTP2 Streams) block until the TLS Handshake and the HTTP2 negotiation is complete.
This blocking implementation (in grpc) is currently required as Netty's SslHandler doesn't buffer messages until the Handshake is complete ("You must make sure not to write a message while the handshake is in progress unless you are renegotiating."), and there is nothing to stop the user from starting to make RPC calls immediately.
This behavior comes with two problems:
With RPC calls blocking until the TLS Handshake is complete, every call launched before the TLS Handshake and HTTP2 Negotiation are done will block its thread from which one would expect async behavior though.
In cases when a DirectExecutor is being used it might lead to the EventLoop blocking forever (deadlock effectively). There is several scenarios how a deadlock could happen. One such scenario is when you are writing a server in Netty and within that server you want to connect to a grpc service to fetch some data. If you now use a DirectExecutor and reuse the EventLoop of the server with the grpc client, the TLS handshake would block the server's EventLoop, which is also the very EventLoop responsible for completing the TLS HandShake. That way neither the server nor the client would ever make progress again.
@nmittler , @ejona86 and I talked about this problem earlier today and we agreed to get rid of the blocking behavior by adding an additional ChannelHandler to the end of the pipeline (tail) that will buffer any data until TLS & HTTP2 are working. After that it will send the buffered messages through the pipeline and remove itself from the pipeline.
@nmittler @ejona86 @louiscryan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

118
Buffer RPC Calls for when the MAX_CONCURRENT_STREAMS limit is hit.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The number of concurrent RPC calls we can do is limited by HTTP2's MAX_CONCURRENT_STREAMS setting. Currently when using Netty as the client transport, each call made after this limit is reached blocks its calling thread until the number of active streams goes below the maximum again. The blocking is necessary as otherwise Netty would simply reject the stream with a PROTOCOL_ERROR, thus we want to buffer those calls and only pass them to Netty once there is room for new streams again.
Similar to #116 a user would again expect asynchronous behavior here.
The proposed solution to this problem is to remove the before mentioned buffering / blocking from grpc-java and let Netty handle it instead. To do this we will add a new Http2ConnectionEncoder implementation to Netty that acts as a decorator to the DefaultHttp2ConnectionEncoder. It will intercept calls to writeHeaders, writeData and writeRstStream and buffer all frames of streams that have been created after the maximum streams limit was reached and pass through the others. The encoder will also add a listener to the connection so that when an active stream is closed the next stream from the buffer can be created. A call to writeRstStream will cause the buffered stream to be deleted from the buffer. Frames other than HEADERS, DATA and RST_STREAM will be passed directly to the DefaultHttp2ConnectionEncoder.
We propose to contribute this change back to Netty as it will likely also be useful for other people using Netty's HTTP2 codec.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

120
Remove blocking parts from NettyClientTransport
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NettyClientTransport#newStream is currently a blocking operation. It blocks until the HEADERS frame has been written on the wire. This is behavior is not what people who use our asynchronous API would come to expect.
The blocking also is the cause for severe performance issues in the QPS Client as it results in more or less in as many threads being created as there are concurrent calls going on (We have seen ~850 Threads for 1000 concurrent calls, resulting in OOM).
The blocking may also lead to deadlocking the EventLoop in cases where a DirectExecutor is used. One scenario where a deadlock might happen is when the EventLoop is not able to completely flush the HEADERS frame on the wire because then Netty would internally create a task to flush the remaining bytes and put this task in its task queue. This task can never be completed though as the EventLoop Thread is blocked by our very own newStream method waiting for the task to be completed ...
This issue depends on #116 and #118 to be resolved first.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

124
Update route guide gradle file with task that just generates gRPC code
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently there are two tasks in the gradle file, one of which builds and runs the server, one of which builds and runs the client.
In the tutorial, I'd like the users to just generate the gRPC code with protoc without running anything, it'd be useful if the gradle file offered an option to do this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

125
Update route guide gradle file with task that just generates gRPC code
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently there are two tasks in the gradle file, one of which builds and runs the server, one of which builds and runs the client.
In the tutorial, I'd like the users to just generate the gRPC code with protoc without running anything, it'd be useful if the gradle file offered an option to do this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

126
Can't build grpc-java 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Following the installation instructions on a new Ubiquity instance. Installed Maven 3.2, using Java 8 (Google's JDK).
All works fine until I try the final build, then get:
What went wrong:
Could not resolve all dependencies for configuration ':grpc-core:compile'.
Could not find com.google.protobuf:protobuf-java:3.0.0-pre.
Searched in the following locations:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

135
Messages.proto has reference to stubby.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
package stubby.testing;
Should this be removed?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

142
Code for auth readme pending maven artifact for google auth library
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The maven artifact for https
hasn't shown up in maven central yet. Pull request with supporting code is pending that
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

144
Add MAX_CONCURRENT_STREAMS option to NettyServerBuilder 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

145
Integration tests failing 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Occasionally the integration tests AbstractTransportTest#largeUnary and AbstractTransportTest#serverStreaming are failing on the server side with lots of  Exceptions of the like.
We have traced it down to a bug in the HTTP2 Flow Control in Netty, where frames that are pending due to a not yet received WINDOW_UPDATE frame get canceled. For this bug to trigger the server endpoint has to be in the state HALF_CLOSE_REMOTE with no Flow Control Window left.
I have discussed the problem with @nmittler and @ejona86 and I am currently working on a PR for Netty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

146
Support Unix Domain Socket 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Should be straightforward enough now that Netty supports it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

150
Add CallOptions parameter to newCall() 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need robust per-call configuration. For example, if we were to add configuration for specifying whether to retry, where would it go? Such configuration would need to be per-call, so it must go in Channel.newCall() somewhere. MethodDescriptor is where timeout is now, but putting more in MethodDescriptor seems like a long-term disaster. Metadata.Headers is where authority and path are now, but putting retry configuration there would be very odd.
A CallOptions class would be a natural place for per-call configuration, and would actually be a good home for timeout, authority, and path. Removal of timeout from MethodDescriptor would make it so that nobody ever needs to modify the object, which would allow us to greatly simplify the generated code. Authority and path don't really relate to Metadata; they relate to HTTP headers but not GRPC Metadata. Removal of them from Headers means we would remove the Headers/Trailers distinction and just have Metadata. That would also fix the issue where Headers doesn't make sense to send from ServerCall since authority and path are meaningless for response headers.
The main breakage would be with Interceptors, as it would be adding a new parameter.
I'm also uncertain as to whether CallOptions should be final or not. I think we want final, since we don't want that part of the API to be transport-specific, but it could be useful to have transport-specific options such as inbound flow control window.
@louiscryan and @zhangkun83, what do you think?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

152
The Future interface doesn't implement cancellation 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently Future returned by the future interface is a SettableFuture and it doesn't implement the RPC cancellation. It should be as easy as implementing AbstractFuture.interruptTask().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

154
Tests fail with latest Netty version 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running gradle clean build on master, I get the following unit test failures.
Example Stacktrace
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

163
GO_AWAY can result in cryptic error messages  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In NettyClientHandler, we don't always store the original cause of the GO_AWAY and instead rely on a connection error.  This results in cryptic errors like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

164
Switch to Netty 4.1 branch 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since HTTP/2 support has been back-ported to the 4.1 branch, we should start basing our work on it since it will get us closer to an official release of Netty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

167
Import latest Netty changes  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FYI, this seems to break unit tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

168
Remove AbstractStub.StubConfigBuilder 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Forked from #150
Now we are doing this to reconfigure a stub:
Why not just:
This could make per-call configuration more concise. Instead of:
we could have:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

169
Installation fails due to Javadoc errors 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Installing the library as described in the main README.md fails in the last step, because javadoc finds two errors and exits with status 1 (which makes ./gradlew install sad). 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

171
Integrate with more data format
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't know whether it is possible to use other data format, not just protobuf, for example avro.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

172
Push Java libraries to Maven central
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the majority of Java Developer, I am using Maven and not Gradle...
After compiling my self the protoc tool for Mac, and creating the Route sample Maven project, I am still block with the fact that the
are nowhere in Maven...
My Current pom is like this, and the protoc generates correct code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

173
Please test with broken stream IDs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
We recently got hit in C with a crash that happened when HTTP/2 stream IDs went unexpected (violating the invariant of increase on a connection) and also aren't prepared for the situation where we approach or cross max stream id (0x7fffffffu). Please check that this case works in Java. If you need some client code to test that, I can let you use the client code that was sent to me.
This is related to C issues: grpc/grpc#946 and grpc/grpc#957
Thanks!
Vijay
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

174
Access to controller (for connection metadata) 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to get the remote client's IP and TLS client-certificate from within a GRPC service. And I guess cancellation information as well.
Protobuf services had the controller argument.  Is there an equivalent in GRPC?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

175
could grpc-java generate jars by modifying gradle files? how? 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to package these java files generated by grpc. How could I modify gradle files?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

176
IllegalReferenceCountException for DATA frame with EOS ·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a DATA frame is received with EOS set, an attempt is made to read the Netty ByteBuf after it has been closed.
The problem is this line: 
Since the buffer was already added to the deframer and the user callback notified, they will then attempt to read from the buffer which has already been closed.  This causes the IllegalReferenceCountException to mask the actual problem with is that a DATA frame was received with EOS set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

180
Swap to Netty's NPN/ALPN handling 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This should simplify our code and would allow us to support tcnative for OpenSSL support. Other than being faster, tcnative does not depend on the JRE version and does not need bootclasspath specified, which would help new users trying to use gRPC for the first time.
This is API breaking as it will change how we use SslContexts provided by the user. We will require them to be properly configured with ALPN protocols. Since SslContext does not allow any form of partial configuration or reconfiguration (no way that two parties can work together to configure one), we will probably need a helper class that duplicates almost all the factory methods but without the parameters we want to specify (like ALPN protocols).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

181
Observe MAX_CONCURRENT_STREAMS in OkHttp client  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We ignore it. We shouldn't.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

182
Vendorize our usages of OkHttp internal classes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using the normal OkHttp API didn't quite seem to work for us. The blocking style made it seem like we would need a thread per stream, flow control wasn't exposed enough (although this may no longer be an issue due to how we are now using flow control, other than blocking), RST_STREAM, and other similar advanced HTTP/2 features didn't have quite as much support as we needed. Oh, and trailers...
So that led us to use internals of OkHttp that we shouldn't be, because it will be brittle. Instead, we should propose/upstream an API that supports advanced usage and can be stable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

190
Stream fairness 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Investigate how we stand on stream fairness.
Last I checked, Netty is splitting the available window between all the streams with data queued. That seems like it would waste bandwidth as it degrades into sending many 1-byte frames, but each frame has a 9 byte overhead.
Ideally we would decrease latency on "small" streams by preferring them over "large" streams.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

192
Enable Travis-CI 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Most annoying part is likely building protobuf.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

201
Provide Code Style definition file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would it be possible to provide the code style definition file you're using with Intellij?
Along these lines: https
This would make it easier to contribute to grpc!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

203
The `-f` flag for readlink is not available on OSX 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
readlink -f, as used in run-test-client.sh and run-test-server.sh is not available on OSX.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

204
Need docs on how to run integration test suite 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that this is the way:
Tab/window/screen 1:
Tab/window/screen 2:
Is that correct?
And is there a way to avoid paying the Groovy/Gradle tax for every test?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

205
Use CreateStartScripts for integration-tests 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This would make the binaries more portable and wouldn't require running Gradle before every execution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

206
Is there any way to handle cookie in headers？
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We usually auth user by cookie/token.Should I use ClientInterceptor to set cookie or store cookie?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

209
HttpUtilTest missing package
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

211
Fix checkstyle warnings for examples
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Making example methods private would be easiest, but them being public seemed to be useful in http 
getFeature() is also overloaded, and doesn't look like it should be, given that the two methods have different semantics.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

215
OkHttpClientStream.window is only written never read
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86
Should be removed
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

219
method not found for method name automatically changed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use grpc ruby client and java server, the ruby client prompts that method not found, so I choose to debug the grpc java proto code, I got very confused.
the following code which generated by grpc java defines the SearchForum method:
and the following code register the SearchForum method:
bug when I debug into the createMethodDefinition method:
it shows that the method.getName returns "searchForum".
that is the reason why ruby client cannot find the method SearchForum. but I totally don't understand why method name SearchForum has been renamed to searchForum, the data flow shows that nothing has done to the METHOD_SEARCH_FORUM method name.
I think this is a bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

223
OkHttp tests flaky
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Change to shutdown of okhttp has caused tests to become flaky.
This is the location of the most common failure for me:
Full examples of such failures:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

231
Data corruption when receiving payloads larger than 2048 bytes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here, OkHttpReadableBuffer is calling Buffer#read only once, even though the contract for Buffer#read is that it reads up to byteCount bytes and returns the number of bytes actually read.
Because Buffer uses a linked list of segments where each segment is at most 2048 bytes, Buffer#read will read only up to 2048 bytes at a time. This will result in corruption of any received payload larger than 2048 bytes (and on some smaller payloads as well, depending on the position in the buffer). In my case, it manifested as a series of '\0' bytes where data should have been.
Instead, we should call read in a loop until we have read all the bytes we need to. And we should also have some unit tests for OkHttpReadableBuffer...
I'm working on a pull request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

235
Gradle's testing should show more info on Travis
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A flaky build on Travis doesn't provide enough information to diagnose what went wrong, because Gradle generally expects you to view the reports in the build directiory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

238
Race in Server handler initialization
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When initializing an incoming client connection, we call startAsync() on the transport, which registers the handler on a separate thread. This is obviously a race, and it would have probably been fixed if I had finished Service removal in #35.
Symptom:
The quickest fix would be to call awaitRunning() from initChannel(). That reduces the rate new connections can connect, but is probably the most expedient solution, until #35 is finished.
@nmittler, thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

239
Lacking preconditions for start() in ChannelImpl.CallImpl
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For instance, calling request() before start() has been called results in a NullPointerException.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

240
ClientAuthInterceptor.start() skips super.start() when there is an error, causing subsequent use of the top-level Call to throw IllegalStateException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
onClose does not log any exception or status, as it is commonly used in cases where there wasn't a server error but instead a client issue. Thus, in the IOException handling of ClientAuthInterceptior, if an exception is thrown it is thrown away, the caller doesn't notice, and will get some odd exception on whatever the next call is (NullPointerException in request() was what led me to this discovery). We discussed that the "proper" exception handling isn't very obvious, but certainly swallowing the exception is worse than the alternatives.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

243
Make connection/stream windows configurable for Netty server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This has already been done for the client. Default connection window should be 1MiB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

245
AbstractTransportTest.streamingOutputShouldBeFlowControlled doesn't test flow control
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is actually very difficult to test inbound flow control using our API without long sleeps. streamingOutputShouldBeFlowControlled does long sleeps, but doesn't actually assert the number of requests that should have been requested. That makes it the slowest test (4s, x3 transports) without actually verifying anything additional to the other tests.
We should either fix the test or remove it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

246
ClientAuthInterceptor synchronizes on wrong object
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The "this" in synchronized (this), is not the correct object to synchronize on:
It should be ClientAuthInterceptor.this instead. As the code stands, there is no synchronization between threads so you can see NullPointerExceptions as lastMetadata is set but not cached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

253
Add clearer message when receiving GOAWAY from the server.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

254
Document transport layers (netty vs okhttp)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, am I right that there are currently two implementations of the transport layer? Netty and okhttp? I was curious if there are any situations in which one might be preferable to the other as I'm not quite sure why there are two implementations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

257
OkHttp may be missing flush after sending headers 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like we aren't flushing after headers. This works okay because we don't have any tests that don't send data. We should add such a test to AbstractTransportTests and add the flush as appropriate.
On Friday I was playing with a change that allows removing the flush() on headers for unary and server streaming RPCs. We may be more interested in it now.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

260
"An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting."
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I happened to send an invalid setting id (0x0) to a java server and saw the connection shutdown. The expected behavior as in http2 spec is
An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting.
instead of connection error.
Here is the stack trace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

262
Context API 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Ideally it would not be grpc-specific. It would help with things like #174, but could also maybe provide cancellation support to the async stub and deadline propagation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

263
ServerCalls delays handler calling for unary streams for outdated reason
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We delay calling method.invoke() until onHalfClose(), because application may call
close(OK) inside invoke(), while close(OK) is not allowed before onHalfClose().
The restriction of halfClose before OK is no longer present, having been removed before open sourcing. We should update the comment at the very least. We may choose to change how it works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

273
how to generate Grpc class with gradle?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc example use gradle-plugin-protobuf to generate Grpc class with the following config:
but this doesn't succeed when I build with gradle, it prompts:
Could not determine the dependencies of task ':generateProto'.
how to reference grpc complier if I create a stand alone java project with gradle?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

276
Rename java_plugin to protoc-gen-grpc-java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This follows a naming convention that allows just placing it in PATH and having protoc discover it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

279
Clean up stream after AbstractClientStream.inboundTransportError()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Otherwise the stream object will still be held in the stream map of OkHttpClientTransport.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

281
Calls.asyncServerStreamingCall requests only one response
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The method Calls.asyncServerStreamingCall requests only 1 response from the underlying call. The documentation for request(N) states that a call will not deliver more than N responses, so if Call implementations would implement this contract, the resulting server stream would never contain more than one element.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

289
AbstractTransportTest is flaky.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've seen several failures of Http2OkHttpTest.pingPong() on Travis, like this one: http
But I couldn't reproduce the same failure in ~30 runs in my local repository.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

290
Improve documentation of contract of io.grpc.Call 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This class seems to be underspecified. A couple of issues which can't be easily derived:
Can request(N) be called multiple times before the next payload is received, and is it accumulating.
If not accumulating, what does it mean if request(0) is called after request(N) but before payload is received. Does it suppress the already scheduled output? How strong is the contract that there are never more than N responses?
Can there be race conditions for request() calls and onPayload() calls on the listener.
Is request() always be called before sendPayload() or can it be also called afterwards.
What happens if any of the Call methods is called after halfClose, cancel, or onClose.
if cancel is called, should it eventually report onClose(Status.CANCELLED) on the listener.
There might be more. Ideally we would specify the allowed sequences and interferences between call and listener.
I may follow up with a suggestion for the spec later.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

293
OkHttp only connects to "h2" ALPN protocol
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Values "h2-14", "h2-15", and "h2-16" result in Protocol throwing an error from OkHttpTlsUpgrader.
We should support all those options, as we still are seeing them being used since the final HTTP/2 spec hasn't been published.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

296
Gradle build points to https with self signed certificate 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In installation step for grpc-java
Exception in thread "main" javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No subject alternative DNS name matching services.gradle.org found.
Work around is to modify gradle/wrapper/gradle-wrapper.properties to change to http.
Should change it permanently?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

299
platform issue 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I run a grpc java server on Mac OS, it is ok to test it with java client, but error happened on a linux server,and the error is as follows:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

300
Reset stream if receive server's halfClose before client sends halfClose.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This was exposed by the discussion on #279.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

305
Reduce number of flushes 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Each flush causes its own TCP frame to be written because we Nagle is disabled. Reducing the number of flushes would greatly reduce the number of TCP frames and number of syscalls. Even if performance benchmarks don't show a benefit by reduced flushing, if we are able to see improvements to goodput that would be enough for such an optimization.
Reduce number of flushes, in gRPC and maybe Netty.
May need a batch write API. We have the ability internally already, it is deciding a way to expose it.
Allow hint to delay headers until first data write (could maybe be part of batch API).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

307
Revisit Lifecycle API
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current shutdown/shutdownNow/isShutdown/awaitShutdown/isTerminated/awaitTerminated API of ChannelImpl and ServerImpl was chosen when we had time constraints in removing Service from our API. During its addition in #33, @adriancole and @nmittler expressed concern for the API, but the API was left in-place and the decision delayed as part of #28. The Health-checking API is coming, but the current Lifecycle API continues to be contentious in the mean time as it is part of both channel layer and transport layer.
We need to agree on an API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

309
Build seems broken on OS/X 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Commit da3c3f8 (Solution for GRPC codegen deployment) seems to have broken the compiler build for me on OS/X. The previous commit builds fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

312
MessageFramer produces too small message chunks 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MessageFramer uses
bufferAllocator.allocate(maxFrameSize)
to produce chunks that the transport can write. Currently these chunks are always 4096 bytes regardless of transport or payload size.
Transports cannot coalesce these chunks and typically end up writing each one in a syscall. For large payloads this really hurts performance. Instead we should delegate to the buffer allocator and ask it to produce a chunk up to the payload size. E.g.
bufferAllocator.allocate(len)
Experimentation with HBase has shown that for a 51k payload this reduces syscalls on write by 3x.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

317
Integration test largeUnary failing 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We recently ran into an issue with one of our services where sending large responses results in transport errors being logged as well as eventual transport failure. I managed to reproduce this behavior in integration test largeUnary as well. When running a single iteration of largeUnary the test passes although connection errors are logged:
However, running largeUnary in a simple loop causes transport failure after a few iterations. This happens with both netty and okhttp client variants, as well as with netty local channel.
Other details:
David
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

318
Remove String allocation in MutableHandlerRegistryImpl.lookupMethod(String). 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In QPS benchmarks we spend roughly 1% of the total allocations on allocating String objects when doing a substring on the method name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

319
CodedInputStream and CodedOutputStream always allocate a fixed 4KB byte array. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Protobuf's CodedInputStream and CodedOutputStream always allocate 4KB sized byte arrays in their constructor. For small messages this is overkill and we should investigate if we can reduce this. On QPS benchmarks our heap consists for roughly 30% of those byte arrays. So this can have a big impact for memory usage.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

320
CompositeReadableBuffer and SerializingExecutor allocate a 16 entry ArrayDeque.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The CompositeReadableBuffer and the SerializingExecutor always allocate a 16 entry ArrayDeque. We should investigate if we can get away with a smaller default size in order to save memory. In benchmarks just over 2% of total allocations are the Object[] that back the ArrayDeque.
A 16 element Object[] uses roughly 80 byte of memory (12 byte obj header + 4 byte length + 4 byte per entry with compressed oops). Initializing it to a more reasonable default value like 4, could save ~50%, but we should figure out how many entries we are likely to actually need.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

321
Set initial size for ArrayList in TransportFrameUtil.toHttp2Headers 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In QPS benchmarks roughly 0.5% of the total heap is spend on growing the ArrayList in TransportFrameUtil.toHttp2Headers(). It seems like we roughly know the size in advance and so we should initialize it to this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

322
Improve synchronization of SerializingExecutor. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are seeing some contention in ChannelImpl.obtainActiveTransport() and SerializingExecutor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

325
Determine upper-bound for Netty buffer sizes used in frame 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As a follow on to
#312
we need benchmarks to determine whether we should be placing an upper-bound on the buffers allocated to the MessageFramer from Netty. We are already setting a lower-bound to page-size (default is 8k) to facilitate buffer object caching within Netty as well as allowing for follow-on writes.
Setting an upper-bound should probably be done by benchmark (unless one already exists)
Above the Netty arena size (currently 16MB) Netty will allocate an Unpooled buffer. Above 32k Netty takes an arena lock to allocate a buffer out of the arena (i.e. it will not cache the buffer itself)
for the scheme Netty follows
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

329
Support setting the HTTP/2 flow control window in grpc. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice if we could set the HTTP/2 flow control window from grpc in order to be able to do meaningful throughput tests in different environments e.g. two of my cloud VMs have a bandwidth delay product of 485KByte/s (high latency and high bandwidth). So with the default flow control window of 64KB we can theoretically only ever reach 13% of the possible throughput on that network.
Would be nice to also add this as a command line flag to the QPS benchmarks.
@ejona86 @louiscryan @nmittler
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

330
OkHttpClientTransport.onGoAway() races with startPendingStreams() 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
onGoAway has two phases: do things necessary under lock and final cleanup. In the first phase it collects the streams to terminate in the second and sets goAway.
startPendingStreams() does not observe goAway and also creates new streams that should be failed due to the goAway. From an initial look, it seems it would be best to remove failPendingStreams() and simply integrate its two phases into onGoAway()'s two phases; that is, when holding the lock in onGoAway, replace pendingStreams with an empty list, and then when not holding the lock call transportReportStatus
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

331
Throughput: AbstractServerStream does unnecessary flushes  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86 @nmittler
AbstractServerStream.writeMessage if no headers have been sent will immediately flush an empty header to the transport, by triggering internalSendFrame(flush = true)
In the case of a unary response we don't delay the flush of the framed message to allow the trailers to be flushed at the same time.
Will work on a PR
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

332
Throughput: NettyClientTransport does unnecessary flush  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the case of Unary & Server-streaming calls the immediate flush of request headers is unnecessary as a single payload must immediately follow for a valid call
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

336
Memoryleak in Netty Server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When pushing the server hard I am getting
SEVERE: LEAK: ByteBuf.release() was not called before it's garbage-collected. See http for more information.
Recent access records: 0
and OOM with a 30GB heap after a few minutes. I guess we have a memory leak :-). Working on it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

339
Add code generation for the advanced server interface
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I asked on the mailing list (https:) whether a callback existed to notify the server that a client had disconnected so it could perform some cleanup actions. Here's the answer I received from Eric Anderson:
Because it is a unary request, there isn't a callback that notifies you of client cancellation (any error is considered a cancellation to the server). The next time you call onValue though, an exception will be thrown notifying you of the cancellation. That is enough in some scenarios.
The "advanced" interface provides such notification though. It has onHalfClose (which is when onComplete is normally called), onComplete (when the RPC gracefully completed), and onCancel (if there was an error or if the client cancelled). We don't have code generation for the advanced interface though, so you would need to implement ServerCallHandler for each method in the service, create ServerMethodDefinitions and add them to a ServerServiceDefinition, which is what you pass to the ServerBuilder's addService. That would be verbose and annoying, but simple code. It would probably make sense for you to create an issue for us to add codegen for the advanced interface.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

340
Buffer writes until flush, before sending to transport thread/lock 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This design could benefit both okhttp, as it reduces synchronization overhead. It also would also improve flush behavior and make flushes predictable when MAX_CONCURRENT_STREAMS is exceeded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

341
OkHttp does not observe SETTINGS_INITIAL_WINDOW_SIZE 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It only observes MAX_CONCURRENT_STREAMS.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

346
Cannot compile C++ code on WIndows (VisualCpp) 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm trying to build project under Windows. To do this I added tool chain with visualCpp(VisualCpp) (compiler/build.gradle):
Sadly VisualCpp plugin does not support target and I get error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

350
MessageFramer close on error can recurse 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MessageFramer.close is not safe for re-entrancy.
A stream write error, triggers an error reported to the stream, which triggers framer.close, which triggers a write, which ....
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

352
Recursion in NettyClientHandler during shutdown caused by channelInactive 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@nmittler @ejona86
Connection termination can trigger recursion in active stream shutdown
channelnactive -> close active streams -> send pending frames -> write headers (fail) -> connection error -> send go_away -> close active streams -> ...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

356
OkHttpClientTransportTest.pendingStreamFailedByIdExhausted is flaky 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in the Travis logs:
The commit was restarted, and succeeded.
Another example of apparent flakiness: https. The commit before and after were green. The tested commit only changed Netty code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

357
Try to allow building java without having to build codegen
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It may be possible to use the last released codegen binary.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

359
Http2ClientStream overwrites error message
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Http2ClientStream.transportHeadersReceived() is calling withDescription instead of augmentDescription. This hinders debugging what went wrong.
@yang-g, since he is interested in when this is resolved.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

360
Check response content type on client 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems we aren't checking the content type of responses on the client. The flag was originally put in place because some implementations were sending the wrong content type, but it seems we should enable it again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

363
c++ server and java client communications issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
I try write gRPC communication with java client and c++ server on linux.
But i have exception (below) in client when it runs RPC procedure.
Logs shows that server processed request, sended answer and continues its work.
For test i wrote same client on c++ and same server on java. All communication versions works. And only client(java) with server(c++) failed.
I hope you can help me. Thanks.
Caused by: io.grpc.Status$OperationRuntimeException: INTERNAL:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

368
Don't use SerializingExecutor when running with a direct executor.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I wanted to know what the impact of the SerializingExecutor is when running with a direct executor.
So I did 3 benchmarks, choosing the best out of 3 runs.
Direct Executor + Serializing (current master)
Direct Executor + Serializing Executor without synchronized blocks.
Direct Executor only, no Serializing Executor
So it seems to me that the potential improvement is significant enough to make some changes and not use a SerializingExecutor when using direct i.e. by adding an option to the Server / Channel Builders.
WDYT @nmittler @louiscryan @ejona86 ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

371
okhttp: Implement outbound flow control 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#6 implemented the outbound flow control API for client and server, as well as support for it in Netty, but it did not implement support for it in OkHttp. We need outbound support in OkHttp, or at least dummy support (that implements the API, but doesn't provide push-back) for the near future.
Dummy support could be implemented on the client-side by calling notifyIfReady on stream creation (similar to in Netty). It seems server-side may work as-is. In either case, this would rely on AbstractStream.isReady() always returning true.
But we should really implement the full feature on OkHttp.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

375
OkHttp: "Platform.getSelectedProtocol() == null" check is problematic
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
May 04, 2015 9:48:24 PM com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform getSelectedProtocol
INFO: ALPN callback dropped: SPDY and HTTP/2 are disabled. Is alpn-boot on the boot class path?
I used "Platform.getSelectedProtocol() == null" prior to our TLS hand shake to check whether user has already done the handshake, if they haven't, this log would show up while we are about to do the handshake.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

382
Unsupported TLS version exception on server side is not handled.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
May 05, 2015 11:01:26 AM io.netty.channel.DefaultChannelPipeline$TailContext exceptionCaught
WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
The corresponding client exception is:
It's hard to understand what was wrong from such limited info.
We should let the client knows its TLS version is problematic.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

385
No ciphers available.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With using Http2SecurityUtil.CIPHERS, we are encountering this cipher suites issue, the previous workaround is running with JDK8.
But now this issue is biting Android integration test.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

389
Integration test fails on HEAD 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am on HEAD (commit 111f6dd)
./gradlew :grpc-integration-testing:test keeps failing on both Mac and Linux with:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

394
Examples should use CreateStartScripts
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using CreateStartScripts in benchmark and integration-testing, and it seems nice. We should do the same for the examples (so similar changes to 00a7192).
Documentation will need to be updated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

404
Proto files are not recompiled if codegen has been changed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since we have checked in the generated code, we must re-generate them if 1) the proto files are changed, or 2) the codegen is changed, or 3) the version of protoc is changed.
The generateProto task uses the proto files as input, and I have confirmed that 1) works, but 2) and 3) don't.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

408
Bad transport may be used for starting stream.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently we reference activeTransport to the newly created transport before the new transport is started , so if the new transport failed starting with an exception, the subsequent stream still try to use the bad activeTransport.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

411
OkHttp connection window does not reclaim outstanding connection window of closed stream
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty will return any unprocessed stream window to the connection window on stream closure, OkHttp does not currently do this.
See onStreamClosed in Nettys DefaultHttp2LocalFlowController.
This will surface if a stream is cancelled and there is a partial message in the Deframer as the Deframer intentionally does not return bytes if there are no pending requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

412
routeGuideClient hangs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported by Martin, (I assume @magx2). @magx2, what git commit were you running at?
Terminal1-server:
Stopping client with CTRL+C results in error in server:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

420
can not compile with genetor code  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java version "1.8.0_40"
Mac OS X 10.10.3
gradle version 2.4
protobuf version 3.0
I can use gradle compile when skipCodegen=true,but I can not compile when I want code gen.
First,It show me 'google/protobuf/compiler/java/java_names.h' file not found,then I copy the cpp file from protobuf/share to compiler/src/java_plugin/cpp.It show me unknown type name 'Atomic32'.
How can I do it? Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

426
Add documentation saying that transport has weaker API guarantees
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

427
Make it more obvious that JDK 8 is necessary for TLS 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

428
Client-side Load Balancing 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For the moment, all things client-side load balancing. Designs, requirements, etc. Can be split into separate issues as appropriate.
There is an internal load balancing design that needs to be made public. This is on @a11r's plate.
There is want to support ZooKeeper. It may need a different Channel implementation than the one necessary for the doc @a11r will share.
@louiscryan
@jhump
@mzhaom
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

429
Update docs to reflect current status of ALPN on older versions of Android 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

433
Requesting more messages from the Deframer causes unnecessary context-switching  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the case of a incoming stream of messages the flow-control window may accommodate more than one message. If the deframer has several messages in its currently held buffer we end up doing a lot of context switching to request more messages out as we end up with a sequence like
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

436
ServerCalls binding utilities are too general
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Generated server bindings use only two methods in ServerCalls to adapt a service. The lack of differentiation between the different modes of streaming causes too many calls to 'request' more messages from flow control in scenarios where no more messages are available.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


440
OkHttp does not return connection flow control for DATA of unknown stream 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It returns early.
It seems like we can just move the windowUpdate handling before the return.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

441
WINDOW_UPDATE for unknown streams causes exception 41 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discovered by @madongfly. It is very easy to get a WINDOW_UPDATE for an unknown stream. For instance, if we sent RST_STREAM and there is a WINDOW_UPDATE en route from the server already.
It seems we should just ignore such WINDOW_UPDATES instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

448
Implement shutdownNow
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For both ChannelImpl and ServerImpl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

449
Consider delaying terminated state until application no longer processing 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In ServerImpl and ChannelImpl, we proceed to terminated as soon as all the transports have terminated. However, we should probably wait for all the SerializingExecutors to drain, since that is more of what the application would expect and it is useful to know that all the workers are done.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

452
Netty streams should reduce the capacity of pooled buffers passed to sendFrame
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a small write and flush is passed through the framer we hold the full 4k of the buffer until the write completes. By reducing the capacity of a pool direct buffer to the readably byte limit we immediately release the unwritten portion of the buffer back to the pool.
This may or may not have an impact on performance and utility should be evaluated by bencmarking. It may improve performance by making more bytes available to thread-local allocation. The most likely benchmarks to be impacted would be streaming ones that write and flush many messages in a tight loop as it would alleviate buffer-arena locks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

453
Investigate performance implications of hard-coded outbound flow-control buffer 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The outbound flow-controller assumes as 32k memory buffer as the ideal pending write limit to determine if a stream is available for further writes (as indicated by AbstractStream.isReady).
This may be sub-optimal,  for example in the single stream case it would limit a flow-control aware message producer for exhausting the connection window.
An alternate solution is to allow each stream to accept messages if
(a) The pending writes for a stream are less than the connection window size
(b) A configured memory allocator indicates that more buffers are available in the allocator pool.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

454
Consider implementing pull / batch write to optimize flushing for streams 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For streaming calls that can produce a batch of messages as a unit consider adding an interface that allows for a single flush to propagate through the framer to the transport.
In the case of outbound flow-controlled streams it should be possible for a producer to generate a sequence of messages that produce a single flush in response to the onReady (and onPayload) callbacks where the sequence of writes terminates when isReady becomes false.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

455
Implement compute_engine_creds interop test
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

456
Implement service_account_creds interop test 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

457
Implement jwt_token_creds interop test 57 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

458
Interop tests and servers should all use the same flow control window
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now we are generally using 1 MB as the connection window size and 64 KB as the stream flow control window. However, the tests were written assuming we were using the defaults of 64 KB for both. Also, it seems in the future we will be changing the flow control windows more. Java for instance is considering upping the window to 1 MB after putting in better memory handling. Java is also expecting to auto-tune the flow control window size based on the bandwidth-delay product.
We should specify that interop clients and servers should hard-code a fixed connection and stream window size. Given that we want to find bugs with the interop tests, I suggest 64 KB for both, but I'm open to alternatives.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

459
AbstractTransportTest.veryLarge{Request,Response} very slow with TLS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I recently noticed that building grpc-java took an additional 30s. I tracked it down to OkHttp enabling TLS for its Http2OkHttpTest. Each test consumes ~12 seconds when using TLS, but is < 200 ms without TLS. It shouldn't take 12s to send 10 MB... The problem exists with Netty as well.
Since each test is run twice (once for OkHttp, once for Netty), that means the tests are ~50 seconds on the critical path of our ~1.5 minute build time.
I don't have many ideas as to why it could be so slow. It could be that the ciphers are really slow, but that is really, really slow. It is important to me that it impacts Netty and OkHttp equally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

460
Support messages with unknown length in framer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We will need some tagging interface or similar in order to detect when available() (or some other method) knows the message length.
This does not mean we would make sure that available() in the inbound direction (because compression makes that hard).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

461
Remove thread-hop required for blocking stub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Once #150 CallOptions is supported, we can use a per-call direct executor for blocking stubs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

462
Decide whether gRPC will use options in proto for methods
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be possible to attach options, such as compression and default timeout, to methods. @a11r was thinking that we wouldn't have such options, but @louiscryan had been thinking we would. It doesn't seem we feel too strongly one way or the other, but we just need to get consensus and move forward.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

467
Using SSLCertificateSocketFactory for TLS handshake doesn't work externally for Android older than 5.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, internal Android projects are using SSLCertificateSocketFactory for TLS handshake, but since ALPN only works well with Android 5.0 or newer, they use NPN for Android 4.4 and older.
It works just because internal OKHttp has been hacked to support NPN.
With the external OKHttp, it will failed as:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

473
./gradlew fails 73 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I run ./gradlew build or ./gradlew install, it fails with:
FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':grpc-benchmarks:compileJava'.
Compilation failed; see the compiler error output for details.
Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.
BUILD FAILED
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

477
Revert swapping to the "canonical HTTP mapping"  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Commit 4332c2f swapped to the status-suggested HTTP mappings, but these are really broken for gRPC. I had actually thought I had already reverted the commit, so I was shocked to see it was still in-place.
grpc/grpc@5b53e35 describes examples of specific issues with the mapping.
I want to revert this change immediately, but I don't want to do it just before a release, so I'll delay until after 0.7.0 is cut.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

479
Improve synchronization in obtainActiveTransport()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Split out of #322
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

486
accidental complication error happend problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I compile my grpc project, sometimes it is ok but sometimes it has the following compilation error:

XXXXGrpc.java:22: error: package io.grpc.protobuf does not exi
io.grpc.protobuf.ProtoUtils.marshaller(com.engzo.search.protoc.SuggestResponse.PARSER));

sometimes ok sometimes not. very weird.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


487
Handle IOException thrown by FrameReader.nextFrame() as PROTOCOL_ERROR.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In current implementation, we treat the IOException thrown by FrameReader.nextFrame() as the "IO" issue, so we just close the connection and don't send anymore.
But actually, it may throw IOException for protocol errors like: invalid frame size, RST_STREAM with stream id 0, invalid values in SETTINGS etc, in such cases, we should send a GOAWAY before closing the connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

490
Upgrade to OkHttp 2.4 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just released. The API changes are known to break us. Let's look at what it'll take to upgrade.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

492
Let people use compression 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's been implemented for a while, but no way to turn it on.
We don't have a way to determine if the remote supports compression; that may need to be considered. We should also make sure we interop with C, which is doing compression soon.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

493
Add User-Agent 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

494
Simplify configuration of flow control windows ·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Stream window should really always be the same as the connection window.  We should just expose a single lever for this ... default to 1MB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

496
DeferredInputStream has unused generic parameter 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

502
Allow for batching writes to the framer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Need to allow applications to perform a sequence of writes that cause a single flush in the framer to improve throughput.
The typical example for this would be an application thats wants to write messages until isReady() is false and to do more writes when onReady() is called. Even if the application is not flow-control aware (i.e is not using isReady) it would still be useful to allow write batching for bursty streams
One simple option for doing this would be to delay the outbound framer flush while executing  onPayload/isReady callbacks though this would only help cases where sends are done inside these callbacks by the same thread. A more thorough API change is probably warranted.
To give some performance context the change described above allows the FlowControlledMessagesPerSecondBenchmark to go from ~700kqps to ~4Mqps on my box
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

503
Instructions to run the examples fail ·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps:
BUILD FAILED
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

504
Netty throws exception when creating > 1 TLS transport. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When attempting to create multiple TLS transports from the same builder, Netty throws an exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

506
Move BufferingHttp2ConnectionEncoder upstream to Netty
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BufferingHttp2ConnectionEncoder is solving a relatively generic use case.  I would like to explore the possibility of this class being extracted out of gRPC and contributed upstream to Netty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

507
Blocking stub don't throw StatusRuntimeException 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Instead, it throws RuntimeExecutionException with a StatusRuntimeException as a cause. Is that what we want?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

510
Introduce support for calls as composable objects 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Let's suppose we call it "Callable" (actual name may differ), and it is related to Call as is f.i. Iterable to Iterator, or Observable to Observer in the Rx pattern.
The basic contract would be:
Additional scenarios which might be supported by callables or related means:
Resource modification (Read-Modify-Write cycle), with conditions
Conversion to/from Rx and to/from Java 8 streams (no need to reinvent the wheel here. If someone wants to do processing of responses or produce requests, those frameworks should have everything)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

511
Consolidate Method descriptor classes 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Now we have three classes for representing a method: MethodDescriptor, ServerMethodDefinition, Method. They all have the method name and marshallers. We list their differences below:
MethodDescriptor is used on client when making a call. It has options and MethodType (unary, streaming etc)
Method passes information from IDL to the runtime. It has MethodType.
ServerMethodDefinition is used on server for a registered method. It has the ServerCallHandler.
Their content overlap a lot. They should be consolidated. Here is the plan:
Make it clear that MethodDescriptor is a static representation of the method definition from IDL. It will be used on both client-side and server-side.
Change ServerMethodDefinition to contain a MethodDescriptor
Delete Method. Use MethodDescriptor to pass information from IDL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

515
Support for custom status codes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.grpc.Status seems to be restricted to the built-in status codes provided, although javadoc suggests that new status codes can be used as long as they are not conflicting. Adding a factory method such as "Status.forCode" should be possible although this would require that the status code type be changed from an enum to integer constant. This may be a small price to pay for the added flexibility.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

516
Excessive logging of Status{Runtime}Exception in server 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a service throws Status{Runtime}Exception it gets logged regardless of error class. There should probably be a distinction between "client" errors such as NOT_FOUND, INVALID_ARGUMENT which should not be logged (or at least not as FATAL) and other server errors (INTERNAL, UNKNOWN, etc) similar to how HTTP errors are categorized.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

517
"WARN java.lang.IllegalStateException: Refcount has already reached zero" during shutdown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are frequently seeing this exception during server shutdown but not in all cases. I did a little digging and it looks like the SharedResourceHolder on DEFAULT_EXECUTOR is being called twice in ServerImpl.java: once when transportClosed() is called and again in serverShutdown(). Looks like serverShutdown() first shuts down all transports, so perhaps this is what is triggering the call to transportClosed() before it attempts to release the holder again for a second time.
Thanks,
David
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

518
In-Process Transport
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be useful to have a light-weight, low-overhead, in-process transport. It could be used in testing, using gRPC to an endpoint that may be in the same process, and bridging from other protocols (like REST or SOAP).
Today, we recommend using Netty's in-process transport for testing. This has the same benefit of using fakes, in that it tests more of the system's actual behavior. This still seems preferred for testing, but it does cause messages to be serialized and de-serialized.
For the design, I propose we implement an in-memory client/server transport (not a Channel/Server). Implementing a transport instead of Channel/Server lets Channel/Server continue to handle the listener threading model and would keep more behavior in sync (especially error handling). In order to prevent serializing messages, the InputStream passed to the transport would be the same InputStream passed out of the transport. Marshaller.parse() could then do an instanceof check and avoid serialization.
For example, for proto we would add something like the following to parse() in ProtoUtils, since messages are immutable:
The transport itself would not create any threads and do all its work in the caller's thread. I think it wouldn't even need to use locks for thread safety, as Stream is not thread-safe. If the application uses directExecutor for Channel and Server, then no threads would be created.
@jhump
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

520
Add ALPN setting path for Android older than 5.0 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OkHttp only support setting ALPN on Android 5.0+ since 2.3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

522
Netty Client does not detect when ALPN was not used 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I tried to reproduce the APLN silence failure, I expected the following change fails our tests, but not, all tests still passed.
The problem itself is not a big deal, but investigating it may expose some hidden bugs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

523
Allow specification of open-loop vs closed-loop test in qpstest.proto ·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
As we move toward interoperable QPS testing, please allow the ClientConfig in qpstest.proto specify the type of load to deliver. I would suggest that you support variable open-loop request arrival processes as in https, but ultimately Poisson process is the most important.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

524
Allow specification of open-loop vs closed-loop test in qpstest.proto · 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
As we move toward interoperable QPS testing, please allow the ClientConfig in qpstest.proto specify the type of load to deliver. I would suggest that you support variable open-loop request arrival processes as in https, but ultimately Poisson process is the most important.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

525
Support NPN with Netty 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It isn't useful for jetty_alpn, but when using OpenSsl, using ALPN_AND_NPN in the netty application negotiation config allows us to support more platforms without needing users to install OpenSSL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

526
Support NPN on Android when Play Services Security Provider (PSSP) not available  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Attempts and their fallbacks:
If installed, use PSSP with ALPN and NPN
If on Android 5.0 or later, use ALPN and NPN
If on Android 4.1 or later, use NPN
Fail or let the application author install some alternative security provider (e.g., build and ship Conscrypt themselves)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

527
Verify Protocol Negotiation completed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems if neither ALPN nor NPN occur/available we just happily continue connecting and think that negotiation occurred. We should instead check that the protocol negotiated and fail if it didn't.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

529
Cleanup io.grpc package
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Rename DeferredInputStream as it doesn't necessarily have to be deferred.  Consider making it an interface.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

531
ClientAuthInterceptor's ctor requires an Executor, but never use it.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

536
Investigate Netty stream closure handling logic
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the Netty handlers, we seem to have various ways that we can detect stream and handle stream closure. We should try to simplify this logic so that it's less error prone.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

537
Error When Compiling grpc-java 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to compile grpc-java I get the following error:
1 error generated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

538
Add ClientInterceptors "inside" ChannelImpl
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is an alternative to #64.
It could be useful to have a set of interceptors "inside" ChannelImpl. These interceptors would always be used. The could be immutable and added via a AbstractChannelBuilder.addInterceptor() or maybe mutated added after creation on ChannelImpl. Today, adding after creation doesn't cause issues since only interceptCall is part of ClientInterceptor. However, if any other methods were added to the interface it could easily cause problems.
There are two main use cases:
Simple users who don't want to maintain as many object references. Adding to the inside of ChannelImpl means they don't need to maintain both a ChannelImpl reference and the topmost Channel reference, as they could be the same object. These are simpler scenarios that only have one chain of interceptors.
Auth construction factory. Authentication commonly needs a combination of transport and Metadata configuration. For example, using TLS (optionally with client certificates) and then OAuth. The auth mechanism can change in the environment, for example, by not using TLS if the server is on the same trusted network. Having a single Auth-aware factory would be easier to use, as is the design of google-auth-library-java.
The feature would have the downfall of having multiple ways of doing what appears to be the same thing (via ClientInterceptors and via the AbstractChannelBuilder). It would increase user code's (unnecessary) dependency on ChannelImpl, because they wouldn't be forced to use Channel. It might also encourage a few users to create multiple ChannelImpls to keep things "simple."
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

540
Rename OkHttpChannelBuilder.setConnectionSpec to connectionSpec
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We aren't prefixing any of the other builder methods with set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

541
Move DEFAULT_CONNECTION_SPEC to OkHttpChannelBuilder and make OkHttpClientTransport package-private
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is little reason for OkHttpClientTransport to be public. DEFAULT_CONNECTION_SPEC should just be the initial value of connectionSpec in the OkHttpChannelBuilder (instead of the current null).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

545
Make Channel hierarchy more meaningful
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@nmittler wrote on issue 64:
I think the problem here is that the term "channel" ~= "transport", but "interceptor" != "transport". I think it would be better to provide a more abstract interface that is responsible for creating calls and then all of these "things" would implement/extend that. Something like this:
Discussion continued further. This issue is for these class renames/additions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

547
Recommend tcnative instead of jetty-alpn-boot
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need to make sure there are builds of tcnative for Debian-compatible OpenSSL, first though.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

548
Have different abstract base types for each stub type; use it instead of Calls
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, channel (and soon, callOptions) are defined in AbstractStub, but the generated code uses them. It could be a good idea to have abstract base types for each stub type that uses channel so that the generated code doesn't.
This also moves the call of Channel.newCall into non-generated code. In all, this should have the generate code hard-code fewer things.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

557
Migrate Windows Jenkins-based testing to grpc-testing 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Jenkins host we set things up on is going away. We should migrate the setup to the grpc-testing project.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

558
Using grpc with TLS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm working on grpc in android, and I want to use a self signed certificate.
But when I want to send request, a exception of type io.grpc.StatusRuntimeException is throw.
It's the good way to initialise TLS in grpc?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

560
Rename getSslSocketFactoryForCertainCert to be more clear what cert is provided 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It isn't clear that the File should point to a CA certificate. It should be renamed to be clear.
createSslSocketFactoryWithCa or newSslSocketFactoryForCa or similar.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

565
Ignore initial HEADERS with a 1xx :status
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Headers with a 1xx status code in HTTP/1.1 are supposed to be ignored. In HTTP/2, there is a clear example of their usage.
I don't think 1xx status codes are all that important/common, but we should follow the spec.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

568
ChannelImpl's constructor shouldn't be public
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ChannelImpl is really expected to be constructed from AbstractChannelBuilder. Using the builder allows us to more easily change the arguments as time goes on.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

569
Stop using intrinsic locks in ChannelImpl/ServerImpl
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I originally used intrinsic locks for expediency. We were still designing quite a bit and we were still using Service. It seems swapping away from intrinsic locks makes sense, as we have no want/need to allow users to compose method calls into higher-order atomic calls.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

570
Are Interceptors are executed in an unintuitive order? 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems the first interceptor listed should most likely be the interceptor nearest the library. If there was a single mutable interceptor list then the current behavior would make more sense.
Note that on server-side the application and library are reversed, so reversing the order would make the first interceptor nearest the application.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

572
ServerServiceDefinition.getMethods should return a Collection 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now it has a return type of ImmutableList, which 1) requires a specific Guava implementation and 2) there is no need for order of the methods. For instance, in the current implementation we could use methodLookup.values().
Note that having "Collection" as the return type but actually returning an ImmutableList is fine though.
I could be convinced that returning a List or Set is appropriate, but if we return Collection now we could actually change to using a List or Set in the future and remain API compatible (since the class is final).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

573
The generated Service.methods() should return a Collection 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For similar reasoning to #572. Just limiting our API surface.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

575
Maven plugin instructions are incomplete 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The build instructions do not seem to work.  The maven-protoc-plugin is neither in Maven Central nor does it appear to be in the Sonatype snapshot repository.  Which repository should we use?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

577
Android interop test should create channel in background thread.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the host is not an ip address, addressing resolving will cause NetworkOnMainThreadException.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

578
OkHttpClientTransport.start should be async 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Connecting should be run in an executor. The main problem is that we currently can't create the frameWriter (an AsyncFrameWriter) until we have connected. The frameReader doesn't seem to be as big of an issue as we can just delay executing clientFrameHandler.
We could try to use the same SerializingExecutor that is used inside AsyncFrameWriter. We would need to lazily initialize some things used on that thread, but we would be able to guarantee that the connection is started before real writes occur and they would be automatically queued.
This would fix the true problem that is causing #577.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

581
Error zero_copy_stream.h file not found during ./gradlew installDists  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running ./gradlew installDists I receive the following error message:
In file included from /Users/me/projects/grpc-java/compiler/src/java_plugin/cpp/java_generator.cpp:1:
Am I missing something? I am just trying to get the example server up and running via run-test-server.sh.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

583
OkHttp's cancellation is not properly synchronized 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OkHttpClientStream.sendCancel() calls finishStream() from an application thread. But finishStream() calls transportReportStatus() without any lock held. That is not synchronized correctly, as transportReportStatus() may only be called from the transport thread (i.e., while lock is held).
It seems that all usages of streams is done while lock is held except for within finishStream() and data(). data() can actually race with finishStream() and end up sending DATA frames after the RST_STREAM. It seems it would be best to just have stream protected by lock, because it having its own synchronization isn't providing much benefit and isn't leading to correct code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

594
benchmark/ has two README.md's ·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The readme at "benchmarks/src/jmh/java/io/grpc/benchmarks/netty/README.md" is in the java source directory, which seems a poor place for a readme. It should be integrated into the README.md at "benchmarks/README.md"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

598
Memory leaking when using ALPN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We're experiencing a slow memory leak with 0.7.1 when using ALPN and TLS. The server is built and started with this code :
This is the alpn version that we're using.
Running a heap dump, we're seeing a huge amount of SSLEngineImpl objects stored in a concurrent hash map :
The server is running behind a Amazon ELB. This might be related since the Amazon load balancer would open connections every once in a while to the server and to ping and make sure the server is live. Unfortunately it takes a long time to replicate, the server would run out of memory after 36 hours or so, but it doesn't seem like the number of requests
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

602
Error message when connecting with TLS to closed port unhelpful
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I connect to a random port that is not open, the error message is not helpful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

605
BufferingHttp2ConnectionEncoder does not shutdown properly on channelInactive
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@nmittler
There is a nasty race condition during the handling of channelInactive in NettyClientHandler which goes a bit like this....
This reproduces for NettyClientTransportTest.bufferedStreamsShouldBeClosedWhenTransportTerminates with 5.0beta5.
Having streams being created as a side-effect of channel inactivation is undesirable. Potential fixes include
Reorder teardown in Http2ConnectionHandler.BaseDecoder.channelInactive so encoders are closed() before streams are closed.
Make BufferedHttp2ConnectionEncoder check channel.isActive() when trying to create streams.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

608
Make sure error status codes are consistent with other implementations
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

609
Implement proper reconnection 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Implies exponential backoff, etc.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

614
go-java interop test fails in large_unary and client_streaming 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The breakage started somewhere between 2015-07-07 and 2015-07-09. Commit efbb655 is likely the trigger. The bug is only in TLS test cases.
To reproduce:
Start Java server:
Start the go client in docker.
The client fails with
The server prints out this error:
WARNING: Stream Error
@ejona86 @nmittler
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

615
May need to tweak ordering of `complete()` and `close()`·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We shouldn't be getting the "successful complete() without close()" exception. It seems it is caused by another exception and us not cleaning up the stream well.
It isn't the point of this issue to fix the "flow control window exceeded" exception. That is being investigated elsewhere.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

616
During shutdown, Netty should gracefully wait for RPCs to complete before terminating the connection
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently it is just calling "channel.close();" which brings down the TCP connection and cleans up all the RPCs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

617
Recommended IntelliJ code style settings are out of date
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I downloaded and imported the GoogleStyle code style settings xml, as recommended in Contributing.md. It doesn't seem like this project and its checkstyle are actually conforming to those style settings (which is fine, I like the prevailing gRPC style better!) A few things in particular keep coming up:
Method argument wrapping: GoogleStyle has method call arguments and declaration parameters on the next line aligned to the opening paren. This is configured in Code Style > Java > Wrapping and Braces > Method declaration parameters > Align when multiline, as well as the same option under Method call arguments.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

620
OkHttp should use SSLSocketFactory.getDefault() by default
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should default to using TLS. Right now setting sslSocketFactory enables TLS. We should have a separate option for enabling/disabling TLS. It could easily be a boolean, but we might choose a enum to expand it later; either way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

622
AbstractStream should enforce calling thread
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In AbstractStream, there are several javadoc comments that read:
"This must be called from the transport thread, since a listener may be called back directly."
While this is informative, it would be even better if it was enforced.  It would be a good idea to call Thread.currentThread().getId(), or some similar check to make sure that the transport thread is actually the one making the call.  In cases where holding a lock is tantamount to being threadsafe, checking Thread.holdsLock() would also be possible.  Ideally these cases could be wrapped up in some sort of assertTransportThread() method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

626
OkHttpClientTransport.newCall should be async
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our API is async, and so doing blocking for MAX_CONCURRENT_STREAMS is breaking that. We should go fully async.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

627
Redundant/different default window size used in okhttp 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DEFAULT_INITIAL_WINDOW_SIZE and DEFAULT_WINDOW_SIZE
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

634
Use shared scheduler for ServerImpl deadline support 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#576 was merged slightly before #619, so we are able to use a single thread for deadlines on server-side and client-side. That isn't super-important, since we don't expect more than one server generally, but could is still maybe a nice-to-have. At the very least, the TODO could be removed if we decided not to bother.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

635
Consider renaming DUPLEX_STREAMING to BIDI_STREAMING
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I thought a while back it was decided to use "bidi" or "bidirectional" streaming to describe a call that has both server and client streaming. I appers C, C++, Node.js, Ruby, and PHP use "bidi." It appears C# uses "duplex." It appears Go did not define the concept. I couldn't find what Obj-C and Python use.
We would need to change it in ClientCalls, ServerCalls, and MethodDescriptor.MethodType.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

636
Catch exceptions thrown by Executor.execute
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
direct executor lets RuntimeExceptions pass through the call stack. We need to defend against that in places we would permit direct executor. Even without direct executor, execute can throw with rejected exception, so it is really a case we should handle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

637
Rename "payload" to "message" 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Call has onPayload and sendPayload. Such things should use "message" instead; little sense in having different names for the entity.
We should try to maintain backward compatibility for a bit for this. We can simply make the new "message" versions of the methods and have the new versions call the old versions. When we remove the old version we make the methods abstract on Call.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

639
ServerCall.onCancel should not be called for server-initiated close(CANCELLED) 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For reasons possibly lost to history, we decided to notify the server's onCompleted after the server completed with non-OK status codes, except for CANCELLED which notifies onCancel.
For whatever reason CANCELLED triggers onCancel, DEADLINE_EXCEEDED probably should as well. However, it might be good to re-discover the reason for the behavior, and maybe only call onCanel if there was an error.
I don't believe we are following the documentation today. It seems AbstractStream only triggers onCancel when an error occurs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

641
Are GRPC support server sends messages to the client driving？
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello everyone,sometimes I want to send something from server to client directly,not response by client call request,whether GRPC supports such operations currently？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

645
Cannot find symbol makeImmutable() and isMutable() at compile time 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I tried to compile my proto with Maven using the configuration reported in the how-to:
However I managed to get it work only changing to alpha-2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

646
Fix flaky OkHttp test 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We're seeing an OkHttp test fail randomly, with the output below.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

647
implement health checking service 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
defined in "gRPC Health Checking Protocol"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

649
Replace Metadata.Trailers and Metadata.Headers with just Metada
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Headers, path can be removed (just use a different MethodDescriptor; if we really need it it the future, it can be added to CallOptions) and authority can move to CallOptions. At that point, there isn't a distinction between headers and trailers and we can just have "Metadata".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

650
Implement oauth2_auth_token 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't know if any API additions need to be done to make this use case easy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

651
 Server reflection service
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

653
Q: How to declare rpc method without input and returns messages?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is it possible to define rpc method without input and returns messages?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

658
Allow using in-process transport without the registry
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to avoid the registry when you are able to pass objects around. That prevents the need to have to determine a unique name. The most obvious case is in tests, but it is actually just generally useful.
#640 had some discussion about options for doing it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

661
Change AbstractTransportTest to propagate server delay in request
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Commit 3e26b99#diff-cf14d5396f1bd6ab4bcf9c37e7756356R143 introduced the use of an AtomicLong to manage server delay and also created a server delay interceptor.  Neither of these are needed since the integration test request messages support propagating server delay.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

664
Java warnings in Context API 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In lookup method: found raw type: io.grpc.Context.Key
missing type arguments for generic class io.grpc.Context.Key
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

668
Invert User-Agent order so application-provided string comes first
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
RFC 7231§5.5.3 says:
By convention, the product identifiers are listed in decreasing order of their significance for identifying the user agent software.
Combined with the example, it seems that we should put the application-provided string first.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

681
Attaching Metadata to error Status responses... 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not sure what the "best practice" is for returning application-level error information (would be very useful to understand Google's own internal practice for guidance), but certainly one approach is to attach trailing headers with application error information to error responses. Setting additional headers via thread-local using a server interceptor seems easy enough, but for client-side it seems particularly awkward capturing metadata on a per-call basis using an interceptor. I see examples in MetadataUtils for capturing "last set headers" on a stub or channel but this is only useful for testing and cannot capture on a per-call basis. Other option would be to use the async stub and a thread-local to pass the metadata information along to StreamObserver.onError() but this loses the convenience of using the blocking and future stubs. I'm not sure if the same approach works for a blocking or future stub since the listener may be invoked in a different thread.
Will the context api once fully integrated make this easy, or would it make sense to have a way to "attach" metadata to a Status object (perhaps this would be desirable anyway for convenience)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

687
Fix UNKNOWN status without description
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should basically always provide a description, so that users have a hope of distinguishing whether an error is local or remote. The NettyClientHandler should be converting the HTTP/2 error code to a status.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

689
Switch ALPN/NPN to advertise only h2 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

693
android-interop-testing fails to build due to lint failures 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The installDebug task works, but the build task does not. It seems like some of the warnings could be ignored (like literal strings), but some other ones need to be properly dealt with ("NewApi: Calling new methods on older versions").
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

694
Double-closure of call during interop tests
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I find it in the stderr of the test report of Netty, Netty local channel, and OkHttp. I see it printed out to my console once, so I think that may be from the InProcess test.
This exception very likely means we have a bug and are double-closing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

696
In-process transport deadlock during shutdown 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Simultaneously shutting down both server and client sharing the same in-process transport can lead to a deadlock. During server shutdown, the transport lock is held while calling transportShutdown on the channel listener, which attempts to lock the channel. At the same time, channel.shutdownNow() holds the channel lock while also trying to lock the transport which leads to a deadlock:
Found one Java-level deadlock:
Found 1 deadlock.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

700
Pass URI to Credentials.getRequestMetadata
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServiceAccountJwtAccessCredentials needs the URI, or requires the user to specify it ahead of time. Specifying it ahead of time is a pain and hard to know which strings are needed.
We will need to add a way to get the scheme and authority from ClientCall or Channel.
@anthmgoogle, FYI. @louiscryan and I agreed on this and have a gRPC-integration solution in mind. That means we will soon always be specifying the URI and passing the defaultAudience would no longer be necessary for our usage.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

702
compute_engine_creds and service_account_creds failing 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
They were added in 926a2c1 and ac4952c, but since 131ba5d the tests look like they have been failing.
@madongfly, do you want to fix it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

704
Implement per_rpc_creds 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

705
Implement timeout_on_sleeping_server ·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

706
Implement unimplemented_method 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

713
ServerEssentials needs more Javadoc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

714
Core gRPC package needs documention·
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The default javadoc generated is missing package level documentation
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

715
AbstractChannelBuilder should be renamed AbstractChannelImplBuilder
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is to match ChannelImpl.  If ChannelImpl gets renamed in #680, it should be updated accordingly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

716
Create a grpc.internal package 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some classes that should not be part of the public API should be moved to an internal package.  Additionally, grpc.transport should also be moved to grpc.internal.transport
This shouldn't be api breaking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

717
Change the javadoc in MutableHandlerRegistry to not say Impl 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is already a MutableHandlerRegistryImpl, the javadoc on MutableHandlerRegistry is somewhat confusing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

718
Remove All Deprecated Classes before Beta 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are a number of classes in core that are Deprecated.  Since it will likely be impossible to remove them later without breakage, they should be removed now.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

722
Marshaller should use "deserializing" rather than parsing 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Javadoc verbiage in the Marshaller should use appropriate negative and positive words.
Questions raised:
Are parse() and stream() inverses of each other?  (group says yes)
Are serialize and stream inverses of each other?
Should Marshaller use marshal() and unmarshal()?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

723
Add javadoc to Context.CancellationListener  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

724
NanoProtoInputStream should be package private
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

725
Enforce character restriction for AsciiMarshaller 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AsciiMarshaller is used for HTTP2 Headers.  Since HTTP2 is more restrictive about what ascii characters can be used, AM should either be more clear about what characters are accepted, or enforce such restrictions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

726
ServerCall Handler should take a method descriptor rathe than a string 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

727
Move Authority from Headers to ServerCall
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This was a maybe thing to do, but creating an issue for it anyways.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

728
Review the generics on ServerCallHandler
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Maybe add a super and extends.   The context for this issue was how would a proxy be implemented.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

729
ServerInterceptor.interceptCall should take a method descriptor
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently it takes the name of the method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

730
SharedResourceHolder should be moved to the internal package 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

731
Add "set" and "add" method prefixes to AbstractChannelBuilder (e.g. addInterceptor) 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our API is currently not consistent between how builders are implemented.  Considering the pervasiveness of the set, get, add, with, and other prefixed methods of Proto and the existing stubby implementations, consistency should be swing towards these style methods.
Also, AbstractServerBuilder should be changed likewise
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

732
AbstractChannelBuilder.buildEssentials should have a javadoc  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

733
Delete ChannelEssentials 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since ChannelEssentials only affects transports, it should likely be deleted.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

734
Deprecated Channel.newCall should be deleted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Clients should use the non deprecated sibling newCall.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

735
ChannelImpl.awaitTerminated should be renamed awaitTermination 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This makes it make the spelling of ExecutorService shutdown methods.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

736
ChannelImpl.TIMEOUT_KEY should be private  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Possibly moved to the internal package.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

737
Remove ChannelImpl.ping (or possible mark it experimental
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It isn't clear that ping will be part of the long term gRPC interface (and is easy to add back in later if needed).  Either remove it or mark it experimental.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

738
Deprecated inner classes of ClientInterceptor should be removed  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

739
CheckedForwardingClientCall should cancel delegate on failure 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should also document whether it cancels or not, even if we end up not cancelling the delegate.
@ejona86 do you remember if there were reasons to not do this?  If so, are they stronger than the reason that cancelling should still be done?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

740
Add @Experimental to Context 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Or add some other way to denote that Context is still being tried out, and may change.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

741
Consider shortening generic names (BuilderT, RequestT, MethodDescriptor<>, ServerCall<>, ServerCall.Listener, ServerMethodDefinition etc.) 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are a lot of places where the generic parameters are kind of long, and could be made more concise without surrendering readability. The classes listed in the title are some but not all of classes that could benefit from this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

742
Metadata.Key.asciiName should be private
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Because the returned value is mutable, it should be limited to being modified by our own code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

743
Remove second MethodDescriptor.create method
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
currently there are two methods, one that takes the fully qualified name and one that takes the service and method name.  Since the rest of core is using the fully qualified name, the second create method doesn't need to be part of our API.  (and can be easily added back if there is demand).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

744
SerializingExecutor should be moved to be internal  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

745
Maybe remove Server and rename ServerImpl · 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It may be worth keeping Server as a base to ServerImpl (in order to add methods later on like getServerAddress)
This was a contentious issue, but needs to be resolved before going beta.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

746
ServerImpl.awaitTerminated should be renamed awaitTermination · 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the same as the change in #735
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

747
Make ServerCall.Listener methods no ops 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some Listeners may not care about implementing every method.  Thus, ServerCall.Listener methods should provide No-op default methods.  This has the downside that users of this class may not override correctly, or miss understanding how to listen.  However, since this is an advanced api, it may be reasonable to ask clients to understand how this class works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

748
Make ClientCall.Listener methods no ops  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Same issues raised in #747
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

749
Make ServerServiceDefinition.getMethod private · 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This method was only intended for internal use.  ServerServiceDefinition.getMethods should be used instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

750
Remove  Status.OperationRuntimeException and Status.OperationException  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These are deprecated in favor of StatusException and StatusRuntimeException
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

751
Add javadoc to clarify equality on Status
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Are Statuses equal based on code, code and message, or even as far as the throwable?  The javadoc for equals should clarify this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

752
Fix javadoc on Status.asException 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86 I believe you asked for this, but I am now fuzzy on the details of why. Assigning to you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

759
okhttp: using pending stream to queue writings before the connection is connected. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently we use the serializing executor to implicitly queue writings before the connection is connected.
As we've added an obvious queue inside pending stream, using it to queue writings during connecting makes more sense.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

760
okhttp: pending stream should be cancellable. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current implementation will throw a NPE
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

765
Flake: Cannot transition phase from STATUS to MESSAGE · 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in https:
Not much to go on. This can just track occasions that we see it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

770
Set up and host gRPC API docs for beta in gh-pages branch · Issue #770 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

779
how to get the connect channel  on the server side · Issue #779 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
on the server side ,how to get the netty connect channel?I want to hold all the connected channels in my service. because
1: I want broadcast message to client
2: use username/password authentication by my server only once when the client connects for the first time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

782
okhttp: startPendingStreams() does not check goAway == true · Issue #782 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This can cause us to create new streams after we have received GOAWAY
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

785
Promote OAuth2 service account to Jwt Access credentials · Issue #785 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Application Default Credentials can return Oauth2 service account credentials. gRPC can use more efficient JwtAccess credentials in place of this if no scopes have been specified. This tracks logic to detect this case and "promote" the credentials to JwtAccess form with the same identity properties if the OAuth2 form is passed in for use by gRPC.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

786
okhttp: pending stream is broken due to stream id check. · Issue #786 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OkHttpClientTransport.mayHaveCreatedStream() checks the stream id less than the nextStreamId, but the nextStreamId is not increased yet when the pending stream is being started.
And OkHttpClientTransport.mayHaveCreatedStream() is wrong when the stream id greater than Integer.MAX_VALUE - 2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

789
Simplify Netty pipeline using Buffering handler · Issue #789 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current pipeline configurations using one of the buffering handlers (tls, plaintext, etc.) are rather complicated and it's not always clear which handlers will handle exceptions in various cases.
We currently add the buffering handler and the HTTP/2 handler at startup. The buffering handler holds any writes until the startup handshake (e.g. SSL/TLS) completes, at which point it directs all buffered writes to the HTTP/2 handler. While those writes are occuring, the buffering handler stays in the pipeline (this is due to threading behavior of Netty WRT writes occuring outside of the event loop). If any problems occur while those writes are taking place, exception handling could occur in either the buffering handler or the HTTP/2 handler.  It would be desirable to guarantee that exception handling can occur in only a single place at any point in time.
Proposed change:
Part 1): Add a ChannelHandlerAdapter as the last handler in the pipeline. Netty has a race condition when writes occur from outside of the event loop.  The last ChannelHandlerContext is extracted in this thread and then the write is called. If however, the pipeline is changed between when the context is obtained and the write occurs ... badness ensues. As a workaround, there is some hacky code in the buffering handler to account for this race. A better solution to this problem would be to simply enforce the existence of a handler at the tail of the pipeline which never changes.  This will just be a pass-through, but must implement the write method (this is to avoid another Netty gotcha, where it will skip handlers if it has determined that they are uninterested in the event).
Part 2): With the handler from Part 1 in place, the installation of the buffering and HTTP/2 handlers can be modified to a replace.  Initially, only the buffering handler is installed (not the HTTP/2 handler). When the startup handshake completes successfully, the buffering handler will replace itself with the HTTP/2 handler, and then empty it's queued writes to the HTTP/2 handler.
In this way we guarantee that only one of these handlers exists in the pipeline at a time.  Failures due to the initial handshake will be handled by the buffering handler. Failures due to writes will always be handled by the HTTP/2 handler.
@ejona86 FYI
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

797
Unable to compile gRPC codegen plugin · Issue #797 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I encounter the following error when I tried to do a gradle build from windows command line.
*** Skipping the build of codegen and compilation of proto files because skipCodegen=true
FAILURE: Build failed with an exception.
Where:
Build file 'D:\grpc-java-master\compiler\build.gradle' line: 12
What went wrong:
A problem occurred evaluating root project 'compiler'.
Could not find property 'libraries' on org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler_Decorated@5e746d37.
Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output
BUILD FAILED
Total time: 4.01 secs
Do I need to explicitly set the classpath in order for Gradle to understand property 'libraries'?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

798
Implement Connection Backoff Interop Test · Issue #798 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

799
Discuss StreamObserver · Issue #799 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
abstract class?
rename to Observer/do we are how closely it matches RxJava?
onValue -> onNext?
just depend on RxJava for stub?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

802
Skip io.grpc.internal in javadocs · Issue #802 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This would reduce the noise of the JavaDoc and discourages people from using APIs they shouldn't.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

805
Latest build seems to require Java 8 · Issue #805 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When building the latest from master, I see an error in the stacktrace indicating that it's looking for Java 8 classes:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

806
Release instructions should specify minimum docker version · Issue #806 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The default docker in the apt repos for Ubuntu 14.04 includes 1.0.1, which has some bugs that prevent releasing.  A known working version is 1.7.1, so we can probably just specify that one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

814
HelloWorld example referencing to io.grpc.stub.Calls.asyncUnaryCall · Issue #814 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I tried to create a new project to include the HelloWorld example provided in the git,
All else is fine, except that GreeterGrpc is referencing to:
I am referencing to the following libraries which I have built using the grpc-java and protobuf-3.0.0-alpha-3.1:
I did a search and understand that the missing classes are existent in grpc-all-0.7.1.jar.
How can I overcome this problem? I want to be able to generate classes from .proto files that are compatible with the above libraries.
Appreciate any advice or help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

817
android-interop-testing doesn't build · Issue #817 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With the renames to packages, it is now broken. I expect that the generated code needs to be regenerated as well (for other reasons).
We should backport the fix to the 0.8.x branch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

821
Make interceptors an abstract class? · Issue #821 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
They are an interface today. We can add other interfaces later, but would need instanceof checking in ClientInterceptors/ServerInterceptors to enable features.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

824
Prevent using metadata with invalid keys · Issue #824 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should restrict the characters that are permitted in keys, as we have no way to send many characters (like colon, unicode, etc).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

829
Call ClientTransport.Listener.transportReady() in a more appropriate time. · Issue #829 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently we call it after the TCP connection is connected, we should call it after receiving the settings frame, so that we know for sure that the server accepted the connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

831
StatusRuntimeException: INTERNAL: Invalid protobuf byte sequence · Issue #831 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A user of Cloud Bigtable reported a bug on a really large streaming response: googleapis/java-bigtable-hbase#407.  Any advice on how to address the stack trace below?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

832
Provide a way to set client side proto size limit. · Issue #832 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cloud Bigtable has server size proto message limit of > 64MB. The current size limit on the client size is 64MB (default) in CodedInputStream.java. CodedInputStream.setSizeLimit() can be used to override the default value. Cloud Bigtable would like a way to set the proto message limit on the client side so that users can work with larger data set.
Related reported issue: googleapis/java-bigtable-hbase#407
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

838
Mark Compression API @Experimental · Issue #838 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some pieces of compression are already checked in to master. There is a question if they will be api-stable in time for beta. We need to do something with what is checked in to release. Determining whether that is revert the changes or mark the API as @Experimental is the point of this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

839
Add a "comment" attribute to ExperimentalApi · Issue #839 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We can attach link to the issue, doc or issue in there.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

842
gRPC SSL Examples · Issue #842 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Please advise on where I can find  java examples on client-server authentication for SSL?
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

848
Reconnect interop test is broken. · Issue #848 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting test:
Test failed!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

849
Travis fails due to un-run codegen · Issue #849 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
no changes added to commit (use "git add" and/or "git commit -a")
Error Working directory is not clean. Forget to commit generated files?
The issue seems caused by an incomplete rebase with #826. The modified code-generated file just needs to be committed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

853
Grpc client not invoking gRPC call after establishing SSL handshake (Using ALPN) · Issue #853 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It seems that the SSL handshake is successful when the client try to establish a connection to the server. The log ends with the following at server-side:
while the client side log ends with:
However, after some tracing, the RPC methods that were invoked by the client, seemed to be stucked at  getUnchecked(Future future) in io.grpc.stub.Calls at this line where it does return future.get();
The client code to call the server is as follows:
I also amended the implementation of TestUtils loadCert method to the following:
Is there something that I might have missed out?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

854
{Channel,Server}.awaitTerminated should wait for application to complete processing · Issue #854 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As we discussed, we were going to have awaitTerminated() wait until all application notifications execute. We can achieve that by tracking number of unclosed calls (clientcall or servercall): when creating a new call register it, and after the application listener's close is called de-register it. In awaitTerminated it would wait for the registrations to become empty/zero.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

857
MessageDeframer stalled logic needs review · Issue #857 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently there is a bug that results in the MessageDeframer not being stalled when stream is being closed (in error scenarios), resulting in the stream listener not being called immediately.  Specific lines of review include:
return unprocessed.readableBytes() > 0 || (nextFrame != null && nextFrame.readableBytes() > 0);
And a proposed change (WIP):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

859
:grpc-protobuf:test fails frequently on Travis. · Issue #859 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

870
GrpcSslContext bug for mutual authentication  · Issue #870 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
My 1-way SSL authentication is working with the codes below, however, it doesn't seem to work for 2-way. I understand that by declaring the appropriate SslContext, we should be able to enable mutual authentication. I have already invoked the appropriate keyManager/trustManager, any idea why the mutual authentication did not take place?
I followed the steps to set up jetty ALPN at
Upon inspection of the SSL debug logs, I noticed that the CertificateRequest message (as stated in http), was never sent to the client to initiate the Client Authentication.
An excerpt of my server log is as follows:
Am I missing out something? Or is it an inherent bug in gRPC?
Appreciate any advice on this problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

871
Determine API stability story for Android · Issue #871 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For Android, we are considering alternative transport implementations, for example, Cronet. That would imply we may not support OkHttp in the future. We need to be able to communicate the API stability of OkHttp's presence.
One possibility is that we have an Android-specific class that is able to choose the "correct" transport to use on Android. We would have to communicate that using OkHttp directly would not be API stable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

873
Jmh Benchmarks don't work · Issue #873 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
gradle :grpc-benchmarks:jmh
Trying to run that results in a bunch of errors printed out to the screen.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

874
Design Auth to combine normal credentials with TLS creds · Issue #874 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a want to guarantee that credentials are treated as a whole to guarantee invariants. For example, it is not appropriate to send a JWT over an unencrypted connection.
There may be other constraints that are missing, but it is not fully clear yet. I'll update the issue as more is known.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

875
InProcessTransport doesn't call onReady · Issue #875 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The in-process transport supports flow control and supports isReady(), but it never calls onReady(). It seems to be just an oversight/bug. Since the in-process transport connects immediately, onReady() should probably be called on the client immediately in newStream().
Locking will be a little interesting since for a single request() both client and server listeners may need to be called (because numMessages can be > 1). It looks like {client,server}Requested() could maybe return a boolean for whether {client,server}Requested > 0 && {client,server}Requested <= numMessages, which would imply onReady() should be called.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

879
Set Minimum Guava version to 18.0 · Issue #879 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Google internally was stuck using Guava 14.0 for legacy reasons, but it appears that the restriction has been lifted.  We should set the minimum supported guava version to 18 since the older one had bugs and  performance issues.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

887
OkHttp: race between sendCancel and sendFrame. · Issue #887 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If sendCancel is called (by timeout for example) before the stream is started, a following sendFrame will cause a NPE:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

895
Mark generated MethodDescriptors @ExperimentalAPI · Issue #895 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For Android, we may want to lazy-create MethodDescriptors in order to prevent cascading of static initializations of all dependent protos for all methods. That would mean making accessor methods instead of static fields.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

896
Upgrade to protobuf3-b1 · Issue #896 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's released. It's on Maven Central. It's required for beta.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

897
Trash HandlerRegistry.Method · Issue #897 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We only need the ServerMethodDefinition. ServerServiceDefinition requires a list of all contained methods, which would make it painful for proxies. So lookup should just return the method definition.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

898
Add authority to HandlerRegistry.lookupMethod · Issue #898 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should be possible to do virtual hosting; that requires authority. It would just be an additional string to lookupMethod (presumably as the first parameter).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

899
Move io.grpc.stub.StreamRecorder to testing package · Issue #899 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It really is only used in testing. I'm not wild about the class in general, but reducing its usage to tests addresses the primary concerns.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

900
Remove the hack that generates nano package names. · Issue #900 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should use a helper function from protobuf, which is more reliable, but not there yet (protocolbuffers/protobuf/issues/778)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

909
ClientAuthInterceptor should signal callers on 401s · Issue #909 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If clients are signaled of 401s, they can do clean up by, for example, invalidating Credentials by calling GoogleAuthUtil.clearToken(Context, String);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

913
Build failed with exception "Failed to apply plugin [id 'com.google.protobuf']" · Issue #913 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I compile protobuf and grpc "by hand" for my system. protobuf is version 3.0.0-beta-1. protoc is in the PATH, and the lib, include and pkgconfig directories are set in CFLAGS, CPPFLAGS, LDFLAGS, LD_LIBRARY_PATH, and PKG_CONFIG_PATH, respectively. The compile of grpc-java worked with 0.7.1 and 0.7.2, but fails with 0.8.0. Here the grpc-java build
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

917
Hit the frame size limit of 100MB. Any way to increase this limit? · Issue #917 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

922
Issues when generating server/client stubs from .proto files.  · Issue #922 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've generated and ran client and server stubs painlessly for python using
I've been trying t generate client stubs for android using
they seem to be classes inside the outer class? What am I missing here?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

924
Require content-type in Headers or Trailers-only · Issue #924 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
By the Spec:
Implementations should expect broken deployments to send non-200 HTTP status codes in responses as well as a variety of non-GRPC content-types and to omit Status & Status-Message. Implementations must synthesize a Status & Status-Message to propagate to the application layer when this occurs.
It appears that unsupported Content Types (such as "text/html; charset=UTF-8") can be returned with error information from some servers, which would be useful to propagate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

925
Create stable builders that use Netty, like is being done for Android · Issue #925 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"Default" ChannelBuilder is the current proposed name. This would need to be in its own artifact because it would depend on Netty. It's unclear what its artifact and package name should be.
This is necessary because we are marking Netty's builders as @ExperimentalApi; we need a stable API for client and servers to use.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

926
NettyServer prematurely releases worker event loop · Issue #926 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
777e928 causes flaky server shutdown, as the individual transports out-live the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

927
ReferenceCounted is useless · Issue #927 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
777e928 introduced reference counting for channel builders, but nothing ever does a retain(), making it useless.
I thought the original reason to propose having reference counting was so that transports would retain() their factory and then ChannelImpl would release() the factory immediately on shutdown(). As the transports shutdown they would each release() and any shared resources would naturally be released.
@nmittler, FYI
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

933
Tracking Issue for Handler Registry being experimental. · Issue #933 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We're currently marking all of the HandlerRegistries as ExperimentalAPI. We should decide on the appropriate interface and move toward making them public.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

935
Random Http2NettyTest.deadlineExceeded() failure. · Issue #935 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Saw this failure at https, may wroth taking a look.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

936
Avoid using Parser in Proto · Issue #936 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Swap to passing in MessageLite instead of Parser in ProtoUtils. This would allow optimizing startup time to avoid creating the parser (today we would create the parser, but in the future we wouldn't need to).
(less obvious, but may still be a good idea) Rename Parser to MessageNanoFactory (with newInstance() method). Similiar reasoning to above, but would need nano changes to make possible (but there are several options for nano changes that we could use)
1 should be for beta. If we want to do 2, it should be for beta, but if it slips, we'll just deal with it and not do it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

937
Replace use of ExecutorService with Executor in builders · Issue #937 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86
We don't depend on ExecutorService so we can downgrade the requirement here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

946
Support SSL mutual authentication · Issue #946 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reported by @megapowers
Hi all,
I am currently using gRPC 8.0 with ALPN and I am trying to implement a 2-way SSL authentication between a client and server.
However, upon inspection of the SSL debug logs, I noticed that the CertificateRequest message (as stated in https), was never sent to the client to initiate the Client Authentication.
An excerpt of my server log is as follows:
The code I am using at server is as follows:
Am I missing out something? Or is it an inherent bug in gRPC?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

950
When tcnative is enabled, OkHttp tests timeout · Issue #950 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It fails like https: . #949 reverted the change. It is unclear what the issue is.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

952
okhttp: Skip trash data for finished stream. · Issue #952 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Otherwise the remaining data would pollute the next read.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

955
Travis OOM · Issue #955 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
May be due to addition of Android build. It doesn't yet consistently fail, but we can use this for tracking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

959
Cannot compile Android targets · Issue #959 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to do a gradle build from a clean client, I get the following error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

965
Support using client and server with existing FDs · Issue #965 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the Java equivalent of grpc/grpc#3250.
I think this may just be Netty work; we could possibly enhance the epoll transport to have an address time that allows specifying the fd int directly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

967
Update examples in light of daemon threads · Issue #967 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the very least, the hello world server example is broken, because it exits immediately. It needs a call to server.awaitTerminated(). This was caused by the swapping to daemon threads in 07a7279.
As reported on StackOverflow.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

968
java.lang.NoClassDefFoundError: com.squareup.okhttp.internal.spdy.Http2 · Issue #968 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when launch to the following line[ HelloReply reply = stub.sayHello(message) ] , runtime exception occurs,java.lang.NoClassDefFoundError: com.squareup.okhttp.internal.spdy.Http2
Following the the MainActivity:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

973
Running ./gradlew build leaves behind a javadoc/ directory · Issue #973 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This makes it difficult to do a "git add ." command after running tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

974
Error during servers-side TLS negotiation leads to erroneous stacktrace · Issue #974 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to the fact that we always register the HTTP/2 handler on the server side, if a TLS error causes forced shutdown of the connection, the HTTP/2 handler also dumps a stacktrace which is not helpful and could be confusing to the user:
The first stacktrace is correct, but the second one is thrown by the HTTP/2 handler's deactivated logic.
We might consider waiting until the TLS negotiation succeeds before registering the HTTP/2 handler.  This should be safe since the server will not be sending anything until it begins receiving data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

975
Mark ServerCalls, MethodDescriptor.create, MethodDescriptor.Marshaller and a few others ExperimentalApi · Issue #975 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These are generally used by the generated code. There are some plans for doing Android-driven performance work on the generated code, and there are some options being discussed that would impact these APIs.
For beta, we've agreed that it is fine for generated code to depend on ExperimentalApi. For GA, that will not be allowed to be the case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

976
Use service provider for server-side  · Issue #976 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is effectively #961 for getting a ServerBuilder. It would only use Netty today.
Whether we extend the current ManagedChannelProvider to allow creating server builders or make a parallel path is up for discussion, but honestly we should just flip a coin and go with one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

981
VC++ building info seems out of date · Issue #981 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Visual C++ Protobuf link in ./COMPILING.md seems broken. The following Visual C++ section also needs some update with the default include and lib paths.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

985
StreamObserver.onError(Throwable t) hard to use or unintuitive · Issue #985 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For client calls with streaming responses, when could the error be a Throwable and not a Status?
It seems more fitting that onError(..) would take a Status instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

986
StreamObserver used also for unary calls · Issue #986 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
StreamObserver is used for all responses, even when the response is not a stream. To easier understand the generated API it'd be better if unary responses would be treated as such and have a different Observer that suggests that there will only be one response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

989
PARSER has private access · Issue #989 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using protoc-3.0.0-beta-1-win32 and protoc-gen-grpc-java-0.7.2-windows-x86_64.exe to generate code from a proto file. But the Grpc file has this line "io.grpc.protobuf.ProtoUtils.marshaller(grpc.grpcsvc.Grpcsvc.HelloRequest.PARSER)". Then java compiler complains because PARSER has private access in another generated file. Am I using the wrong protoc or plugin?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

991
Http2OkHttpTest.receivedDataForFinishedStream is flaky · Issue #991 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in: https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

994
Implement cork/uncork in client and server calls · Issue #994 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
By adding a cork/uncork to defer flushing messages we can significantly improve throughput for streaming operations when messages sizes are significantly smaller than the flow-control window
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

999
Possible race condition ServerImpl between start() and shutdown() · Issue #999 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe it may be possible if start and stop are called concurrently that the shared executor may not get released.  I'm not sure if this is an actual problem, but it does go against the @ ThreadSafe annotation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1000
Support starting a Server with basic TLS configuration · Issue #1000 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should be able to start a secure server using just stable APIs. There should be some way to specify the cert chain and private key.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1001
Swap examples over to stable builders for channel/server · Issue #1001 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1010
Simplify upgrade path for stubs toward using flow control · Issue #1010 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently do not expose flow control semantics directly in the stub. Inbound flow control implicitly "consumes" bytes upon returning from onNext.  Outbound is simply not exposed at all. As it stands, developers needing flow control would either have to rewrite their client to use the Channel API directly, or perform some tricks using interceptors (or handler registries on the server-side).
We need an easy way to allow developers who begin by using the stub API to upgrade their code to interact with flow control directly.
/cc @louiscryan @ejona86 @Scottmitch
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1012
C++ Server Response Content Type null · Issue #1012 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unary call for a blocking stub fails on Android at:
with:
Works fine after commenting out the check.
Skimming through the c++ server code shows content-type is not being set on the response?
Not sure where is the right place to raise this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1014
request() need to be documented as thread-safe · Issue #1014 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For both server and client
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1017
The run-test-server.sh exits immediately · Issue #1017 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After changing to using daemon threads by default, this script stopped working.  We need to update the server to keep alive until cancelled (e.g. ctrl+c).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1021
C++ doesn't send content-type · Issue #1021 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Although C++ should be sending a content-type, it currently isn't. We'll need to figure out our interop story for Java.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1031
Update tcnative version · Issue #1031 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Even though it doesn't directly impact our users, we should update the tcnative version used by our interop tests, etc.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1032
Fix Android example. · Issue #1032 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1038
Put Grpc codegen in nano package · Issue #1038 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should probably follow suit and append a "nano" package to our generated class unless the nano option is specified that disables the new protoc behavior.
@zhangkun83, WDYT? Since this requires regenerating the code, I'm fine with doing this post-Beta.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1046
Releases can be uploaded without signing being successful · Issue #1046 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We configure signing to be required, but it isn't working for some reason.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1047
Netty has many classes not marked @Internal · Issue #1047 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1052
Remove examples/protos? · Issue #1052 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not sure if anything are using them. They are confusing to people because it makes people think they need them in that location for their own project.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1053
netty: IOException should map to UNAVAILABLE · Issue #1053 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NIO can throw java.io.IOException: Connection reset by peer. In general, it seems that IOException would be UNAVALIABLE, although there are certainly outliers given the heavy overloading/abuse of IOException in Java.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1054
Address key protobuf performance issues · Issue #1054 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is something of a coverall issue and should be factored out into separate issues for each individual piece of work. Listed here are a number of areas for improving the interaction between protobuf and GRPC to improve overall performance and reduce memory pressure on the system.
In rough order of priority....

Implement some basic protobuf benchmarks independent of GRPC (scrape the web or extract Googles) as a framework for experimenting with optimizations
Provide the ability to have a 0-copy approach for writing out large binary sequences (byte buf, file region etc) to the transport without copying
Provide the ability to read protobufs so that they can be written out again with 0-copy for large sequences. This includes writes to transport and to files
Document a pattern for transferring a large binary sequence as chunks and utility functions to chunk & dechunk those to application code. File transfer is a common use-case here
Consider supporting deserialized protobuf backed by pooled buffers (speculative). Would require the notion of a releasable protobuf

@nmittler @ejona86 - Feel free to pile on / cc folks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1056
Is grpc-java stable enough to use in production environment? · Issue #1056 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, i notice that there were 5 releases for grpc-java, and Is grpc-java stable enough to use in production environment?
Thanks & Best Regards!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1059
Send a single SETTINGS frame from Netty · Issue #1059 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have an old TODO to update Netty once we upgrade to 4.1.0.Beta6 (which we have done): 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1060
Use Netty's buffering encoder · Issue #1060 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently use a copy of Netty's buffering encoder, we should switch to using theirs and deleting the grpc version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1061
grpc-java does not work with grpc-cpp anymore? · Issue #1061 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It used to work to run greeter_client.cc from grpc-cpp with HelloWorldServer from grpc-java, but this seems not to work anymore with grpc-0_11_0 release and latest protobuf anymore. There are multiple problems: first, to get HelloWorldServer compiled with the proto example file, I needed to fiddle with the java "package" in several places. After the compile worked, the client connects to the server but nothing happens. The remote method sayHello() seems never to return. Only when killing the server the client will finally return an (unsuccessful) response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1062
Issues with proto class naming, and service naming, in grpc-java · Issue #1062 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have two problems (or difficulties) when using the helloworld.proto from grpc examples.
(1) The proto-file is named helloworld (lowercase) and contains "package helloworld;" (also lowercase). But the derived grpc java class file is called "Helloworld.java" (first letter uppercase). This breaks my build instructions. In grpc-cpp the file stays lowercase. Why is grpc-java changing the name?
(2) The bigger problem comes from the name of the service rpc method. helloworld.proto advertises the service "rpc SayHello (HelloRequest) returns (HelloReply) {}", note the camel-case! In grpc-cpp the method consistently has the same name. But in grpc-java in HelloWorldServer.java, the method suddenly changes its name to sayHello (note the lowercase first letter). This is quite inconsistent and confusing. Could this be changed? Why is grpc-java meddeling with the casing?
To generate the java code, I'm using latest protobuf 3.0.0-beta-1:
/thirdparty/bin/protoc -I="/tmp/Proto" --java_out="/tmp/ProtoGenJava" --java_plugin_out="/tmp/ProtoGenJava" --plugin="protoc-gen-java_plugin=/thirdparty/bin/protoc-gen-grpc-java" "/tmp/Proto/helloworld.proto"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1074
Add at least one example of how to use TLS  · Issue #1074 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The example directories don't show how to properly set up a TLS connection.  Since this is likely the first place people look for how to set up a server, at least one of the examples (new or existing) should show how.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1076
Remove setDecompressor() from ClientStream · Issue #1076 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Method calls on ClientStream are supposed to be initiated by the channel layer or the application. setDecompressor(), however, is called from within the stream implementation when receiving headers from the server. It shouldn't be on the ClientStream public interface. It may make sense to only have it in an abstract implementation.
However, it may stay on ServerStream, because it's called outside of the stream implementation, when the server creates the stream.
@carl-mastrangelo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1080
Add protection against attacks using malicious protobuf messages. · Issue #1080 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It'd be good to to be able to specify the maximum message size on wire that the server tries to parse in order to protect from OOM errors.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1081
Investigate if Application protocols should be required · Issue #1081 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FYI: This is more of a collection of thoughts that an actual issue.  The existing behavior might actually be correct.
When doing HTTP2 over TLS, the spec says that the next protocol "h2" can be used when negotiating using ALPN/NPN.  Currently today, the netty server accepts any next protocol, as long as there is one.  Specifically, sending a next protocol of "gibberish" does not cause the server to fail the connection.  This is controlled by SelectedListenerFailureBehavior.ACCEPT in our GrpcSslContexts class.
Intuitively, it seems like if the wrong protocol is specified by a client, the connection should fail.  If no protocol is specified, it seems like the server should entertain the possibility that the client wants to speak HTTP2, and not fail the connection.
The spec indicates a limited set of TLS requirements, of which application protocol negotiation doesn't appear to be on the list.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1087
Eventually Support HTTP/1.1 Upgrade  · Issue #1087 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the spirit of playing nicely with an ecosystem of other HTTP clients, we should support a bare minimum upgrade path from an HTTP/1.1 client.
This is pretty low priority, but is part of the HTTP/2 spec.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1088
Many Netty public classes missing @Internal/@ExperimentalApi · Issue #1088 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1089
testNoDeadlockOnShutdown flaky since DelayedStream · Issue #1089 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in https(rebuild fixed)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1091
Use OpenSSL 1.0.2 on Travis · Issue #1091 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need 1.0.2 to have ALPN to test OkHttp against Netty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1092
Enable tcnative for unit tests in interop-testing; OkHttp should Assume ALPN available · Issue #1092 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
That will disable OkHttp tests if you don't have a new enough OpenSSL installed, but Travis will still correctly do the testing.
Depends on #1091
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1094
transportFailsOnStart flaky · Issue #1094 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seen in http (logs lost)

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1097
Exception not caught with Netty before plaintext handshake completes · Issue #1097 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported on grpc-io mailing list, a user saw this error. It seems the client was immediately disconnecting, but that is likely a separate issue. The server should handle it better though.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1099
implement timeout_on_sleeping_server interop test · Issue #1099 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1102
Redundant logging when connection failed. · Issue #1102 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
And SEVERE is too heavy for it.
It should be fixed in Netty, but create this issue for gRpc users tracking it.
Oct 05, 2015 2:00:16 PM io.netty.handler.codec.http2.Http2ConnectionHandler processGoAwayWriteResult
SEVERE: Sending GOAWAY failed: lastStreamId '3', errorCode '0', debugData ''. Forcing shutdown of the connection.
javax.net.ssl.SSLException: SSLEngine closed already
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1103
Headers are a major source of slowness · Issue #1103 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the metadata handling has a number of inefficiencies that materially affect performance.
Netty

We convert MethodDescriptor into Http2Headers for every call. Could be cached
We have no way of storing a validation result or derived value with a header cached by HPACK. E.g validating that the content-type is correct is done on the string value even though the value is effectively constant when emitted by HPACK.

Performance benchmark UnaryCallQpsBenchmark shows that header handling is ~10% of total CPU cost.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1104
Android studio fails to compile  · Issue #1104 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
on Android Studio 1.4, add grpc-java to gradle of android project, and there is no other lib in dependencies
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1108
OkHttpClientTransport.shutdown() not safe to call if never started. · Issue #1108 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a OkHttpClientTransport is created, and then shutdown without starting, it throws an NPE.  This is surprising behavior because other shutdown methods (such as on ServerImpl) are safe to call shutdown on at any time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1109
OkHttpClientTransportTest is overly strict in mock verification · Issue #1109 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the process of adding a test for OkHttpClientTransport, I found that mocked behavior is checked for on every test.  I attempted to add the first test that did not use mocks, but caused the test to fail.  This is because the @ After  annotation in the test does verifications on mocks regardless of the test.
This is a misuse of @ After annotations.  They are not part of the test, but a means to clean up state.  Even if every test does the same verification, it is still not appropriate to put verification code here, because it puts stress on every other test added later on.  Making it hard to add tests is something we do not want.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1111
transportShutdown() should be called before calling transportTerminated(). · Issue #1111 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With the changes of TransportSet, transportShutdown() must be called before calling transportTerminated().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1113
empty_stream interop tests fails against Go server · Issue #1113 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1114
Support NPN for OkHttp non-Android path. · Issue #1114 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This code path may never have a real user, but it will gain some convenience for running our tests against a server that only supports NPN.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1115
Sync the Android example back to internal · Issue #1115 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1116
Integrate cronet as a grpc Java transport · Issue #1116 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1122
Supporty unary retry · Issue #1122 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems to be a pretty common use-case.  We should support this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1125
Investigate using jdk8 Base64 encoder · Issue #1125 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Guava base64 Coder we are currently using has possible performance issues, and may not be present in some android situations that can't use Guava.  Investigate if the jdk8 speed up is enough to justify using it, or the android native coder.  There appears to be a Guava release that could address these coming up, but we may need a fix sooner.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1132
Pass transportFuture to DelayedStream · Issue #1132 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, when DelayedStream is created it ends up calling clientTransportProvider a second time. However, we already have a transportFuture available, we should just use it instead.
This was the second half of what was causing the #1131 flake.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1137
Implement gRPC LB client as GrpclbLoadBalancer. · Issue #1137 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1138
Propagate absent port from NameResolver to ManagedChannelImpl · Issue #1138 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a target URI doesn't contain a port, NameResolver should propagate this absence to ManagedChannelImpl, who can based on encryption is in use or not, select 443 or 80 as the actual port.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1139
Publicize ClientTransport · Issue #1139 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ClientTransport, which is currently internal API, is exposed via the LoadBalancer interface, which is public. ClientTransport needs to be public, and ClientStream also needs to be public because GrpcLoadBalancer will need to make RPC calls and decorate ClientTransport/ClientStream to attach LB tokens.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1140
Support alternative DNS servers in DnsNameResolver. · Issue #1140 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1141
Implement round-robin in SimpleLoadBalancer. · Issue #1141 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1142
Decide how to select a NameResolver for a URI. · Issue #1142 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have two options. Currently it's try-and-fail. The other option is keep a map that maps schemes to NameResolvers.
Quote from @ejona86 in #1134
My concern about this is that order matters and you won't notice if a scheme is double-registered. It also has no avenues for optimization because the registry is basically knowledge-less.
We can leave it as-is for now, but we'd need to decide on things before it goes stable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1144
Make the total headers size limit configurable. · Issue #1144 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We may want to have our own limit, but before we decide the number, should just remove the current limit.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1146
ContextTest.innerDeadlineCompletesBeforeOuter flaky · Issue #1146 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1147
OkHttpClientTransportTest.windowUpdateWithInboundFlowControl flaky · Issue #1147 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1148
OkHttpClientTransportTest.receiveDataWithoutHeaderAndTrailer flaky · Issue #1148 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1149
OkHttpClientTransportTest.cancelStreamForDeadlineExceeded flaky · Issue #1149 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1151
Scala support · Issue #1151 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would a codegen plugin that generates canonical Scala stubs on top of the Java runtime be an appropriate addition to this repo?
Is there work on official gRPC Scala support being done elsewhere?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1157
Make test cover ClientCallImpl.DelayedStream · Issue #1157 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DelayedStream is mostly uncovered by tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1160
The wrong class name gets generated by Gradle task in an Android project · Issue #1160 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using grpc for one of my Android project. I create proto folder. Added the classpath for protobuf plugin. and this task in build.gradle.
When I built the project - the contents of the proto folder were:
But ServiceGrpc.java was refering to ServiceOuterClass somehow. When I manually renamed ServiceOuterClass with Service, everything seems to be working fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1164
Http2NettyLocalChannelTest.deadlineExceeded flaky · Issue #1164 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1168
OkHttpClientTransportTest > windowUpdateWithInboundFlowControl is flaky · Issue #1168 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1173
Idea: Expose Metadata from Status · Issue #1173 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Status object is almost always created from Metadata; it would be logical to expose the Metadata from status.  This would make it possible to get access to the Trailers from a call without resorting to using Context or an Interceptor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1175
Connection window should auto-refill · Issue #1175 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider an application with 2 streams, A and B. A receives a stream of messages and the application pops off one message at a time and makes a request on stream B. However, if receiving of data on A has caused the connection window to collapse, B will not be able to receive any data and the application will deadlock. The only way (currently) to get around this is to use multiple connections for the streams, which would needlessly complicate the application code.
The C implementation already solves the problem by auto-refilling the connection window, so Java and the other languages should just follow suit here.
Created PR netty/netty#4423 in Netty to support configuring the local flow controller to auto-refill.  Until that's in, we should probably just set the connection window to MAX_INT for now.
@louiscryan @ejona86 @ctiller @a11r
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1181
netty: IOException during connecting should map to UNAVAILABLE · Issue #1181 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've seen an UNKNOWN status with cause of io.netty.channel.ConnectTimeoutException: connection timed out. This should be UNAVAILABLE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1188
Any transport future in ClientCallImpl should be cancelled if the call is cancelled · Issue #1188 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Before the NameResolver returns any resolved address, the LoadBalancer issues blank transport futures to the channel, keeps track of them and will fulfill them when NameResolver returns something.
If the NameResolver takes too long or even forever to return something, the calls may exceed their deadlines, then be cancelled and may be retried. Today cancelling the call won't cancel the transport future it holds, this will become a leak in the LoadBalancer who keeps track of the blank transports. We will need to:

Change TransportSet.obtainActiveTransport() to return a new future each time. Today it returns the same future for all requests. Sometimes the future is passed directly to the call, and a call cancelling a future will unintentionally fail other calls.
Change ClientCallImpl to cancel the transport future when the call is cancelled, including deadline-exceeded.
Make sure the LoadBalancers remove cancelled blank futures from the tracking list.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1189
Can not build grpc-java in Linux Centos 7 · Issue #1189 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I need to build grpc-java in Linux Centos 7 but had a problem, please help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1190
Implement Happy Eyeballs · Issue #1190 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With the addition of load balancing, the interaction with OkHttp connection handling has gotten a bit strange. OkHttp is currently ignoring the resolved address of the DnsNameResolver. In order to use the IP address returned by DnsNameResolver we would need to implement Happy Eyeballs. We will want to use Happy Eyeballs with Netty as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1191
Implement idle channel state or swap back to lazy TCP creation · Issue #1191 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With the addition of load balancing we are now actively reconnecting. If no RPCs are occurring on the channel we really want to drop all TCP connections, especially on mobile. Since GFE and other servers are likely to shut down idle connections, swapping back to lazy connection creation should be "good enough" for now, in case that is easier than implementing idle detection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1192
Improve usability of multi-valued ASCII keys · Issue #1192 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For keys like Grpc-Accept-Encoding ["gzip", "deflate"] is semantically equivalent to ["gzip,deflate"]. We should have a utility or tweak our API to make encourage applications to handle multi-valued metadata correctly.
A separate but related issue is that users of Keys have to be aware of whether the key is for ascii or binary, since you are likely to use the get() methods differently between the two. It might be good to have some "meta" key that could behave identically between the two.
For example, we could have something like:
Which could be used as a special key:
The key would always act as if there was only one value, and would typically be used with Metadata.get().
I'm not 100% sold on the example solution, because it seems we keep adding more and more layers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1196
Java to Java RPC calls, without the proto IDL files and Proxy apart from stub. · Issue #1196 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Java, the builtin RPC mechanism "RMI" and serialization mechanism is very old, and has many severe issues with timeouts, soft versioning, etc. So, with distributed java to java services which happens naturally when the services are evolved over time, the following kind of API is preferred which is a Java Proxy based instead of stub.
For Java-to-Java calls, Building stubs and IDL files are unintuitive and extra efforts, better to make use of marking the interfaces with annotations.  I searched and found a similarly implemented library called  Swift for Thrift . It would be great if grpc supports annotation based one,
I feel it is easier and simple, with Java proxy apart from stub. We will be able to always generate the proto IDL files from the java source for RPC with other languages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1205
Context deadline propagation should cascade · Issue #1205 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a server receives an RPC with a deadline, does work and issues RPCs as part of the contract of fulfilling that outer RPC then those inner RPCs should carry the outer deadline to the downstream servers.
Deadlines should be propagated explicitly in metadata for logging purposes as well as being propagated by cascading cancellation via Context.
Relatedly it should be simple for servers to opt out of deadline propagation when use-cases demand it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1206
Resolve whether context cancellation propagates depth-first or breadth-first · Issue #1206 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current context cancellation order is unspecified.
Suggested algorithm is breadth-first so that higher level work is cancelled before lower-level work. The primary reason for this is that if higher-level work is cleanly cancelled then it can cleanly handle / ignore errors bubbling up from the cancellation of lower-level work. In depth-first it would be hard for higher-level work to distinguish between the failure modes bubbling up from lower-level work.
@lukesandberg
@adriancole
@ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1211
Target name processing doesn't handle IPv6 well · Issue #1211 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
80 would appear to be a valid target name, but doesn't work with our current naming. would work though. We need to define what should happen with IPv6 addresses and make any necessary changes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1212
How should basic LB interact with reconnect · Issue #1212 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a server is available on both IPv4 and IPv6, then it will have two addresses and we will perform reconnects on the two independently. That doesn't seem too bad. Although if one of them works and the other doesn't some RPCs may occasionally (say, because we got a GOAWAY on the good connection) be routed to the bad IP's transport where it might get "stuck" for a while before erring. This could probably be solved by waiting until transports are healthy before assigning RPCs.
Some hosts have many more IPs, such as google.com which has 11 IPv4 and one 1 IPv6. Having 12 TransportSets each trying to connect with independent backoff seems "not great." It's unclear what the behavior should be though. Maybe combine the backoff between all the IPv4 addresses and pick the next for each attempt?
Note also that there is interaction with #1191, since any TransportSet used once will effectively forever continue trying to connect, even if we have other transports to the same host that are healthy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1215
Okhttp transport should use resolved address. · Issue #1215 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, OkHttp transport resolves the host name by itself, the underlying implementation tries all the resolved address one by one, until one connected successfully.
We should only connect with the passed-in resolved address, and shutdown the transport if it can not connect, let the load balance channel layer creates a new transport with a new address.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1216
grpc OOME and NPE in simple JMH benchmark · Issue #1216 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First I post here and put all things in this gist.
The problem is the memory goes very high, sooner or later will cause OOME, and there is a strange NPE
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1221
Consider allowing clients to provide cancellation details · Issue #1221 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When designing Context we decided that cancel(Throwable) could be useful for debugging where a cancellation came from. In general, I'm not a fan of using that information for changing behavior, but it is very helpful for debugging.
Currently ClientCall.cancel() does not accept any arguments, because there is no way for the client to inform the server of any reasoning (and aren't too interested in that scenario, because servers can't really trust clients too much). When reviewing #1203, I saw that Context auto-propagation can make it quite opaque why a call was cancelled. We could have ClientCall.cancel(String desc, Throwable t) which will end up notifying the application onClose() with a Status.CANCELLED.withDescription(desc).withCause(t).
That would allow us to propagate a Context's failure exception as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1224
Implement QpsWorker for Java · Issue #1224 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
go/grpc-performance-testing-setup
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1225
NPE in ProtoInputStream.drainTo · Issue #1225 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like if you call drainTo() twice then it will NPE. Calling drainTo() twice is sort of strange, so I wouldn't expect this to be critical, but we should still not NPE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1226
A failing test deletes Messages.java · Issue #1226 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running ./gradlew build, if a test fails part way through protobuf-nano/src/generated/test/javanano/io/grpc/protobuf/nano/Messages.java  is deleted.  This causes noise when running git status or other git commands.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1228
OkHttpClientStream should coalesce pending flushes · Issue #1228 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In OkHttpClientStream.start(), there may be pending data to write.  If multiple of the writes ask to flush, they should  be coalesced into a single flush at the end.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1237
ScheduledExecutorService won't log the exception if the task throws · Issue #1237 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unlike Executor.execute(), which lets the thread's default exception handler to log anything thrown from the task, ScheduledExecutorService.schedule() expects you to get the exceptions from the returned ScheduledFuture, and will not log the exceptions.
As we want to log everything thrown from inside the executors, and don't want to check the ScheduledFuture each time we use ScheduledExecutorService, we probably need to create our own ScheduledExecutorService that logs the exceptions and avoid using the vanilla version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1238
hello-world-server example fails with Java 7 and long hostname · Issue #1238 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The failures seems to be this old JDK bug:
I couldn't figure out where getLocalHostName() was getting invoked from within the gRPC code, however. It would be nice to be able to work around this somehow. Possibly by registering some kind of custom resolver?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1239
Add integration test for disabled GCM · Issue #1239 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Disabling GCM is common when using Jetty ALPN+JDK7 (not available) or JDK8 (for performance reasons). We should add a test to verify that non-GCM connection succeed, similar to the existing NPN tests.
With tcnative, there is little reason to use GCM, but not everyone has swapped from Jetty ALPN yet. This seems Netty-specific, since Android should be making use of the security provider which doesn't have the same issue as normal Java.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1240
Custom Serialization [question] · Issue #1240 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello guys,
Do you think that it is feasible using the current codebase, to avoid using protocol buffers and switch to another serialization mechanism? If so, can you point me to the places where one should do it ?
Regards, B.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1241
Connections handling · Issue #1241 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello! Is it possible to handle connections(their statuses) on the server side?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1242
Grpc fails to build from clean on Windows x64  · Issue #1242 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I suspect that the fix for this is simple, but it's still bad experience to have gradle.bat build fail on the first run.  I included the log file from trying to build.  The error happens in integration tests with "Received close_notify during handshake"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1251
Netty Server does not observe channelInactive · Issue #1251 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the TCP connection goes down, gRPC isn't noticing because nothing is observing the channelInactive() notification on the channel pipeline. I confirmed that channelInactive() is called, but saw that an outstanding streaming RPC was not cancelled.
This likely applies to both client-side and server-side; I only verified it broken on server-side.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1253
ClientCallImpl operations race with Context cancellation. · Issue #1253 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With be60086, we don't create the stream when the Context is cancelled, so the following request(), sendMessage(), halfClose() will encounter an IllegalStateException like:
@louiscryan, FYI, I'll send you a PR to fix it soon.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1256
Should ClientCall.cancel be thread-safe · Issue #1256 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If it were thread-safe, we would no longer throw IllegalStateException for other methods when closed.
Internally cancel is already thread-safe. The main question is whether it is more useful for applications to cancel calls without synchronization or to notice bugs where they write to closed calls. There is also a question of whether having cancel be thread-safe causes undue burden to interceptors.
This is technically an API change, but mostly just relaxes the API. Interceptors are the only things that may not necessarily support the new semantics, but most should simply delegate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1265
use maven plugin can not generate service code · Issue #1265 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use maven plugin(maven-protoc-plugin) for generating grpc code,but i only can generate message.please help me,thx~
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1267
Fine-tune pick-first logic to honor address order · Issue #1267 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Naming systems may sort the addresses so that an address that appears earlier has higher priority, which means being closer and/or faster. We may want to take this into consideration when reconnecting.
Today, if a connection was made successfully and later disconnected, we try reconnecting starting from the next address, and if that succeeds we will stick with it while it may be inferior to the first addresses that may also be working.
A better approach could be starting from the first address if we just disconnected from an address that have been working. However, we should be careful of servers that can be connected and even go through TLS handshake, but have trouble serving actual RPCs. We don't want be trapped in such pitfalls. A safe logic may be: start at the beginning of the list only if the previous address has served a reasonable amount of RPC traffic.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1268
Avoid unnecessary reconnect due to addresses being reshuffled in EquivalentAddressGroup · Issue #1268 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today if the addresses in an EquivalentAddressGroup are reshuffled (which DNS might do), ManagedChannelImpl will see it as a different EquivalentAddressGroup, and creates a new TransportSet for it, which is wasteful. We need to find a way to update the address list in and reuse the original TransportSet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1272
Don't use thread context's class loader for Android. · Issue #1272 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As http: says, if users use android:sharedUserId or android:process, the thread context's class loader will be replaced with a dummy implementation.
And calling Thread.currentThread().setContextClassLoader() before whenever the ManagedChannelBuilder is created is silly.
After discussed with @ejona86, we agreed to use this.getClass().getClassLoader() for Android case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1276
Implement Channel IDLEness · Issue #1276 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are currently lazy-initializing transports in order to allow the Channel to reach a state similar to IDLE. However, we should actively disconnect the TCP connection after inactivity in order to not rely on server idle checks and to comply with the gRPC IDLE semantics.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1277
Resource leak in v0.9.0 and v0.12.0 · Issue #1277 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After running GRPC for a while I get the following error (with io.netty.leakDetection.level=advanced):
LEAK: ByteBuf.release() was not called before it's garbage-collected. See http: for more information.
This looks similar to #336 but not quite identical. This happens on a 64-bit Linux machine running Oracle Java 1.8.0. I'm happy to provide more information if required.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1278
Don't compress empty messages. · Issue #1278 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If given a zero byte message, compression should not be enabled. Decompression is fair game.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1280
Provide client service definition for frameworks to avoid reflection · Issue #1280 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An API similar to the existing ServerServiceDefnition would be great for the client side. Such an API would remove the necessity of reflection
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1290
Propagate RuntimeException's back to caller · Issue #1290 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using ManagedChannelImpl, if a method of ClientCall.Listener (possibly also of ClientCall itself) throws a RuntimeException, the exception propagates up into SerializingExecutor. The executor will log it under SEVERE but cannot take corrective action. The thread initiating ClientCalls.blockingUnaryCall or its cousins will block forever waiting for a response.
Ideally, the exception should be thrown back in the thread that called blockingUnaryCall.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1291
GrpclbLoadBalancerTest is flaky · Issue #1291 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Depending on how fast the balancing() test method is run, it can sometimes mix up the results of the transports.  I have disabled the test in the mean time, with a todo to re enable it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1295
Java - Write sample code for setting and reading error details · Issue #1295 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java issue for grpc/grpc#4543.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1296
Use a List in BlankFutureProvider instead of LinkedHashSet · Issue #1296 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Objects added to blankFutures are created just before being added, so it is guaranteed there won't be duplicates. The only operations for supporting the API are add() and iterate(). Thus, ArrayList and LinkedList are both strictly better than LinkedHashSet.
Previously, a ConcurrentHashMap was used which allowed greater concurrency, but since #1292 added guaranteed completion order full synchronization is necessary.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1299
Add interfaces to generated rpc service classes · Issue #1299 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, service stub classes (not sure if it's the best name to call it) generated by gRPC don't implement any interfaces (). It makes it impossible to dynamically build server composed of service classes provided in users's app via annotations for example.
I propose we create a GrpcServiceStub interface defining at least bindService (but we should probably add newStub, newBlockingStub and newFutureStub to it as well) so that we can easily cast Class objects to GrpcServiceStub and dynamically build server.
Also, it would be nice to add marker interface (``GrpcService`) to the service interfaces () for the same reasons.
What do you think?
cc @jh
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1300
missing io/netty/util/ByteString · Issue #1300 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I am trying to made a simple Grpc client and a server for it.
And this is the code for the client
And I get a error every time I run it.
And this is it
The server had the same problem when I was using grpc-all-0.9.0, and turned back to normal when switch to grpc-all-0.9.0-2.jar. But client still fails. I also update netty to 4.1.0 to fix the problem.
I really needs your help. Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1303
Status.augmentDescription violates spec · Issue #1303 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From Justin Rudd on mailing list...
Status.augmentDescription adds a '\n' (byte value 10) to the description of a Status which ends up in the header "grpc-message". But the value of "grpc-message" is dropped because of the method isSpecCompliantAscii in TransportFrameUtil.
I've worked around it by just not using augmentDescription. But I thought you'd like to know.
Also, it would be awesome if Status allowed for adding custom headers.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1304
Time for the first time a rpc service is used is way longer than that of the following usage.   · Issue #1304 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I would first paste my snippet here
And what I got from the output is:
It seems that the grpc channel is opened right at the first time it is used.
Is there any way I can get the real connection before I use it to get feedback from server.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1306
OkHttp Client stream and transport are tightly coupled · Issue #1306 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The interaction between the client stream and transport for OkHttp stream starting is tightly coupled.  As brought up in #1294, we should take a look at how these two classes interact and make some clear boundaries (or possibly merge them).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1307
ScheduledFutureTask cancellation does not guarantee queue removal · Issue #1307 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GRPC users using timeout may observe a memory leak when using long RPC timeouts with calls that complete quickly.
In ClientCallImpl we add a Runnable to trigger the timeout to a ScheduledExecutorService and retain a ScheduledFuture to that we can cancel the timeout if the call completes before that time.
The issue is that calling ScheduleFuture.cancel is not guaranteed to remove the task from the executors queue and so a leak of ClientCallImpl and its retained objects can occur.
We use ScheduledThreadPoolExecutor as the default and can call setRemoveOnCancelPolicy(true) to cause the task to be correctly removed from the queue. We would need a strong guarantee that a ScheduledExecutorService with this behavior is being used to rely on it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1310
how can i use protocol buffer's message toString() method for utf8 · Issue #1310 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to print protocol buffer's message log in console ,but i use toString() method and get below info.how can i use toString for utf8,thx.result is:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1311
Exception when configuring SSL: "Jetty ALPN/NPN has not been properly configured." (and possible solution) · Issue #1311 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am unable to configure an SSL gRPC.
Causes this exception:
This method is restricting the search to the boot classloader, which I don't think is correct. i.e. in the following code, the first line executes fine, but the second line throws CNFE (despite the class being loaded), causing isJettyAlpnConfigured() to return false:
I suspect the Class.forName(String) variant should be used instead (which doesn't throw CNFE), but maybe there was some good rationale for restricting to the boot classpath?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1312
none
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1313
Support utf-8 percent encoded grpc.message · Issue #1313 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See grpc/grpc#4672
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1319
BufferingHttp2ConnectionEncoder forgets GO_AWAY received · Issue #1319 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The BufferingHttp2ConnectionEncoder needs to remember that a GO_AWAY was received and immediately reject incoming requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1325
GRPC with TLS mutual authentication: Server accepts untrusted client certificate · Issue #1325 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A Java GRPC server configured to require client authentication appears to accept client certificates issued by CAs that the server does not trust. If so, this is a dangerous security vulnerability.
Here is a minimal project that reproduces the problem.  Curiously, pretty much exactly the same code works correctly when part of the grpc-java repository's test suites; see the tests added in this pull request.
Perhaps I'm simply missing something; perhaps there is a genuine bug; or perhaps there is some subtle interaction of JARs or whatnot that causes this code to work in some environments but to be silently dangerous in others.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1330
Receiving ClosedChannelException instead of actual error · Issue #1330 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We aren't reporting a helpful error in very simple connectivity cases, like the server port is closed. Here is what it looks like when using the interop client against a non-existent server:
It seems the problem may also impact other, much harder to diagnose, issues like client certificate validation (like in #1327).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1333
Error in java grpc files generated by compiler · Issue #1333 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am generating protocol buffer code with the following command:
I get the following error in Intellij.
The dependencies I use are:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1335
Investigate whether tcnative is being enabled on Jenkins Windows build · Issue #1335 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context: #1334 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1342
memory leak in io.grpc.internal.TransportSet · Issue #1342 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We experienced an issue where our grpc-java clients filled up their heaps and the entire cluster went down. The cause appears to be a list of futures in io.grpc.internal.TransportSet. 5 of these sets would consume 47% of a 30GB heap. The cluster was running without issue for a month.
Context: Our clients each make about 10,000 requests/s to a cluster of 80 servers. The problem began when the cluster of servers was restarted. The clients filled their heaps and effectively died. A restart of the clients resolved the immediate issue, but we want to fix the root cause.
The clients each maintain a single blocking stub for each of the 80 servers. We enforce a 10ms timeout using withDeadlineAfter(). All calling threads reuse the same blocking stub.
We did manage to get a heap dump of an offending client. We noticed that about 5 blocking stubs account for 47% of the retained heap on the machine. 1kb size. I'm attaching a screenshot of the Dominator Tree report from Eclipse Memory Analyzer showing the problem. The labels on the columns are "shallow heap", "retained heap" and "retained heap %". This shows that a single io.grpc.internal.TransportSet has references to effectively a linked-list of RunnableExecutorPair objects each containing a Future. This linked list is 1.6 GB in size, where each element is about 1.5kb.
Any thoughts? What can I do to help debug this?
We are running grpc-java master as of Dec 9. v0.9 has a bug that makes it unusable for us.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1343
Deadline can fire before stream started · Issue #1343 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In ClientCallImpl the deadline is scheduled before stream.start(). However, if the deadline has already elapsed the runnable will be executed immediately and race with the start. I've only looked into how OkHttp may be impacted.
I believe a NullPointerException would be thrown when trying to notify the stream listener due to the cancellation. However, due to #1237 the exception won't be logged. Thus, this will result in a hung stream that never completes with no logging as to what went wrong.
This was discovered due to timeout_on_sleeping_server on android being flaky, because it uses a very small timeout. The test would fail at awaitCompletion.
@carl-mastrangelo, FYI
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1344
can put the service instances on different ports? · Issue #1344 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i want to  create  gRPC server in python with client in java , and start up multiple service instances on different ports, can  it work ? and the client how to support  different ports ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1345
grpc 0.12.0 with protobuf-3.0.0-beta-2 ? · Issue #1345 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've compiled grpc 0.12.0 with protobuf-3.0.0-beta-2 as suggested in a recent git issue, and as in grpc/grpc@f4c74fa. Now grpc-java 0.12.0 does not compile anymore as it seems to require explicitly protobuf-3.0.0-beta-1?
*** Building codegen requires Protobuf version 3.0.0-beta-1
*** Please refer to https

FAILURE: Build failed with an exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1346
../gradlew java_pluginExecutable fatal error · Issue #1346 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi，
environment：
I have configured  'export CXXFLAGS="-I/usr/local/protobuf-3.0.0-beta-2/include" LDFLAGS="-L/usr/local/protobuf-3.0.0-beta-2/lib"'  in the ~/.bash_profile file：
fatal error info：
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1355
GOAWAY with OK maps to INTERNAL · Issue #1355 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP/2 graceful shutdown starts with a GOAWAY with code OK.  We currently map that to a INTERNAL, which would not imply that clients should attempt a retry.  We should change this to UNAVAILABLE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1358
Overload ProtocolNegotiator.newHandler to accept an authority. · Issue #1358 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the case of a load balanced channel, there is a need to provide a possibly different authority to the backend than the load balancer.  It looks like  ProtocolNegotiator.newHandler would be a good place to add this functionality.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1359
Netty should call transportShutdown on GOAWAY · Issue #1359 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This will cause TransportSet to divert new traffic away from the transport which would prevent many failed RPCs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1360
POM missing for protoc-gen-grpc-java · Issue #1360 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For 0.12.0 it was manually deleted (because it was causing errors; probably because it is wrong), but it was missing already for 0.9.1. It may be because we upgraded from gradle 2.3 to gradle 2.8.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1367
Update to Netty 4.1.0CR1 · Issue #1367 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1370
Failing to build java interop image · Issue #1370 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seems like some of the in-process interop tests are executed during the java build and they are failing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1378
Audit which APIs should stay experimental · Issue #1378 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A lot of methods have been marked Experimental API.  We should go over what methods should become standard before doing our GA release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1380
Add header logging to calls · Issue #1380 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To make debugging easier, there should be some way to log metadata that comes with Client Calls, and possibly Server calls.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1381
hello_world.proto in Java differs from copy in main repo · Issue #1381 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the grpc repo it is at examples/protos/helloworld.proto . Most importantly the response is HelloReply in one and HelloResponse in the other.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1398
Update to netty-4.1.0.CR2 for SNI fix · Issue #1398 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We want this:
netty/netty@e220c56
We are hitting the SNI problem (netty/netty#4746) with tests on GCE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1399
Interop's deadlineExceeded test is flaky · Issue #1399 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen on OS X Travis (since rebuilt):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1400
DNS: use Netty's asynchronous DNS resolver · Issue #1400 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current Netty-based transport doesn't use Netty's asynchronous DNS resolver, which means the client hangs if hostnames cannot be resolved. This is really bad if you are reusing an eventloop from other parts of a program and this eventloop is not supposed to block. gRPC should at least expose the necessary APIs to be able to override the default DNS resolver.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1401
ProtocolNegotiators leaks ByteBufs on failure · Issue #1401 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported by @trask in #1277 with repro repo at https. The key distinguishing feature is BufferUntilChannelActiveHandler in the log here:
SEVERE: LEAK: ByteBuf.release() was not called before it's garbage-collected. See http for more information.
Recent access records: 2
When looking at the code, it is obvious it doesn't release when it fails the promise. This leak only happens when failing to establish a connection to the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1403
Access unparsed data in interceptor? · Issue #1403 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like to make a caching interceptor that uses the raw binary of the message as a key, and the raw binary of a response as the value so that I can avoid any ser/der costs on the server.  Is it possible to get access to the InputStream that goes through the Listener before it calls "call.method.parse(inputStream)" ?
Maybe there's a different/better way to do this and avoid serialization costs?  I suppose I could use a header approach and have a server interceptor look for a "CacheKey" header and use that for lookup.  It requires a bit more cooperation from the client though which I'd like to avoid if possible.
Thanks for any pointers!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1407
Name resolution failures can cause the call to hang. · Issue #1407 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If an exception is thrown from NameResolver.Listener.onUpdate(), the call hangs indefinitely and is never closed.  This is a problem if the actual name resolution succeeds, but is not successfully set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1408
Potential risk of deadlock from calling listeners under locks · Issue #1408 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Methods of ClientTransport.Listener and ServerTransportListener are usually called under a lock. The biggest reason for locking is to guarantee the ordering of multiple methods on the same listener.
However, these listeners usually call into channel layer code, and may in turn acquire locks from there, which forms a transport lock -> channel lock lock order. On the other hand, when channel layer calls into transport layer, it's possible to form a channel lock -> transport lock lock order, which makes deadlock possible.
It's unlikely an issue today because there is an implicit rule today that channel layer will not hold any lock while calling into transport. However, as the code base grows, it will become harder to keep track of such requirement.
A possible solution is to always schedule listener calls on a serialized executor, with the cost of a thread, so that listener order can be guaranteed without the need of locking. There may be better options.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1411
Usages of OkHttpClientTransport.toGrpcStatus should add status details about the source of the code · Issue #1411 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now you can get a status of INTERNAL: Internal error which isn't very useful. If it had RST_STREAM in the description though then it would be much more useful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1413
Generator assumes packed=true on repeated scalars · Issue #1413 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please see this report for context grpc/grpc#5174
The long story short however is that it seems my server implementation was emitting a packed=true representation of a repeated int32 field, and NodeJS could not parse it.  Once I added packed=true to the proto definition, Node could begin to read the values returned from my Java server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1414
add pom.xml to examples/ · Issue #1414 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently there is only gradle build.gralde file.  Add pom.xml please!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1419
move maven-protoc-plugin to maven central · Issue #1419 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
any reason why some of the components, like maven-protoc-plugin, are in bintray? can this be moved to maven central instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1420
gprc-all is published without sources · Issue #1420 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1421
different grpc components depends on the same dependencies but of different versions · Issue #1421 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This looks quite unsafe.
Dependency convergence error for com.google.code.findbugs:jsr305:3.0.0 paths to dependency are:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1425
Context forwarding between client and server? · Issue #1425 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The comments on the Context object aren't completely clear to me what it forwards and does.  For example, here 
I've seen the tests for deadline propagation added recently, but I'm working on a tracing context interceptor, and it isn't clear to me if I should expect the information in the context to automatically forward downstream, or if I should be pulling that information out of the context and sending it along in a header?  I've looked at the Client and Server Impls for example, and while things like deadlines propagate and cascade downstream, it not clear to me if/how the arbitrary value objects are supposed to
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1426
Sporadic NullPointerException · Issue #1426 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm getting this sporadically on slow travis-ci machines.  Haven't seen it on other machines.  My guess is that the listener is being executed before the channel field assignment occurs so channel is null.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1438
Check for null Channel when creating stub · Issue #1438 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if (channel == null) {
  throw new NullPointerException();
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1439
Annoying logging while running an app · Issue #1439 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TABLE
This is in our Quickstart app, it would be really nice if it went away.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1440
Use new protoc maven plugin from Maven Central · Issue #1440 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
License issue on maven-protoc-plugin has been resolved, and it's now pushed to maven central - yay!
Should update documentation and/or examples to use the the maven central plugin:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1446
Remove references to io.grpc.internal from io.grpc · Issue #1446 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.grpc is very close to having no references to io.grpc.internal. It would be useful to be able to depend on the API but not the implementation to not pull in unnecessary dependencies and provide cleaner builds that don't accidentally depend on the implementation. For instance, a library could have optional gRPC support, but depend on grpc-api even when grpc was not selected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1447
Create a grpc-api artifact · Issue #1447 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After #1446 we could make a grpc-api artifact that does not include io.grpc.internal. From the other issue:
It would be useful to be able to depend on the API but not the implementation to not pull in unnecessary dependencies and provide cleaner builds that don't accidentally depend on the implementation. For instance, a library could have optional gRPC support, but depend on grpc-api even when grpc was not selected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1455
Losing messages in 0.13.0 · Issue #1455 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've posted a repro to https.  Just clone and run mvn test.
The repro sends 1000 messages to the server, but the server only ever sees around 30 of them (I'm running locally on windows, though I also see this issue on travis-ci linux).
I don't see this issue in 0.12.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1459
Artifacts should depend on particular version of grpc-core · Issue #1459 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-core contains internal, unstable APIs. To prevent accidentally mis-matching artifact versions (say grpc-netty-0.12.0 coming from one source of dependencies and grpc-core-0.13.0 coming from another), any artifacts that depend on grpc-core should use syntax instead of $VERSION to cause an error (because grpc-netty-0.12.0 can only use grpc-core-0.12.0; core shouldn't be silently upgraded) instead of runtime failure. Note that #1447 improves things, since something like grpc-stub and grpc-protobuf could depend just on grpc-api instead of a version-fixed grpc-core.
The syntax seems to be supported by Maven, maybe Gradle, and Ivy, but we may need to do some verification and additional investigation, since it isn't commonly used.
Other resources:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1460
Consider avoiding the copy in BINARY_BYTE_MARSHALLER · Issue #1460 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the initial version of the PR to add BINARY_BYTE_MARSHALLER it did not do a copy. However, I suggested that we do a copy to prevent trouble with Metadata's caching of serialized encodings.
I may have been misguided though. It seems that even with the copy in place, mutating the byte[] would cause trouble for Metadata. It may be better to not copy, because it doesn't improve the situation, and update the documentation to simply say, "don't modify the byte[]s".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1463
DNS resolution expiration · Issue #1463 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like the channel is somehow caching the IP resolved through DNS but never refreshing it. We are using grpc in AWS and since ELB's IPs change over time, we've run into issues and found out grpc clients are trying to connect to an old IP.
Code snippet:
Is our assumption correct? Is there any issue in how are we using the client library? Would it be a bad practice (performance-wise at least) to create a new channel in each request?
Thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1469
Codegen base class for services to extend · Issue #1469 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should allow adding new methods to a service without breaking existing service implementations. The best way to do that seems to have service implementations extend a base class that responds with UNIMPLEMENTED for all methods. The class would also make creating fake/mock services during tests easier.
A similar problem can happen for stubs in tests. We may need something there as well.
See also grpc/grpc#5371
Edit: IOW, remove all interfaces from the generated code, since adding a method will break existing implementations of that interface.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1470
*Interceptor interceptForward methods? · Issue #1470 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would you be open to a pull request which allows users to pass in interceptors in forward order?  Meaning, if I pass in ServerInterceptors.interceptForward(svc, new A(), new B(), new C()) that I'll end up with interceptors being called in the order A -> B -> C rather than C -> B -> A?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1474
Improve unary server stub · Issue #1474 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Java unary stub is taking the form of an async service, where a single result is expected to return from a StreamObserver.
This can be error prone:
You can't tell from the stub whether it's unary or streaming multiple results
The code can easily call onNext one too many times, or not call onComplete
Unary gRPC stubs for several other stubs expects a single return value from the method. Java should follow the same convention:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1475
Improve client stream server side stub · Issue #1475 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking at this:
This is super weird to have the "request input", Points, as a return value of a method, and the response RouteSummary, to be the input parameter of a method. I took a look at this for a while to figure out what's going on. I see it is forcing the implementation of StreamObserver interface to process the incoming Points, and thus requiring it to be a return value. I wonder if there is a better way of doing this.
Every other language stubs seems to generate sensible stubs where the input steam is in fact the parameter and not a return value, and they actually returns the actual RouteSummary as the return value of the method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1476
TransportSet should reset current index on transportReady · Issue #1476 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If we successfully make a connection to an address, then that should mean the address is good. If it later is disconnected due to GOAWAY or transient failure we should start at the top of the list instead of trying less-desirable IPs.
This can cause errors, but any errors can already be gotten other ways, so it shouldn't be considered a major bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1477
Only link delayed transport AFTER real transport has called transportReady() · Issue #1477 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is no benefit of creating streams on a transport that has not called transportReady(), because they will be buffered anyway. Besides, transport connection may turn out to be a failure, which will fail the pending streams on it, spamming transient errors to the callers. Those streams, however, if created on a transport that has called transportReady(), would have a higher chance of success.
Proposed change: TransportSet calls setTransport on delayed transport in the transportReady() callback of the real transport.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1479
Add flow control sample documentation · Issue #1479 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
flow control mechanism is a little bit hard to understand. can you guys add some test to demonstrate its usage?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1481
The asynchronous Channel is uncompleted,but I have never used asynchronous Channel · Issue #1481 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The server print the logs as follows,and never stop until the server is shut down:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1484
Rename interop's "AbstractTransportTest" to "AbstractInteropTest" · Issue #1484 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-testing now has an AbstractTransportTest which is a much more appropriate name for it than for interop's test class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1485
why DEFAULT_FLOW_CONTROL_WINDOW in NettyServerBuilder set to 1048576? · Issue #1485 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in http2 doc, the max value of flow control window would be 2^31-1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1486
is server push feature used in anywhere in Grpc-java? · Issue #1486 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
my rpc framework need this feature, so I'd like to reference the implementation of it in Grpc-java, but fail to find it in code.
can anyone help on this please?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1492
CI should build examples/android and android-interop-testing · Issue #1492 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1493
Bump grpc version used by examples/android · Issue #1493 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should also update the RELEASING doc so that the versions are updated as part of our process.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1495
How does deadline work? · Issue #1495 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm creating a blocking stub with deadline:
and then I start calling method in a loop:
first 8 calls are handled correctly but others end with DEADLINE_EXCEEDED exception.
Looking at my gRPC server logs I can see that the 8th call (last succeeded call) is ~3 seconds after the 1st one, so I assume that the deadline I set is for all my calls.
How to set up a deadline per call ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1497
GRPC tests fail and hang with JDK 1.8.0_73 · Issue #1497 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Making the following change in build.gradle gets everything working again:
However, doing so would probably break the build for developers using an old JDK and for Travis.
Should the current logic for choosing the ALPN version accommodate more than one version of Java 8, or is the current approach intentional?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1500
There is no warning that ManagedChannel.shutdownNow is not implemented · Issue #1500 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems the important part of the comment was not copied in b687bdc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1510
DelayedClientTransport and InProcessTransport means deadlock · Issue #1510 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a chance of deadlock when DelayedClientTransport is linked with an InProcessTransport. See /pull/1503.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1513
TlsTest flakiness · Issue #1513 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found on Travis linux when testing for #1508
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1514
Add assertCodeEquals to TestUtils and swap code to use it · Issue #1514 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
assertCodeEquals() (also here) is really helpful for debugging test failures from CI environments because it provides more information about the Status versus assertEquals(Code, Code). Issues like #1513 would have enough information to better understand what went wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1519
Simplify using richer APIs in service implementations · Issue #1519 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While it is possible for service implementors to interact with richer features like inbound & outbound flow-control today by creating their own io.grpc.ServerCallHandler this is quite cumbersome to do. You would need to completely rewrite how your server was build and could not simply implement the generated service definition any more. In cases where only one of the methods in the service needs more control over flow-control this is quite messy
One proposal is to allow implementers to cast the StreamObserver they receive from the runtime to a richer type that allows for interaction with advanced features. This works for all generated service calls including unary calls.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1522
IOExceptions are INTERNAL because they are getting wrapped in Http2Exceptions · Issue #1522 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Utils.statusFromThrowable will need to check the Http2Exception.cause() to see if it is an IOException (by recursively calling statusFromThrowable?).
I saw this with java.io.IOException: Broken pipe, which should be UNAVAILABLE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1528
Doc Fixit: Java is missing from website Auth doc · Issue #1528 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java is missing from this doc: http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1531
Use stream.cancel() instead of cancel() in ClientCallImpl · Issue #1531 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some error handling in ClientCallImpl is calling ClientCall.cancel() instead of stream.cancel(). For example, in sendMessage(). This causes incorrect throwing of IllegalStateException to later callers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1532
Examples of serving HTTP 1 request with servers running GRPC? · Issue #1532 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Is there a example of using grpc/underlay netty to serve HTTP1/1 on the same port?
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1533
Simulate latency and GRPC thread safety gurantees · Issue #1533 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We wrote an interceptor to simulate adding latency and injecting failures into client requests.  In doing so we may be violating thread safety guarantees in GRPC.  I was hoping someone could look this over and let me know if this implementation makes sense or if we should be doing something different.
First, some details about the implementation and expected behavior,
Failure behavior is provided by an injected FitContext.
Failure can be a delay, an error, or a combination of both.
Simulated errors are implemented as request cancellation.
The implementation is leveraging backpressure to avoid having to queue up requests and responses.  The request() call is delayed to simulate latency.
The solution works for request-response as well as streaming scenarios
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1534
TransportSet creates lots of transports · Issue #1534 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Logs indicate that it is possible with a single Channel to get multiple transports for the same ip:port.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1536
Remove allowance of ClientStream.sendCancel() before start() · Issue #1536 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like it will trigger a NullPointerException. This could maybe be handled in AbstractClientStream, but I'm unsure if that's the best place.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1537
DelayedStream.setStream() should cancel the provided stream if not using it · Issue #1537 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If cancel() or setStream() was previously called then setStream() throws away the stream argument. It should cancel() the stream to make sure resources are freed, although I think only DelayedClientTransport benefits.
This should not be done until after #1536. I don't know if OkHttp suffers a similar problem. If so, we may want to revisit whether it makes sense to allow streams to be cancelled before start().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1539
How to connect to unix socket? · Issue #1539 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using this code snippet to connect to gRPC server though a unix socket:
but I'm getting this exception: java.lang.IllegalArgumentException: cannot find a NameResolver for unix:/tmp/imageresizer.socket
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1540
It seems that CallOptions.withDeadlineAfter does not provide a fully functional timeout · Issue #1540 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CallOptions.withDeadlineAfter works when client and server are connected or can be connected but the server can not respond in time. When it comes to network partition, a CallOptions.blockingUnaryCall will wait about 30s to throw an exception despite the deadline.
I can walk around this by giving timeout parameters to the future.get() inside CallOptions.getUnchecked(Future future) like this
But I believe there should be a better way @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1546
If DNS resolution fails, the Channel is permanently failed · Issue #1546 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should probably update DnsNameResolver to continue retrying the DNS query until shutdown, at maybe a fixed rate of 1 minute or such. Overall, it's not a superb solution, but it fixes a lot of the problem and is expedient to implement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1549
Simplify implementation of back-pressure in StreamObserver-based stub · Issue #1549 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Pending API changes can allow reactive/async pattern for interacting with flow control and applying back pressure: https
In many cases, automatic back-pressure in generated stubs could be very useful -- e.g. having calls to StreamObserve#onNext(T) block instead of queueing.
It's been pointed out that this could cause deadlock for bidi-streaming operations, so perhaps we can just not expose this functionality for bidi-streaming calls?
It may also be worth pointing out that most other runtimes (wrapped languages and Go) already expose streams via blocking operations and already require that apps be aware of and work-around possible deadlock issues resulting therefrom. So maybe providing similar mechanisms in Java is fine, with said caveats.
Another possible alternative could possibly be done in an extension/add-on instead of in GRPC. For example, wrapping streaming requests and responses with RxJava Observables may further simplify the async case enough to make the synchronous (and possibly-deadlock-prone) case unnecessary.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1551
Example of LoadBalancer implementation?  · Issue #1551 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Is there a example we can see how to createa and use an LoadBalancer? It should be able to deal with usual error and some health checking/retry etc.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1552
Unchecked exceptions can't be captured from a ServerInterceptor · Issue #1552 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm attempting to add instrumentation to our gRPC service implementations using a ServerInterceptor, namely failure rates on a per-method basis. To do this, I'm using a SimpleForwardingServerCall, overriding the close method and then checking the status to see if the call succeeded.
When an unchecked exception is thrown from a service implementation:
the close method is never called, so there isn't an opportunity to log the failure.
The exception seems to bubble up to the Executor instead:
I've also tried returning a ForwardingServerCallListener from interceptCall and the onComplete callback is invoked, but it doesn't have enough information for me to determine if the call was a failure.
Is there another API I can take a look at that will allow me to capture these failures?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1555
Use FastThreadLocalThread's in shared channel executor. · Issue #1555 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While working on netty/netty@b88a980 I noticed that when using the blocking stub and the netty transport, we allocate in Netty's allocator from within the shared executor threads. Netty's allocator employs thread local caches that perform the majority of allocations. These caches are accessed via Netty's own threadlocal implementation FastThreadLocal, which is only "fast" when used in the context of a FastThreadLocalThread.
We should provide our own thread factory to the cached thread pool in order to create FastThreadLocalThreads. Additionally, we should override the Thread's run() method to do
This will release all memory from a thread's cache when it is shutdown. That should happen quite frequently, with the pool sizing threads dynamically.
However, I don't know how to best implement this. The shared channel executor should be shared by all transport, client, server combinations running in a JVM. Also, I assume we can't rely on the Netty dependency to be there on Android?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1556
Change the way we pass SSLSession · Issue #1556 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now, we're using Netty's channel attributes to pass SSLSession object from one place to another. It was a quick win when adding ServerCall#attributes() support.
We want to plumb it through as an argument.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1558
Evaluate Netty's new `SelectStrategy` for lower latency writes into the eventloop. · Issue #1558 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Once netty/netty#4955 is merged we should test and think about implementing our own SelectStrategy or even allow a user to provide its own (?) for faster writes from outside of Netty's event loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1562
Move utilities from GrpcUtil from internal package · Issue #1562 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've collected a bunch of utilities in GrpcUtil most of which are used publicly in apps (metadata keys, marshallers) and since GrpcUtil is part of internal package, we want to either move GrpcUtil completely out of it, or split, leaving some of the esoteric stuff like SHARED_CHANNEL_EXECUTOR or TIMER_SERVICE in internal package and exposing metadata key fields etc. in class from public package.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1565
Please generate OSGi headers for jar files · Issue #1565 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would make using gRPC in an OSGi container easier if the jar files would contain the required OSGi headers. This can be as easy as using the maven-bundle-plugin.
Unfortunately, I am not versed in gradle, so I am unable to provide a patch right now.
Is this something you can consider for addition?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1567
Can I get Request MetaData From Context in 0.13.2 · Issue #1567 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How Can I get Request MetaData From Context in 0.13.2,Please Help me,Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1569
okhttp: race between receiving data and closing deframer · Issue #1569 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported on SO:
When receiving a DATA frame, it seems there is a race between getStream() and calling transportDataReceived(). Although I wouldn't expect to trigger that race often.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1571
Create protobuf-lite project · Issue #1571 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current protobuf project can be used with lite, but only by excluding the protobuf dependency and adding your own dependency on lite (which is not yet available on Maven Central). That is weak, but also doesn't work in some compilation environments. We should create a separate protobuf-lite project, which protobuf can depend on, for LITE_RUNTIME users.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1576
Overload ServerBuilder.addService to take a Supplier of the service definition · Issue #1576 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In general, servers want to instantiate a new method handler for each call to avoid polluted state. We'd like this to be handled by the framework, rather than asking application developers to remember it. The current API essentially pushes the responsibility to the application:
The Server is a singleton since it has a long-lived lifecycle
ServerBuilder.addService(ServerServiceDefinition service) requires that the service be instantiated at startup
FooServiceGrpc.bindService(FooService serviceImpl) also requires that the serviceImpl be instantiated. Thus, the FooService has to be a singleton with respect to the server lifecycle. That is, your implementation of the generated service stub has to be a singleton. So the app developer has to worry about the scope of the dependency chain from there down.
I propose overloading the generated code to take a Supplier of some sort: FooServiceGrpc.bindService(Supplier<FooService> serviceImplSupplier). This would let me pass a Guice Provider::get to the bindService method and get whatever Guice scoping I want on method calls. This lets me handle proper scoping in my own framework code rather than in every implementation of a stub.
Almost as good would be pushing the thunk-ness back a layer to ServerBuilder.addService(Supplier<ServerServiceDefinition> serviceSupplier), but I suspect that is harder to implement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1577
Solve logging · Issue #1577 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We used to have some INFO logs, but they were considered spam by some users (#1439), so they were reduced to FINE (#1449). In general, open source libraries don't log unless something is going wrong, and these log statements didn't imply something was wrong.
However, in #1538 INFO-level logs were added back (in a different place, but same effective event). These could be a lower level, but it seems difficult for users to enable a higher logging level.
We do know applications can do something like this to squelch what is logged:
More than one project has been annoyed with the logging-by-default, but the number of Java developers who can handle logging.properties seems limited.
On Android, things are even worse because most phones almost always return false from Log.isLoggable() for lower log levels. Developer phones (like debug builds of Android) will return true, but few develop on such phones. This means that even when you configure java.util.logging to log lower levels, they won't actually be logged. You can run a command like adb shell setprop log.tag.<MAGICTAG> VERBOSE for each class you want to log, where the MAGICTAG can be found from DalvikLogging.loggerNameToTag(), but this is so painful it isn't close to practical.
Note that most Android applications don't notice any problem with Log.isLoggable() because while it may return false, if you call the log anyway (say, via Log.v())apparently it will be logged.
One developer suggested we use slf4j because it is "java best practices." I think in some part of the Java world it is, but it is unclear whether grpc exists in that part of the world. The number of developers that can configure java.util.logging, log4j, logback, or slf4j is certainly higher than just java.util.logging, but it will also become harder to direct users in how to enable logging when we need it for a report. It also has the deficiency that "If no binding is found on the class path, then SLF4J will default to a no-operation implementation" which is pretty bad for our WARNING statements.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1578
io.netty.handler.codec.http2.Http2Exception$StreamException: Stream closed before write could take place · Issue #1578 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using latest GRPC java release, what could possbily be the reason?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1579
Error message built with Status exception builder is not serialized properly · Issue #1579 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
creates an exception with detailedMessage containing '\n' character. In TransportFrameUtil this character fails the validation rule isSpecCompliantAscii, which results in grpc-message header being silently discarded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1581
Update Netty to 4.1.0-CR4 · Issue #1581 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1582
okhttp integration tests fail with latest oracle jdk on OSX · Issue #1582 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After updating to the latest Oracle JDK8u73 on OS X , the okhttp integration tests fail.
Running ./gradlew clean build on latest master (65d3847) gives me the below output and hangs there indefinitely.
The issue is always reproducable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1584
Create a stress test client for Java  · Issue #1584 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The specification for the stress test client is at : https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1589
Provide description to Status used in ClientCallImpl.cancel · Issue #1589 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now it is just Status.CANCELLED. We should give it a description so that it is more obvious it was generated locally (such as "Client cancelled call"). This is trivial, except plenty of tests fail, so they need to be updated to just check the Code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1590
Retries as a first-class feature · Issue #1590 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Easy-to-enable, first-class API for having automatic retry any type of call. It would be good if this API supported hedging, where you preemptively issue a second RPC if the first is taking a while. Supporting hedging means that hedging would not need additional buffering.
This is larger in scope than #1122, which is only unary. This is related to #1570 and #1586, but more concerned with the API to expose to applications and the cross-language feature set. I've not yet looked at the policy in those PRs, so this says nothing about how I feel about the policy presented there. We can end up copying some of the policy in the PRs into this discussion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1597
Stop using grpc-all · Issue #1597 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-all appears convenient, but it sort of makes a mess because it repackages. We could remove the repackaging logic and have it just pull in other dependencies, but it seems maybe better to have users just depend on the pieces they need.
Related: netty/netty#4671
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1599
Only events from NameResolver-produced address should trigger resolution refresh · Issue #1599 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently a failure on any TransportSet will trigger name resolution. However, the addresses of a TransportSet may also originate from an external load-balancing service, e.g., in GrpclbLoadBalancer. A failure on such TransportSet shouldn't trigger name resolution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1600
Round-robin LB should be aware of and skip bad servers · Issue #1600 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The round-robin logic in GrpclbLoadBalancer should listen to transport life-cycle events (handleTransportReady() and handleTransportShutdown()) to learn what servers are not usable, so that it can skip them. The round-robin logic will also be shared with the simple round-robin LoadBalancer (which is yet to be implemented).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1601
Trigger name resolution also when a live connection closed · Issue #1601 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#1591 doesn't cover the case where some addresses have changed in the name system while some are still there and usable. This may end up trying to connect old addresses each time we reconnect. The solution is to also trigger a name resolution after a live connection has been closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1605
Ensure that gRPC Java implementation conforms to standard status codes in gRPC · Issue #1605 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Error code specification - http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1606
Message serialization occurs on transport thread · Issue #1606 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TransportSet is calling setTransport() from the transportReady notification. setTransport() eventually ends up serializing messages. This means we are 1) running application-provided code on the transport thread and 2) performing expensive operations on the transport thread. We need to figure out a way to avoid serializing on the transport thread.
One type of option is to use an executor for setTransport(). Another type of option would be to actually serialize the message within DelayedStream.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1607
testConfigureDeadlineNanoTime is flaky · Issue #1607 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen for https (rerun, so log no longer visible):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1609
Codegen should observe lite=true flag instead of LITE_RUNTIME · Issue #1609 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The LITE_RUNTIME option is to go away in protobuf because it makes using the same proto on server-side and client-side problematic. Instead, an option is going to be passed to protoc to enable Lite. We should do the same for gRPC. We can use lite=true for now; we can watch protoc to see what flag they end up using.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1612
Codegen should include proto-defined service/method comments in JavaDoc  · Issue #1612 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1614
android-interop-testing fails to ProGuard · Issue #1614 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It may just be my machine, but android-interop-testing is failing to build. It may have appeared to work before because I wasn't doing "gradle install" of grpc first, however that doesn't seem like a full explanation given some other things I've been doing. In some ways I hope I've just hosed something on my machine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1616
CallOptionsTest.testToString is flaky · Issue #1616 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen at https, since rebuilt (so logs lost):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1617
DeadlineTest.shortDeadlineEventuallyExpires is flaky · Issue #1617 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen at https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1621
Add an ability to run protobuf server as a Servlet 4 · Issue #1621 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Pls add an ability to run a protobuf v3 server as a Servlet 4 on any server with the Servlet 4 support.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1622
Anyone use gRPC in prod evn? please share your practice · Issue #1622 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As title, please leave your product name, experience, anything you want to share
thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1625
javaPluginPath in gradle build does not work for me
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm building protobuf, grpc and grpc-java all from scratch, but without heavy customization. This mostly works, however grpc-java does only compile and work for me if I patch the gradle build:
I don't know why I seem to need a change in javaPluginPath? Is this due to my custom build of protobuf? I did not make any (intentional) changes to protobuf that would ring a bell...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1626
Context.fork shouldn't return a CancellableContext · Issue #1626 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just because someone wants to fork a Context, doesn't mean they want that Context to be cancellable. In addition, it requires the caller to close the CancellableContext when they are done. Since it is trivial for the caller to also call withCancellation(), it seems best to return a plain Context.
@louiscryan, thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1628
Support OkHttp3? · Issue #1628 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's been a while since stable OkHttp3 has been released and libraries depending on OkHttp started to support OkHttp3 as well. Is there any plan to support OkHttp3?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1629
io.grpc.StatusRuntimeException: INTERNAL: Failed to frame message · Issue #1629 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The above runtime exception is thrown when a field of type []byte is set to null and one tries to use it as service argument.
The code is executed on Android. I use protobuf-nano.
Default value for []byte is com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES
The error is hard to spot. Is this stated in a documentation? Maybe it should be treated as a default value? Not sure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1632
deadlineExceeded interop test is flaky · Issue #1632 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
intervalUs is used for consecutive responses. We cannot use it for the only response and expect a delay from server sending the response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1636
Do I need to use common-pools to wrap ManagedChannel · Issue #1636 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Do we need to implement a pool of ManagedChannel on the client side?
We are currently sharing a single ManagedChannel to a single target on whole application, but we are seeing some pretty weird behavior that channel went into permanent DEADLINE_EXCEEDED mode.
We havn't been able to replicated it locally and we are trying anything we can..
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1645
CallOptionsTest.withDeadlineNanoTime is flaky · Issue #1645 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen (may have been restarted):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1646
StubConfigTest.testConfigureDeadlineNanoTime is flaky · Issue #1646 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in (may have been restarted):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1648
Add KeepAlive support · Issue #1648 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With our sue of gRPC Java across Google Compute Engine (GCE) L3 Load Balancers (Network Load Balancers), we seem to be hitting similar issues we had with gRPC in Go:
Basically Google L3 load balancers silently drop long-lasting TCP connections after 600 seconds.
While we were able to work around the issue by specifying a custom Dialer in Go:
There seems to be no way of overriding the KeepAlive peridods for NettyClientTransport. We know it's possible to set the keep alive period in the kernel of the machines, but that's a bit of a stretch to expect the user-code programmers to know about it.
Can we either:
have the ability to specify the TCP keep alive period on create of channel
documentation around it, especially how it can cause hard-to-debug problems on GCE?
cc @ejona86 since he seems to have had opinions about it in #737
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1652
Exceptions thrown in StreamObserver.onNext() may be swallowed · Issue #1652 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For unary calls it appears the exception is basically guaranteed to be swallowed.
See #1638 for some discussion. Basically we try to fail the call with a Status, but if the call already completed successfully (which is especially likely for unary calls) the exception is thrown away.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1653
Conventions and style · Issue #1653 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've recently become an active contributor to the project and managed to have few of my PRs merged. My PRs received a lot of great feedback and good comments but also A LOT of convention/code style related ones. Everytime I receive one I feel really bad that I've wasted both mine and reviewer's time and only made whole review process longer by result. I tried really hard to improve in this area and conform to the coding standards but still noticeably failing at it and making nontrivial number of errors.
I really think that having conventions and pointing out inconsistencies in PRs is the right thing to do - please continue doing this - but I want to point out that we have two problems: tooling and style inconsistencies in existing code.
Regarding former, together with @ejona86 we tried to fix in google/styleguide#115. Latter is more tricky and partially fixable by former by having cohesive conventions. I don't think we should  create a massive "Fix style" type commit fixing all whitespaces and formatting because it'll only obfuscate git history but we need to agree which is the right convention with which we want to move forward and format every new code using it (case in point: indentation after line break in method definition is different between two methods in the same file )
One more time it'd like to emphasize that I'm not moaning about nitpicking but rather raising an issue which after solving will make lives better for both maintainers and contributors.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1655
Android example fails to build · Issue #1655 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is basically the equivalent to #1614
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1657
OutOfBounds exception with NameResolvers and TransportSet · Issue #1657 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Long story short, it appears there's an explicit array.get(0) that happens on the first outbound call, but if the NameResolver hasn't found any servers yet, this causes an exception.  Stack trace can be found below(SpectatorInterceptor is a proprietary metrics component, and the EurekaNameResolver simply uses Eureka to resolve a set of IP + port that can then be used to load balance).  In the case below, the list of servers the EurekaNameResolver passes to onUpdate is empty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1660
Add an API on Channel for getting Channel security configuration · Issue #1660 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As required by #874, auth interceptors needs to know whether the channel is using secure transport, something like
The features are not necessarily orthogonal. For example, AUTHENTICATION is only useful when INTEGRITY is there, so we may want to make AUTHENTICATION automatically imply INTEGRITY. The enum may also be expanded when necessary.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1663
Need to remove usages of Guava's Throwables.getCausalChain · Issue #1663 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is marked @Beta, so isn't appropriate in a library.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1664
Solve formatting problems once and for all · Issue #1664 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
by submitting to our benevolent autonomous overlords.  The Google standard formatter would solve all formatting debates, and could be pulled in as part of our tests:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1665
ServerInterceptor close trigger MessageDeframer is already closed · Issue #1665 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want implements ServerInterceptor for intercepting incoming calls to check valid authentication credentials.
Here is my java env and code snippet.
question is:
invoke serverCall.close and return null trigger NPE
Note: this exception is not appear at first time, should invoke client/stub again, the server side exception show up
so. is the bug? or what is the best practices doing this.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1669
GrpcUtil.getGrpcUserAgent creates a lot of garbage · Issue #1669 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GrpcUtil.getGrpcUserAgent creates a lot of garbage based on profiling, showing up in the top 20.  It appears that this call was designed to mostly static and not change per call.
We should find a way to initialize this at channel creation time to make this not so messy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1670
DefaultHttp2HeadersEncoder.encodeHeaders are slow · Issue #1670 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After GC and syscalls, io.netty.handler.codec.http2.DefaultHttp2HeadersEncoder.encodeHeaders takes the most CPU on a simple ping pong stress test. It accounts for about 3.3% of total program time.  The offending line is:
I am not sure why this is so slow, but we should probably investigate it.  My test does nothing special with  headers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1674
Rapidly cancelling a Call can overwhelm transport · Issue #1674 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Doing something like
rapidly in a loop causes memory to not get reclaimed.  Somehow netty is holding on to commands sent to it from the ClientCallImpl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1675
MessageFramer allocates 1 byte array · Issue #1675 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Each RPC creates a message framer which has a ref to a BufferChainOutputStream, which always allocates a single byte array.  At a high number of concurrent RPCs, this accounts for a non trivial number of 1 byte arrays (like millions).
This should be easy to remove, and make the GC have an easier time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1676
Reduce default max message size · Issue #1676 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently DEFAULT_MAX_MESSAGE_SIZE is 100 MB. That's laughably high. We should reduce it down to at least 10 MB, but 1 MB would make me feel much better.
This needs to be done cross-language.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1678
Maybe add overload of providing ExtensionRegistryLite to Marhsallers · Issue #1678 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Somehow, some way, extension registries need to be passable to the grpc unmarshalling code.  Right now there isn't a good way to do so, due to marshalling being directly referenced by the stub, rather than the server/channel.  This means any code that is using proto2 extensions won't work with grpc.  Some ideas:
Make the stub code accept an extension registry if the proto syntax that generated the file is proto2
Allow a way for the extension registry to be passed to the client or server
Something else.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1682
Cancelling a call results in onClose never being invoked.  · Issue #1682 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider the following code:
onClose will not be invoked, so it becomes impossible to know when the call is actually done.  This seems wrong.  If the call is cancelled from outside of the listener, onClose is invoked.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1683
protoc-gen-grpc-java crashed on MaxOS · Issue #1683 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I meet this problem when I was trying to generate code based on my .proto file, and the error stack trace is:
And my pom.xml content is:
mvn -version output is:
I have no idea how to fix this issue, and hope you guys can help me. Thanks~
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1685
QpsWorker doesn't terminate after it has run a client and QuitWorker has been invoked. · Issue #1685 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was able to successfully run a benchmarking scenario using Java QPS woker, and the worker that was running the server terminates fine, but the worker that acted as a client doesn't terminate.
after printing "Terminated" the process never finishes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1693
Android - Not referencing the Request and Response file · Issue #1693 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have imported the project and referring to the android code in examples , below is the build.gradle file I am using .
Thanks in Advance ,
Praveen Pandey
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1695
StressTestClientTest.gaugesShouldBeExported is flaky · Issue #1695 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen at https (since rebuilt):
Also seen at https (since rebuilt)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1698
Android - nano folder not being referenced from the generated folder · Issue #1698 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi ,
Please help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1699
Bad ssl setup leads to requests never returning · Issue #1699 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've shoot myself in a foot by copy-pasting code snippet between client and server code which looked almost identical ;)
I've been trying to make a call from client which was set up as follows:
Such setup, as you may already noticed,  is obviously incorrect on the client and the correct way to do this is to use SslContextBuilder.forClient instead of SslContextBuilder.forServer like this:
This lead to client being broken and handing indefinitely, after making a call, during handshake without throwing any error or other indication or notice of horribly wrong setup. It would be great if we could prevent from making this mistake somehow.
As an aside, would be nice if netty could provide overloaded versions of forClient just like it does for forServer. I might be missing something because I haven't looked into this deepy, but it doesn't seem that there's anything preventing from that (?).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1700
Decide if io.grpc.Attributes should be marked experimental. · Issue #1700 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1701
Tracking Issue for BindableService being Experimental. · Issue #1701 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1702
Check CallOptions affinity, deadline and compression methods to see if they should still be experimental. · Issue #1702 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1703
Tracking issue for messageCompression being experimental. · Issue #1703 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1704
Tracking Issue for Codec, Compressor, CompressionRegistry being Experimental.  · Issue #1704 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
They may exist, even independent of turning off compression for public release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1705
Tracking Issue for  Context being experimental · Issue #1705 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#262 was closed as fixed (and linked to by the Context.java file), but we still need to determine if we should commit to the API for 1.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1706
Tracking Issue for Deadline being Experimental. · Issue #1706 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1707
DnsNameResolverFactory should be checked if still Experimental · Issue #1707 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1708
Check if EquivalentAddressGroup should still be experimental. · Issue #1708 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1709
MutableHandlerRegistry and HandlerRegistry need to be checked to see if still Experimental.  · Issue #1709 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These have been around a long time, maybe its time the graduate to stable?
+cc: @louiscryan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1710
Tracking Issue for Server Attributes being Experimental. · Issue #1710 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Other languages propagate these via a context, maybe they should be done that way?  In any case, these should be looked at to see if they are part of 1.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1711
Tracking Issue for ServerInterceptor being Experimental. · Issue #1711 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These have been around for a while, do we want to keep them?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1712
Check if ServerInterceptors.useInputStreamMessages and .useMarshalledMessages  should still be experimental · Issue #1712 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These methods seem somewhat niche, should they be part of the API for the future?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1713
Consider removing ServerServiceDefinition, per the comment · Issue #1713 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This class is experimental, and needs to be checked if it should be part of the stable API
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1715
Document that Status's cause is not transmitted from server to client · Issue #1715 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1716
Throw away Status cause in InProcess transport · Issue #1716 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To act like a normal transport, InProcess transport should throw away everything in the status but the code and message. Otherwise it will be misleading during testing and general usage.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1717
maven plugin generates puzzling custom protobuf file on windows x64 · Issue #1717 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I followed the Readme.md and used the maven plugin for protobuf-based codegen of proto files. After importing the maven plugin in project from pom.xml, I executed the command of protobuf:compile and protobuf:compile-custom and got the generated protobuf files.
But the generated custom grpc-java file of *Grpc.java is not compatible of java 8. The IDE of intellij idea told me that "@java.lang.Override is not allowed to when implementing interface method". I compared the generated *Grpc.java file with the *Grpc.java file in the io.grpc.examples in grpc-java repository. The file from github (for example, RouteGuideGrpc.java)  has abstract class AbstractRouteGuide, but using maven plugin can not generate the abstracte class.
Why the file generated by maven plugin is not compatible, and how can I generate the correct java file?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1720
Throw Status.UNAVAILABLE on connection refused · Issue #1720 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think we want to catch io.netty.channel.ChannelException and re-throw as Status.UNAVIALIBLE when endpoint is unreachable:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1722
API to convert from Status.Code to Status · Issue #1722 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Status.fromCodeValue(code.value()) isn't too bad, but it does seem a bit strange not having something more like Status.fromCode(Code). Alternatively, we could make Status.Code.status() public, but that doesn't seem to match the rest of the API as well.
@lukaszx0, FYI
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1732
Travis-CI caching is breaking OS X · Issue #1732 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Caching now seems to be supported on OS X, but it is sharing the cache between OS X and Linux and the OS X build is accidentally trying to use Linux binaries. We need to split out the protobuf binaries between the two systems.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1734
Http2OkHttpTest.deadlineExceeded is flaky · Issue #1734 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1736
Contexts missing private constructor · Issue #1736 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Contexts should not be instantiated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1737
Contexts.statusFromCancelled should be marked experimental · Issue #1737 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I question if any of our users will actually use the method. It can be moved into io.grpc.internal or it can be marked Experimental. If there is a use case for it, it'd be good to know, since it didn't come up during review.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1745
setRemoveOnCancelPolicy is not called · Issue #1745 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At least on OpenJDK, newSingleThreadScheduledExecutor() does not return a ScheduledThreadPoolExecutor. The documentation says:
Unlike the otherwise equivalent newScheduledThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads.
So maybe we should be using newScheduledThreadPool(int) instead. But since that still isn't required to be a ScheduledThreadPoolExecutor, maybe we should just construct a ScheduledThreadPoolExecutor directly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1756
NettyTransportTest > newStream_duringShutdown FAILED flaky · Issue #1756 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seen here: https
Unsure how this can happen, given that we pick a free port https ... and we shouldn't be racing with other tests ... unless they are run in parallel?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1758
channel warm up per thread · Issue #1758 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, all. I'm doing an experiment with grpc and find out that the first usage of grpc in a thread costs much more time than the subsequent ones doing the same thing. I tested it on a 2-core laptop and 24-core machines, and the same phenomena occurred on all of them. So I'm wondering if I'm using grpc wrong or something in grpc-java could be improved to avoid such situation. Below is my code and part of  the report.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1759
Swap to 'fail fast' and 'ignore connectivity' behavior · Issue #1759 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The other implementations are swapping to fail fast by default. We believe this is what users would typically assume our behavior to be and it behaves well with infinite deadlines, as well as being required by many latency-sensitive applications. These are not the same semantics as in Stubby, because gRPC will delay the RPC while in IDLE or CONNECTING until the state becomes READY or TRANSIENT_FAILURE.
Java today is doing neither 'fail fast' nor 'ignore connectivity', but instead something in-between because it delays while in TRANSIENT_FAILURE, but only one connection attempt.
This is a very important behavior change for users and must be done before GA.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1762
Add connection window debug information. · Issue #1762 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This likely belongs in Netty somewhere, but I'm adding it here so I don't forget.  It would be super useful to be able to quickly look at the connection level window and stream window, likely as some sort of debug log output.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1764
Tracking Issue for Attributes being Experimental. · Issue #1764 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In #1700 it was decided that Attributes is still experimental.  This issue is acts the the reference from the source code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1766
Tracking Issue for affinity being Experimental. · Issue #1766 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1767
Tracking Issue for authority being Experimental. · Issue #1767 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In regards to #67.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1768
NettyServerTransport.notifyTransport() logs at SEVERE · Issue #1768 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Logging at SEVERE is probably an overkill most of the time. There are rare cases that something higher would be useful, but I don't think we could easily distinguish between those cases. We should probably reduce the severity to something lower, although I'm sure what makes the most sense.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1769
Tracking Issue for DnsNameResolver being Experimental. · Issue #1769 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In regards to #1707.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1770
Tracking Issue for NameResolution being Experimental. · Issue #1770 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1771
Tracking Issue for Load Balancing being Experimental · Issue #1771 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
LoadBalancer
ManagedChannelBuilder.loadBalancerFactory
PickFirstLoadBalancerFactory
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1772
Tracking Issue for Plaintext being Experimental.  · Issue #1772 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1773
Tracking Issue for Target Specification being Experimental. · Issue #1773 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1774
Tracking Issue for Method Descriptor being Experimental. · Issue #1774 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1775
Tracking Issue for Idempotence being Experimental. · Issue #1775 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1777
Tracking Issue for Marshaller being Experimental. · Issue #1777 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1778
HelloJsonClient is not obviously advanced · Issue #1778 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The helloworld example is supposed to be the first thing you see. The JSON client example is easily confused as being important for initial users. We need some way to distinguish it and avoid new users looking at it too early.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1779
Tracking Issue for ServerCall Attributes being Experimental and rename it getAttributes. · Issue #1779 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1780
Tracking Issue for Server.getPort being Experimental · Issue #1780 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1781
Tracking Issue for TransportManager being Experimental. · Issue #1781 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1782
Tracking Issue for GrpcLoadBalancer being Experimental. · Issue #1782 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1783
Tracking Issue for InProcessTransport being Experimental. · Issue #1783 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is no plan to make this API stable.
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1784
Tracking Issue for Netty being Experimental. · Issue #1784 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Despite Netty being the default and recommended transport, we mark is as experimental, implying it is not stable.  Once the transport layer is stable, this should be promoted.
Either we should commit to supporting it, or commit to a subset of the methods exposed.
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1785
Tracking Issue for OkHttp being Experimental. · Issue #1785 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is no plan to make this API stable, given transport API instability.
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1786
Tracking Issue for JSON Marshalling being Experimental · Issue #1786 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1787
Tracking Issue for Extension Registry being Experimental. · Issue #1787 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1788
Tracking Issue for (Call|ServerCall)StreamObserver being Experimental. · Issue #1788 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1789
Tracking Issue for MetadataUtils being Experimental. · Issue #1789 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1790
Tracking Issue for ServerCalls being Experimental. · Issue #1790 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1791
Tracking Issue for Testing utilities being Experimental.  · Issue #1791 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1795
Unimplemented service causes MessageDeframer exceptions in the log · Issue #1795 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm seeing exceptions running grpc-java 0.14.0 in production (same with 0.13.2). Reproducible on both linux and mac with oracle jdk 1.8.0_66.
I've found the following code reproduces the exceptions (the number of rounds required may vary as it doesn't happen for all requests):
If you replace Netty with InProcess, you can get the following exception (the number of rounds must be increased a lot, though):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1797
Differences in generating GreeterGrpc.java from github example using maven · Issue #1797 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I've been playing with the examples and I cannot figure out why the GreeterGrpc.java file that I generate is different from the example shown here: https
In my GreeterGrpc.java, I am missing the abstract class that I need to extend to make everything work. Here's what I see:
I did notice that the examples published used might use a newer version of the compiler, but I'm not sure how this translates to maven from gradle. As a reference, here's my mvn file as well:
I use maven as my build system and this is the contents of my maven file:
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1798
BUG: Attributes broken in 0.14.0 · Issue #1798 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to a recent change in how attributes are stored it is no longer possible to look up attributes in an incoming request.  There's a fix for this in #1763.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1800
ClientInterceptor per call parameters · Issue #1800 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our generated clients come pre-configured with a set of approximately 10 interceptors covering functionality from response caching to metrics reporting.  We'd like our users to be able to customize these interceptors per call.  What is the recommended mechanism to pass per call parameters to a client already configured with ClientInterceptors?
Here's an example for setting up a client
When using the client we'd like our users to do something like,
Any other recommendations on how this could be accomplished?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1802
Netty server -> client messages apparently dropped in 0.13.2+ · Issue #1802 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am observing some strange behavior on grpc 0.13.2 and above, on my Macbook Pro. Diagnostic information at the bottom of this issue.
Essentially what seems to happen is that the call is correctly handled by the server, all the way through onComplete, but the client never receives any of the inbound frames. This happens for, say, 5% of calls.
I've attached an example log snippet, including annotations indicating where the various callbacks are invoked, as determined by our logging interceptors.
This doesn't reproduce on 0.13.1, but is consistently reproducible on 0.13.2. Unfortunately I was unable to come up with a minimal reproduction.
Any help is greatly appreciated! Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1804
Verify server sends grpc-accept-encoding appropriately · Issue #1804 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the client sends a gzip-encoded request and the server responds with headers (endStream=false) that does not include grpc-accept-encoding gzip, then the client should warn. This is misbehavior on the server-side and would ideally be detected.
Although I said "warn" above, we're actually aware of servers failing to do this properly today. So initially we can use FINE and eventually swap it to warn.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1805
grpc-all-0.14.0.jar on Maven Central is truncated (only 361 bytes) · Issue #1805 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-all-0.14.0.jar on Maven Central is truncated and appears corrupted. Note that the "Download the JAR" link on the grpc-java front page points at this corrupt file as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1808
use maven plugin generate grpc code ,why only XXXGrpc.java been generated. · Issue #1808 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,
i used  maven plugn to compile example helloworld.proto, and i  specialed the ${basedir}/src/main/java, the generated code only contain the GreeterGrpc.java,how can i ,generate
AddressBookProtos.java HelloReply.java HelloReplyOrBuilder.java HelloRequest.java HelloRequestOrBuilder.java 
at same time.
thank you .
The exception "UNAVAILABLE: Stream IDs have been exhausted" is thrown, making the current RPC fail.
A new transport is only created once all RPCs are complete, which is a problem for slow RPC and long lived streams, as there's no upper bound for how long a stream can live.
The implication here is that a channel can become unavailable for a unbounded amount of time. Here's a couple of possible improvements:
Forcefully cancel active RPCs so that the transport can shutdown quickly and completely so that a new transport can be opened. This is somewhat consistent with the current behavior where RPCs fail due to Stream ID exhaustion, but is still suboptimal with the same set of problems the current implementation has with failing RPCs. Given that a client already has to deal with various error situations, this could be a good enough solution.
Start new transport without waiting for the current transpot to shut down. This has a worst case scenario of creating a transport per long lived stream per ~1 billion requests, which is perhaps rarely enough given that a few thousands requests per second should last a few days.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1812
Stress test failures in Java client · Issue #1812 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps to repro:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1814
Add ability to MethodDescriptor to return classes of request and response. · Issue #1814 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
MethodDescriptor is parametrized by <RequestT, ResponseT> but programmatically it's not possible to get this classes. What do you think about adding 2 getters to MethodDescriptor and populating it in generated classes:
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1815
NPE from OkHttpChannelBuilder with ConnectionSpec.CLEARTEXT · Issue #1815 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm getting a NPE when I use OkHttpChannelBuilder with ConnectionSpec.CLEARTEXT.  I might be misusing the API, but I think it's actually an issue.
The problem is that Utils.convertSpec is calling spec.tlsVersions:
But tlsVersions is always null (and enforced to be so) if not using TLS.
If this isn't me doing something wrong, I'm happy to send a patch.  I guess the patch should be to check whether TLS is enabled before calling tlsVersions, in Utils.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1819
netty: Stream ID exhaustion takes too long to swap transports · Issue #1819 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is split out of #1809.
A new transport is only created once all RPCs are complete, which is a problem for slow RPC and long lived streams, as there's no upper bound for how long a stream can live.
This is because the transport does not call transportShutdown() immediately, but only once all the streams on that transport have completed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1824
ServerCallStreamObserverImpl should record where cancellation came from · Issue #1824 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently a single boolean "cancelled" is set which loses where the observer was cancelled from.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1829
push to client · Issue #1829 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems not support push. Am right?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1833
Automate builds · Issue #1833 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be great if we could automate point releases by spinning up the appropriate VMs, building our protoc plugin on each, and uploading to maven central.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1837
Status.fromThrowable loses description · Issue #1837 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
cause ends up being an exception other than Status{,Runtime}Exception, only the cause is added.  When converting the status back to trailers, it is ignored, which makes it hard to debug "UNKNOWN".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1840
Implement Round Robin logic in SimpleLoadBalancerFactory · Issue #1840 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Round robin logic is not yet implemented. Is there any timeline for this?
Thanks,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1848
Tracking Issue for Health Service APIs being Experimental · Issue #1848 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HealthStatusManager
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1849
Deadlines relative to call start · Issue #1849 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now, it's not possible to set a deadline across all calls on a stub, doing something like stub.withDeadline(1, TimeUnit.SECONDS) starts counting right at this point, so when a single stub is injected and shared throughout the application, the deadline is quickly triggered :)
It would be nice to have something like stub.withDeadlineAfterStart(1, TimeUnit.SECONDS) that doesn't trigger until the newCall or start methods are called potentially.  This would allow me to configure my gRPC client with a deadline that is usable by default on all calls and also "correct" for my usage in how it counts down.  Is this something you'd be open to?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1850
Mistake in gRPC Basics: Java tutorial · Issue #1850 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
says that we should declare service as:
private static class RouteGuideService implements RouteGuideGrpc.RouteGuide
but example file declares service implementation as:
private static class RouteGuideService extends RouteGuideGrpc.AbstractRouteGuide 
if class implements RouteGuideGrpc.RouteGuide then the server cannot be created as the next tutorial section says:
server = serverBuilder.addService(new RouteGuideService(features)).build();
because our service doesn't extend AbstractRouteGuide and thus doesn't implement BindableService interface.
A tiny problem but causes gRPC first timers like me some headache.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1852
CascadingTest.testCascadingCancellationViaMethodTimeout is flaky · Issue #1852 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think I've seen it flake on my own machine as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1860
How to get socket address in an Interceptor · Issue #1860 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a mechanism for getting the address of the load balancer resolved server's socket address in a client interceptor?  And on the server, get the address of the calling client?  Our use case is that we'd like to log this information in addition to other metadata that is associated with this address.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1861
Metadata trailers are not passed to Status*Exception when using BlockingResponseStream · Issue #1861 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi @nmittler,
thanks for improving the error handling via #1811 and solving #681.
When using blockingStubs on the client the metadata trailers are not passed into the Status*Exception. Your changeset adds this ability to 2 of 3 onClose methods of stub/ClientCalls.java.
Did you just miss to add the trailer handling to the BlockingResponseStream class in 
Regards,
Björn
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1863
Fail-fast mode · Issue #1863 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to https, fail-fast mode is enabled by default. But it didn't say how to disable it.
I couldn't find much resource for fail-fast mode other than the file. Can anyone link me to related example/code/documentation? Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1869
Tracking Issue for Custom CallOptions being Experimental. · Issue #1869 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1871
Okhttp Headers performance improvements. · Issue #1871 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OkHttp performance has been lackluster for a while, likely due to it not being easy to benchmark.  (especially on android!).  It does some extra validation we don't need (since Metadata) already does it.  We should audit the okhttp path and add some benchmarks in order to measure improvement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1872
Lots of garbage created by Netty's HPACK encoder · Issue #1872 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty takes great pains to not copy data unnecessarily, so it was surprising to find lots of garbage being created in the Hpack encoder.  Specifically, most of it comes from https
Which creates a new string for most (all?) headers.  We should fix this!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1873
Maybe make a custom Http2HeaderEncoder · Issue #1873 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the default Netty Http2HeaderEncoder grabs an iterator from an Http2Headers objects and iterates over the values, adding them to the table and serializing them to a ByteBuf.  We could save on a lot of allocations and cputime if we could pass an array directly in and skip Iterator.  We don't even have to deal with the hpack portions of this since we can reuse that API independent of the Http2HeaderEncoder interface.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1874
grpc tls · Issue #1874 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We created a server and a client with tls in nodejs. This works. Below is the snippet.
server code
client code
We want to create a client in java that can communicate with the server in nodejs. But this does work. Below is the code for java client
The error message server side is
Below is the command to generate our server.key and server.crt
We tried to generate the key and the certificate following this link
But these commandes don't work, we couldn't follow.
Could you help us, please?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1877
{Netty,OkHttp}TransportTest.serverNotListening is flaky · Issue #1877 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1878
Stack Overflow when running AsyncClient · Issue #1878 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1879
ConcurrencyTest.serverStreamingTest is flaky · Issue #1879 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Build failed at ConcurrencyTest
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1881
More flexible SSL configuration API · Issue #1881 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today ServerBuilder.useTransportSecurity takes two files as parameter. However, sometimes only InputStreams for the key and cert files are available. Can we add an API to take two input streams?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1883
java.lang.IllegalArgumentException when try to use ipv6 · Issue #1883 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I guess this is caused by the scopeId:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1885
Cache results of DecompressorRegistry's known message encodings · Issue #1885 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Profiling shows a sizeable chunk of ClientCalls is spent in generating the grpc-accept-encoding headers.  This class was designed with a more dynamic use case in mind, but that is no longer the case.  Approximately 1.25% of all time spent in a call is from generating these headers.
This should be fixed by altering the class to be more expensive to create, but extremely fast to read.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1886
Allow specifying maximum number of connections on Server · Issue #1886 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This will probably be implemented as part of a larger piece of work to control resources on server-side.
Note that slightly different metrics (like maximum number of streams across the server) may be better; I'm not trying to dictate the exact metric, just the need for this sort of control.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1899
added android:shareUserId then io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact · Issue #1899 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
added android:shareUserId then io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact
help...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1901
Stabilize generated MethodDescriptor API · Issue #1901 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today, the generated method descriptors are available as fields. This should probably be changed to be behind a method of some sort so that they can be generated lazily (to reduce static class loading time for Android).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1905
Errors with concurrent server push · Issue #1905 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I'm getting errors when making concurrent server pushes to the same client connection.
You can see simplified repro here https:
Just clone and run mvn test to see repro.
It is supposed to send 100 messages, but generally the client does not receive 100, and there are errors logged in the process, e.g.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1906
Question on Android Requirements · Issue #1906 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a grpc server written in go which serves through a valid https certificate,
and an Android client like the examples but without the usePlaintext(true) part.
The RPC services work fine for Android devices with sdk-version >= 21, but they fail for older devices with this exception:
Using this mechanism I was able to perform the rpc call on an older device, but the suitable Google Play Services version isn't installed on more than half of the devices in my target population. Is there another way to make grpc work on theses devices? Like switching to Netty-based transport? Is there any sample of an android app usig Netty-based transport?
Thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1907
protobuf beta 3 · Issue #1907 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi! It seems we can update to protobuf beta 3, I think it would go here?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1909
Improve debugging of tcnative loading · Issue #1909 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If tcnative fails to load, it is painful to figure out why. We should include OpenSsl.unavailabilityCause() (or similar) when we fail to find any ALPN providers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1913
StatusException and StatusRuntimeException not serializable · Issue #1913 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
StatusException and StatusRuntimeException are not serializable due to containing a Status object (which makes no attempt to be serializable) with no special handling.
Here's a snippet from the exception that arises:
Our use case is an RMI-like API to make calls to a server process which is then making gRPC calls. In this case an operation failed and then things go really wrong because we can't see the root problem since the real exception can't be serialized.
I think to be a "good citizen" the Status*Exceptions should be serializable so it would seem that either:
Status should also be
The status should be pulled apart and the pieces stored in the exception classes
Special serialization routines should be put in place to pull the Status apart on write and put them back together on read
If you know which approach you'd like to take, I'd be happy to implement it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1914
Make CallCredentials non-experimental · Issue #1914 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a tracking issue for removing @ExperimentalApi from CallCredentials-related API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1915
Tracking Issue for CallOptions.withWaitForReady being Experimental. · Issue #1915 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The opposite to 'fail fast' is documented as 'ignore connectivity' and in C. However, in Java we prefer to use 'wait for ready'.
Still some debates on naming the methods as pointed out in comments in #1912.
Let's mark it with @experimentalapi since the name of "non fail fast" is still a bit up for debate.
Do we want withFailFast(void) and withWaitForReady(void), or do we think the boolean withNonFailFast(true) is nicer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1926
Stop creating a CancellableContext for ClientCall · Issue #1926 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in #1878, it is pretty easy to accidentally create long chains of Contexts when we create a new Context for each ClientCall. Thinking about it more, it seems creating a Context was a misstep. The RPC doesn't really mean "a unit of work" in the same way as it does for server-side, and it is unlikely that any result processing should be killed when the RPC completes (successfully or unsuccessfully). Also, only async stub sees the context, which seems like further evidence that there is nothing inherent that should cause us to create the Context.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1927
Get conscrypt working with Netty · Issue #1927 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Related to: netty/netty-tcnative#114
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1929
IllegalStateException still happening for io.grpc.internal.TransportSet$TransportListener.transportTerminated on 0.15.SNAPSHOT  · Issue #1929 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After pulling in 13fe13b still getting this exception happening in some clients.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1930
Swap Android docs to Protobuf Lite · Issue #1930 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Protobuf lite is a much nicer API than nano and is very similar API-wise to normal protobuf. We should swap the example to lite instead of nano.
The README should also be swapped to encouraging protobuf-lite for Android instead of protobuf-nano.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1932
ClientCallsTest.inprocessTransportOutboundFlowControl is flaky · Issue #1932 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1936
directExecutor on Server is broken if handler not found · Issue #1936 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When directExecutor is used, failure to find a handler will call close() before setListener is called. This is effectively a manifestation of the concern presented in NettyServerHandler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1940
Revert #1515 after 0.15 release. · Issue #1940 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From the discussion in #1330. Just so I don't forget.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1943
Implement connection attempt exponential timeout · Issue #1943 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is not for exponential backoff, but for exponential timeout. Currently the timeouts involved aren't tuned at all between attempts. We want to have a single timeout applying to all parts of the connection attempt, as defined in the connection backoff spec. This generally prevents the need for users to specify connect timeouts.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1944
Implement per-stream compression · Issue #1944 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is to replace our current per-message compression for greater compression ratios. I don't think there is a public spec yet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1945
Include QuickStart example in documentation · Issue #1945 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I wonder if the documentation can be impoved by pulling in quickstart examples from grcp.io? It took me about half an hour to even start experimenting after reading the GitHub documentation - then somebody showed me grpc.io example and it was SO much easier to start learning and experimenting using those examples.
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1946
gRPC server does not exit on OutOfMemoryError · Issue #1946 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I did a simple test as throwing java.lang.OutOfMemoryError in my service code. It seems that the error is caught in io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener.halfClosed() and its not re-thrown.
Therefore the server will continue running.
The version of the gRPC is 0.15.0-SNAPSHOT
Is this expected behavior or it is a bug in the code?
Thanks,
Rado
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1947
ServerCallImpl's use of metadata in sendHeaders is thread-unsafe · Issue #1947 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServerCallImpl uses metadata to determine compression settings in sendHeaders. However, that Metadata has already been passed to the application which is free to modify it. The acceptEncodings should just be saved as a field during the constructor instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1949
Service implementation running in a different thread than "ServerCall<RespT>.request()"? · Issue #1949 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've implemented a simple ServerInterceptor whose intent is to grab the value of an header (a "trace ID") and place it in the MDC upon receiving a request (and to do the reverse when request handling finishes).
However I've noticed that the service implementation itself and the interceptor's close method are being run in a thread different than the one that originally runs the interceptor's request method. This causes contextual (MDC) information to be lost. These are my service's logs (the UUIDs are the "trace IDs"):
My interceptor's implementation is roughly the following:
Is this an expected behaviour that I should be prepared for, or am I facing some kind of issue on gRPC's side?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1951
protoc-gen-grpc-java snapshot doesn't have a mac build published · Issue #1951 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys, we have tried to switch to the latest snapshot, but unfortunately only our
linux users were successful. Do you have plans to publish the mac snapshots to sonatype
or we should build on our own ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1968
Android Build Failed with an exception. Could not resolve all dependencies for configuration ':app:protobufToolsLocator_grpc'. · Issue #1968 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Could not resolve all dependencies for configuration ':app:protobufToolsLocator_grpc'.
Could not find io.grpc:protoc-gen-grpc-java:0.15.0-SNAPSHOT.
Searched in the following locations:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1972
Keepalive in OkHttp · Issue #1972 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is splitting out the okhttp portion from #1648, since we are wanting to get it done before Keep-Alive in general is completed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1973
Default value for message is null? · Issue #1973 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From this doc, default value for message field is null, while from the generated code, it seems the DEFAULT_INSTANCE of the message is returned, which is not null.
Is the doc wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1975
Tracking Issue for Contexts.statusFromCancelled being experimental  · Issue #1975 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Forked from #1705
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1981
Executor usage in `ClientCallImpl` races with channel shutdown and termination. · Issue #1981 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ManagedChannelImpl clear scheduledExecutor in shutdown(), and releases (which potentially closes) executor in maybeTerminateChannel().
Neither newCall() nor ClientCallImpl checks the shutdown state of the channel. ClientCallImpl relies on FailingClientTransport for the expected behavior. However, ClientCallImpl uses the passed in executors anyway, for scheduling the deadline timer and invoking the call listener.
If ClientCallImpl tries to schedule a deadline timer after the channel is shut down, it will get a NPE. If it runs the call listener after the shared executor has been closed, which is 1 second (SharedResourceHolder.DESTROY_DELAY_SECONDS) after all references are gone, e.g., the application calls Call.start() that late, it will get a RejectedExecutionException. Our current tests are not testing for the two cases.
This doesn't seem to be a serious issue. It only affect people who try to use Calls after the channel has been shutdown. I am yet to figure out a solution.
Anyway, it seems executor should be cleared after being returned to the shared pool, like scheduledExecutor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1982
cannot find a NameResolver exception for revision fc5197fbf4ca51bd76484b28e155beb52c0c0a90 · Issue #1982 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86 @carl-mastrangelo
I check out the most recent commit, and find out that there is something wrong with channel initialisation.
What I get is:
And the same exception for netty transport too. Replacing 127..0.0.1 with localhost doesn't work. It happens on all the IPv4 addresses I try.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1993
Implement status_code_and_message interop test in Java · Issue #1993 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a spec, and implementations in some languages, but none in Java yet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2005
ManagedChannels and Servers should nag when not shutdown properly · Issue #2005 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Idea: add a finalizer to ManagedChannels and Servers, to make sure they are shutdown properly.  In the event that a user loses a reference to the object, the finalizer can check to see if it was shutdown properly and loudly nag about how it should be done correctly.  It may or may not decide to actually do the shutdown in addition.  It is not guaranteed to run, but would help point out where they are being lost.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2014
Race on NettyServer shutdown. · Issue #2014 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Even with 2292cbf it seems there is still a race with shutdown.  Initial guess is that the shutdown and close are happening in the Boss Event loop and the normal event loop.  Conflicting reads and writes:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2015
Race on NettyClientTransport.start · Issue #2015 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bootstrap.connect seems to add a listener to a ChannelFuture that is concurrently modified by the NioEventLoop and the client provided executor in ConcurrencyTest
Conflicting accesses:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2016
Custom HostnameVerifier for NettyChannelBuilder  · Issue #2016 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would it be possible to provide a customizable javax.net.ssl.HostnameVerifier on he client side?
The most http clients provide this feature in order to deal with "generic selfsigned certificates".
Currently I use netty's InsecureTrustManagerFactory, which trusts all certificates not just mine.
val sslContext = GrpcSslContexts.forClient()
    .trustManager(InsecureTrustManagerFactory.INSTANCE)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2018
Issue compiling proto files using protobuf lite within android studio · Issue #2018 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I followed android example to compile few existing proto files that we have in android studio. However i get following errors
Following is how my module build.gradle looks like, Am i missing some config??
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2020
Is 0.15.0 out? · Issue #2020 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I see it in the release tab from a couple days ago, but it isn't in maven central, are you waiting to pull in more before publishing it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2022
Make ManagedChannelBuilder.idleTimeout() non-experimental · Issue #2022 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2024
Consider doing header processing on Application thread · Issue #2024 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Profiling shows that about 10% of time on the network thread on a spinning benchmark is spent converting from Netty Headers to gRPC Metadata.  This has been optimized recently, and the profiling doesn't include recent Netty changes, but most of the time is actually in the gRPC code!
An idea to fix this would be to punt the conversion of Transport Headers to gRPC Headers onto an application thread, freeing up the network thread.  I don't imagine this would have big CPU savings, but could have a latency spike.
cc @buchgr  thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2027
netty: Improve flusing behaviour in WriteQueue. · Issue #2027 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The discussion is in PR #1989 ... More investigation is needed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2029
Stop infinite loop · Issue #2029 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm try to do some streaming service. I do something like this:
But if client is goes away or (somehow) isCancelled() not changed either StreamObserver not started throwing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2031
grpc-netty on maven central depends on netty 4.1.2 but code assumes 4.1.1 · Issue #2031 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that the grpc-netty v0.15 package on Maven Central suggests using netty-4.1.2Final. However, we get the following exception when we use it. The cause appears to be that the code uses a DefaultHttp2HeadersDecoder constructor that takes 3 parameters, as supplied by netty 4.1.1, but netty 4.1.2 added a 4th parameter, hence the NoSuchMethodError.
Everything appears to work fine for me with netty 4.1.1Final.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2034
ServerImpl may use executor after it is released · Issue #2034 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since 777e928, ServerImpl may reference executor and may schedule Runnables on executor after executor is released. The executor should be released on termination, not shutdown.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2036
Metadata trailers are not passed to Status*Exception when using ClientCalls.blockingUnaryCall. · Issue #2036 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to write a sample for #1295, but when calling unary rpc method on blocking stub, the trailers are not passed during ClientCalls.getUnchecked which is called from ClientCalls.blockingUnaryCall.
Is this by design or bug ?
Sample code is here, the blockingCall() fails but others are good.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2037
Optimize NameResolverProvider,ManagedChannelBuilder for Android · Issue #2037 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class.getResource() is very expensive on Android, so we need to find an alternative for our Provider classes.
Since Android has little need for alternative name resolvers and the number of transport implementations is very limited, we're planning on swapping to a hard-coded list of well-known providers when we detect we are on Android.
We will most likely hard-code the string in call to check for the class, Class.forName("io.grpc.internal.DnsNameResolverProvider"), to also allow ProGuard to notice the reference.
Internal tracking: b/30158670
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2038
Absorb new Java import style · Issue #2038 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The rest of the changes are Java 8-specific.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2041
Specify ThreadGroup to Netty · Issue #2041 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Depending on the specifics of how netty/netty#5533 ends, it may break our users using ThreadGroups. We would need to re-apply the workaround removed in 2d7347f or add a workaround that specifies the ThreadGroup to Netty's DefaultThreadFactory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2042
Improve thread safety docs for fields in ServerImpl · Issue #2042 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Split out of #2032 (comment). usingSharedExecutor and executor aren't using GuardedBy semantics. It isn't clear to @carl-mastrangelo that the current code is valid. Improve the docs/code to correct/make the correctness more clear.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2050
ClientCall.cancel is not required to be implemented · Issue #2050 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is an oversight based on how we changed the arguments. We should remove the default implementation for 1.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2051
Consider adding UnimplementedChannel to testing project · Issue #2051 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An UnimplementedChannel is convenient over using a InProcessServer without any services since it does not need to be shut down. It seems reasonable to make it easier to create a stub that shouldn't be used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2054
Log a warning in ClientCall.cancel if it has neither a message nor exception · Issue #2054 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2057
Service is still running when client is killed. · Issue #2057 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My service queries lot of data by jdbc and sends to client using grpc stream. If I killed the client, the service cant catch a exception, and it still running the circle to query from jdbc and write to stream. I cant find a method to receive a notify that grpc completed. What should I do, please?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2058
Remove usages of Guava's BaseEncoding and ByteStreams · Issue #2058 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Both are @Beta in Guava, and thus are not appropriate for use in a library. Usages within tests are fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2062
Benchmarks OOM · Issue #2062 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running FlowControlledMessagePerSecond benchmark with 4 forks creates out of memory exceptions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2063
Deprecated method warning when upgrading to 0.15.0 · Issue #2063 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got following warning messages in generated code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2066
[Question] BlockingResponseStream.hasNext blocks forever · Issue #2066 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I run into an issue that BlockingResponseStream.hasNext occasionally blocks forever while sending response for a streaming RPC. I haven't found any reliable way to reproduce this issue, but following code and comment in ClientCalls.java caught my attention:
I am not vary familiar with GRPC codebase. Could someone tell me when is this call going to block and which thread usually unblocks it? What could cause the call being blocked forever?
It seems GRPC does not timeout by default. Should I specify RPC timeout (BTW is timeout the same thing as deadline)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2068
TLS communication error between grpc-java client to golang server  · Issue #2068 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get the following error when establishing a connection between a grpc-java client and a golang grpc server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2074
How to use load balancer in client side · Issue #2074 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FYI. I am writing a client for a service, since this service has multiple instances, so I can get more than one addresses, and I just want to configure those addresses when I construct client. But after scan all the examples, I can't find such example. All examples use ManagedChannelBuilder.forAddress() like way to get a ChannelBuilder, I did notice that channel builder has a loadBalancerFactory method, but I am wondering how to implement a custom load balancer factory and where I can configure those addresses?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2086
Update to protobuf-3.0.0 · Issue #2086 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Upgrading to Protobuf-3.0.0-beta-4 breaks Lite, since there are no pre-compiled binaries for Lite at that version. GA will have pre-compiled libraries.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2088
HandlerRegistryBenchmark always fails · Issue #2088 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HandlerRegistryBenchmark always fails to run because MethodDescriptor expects a non-null request marshaller:
Probably easy enough to fix by adding one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2091
Error zero_copy_stream.h file not found during  ../gradlew java_pluginExecutable · Issue #2091 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2098
Android has version "0.0" in user agent · Issue #2098 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should have the actual version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2099
Can we please call the thrift module & artifacts 'grift' · Issue #2099 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@chedeti
@ejona86
Pretty please!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2109
DNS+SRV NameResolver · Issue #2109 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I see that there is currently a dns name resolver and I'm wondering if a dns+srv resolver would make sense for the project:
So you would be able to resolve a target like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2112
Server-side cancellation does not promptly inform server · Issue #2112 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Both context.isCancelled() and call.isCancelled() only begin returning true after ServerCallListener.onCancel() (in ServerCallImpl.ServerStreamListenerImpl, but that is already on application callback thread via ServerImpl.JumpToApplicationThreadServerStreamListener). That means callers must return from a listener event before the values can change and they will have already seen onCancel(), which makes them broken for the very case they are there to solve.
If !status.isOk(), both the context and the call should return true as soon as the transport notifies the server. How to do that seems it will be a bit awkward with the current code organization.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2116
build fails with exception v0.15.x :grpc-protobuf-lite:compileJava cannot find symbol · Issue #2116 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, All;
I am forced to work on a Mac OS system and I am simply trying to build the grpc-java examples.
I keep getting a build failure with exception.
Here is the relevant output:
Any advice would be welcome.
Thanks,
Jo3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2118
Excess contention in ExecutorService · Issue #2118 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When profiling a client with 200K active RPCs, there is a point of contention on the Executor.  Each RPC gets its own SerializingExecutor, which executes work on an underlying executor.  Currently, that executor is ThreadPoolExecutor in almost all cases, which itself has a BlockingQueue.  That queue is heavily contended  showing up at minutes of wasted time:
An idea to fix this is to have some sort of striping executor in order to prevent this contention from happening.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2119
Excess contention in ManagedChannelImpl.exitIdleMode · Issue #2119 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Each RPC needs a transport, and thus calls ManagedChannelImpl's transport provider.  This tries to make the transport wake up, but does so under a lock.  Profiling reveals a high amount of contention on this lock.  If possible we should look at eliding the lock and using a volatile read to get the loadbalancer out of it.
cc @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2120
Excess contention in ManagedChannelImpl getTransport · Issue #2120 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is major blocker for running at high qps
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2121
Excess contention in DummyLoadBalancer.pickTransport · Issue #2121 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2122
Contention in SerializingExecutor$TaskRunner.run · Issue #2122 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not sure why there is much contention here, but there does appear to be some.  This is very tiny compared to the rest of the other contention points.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2123
Reduce Thread count in default Event Loop Group · Issue #2123 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
By default, ELGs use 2x the number of threads as the number of processors.  This appears to be for applications that do a lot of work on their net threads, which gRPC does not.  Consider reducing ELG threads down to the number of processors.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2132
Filter mechanism for server transport creation and deletion · Issue #2132 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To support a per-connection throttling mechanism used inside google, gRPC needs to allow user to add filters to the server that:
Gets called when a server transport is created and handshake-completed, and has access to transport-specific attributes such as client address and identity.
Adds per-transport attributes to ServerCall attributes.
Gets called when a server transport is terminated.
I discussed a few options with @ejona86:
ServerInterceptor
The filter returns a ServerInterceptor when transport is created. The interceptor is transport-scoped, unlike ordinary interceptors that are service-scoped.
Doesn't touch transport API (ServerTransport, ServerStream) which are internal.
Re-uses ServerInterceptor for purposes that ServerInterceptor is designed for (modifying ServerCall attributes etc).
Changes the scope of ServerInterceptor. @ejona86 thinks bonding ServerInterceptor to a transport is seemingly generic but actually an ad-hoc solution for a particular problem. I don't necessarily agree though.
Decorating transport
The filter returns a decorated ServerListener at registration. Through a few more layers of wrapping, the filter would be able to decorate ServerListener.transportCreated(),ServerTransportListener.transportTerminated() and ServerStream.attributes().
Heavily coupled with transport API which is internal.
Duplicates the existing interceptor mechanism, but on ServerStream instead of ServerCall. It would be ideal to just decorate ServerCall, which is what ServerInterceptor does. ServerInterceptor currently is per-service, but our use case need it to be per-connection.
Even more layers of decoration than the interceptors. The filter can be annoying to write.
Ad-hoc
Just for our original requirements, the filter would return per-transport attributes that are to be merged into ServerCall attributes.
It probably won't work in this form, because the attributes such as peer security identity may not be available immediately after the transport is created, if the security handshake has not completed yet. On the other hand, the first two options can work around this situation by reading the attributes only when the first stream is created.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2139
Zero-copy* write combining · Issue #2139 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I propose to defer the serialization of protobuf, thrift, ... from the MessageFramer to the WriteCombiningHandler.
PR #1996 shows that combining small buffers into one large buffer can substantially improve throughput. However, it's very hard to come up with a one-size-fits all algorithm that decides on when to combine buffers. It's probably safe to assume that all buffers (HTTP/2 frames) except for DATA frames are small enough to be combined (copied) without much overhead. HEADERS could be large, but probably aren't. Say we would expect headers to be in the 100 - 300 byte range.
For example, a RPC response will typically write 3 HTTP/2 frames
In Netty's HTTP/2 codec that would typically translate to the following buffers being written
When using write combining as proposed in #1996, then depending on the size of the DATA(Payload) buffer, we would either pass one buffer or 3 buffers to write/writev. As mentioned before, coming up with a "magic" number N bytes that for all machines and workloads tells us when to combine buffers is hard. It would be much easier if we would simply always combine all writes until flush, and I believe we can.
If we change the MessageFramer internals and the WritableBuffer API, so that instead of always copying the InputStream into a buffer, it's up to the WritableBuffer implementation of when that copy happens. We could then create a simple, internal ByteBuf implementation that effectively just wraps an InputStream. The copying into a "real" ByteBuf could then be done in the WriteCombiningHandler. So we would still only do one copy, but instead of copying in the MessageFramer we do it in the WriteCombiningHandler.
The logic of the WriteCombiningHandler would become very streamlined. It simply stores a list of ByteBufs and Promises, and on flush it allocates a large buffer with exactly the number of bytes it needs, copies all buffers from the list into the large buffer, and does a ctx.writeAndFlush(largeBuffer, combinedPromise).
A nice sideeffect of this change would be that buffering / piggy-backing messages would no longer be a concern of the MessageFramer, but be a responsibility of the transport only.
Some questions:
This moves the protobuf serialization from the application thread to the Netty thread, is this a problem?
Right now the InputStream is immediately consumed when passed to the MessageFramer. With this change it would be consumed at some later point in time on the Netty thread. Could that be a problem in terms of leaks or so?
Thoughts @louiscryan @ejona86 @nmittler @carl-mastrangelo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2142
withWaitForReady is missing from AbstractStub · Issue #2142 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's added to CallOptions but we don't have a convenience on the AbstractStub. We expect it to be called pretty frequently in normal usage, so the convenience seems very appropriate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2143
Consider adding AbstractStub.withCallOptions() · Issue #2143 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would fully overwrite the current CallOptions. That could be considered "bad" because you don't know what you are overwriting, but it seems there are fine times to do so. Maybe it would be better to have a new generated method newStub(channel, callOptions) instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2145
How to implement  logging in ClientInterceptor？ · Issue #2145 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to logging the content of request and response each call. As documentation saying :
Interface for intercepting outgoing calls before they are dispatched by a Channel.Implementers use this mechanism to add cross-cutting behavior to Channel and stub implementations. 
But I don`t know how to get the request and response content  from method  or some other object .
Does anyone know the answer,thanks !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2149
No NameResolverProviders found via ServiceLoader, including for DNS · Issue #2149 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to execute a grpc client from Mathworks Matlab. Matlab should be able to execute Java code mostly unmodified. The client works well from plain Java, but fails from Matlab with error:
I'm unable to find the error. My code fails here:
I'm not using ProGuard. The same code used to work with grpc-java-0.14.0. This might be related to issue 1982 ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2151
Slowness with large payloads · Issue #2151 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When reading a proto off the wire, Netty Passes the chunks of data read up to the message deframer, which stores them in a composite byte buffer.  It passes this composite as an InputStream to CodedInputStream for decoding, which itself makes many copies.
It seems like it would be more efficient to pre allocate a buffer of the appropriate size (since we know the message length) and concat to it each chunk that netty passes up.  This would be a copy, but it would make it so that CIS doesn't have to copy in its inefficient manner.
This would also free up the buffers Netty uses to read chunks of data off of the wire more quickly.
Discovered when trying to max out a very high speed network link.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2152
Deadlock found in TransportSet · Issue #2152 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running benchmarks where the client started up faster than the server, The first few calls failed as unavailable.  Our internal deadlock detector seems to think there is a deadlock around here:
Deadlock(s) found:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2153
Null pointer exception while setting a deadline on a stub · Issue #2153 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I posted this on the grpc mailing list too, reposting here because I'm not sure what the right forum is.
I followed directions in this issue to add deadlines to a RPC. But I get a null pointer error.
My code is
Can the callOptions here be null by any chance?
I'm using the code generated by the protobuf java plugin and the constructor initializes callOptions to CallOptions.DEFAULT, so I'm not sure what's wrong here. Anyone else faced this issue? I'm using protobuf-gradle-plugin:0.7.6.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2155
Support unary Future and Blocking service implementations · Issue #2155 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since we are now requiring all implementations to extend our base classes we can add streaming options later without breaking anyone (with the interfaces it would have). Even though we have server-streaming for blocking we may want to not support it yet on server-side.
This has a benefit for testing since blocking/future is much easier to mock with mocking frameworks than the async interface.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2157
Flaky CompressionTest · Issue #2157 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2160
Stub classes shouldn't be final to allow mocking · Issue #2160 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#2077 Seems to have made stub classes final. As stubs do remote calls, it's usually important for them to be mockable to write unit tests, but mockito can't mock final classes. Previously users could use the interface I guess. While I understand the reasoning of dropping the interface for service classes in #1469, to allow stub upgrades without breaking service implementation code compile, does this apply to client stubs too?  It'd be nice for the stub classes to either be non-final or have interfaces to allow mocking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2161
Could not initialize class io.grpc.netty.Utils · Issue #2161 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, All;
I have made it through the grpc-java build process (thanks for all the help!).
Now, when I run my application from a "fat jar" or uberjar, it succeeds.  However, when I incorporate that jar in another application, it get this error: Could not initialize class io.grpc.netty.Utils
I do not seem to be able to get any further details on the error because it does not occur when I run the code directly from the uberjar.
Where should I look to see why Netty Utils is failing?
Thanks,
Jo3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2162
Servers should send RST_STREAM(NO_ERROR) after trailers if client is not half-closed · Issue #2162 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP/2 spec calls out this case specifically saying that servers MAY send the RST_STREAM. For gRPC, we are going to consider it more of a SHOULD, although clients still have to assume it is a MAY because intermediaries may in be play.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2163
Clients should RST_STREAM(NO_ERROR) if not half-closed when receiving trailers · Issue #2163 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the client-side version of #2162, to handle the case when intermediaries are in play. Note that the RST_STREAM can be elided if the server sent a RST_STREAM after the EOS=true. But the client can't assume the server will send such a RST_STREAM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2164
point to correct 1.0 proto reference in readme · Issue #2164 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our current maven and gradle techniques point to beta3. Change to 1.0?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2166
Excess garbage in Metadata  · Issue #2166 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Metadata today is a Hashmap of ArrayLists, and each arraylist has an object array.  This creates a lot of garbage since Metadata objects are short lived.
Some ideas on how to improve the situation:
Recycle the objects
Store headers as a flat array of an initial size, and swap to using a full map if slow.  (and avoid Strings when possible)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2167
Extra array copy in Metadata · Issue #2167 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Metadata.storeAdd(), the code optimistically tries to allocate a single element array under the premise that most headers will only have a single value.
In DecompressorRegistry, it tries too to cache the "grpc-accept-encoding" header and builds it ahead of time.  In theory, there should only be one such header.
Sadly, ClientCallImpl.prepareHeaders() always adds the "identity" codec before adding the raw, cached  encodings, which makes the Arraylist in Meta data be too small, and have to reallocate larger, which copies the tiny array.  This happens on every single RPC and was noticed during profiling.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2168
cycle dependencies between grpc-core and other projects. · Issue #2168 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when use eclipse to import this project but get many warning:
"A cycle was detected in the build path of project 'grpc-core'. The cycle consists of projects {grpc-core, grpc-testing, grpc-stub} grpc-core       Build path  Build Path Problem" .
why and how to resove? thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2169
Provide hook for network availability notification on Android · Issue #2169 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I new a stub with a multiplexed channel like this:
ServiceGrpc.ServiceBlockingStub stub = ServiceGrpc.newBlockingStub(getChannel());
Launch the application when the network is close , then open the network . Invoking method of stub that is built with a multiplex  don`t work immediately. While invoking method of stub that built with new channel  can get response from server immediately . It will happen also when the network was unavailable long time .and then network turn available .
How does channel judge network state ？How to reconnect immediately with multiplexed channel ?
application is running in Android 5.1.1 and 6.0.1
Thanks !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2170
grift is experimental · Issue #2170 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tracking issue for tasks necessary before considering grift (thrift marshalling over grpc) API stable.
 hear about some usage, to make sure it is satisfactory to users familiar with thrift marshalling
 codegen'd method signatures should have multiple arguments instead of the single wrapping message (this is probably cross-language)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2174
CodedInputStream should have aliasing enabled. · Issue #2174 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Premise: Most Protobuf messages are either big (space) or complex (lots of different fields set), but not  usually both.  The expected use case for the first is sending raw data through, with large ByteStrings  dominating the majority of the encoded payload.  The expected use case for the second is a complicated message with lots of fields, some of which may be used and retained by the program after the request is complete.
In the wake of c47d948, it became clear that Proto is copying way more than it should, and meekly provides some methods to avoid copying too much.  In the specific case of byte strings (and no other type), it is possible to avoid copying from the input buffer when extracting a byte string field.  Instead, if the buffer is immutable, and "aliasing" is enabled, Proto will return a ByteString field which points into the interior of the buffer and avoids the copy.
The downside of this approach is that it keeps a reference to the entire outer buffer, even if the remaining data inside is not needed.  This means that if a large message was received, and a single ByteString is referenced but the outer proto not, the encoded data will remain in memory.  This is a garbage collection risk, since the buffer cannot be GC'd.
I feel that this is not a significant risk due to the premise of this issue.  Either the message is dominated by a single byte string, in which case retaining the whole buffer is not an issue.  On the other hand, the message could be large, but it is unlikely that the program would have a ByteString that would be retained for a long time after the rest of the message could be reclaimed.
The upside is removing yet another copy in the first use case.  A quick benchmark of enabling immutability and aliasing adds around 10-20 MB/s round trip throughput.  (so maybe a could hundred megabits)
Strings, repeated fields, and byte arrays are not affected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2176
io.grpc.testing.integration.ProxyTest.smallLatency is flaky · Issue #2176 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2188
Occasional IllegalStateException during shutdown after upgrading to 1.0.0 · Issue #2188 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, after upgrading from 0.15.0 to 1.0.0, I'm seeing occasional IllegalStateException during shutdown (makes my tests fail which is why I notice).  I had not seen this previously with 0.15.0.
I was able to capture under a debugger and the existing backoffStatus was
Let me know if there's additional info I can provide to help diagnose.
Thanks,
Trask
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2189
metadata is lost when server sends StatusRuntimeException · Issue #2189 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to send a StatusRuntimeException to the client with some information saved in metadata. like this:
But when I caught the exception in the client, I found that the metadata in the exception didn't contain this information. I checked the code and found that in class Server.JumpToApplicationThreadServerStreamListener:
In this method, Status.fromThrowable(e) will convert this exception into Status instance, but it won't reuse the metadata saved in the exception. Instead, it create a new empty Metadata.
So in this way, all the data saved in the metadata of StatusRuntimeException is lost.
Yet in class Status I found there is a new method Metadata trailersFromThrowable(Throwable t) and it is used in class ServerCalls:
I think this is the correct way to handle and pass metadata.
Please help to confirm it. If so, I would like to pull a request to fix it.
Thank you !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2193
Support forward proxies with CONNECT · Issue #2193 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a way to specify a proxy connection when specifying the host and port with the NettyChannelBuilder?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2194
DeadlineTest.defaultTickerIsSystemTicker is flaky · Issue #2194 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
trying to build grpc-java
following these instructions ...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2195
gRPC code generator needs to handle reserved words in method names · Issue #2195 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When defining an RPC like:
The method Import gets translated to a java keyword.    When should adjust it by adding an underscore (prepended?)  to allow it to compile.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2196
Server should compressed responses if the client sent a compressed request · Issue #2196 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the ServerCallImpl never implicitly turns on compression, and instead compression has to be enabled via an interceptor, e.g.:
In theory, somewhere around here:
If the client sent a compressed request, the server could default it's compressor to the same compression codec, and return a compressed response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2197
Consider replacing java.util.logging with SLF4J. Or a custom logger. · Issue #2197 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Very few libraries use java.util.logging these days because of all the problems. Netty uses their own logging facade into which you can plug your own implementation. It's not a bad approach, but it's easier to just use slf4j directly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2198
Failed to load any of the given libraries: [netty-tcnative-linux-aarch_64, netty-tcnative-linux-aarch_64-fedora, netty-tcnative] · Issue #2198 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
trying to build grpc-java on a 64 bit arm architecture.
ultimate goal is to run tensorflow in this nvidia device, but we need to be grpc-java as a part of the tensorflow installation process.
using the latest version of the source code ...
here is the error that I am getting ...
FAILURE: Build failed with an exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


2202
Invalid NativePlatform: linux_aarch64 · Issue #2202 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to build on an arm 64 bit platform.
Following these instructions .
I have successfully built grpc-java
but only by adding skipCodegen=true to gradle.properties.
I have succesfully build protobuf on the platform as well
by following the instructions on the same page.
however, after building protobuf, when I go back I try to build grpc-java without the gradle properties file, I get this error ...
It appears that this code generation plugin is a necessary component to tensorflow.
I need to get tensorflow installed on this machine [nvidia jetson tk1], so I need to find a way to build this plugin.
Any suggestions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2204
Add server-side example for compression · Issue #2204 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a client-side example but no server. That's probably the best form of documentation for users to figure out how to use it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2207
Android HelloWorld example release build is broken · Issue #2207 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to send the RPC it crashes with:
After fixing the NPE (caused by calling shutdown() on a null ManagedChannel), then it gracefully fails with:
io.grpc.p: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact
CC @zsurocking
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2209
LoadBalancer should not fail wait-for-ready requests when there is an errror · Issue #2209 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently LoadBalancer would just call TransportManager.InterimTransport.closeWithError(), which fails all requests. We should instead add another method like enterTransientFailure(), which is reversible by exitTrasientFailure() and only kills current and further fail-fast requests.
closeWithError() shall be kept for shutdown, or be renamed to closeWithShutdown().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2211
Improve LoadBalancer API · Issue #2211 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Implementing LoadBalancer API at the moment is kinda hard and requires a lot of boiler plate to get you going. I proposed some changes in #2199 to improve this situation and we eventually come to the conclusion that this would you some reworking in core rather than simple wrappers and utility classes.
I'm coping @zhangkun83's and @ejona86 comments from the PR and let's continue design discussion here.
@zhangkun83's comment:
The problems SimpleLoadBalancer is set to solve are:
The handling of interim transports is repeated among all LoadBalancers
The error handling is repeated among most LoadBalancers.
What I would like to see, is a new LoadBalancer interface that solves those problems, instead of fragmenting the API. The idea is to move those common logic into ManagedChannelImpl.
The most important part is LoadBalancerListener, which is implemented by ManagedChannelImpl. It technically defines three states in the LoadBalancer:
Caveat: in the case of sharded load-balancing, the LoadBalancer may be able to serve some requests, but have to fail or hold other requests, because for example, some shards may be unavailable temporarily, but come back online shortly. We either keep createInterimTransport() on TransportManager to let LoadBalancer handle this manually, or tweak the API somehow to make it as nice as the non-sharded case.
I look forward to landing with a new LoadBalancer API after a few iterations with you, before we do any implementation work. Comments and ideas are welcome :)
@ejona86's comment:
I'd just add that PENDING, READY, and ERROR, are analogous to CONNECTING, READY, and TRANSIENT_FAILURE, respectively, in the Channel connectivity semantics (and I might prefer we use those names, but I don't care much). This new LB API also makes the Channel state API (#28) much easier to design since the LB wouldn't need to directly participate (with caveat for the sharded LB case, but I think we punt on that for now).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2212
Will java grpc server close the idle connection in sometime later? · Issue #2212 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When client don't send any request over and established connection to server, will server close the connection in sometime later? How to configure java grpc server to enable this behavior? thank you very much!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2213
Will java grpc server close the idle connection in sometime later? · Issue #2213 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When client don't send any request over and established connection to server, will server close the connection in sometime later? How to configure java grpc server to enable this behavior? thank you very much!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2216
Add testing helpers for ClientCall, ServerCall · Issue #2216 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With DoNotMock being a thing, we should add some helper classes to the testing package to make them easier to use.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2217
Use a custom Http2HeadersDecoder to avoid copying · Issue #2217 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the meeting today @carl-mastrangelo mentioned that reading headers from the wire and converting between metadata is a major contributor to our allocation profile.
Can't we just use our own Http2HeadersDecoder that instead of DefaultHttp2Headers uses our own Http2Headers implementation, which would just be an adapter for Metadata (wrap around Metadata)? We could thereby avoid copying between Metadata and Http2Headers, but HPACK would directly store to Metadata.
Am I missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2220
Delete deprecated attributes in ServerCall · Issue #2220 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2222
Stabilize reflection APIs · Issue #2222 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is jumping the gun a little bit, because we don't yet have reflection APIs, but such APIs can use this issue as they are introduced.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2224
Update to netty 4.1.5.final · Issue #2224 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Long story short, there was a bug until 4.1.5.final that would cause issues when running inside Tomcat.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2227
Running grpc server on Android · Issue #2227 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there an example or implementation of GRPC server (Java/C++) running on Android?
I am following grpc java server example to implement the server i
I keep getting the error io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional server found. Try adding a dependency on the grpc-netty artifact
on executing new GrpcServerTask().execute();
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2228
Support for server plaintext upgrade · Issue #2228 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looks like this is one of the supported protocol negotiators for clients but not for servers.
I've been trying to set up plaintext GRPC endpoints behind Amazon's new ALB (Application Load Balancer) and it looks like they require an upgradable connection on the backend (sadly, there is no way to configured ALB to assume HTTP/2).
I can try implementing a ProtocolNegotiator myself using Http2ServerUpgradeCodec but wanted to make sure this was feasible first.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2229
https dependencies issue · Issue #2229 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When i'm working with grpc-1.0.0 i get the following error:
The type io.netty.handler.ssl.SslContextBuilder cannot be resolved. It is indirectly referenced from required .class files
This problem did not occure when i used grpc-0.15.0
Any solutions ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2230
Jetty ALPN/NPN has not been properly configured with grpc-1.0.0 on windows only · Issue #2230 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've upgraded grpc java from version 0.15.0 to 1.0.0. now my integration tests - connect real client and server - on windows complain with
Jetty ALPN/NPN has not been properly configured 
It works properly on Linux (fedora) but not on Windows.
With version 0.15.0 I was able to run client and server on Windows as well as on Linux and cross connect between Linux and Windows and vice versa.
My Gradle dependencies are:
I start the server like so:
Is there something else I need to consider for this migration?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2232
OOM after a bunch of "thread-local buffers freed" · Issue #2232 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I occasionally observe Java runs out of heap space after a sequence of log lines looks like
I think the server is under heavy load when this happens.
It seems like the grpc-default-executor created thousands of threads. Is it normal?
Does anyone know what is going on?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2234
Tracking Issue for NoopClientCall and NoopServerCall being Experimental · Issue #2234 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2237
Possible bug in Status code parser · Issue #2237 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that a codeValue of 17 would not be greater than the list size of 17, and would explode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2241
sequential reading is guarantee？ when is using client stream service.  · Issue #2241 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Server reads list of ProfileDataRequest, it's the same sequence of server and client? When client use only one thread to send ProfileDataRequest.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2243
Detect zero-message response to unary request on server-side · Issue #2243 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It appears that a server can respond OK to a unary RPC without any detection on the server-side. It'd be nice to throw an exception if close(OK) is called without first sending a message for a UNARY response, although that may be against our API stability. At the very least, we should convert the OK into a Status saying the server is broken.
As reported in grpc/grpc#8010.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2246
Deadlock with TransportSet · Issue #2246 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I was testing Grpc with RoundRobinLB and a custom NameResolver when this deadlock happened:
Found one Java-level deadlock:
I don't know if it may relate to my own code or if the issue is on grpc side.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2247
OutOfDirectMemoryError · Issue #2247 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Copied from the C based grpc repository
grpc/grpc#7938
Basically it seems that grpc will throw OutOfDirectMemoryError if you send enough messages over  a single stream. I am probably just using it wrong or it was not meant for such use case. If anyone could explain this, that'd be great.
The code to reproduce the error: https
To execute, run GameServer and then GameClient, when the client connects the server attemps to send 3M messages, but eventually crashes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2254
Ping implementation in Netty doesn't handle all error cases. · Issue #2254 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The field NettyClientHandler.ping is used to determine whether a PING acknowledgement is outstanding, as we only allow one PING at a time.
The logic to reset NettyClientHandler.ping handles the case where the write of the frame fails, we receive a PING ack or the channel gets closed.
We need to additionally handle the case in which the write of the PING frame succeeds, the channel remains active and we don't get any valid PING acknowledgement back. This error case may happen for example due to a buggy implementation of the remote endpoint or even packet corruption.  I think we should ensure users that the PingCallback is called eventually.
A possible solution may be an automatic re-send of PINGs that don't receive a matching PING ack within some timeout period.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2256
compile grpc-java is terrible, can you release a binary zip? · Issue #2256 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2257
Cache higher order objects in HPACK's dynamic table. · Issue #2257 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In #2217, @carl-mastrangelo had the idea to cache high order objects in HPACK's dynamic table. Carl mentioned the example of instead of parsing a jwt token on every request, we could cache an object that already contains the parsed representation, reducing garbage creation and parsing overhead.
Additionally, since Metadata uses String for names, we could for header names cache the String representation.
This would mostly require changes to Netty's HPACK implementation. We need some way to attach additional headers. I suggested to modify the StaticTable, Decoder and HuffmanDecoder to take a HeaderLiteralFactory as an optional ctor argument.
Netty's default implementation would simply return AsciiString objects. The gRPC implementation, could use String objects for keys. For values, we could special case certain header names and return holder objects e.g.
Risks
The decoder has no power over what gets cached and what doesn't - it's up to the encoder. We might introduce overhead for headers that don't get cached. Also, a (name, value) is treated as one header entry in HPACK's dynamic table. Say if a users use custom headers, with lots of different values, then caching in the dynamic table might not be very effective, as entries might get evicted before they can be reused (if ever).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2260
Many tcp ports opened by client and by server on Windows · Issue #2260 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting my grpc-server or grpc-client on Windows causes netstat to show lots of established tcp connections. Both endpoints of those connections are in the same process. This is true for the server and for the client.
I've created an isolated grpc echo client/server program which doesn't do anything else than send an echo request/response via grpc-java. It behaves the same. The effected versions are
There seems to be no difference between TLS or insecure mode.
I see this behavior only on Windows (version: Server 2008 R2 Standard). On Linux everything is ok.
I use the same distribution on both platforms built by gradle.
Is Grpc though fully functional or does this cause any harm?
The integration test suite passes successfully but I'm uncertain if this would cause any trouble.
Is there some way to avoid this behavior?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2263
Update examples to use Executor · Issue #2263 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our hello world examples don't show the right way to create a server.   Fix them
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2264
Implement HTTP→gRPC status code mapping · Issue #2264 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As defined in grpc/grpc#4955. Please wait until PR is in before merging the code changes, although the PR has received general agreement ("but it's not official until it's official").
This is important to return useful gRPC status codes when proxies generate errors.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2266
Error opening zip file or JAR manifest missing when using qps_client / openloop_client · Issue #2266 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps to reproduce:
agent library failed to init: instrument
Basically I think you should just comment the DEFAULT_JVM_OPTS.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2267
An exception occurred when I use maven plugin, Why? · Issue #2267 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maven logs:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2268
When I use grpc 1.0.0, why javax/annotation package is in my jar? · Issue #2268 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>         
And my jar in target directory has package javax/annotation? Why is this happending?
I provides my pom.xml and jar as attach files for you.
And as my pom define, I relocation io.netty, io.goole, io.grpc. Is this OK? Will Grpc works?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2270
OutOfMemoryError getting swallowed by SerializingExecutor · Issue #2270 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My application throws OutOfMemoryError and got swallowed by following code,
I hope to handle OutOfMemoryError in my default uncaught exception handler, but it is not happening.
Is this a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2273
Investigate if Netty can be used as a server on Android  · Issue #2273 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Warning: Running a server on android is not officially supported on Android by the gRPC Java team!
It may be possible to run a gRPC Java server on android in a limited sense, but we don't do anything to restrict the possibility.  There appears to be a small number of users who do want to run a server for reasons that may be valid.  This issue is to track both interest from the community, as well as possibly being a list of known issues.
Netty has not been optimized for Android.  gRPC has not been optimized to be a server on android.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2276
TransportSet garbage collection · Issue #2276 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today we only have logic for creating TransportSets. A TransportSet may be no longer used if NameResolver or LoadBalancer has decided to switch away from that address, and ManagedChannelImpl should clean it up.
Probably TransportSet should just shutdown and move itself to ManagedChannelImpl.decommissionedTransports when it's IDLE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2278
QPS client using much more memory than server. · Issue #2278 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I did some benchmarking using the qps_client and qps_server. Zero bytes payload. I enabled verbose:gc.
When running with 8 channels and 250 concurrent RPCs. On the client, after a young GC our live heap is ~290MiB. The GC logs have a very low volatility +/- 1MiB.
Doubling the concurrent streams to 500, on the client, the live heap more than doubles to 560MiB.
On the server it increases to ~140MiB. Doubling the concurrent streams to 1000, on the client, the live heap again doubles to ~1.1GB and on the server it increases to ~170MB.
I then thought it might be due to the client having to keep stream state  around much longer (until the server responds) and so I enabled streaming rpcs (with 8 channels, 1000 concurrent). Live heap on the client stays the same, on the server it drops to ~30MiB. The used heap on the client is about 2.3GiB before the GC, and 1.1GiB after. The used heap on the server is about 1.3GB before the GC and 30MiB after. So it seems like we keep an additional GiB of data around on the client (or 130KiB per stream).
That data seems to be allocated at the beginning. The first 3 GCs and the last GC on the client
The increased memory usage on the client is not due to histograms, cause I commented out the line recording latencies.
I wonder why that is? Is it possibly a small memory leak per RPC? Is that specific to the QPS client or gRPC? Any ideas?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2279
Http2ChannelClosedException instead of actual failure · Issue #2279 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is similar to #1330, but for when the stream was never actually sent because of MAX_CONCURRENT_STREAMS.
In this case, we do know more information: the stream was never sent, so it is safe to retry. While that information is useful internally, the user probably would like to know the cause of connection closure. (In this case, I think it was a TCP timeout, because the network was flaky.) We should probably just swap out the exception in the same way we do with ClosedChannelException. At the very least, it should be UNAVAILABLE instead of INTERNAL.
This was seen in grpc-java v1.0.0:
CC @buchgr, any thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2280
Per request logging params in GRPC server · Issue #2280 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use a logging framework that uses thread local map to store parameters for logging templates like request id, client ip etc.
Params are usually set and reset in some request filter (interceptor), with the assumption that the same thread is going to be used to handle the request.
From what I observe, GRPC server thread that handles request might be different from the thread that runs interceptor.
Is there any way to implement per-request logging parameter in GRPC server?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2281
Add injection points to generated code · Issue #2281 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Protobuf has a concept of injection points that make it possible to extend generated classes with additional methods, implements interfaces, and others.  This has been useful for example to generate setters which take an Optional Java 8 in addition to the standard methods generated when a user uses google.protobuf.StringValue or Int64Value.
A similar feature would be very useful in the generated gRPC code to allow for extension to add interaction models for clients and servers which are not appropriate in core.  For example, I would like to generate RxJava interfaces for client and server, and I'd like them to live in the same area as the other clients.
An example of the type of line in protoc generated files now that allows for this is
It would be helpful if there was a class scope insertion point for adding additional client and server interactions models.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2282
client set RoundRobinLoadBalancer fail · Issue #2282 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
that  RoundRobinLoadBalancerFactory is fail .
debug the  code, discover  class TransportSet method obtainActiveTransport have a problem
the savedTransport frist is null , the second time  is not null, no execute find activeTransport.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2283
Can´t build HelloWorld Android project · Issue #2283 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After installing java-gRPC as ReadMe states, I tried to build the android project HelloWord but the build fails:
FAILURE: Build failed with an exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2284
Census stats recording with InProcessTransport · Issue #2284 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Message sizes are counted in MessageFramer and MessageDeframer, which InProcessTransport doesn't use. Right now we simply do not record metrics for InProcessTransport at all. This may turn out to be needed, so I use this issue to track this missing feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2285
Stats for UNIMPLEMENTED methods · Issue #2285 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The way that gRPC uses Census to collect metrics, is that each RPC creates a record, which is tagged with the method name and the Status.
If Census keeps an in-memory store that maps (Method, Status) to metrics (counts, message sizes etc), which is useful for on-line querying, the key space on the server could be blown up by misbehaving (or malicious) clients that sends a lot of distinct unimplemented method names to the server.
If this is a valid concern, we should probably treat UNIMPLEMENTED status in a special way.
cc @dinooliva
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2289
Grpc server uses more memory than -Xmx · Issue #2289 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes Grpc server can use (couple of Gb) more memory than JVM max heap size. Does anyone know how could that happen? What is the recommended Jvm heap size configuration for Grpc servers?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2292
Implement channel-state API in ManagedChannelImpl · Issue #2292 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The API is added by #2286, but is implemented (will throw exception) in ManagedChannelImpl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2296
Client side NPE when sending large number of concurrent requests · Issue #2296 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Both server and client use GRPC 1.0.
Client log:
Server log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2297
NettyFlowControlTest is flaky · Issue #2297 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Happened few times for me, in CI as well as locally:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2298
grpc-all on Maven repository does not contain anything · Issue #2298 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since version 0.14 the grpc-all JAR on Maven.org only contains a Manifest but no actual code. 0.13.2 is the last version still OK.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2299
More logs in channel · Issue #2299 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have insufficient logging in the channel layer. In particular:
Name resolution success and failures. Although failures are plumbed to application when it makes a call.
ManagedChannelImpl goes into and out of idleness
Whether they should be INFO or FINE are not clear, but at least they should start as FINE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2300
Generated OuterClass has a lot of incompatibilities ! · Issue #2300 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi , I am new to gRPC / protobuf , and facing a first step problem...
This is my first .proto file :
It is simple , but the generated EchoServiceOuterClass.java has a lot of incompatibilities :
For example :
This is my [ partial ] pom.xml
The grpc-netty , grpc-protobuf , grpc-stub are all of version of 1.0.0
Where goes wrong here ?
Thanks.
I am new to gRPC / protobuf , sorry I don't know whether the problem is related to grpc-java project or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2301
Define the API for LoadBalancer to add headers · Issue #2301 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GRPCLB needs this to add the per-client LB token to every RPC.
Metadata injection is usually done in interceptors, but LoadBalancer cannot use interceptor, because it returns transports, not channels. Since LoadBalancer doesn't need the full power of interceptor anyway, we may just figure out an API that allows LoadBalancer to change headers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2302
LoasdBalancer: the affinity keys are not used when completing the delayed (interim) transports · Issue #2302 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2305
Exception thrown from `OnReadyHandler` sometimes does not close stream · Issue #2305 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems like there should be a try-catch block around this line:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2307
ManagedChannelBuilder doesn't have maxMessageSize · Issue #2307 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This makes it more annoying to override the maxMessageSize, because you have to know which implementation you are using.
Note that if you specify the actual implementation, this is easy, but the problem is needing to specify the implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2313
Guarantees around using responseObserver in multiple threads · Issue #2313 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was writing a service which takes a stream of Events, and returns a stream of Acks.  In doing so, the Acks can trigger from multiple threads after I've done work and published them to downstream systems.  After sending a bit of load I would get errors that sendHeaders had already been called, and I realized that ServerCalls here httpsis performing a check to see if headers are sent that is not thread safe.
I wanted to get a bit more insight into the expectations for a service which is sending back responses on multiple threads.  Should I just do
or should there be more synchronization in the ServerCalls code?  I suspect this was a deliberate choice not to support multi-threaded usage since cancelled is volatile while sentHeaders isn't.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2316
Bump protobuf to 3.1.0 · Issue #2316 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2317
Tracking Issue for FakeClock APIs being Experimental · Issue #2317 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FakeClock
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2320
Client certificate not sent · Issue #2320 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm trying to use gRPC from Java (as a client) to communicate with a gRPC Node.js server.
I am trying to get TLS mutual auth between the two, but I can't seem to get the Java client to send its client cert. I've verified via packet capture that the Node server is requesting a client cert.
mcb.overrideAuthority("localhost");
I am dynamically generating CA certs and leaf certs under them to bind the communication.
Due to this, I'm using the keyManager(PrivateKey,X509Certificate...) overload, and the private key is generated from a KeyPairGenerator.getInstance("RSA") object. I'm currently generating two chains (one for the server's cert, and one for the client cert) and verification of the server cert works fine (connections work when I disable the client cert requirement on the Node server).
The + currently resolves to 1.1.33.Fork23. I've found that the 1.1.33.Fork19 version specified in the documentation results in an exception on Linux (and OS X) caused by:
Any ideas on what might be causing this behavior or what I'm doing wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2321
SO_BACKLOG 128 enough? · Issue #2321 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In NettyServer there is a hardcode
SO_BACKLOG = 128 is enough for every situation?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2323
ErrorProne compile failure on v1.0.1 · Issue #2323 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is for tag v1.0.1 -- it may or may not be fixed @Head
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2324
parseDelimitedFrom behavior has changed between 2.5 and 3.1 · Issue #2324 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
parseDelimitedFrom didn't check limit in 2.5. In 3.1 it does throwing InvalidProtocolBufferException if we exceed the hard-coded max of 64MB.
This is issue is a bit like "Remove proto size restriction when parsing protos. #836" but parseDelimitedFrom only takes InputStream so we can't set max size.
64MB is large but previous there was no limit. There is a sort of a workaround by doing parsePartialFrom and creating a CodedInputStream probably set to this method but means creating a new object every time (or reading to see if > 64MB and then making new CIS...)
Let us know how you think best to address and we can put up a patch.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2326
Build grpc-java from a new arch---mips64el · Issue #2326 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to build bazel, which has dependencies protoc and protoc-gen-grpc-java. So, I need to build grpc-java. I got grpc-java from github and the reference README.md run the following command.
My error as follows, Any one can tell me how to work around? I will port to a new platform --mips64el
Detecting the operating system and CPU architecture
What went wrong:
A problem occurred evaluating root project 'grpc'.
Try:
Run with --stacktrace option to get the stack trace. Run with --debug option to get more log output.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2327
Error on run example step "./gradlew installDist" · Issue #2327 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to documentation  http
step number 2 does not work for me, get a compile errors about illegal characters... like RouteGuideServer.java line 299 this line has greece characters.
to resolve this issue I had to add set DEFAULT_JVM_OPTS="-Dfile.encoding=utf-8"
into gradlew.bat file and execute command ./gradlew installDist againe. Can it be resolve in git?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2328
io.grpc.okhttp.OkHttpTransportTest > newStream_duringShutdown is flaky · Issue #2328 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are working on  s390x platform and facing below test failure while building gRPC-java master.
We are using protoc v3.0.2 and v3.0.0-javalite.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2335
AbstractTransportTest.openStreamPreventsTermination is flaky on Windows · Issue #2335 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seen in https:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2337
Client-streaming call is hanging if service impl throws unexpected runtime exception · Issue #2337 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Client-streaming call is hanging if service implementation for the requestStreamObserver#onNext callback throws an unexpected runtime exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2338
Grpc-Java best practices · Issue #2338 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Developers may run into similar issues when started using Grpc. Solutions to most of the issue are  scattered around the mailing list and github issues, like custom server executor, stream rcp flow control, server/client request intercepting, error handling, ssl, testing, etc.
I think it would be valuable to document the best practices for Grpc-Java.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2341
GrpcHttp2RequestHeaders and GrpcHttp2OutboundHeaders don't support toString · Issue #2341 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This causes a regression in debugging. Instead of seeing headers when enabling the Http2 logging in Netty, you get something like:
It looks like Itr has toString, but not the headers itself. The wrong class probably got the toString method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2344
io.grpc.okhttp.OkHttpTransportTest > serverNotListening FAILED · Issue #2344 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seen at https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2345
ManagedChannelBuilder and URI path routing · Issue #2345 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This may be a silly question but I'm having a hard time figuring out what's going on. I have a couple of gRPC servers sitting behind a load balancer and I have rules set up to route requests based on the path. i.e. myloadbalancerIPaddress:8000/service/serviceA would route to a particular backend server. And on the client side this is what I'm doing:
It seems like the request is always made against ipaddress:8000 without the specified path. Am I doing something wrong here?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2346
issue with progaurd minifyEnabled · Issue #2346 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
First of all, thank you guys for awesome work. Currently, I am using grpc on my android app and it crashes with below trace when minifyEnabled is true in gradle configuration. Is there any specific progaurd rule/ config for this ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2348
add support Stetho's interceptor for OkHttp · Issue #2348 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2350
Include SETTINGS_MAX_HEADER_LIST_SIZE in initial SETTINGS. · Issue #2350 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently don't send SETTINGS_MAX_HEADER_LIST_SIZE as part of the initial SETTINGS frame, although we enforce it on the decoder. This is valid as of the H2 spec
For any given request, a lower limit than what is advertised MAY be enforced. The initial value of this setting is unlimited.
However, we would argue that we should still include it in the initial SETTINGS frame, cause why not? If both endpoints are gRPC Java, it would also give us better error messages, as then the local encoder would enforce the remote decode limit [1]. However, we can't currently do that cause it seems like a bug in Netty that the encoder throws a connection error and not a stream error [1], bringing down the whole connection, while only the stream should fail. I ll open a issue/PR in Netty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2352
How to generate .java files from .proto files in command line using protoc. · Issue #2352 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Here is my problem, I'm trying to compile my .proto files into .java files to implement it into some android projects. I don't want to compile it using gradle or maven because I don't want to compile my .proto file with my whole projects. I just want to compile it using protoc like how I'm doing for objective-c or nodeJS, but I didn't find the Javalite plugin for grpc.
Do you know any ways to do it ?
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2354
generated java stub is not mockable  · Issue #2354 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when we upgrade to grpc 1.0.0, the generated java stub is a static final class without implement any interface. as a result it's impossible to use mockito to mock the stub in unit test to verify the business logic without communicating with the real grpc server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2357
ServiceDescriptor lacks validation · Issue #2357 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServerServiceDefinition has validation, but it seems that should actually be in ServiceDescriptor (moved or copied). The method names should match the service name, and there shouldn't be two methods with the same name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2358
ServerBuilder defaults affected by Netty memory leak · Issue #2358 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GRPC 1.0.0 and 1.0.1 are both based on Netty 4.1.3.Final. This version of Netty is affected by a memory leak bug referenced and fixed in the following commit:
The vanilla GRPC ServerBuilder uses a Executors.newCachedThreadPool() executor that expands and contracts based on the load. Any thread that is cleaned up leaks a whole lot of Netty cached data. The workaround is to specify your own Executor that reuses the threads and doesn't recycle them, something like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2359
The type io.grpc.Deadline cannot be resolved. It is indirectly referenced from required .class files · Issue #2359 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-all-1.0.0 and grpc-all-1.0.1 are build as blank jars hence it could not resolve to its reference.
Any pointers how to resolve this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2361
bindService and cglib · Issue #2361 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
aService is a cglib proxy class, then I add the service:
serverBuilder.addService(aService.bindService()).
aService.bindService(),the returned ServerServiceDefinition is not what I want because of "this"
what should I do?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2363
Handle java.lang.IllegalStateException properly · Issue #2363 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm currently using gRPC on Android, and it crashes due to the following exceptions:
Case 2:
Is there any way to handle these exceptions before crashing?
Thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2364
NettyTransportTest.frameAfterRstStreamShouldNotBreakClientChannel flaky · Issue #2364 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Failed on Travis-CI for OS X (https):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2370
Provide channel pooling · Issue #2370 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The client libraries generated by https: currently create a new channel for every API wrapper object, which is expensive and wasteful. For the benefit of users, we need channel pooling support so that startup time and resource usage is minimized, regardless of how many API wrapper objects are created. The alternatives require more work for users (which is undesirable) or implementing pooling support in the API wrapper layer, which doesn't make sense if grpc is a better place to implement it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2371
How to use load balancer in gRPC V1.0? · Issue #2371 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I see on the gRPC home page said, V 1.0 already has load balancing capabilities,but did not find any relevant examples.Will be in gRPC V1.0 of how to use load balancing?
Where are the loac balancing examples?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2372
Java QpsWorker produces many exceptions · Issue #2372 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've recently enabled printing output from QPS workers in the benchmark suite, but the logs are 93MB big, which makes them completely useless.
It seems that it's mostly because java worker is super chatty (tons of exceptions get printed to the console)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2373
How can I config timeout · Issue #2373 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How can I config to let server timeout when a  invoked take a long time, just like HTTP 504?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2375
Use provider's class loader instead of context class loader · Issue #2375 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a multi classloader application it may easily turn out Thread#contextClassloader contains something unrelated to a classloader that indeed loads grpc classes.
It's better to check current classloader for ServerProvider.class too.
I use JRE 1.8.0_66, macos 10.12
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2377
Census Race · Issue #2377 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Read of size 4 at 0x7f00465dfbcc by thread T123:
cc: @adriancole @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2379
OutOfDirectMemoryError in fast stream objects generation · Issue #2379 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I send a message to a bidi-stream method from a server to a client.
Each message contains 1kb of bytes + several fields.
Server implementation sends 2GB of such messages from a loop without delay
Client consumes messages without delay too.
Currently it fails on the server with a netty error
Quickly checked the code. Not sure if it is able to limit sending buffer by blocking a StreamObserver#onNext calls once sending buffer is full.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2387
client can not connect to server when server has more than 61000 connections. · Issue #2387 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to test grpc performance, and I have 4 centos6.5, and update configure to allow 2000000 tcp connections.
And i use example of "route_guide" to test, just change logic of "func (s *routeGuideServer) ListFeatures" make it not return and send message to stream each 10 seconds on server side.
It's works well when connect 60000 clients, and all clients can receive message from server.
But i got error like: "2016/10/28 10:50:08 &{0xc8648f4b40}.ListFeatures(_) = _, rpc error: code = 14 desc = grpc: the connection is unavailable".
and some of others client got error like: "2016/10/28 10:50:08 grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp 10.204.10.36:10000: getsockopt: connection timed out"; Reconnecting to {10.204.10.36:10000 }"
I want to know is this a system configure problem or just a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2388
New deadlock in TransportSet and GrpcTimer · Issue #2388 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have encountered a new deadlock in TransportSet. I'm running under v1.0 with #2258 cherry-picked.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2389
switch to a logging library from JUL · Issue #2389 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently JUL logger is used. It cannot be controlled well in multi-classloader applications. For example Servlet API containers.
From a web application point of view it's a hacky to configure JUL explicitly from there. The best way to configure logging in that case is to isolate if from container logging (and possible other applications).
Isolation is implemented as easy as including logger libraries into application package. This makes a container to load logger classes along with the app, and thus all logger configuration that is done on application level is not shared to the whole JVM.
This trick does not work well with java.util.logging (JUL). It is a part of JVM, so one cannot load those classes on application-level classloader. So any attempt to configure JUL from application will make this visible to the whole JVM and vice versa.
Switching to any Logging library (which in not a part of JRE) will solve the issue and adds more flexibility for library users. Moreover, it's likely such library is already in classpath of most apps.
For example, slf4j-api is the minimalistic logging library that allows to use any logging backend
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2390
Does gRPC-java supports http2-stream-priority? · Issue #2390 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If yes, How to use it? Is there an example?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2391
Service account to JWT token upgrade fails when no scopes provided · Issue #2391 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Apologies for the poor wording - I don't know enough about the details to term this properly.
Here's a small piece of code using the Monitoring library at https
This is due to the scopes not being configured in the generated code - we're fixing that side of things, but we gather that gRPC design should allow service accounts to work without scopes being configured, as part of using JWT tokens.
The same failure occurs in C#, which is obviously a separate implementation - I'll be filing a separate bug for that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2393
Create issue template · Issue #2393 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should probably ask for version, JVM, stack trace, error details, etc. It can probably just move part of CONTRIBUTING into it.
To avoid polluting root folder even more, probably want to use the .github/ISSUE_TEMPLATE variety.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2394
Error on gradlew build · Issue #2394 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting the attached error on building the examples. I have gradle.properties file in grpc-java\examples folder that has one property , which is skipCodegen=true
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2395
Avoiding unbalanced backends with server-side load balancing · Issue #2395 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One of our use cases is a server-side application which must connect to a pool of backends through a layer 4 load balancer.  By default grpc-java opens only a single, long-lived channel to the backend.  So if we have 4 clients with 4 backends, the best distribution is a single connection from each client to each backend.
There are two problems with this: 1) each client directly determines the load placed on its backend, and 2) during rolling backend deployments, the connections are redistributed to all backends except the last one deployed.
To work around these issues, I attempted to add client-side load balancing with a list of identical backend endpoints.  After a lot of poking (and finally understanding the existing DnsNameResolver, etc), I realized this wasn't going to work.  Finally I settled on a custom pool of client channels that I use in a round-robin fashion.
Unfortunately even this is imperfect because I need must limit the lifetime of a channel to avoid backends becoming unbalanced for extended periods after backend re-deployment.  Is an interceptor the best (only?) way to achieve a maximum channel lifetime?
@zhangkun83  (I mentioned this issue briefly on IRC a couple of months ago).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2397
Error converting bytecode to dex: Cause: Dex cannot parse version 52 byte code. · Issue #2397 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I'm trying to build an APK for my project, I encountered the following error.
This is caused by library dependencies that have been compiled using Java 8 or above.
If you are using the 'java' gradle plugin in a library submodule add 
to that submodule's build.gradle file.
Seems that some of the libraries are getting compiled into Java 8 bytecode, which won't be compatible with current javac. I had to use jack with the new bytecode which takes minutes on a debug build and it is very annoying.
My app/build.gradle is set up according to the one in protobuf-gradle-plugin:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2398
Re-introduce service interfaces · Issue #2398 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Stub interfaces were generated prior to gRPC 1.0. It was since removed and now we are forced to extend a base class.
Interface is the contract for the service - it'd be great to generate the interface as well. If keeping the base abstract class, the base abstract class should implement the interface as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2400
Run a grpc application not working · Issue #2400 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to link http, I must follow the below steps to execute a hello world sample client and server.
From the examples directory:
I am using Windows machine , so gradlew installDist command works for me. But after that, there is no build/install/examples/bin folder structure to execute hello-world-server.
There is a hello-world-server in examples\build\tmp folder, but that too gives following error
Error: Could not find or load main class io.grpc.examples.helloworld.HelloWorldServer
Please help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2406
benchmarks spend lots of time parking and unparking · Issue #2406 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running the benchmarks with profiling turned on shows that ForkJoinPool is spending a lot of time parking and unparking itself.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2408
Jetty ALPN/NPN has not been properly configured · Issue #2408 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when I start server on windows,it prints "Jetty ALPN/NPN has not been properly configured",But it works properly on Linux and MacOs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2409
BlockingStub returns iterator that cannot be closed · Issue #2409 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use a blocking sub for a method that returns a stream of messages. The return type of it is Iterator<T>. It turns out I cannot make grpc client to end the request (e.g. because of client failure). There are a number of cases where an open connection may stuck in client because of that
The implementation uses
call, which in turn uses BlockingResponseStream. There is no way to reach the io.grpc.ClientCall#cancel method form the Iterator. Could be nice to wrap an Iterator or make it implement an interface in the similar way as done with ServerStreamObserver/ClientStreamObserver
The other approach could be to implement AutoCloseable from Java with this iterator
There is also a comment on the Iterator implementation class
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2411
how to use serverIntercepter · Issue #2411 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
how to use serverIntercepter,I want to intercept some of the methods of a service
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2412
Does gRPC support push notifications from the server to the client · Issue #2412 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Does gRPC support push notifications from the server to the client? Client to establish a connection, registration, if the server has to trigger events to the client, through the channel to find the client to send the connection, and then push the message to the specified client.
the example of a stream response: StreamObserver, if I do not call onCompleted method, whether this link can continue to push the message? How to get the designated client channel?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2414
OkHttpChannelBuilder doesn't work  · Issue #2414 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in android high level platform ,OkHttpChannelBuilder works fine, but in android level 17 platform , it logs out ：
is the everyone meet the same problem ? if you know that, please tell me , thank you guys !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2415
using java.util.logging.Logger may cause ClassNotFound in javaagent for JBoss · Issue #2415 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?
I am developing a javaagent project, as a instrument of JBoss 8.0 .
I use protobuf 3.0.0, the manifest info is following:
As we known, LogManager is necessary for java.util.logging.* . The static block of LogManager is using System.getProperty("java.util.logging.manager") to init.
In JBOSS, it will set java.util.logging.manager to a JBOSS class. So, when I run code in premain, I can't access to the LogManager, it trigger ClassNotFound.
I recommend not to use java.util.logging directly. I think the better way to create a LogResolver in grpc-java. LogResolver will only choose java.util.logging as default logger, and provide api to set other implements.
And the most important, LogResolver should not trigger ClassLoader to load java.util.logging.
Does this seem good to you?
If you are agree with me, I want to send a pull request to fix this problem. And we discuss further in that rp?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2418
error: incompatible types: ServiceDescriptor cannot be converted to String · Issue #2418 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2423
Provide access to Method options in ServerInterceptor · Issue #2423 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like to be able to see the options on the method being called in a ServerInterceptor interceptCall method.
Is this currently possible, or are there plans to provide this?
Currently, a io.grpc.MethodDescriptor is available from the ServerCall.  This doesn't have the option data though.  I need a com.google.protobuf.Descriptors.MethodDescriptor, which I can't seem to easily access.
My use case:  I am writing an interceptor that provides user authentication.  I would like to add a custom option to the rpc methods in the proto files to indicate if a method requires authentication or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2424
gRPC stream client OutOfDirectMemoryError, when send ton of data · Issue #2424 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This single thread code send ton of data to server,  casue OutOfDirectMemoryError. more discussion detail, see the ref issue #2247
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2425
Android examples don't obey Min API level · Issue #2425 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Either the min level needs to be raised, or the usage removed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2428
Problem with interceptor · Issue #2428 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
openjdk version "1.8.0_111"
What did you do?
If possible, provide a recipe for reproducing the error.
Adding an interceptor on the server side of the app gives me:
java.lang.NoClassDefFoundError: io/netty/handler/codec/Headers
If I add the dependency: io.netty:nett-codec:4.1.3-Final to my app, then this happens on the client side after the remote procedure is called:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2429
Proper handling of server stubs that throw? · Issue #2429 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
throw new RuntimeException() in any server implementation of an rpc defined in your proto
What did you expect to see?
client gets UNKNOWN, close or cancel to eventually be called in the interceptor chain on the server
What did you see instead?
client gets UNKNOWN, and my interceptor chain stops executing in the halfClose (for Unary requests/responses).
I'm wondering, if some interceptors want/need to do cleanup to do things like emit metrics, modify logging MDC in thread locals and such, what should I expect here and be doing?  Is it reasonable to have an exception mapping interceptor that is the last one called right before the actual implementation and if it catches any exception translate it into a close(Status.UNKNOWN, new Metadata()) ?  Should I instead have every interceptor catch exceptions in onHalfClose and onMessage and then bubble it after they do their personal cleanup?  We had up to this point kept our cleanup logic isolated to close(...) and onCancel().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2432
a better way to convert to a Plain Ordinary Java Object · Issue #2432 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
it is a little boring,is there any better way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2436
error:  UNAVAILABLE  StatusRuntimeException · Issue #2436 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I add grpc to my android project , But I meet some UNAVAILABLE problems.  I got some Message from the Excepiton  :   statusCode=14  , and  msg : "Channel shutdownNow invoked"  or  "End of stream or IOException".  It is  a bug  or  something would cause this  problem ? This Exception  is  not alway happen.  Looking forward to your reply. Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2437
ServerServiceDefinition.addMethod fails incorrectly  · Issue #2437 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
java version "1.8.0_91"
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
This works without problem, the server starts up
What did you see instead?
An error that says the following:
The reason for this is rather interesting, here is the code that generates this in addMethod:
The problem is that what your outputting as the comparison is not what is actually being compared.  The "extractFullServiceName" method performs the following operation:
Which normalizes in some weird way the method name, but this only happens in the above code to the MethodDescriptor, but not to the serviceName, this leads to a mismatch, and then you print out a wrong mismatch as well.  This is broken.  The other problem, is that even if you passed in just "mypage" for both values, the noramalization results in an empty string while the other one has a full string, and thus the test fails again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2440
Remove RoundRobinLoadBalancerFactory access to RoundRobinServerList · Issue #2440 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.grpc has been removing references to io.grpc.internal for some time now.  The last of these appears to be RoundRobinLoadBalancerFactory which imports from io.grpc.internal.RoundRobinServerList
This makes it hard to separate internal details from public interface.  We should remove it.
cc: @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2444
Non-determinism when using InProcessTransport with direct executors · Issue #2444 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8.0_101
What did you do?
I am attempting to write unit tests for RPC systems without mocking stubs, which would be lovely if it worked. Recent discussions (e.g. here, 1.0.1 release notes, this example) suggest this is the new done thing and is supposed to work. To this end I am running an InProcessServer and calling it over an InProcessChannel with both ends using a DirectExecutor.
What did you expect to see?
The 1.0.1 release notes imply that this is now deterministic (after the removal of the grpc-ready thread pool, which was causing issues for me before), so I expected to see determinism in my unit test, and for the server handler to be called on the same thread that made the stub method call. The RPC method is a client-side streaming RPC, but I don't know if that is relevant.
What did you see instead?
The unit test is not deterministic, since the service handler seems to end up being called on a grpc-timer thread provided by the ScheduledExecutorService created by GrpcUtil.TIMER_SERVICE. The task that causes the call is  the NameResolverStartTask in ManagedChannelImpl, and there appears to be no way to provide an alternative timer service.
See ManagedChannelImpl.java line 307.
Am I doing something wrong? Is there a workaround? It seems like doing the name resolution work on the ManagedChannelImpl's user-provided executor rather than its scheduledExecutor might fix it, but I don't know if there's some reason it's not done that way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2445
A memory leak of Recycler$WeakOrderQueue · Issue #2445 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0 and 1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
A huge data send from client, use gprc-java async service. Service define is like this:
What did you expect to see?
run and send with high performance.
What did you see instead?
A memory leak of Recycler$WeakOrderQueue
@ejona86, a memory leak occurs in my app, a memory analysis is following:
The leak point is very obvious. At the same time, I found too many grpc-default-executors is running, thousands of it.
And I have found #2358 seems to match my issue. But the solution is not very useful, you said should update netty to 4.1.6 and the release is in grpc 1.1 or next 1.0.x , which is not available now.
Is their any solutions? Or can you release hotfix version for 1.0.1, such as 1.0.1.1?
It's a very urgent and mortal issue in my product env.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2446
Generate interface for every service action · Issue #2446 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The generated service stubs evolved quite a lot in past few months and I've noticed that we removed service interface in favor of having just an abstract base class, it was indeed redundant and probably not very useful (I don't know if it was solve factor that led to removing it, if not please correct me).
While the per-service interface in the presence of equivalent abstract class might not provide a lot of value (in the context of generated services) I'd like to propose generating per-action interfaces which would be implemented by the base abstract service.
The value of per-action interfaces is that it would allow users to easily build custom service definitions which then would allow custom integrations for frameworks where single action is represented by class (as opposed to one class implementing all actions). This approach is used in many custom frameworks which relay heavily on dependency injection and the main benefit it provides is that in order to test single action, you don't need to provide dependencies for every action of a given service.
I'm open to work on implementation if we reach consensus. The change will be additive and won't break any existing APIs or implementations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2453
Threading of StatsTraceContext · Issue #2453 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
StatsTraceContext assumes non-thread-safety, which is fine as long as the RPC is closed by the application through the ClientCall/ServerCall interface, which are also not thread-safe.
However, if the RPC is not closed by the application, but either cancelled by the other side, or closed by transport due to errors, which will call callEnded() from the transport thread which is not synchronized with  the application thread. As the application may not be notified about the closure in time, it may still trying to send messages, resulting in wireBytesSent() etc being called after callEnded(), which would trigger a check failure. There is also a data race on the counter fields as wireBytesSent() etc write them and callEnded() reads them from different threads without synchronization.
We will remove the preconditions checks from writeBytesSent() etc. For the data race, some kind of synchronization would be required, maybe atomics? @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2457
Http2NettyTest.exchangeMetadataStreamingCall is flaky · Issue #2457 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2458
Build with Bazel · Issue #2458 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would be great to be able to build grpc-java with Bazel.  It looks like there may some ongoing internal efforts to do this.  Any comment on the scope/challenge of this?  Any help needed from the community?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2462
Context.Storage is experimental · Issue #2462 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the tracking issue that will be closed once Context.Storage API exits experimental status.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2463
How can I use OpenTracing api in grpc? · Issue #2463 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am a member of OpenTracing org. I have known gRPC has supported OT spec.
Where is the doc, provide how I can set tracer to gRPC, or other ways?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2465
Netty  proxy request grpc service error · Issue #2465 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Use  netty  proxy request grpc service  , there  is  error
why?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2470
reverse proxy · Issue #2470 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
imagine there are 10k grpc-clients, they established 10k http2 connections(TCP-connections) with the http2 reverse proxy; then http2 reverse proxy create 10k http2 connections(TCP-connections) to the origin(backend) server.
Is it possible to reduce the 10k connections between proxy and origin(backend) server?
for example, can a connection pool be used in reverse proxy to reduce connections with backend server?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2471
What is the correct way to confirm send is complete?  · Issue #2471 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
onCompleted means server have proccessed, correct?
My stub is like this
this.spanStorageStub = SpanStorageServiceGrpc.newStub(channel);
Will onError be called when network unconnected? And when unconnected occurs, wil stub reconnect?
I can not found this demo call to show these features for GRPC.
Can anyone confirm for me?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2472
Add toString to descriptors · Issue #2472 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MethodDescriptor, specifically, but it could be helpful for others as well, like ServiceDescriptor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2474
when will gRPC server create a new stream to client? · Issue #2474 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when will gRPC server create a new stream to client?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2478
error: UNAVAILABLE StatusRuntimeException:"End of stream or IOException" · Issue #2478 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2480
Proto reflection service: Optimize handling of dynamic services · Issue #2480 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The initial proto reflection service (#2386) reloads all proto file descriptors for every request. This was done to avoid checking for any service changes within a mutable fallback registry, but should be optimized to avoid re-processing unchanged services.
This likely requires a minor modification in core to enable the reflection service to distinguish between dynamic and static services.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2483
Flaky OkHttpTransportTest · Issue #2483 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2484
Listen to channel state changes on Android · Issue #2484 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's more of a question than an issue. I can't find any methods to listen to connection state changes. Is there any way to do this on the client side? I'm using protobuf-lite on Android. It'd be nice to listen to channel state changes, e.g. if the Internet connection is lost, the channel should signal the error. I have a persistent connection (full-duplex) to the server with a StreamObserver, but neither the onError(...) nor onCompleted() gets called if I just turn off the WiFi to test it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2487
Building grpc-java on POWER8 · Issue #2487 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
v0.15.0
What JVM are you using (java -version)?
What did you do?
Install protoc to /opt/share
If possible, provide a recipe for reproducing the error.
git checkout v3.1.0
What did you expect to see?
Build Successful
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2488
GrpcServerRule is Experimental · Issue #2488 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a tracking issue that will be closed once GrpcServerRule exits experimental status.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2490
Migrate example unit tests to GrpcServerRule · Issue #2490 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GrpcServerRule from #2456 simplifies the boilerplate necessary to unit test gRPC clients and services. We should update the example unit tests to make use of it (as appropriate).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2492
Export Javadocs for 1.0.2 · Issue #2492 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http: is still on 1.0.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2497
StatusRuntimeException with client · Issue #2497 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you do?
I am creating a PredictClient to make a gRPC call to an inception model of Tenserflow serving. I am providing url and port of our environment, where it's being hosted.
What did you expect to see?
I expect to see PredictResponse output for the image I am sending.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2499
How to determine different streams are based on the same channel · Issue #2499 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc-java-1.0.2
What JVM are you using (java -version)?
java version "1.7.0_79"
What did you do?
If possible, provide a recipe for reproducing the error.
I have a persistent connection (full-duplex) to the server with a StreamObserver (for login and push notification). And I have various unary calls based on the other streams. So if there is a api to judge whether these unary streams and the full-duplex stream are based on the same channel ?
Purpose: refuse unary calls if the full-duplex stream dose not exists.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2507
Remove maxMessageSize on NettyChannelBuilder · Issue #2507 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since #2382 has been committed, there is no longer a valid use for NettyChannelBuilder.maxMessageSize.   It has been marked as deprecated and should be removed for the 1.1 release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2510
google flatbuffer java support feature request · Issue #2510 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While it has been discussed, I don't think there is an explicit feature request for grpc-java support of google flatbuffers, maintained by @gwvo, as a replacement for protobuf messages, initially integrated into the grpc c at grpc/grpc#5438 and google/flatbuffers@48f37f9.
Use cases in grpc-java have also been mentioned in #2139 and #1403.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2511
No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact · Issue #2511 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
e app, the error is coming: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2512
Caused by: java.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: UNAVAILABLE · Issue #2512 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
Caused by: java.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: UNAVAILABLE
What did you expect to see?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2514
Periodical refresh of DnsNameResolver · Issue #2514 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
Original discussion:
Currently DnsNameResolver soles relies on refresh() being called to re-resolve. refresh() currently is called only when there is a connection failure, but there are cases where refreshing is needed without connection failure, e.g., rolling deploys, or simply adding a server.  We could introduce periodic refresh to DnsNameResolver.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2515
Deadlock in grpc due to recursive grpc call · Issue #2515 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Turned on FINE logging
Used the Logging client in google-cloud-java
What did you expect to see?
Not what I saw below...
What did you see instead?
Deadlock.
Found one Java-level deadlock:
Java stack information for the threads listed above:
Background: I have been trying various strategies to resolve googleapis/google-cloud-java#1386 , where using the Logging service at level FINE results in grpc logging to the Logging service in a recursive way. I tried using a ThreadLocal to prevent this, but this doesn't work with grpc because the actual call is executed on a worker thread. Essentially I think I need some way to bail out of the LoggingHandler.publish call if I can detect that this is in the scope of a grpc worker thread sending a request to the Logging service.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2516
netty-tcnative-boringssl-static and version 1.1.33.Fork19 need which glibc verson · Issue #2516 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
netty-tcnative-boringssl-static and version 1.1.33.Fork19 need which glibc verson?
What JVM are you using (java -version)?
JDK1.7
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2517
How to cause Invalid protobuf byte sequence? · Issue #2517 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
io.grpc is renamed by me. How does this exception happen? It happen in only one environment, but I can't tell the diff between this one and others.
Can you give me some tips? How to know, what cause this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2518
Review experimental annotations for 1.1 · Issue #2518 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should check all experimental tags, and see if we feel comfortable graduating them to the supported status.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2520
What does setting  GRPC  once request  read  time out ?  · Issue #2520 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a production environment ,we should setting once request   time,avoid  cascading failures,so  what does setting  GRPC  once request  read  time out ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2521
Some javadocs in DelayedClientTransport2 are obsolete · Issue #2521 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here {@link #setTransport} and {@link #setTransportSupplier} are no longer valid.
Please answer these questions before submitting your issue.
What version of gRPC are you using?
master head
What JVM are you using (java -version)?
N/A
What did you do?
If possible, provide a recipe for reproducing the error.
N/A
What did you expect to see?
N/A
What did you see instead?
N/A
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2525
ManagedChannelImpl leaves grpc theads unreleased after shudown or shutdownNow · Issue #2525 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using grpc-1.0.2 & netty-4.1.6-Final with
When using shutdown or shutdownNow on the client channel ManagedChannelImpl grpc threads are not released. This is in my production system as well as in the minimal example I've stripped down, see below. The server is not available and no actual call is done. The code is invoked from scala-2.11.8 but this should not matter.
If I do the code in a loop more and more threads pile up without going away after some time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2531
Make Deadline test-friendly · Issue #2531 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In its current form, io.grpc.Deadline is not suitable for testing.  It is not possible to create a deadline with an absolute offset, making it impossible to reliably create two relative deadlines.  The only public constructor is after() which is actually a timeout!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2533
Acess services from Server · Issue #2533 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to access all registered services from a build server, in my case the name is enough.
Therefore I need access to the handlerRegistry of the Server here and also an added entry in the interface.
Do you think that is a good idea?
I am currently writing an etcd service discovery on top of grpc and want to register all services from a server, so I need to access the services.
It would also be a good approach for me if I could add an interceptor/listener to the server that will be called when the server started where I can access those information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2534
CompositeChannelCredentials for OkHttpChannelBuilder channel · Issue #2534 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
C++ has composite credentials for the channel, as well as CallCredentials for individual stubs.
Does grpc-java have something similar?
So far all i've managed to find is the call credentials that can be applied to each stub, but that means I have to manually add it each time I create a stub, rather than just letting the channel handle it.
Is there a better way to do this?
Will something similar to CompositeChannelCredentials  be added to OkHttpChannelBuilder?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2535
Context Key not set in gRPC worker thread · Issue #2535 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.01
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Turned on FINE logging
Used the Logging client in google-cloud-java
Used the code recommended in #2515 to set a Context Key in my main thread
What did you expect to see?
I expected to see the Context Key set in the gRPC worker thread.
What did you see instead?
The key was not set.
Here are the stack traces where I expected it to be set, but it wasn't:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2541
Network is unreachable: pubsub.googleapis.com/2607:f8b0:4001:c02:0:0:0:5f:443 · Issue #2541 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Tried to connect to the gRPC Pub/Sub service.
What did you expect to see?
A successful connection.
What did you see instead?
Caused by: java.net.SocketException: Network is unreachable: pubsub.googleapis.com/2607:f8b0:4001:c02:0:0:0:5f:443
Other info:
Running in a docker image in Google Compute Engine
From what I understand, GCE does not support IPv6. But, when using gRPC (through Netty), for some reason it's trying to use IPv6 instead of IPv4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2548
The version of okhttp is not up-to-date · Issue #2548 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc-1.0.2
What JVM are you using (java -version)?
1.8.0_51
What did you do?
If possible, provide a recipe for reproducing the error.
We also need the latest okhttp of our application
but now okhttp is 2.5.0
What did you expect to see?
Use the latest okhttp
What did you see instead?
okhttp 3.5
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2549
 The version of okhttp is not up-to-date · Issue #2549 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8.0_51
What did you do?
If possible, provide a recipe for reproducing the error.
grpc used the old version of okhttp 2.5.0
What did you expect to see?
Update the version of okhttp to the latest version
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2552
bindService() should be final · Issue #2552 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We just found out a method in the generated code
The method is "bindService()" on the generated server interface is supposed to be "final", but is currently not.
For example
Why is it an issue
The non-final bindService() adds difficulty for users who want to mock the server interface in their tests. Mockito by default overrides all non-final methods with its no-op and null-returning impl. When a Mockito user creates a mock for RouteGuideImplBase, it can't be correctly registered to the server. It can be worked around by explicitly telling Mockito to use the original bindService(), but it's still a friction in the user experience.
What should we do
bindService() should have been defined as "final" in the first place. It was an oversight that we didn't make it so.  This should be considered as a bug and be fixed.
We will make the change in master, which will be in 1.1.0.
Risk
This is technically an incompatible API change. Anyone overrides bindService() on the generated interface will be broken. However, I don't find anyone doing so in google3, or any legitimate reason for it in general. The chance of breaking anyone is very low.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2554
large memory usage in io.grpc.netty.NettyClientTransport$2 · Issue #2554 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported in googleapis/google-cloud-java#1449 , io.grpc.netty.NettyClientTransport$2 (I don't know which anonymous class it is) consumes a large amount of memory. Detailed memory analysis is contained in the linked issue. (This is blocking google-cloud-logging GA).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2555
SECURITY.md mutual TLS code snippet out of date · Issue #2555 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FYI the code snippet in the mutual TLS section seems out of date, the method signature of the given ServerInterceptor still references MethodDescriptor
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2556
Can a name resolver handle multiple schemes? · Issue #2556 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a name resolver which itself is backed by a gRPC service which accepts the full URI string and allows for a handful of schemes(think something like.  getDefaultScheme can only return a single string, but the new NameResolver call is capable of returning a name resolver for multiple schemes.  What is the proper way to go about doing this?  Should I make two different factories so they each return the defaultScheme appropriately, or can I have a single Factory that returns the insecure or secure scheme only?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2558
errors when doing bench-marking · Issue #2558 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
bench-mark client is:
bench-mark server is:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2559
nginx proxy · Issue #2559 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
i want to using nginx to proxy grpc server, but it got error
What did you expect to see?
is it possible using nginx proxy for grpc?
if can, what i should do ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2561
Which version of android sdk/ios sdk support gRPC. · Issue #2561 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, which version of android/ios sdk support gRPC, I am sorry I can't find any information in the website.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2562
Race between pick and transport shutdown · Issue #2562 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now they are done in two steps:
A transport that is in READY state is selected
newStream() is called on the selected transport.
If transport is shutdown (by LoadBalancer or channel idle mode) between the two steps, Step 2 will fail spuriously. Currently we work around this by adding a delay between stopping selecting a subchannel (which owns the transport) and shutting it down. As long as the delay is longer than the time between Step 1 and Step 2, the race won't happen.
This is not ideal because it relies on timing to work correctly, and will still fail in extreme cases where the time between the two steps are longer than the pre-set delay.
It would be a better solution to differentiate the racy shutdown and the intended shutdown (Channel is shutdown for good). In response to racy shutdown, transport selection will be retried. The clientTransportProvider in ManagedChannelImpl is in the best position to do this, because it knows whether the Channel has shutdown. clientTransportProvider would have to call newStream() and start the stream, and return the started stream to ClientCallImpl instead of a transport.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2563
Tracking Issue for maxInboundMessageSize being Experimental · Issue #2563 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2574
grpc-testing maven package broken · Issue #2574 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8.0_77
What did you do?
I want to use the GrpcServerRule in my junit tests.
What did you expect to see?
When I include testCompile "io.grpc:grpc-testing:1.0.3" in my dependencies, I can use GrpcServerRule and all other classes currently available in the main github repo.
What did you see instead?
When I include testCompile "io.grpc:grpc-testing:1.0.3" in my dependencies, the GrpcServerRule and other classes are not there.
The grpc-testing-1.0.3-sources.jar file on bintray indeed does not contain those classes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2575
What's the default value of TCP_NODELAY · Issue #2575 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What's the default value of TCP_NODELAY in gRPC-java and is there's a way to set this option?
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
open jdk 1.8
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2577
ServerTransportFilter is experimental · Issue #2577 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Added in #2132
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2578
com.google.protobuf:protoc:3.1.0 generates unusable stubs · Issue #2578 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_112-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)
What did you do?
Create a new gRPC project latest instruction from gRPC 1.0.3 from master branch https://github.com/grpc/grpc-java
Create a .proto file with a message field map<string, string>
Generate the stubs
What did you expect to see?
Expected to see successful stub generating
What did you see instead?
location: class com.google.protobuf.GeneratedMessageV3
More Information
After much troubleshooting, the README in 1.0.3 tag seem to have the correct combination of protoc version (3.0.2) and gRPC version (1.0.3)
However, the master branch has the incorrect combination of protoc version (3.1.0) and gRPC version (1.0.3).  protoc 3.1.0 would generate the incorrect stub source.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2579
Distinct status for client channel shutdown · Issue #2579 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've a long running server availability monitoring rpc method implemented. The server just sends status messages if it is still alive. This is wrapped into an rxObservable so I can reconnect from client under the hood. But I should do so only if the client (channel) wasn't shutdown.
Unfortunately I get the same status (UNAVAILABLE) - as StatusRuntimeException - in the monitoring stream observer for server is unavailable and for client channel shutdown. The difference is only the description where I get a message like:
"channel shutdownnow invoked"
Currently I test the status description if it contains 'channel' && 'shutdown' in order to decide for reconnect or not.
Is there a better way to decide whether the channel is shutdown or the server is just unavailable? Or is there an distinct status planned for both events?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2582
Investigate Appengine Thread Partitioning · Issue #2582 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, using gRPC on AppEngine requires a new channel to be created for each request.  Sharing channels across requests would have substantial performance benefit, but would require per-request threading.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2586
Clarify best practices for sending credentials in ClientAuthInterceptor · Issue #2586 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The replacement for ClientAuthInterceptor, a deprecated but useful class, is GoogleAuthLibraryCallCredentials.  ClientAuthInterceptor has much wider usage, presumably because GoogleAuthLibraryCallCredentials is difficult to use, with no clear examples.
Some better Javadoc needs to be added to GoogleAuthLibraryCallCredentials, as well, as some extremely easy to read example code.  It should make a convincing argument for why it should be used over ClientAuthInterceptor.
ClientAuthInterceptor has been deprecated in 1.0.x, and is subject to removal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2590
Any ETA on 1.1.0 Release? · Issue #2590 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.0-SNAPSHOT
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
N/A
What did you expect to see?
N/A
What did you see instead?
N/A
Question
Is there any ETA for 1.1.0 gprc-java release?
Thanks
Tim
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2592
Tracking Issue for MethodDescriptor.getRequestMarshaller being Experimental · Issue #2592 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2595
Maybe add a builder to MethodDescriptor · Issue #2595 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After talking about this briefly, it seems that a Builder for MD might be a good idea.  One complication comes up: MD is generic, but the Builder may not be.  If the marshaller is not the first this passed to the the builder the types will be wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2596
the benchmark example gives a 2 times better QPS result after add spring-boot to dependency · Issue #2596 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8
What did you do?
I use the bench mark code from https
I download the code and convert it to a maven project, then run the bench mark with command:
then I add the spring-boot-starter-web dependency to the benchmark project, and re-run the bench mark:
sudo java -jar benchmark-client-with-springboot.jar --address=10.200.10.17:1024 --duration=10 --channels=10 --outstanding_rpcs=40
the benchmark result is:
What did you expect to see?
the  QPS results of two benchmarking should be same.
What did you see instead?
after add spring-boot dependency, it gives a 2 times better QPS result.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2599
Don't hang RPC when netty-tcnative .so fails to load due to (musl) linking errors · Issue #2599 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Then deploy to a GCE instance and run it.
What did you expect to see?
An exception indicating that the netty dependency was unsatisfied
What did you see instead?
After the call times out, DEADLINE_EXCEEDED
Notes
If a user has a high timeout, it can take a long time for them to discover something is wrong. Then when they receive DEADLINE_EXCEEDED, they have no idea why - it doesn't guide them to the problem with the dependency. They have to know to turn on FINE logging and go log spelunking to fine the root cause. Example user-filed issue: googleapis/google-cloud-java#1430
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2600
Tracking issue for TestMethodDescriptors being Experimental · Issue #2600 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2601
Java GRPC Client (1.0.3) not able to send requests with metadata larger than ~500KB. · Issue #2601 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Java: 1.0.3
Python: 1.0.4
What JVM are you using (java -version)?
java version "1.8.0_112"
Java(TM) SE Runtime Environment (build 1.8.0_112-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Start a Python Greeter server.
Modify the Python Greeter client to have the following run() method:
Run the python client. With the standard package for grpc 1.0.4 for python, the metadata is larger than the default metadata size (16K) and we get (as expected):
Now patch this line on the python grpc server init code (we don't yet have the ability to set options :/) with:
Rerun the server and client:
Greeter client received: Hello, you!
Keep the python server running and run the Java client:
Modify the Java client to add metadata:
INFO: [ManagedChannelImpl@96532d6] Terminated
does not change the outcome (kind of expected, since apparently those options are only for receiving metadata, which is quite confusing).
What did you expect to see?
I expected the Java client to be able to send  as much metadata as the server supports. The python client seems to do it just fine.
What did you see instead?
Starting at around 500KB the Java GRPC client is not able to send the request and the connection errors with WARNING: RPC failed: Status{code=INTERNAL, description=Connection closed with unknown cause, cause=null}.
I'm guessing this behavior is not expected? Are there any workarounds?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2602
BUILD FAILED · Issue #2602 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2604
GRPC is logging NOT_FOUND errors as SEVERE and spamming the logs · Issue #2604 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
gRPC = 1.0.3
We are using NOT FOUND to indicate that a resource is missing on the server. This is an ok response. However, this is getting logged as a SEVERE error on the client side and we can't find a way to control how to turn off logging for this particular error or reduce its severity to INFO.
Can someone help fix this/explain why NOT_FOUND is severe?
cc: @jacob-tock
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2607
Tracking Issue for ClientCall getAttributes being Experimental. · Issue #2607 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specific usages:
ClientCall.getAttributes()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2608
Limit Cipher Suites Available · Issue #2608 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
What did you do?
n/a
What did you expect to see?
n/a
What did you see instead?
n/a
I'm using  statically linked tcnative via "netty-tcnative-boringssl-static" in my dependencies.  With ServerBuilder as below....
How would I limit the cipher suites available to the TLS negotiation to a very specific subset?.  I know I can provide an SSL context to NettyChannelBuilder and NettyServerBuilder but i'm not sure I can limit the available ciphers in there (or if openSSL would even care)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2609
the JVM never exit after added sleep(2000) · Issue #2609 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
code is from: https
I added  sleep(2000) in the finally block of main:
What did you expect to see?
the JVM should terminate after client.shutdown();
What did you see instead?
the JVM never terminate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2610
does one streamId(>=3) represents one RPC call in the same TCP connection? · Issue #2610 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
Does one streamId(>=3) represents one RPC call in the same TCP connection? I mean:
one streamId only can be used for 1 time RPC call
OR
one streamId could be used for multiple times RPC calls?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2613
Put server address in ClientCall#attributes() · Issue #2613 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be very helpful to put the target address into ClientCall#attributes(). One of the use cases is the ability to access it in interceptors.
Without first class support for retries, we're using RetryingInterceptor. We want to be able to write LB logic which in the case of failed attempt, would pick different backed on next call. There's currently no way to achieve that and ability to get information about which address is targeted in given call would solve it (the RetryingInterceptor would then append target address to BACKENDS_TRIED key in affinity attributes, on every attempt).
/cc @dapengzhang0 @zhangkun83  @kkaneda
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2624
Client Error: io.grpc.StatusRuntimeException: UNKNOWN · Issue #2624 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
I am running a gRPC-java server with multiple grpc services defined.
When running multiple stubs and their multiple rpc calls simultaneously I am seeing this exception below thrown.
This happens only when I have multiple stubs with their own channel defined and the occurrence of the exception seems to be more frequent when increasing the number of stubs/rpc calls. This looks to me like some sort of resource issue either client or server side. I have increased the thread count and seen no measurable improvements. Not sure where to go from here?
My Client setup:
What did you expect to see?
I expect to get back the response object.
What did you see instead?
Instead I received a io.grpc.StatusRuntimeException: UNKNOWN
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2626
AbstractInteropTest.maxInboundSize_exact is too picky of the precise protobuf encoding · Issue #2626 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the client encodes protos ever-so-slightly differently than the server, the size the server sends won't match the computed size the client generates. If the server uses a more verbose encoding, it results in an error like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2631
ClientCalls drops cause · Issue #2631 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ClientCalls.toStatusRuntimeException drops the original cause of the Status when converting a Throwable to an SRE.  This results in somewhat useless stack traces, as the original stack trace is lost.  (or at least not printed).  This also happens in BlockingResponseStream.hasNext
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2633
Do not pass ClassLoader to Class.forName, for Android · Issue #2633 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See #2207. An easy workaround for #2207 was to specify -keep in ProGuard configuration. However, everyone would be happier if such configuration was unnecessary. Using forName() without passing ClassLoader should remove the need for configuration, as originally intended.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2636
ServiceDescriptor constructor is error prone · Issue #2636 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ServiceDescriptor(String, Collection<MethodDescriptor<?, ?>) constructor is error prone.  Getting the generics slightly wrong results in ServiceDescriptor(String, Object, MethodDescriptor<?, ? ...) being invoked instead.  This can happen if the second arg is List<MethodDescriptor<Void, Void>> for example.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2638
Unable to build  · Issue #2638 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
I am facing a similar issue described in
I am unable to build.
Build log  says
linking protoc-gen-grpc-java failed.
collect2: error: ld returned 1 exit status
I am using Cent OS 7
I have libStd packages installed
And
protoc version is "libprotoc 3.1.0"
Please help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2641
Tracking Issue for MethodDescriptor.Builder being experimental · Issue #2641 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2643
Add Since javadoc annotations · Issue #2643 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice if we could quickly tell when methods / APIs were added.  Javadoc has the @since annotation for this purpose.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2646
Provide Attribute for i.n.c.unix.PeerCredentials when using EpollDomainSocketChannel · Issue #2646 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc 1.0.3
What JVM are you using (java -version)?
java version "1.8.0_111"
Feature Request
We'd like to get access to the EpollDomainSocketChannel to access method peerCredentials() (new in Netty release 4.1.7) from within a gRPC server's BindableService call.
We're using gRPC with Unix Domain Sockets (Netty's EpollServerDomainSocketChannel) on a server to manage a hardware resource.  We allow a single user (but multiple processes) to open the resource more than once, but we need to reserve the resource while that user has it open and not allow any other users access to the device.  Our server needs to be resilient and detect that the client program has potentially crashed and allow the resource to be cleaned up and made available for another user.
We can add a ServerInterceptor but still I haven't figured out to get the Channel.
Can we get access from a ServerCall object to the Channel (understanding that it may be null for an Inprocess server)?  Or other alternatives?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2647
why my grpc-java client on version 1.0.3 threw io.netty.util.internal.OutOfDirectMemoryError · Issue #2647 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm testing the latest version of grpc-java which version is 1.0.3. The client always throws io.netty.util.internal.OutOfDirectMemoryError. why....
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2649
NameResolver can be NotThreadSafe · Issue #2649 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With ManagedChannelImpl2, NameResolver is always called from Channel Executor, except for getAuthority(). After ManagedChannelImpl2 is promoted, NameResolver can get rid of @ThreadSafe.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2650
Decide whether LBv2 should be kept in 1.1 · Issue #2650 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If we do, we could provide a better (non-atomic) migration path for people (implementors) implementing LoadBalancer.
During 1.1, we keep the old API intact, and include the v2 API as LoadBalancer2. Implementors re-write their LBs with the v2 API, and migrate their customers to their v2 LB. The two versions of LB impls can coexist.
In 1.2, we replace LoadBalancer with LoadBalancer2, and keep LoadBalancer2 as an alias to LoadBalancer by extending it. The old LB impls stop working. Before switching to 1.2, the implementors must have switched all their customers to the v2 API. During 1.2, they can migrate their customers to the proper LoadBalancer name.
In 1.3, we delete LoadBalancer2.
The caveat is that it increases the size of Android packages in 1.1. It shouldn't be a significant amount compared with the existing code size. We should at least calculate the exact size and note it in release notes.
If we are going to do this, we should also change the @Internal annotations to @ExeprimentalApi on the v2 APIs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2651
AbstractInteropTest should not depend on TestUtils · Issue #2651 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PR #2634 accidentally added a dep from src/tests to another src/test directory, which is uncommon.  Shared test library code needs to be under a /testing/ directory in the src/java which can be reused by multiple test suites.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2653
Create GrpclbLoadBalancerFactory2 · Issue #2653 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If #2650 is resolved by keeping LBv2 in 1.1, we should also add GrpclbLoadBalancerFactory2 for 1.1, otherwise GrpclbLoadBalancer2 will not be accessible to users.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2655
about Netty initChannel · Issue #2655 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.7.0_80
What did you do?
If possible, provide a recipe for reproducing the error.
no error
What did you expect to see?
What did you see instead?
when netty client connect netty server,  exec initChannel, and new NettyServerTransport, and new NettyServerHandler...
so in server:
in mem, too many new new new ......
Do you understand what I mean?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2656
Switch to LBv2 · Issue #2656 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
LBv2 (design doc) consists of LoadBalancer2 and its supporting channel implementation ManagedChannelImpl2. Here we outline the transition path from the current LoadBalancer and ManagedChannelImpl (a.k.a LBv1) to LBv2.
The transition is transparent to users who only use the default or stock LoadBalancers that are shipped with gRPC. The following transition plan should only concern advanced users who implement or use custom LoadBalanacer(s).
Also note all changes happen on master first. The changes scheduled for gRPC 1.2 will happen on master soon after 1.1 is released.
During gRPC 1.1
LBv1 and LBv2 coexist. LBv1 is the default one. Both can be set to the channel builder, while LBv2 is used only if a LoadBalancer2 implementation is set to the channel builder.
During this period, implementors re-write their LBs with the v2 API, and migrate their customers to their v2 LBs.
For example, FooBalancerFactory is the current LB, while Foo2BalancerFactory is the new one that uses LBv2.
While the v1 version continues working:
Customers should be migrated to use the v2 version:
We replace LoadBalancer with LoadBalancer2, and keep LoadBalancer2 as an alias to LoadBalancer by extending it. LBv1 interfaces and codepath are deleted. All v1-based LBs stop working with gRPC.
Prior to switching to 1.2, the implementors must have switched all their customers to the v2-based LoadBalancer2. During 1.2, they should rebase their v2-based implementations to the proper LoadBalancer interface.
For example, this continues working because LoadBalancer2 extends LoadBalancer:
We delete the alias LoadBalancer2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2666
Tracking issue for ServiceDescriptor.Builder being experimental · Issue #2666 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2668
Catch Throwable instead Exception or RuntimeException&Error · Issue #2668 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While debugging my code problems I spot several places in the library code that might lead to uncatched/unreported exceptions being thrown through catch blocks.
In SerializingExcutor.TaskRunner#run there is try { .. } catch (RuntimeException e) { .. } block. It could easily happen any other Exception or Error can be thrown. (since checked exceptions are not necessarily on bytecode level, an Exception types are also possible, no matter they are not declared in Java code).
In the ServerImpl I see slightly incorrect check, that catches RuntimeException and Error only. I suppose a bit correct is to catch Throwable there too.  In messageRead, streamCreated, halfClosed methods.
There are a few more places I found, e.g. in RouteGuideActivity, RouteGuideClient, AsyncFrameWriter.WriteRunnable#run, GRPCUtil#TIMER_SERVICE,  MessageFramer,
ManagedChannelProvider#isAndroid, ClientInterceptors.CheckedForwardingClientCall#start, NameResolverProvider#isAndroid,
In internal/Util it is not clear if Throwable should be checked
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2677
gRPC 1.1.0 uses wrong Protoc · Issue #2677 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For posterity:
Protobuf team released 3.1.0, which was accidentally built on a developer machine.  This caused the artifacts that were uploaded to Maven central to require glibc 2.14 or later.  This was not noticed at the time, and gRPC Java was changed to depend on 3.1.0.  Later it was found out  that this prevented users from using it since they use an older version of glibc.
Maven central prevents removing or modifying an artifact once released, so Protobuf team uploaded a new version, built from the protoc-artifacts/Dockerfile, which does have the correct dependencies.  This was uploaded as 3.1.0-build2.  Unfortunately, none of the other artifacts of (like the java libraries) were uploaded.
Meanwhile gRPC was unaware of this rename (it happened during the 1.1 release cycle), and was using 3.1.0 successfully since all gRPC developers machines are using a later glibc.  1.1 was cut, but now doesn't build using the docker image, since Protobufs own docker image doesn't contain the dependencies of the artifact.  There are a couple ways forward:
Revert v1.1.0, and rewrite the v1.1.x branch to use the proper protoc artifact.  This will break anyone who depended on the branch or tag in the brief window that it existed.    Once the correct protoc artifact is used, the branch will be rereleased and retagged.  This is probably okay, since the gRPC artifacts have not be released.  One downside is that the protoc and proto java libraries will not match, and will have an inconsistent  protobufVersion in the gradle file.
Like 1, it would be possible to just upgrade to 3.2.0.  3.2.0 hasn't been as well tested, but solves the protoc version not matching the proto libraries.  It would also have to be fixed in master
Don't rewrite history, dump the 1.1.0 tag, and move immediately to 1.1.1.  The errors of the past will be set in stone, and 1.1.0 will never exist as an artifact.
Some sort of hack to use the 3.1.0-build2 proto artifact when building the grpc plugin, but keeping the dependencies the same in the gradle file.  This lets us keep the version, but anyone using grpc plugin will be force to use a later glibc.  (2.14 came out in 2011).  This might be okay, assuming that 1.2 will be released soon anyways and have this fixed.
@ejona86 @zhangkun83 thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2680
The JWT cloud-to-prod auth interop test is failing · Issue #2680 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2681
grpc-thrift 1.1.1 has not been published to maven repo · Issue #2681 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.1.1
What did you do?
Included grpc-all 1.1.1 as a dependency in a maven project
What did you expect to see?
grpc-all and all dependencies download from maven central
What did you see instead?
Could not find io.grpc:grpc-thrift:1.1.1.
Searched in the following locations:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2682
overrideAuthority does not impact authority for JWT in jwt_token_creds · Issue #2682 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2684
Remove excessive logging in ManagedChannelImpl · Issue #2684 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
master
What JVM are you using (java -version)?
Java8
What did you do?
If possible, provide a recipe for reproducing the error.
This was discovered in the internal stress test.
What did you expect to see?
What did you see instead?
Tons of
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2687
Http2OkHttpTest.deadlineExceededServerStreaming is flaky · Issue #2687 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2688
Would it be possible to shade guava? · Issue #2688 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3 and 1.1.1
What JVM are you using (java -version)?
java version "1.8.0_92"
Java(TM) SE Runtime Environment (build 1.8.0_92-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.92-b14, mixed mode)
What did you do?
GRPC 1.1+ uses Guava 20.0.   We have a very large codebase that uses both internal and external libraries that depend on older version of guava.  These libraries are not compatible with Guava 20.0.  As a result we are unable to upgrade to GRPC 1.1.+.   From what I can tell the only Guava class exposed by GRPC is ListenableFutures, via ClientCalls in grpc-stub.  Would it be possible to shade all other uses of Guava in GRPC.
There would still be an issue with the GRPC code generator that does expose Guava's ListenableFuture.  For that use case would it be possible to make generating those stubs optional and perhaps even add an option to generate a CompletableFuture stub?
What did you expect to see?
Newer versions of GRPC to not break other libraries depending on older version of Guava.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2689
Reflection service can return inconsistent results · Issue #2689 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The service currently calls serverReflectionIndex.updateMutableIndexIfNecessary() after receiving each request in the stream. This is not only needless processing, but actually against the point. The reflection API is streaming so that each stream can be independently consistent. This is normally important when a load balancer may direct each request to a different backend. However, in this case it could also handle the mutable nature of the services.
Although serverReflectionIndex is volatile, it is not assigned in a thread-unsafe way; it could be non-volatile. However, I would suggest making ServerReflectionIndex immutable and create a new/derivative each time the mutable index is detected to change (probably using locking instead of volatile). I would then suggest checking for updates to the mutable index at the beginning of each RPC (serverReflectionInfo()) and then copying the current ServerReflectionIndex reference to the ProtoReflectionStreamObserver.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2691
ManagedClientTransport.start should be better defined · Issue #2691 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling  ManagedClientTransport.start returns a Runnable, but it isn't clear what to do with it, or when it should be called.  While the code is annotated @CheckReturnValue, the annotation doesn't get inherited across class boundaries, leading to places where the value is ignored.  NettyClientTransportTest contains several invocations of start, but ignores the return value due to NettyClientTransport currently returning null.
The difficulty of describing when and how the Runnable should be used feels indicative of shaky API.  It would be nice to modify InternalSubchannel to not need to acquire locks to alleviate the need to run code outside of locks.  This is not urgent.
@zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2698
Memory allocation not decreasing as load decreases or moves to zero · Issue #2698 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I started down this path because I found the memory leak in 1.0.1 (fixed in 1.0.3) through load testing, but I see something that doesn't appear to behave as it should in 1.0.3.  The memory footprint increases relative to the amount of concurrent requests, but it doesn't appear to ever decrease when load decreases or goes to zero.  This may be expected, but I thought I would bring it up here.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8.0_60-b27
What did you do?
If possible, provide a recipe for reproducing the error.
Many goroutines (hundreds, thousands) to create concurrent requests in a streaming server.
What did you expect to see?
Memory usage increases relative to the number of concurrent requests, and decreases (eventually)  as the load goes to zero, or is completely zero.
What did you see instead?
Memory usage goes up as expected when handling thousands of concurrent requests, but never decreases as load moves to zero.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


2703
AssertionError in OkHttpClientTransport from older Android devices · Issue #2703 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using gRPC on HTC M7 (2013), a crash occurs (AssertionError) that seems to be from the protocol negotiation in OkHttp transport.
What version of gRPC are you using?
Not sure how gRPC behaves in this case but comments in the method seem to suggest that's a scenario that can be expected
Stock Web browser
Chrome browser
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2710
gRPC memory leak? when send ton of data · Issue #2710 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
java version "1.7.0_80"
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Client side just a simple for loop to invoke rpc method.
Server side , i also set the maxConcurrentCallsPerConnection to 5.
What did you expect to see?
send at least 1M message frequently.
What did you see instead?
There are two doubt I don't understand.
Within log file , i see lots of OutOfDirectMemoryError, show as following:
when I using linux Top command to see the java process. I found that the RES memory size is much bigger than the jvm heap size plus the off-heap size. see as following,
and java jvm configuration show as following,
and the max direct memory size is 243.25 MB which is figured out by using PlatformDependent.maxDirectMemory().
thank you, can you make any suggestion ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2713
Protoc throws error=7, Argument list too long · Issue #2713 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8.0_66, vendor: Oracle Corporation
What did you do?
I tried to compile 1886 proto files using maven.
Getting the following exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2714
Enable NettyChannelBuilder to set default call credentials · Issue #2714 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I spoke with @ejona86 regarding this issue.  Currently, there's no straightforward way to set a default call credentials using io.grpc.netty.NettyChannelBuilder to allow all calls using this channel to have a default credential.  Right now one approach is to pass an interceptor, such as ClientAuthInterceptor, to ChannelBuilder. (here's an example: https:)
However, ClientAuthInterceptor is deprecated.  Therefore, it would be great if ChannelBuilder could provide a method, say "callCredentials",  such that one can do something like NettyChannelBuilder.forAddress(addr, port).callCredentials(creds).build()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2715
java.lang.NoSuchMethodError: com.google.common.util.concurrent.MoreExecutors.directExecutor() · Issue #2715 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've been grappling all day with java.lang.NoSuchMethodError issues, presumably due to Guava conflicts and some strange interaction with maven. I've also tried with different version of grpc-* and the protoc plugin, to no avail.
Relevant parts of my pom.xml:
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_101-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
I then followed the HelloWorld example to build a client and a server. In a Junit test case, the client simply invokes the rpc via a blockingStub.
What did you expect to see?
No errors.
What did you see instead?
With 1.1.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2716
Unify usage of EAG and ResolvedServer · Issue #2716 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@zhangkun83 wrote:
The equality of EquivalentAddressGroup, which only counts the addresses but not the attributes, was needed by the v1 ManagedChannelImpl for de-duplicating TransportSets. Even though ManagedChannelImpl2 doesn't forbid duplicating InternalSubchannel for the same EquivalentAddressGroup, the equality is still needed by most LoadBalancer2 implementors, e.g., Map<EquivalentAddressGroup, Subchannel> subchannels in the round-robin LB, to determine which InternalSubchannels to close and which to keep, when the NR result is updated.
I agree that there are too many address wrappers and it has become very confusing, sometimes even to myself. I prefer to keep the EquivalentAddressGroup name, because it indicates how these addresses are used by the channel. So instead of deleting EquivalentAddressGroup, I suggest deleting ResolvedServerInfo, and adding attributes to EquivalentAddressGroup. To address the equality requirement I mentioned earlier, we could add a withoutAttributes() method which can be used in cases where attributes should not be counted for equality.
ResolvedServerInfoGroup was intended to be the attribute-ful counter-part of EquivalentAddressGroup. Since you are proposing to replace EquivalentAddressGroup with ResolvedServerInfo, I would expect ResolvedServerInfoGroup to go away instead of building yet another level on top of ResolvedServerInfo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2717
Keep track of transport latency · Issue #2717 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86 wrote:
Long-term, I question if the transports should just keep track of their latency. They know the latency initially via SETTINGS ack and then later via flow control pinging.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2719
API Review · Issue #2719 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Make sure that no new APIs were accidentally introduced (that is, APIs were made stable on purpose). Make sure we are happy with the APIs. Can consider removing ExperimentalApi from APIs, if we haven't already.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2720
TLS handshake failures on android · Issue #2720 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
grpc-java 1.1.2
grpc c++ build against OpenSSL 1.0.2k
What JVM are you using
Android
What did you do?
I'm creating a channel using the following code:
where context is generated by:
Where "resources/EC_CA.crt" is packaged with our application, and is successfully used successfully for our current internal library.
When the client performs the TLS handshake with the c++ server, it gets up to the point where it sends the TLS client key exchange/change cipher spec, then the server complains with the line:
Handshaking failed: {"created":"@1486967107.222496318","description":"Cannot check peer: missing selected ALPN property.","file":"src/core/lib/security/transport/security_connector.c","file_line":491}
Interestingly, this only occurs on android devices after running com.google.android.gms.security.ProviderInstaller.installIfNeeded(getApplicationContext());. If we don't use play services we see different behaviour depending on API version. Our level 19 and below devices fail out since they lack the devices. The level 21 and above devices successfully connect and communicate with the server, though.
The python grpc implementation does not cause the above issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2721
Issue while running helloworld example on ubuntu 14.04 · Issue #2721 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting the following error from here while running the HelloWorldServer.java on my local.
I am using openjdk version "1.8.0_91" on ubuntu 14.04.
My pom.xml looks like :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2724
How do I call grpc-java server from golang client · Issue #2724 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have generated the following method from the given proto file. As it is mentioned here it uses the combination of LowerCase of PackageName and ServiceName defined in the proto file.
to generate the full method name. Now the problem is the same file is being used to generate the client code in GoLang. Which take the package name as it is. And it throws the following exception while calling the same method from client :
So, how to generate the full method name as it is in grpc-java  as mentioned in proto file?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2726
NPE during NettyClientTransport.start() if keepAlive is enabled · Issue #2726 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
GRPC 1.1.2
What JVM are you using (java -version)?
1.8.0_112
What did you do?
i believe the field channel is never initialized right now, so NPE is throw by field call channel.eventLoop().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2727
grpc-core and grpc-context jars exporting the same package doesnt go well with OSGI · Issue #2727 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
GRPC version 1.1.2
What JVM are you using (java -version)?
1.8
What did you do?
I am trying to add a GRPC Server into Karaf OSGI Container as a feature. To this library, grpc-core and grpc-context libraries are dependencies.
Because these jars are not OSGI bundles, the osgi wrap is performed. While running the application, we get an error that io.grpc.Context could not be found in bundle grpc-core.jar (NoClassDefFoundError)
For information please refer to the OSGI bundle definitions.
As you can notice, the problem seems to be because of the same export-packages defined in grpc-core and grpc-context which doesnt seem to go well with OSGI.
I reverted my GRPC version to 1.0.0 in which the jars were broken down to core and context and it worked well.
So the requests are as below:
a) A single jar which includes both core and context
b) If context is intended to be separate, i suggest different packages be used in context so that there wont be a collision on the export-packages.
Is there a plan to create a OSGI bundle for these jars?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2728
dev: Jetty ALPN/NPN has not been properly configured when running tests in IntelliJ · Issue #2728 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some of the tests depend on jetty alpn agent for TLS stuff which is loaded by gradle for whole test suite but not if you're running a single test in for example an IDE.
I figured out how to hack it:
Go to Edit Configurations for your test in IJ
onder if there's more sane and straightforward way to do this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2731
What happen when received many reset frame from grpc server! · Issue #2731 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
We developed a grpc proxy based on netty.  In grpc proxy, we adapt long connection for connect proxy to grpc server. After Gprc prxoy run some time, we received many reset frame(errorCode=8) from grpc server and have no date frame(endStream=true),  then the proxy dose no work any way.
What did you expect to see?
We expect to reveived header frame(endStream=false), data frame(endStream=false), header frame(endStream=true)
What did you see instead?
But we really reveived header frame(endStream=false), reset frame(errorCode=8)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2733
Stub are not generated · Issue #2733 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.1.2
What version of protoc are you using?
3.2.0
What JVM are you using (java -version)?
1.8.0_111
I don't get any stub generated.
Many thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2737
Pass "args" object to LoadBalancer2.SubchannelPicker.pickSubchannel() · Issue #2737 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now the method looks like:
public abstract PickResult pickSubchannel(Attributes affinity, Metadata headers);
Neither affinity nor headers feels inherent to the method. A bit "random." That is a symptom that we may need to add additional arguments in the future. For example, MethodDescriptor. To avoid overload troubles, we should probably just make it an object today. Say, something like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2738
Use CallOptions.withOptions instead of withAffinity · Issue #2738 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
withAffinity is a full Attributes to be type-safe, but it will generally only have one entry and sometimes two. In more recent times we've added withOptions. This seems it could just use it instead. This would mean the LoadBalancer would be passed CallOptions instead of Attributes affinity, but that doesn't seem too bad.
Probably want to do #2737 at the same time as fixing this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2742
gradle build failure in proxy environment · Issue #2742 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using? : 1.2.0-SNAPSHOT
What JVM are you using (java -version)? : java version "1.8.0_72"
Forked the master branch and then tried to build some example codes using instructions given in quick start guide. I am not sure whether I have to install protobuf or any other thing to the local machine.
I am using windows 7 machine under corporate proxy. Navigated to grpc-java\examples>
then
gradlew.bat installDist
Expected: Build success
Found: FAILURE: Build failed with an exception.
What went wrong:
Could not resolve all dependencies for configuration ':compile'.
Could not find io.grpc:grpc-netty:1.2.0-SNAPSHOT.
Searched in the following locations:
Could not find io.grpc:grpc-protobuf:1.2.0-SNAPSHOT.
Searched in the following locations:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2745
Steps for changing license · Issue #2745 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue to track the following changes
change LICENSE file to Apache v2.
change license text in all source files.
change license type in BUILD files.
change copyright text from "Google Inc" to "gRPC Authors" in all files.
Add a AUTHORS file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2746
map types can't compile in Linux using gradle · Issue #2746 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpcVersion = '1.0.3'
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
4 service, unary request/response
What did you expect to see?
I expected to compile
What did you see instead?
Note: /home/magg/Desktop/server/src/main/java/com/example/grpc/HelloRequest.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2756
Provide a java_grpc_library() Skylark extension · Issue #2756 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bazel users can now build protos using the built-in proto_library and {cc,java,javalite}_proto_library rules.
These rules do not include gRPC support intentionally; this FR is about providing a Skylark extension to allow users to build gRPC bindings.
@ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2761
Failed to load any of the given libraries: [netty-tcnative-windows-x86_64, netty-tcnative] · Issue #2761 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.2
What JVM are you using (java -version)?
8
What did you do?
If possible, provide a recipe for reproducing the error.
Trying the SSL on server side
here is my pom.xml
What did you expect to see?
SSL should work fine
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2762
NettyClientTransportTest.maxHeaderListSizeShouldBeEnforcedOnServer is flaky · Issue #2762 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like the problem is getRootCause() is over-eager and skips over the StatusException. So this is a bug in the test, which should be easy to fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2763
Need non-experimental way to raise maxInboundMessageSize · Issue #2763 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As per googleapis/google-cloud-java#1499 , users of Pub/Sub see errors when their messages exceed 4MB, even though Pub/Sub's limit is 20 MB. Ideally we'd like to call maxInboundMessageSize to raise this maximum, but it turns out that maxInboundMessageSize is experimental. I don't see an open issue for making it non-experimental - when will this be done?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2770
Server does not send initial metadata on a stream with no messages · Issue #2770 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The gRPC wire spec says:
Most responses are expected to have both headers and trailers but Trailers-Only is permitted for calls that produce an immediate error.
However, the only time that headers are sent by a Java server is in when onNext() is called (see ServerCalls.java#L282). This means that a stream where the server's behavior should be to send initial and trailing metadata (i.e., close the stream with no outbound messages), instead gRPC sends out a Trailers-Only response, skipping any initial metadata.
This popped up on the existing interop tests when PHP and Node were not setting the response_parameters field in the custom_metadata interop test. See grpc/grpc@ced8702. These tests are now passing since the test spec says to set the response_parameters field, and so the interop server calls onNext() to send the appropriate response(s).
But, if the wire spec's statement should be interpreted as Trailers-Only should only be sent for calls with an immediate error, this is a bug in Java's implementation. Even if Trailers-Only is a legal response even without errors, it seems like the Trailers-Only message should include any header metadata.
It seems to fix things to add the following check to ServerCalls$ServerCallStreamObserverImpl#onCompleted(), but I haven't tested this extensively enough to be sure this doesn't cause problems elsewhere:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2772
Tracking GrpclbLoadBalancerTest unit tests should be more unitary · Issue #2772 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some unit tests in GrpclbLoadBalancerTest are too long and testing multiple things in one test method.
It's hard to read and maintain. Better to split apart.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2775
SSL error, pls help · Issue #2775 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Grpc version 1.0.1
What JVM are you using (java -version)?
JVM: Oracle Jdk jdk-8u121
What did you do?
In client,use jetty alpn
In server, use netty boringssl
What did you expect to see?
There is no error
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2776
Tracking issue for Monitoring Service being Experimental · Issue #2776 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2783
Test historic generated code · Issue #2783 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should check in generated code for each minor version of grpc, and at least makes sure it compiles. If it compiles, it is highly likely to work.
Ideally we'd run some simple sanity tests, although it is hard to force all the code to run. Maybe we create a noop-ImplBase service and call bindService(). That would at least load all the MethodDescriptors... I don't think a literal test is necessary before closing this. The compilation itself can count as a "test." But it should at least be briefly investigated before closing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2784
Max concurrent global streams (on the server) so applications don't have to implement it: · Issue #2784 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Request coming from Mixpanel team
Seems like C has a lot of it but Java doesnt.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2785
Inconsistent INTERNAL errors for message-less RPCs · Issue #2785 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
java version "1.8.0_121"
What did you do?
Create a unary rpc, on the server have it immediately call responseObserver.onCompleted() with no previous onNext().  With a java gRPC client call this rpc with blocking and future stubs, they'll both throw an INTERNAL error from here. Using the async client stubs will work(no onNext, just onCompleted with trailers).
If I switched to a streaming response and called onComplete() on with no previous onNext() the future stub is no longer available(expected) and now the Iterable for the blocking stub returns false for hasNext() as expected, but doesn't break.  The async stub continues working as before.
What did you expect to see?
I guess I wanted the "defaultInstance" of the response type for the blocking and future based stubs rather than an exception.  That, or an onError to trigger on the async stub with the same INTERNAL status and message.
I have not checked what the c-core will do in this case, or if there is a spec for this behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2789
Java benchmark driver spams logs · Issue #2789 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking at a recent run: https
By lines of output, Java is causing 79% just with PrintFlagsFinal. It seems we should remove the argument or figure out a less spammy solution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2797
CompletableFuture stubs · Issue #2797 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'd like to start a discussion about adding a CompletableFuture-based stub implementations to gRPC. I understand that generated gRPC code must be backwards compatible with Java 6, so here are some alternative implementation strategies to consider.
Implement CompletableFuture-based stubs in a stand-alone class generated by a stand-alone protoc plugin. The CF stub class would reference the public MethodDescriptors of the stock generated client. This option is easiest to implement, but presents a fragmented programming model.
Implement CompletableFuture-based stubs inline with the existing generated stubs by adding @@protoc_insertion_points to the stock c++ generator. A protoc plugin would be used to populate the insertion points. This option has the benefit of presenting a homogenous programming model for this, and all future plugin-based stub extensions, but requires a coordinated one time change with the protoc project.
Extend the c++ generator with optional support for CompletableFuture. Use a protoc flag to turn it on and off. Not a great option, but possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2800
Run examples without console and dependencies · Issue #2800 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can i use gRPC without some grandle dependencies, and how?
I just want to see how work server and client from https but i can not do it, because i can not find some class-files (import io.grpc.stub.StreamObserver; - for example)
May be is there some description for run examples without consoles?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2801
Netty improperly delays sending SETTINGS ACK · Issue #2801 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in grpc/grpc#9956:
... it appears Java/Netty is doing the wrong thing. encoder.remoteSettings() is called before writeSettingsAck(). encoder.remoteSettings() calls flowController().initialWindowSize() which results in the flow controller writing pending bytes.
Two immediate changes should probably be made: 1) Send the settings ack immediately before processing the settings frame in the decoder. Any failure in processing would probably result in the connection being closed, so this doesn't seem dangerous. 2) Stop triggering writePendingBytes() in the flow controller and instead wait for the flush() like normal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2802
Bump error-prone to v2.0.18 or later · Issue #2802 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There's new checks, and we want to stay up-to-date.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2803
Bump gradle version to v3.4.1 or later · Issue #2803 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
3.4 has much nicer incremental rebuild, able to avoid recompilation when APIs don't change. It also has native library support, which would be nice. For this issue, we probably won't change to use the library support, but we can open a new issue once we are on 3.4.1+.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2804
Cache .m2 on Travis-CI · Issue #2804 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maven verify performance varies widely on Travis, from 20 seconds to over 5 minutes. It seems this is primarily dictated by the download of artifacts. Caching .m2/repository would probably speed that up. We do need to make sure to avoid caching .m2/repository/io/grpc/ (probably by just deleting it before the cache is created).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2808
Inner class unit tests in GrpcServerRuleTest look so weird · Issue #2808 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Should make the inner classes top level classes, and also add @RunWith(Junit4.class)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2813
It might be a mistake returning type of ManagedChannelBuilder<?>. · Issue #2813 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.2
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
when I use grpc-java in scala,
for example
the method forAddress returns ManagedChannelBuilder<?>,
so I have to add asInstanceOf[].
otherwise, i can't call build of a object with Any type .
What did you expect to see?
I think that forAddress might return ManagedChannelBuilder<? extends ManagedChannelBuilder<?>>.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2814
How to terminate a service call in ServerInterceptor.interceptCall · Issue #2814 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What is the correct way to terminate a call to a service's method once ServerInterceptor.interceptCall finds that the request is invalid (ex. the client's authentication fails) and wants to stop proceeding with executing the method and return an error to the client?
Should interceptCall return some special listener? or it should throw some sort of Exception indicating an Unauthenticated access?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2815
Capture more information on error for debugging · Issue #2815 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When an error is propagated to the application, it would be useful to have things like server IP address[1], the timeout of the call (deadline - now), and whether the error was generated on the server.
There is other information that gRPC doesn't have direct knowledge of being useful, like tracing ids. Either Metadata would need to be included in full (doesn't sound great to me, since that could include auth tokens) or we could allow interceptors to cheaply supplement the data.
Note that retries/hedging make "address" a bit more interesting.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2827
ContextStorageOverride unnecessary stacktrace logging · Issue #2827 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
IMO the printStackTrace during init of io.grpc.Context when no ContextStorageOverride class is found is not really adding anything useful and could be removed. (moreover it jumpscares me each time i start my app in intellij :-)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2828
KeepAliveManager is not apply to ConnectionHandler in netty transport · Issue #2828 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
GRPC 1.2.0
What JVM are you using (java -version)?
1.8.0_112
What did you do?
I am try to make KeepAlive work with netty transport just now(grpc-java 1.2.0), and after some function test, i think the KeepAlive feature still not work functionally.
Debugging the code(io.grpc.netty.NettyClientTransport#start):
So, we known the KeepAliveManager only make effective in io.grpc.netty.NettyClientHandler instance. But the code showing the creation of io.grpc.netty.NettyClientHandler always receive a null keepAliveManager.
Probably because the keepAliveManager field is assigning in the end of io.grpc.netty.NettyClientTransport#start() call.
Associated commit: #2729: the commit resolve the problem of NPE(#2726)
cc @lukaszx0 @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2829
Define Context semantics on client-side · Issue #2829 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context's semantics is quite clear on the server-side. For each call:
ServerImpl creates the base Context.
ServerInterceptors can create new Contexts, which can be based on the base Context. The last created Context is what the server application sees.
Server application access the Context from thread-local. And if it initiates outgoing calls, by default they inherit the Context.
For the client-side, currently the Context semantics is:
The current Context when Channel.newCall() is called is the base Context.
ClientInterceptors create new Contexts, which can be based on the base Context. The last created Context is what ClientCallImpl uses
ClientCall.Listener is called under the ClientCallImpl's Context.
This is problematic. If a new call is made from the ClientCall.Listener, it will inherit the previous call's Context. If this chain of calls is unbounded, and every call goes through interceptor(s) that create Context based off the current Context, this will create an unbounded inheritance chain of Contexts. Because Context always keeps a reference to the parent Context, this will lead to memory leak.
Context is designed to work like a stack. The expectation is that a Context (except the background one) should eventually be popped out of the "stack". Infinite pushing without popping, like the case from previous paragraph, should not happen. IMO, this means Context should only be passed in one direction. On the client-side, the direction should be application -> interceptors -> gRPC core. Since ClientCall.Listener is the other direction, it should not be called under the top-most Context, but rather the Context that application sees, which is the pre-interceptors one. This will prevent the unbounded-Context-chain issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2832
Possibly infinite loop · Issue #2832 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have some grpc instance, after several days running, one cpu may running into full load at unperdicate time.
Usually one, and may be then grow to two or more.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
java version "1.8.0_51"
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)
iteQueue.java:139)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2840
tcp connection do not close, ChannelOutboundBuffer and NettyServerHandler still hold memory  · Issue #2840 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_112"
Java(TM) SE Runtime Environment (build 1.8.0_112-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)
What did you do?
I run stress test to hit grpc endpoint a lot and use VisualVM for memory leak detection.
debug message looks fine.
After a while I terminate the test and check tcp connection and memory usage.
What did you see instead?
After I terminate the stress test, I saw those class still hold memory(not releasing any memory after I terminate the test).
I also run the netstat to check the tcp connection.
I notice that even after I terminate the test, the number of tcp connection remained the same, the status are all ESTABLISHED.
What did you expect to see?
expect to see the tcp connection drop after test terminate.
expect to see io.grpc and io.netty class release memory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2841
io.netty.handler.codec.http2.internal.hpack.Decoder removed in netty 4.1.9 Fina · Issue #2841 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.2 / 1.2.0
What JVM are you using (java -version)?
java version "1.8.0_111"
What did you do?
If possible, provide a recipe for reproducing the error.
io.netty.handler.codec.http2.internal.hpack.Decoder been removed in the Netty 4.1.9 fina
What did you expect to see?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2843
Version 1.0.x and >= 1.1.0 are binary incompatible · Issue #2843 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried using google-cloud-spanner which uses 1.0.3 in a project that uses 1.2.0. So gradle resolves this version conflict in favor of 1.2.0. Running the project then fails with a NoSuchMethodError.
Notice how it tries to call NettyChannelBuilder.build() with ManagedChannelImpl as a return type. However, in 1.1.0 the return type changed to ManagedChannel [1] and in Java Byte Code the return type is also part of the method signature.
I also opened an issue at Cloud Spanner googleapis/google-cloud-java#1776 (comment)
I understand that NettyChannelBuilder is marked experimental and thus it's technically fine to break this. Although I am not exactly sure if experimental also includes ABI compatibility.
@ejona86 @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2844
version compatibility: grpc java vs grpc go · Issue #2844 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What's the compatibility of  grpc-java and  grpc-go in term of version?
Suppose that the our service is using grpc-go 1.0.4,  can we upgrade the client to use grpc-java 1.12 without any issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2847
Context in its own package? · Issue #2847 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Although io.grpc.Context is shipped in its own artifact, and non-gRPC users can also depend on it, the package name still causes branding issue (census-instrumentation/opencensus-java/issues/162), and a practical issue with OSGI (#2727). We may consider moving it into its own package and splitting it completely from gRPC.
We have two questions to answer:
What should the new package name be? Probably something starting with com.google, but probably not com.google.common.context because it collides with a Google's proprietary context class.
How to bridge the old Context and Deadline to the new ones.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2848
Delete ResolvedServerInfoGroup and ResolvedServerInfo · Issue #2848 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This should be done after the release that deprecates them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2856
Incorrect ClassLoader (need ability to select/configure) · Issue #2856 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In ManagedChannelProvider there is the function below to determine which classloader to use for loading the channel providers:
Because this is all setup in the static initializers, there is no ability to change the classloader used. When using custom classloading (URLClassLoader for example), I don't want the threads classloader -- I want the classloader that loaded this class (essentially I want the isAndroid() logic when not in an android app).
Not sure what the community's preferred solution would be, but a few options are: offer a configuration parameter to change the selected classloader, don't set the classloader in the static initializer section to allow overriding, expose the ClassLoader as a parameter of the builder so the correct ClassLoader can be passed in.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
1.8.0_51
What did you do?
The Thread's context classloader is always used (non-Android)
What did you expect to see?
Ability to override classloader used for providers
What did you see instead?
ClassLoader is pinned in the static initializers, preventing any override or configuration ability
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2861
Tracking issue for StreamTracer APIs being experimental · Issue #2861 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2862
Don't block for settings frame · Issue #2862 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using gRPC 1.0.5. We server is implemented in Go and we use Java client. We are trying to use the wonderful https://github.com/soheilhy/cmux library to run both the grpc server and grpc gateway server on the same port. The issue is since Java gRPC client blocks until it receives a SETTINGS frame from the server, cmux has to do additional processing which results in very high cpu usage.
soheilhy/cmux#40 (comment)
My question is can Java clients can not block for SETTINGS frame and be more like go clients?
cc: @soheilhy, @sadlil
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2865
Rare race condition in Client · Issue #2865 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While more prominent when using compression, this race occurs without it as well.  The typical race looks something like:
Client starts and RPC
The transport to the server is not yet available, so a DelayedClientTransport is used.
The server handles the RPC and sends back headers and a compressed message.
The client sees there are headers, and begins executing the queued stream callbacks, on the channel executor threads instead of the transport thread
The client sees the Data frame, and tries to decompress it on the network thread.  *This fails since the headers from 4 have not yet been processed.
The stream has already failed, but the queued callback for onHeaders() is finally executed on the app thread.
This is the root cause of #2157.  As mentioned, this isn't just for compression.  ClientInterceptors will see headers after data has been received.   The solution (temporary?) seems to be to move OkHttp to used AbstractClientStream2 in #2821, and then move decompression from ClientCallImpl to the stream.  That will fix the decompression, but not interceptors.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2868
KeepAliveManagerTest should use FakeClock.ScheduledExecutorService · Issue #2868 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current tests in KeepAliveManagerTest are using mocked Future and run scheduled task manually, which is not a correct way to test.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2873
InternalSubChannel doesn't comply with the connectivity state spec · Issue #2873 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When receiving a GOAWAY (transportShutdown() callback), InternalSubChannel unconditionally transitions to IDLE. However, the spec says
READY transitions to TRANSIENT_FAILURE on "any failure encountered while expecting successful communication on established channel."
"Channels that receive a GOAWAY when there are no active or pending RPCs should also switch to IDLE".
InternalSubchannel needs to look at the status passed to transportShutdown():
If it's not OK, according to Rule 1 above, the new state should be TRANSIENT_FAILURE
If it's OK, then it's a GOAWAY.
If the in-use state of the subchannel is false, according to Rule 2 above, the new state should be IDLE.
Otherwise, the spec doesn't say what the new state should be. Apparently it cannot stay in READY. It cannot go to TRANSIENT_FAILURE either because it's a GOAWAY, not an error. This part of the spec should be revisited.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2878
Reset connection by peer  · Issue #2878 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0
What JVM are you using (java -version)?
1.8.0_40
What did you do?
If possible, provide a recipe for reproducing the error.
add log in my web application, and deploy it to production sever.
always get error message as below. we cannot know which/where method throw out.
after a lots of error message throwing out, we can get "out for memory" error message and server is down, need to restart to to recover it.
error message is
Transport failed
What did you expect to see?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2883
Unimplemented channel state API is not documented as such · Issue #2883 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Until #2292 is resolved, getState() and notifyWhenStateChanged() always throw UnsupportedOperationException. The documentation should call out that it isn't implemented, especially since not even LoadBalancer is using the API at this point.
I had thought this was already done, but I couldn't find where.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2884
Dns rr balancing does not refresh after dns change · Issue #2884 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-all 1.2.0
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
Hi. I use grpc RoundRobinLoadBalancerFactory and DnsNameResolverProvider. As well I use docker swarm. When i do replica of my service, I see that dns has second entry of my service, but grpc client to this service does not see it and not balancing. I has networkaddress.cache.ttl=10 in jvm for this service and -Dsun.net.inetaddr.ttl=10. But if I kill all my instances and start it again with two nodes at the same time, then client will see 2 dns entry and rr well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2885
Many TCPIP connectons in established state · Issue #2885 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0 The latest I think.
What JVM are you using (java -version)?
java version "1.8.0_65"
Java(TM) SE Runtime Environment (build 1.8.0_65-b17)
Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)
Linux Fedora 25 client.
Going to server in docker that is GOLANG
What did you do?
On the client I have 9 different types of connections. On 8 of them I reuse the respective  channel for all request (8 different ports/ 8 channels created) Never shutdown. One I do a shutdownNow on the channel after each request, create a new channel for the next request.  The code for the channelBuilder is identical for each except the forAddress/port part.  On all of these there are many requests.  If I stop my client before it terminates and using lsof MANY connections established with the 8 I reuse the channel on. I'm guessing there is one connections per each request.  The one where I shutdown there are none listed
What did you expect to see?
I expected to see 8 at most TCPIP connections established.  I waited for 10 minutes and not one of the connections were dropped.
What did you see instead?
From this link
As said, MANY connections  established  to the same endpoint
All the connections are working just fine sending and receiving back the data as expected.
So the issue here is just why all these connections ? When and how will they get reclaimed ? Do I need to shutdown the channel after each request and create a new one like the one that's not seeing this issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2888
Changing CXXFLAGS and LDFLAGS is ignored due to Gradle daemon · Issue #2888 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Apologies for the length, I've tried to provide as much detail as possible.  I'm trying to natively compile this on an nVidia Jetson TX2 board (aarch64)
What version of gRPC are you using?
What JVM are you using (java -version)?
OpenJDK Runtime Environment (build 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13)
OpenJDK 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
Total time: 43.251 secs
What did you expect to see?
Successful build
What did you see instead?
In short:
despite protobuf being compiled & installed and CXXFLAGS and LDFLAGS being set.
Also tried adding the 4 exports above at the end of my .bashrc file as it seemed to have helped in [this issue] (#1346)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2896
AbstractClientStream2.GetFramer doesn't use statsTraceCtx · Issue #2896 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GetFramer doesn't use the normal MessageFramer, so it should probably call statsTraceCtx and report the request message size and similar.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2898
NettyServerHandlerTest maxConnectionAge tests are flaky · Issue #2898 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen at https. Linux on Travis-CI didn't fail and a re-run on Jenkins passed fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2901
"StatusRuntimeException: INTERNAL: HTTP/2 error code: INTERNAL_ERROR" ,"StatusRuntimeException:UNKNOWN" · Issue #2901 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0, 1.2.0
What JVM are you using (java -version)?
1.8
What did you do?
I am running a gRPC-java server with multiple grpc services defined.
When running multiple stubs which multiple threads share, so multiple rpc calls simultaneously, I am seeing this exception below, the exception is only occasionally appear.
What is benchmark scenario?
my benchmark is a distributed program: one  client to three servers
question:
why the exception is only occasionally appear? Concurrency is too big?
mutiple thread can call the same stub object at the same time?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2905
 First received frame was not SETTINGS. Hex dump for first 5 bytes · Issue #2905 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
openjdk version "1.8.0_111"
OpenJDK Runtime Environment (build 1.8.0_111-8u111-b14-2~bpo8+1-b14)
OpenJDK 64-Bit Server VM (build 25.111-b14, mixed mode)
What did you do?
I ran a grpc server and client.
When do call I see an error
What did you expect to see?
successful call
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2907
Audit/Fix graceful client shutdown in Netty · Issue #2907 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Based on https and the code, it seems that channel.shutdown() when using Netty transport kills open streams.
gracefulClose() calls close() which waits for gracefulShutdownTimeoutMillis. It seems we should either set the grace time to infinity or delay calling close until after all the streams are closed.
We need to investigate why AbstractTransportTest.openStreamPreventsTermination() failed to notice this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2924
ServerCall.getAuthority() is experimental · Issue #2924 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2929
Remove census.proto from grpc-services · Issue #2929 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Once google/instrumentation-proto has a release exposing its protos, or the protos are available via some other released instrumentation package, the copy of census.proto should be removed from this repository.
I've filed census-instrumentation/opencensus-proto#31 to track this on the instrumentation-proto repository.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2931
The Java performance tests are failing at master in Jenkins · Issue #2931 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking at https, for example, the log has multiple instances of
followed by hundreds of megabytes of
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2932
OkHTTP should stop using SSLCertificateSocketFactory · Issue #2932 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The next version of Android will not work with setting ALPN protocols using SSLCertificateSocketFactory.  Instead, the recommended way is to reflectively find setAlpnProtocols on the created socket, and not directly reference SSLCertificateSocketFactory at all.
From my understanding, setting the protocols using this class currently will become an effective no-op, because the protocols will already be set.
@kruton
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2935
cause=io.netty.handler.codec.http2.Http2Exception: Header size exceeded max allowed size (10240) · Issue #2935 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
grpc async call  There really isn't any special options set on the channelbuilder
except usePlaintext it does have that set to true but a the moment not sure why.
The scenario this is running on works for all systems I'v but on these vms.
Ubuntu vm 16.04.
Is there some way to increase that size.
I can't imagine that the packet size would be any different between these system .. it's running the same test.  Is there any other reason this exception might happen?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2936
upgrade netty.tcnative to 2.0.0.Final to overcome collisions · Issue #2936 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0 ( in google-cloud-java )
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
included gcloud-java with rpc into an context that already uses tcnative - spring boot in this case
What did you expect to see?
the application should be able to find and use the native driver
What did you see instead?
An incarnation of the following issue -
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2937
Use CodedInputStream.newInstance(ByteBuffer) for non-segmented messages · Issue #2937 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is to improve the decode performance of small messages (<16 KB) to avoid a message-sized allocation and copy.
Protobuf already has an optimized code path for decoding a direct ByteBuffer. We currently copy to a byte[], but that could be avoided because small messages will commonly be in a single ByteBuffer.
This will require adding a new interface for retrieving the ByteBuffer from the InputStream. I'm uncertain whether the interface should support returning multiple ByteBuffers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2939
GrpcHttp2HeadersDecoder uses netty internal classes and fails with netty 4.1.10 · Issue #2939 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Expected behavior
Due to an endianess bug in netty I have to use the fixed version netty 4.1.10
Unfortunatly GrpcHttp2HeadersDecoder references:
which is gone with netty 4.1.10
Actual behavior
Execution fails with:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2940
Unix Domain Socket: UnsatisfiedLinkError · Issue #2940 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_111"
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
What did you do?
What did you expect to see?
Successful creation of a ManagedChannel on Unix Domain Socket.
What did you see instead?
Throwable is launched:
note: If I use TCP instead, it works:
My netty dependencies are (gradle project):
I'm shading io.netty to io.netty.shadednetty using shadow plugin as I have other netty dependencies in the project.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2942
CallOptions.Key should document that it uses instance equality · Issue #2942 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_45-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Client code wants to add value in CallOptions during grpc call for customized load balancing, similar to:
but as the SubchannelPicker.pickSubchannel(PickSubchannelArgs args) wants to retrieve the value:, but get "defaultValue" instead.
What did you expect to see?
What did you see instead?
Cause
Problem is CallOptions.getOption:
the CallOptions.Key didn't implement hashCode and equals, so even two Key objects with exactly the same values won't match each other.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2951
io.grpc.testing.integration.ProxyTest.smallLatency is flaky · Issue #2951 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a re-appearance of #2176, but that one is so old I feel bad with reopening it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2953
Request streamObserver can still call onNext a million times after stream is closed without being aware of that · Issue #2953 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For client streaming call, once the RPC is established, even server is shutdown, the client can still (mistakenly) keep calling requestStreamObserver.onNext() for a million times, and gRPC lib just silently ignores them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2959
Verify binary header base64 encoding/decoding against grpc spec. · Issue #2959 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The spec says:
Implementations MUST accept padded and un-padded values and should emit un-padded values.
There should be a unit test to verify that's the case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2961
Maven dependency conversion issues · Issue #2961 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
1.8.0_121
What did you do?
mvn compile
If possible, provide a recipe for reproducing the error.
Have the following dependencies in Maven:
Looks like artifact com.google.api.grpc:grpc-google-common-protos has a dependency
on grpc-all:1.0.1 which causes a convergence issue if you have the above dependencies and you use the dependency enforcer plugin in Maven.
The workaround is to add grpc-all as an exclusion for that dependency which is always a bit scary.
What did you expect to see?
No dependency conversion issues.
What did you see instead?
Dependency conversion failure in Maven.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2962
 Channel closed while performing protocol negotiation · Issue #2962 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_131"
What did you do?
If possible, provide a recipe for reproducing the error.
If I do:
and then,
Gradle is no longer run automatically. Make sure to run
Running test empty_unary
Shutting down
What did you expect to see?
What did you see instead?
The error:
Gradle is no longer run automatically. Make sure to run
Running test empty_unary
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2971
Why is java grpc so slow · Issue #2971 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
latest java gRPC
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
I created a simple service which does oracle database query.  The client and server code is based on the HelloWorld example. I am running client and server on the same windows pc. The Oracle database is running on a server.
What did you expect to see?
On server side, the database query is 51ms, which is good.  On client side, I am getting execution time 400 ms.
What did you see instead?
The execution time from client side is very slow.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2972
Graceful shutdown gRPC in Tomcat · Issue #2972 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My company uses WAR as the standard deployment mechanism so we use Tomcat deploying and undeploying application.
Since I provider gRPC server in Tomcat like below
@WebListener
and it occur Tomcat memory leak warnning
so what is right way to start and graceful shutdown gRPC in Tomcat ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2976
FutureStub hangs when wrong netty version is used · Issue #2976 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
netty4.version
What did you do?
If possible, provide a recipe for reproducing the error.
Accidentally use netty-codec-http2 4.1.9.Final in your pom
Create a future stub
Call stub.someOperation().get()
What did you expect to see?
The call should fail from the underlying ClassNotFoundException
What did you see instead?
A log message is printed to the console indicating the ClassNotFoundException
The call to .get() blocks indefinitely because the underlying future never returns
If a timeout is used when calling .get(), the request always times out
This problem was especially hard to diagnose because our logger is configured to exclude log messages from libraries (legacy code), so the ClassNotFoundException was never surfaced.
Findings
ChannelExecutor.drain() (line 89) eats all exceptions thrown when processing the outbound task queue when DelayedClientTransport switches from DelayedStream to NettyClientStream in DelayedClientTransport.newStream().
GrpcHttp2HeadersDecoder.<init> fails with a ClassNotFoundException when trying to load io.netty.handler.codec.http2.internal.hpack.Decoder.
Since the stream switch is itself is the task that fails, DelayedClientTransport buffers outbound tasks indefinitely, causing the request to hang.
Possible Mitigations
Propagate exceptions from ChannelExecutor.drain() in a "CompositeException" that aggregates all exceptions encountered. This will cause the client to explode, rather than logging and hoping someone is watching.
Fail conspicuously when starting gRPC with an incompatible netty version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2977
Add package descriptions · Issue #2977 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Multiple package descriptions are missing on http
Need to be filled up for release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2981
grpc not compatible netty newer than 4.1.8.Final · Issue #2981 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-b12)
What did you do?
If possible, provide a recipe for reproducing the error.
set gradle dependencis:
run the grpc service, and send a request to the server
What did you expect to see?
What did you see instead?
rpc calls successfully without the exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2982
Fail to to enable server-side keepAlive on 1.3.0 RELEASE · Issue #2982 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
GRPC 1.3.0
What JVM are you using (java -version)?
1.8.0_112
What did you do?
Try to enable server-side keepAlive(added in gprc-java 1.3) but the feature didn't work properly.
After setting server-side keepAlive to 180s and keepAliveTimeout to 30s. what i expect is the server will sending a keepAlive to client if the connection is idle(didn't sent any data during 180s). however. i did't see such ping packet on network.
Debugging the code(io.grpc.internal.KeepAliveManager), it seems the onTransportActive/onTransportIdle methods didn't be called by NettyServerHandler.  Unlike the NettyClientHandler, the keepAliveManager can't be triggered by stream's created/remove.
Only onDataReceived is called if data received by NettyServerHandler.
So, simply if the client didn't sent any data, the server wouldn't sent back any ping.
In this case, another way to enable server-side KeepAlive is set keepAliveDuringTransportIdle(permitKeepAliveWithoutCalls) to true, so when the io.grpc.internal.KeepAliveManager#onTransportStarted is called, it will schedule a ping future immediately.
However, the call of io.grpc.internal.KeepAliveManager#onTransportStarted didn't make effective too!
the only caller on server is io.grpc.netty.NettyServerHandler#handleProtocolNegotiationCompleted, which didn't invoke onTransportStarted because the keepAliveManager has not been initialized yet(the keepAliveManager always null during this method called).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2983
sending data using gRPC  · Issue #2983 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
I tried sending data using gRPC via proxy.
I'm doing this inside a VPN and the proxy is the only way to send data to the outside world
What did you expect to see?
The message shouldn't reached the server side
What did you see instead?
A SSLHandshakeException during the protocol negotiation.
This was the error I got:
javax.net.ssl.SSLHandshakeException: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE
It was caught in the ProtocolNegotiators class under method userEventTriggered method.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2984
Scala: Context propagation and async interceptors · Issue #2984 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to pass some values from interceptor to rpc handler. I've read that this can be done with contexts. But the problem is, that my interceptor is asynchronous, i.e. it "waits" for the future to resolve before calling next listener. The context is lost in this situation. My code is in Scala:
The problem is that BOTID_CONTEXT_KEY.get is null in RPC handler, even when the future was resolved and the not-null value was set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2985
grpc-all brings in both protobuf-java and protobuf-lite · Issue #2985 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-protobuf depends on protobuf-java and grpc-protobuf-lite depends on protobuf-lite. Although grpc-protobuf depends on grpc-protobuf-lite and excludes the protobuf-lite dependency, that does nothing for grpc-all which depends directly on both.
We should probably remove the explicit dependency of grpc-protobuf-lite from grpc-all, or add in an exclusion for protobuf-lite.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2986
grpc-cli return Received an error when querying services endpoint. · Issue #2986 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

add ProtoReflectionService after my service
return
Received an error when querying services endpoint.
io.grpc.examples.helloworld.HelloWorldServer is the same problem too
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2989
Cannot upgrade to Protobuf 3.3.0 · Issue #2989 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of protocolbuffers/protobuf@c2b3b3e Protobuf is depending on Guava 20, while gRPC is stuck at 19.0 for compatibility.
@xfxyjwf and @ejona86 fyi
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2993
KeepAliveManager IllegalArgumentException scheduling ping · Issue #2993 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0 Release
What JVM are you using (java -version)?
java version "1.8.0_45"
I'm trying out the client-based keepalives and KeepAliveManager attempts to schedule delayed pings in the past, resulting in an IllegalArgument: delay: -42540410 (expected: >= 0) on line 89.  This could be fixed with a Math.max(X,0) wrapped around the call, but I'm guessing there's something else going on.
FWIW, I've configure the client with an idle timeout of 30s and a keepalive of 90s. The server is set with a permitted keepalive time of 1m.  The RPC channel is basically idle, I'm using a long-running, streaming RPC call to await some notifications.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2994
[Question] How to disable some logs? · Issue #2994 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
Hi,
How can I disable logging such as the following?
Many thanks,
Marc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2995
GrpcServerRule doesn't support interceptors · Issue #2995 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.2.0
We have interceptors which catch our internal exceptions and serialize them as GRPC trailers; these are then deserialized on the client and used as the cause on the Status.
There isn't anyway to add interceptors when using the GRPCServerRule and we can't see anyway to set the cause of the Status passed to onError by GRPC.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2996
Running gRPC with Tomcat is problematic · Issue #2996 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran into this issue trying to use the Google Cloud PubSub API from a Spring Boot app, using Tomcat by default. The issue is explained here.
Jetty ALPN/NPN has not been properly configured
A workaround is basically to use Jetty instead of Tomcat. However, ideally this should work with Tomcat too.
After reading around a bit, I tried pulling in the netty-tcnative-boringssl-static dependency, and org.eclipse.jetty.npn.npn-api since the code appears to be checking for a org.eclipse.jetty.npn.NextProtoNego class in the classpath, to no avail.
What can be done to make this work with Tomcat as well?
What version of gRPC are you using?
What JVM are you using (java -version)?
1.8.0_121
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2999
Any plan upgrade to OkHttp 3? · Issue #2999 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As title.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3005
ConnectivityStateInfo never update when using RoundRobinLoadBalancerFactory · Issue #3005 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
integrate grpc with spring-cloud-eureka
What did you expect to see?
I have done it with grpc 1.0.0 and spring-boot 1.5.2.RELEASE.
everything is ok.
What did you see instead?
But when I try to update grpc to 1.2.0. client can not connect to server.
Then I found the cause.  In class RoundRobinLoadBalancerFactory, subchannel is initialized as IDLE and never updated.
But when client try to connect server, method filterNonFailingSubchannels will retrieve channels of which state is READY.  
How can I trigger the updating of subchannel's state?
to reproduce my issue.
install this project to integrate grpc and spring-cloud-eureka.
Thanks a lot.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3007
Netty caused "onStreamAllocated was not called, but it seems the stream is active" · Issue #3007 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reported by https
Seen in grpc 1.3.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3010
java.lang.NoClassDefFoundError: io.grpc.ManagedChannelBuilder · Issue #3010 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
v1.3.0
What JVM are you using (java -version)?
1.8.0_45
What did you do?
I created a library project that sends data to server over GPRC. I tested it as a module dependency on a sample project and it is working fine. When I take the aar file and add it as a dependency on apps, the app is crashing.
What did you expect to see?
The app should run without crashing as it runs when I add it as a normal module dependency.
What did you see instead?
I get a crash with trace
My library project gradle file looks like below
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3011
toString not include the field which type is map? · Issue #3011 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in my java code, I had put map into mapValue,
but when i call toString(), the field mapValue is excluded.
And I print toString, stringValue return 
these form is not human readable
Have one method can log all message in human readable form
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3012
how to build grpc-java for mips64el  · Issue #3012 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When i build bazel, it depends grpc-java-plugin. But i build grpd-java git source code get error,
Could you give me some ideas for building it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3013
SECURITY.md references non-existing ServerCall.SSL_SESSION_KEY · Issue #3013 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Security.md file refers in Section "Mutual TLS" to ServerCall.SSL_SESSION_KEY to get a handle to the SSLSession in use.
This constant does neither exist in the current Master (commit 5dc8a12 at the time of writing), nor in
the 1.3.0 release.
To circumvent, I iterated over all keys and
does the trick, but having a proper constant would be nicer and stable. In addition,
in the very same session could / should be fixed to
with kind regards,
daniel heldt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3017
Duplicate headers causes c-core failure · Issue #3017 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
1.8.0_121
What did you do?
If possible, provide a recipe for reproducing the error.
I made a server interceptor as follows:
What did you expect to see?
A caller of this service to get a response that has been proxied through to a different backend target.
What did you see instead?
This works in Java, but not in c-core from the client side.  As a result of forwarding the proxy target response headers, there ends up being 2 entries for "content-type"  Java clients are okay with this, c based clients are not.  I'm not sure who is "right" here as the spec is ambiguous as to the desired behavior if there are multiple headers for the same key(and in this case, their values are identical as well).  My fix for now is to simply send a new Metadata() rather than forwarding headers, but this might lose some custom headers from the proxy target.  I also considered doing a headers.removeAll(GrpcUtil.CONTENT_TYPE/ENCODING_TYPE/ETC) but since those are in the internal package I didn't.  I'm wondering what your thoughts are on how I'm doing this.  Maybe there's even a trick where I could pull this off at a pure bytestream level so my proxy isn't parsing the bytes at all?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3020
[Question] Catch exceptionCaught() event was fired, and it reached at the tail of the pipeline · Issue #3020 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Connect to a Unix domain socket that is not existing anymore with the following:
Then those WARN will be produced in the output:
It usually means the last handler in the pipeline did not handle the exception.
How can we handle those exceptions or make them silent?
Many thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3023
Excessive Logging? · Issue #3023 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
Set a deadline in an interceptor higher than context deadline.
What did you expect to see?
The lower of the two enforced.
What did you see instead?
The lower of the two enforced, with a lot of logging :)
Is this intentional to log at INFO, and if so, should I just change my logging config to silence this class?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3025
Stop telling people Jetty ALPN has not been configured · Issue #3025 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If both OpenSsl (tcnative) and Jetty ALPN are unavailable then we end up failing with "Jetty ALPN/NPN has not been properly configured". We should tell them to configure tcnative, and not encourage the use of Jetty ALPN.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3027
Grpc.Core.RpcException method is unimplemented with C# client and Java Server · Issue #3027 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using grpc 1.3.0 on both Java(1.8) server and C# client.
I implemented a simple service using protobuf and grpc-gen. The C# client and Java Server both have the same .proto file. Using java client everything works fine but when using C# I get the following error:
Grpc.Core.RpcException Status(StatusCode=Unimplemented, Detail="Method tourism.RemoteService/Login is unimplemented")
Anyway the server receives the request, logs the information that was sent in the request but then throws an exception, probably because the client stopped running.
I've tried mulptiple projects and changed the service , .proto file, the port.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3032
OkHttp is incompatible with newer C-core binaries · Issue #3032 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported by grpc/grpc#11258. This is caused by grpc/proposal#19 and a bug in the OkHttp transport that doesn't ignore unknown settings frames (as required by the HTTP/2 spec).
It's unclear how this wasn't caught in the integration tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3033
Too Many Logs  · Issue #3033 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
Not sure.
What did you expect to see?
No logs.
What did you see instead.
Unfortunately, I have had no success. Has anyone else seen this issue or know of a solution?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3034
SerializingExecutorBenchmark fails to run · Issue #3034 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It appears it was broken on the initial commit a4d698f. It's not quite obvious to me what executor was intended to be used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3035
hbase-client-1.3.1is protobuf-2.5   conflict with  grpc-1.2.0 is protobuf-3.2  ，so how can  I use this two package in one procket · Issue #3035 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
my pom file:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3041
Netty does not support TLS on Android · Issue #3041 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Currently i'm using gRPC 1.3.0
What JVM are you using (java -version)?
Using openjdk 1.8.0, Android version 25
What did you do?
If possible, provide a recipe for reproducing the error.
I'm trying to create a secured server on an android device. To do so i created the following method:
The thing is, when I compile the project it returns an error "java.lang.IllegalArgumentException: Jetty ALPN/NPN has not been properly configured."
I tried to insert a compile dependencie on gradle (  compile 'org.mortbay.jetty.alpn:alpn-boot:8.1.11.v20170118' ) but when I try to run the project it gives the error:
Error converting bytecode to dex: Cause: Dex cannot parse version 52 byte code. This is caused by library dependencies that have been compiled using Java 8 or above. If you are using the 'java' gradle plugin in a library submodule add targetCompatibility = '1.7' sourceCompatibility = '1.7' to that submodule's build.gradle file. ...while parsing org/eclipse/jetty/alpn/ALPN.class
What did you expect to see?
No error.
What did you see instead?
java.lang.IllegalArgumentException: Jetty ALPN/NPN has not been properly configured.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3046
OkHttp exception logging level too high? · Issue #3046 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
Normal usage
What did you expect to see?
No logs
What did you see instead?
It looks like the socket is already dead and the close call here throws as a result 
It isn't clear to me that this needs to be a WARNING since the exception is coming from us trying to close a closed socket.  Maybe other failure modes here should be a warning, but should we maybe inspect the SocketException type specifically and log at FINE if the message is "Socket closed" ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3049
mvn build problem · Issue #3049 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
I use mvn to build my project and protobuf-mavne-plugin to generate code as the grpc-java/READMME.md guide. The config is shown below. I show all the pom files
in next comment.
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
I want to creat a new project in Opendaylight which will use gRPC/protobuf. I creat a project framework.
Becasue the proto file which I needed haven't finished, so I copy the example/helloworld.proto and HelloWorldClient.java to my project, and then I try to build. But, it failed.
What did you expect to see?
What's the problem below? How to solve?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



3054
Status.withCause() is not effective · Issue #3054 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_51"
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)
What did you do?
In server interceptor, I close ServerCall and set a Status with Throwable instance:
In client, I use Status status = Status.fromThrowable(e); to get the Status returned from server.
status.getCode() and status.getDescription() can get the correct value , but status.getCause() is always null.
What did you expect to see?
In client, I can get the correct Throwable instance rather than null by status.getCause()
What did you see instead? staus.getCause() is always null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3056
grpc-netty:jar:1.3.0 is using a buggy netty package? · Issue #3056 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
why client is using http2 when i want it to use socket to connect unix domain?
The above is how I setup my client to connect to the rpc server based-on unix domain.
But I got the following exception.
I can I configure my client to connect to the unix domain?
Update 1
After some digging, I found that at this line:
which is in package:
There PriorityQueue is an interface which cannot be instantiated.
This might be a netty bug?
Update 2
it is io.grpc:grpc-netty:jar:1.3.0 that is using the buggy netty package.
Update 3
This bug is introduced in this commit:
and it was fixed in this commit:
which is supposed to be in 4.1.11.Final.
I donot know how to check whether that commit is in that release, it needs to confirm.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3057
what is the best practice to handle such kind of traffic? · Issue #3057 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0
What JVM are you using (java -version)?
JDK1.7.0_79
What did you do?
when I run top, I found about 100 thread are running(or waiting) in our GRPC server.
What did you expect to see?
I am not sure this is normal. Will this cause too much context switch?
What did you see instead?
As above.
More details about our application
We build a queue service with gRPC. A bout 1000 nodes(VM) are sending request to our gRPC server with "while(true)" and only several of them could get the real traffic.
We choose the default server, i.e. netty to serve that kind of traffic. So, what is the proper config or coding we should use?
Another question is that we shared the "ManagedChannel" object in about 200 nodes(they may use this object concurrently) and build the stub in each call. Is this the right way to use?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3059
ServerStreamListenerImpl closing ServerStream in unsafe way · Issue #3059 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is not an actual problem because of the way stubs are implemented today, but the code can potentially allow the below to happen:
ServerStreamListenerImpl is executing in the network thread (in the case of the direct executor) or in a application thread (via JumpToApplicationThreadServerStreamListener in the case of an application thread pool). ServerStreamListenerImpl.messageRead can detect an inconsistent gRPC protocol state, and close the ServerStream. This is a problem because the user application responsible for sending data (a different application thread from the JumpToApplicationThreadServerStreamListener) can be in the middle of working with the stream.
A possible fix is to treat this particular invalid gRPC protocol state as a special case, because for clientSendsOne methods, we can require the client to halfClose before we trigger the application code. This allows us to detect the problem in the stub before the application gets triggered, and we avoid any synchronization concerns. We should investigate further into other inconsistent states we want to detect, and make sure this strategy of moving it to the stub also works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3061
OverrideAuthorityNameResolverFactory fails to forward NameResolver.refresh() · Issue #3061 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems we should create a ForwardingNameResolver and use it in OverrideAuthorityNameResolverFactory. Let's keep the new forwarding class internal for now.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3077
grpc bundle · Issue #3077 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
I use mvn to build my project and protobuf-mavne-plugin to generate code as the grpc-java/READMME.md guide. The config is shown below.
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?  (Sorry for my poor English.)
I want to creat a new project in Opendaylight which will use gRPC/protobuf. The environment is apache/karaf, but these dependencies(grpc-netty, grpc-protobuf, grpc-stub) are only ordinary jar packages, I write these dependencies in my bundle pom file, when running it will give a note "jar is not a bundle". So I try to wrap these jar packages in a bundle,.
I use maven-bundle-plugin according to the guide.
Unfortunately, when running, it always give an error as below. After I  add  dependency which is about this package, it will give the same error but with another package name. For example errorprone,instrumentation,bootstrap, protobuf-java-util, netty and etc. There are so many dependencies, perhaps infinity, I think when I add a new dependency named A in pom file,  A's denpendecy will also need to be added.
could not be resolved. Reason: Missing Constraint: Import-Package: io.netty.buffer; version="[4.1.0,5.0.0)"
What did you expect to see?
How to slove this problem?Who can help me? How use grpc/protobuf in apache karaf?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3080
Memory leak when using Jetty ALPN SSL provider · Issue #3080 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-1-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
We have observed a memory leak when using the Jetty ALPN SSL provider. This occurs when using a name resolver that returns multiple results, one of which fails to connect (in practice this was because of faulty firewall rules, but for the sake of testing it can be reproduced by just using a bad port number). I believe the managed channel will keep trying to open up a subchannel, but the callbacks in the ALPN.objects map aren't getting cleared.
I've created a minimal reproducer for this here: https
When left running overnight, the size of the map grew to over 2300 objects (since there's only ever one actual connection in this test, that's pretty clearly an issue).
This may be a bug in the underlying netty channel rather than gRPC's managed channel where it's not properly cleaning up its ALPN callback when this type of error occurs, but I didn't dig deep enough into the issue to be able to tell.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3083
Add unit tests to verify reads and writes are ignored after ServerStream#close  · Issue #3083 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After ServerStream#close is called, any attempts to read from or write to the server stream should be silently ignored. Add unit tests to AbstractTransportTest to enforce this behavior.
(See also #3068)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3084
Potential deadlock due to calling callbacks while holding a lock · Issue #3084 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
InProcessClientStream and InProcessServerStream are synchronized on their own. InProcessClientStream.serverStreamListener is called under synchronized (InProcessClientStream.this), and vice versa.
If the application tries to call methods on ClientCall or ServerCall from within the callbacks (assuming that it has already taken care of the thread-safety of the method calls on "Call" objects), a deadlock is possible when direct executor is used. For example:
Thread1
Thread2
As locks are acquired in reverse orders from two threads, a deadlock is possible.
The fundamental issue is that we should not call into application code while holding a lock, because we don't know what application code can do thus we can't control the order of subsequent locking.
OkHttp has the same issue, because OkHttpClientStream.transportDataReceived(), which will call into application code, is called under lock.
We could use ChannelExecutor (maybe renamed) to prevent calling into callbacks while holding a lock.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3085
Allow choosing the ManagedChannelProvider based on the NameResolver · Issue #3085 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ManagedChannelBuilder.forTarget knows the scheme of the target, but doesn't pass it to the ManagedChannelProvider.  This makes it hard for the service loader to pick a proper Provider, because it may pick incorrectly.
Consider passing the scheme to the MCP, so that it can decide whether or not its available.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3090
DNS creates unbounded number of grpc-default-executor threads, and can't be overriden · Issue #3090 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
1.8.0_101
What did you do?
I'm running about fifty processes that use grpc to communicate with each other. The workload involves events that trigger bursts of all-to-all messaging between the processes, and thereby moments of high load. After each instance of this event, I see 5-10 grpc-default-executor threads being created per process.
I have supplied FixedThreadPools through executor() for both the server and client channels.
Why are grpc-defaut-executor threads showing up despite overriding executor()? Is this expected behavior?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3095
How to cancel a GRPC Server streaming call · Issue #3095 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I made a Call to server. The server streams. I want to cancel the call from client.
How to cancel? No Method to cancel a call.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3097
No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact · Issue #3097 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
I want to creat a gRPC client in my project, but it failed and throw an exception as below.
Status: Failure
Exception: 
my grpc and netty version config is shown as below.
What did you expect to see?
Who can help me to solve this probelm?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3105
Remove internal-only methods from testing package · Issue #3105 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As mentioned in comments in #3099, there are some issues and limitation to the current unit test tools:
It's hard to test a user-defined generic interceptor.
People are abusing NoopClientCall, using it as an alternative of mock(ClientCall.class), which is as bad as a mock.
TestMethodDescriptors.noopMarshaller does not gain much benefit. It violates the interface's contract, it's equivalent to a mock(Marshaller.class), and it does not work in InProcess transport or interop test.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3117
Tracking issue for ServerBuilder.intercept() being experimental · Issue #3117 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3120
StatusRuntimeException: INTERNAL: Received headers twice · Issue #3120 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
io.grpc:grpc-netty:1.4.0
What JVM are you using (java -version)?
java version "1.8.0_66"
Java(TM) SE Runtime Environment (build 1.8.0_66-b17)
What did you do?
Setting up a simple streaming test POC using dummy data. With the following rpc definition.
What did you expect to see?
Expecting to stream back a list of responses. To my test client .
What did you see instead?
The server seems to respond fine however the client complains about duplicate headers. With the following stack trace when run without warming up. After several requests it eventually goes away.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3123
Is grpc-java still 1.6 Compatibility  · Issue #3123 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I found out in https
But in GRPC quick-start website, http, it required for version 7 or higher
Which one is right? It is different because of runtime and compile-time?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3124
Update ClientCall and InProcessServer javadoc wrt mocking · Issue #3124 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The @DoNotMock annotation should really refer to InProcessServerBuilder instead of InProcessTransport, and InProcessServer should have a good example in its javadoc.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3125
Add CI testing for Bazel · Issue #3125 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In #2975 we got Bazel support. We should have continuous testing with Bazel (per-PR would be nice, but at least on master).
Kokoro initially seems the easiest place for this, but that will be hard for an external contributor to do, since Kokoro as-of-yet still requires a Googler to do some operations. If we can get Bazel working on Travis-CI without slowing it down insanely, that could be an alternative. Maybe only build it on Linux, or use build matrix in some way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3126
Channel state incorrect when creating LB · Issue #3126 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(I've not confirmed all this behavior; some of what I say here could be wrong.)
The time during which the LoadBalancer is waiting for the initial set of addresses from the NameResolver should be CONNECTING. Right now it's likely to be considered IDLE.
Also, once the LB receives the addresses, the Subchannels need to begin connecting immediately (unclear if this is LB's job of Subchannel's). This happens today because the LB changes its picker and we drain the DelayedClientTransport, but there is a moment when the Subchannel's state is IDLE and so the LB's state will likely be IDLE.
I'll also note that exitIdleMode() does not exit IDLE (it does exit idle mode, FWIW), since only the NameResolver and LoadBalancer to be created, but the InternalSubchannel will be IDLE because the picker was never called to get the transport and so obtainActiveTransport was not called and so there won't be connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3127
maven's grpc plugin is unable to resolve google.protobuf.Empty · Issue #3127 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
java version "1.8.0_111"
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
protoc version
What did you do?
mvn clean compile
What did you expect to see?
BUILD SUCCESS
What did you see instead?
I'm I able to resolve it or I have to define my own Empty message ?
Note that the google.api.http type is resolved successfully.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3128
Can I exclude proto files under protobuf-java.jar when shading jar · Issue #3128 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can I exclude those file when shading jar?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3132
Can I create client Channel from java Socket? · Issue #3132 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a way to create the ManagedChannel from an existing Socket object instead of calling ManagedChannelBuilder.forAddress(host, port)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3134
Exception occours if client sends reset frame while the server is sending headers · Issue #3134 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when I use grpc-go as the client and use gprc-java as the server to build a project, if the client sents a reset frame to the server while the server is sending headers, exception will occours(netty version is 4.1.8.final),
when the server receives reset frame  it will remove the stream from the streamMap, but  it will create the stream when it writes headers if it finds the stream is null。
here the netty will check whether the streamId is even, but the streamId from upstream is always odd.So is there any method to resolve this problem?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3141
No functional channel service provider found after shading io.grpc  · Issue #3141 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4
What JVM are you using (java -version)?
1.8
What did you do?
I have a code base that relies on Guava 14.0 and I would also like to use gRPC in my project.
gRPC needs Guava 19.0, which is not compatible with Guava 14.0.
Following some instructions online https:, I tried to shade/relocate gRPC library using the following pom.xml file.
I manually rename affected classed in the files that protobuf generates. The project builds fine, but when I ran it, I got the following error msg:
As shown in the pom.xml, those dependencies have been added.
If possible, provide a recipe for reproducing the error.
What did you expect to see?
expect it to run without exceptions
What did you see instead?
The project builds fine, but when I ran it, I got the following error msg:
As shown in the pom.xml, those dependencies have been added.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3142
Java performance benchmarks dirty shutdown · Issue #3142 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In most of scenarios, the java qps_workers don't seem to shutdown cleanly:
The log also has occasional  [GC (Allocation Failure)] messages:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3148
using protoc 3.3.0 generate wrong parseMethod？ · Issue #3148 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc 1.4.0
using protoc generate version 3.2.0
using protoc generate version 3.3.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3149
proto message using map NoSuchMethodError · Issue #3149 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
it seems invoke  CodedOutputStream.class in grpc-protobuf-lite
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


3152
proto-google-common-protos is built with Java 1.7 · Issue #3152 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tracking issue to follow-up on https. gRPC's status proto, and soon/now the example directory's error details proto (#3151), come from com.google.api.grpc:proto-google-common-protos, which is built with Java 1.7. My understanding is that this is fine as long as the proto-google-common-protos jar is bytecode compatible with Java 1.6, but this should be investigated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3162
GrpcServerRule with directExecutor creates extra thread during teardown · Issue #3162 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3171
I try to connect to server gRPC with socket NIO but server not response. · Issue #3171 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to connect to server gRPC with socket NIO but server not response.
When client gRPC request to socket like that;
I am not sure about it. Please help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3173
Create @GrpcClass annotation processor hook for generated source files. · Issue #3173 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To write an annotation processor that further augments the generated source from the grpc protoc plugin is a little difficult.
Currently, I process @Generated annotations and search for value.
As an external example, looking at the new grpc-dagger in 2.11 (), the additional dagger code generation is triggered off of an annotation applied to the implementing class. It would be nice to have all the code generation based off of the gprc classes.  Right now it feels like a two step process.  Add the proto, generate the grpc stub, implement the stub, add the processor annotation, compile again for the additional code.
WDYT?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3175
com_google_protobuf() and com_google_protobuf_java() are identical · Issue #3175 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If this was intended, documentation should be added. Otherwise one of them should be removed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3176
Enable Stetho for Android by exposing OkHttpClient · Issue #3176 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
Android's Java
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
Can access the underlying OkHttpClient
What did you see instead?
Can't access the underlying OkHttpClient
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3186
java.lang.ClassNotFoundException when rebuild my connector · Issue #3186 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi. I make grpc libs for project like connector. It contains server and client realizations. When I rebuild my jar lib, and restart my service with new jar, but other service keep old jar I see:
I use java 1.8_131 and grpc 1.4.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3195
Implement compression interop tests · Issue #3195 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are four compression interop tests defined in interop-test-descriptions.md but not implemented for Java:
These should be implemented and enabled in run_interop_tests.py.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3200
wired build error in a grpc and protobuf project and the build tool is Basel · Issue #3200 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
bazel build failed after we used maxInboundMessageSize(max) used in our project.
What did you expect to see?
successfully built since this API was brought since 1.1.0
What did you see instead?
bazel build failed after we used maxInboundMessageSize(max) used in our project.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3201
ClientCall.isReady() is true after ClientCall.halfClose() · Issue #3201 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have code like this for a client streaming call:
I found call.halfClose() to be called more than once (and thus crash). I would have expected call.isReady() to be false after call.halfClose() was called since after half-closing, we certainly can't send any new messages.
Thoughts?
P.S: I am using this API, cause I need flow control and the CallStreamObserver is marked experimental.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3207
Data race in TestServiceImpl · Issue #3207 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3240
ClientStreamTracer instances are threadsafe, but mocks of it aren't · Issue #3240 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In AbstractInteropTest,  instances of ClientStreamTracer are created using spy.  These instances are not thread safe and cause the race detector to complain about it.
ClientStreamTracer and the other stream tracers should probably be marked DoNotMock because the mocks will not be able to fulfill the API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3244
ChannelExecutor is not threadsafe · Issue #3244 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found with TSAN:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3245
"gradlew installDist" gives error No tool chain is available to build for platform 'x86_64': · Issue #3245 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm following https
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
When I run $ ./gradlew installDist on my Windows 10 x64, it throws exception
FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':grpc-compiler:compileJava_pluginExecutableJava_pluginCpp'.
No tool chain is available to build for platform 'x86_64':
But I did install Visual Studio 2017 Preview.
How to fix the issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3246
Android ClientInterceptor not working to add metadata ? · Issue #3246 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0 on android .
What JVM are you using (java -version)?
java 8
What did you do?
If possible, provide a recipe for reproducing the error.
I am trying to add a custom header to my grpc call using metadata inside ClientInterceptor. I am unable to send as explained here ,
What did you expect to see?
I am expecting server to recognize this parameter and send extra data items.
What did you see instead?
When I use okhttp3 alone and send this as header "Grpc-Match-Metadata", "match.items" with requestbody. i receive the extra data as I expect . But am unable to get any extra items  in grpc call .
I might be doing some thing wrong . I appreciate if some one could point to it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3248
Context: alternative data structure · Issue #3248 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now Context uses a linked list of mutations for implementing its mapping structure. This is serving us reasonably well as it has low mutation cost and is simple to implement. However, it may be using a noticeable amount of CPU time[1] and it is fairly easy to accidentally create very long chains when using async APIs (as discussed in #1926). The main thing we'd want from an alternative data structure is to scale in terms of number of elements instead of number of mutations.
For fun, I investigated binary trees, b-trees, b+trees, and hash trees as possible alternative structures. An order 3 b+tree and HAMT both look pretty reasonable in terms of simplicity (~200 lines) and allocation size per mutation. I think I like the HAMT most as I found it to have fewer/easier cases to consider.
There's no urgency to this, or very much evidence that it is necessary. But we've been discussing it some, so wanted a place to discuss and report some alternatives.
It's unclear whether this is Context's fault. There was a user that was always adding 4 keys, even though only 1 was changed. The user was cleaned up, and while a rough view of the data would seem to imply this improved the performance, there's a lot of guesswork involved. We really need more data of typical Context chain lengths in order to produce a useful benchmark and to help determine per-call costs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3253
Logging all messages using ClientInterceptor · Issue #3253 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_91"
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)
What did you do?
I'm trying to use interceptor to log all messages sent and received from a client.
The implementation of the ClientInterceptor looks like this
The first RPC i request after creating the channel is SayHello from the following service definition:
What did you expect to see?
When executing the SayHello RPC, I expect to see two messages in the log, one with the request message sent and one with the response message received.
What did you see instead?
I only see the request message, it seems that the execution of the interceptor thread hangs and the response message is never logged/processed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3256
Passing CallOptions to ClientStreamTracer.newClientStreamTracer · Issue #3256 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Any thoughts on passing the CallOptions into ClientStreamTracer.newClientStreamTracer?  We have an interceptor chain with roughly 10 interceptors.  The first interceptor sets a MetricsContext and our internal implementation of ClientStreamTracer.Factory on the CallOptions.  Each subsequent interceptor may add tags to the MetricsContext.  MetricsContext is hierarchical so we can have sub contexts for things like retries and hedged requests.  We'd need access the MetricsContext from our ClientStreamTracer implementation.  The contract would look something like,
public abstract ClientStreamTracer newClientStreamTracer(CallOptions callOptions, Metadata headers);
Alternatively, we could track our MetricsContext as described above but only specify the ClientStreamTracer.Factory in the last interceptor.  I'm not sure this approach will work long term as it sounds like your guys are leaning towards setting the ClientStreamTracer.Factory on the channel as opposed to the CallOptions (which I like as it would be more consistent with how things are done on the server).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3258
Implement flush coalescing in OkHttp · Issue #3258 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OkHttpClientTransport currently forces the connection to use TCP_NODELAY: https
For my use case (and, I would argue, other Android "next billion users" use cases) prioritizing low resource usage over performance seems to make more sense, so I would like to see this option to be configurable. I agree that enabling TCP_NODELAY seems the better default in general: #256
In my case I have a good number of low-throughput streaming RPCs that will stay open until the connection is closed. Speed and latency are secondary, low resource usage and reliability are important. Most of the streaming RPCs are primarily intended to let the server stream any changes in system state. For my Android "next billion users" use case I expect the connection to break fairly frequently, at which point the client will re-establish the streaming RPCs, so that it can catch up with the server, and the server can resume streaming any changes in system state. Consequently the first thing that will happen upon reconnect is all the streaming RPCs piping their header information down the new connection. With TCP_NODELAY enabled I expect this to mean several packets PER STREAMING RPC. Without that flag I would hope to see no more than a few packets TOTAL. Because the overall throughput of actual state data is low for this system and connections could break frequently, I think this could have a notable effect on total mobile data used.
I am still in the design phase for the system and identifying the potential bottlenecks from the perspective of a new gRPC & HTTP2 user, so please excuse and correct any false assumptions. I realize I could probably use just one streaming RPC to pipe data down to the client, but that kind of defeats the purpose of a protobuf-based RPC design, as I have different types of data to send. Being able to squeeze the connection initialization data into a few packets would make the overhead more negligible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3264
Client does not detect a truncated message at the end of stream · Issue #3264 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discovered during the course of #3145. The server does detect and fail in the case of truncated message frame ("Encountered end-of-stream mid-frame"), but client doesn't have such logic.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3266
Connections cannot be re-established after network loss/recovery  · Issue #3266 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Ran a grpc-java client program with netty that uses application-level pings to a grpc-java server. Ran the client in a loop, it will ping, sleep, ping, sleep. If I disconnect the network, I get deadline exceeded (good), but if I reconnect the network, I continue to get deadline exceeded messages.
If possible, provide a recipe for reproducing the error.
What did you expect to see?
For new connections work successfully after the network was restored.
FWIW, while debugging the issue, I paused the ClientCalls thread and poked around for awhile, e.g. ~5-10 minutes. I didn't really find anything, but when I hit "resume", I saw a broken pipe exception (which I don't usually see, usually it's just the deadline exceeded), and then the connection started working. E.g. I don't want to lead you astray, but it seems like until this pipe was broken, the connection was not fully getting restarted.
Understood this may not be a grpc-java issue, but some underlying netty or even inherent TCP issue that I just don't understand.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3267
UNAUTHORIZED if Auth Server is down? · Issue #3267 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using GoogleAuthLibraryCredentials to authenticate our gRPC calls and we sometimes have the case where the authentication fails, because the auth server is not reachable and then the call fails with UNAUTHENTICATED status code.
Some people on my team argue that it should fail with UNAVAILABLE, I personally think UNAUTHENTICATED makes sense, so that a user can distinquish between a call and auth having gone wrong. However, arguably [1] is not clear about this.
The discussion arose, because of retries. In Bazel, we want to retry certain status codes i.e. UNAUTHENTICATED if the server could not be reached, but not if it failed due to wrong credentials. Any thoughts?
cc: @ejona86 @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3268
Channel creation best practice · Issue #3268 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
gRPC version?
1.4.0
JVM
java version "1.8.0_102"
Case:
If possible, provide a recipe for reproducing the error.
What is the best practice with regards to a channel, when using multiple (10+) grpc stream services stubs.
The channel I am using has tls enabled and generally when making the initial connection takes a few seconds to complete the full handshake.
Question:
Should the ManagedChannel by created in a singleton and used via that on all the grpc stubs or should the channel builder be used for every stub in order to create a new channel.
I don't wish to go through the handshake every time, however I get random cases of unknown channel state where I don't get a error in the streamObserver, however nothing gets received on the server side either.
Issue:
This is specifically with regards to network connectivity changing causing the connections to drop and in my case not reconnect and no implemented option to get the channel state yet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3269
Why does not implement Comparable for ByteString? · Issue #3269 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am looking for a proper way to make ByteString being comparable. I got one in my mind but it is pretty ugly. It would be super nice if ByteString implements Comparable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3271
Possible to use a web browser client ? (ie. gRPC-Web) · Issue #3271 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.4.0
What JVM are you using?
1.8.0_66
What did you do?
Tried to use a web client which follows the gRPC-Web api. Specifically, i use the grpc-web client part generated from Typescript here.
What did you expect to see?
Would like to see grpc-java talk successfully with a pure web/browser client.
Is it currently possible ?
Any example available ?
What did you see instead?
Error in the form of a Http2Exception$StreamException  when calling a grpc endpoint made with grpc-java.
Thanks a lot for any help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3272
Request with deadline cause to many GC overhead · Issue #3272 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.4.0 Release
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What the problem?
When uses deadline on each client call, gRPC creates TimeouOutExcepton before real deadline
occurs https
it's very expensive operation that also allocate not necessary junk for GC. In screen above you can see
That during 60 second gRPC allocate 786mb memory on fillStackTrace.
What do you think about move creation exception to place when it's really necessary? Yes in this case stacktrace will be different in case when deadline already expired and when deadline occurs after some time, but is it really make sense?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3273
Use service.load(class) instead of service.load(class, classloader) for OSGi compat · Issue #3273 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
1.8
What did you do?
I'm trying to wrap GRPC jar to OSGI bundle. There is a problem of making java.util.service works in OSGI environment. The reason is GRPC use service.load api with classloader parameter, such as:
I‘m using Apache Aries spi-fly to transferring  java.util.service to OSGI service. But unfortunately this plugin does not support the api service.load(class, classloader) now, and there is no other way to figure this issue out. Actually assigning  classloader is conflicts with OSGI in my opinion.
What did you expect to see?
It seems no necessary to assign classloader parameter when use service.load(), could we just use service.load(class)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3274
Pings being sent too often by KeepAliveManager · Issue #3274 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8
What did you do?
Enabled keepAliveTime of 20 seconds on the client, permitKeepAlive of 10 seconds on the server
Start the server w/logging in KeepAliveEnforcer
Start the client w/logging in KeepAliveManager
After ~3 pings, KeepAliveManager sends a ping after < 10 seconds, which is marked invalid by KeepAliveEnforcer
This happens a few more times and then more calm is sent
What did you expect to see?
Pings sent only every 20 seconds
You can checkout github.com/stephenh/mirror, the latest master has the reproducible error.
Here is the output of some logging that I added to KeepAliveManager:
You can see the 3rd ping is sent only 6 seconds after the 2nd ping.
My guess is that KeepAliveManager is not handling sendPing being scheduled multiple times, and so should check nextKeepaliveTime instead of just the state.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3277
Android O java.lang.RuntimeException: protocol negotiation failed · Issue #3277 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting handshake failure on all gRPC requests when using Android 8.0, I am not sure if it is a gRPC library issue or Android O preview.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
Android RunTime (ART)
What did you do?
It can be reproduced by trying to make gRPC request in Android O
What did you expect to see?
Request goes through and server responds back
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3278
CompositeReadableBuffer and GC overhead · Issue #3278 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
master branch
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What the problem?
Small messages send and receive via gRPC lead to many memory allocation via CompositeReadableBuffer. It's top by allocation in benchmark that send 32 bytes request and receive 16 bytes response.
I think we can reduce allocation if change logic of this line https because in this place creates temp CompositeReadableBuffer that uncessary https instead of it we can write at once in target buffer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3280
Remove Google credentials from the core gRPC libraries · Issue #3280 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Taken from #1914 to avoid throwing that issue off-topic.
@saturnism wrote:
Would it be possible not to have Google credentials in the core gRPC libraries? gRPC as a core RPC framework probably don't need Google credentials.
@ejona86 wrote:
@saturnism, only grpc-auth depends on google-auth-library-credentials. Also, "Google credentials" isn't in google-auth-library-credentials, but in google-auth-library-oauth2-http. CallCredentials is in grpc-core, so there should be no unnecessary dependencies.
@saturnism wrote:
it seems grpc-auth is only dealing w/ google credentials. @garrettjonesgoogle do you actually need this from gcloud-java? It was a discussion point of dependency conflicts.
grpc-auth feels very much core, as the core auth supplement library; is there a plan to add additional auth providers to grpc-auth?
would it make sense to have submodule e.g. grpc-auth-google? The point is that... if you need auth in gRPC, you don't necessarily need Google credentials.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3281
OkHttp: Log HTTP/2 HEADER frames · Issue #3281 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The verbose logging output using Netty helpfully includes the content of the incoming and outgoing headers. These details should be added to the OkHttp logging, as its generally useful for debugging.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3284
Lack of cache increases Kokoro flakiness · Issue #3284 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a grab-bag for any time Kokoro fails during downloading resources or similar. We cache dependency downloads on our other CIs, so such problems should be more rare. This issue should only be for flakes where caches on Travis CI or Jenkins would have been able to circumvent the failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3286
tls handshake error details are not reported to client code · Issue #3286 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_101"
Java(TM) SE Runtime Environment (build 1.8.0_101-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Here is the code for reproducing the issue (I do not attach the proto definitions, you can replace them with any):
What did you expect to see?
I expected to get a StatusException with an SSLException as a cause containing details of what has failed.
What did you see instead?
I get
But without debug logging there is no way to see this exception, and even now I cannot match the StatusException with CertificateException.
Looks like this code:
in SSLHandler causes termination of all pending write futures, including the result of channel.write(NettyClientHandler.NOOP_MESSAGE) in NettyClientTransport::start, with a default exception, without passing the actual error to them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3290
Prevent Access to "grpc-" headers · Issue #3290 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Headers that begin with "grpc-" are meant for use by gRPC and not by other clients.  Using this as a namespace allows the gRPC team to add new headers without fear of colliding with another users headers.
To this end, such headers should be locked down from reading and writing in the library.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3293
Go to "permanent error mode" if ChannelExecutor throws exception · Issue #3293 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As mentioned in discussion in #3288, it's questionable only catching instead of throwing exceptions in ChannelExecutor. Should we throw regardless or should we only log in production and throw in test evn?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3296
Sending Grpc Request in Appengine Java 8 Standard Environment Could Fail · Issue #3296 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
Google-cloud-java has received issues () regarding sending grpc reqeust in appengine (specifically, using google-cloud-java Pub/Sub client library).  When initiating grpc connection in appengine, grpc picks up currentRequestThreadFactory for its thread factory (https).  This could cause appengine runtime to throw NPE (see below for a typical stack trace). A hack to force defaultThreadFactory to be used by Grpc seems to resolve this issue.
Sending Grpc request within Appengine request thread seems to be a valid scenario. Grpc should support it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3297
Channel shutdown without calling shutdown()? · Issue #3297 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are sometimes seeing StatusRuntimeException with Status.UNAVAILABLE and the message Channel requested transport to shut down.  However, our codebase does not contain a call to ManagedChannel.shutdown(Now)(). We never close the channel.
Does gRPC ever invoke shutdown() internally i.e. in error cases - I always thought it doesn't, but my knowledge of internals is out of date.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3298
Correct way to interrupt client call from ServerInterceptor? · Issue #3298 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0_111
What did you do?
I've made an interceptor that checks call metadata, gets custom token from it and if it's correct - continues the call, otherwise - interrupts it with Status.PERMISSION_DENIED. The question is - what is correct way to interrupt call chain in that case?
my interceptor looks like:
as I understand it should be fine, and it seems so. But when I launched ab -c 50 -n 100000 through my proxy where every request contains wrong token, I can see 1 or 2 log entries from my service that says, that it enters onNext() method on server side. My grpc service is defined as:
Server constructing code:
ServerBuilder.forPort(port).addService(new ProductsService()).intercept(new AuthInterceptor()).build();
if it's might be a bug, and not just some simple mistake, I'll provide more reproducible codes etc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3299
grpc-protobuf-lite 1.4.0 not resolve some classes on android · Issue #3299 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
java version "1.8.0_144"
I generated .proto file with libprotoc 3.3.2 and followed java README.md, where I found notation about using grpc-protobuf-lite or grpc-protobuf-nano instead of grpc-protobuf for android client.
But in fact it won't compile, there are no such classes as ExtensionRegistry, GeneratedMessageV3, Descriptors etc.
Grpc-protobuf dependency on the other hand works well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3304
Network retries or time outs · Issue #3304 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0 on Android
What JVM are you using (java -version)?
1.8
What did you do?
I am trying to add a retry policy. It seems grpc after network failure doesn't re-connect immidiately even when network is back.
If possible, provide a recipe for reproducing the error.
disable network n keep on aeroplane mode
try to run the app
enable back network
You will see grpc doesn't connect back even when you retry so many times. it takes for 25-30 secs to retry again.
What did you expect to see?
grpc should connect immediately on network availability. I like to know the right amount of time for waiting .
What did you see instead?
it never connects back
Is there a way to configure the retries ? or to get to know the retry connection time ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3308
after network had closed over 30 seconds , client receive server stream problem   · Issue #3308 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
but  client-side didn't get any further exception messages  before network recover or after
and didn't receive server-side any stream messages
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3309
Custom gRPC marshaller for one of the service method · Issue #3309 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Latest snapshot 02cb718
What JVM are you using (java -version)?
java version "1.8.0_144"
What the problem?
I have a grpc service with 9 methods. One of the method very hot because contails many many repeatable objects inside protobuf, instead of deserialize it to proto on server side, I want put request in bynary form to off-head structure, and then process it as batch sequential read from off-head structure.
For resolve problem describe above I want to override unmarshaller only for one of 9 methods, but generated code not allow do it easy and require copy-past whole generated class(ServiceImplBase implements io.grpc.BindableService) as a result adding a new method to my grpc service will bring pain.
To allow easier override marshaller maybe need change signature for generated method
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3310
NettyFlowControlTest is flaky · Issue #3310 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
:grpc-interop-testing:test FAILED
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3318
InputStream from MethodDescriptor.Marshaller does not close · Issue #3318 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.5.0 Release
What JVM are you using (java -version)?
java version "1.8.0"
Java(TM) SE Runtime Environment (build 1.8.0-b132)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)
What the problem?
I have a gRPC method with custom marshaller, that deserialize protobuf request from off-heap ByteBuf.
Marshaller looks like
Use netty ByteBuf as request required release resources. And I expected that gRPC close InputStream after send request, but it's doesn't happens. As a result of memory leak my service
that use gRPC client failed with OOM.
Recent access records: 4
I also recheck it via implement empty InputStream that log close method. And it method was not execute.
I think for resolve this issue need resolve this todo https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3319
Creating a channel with a tls address cause NameResolver issue on Android · Issue #3319 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
I try to establish connection to tls address (https) with
but NameResolver cannot recognize such address. I tried the same with localhost, where NameResolver is not used and it works good. Proguard is off.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3323
Infinite cycle during parse client request · Issue #3323 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.5.0 Release
What JVM are you using (java -version)?
java version "1.8.0"
Java(TM) SE Runtime Environment (build 1.8.0-b132)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)
What the problem?
After minor change my proto request all of my request start failed with deadline.
Thread-dumps from server side show that root cause of this deadlines in parsing code
This cycle never completed, because try read zero bytes from InputStream
InputSteam contract say that read method will always return zero if reads zero bytes.
If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3326
NettyServerHandlerTest keepalive tests are flaky since netty 4.1.14 · Issue #3326 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3328
Mismatch in naming with bazel maven jars · Issue #3328 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to use grpc-java in an existing project which uses bazel, java, and a bunch of jars from maven. I added this to my WORKSPACE:
The problem is that I use the migration-tooling project to add maven jars, and its naming for external jars does not match yours. For example, you call it @com_google_guava[1] but that project uses @com_google_guava_guava[2]. So if I try to use the omits, I get:
And if I remove the omits, my project references two different versions of guava and I get runtime errors (since this project uses guava 19 and I want 21).
Is it possible to switch the naming of external maven jars to match bazel's tooling?
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3332
<RequestT,ResponseT>create(...) in MethodDescriptor has been deprecated · Issue #3332 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0_102
What did you do?
gradle clean && gradle build
What did you expect to see?
No deprecation warnings.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3336
Failed to load any of the given libraries:· Issue #3336 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
I've tried to use grpc-java library to connect sever side with SSL successfully in one lab, but when I change another lab to test that it was failure. I don't know whether the lab need to be set some environment variables or installed some rpms.
What version of gRPC are you using?
What JVM are you using (java -version)?
openjdk version "1.8.0_111"
OpenJDK Runtime Environment (build 1.8.0_111-b15)
OpenJDK 64-Bit Server VM (build 25.111-b15, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Try to connection with SSL.
Here is my netty pom.xml
What did you expect to see?
Connection with SSL works fine.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3337
springboot startup with java.lang.ClassNotFoundException: com.google.instrumentation.trace.TraceComponentImpl · Issue #3337 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0 1.4.0 1.5.0
What JVM are you using (java -version)?
jdk6 jdk7 jdk8
What did you do?
If possible, provide a recipe for reproducing the error.
startup springboot with log debug level
What did you expect to see?
not output debug exception.
What did you see instead?
but not release
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3345
Disable hostname verification for NettyChannelBuilder · Issue #3345 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_73"
Java(TM) SE Runtime Environment (build 1.8.0_73-b02)
Java HotSpot(TM) 64-Bit Server VM (build 25.73-b02, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Using certificated with
What did you expect to see?
Need some mechanism to disable hostname verification during SSL handshake.
What did you see instead?
We are using certificates having generic CommonName which doesn't reflect the hostname. And hence the hostname verification fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3347
NullPointerException: trailers · Issue #3347 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0
What did you do?
Running my grpc services on DC/OS... it works just fine but on the error log I sometimes see this NullPointerException.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3348
Unable to Publish Message to Pub/Sub due to error No functional channel service provider found · Issue #3348 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
1.7
What did you do?
If possible, provide a recipe for reproducing the error.
No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact
What did you expect to see?
I am trying to publish a message from java to Google Pub/Sub
What did you see instead?
Ending up with error.
Maven Dependency tree
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3353
Resource leak in netty tests · Issue #3353 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I haven't tracked down the responsible, but I ran with leak detection and found this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3355
GRPCLB: drop doesn't work with wait-for-ready RPCs · Issue #3355 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GrpclbLoadBalancer may drop (fail immediately) certain RPCs in order to shed load for the servers. It is done by returning a PickResult.withError(). However, withError() only fail fail-fast (which is default) RPCs, and will buffer wait-for-ready RPCs, because it is meant to signal transient failures. "Dropped" RPCs should fail immediately regardless of wait-for-ready, and should not be conflated with transient failures.
Options considered:
Add createFailingSubchannel() to Helper to be used for dropped RPCs. This would work but feel awkward, because nearly all methods on Subchannel don't apply to the failing Subchannel.
Add a new type of PickResult in addition to withError(), and will fail the RPC regardless of its wait-for-ready option. This sounds like a better option.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3356
Running grpc server on Android Platform · Issue #3356 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5
What JVM are you using (java -version)?
1.7
What did you do?
If possible, provide a recipe for reproducing the error.
Goal
Run the HelloWorldServer grpc-java example in a system app running on a Marshmallow Android platform.
Steps
Follow the grpc-java documentation for retrieving and buiding the examples.  The build environment is created by sourcing the AOSP file build/envsetup.sh, then running the lunch command for our platform.  I'm guessing that you could use an emulated lunch platform or a Nexus/Pixel lunch platorm to recreate this step.
Use the jar files built from step 1 and necessary HelloWorld java file in an AOSP system app project which will create the HelloWorld grpc server just like the grpc-java example.  In the Android.mk file, proguard is disabled so nothing should be removed.  Here is the list of jars from step 1 that are included in the project:
More details can be provided as needed.
What did you expect to see?
I expected the HelloWorld server to properly start.
What did you see instead?
When the system app executes, I see the following message in logcat:
io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional server found. Try adding a dependency on the grpc-netty artifact
Note: This issue is similar to the close issue #2227  but in my case, I'm trying to build and run a system app on an Android Platform which I control/own.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3358
gRPC throws `io.grpc.StatusRuntimeException: UNKNOWN` with netty-4.1.14 · Issue #3358 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
Depend on Netty 4.1.14 instead of 4.1.11
Sample project demonstrating the issue: https
What did you expect to see?
A more obvious success or error message
What did you see instead?
There is a rather large set of exceptions being raised on a 200 response from the server. The same project runs successfully if I downgrade netty to 4.1.13.
Full exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3359
Census: enable requestz sampling for generated methods  · Issue #3359 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Census has an open-source requestz implementation that can show traces of live, sampled and error RPCs. In order to sample RPCs, gRPC needs to call SampledSpanStore.registerSpanNamesForCollection() with any known method name. This is fairly expensive, thus should not be called on a per-RPC basis. A few options:
In a static initializer in the generated code. If we don't want to call Census directly from the generated code, maybe call Census code in a helper function in ClientCalls and ServerCalls which is called from generated code.
In MethodDescriptor constructor. This will be called once per method, which might slow start-up speed. This would also all custom-created methods to be registered, @bogdandrutu is this desirable, or do you only expect generated methods to be registered?
Option 1 sounds like a better option. @ejona86 WDYT?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3363
Tracking ForwardingChannelBuilder being experimental · Issue #3363 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3364
Seeing lots of "failed to mark a promise as failure because it has succeeded already" warnings · Issue #3364 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.6.0-SNAPSHOT (master branch, 8d6ff4c)
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Only appears at high load (one node sending a unary RPC each to a ~1000 other nodes).
What did you see instead?
A lot of log spam with the following:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3365
grpc.ssl_target_name_override · Issue #3365 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
how to set  ChannelOption  grpc.ssl_target_name_override in java
i konw c# like this new ChannelOption(ChannelOptions.SslTargetNameOverride,"name")
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3366
How to use the healthcheck service? · Issue #3366 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
jdk1.8.0
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
I want to get the server instantaneous status 。
What did you see instead?
I have seen the health.proto and  HealthServiceImpl.java  in gRPC 1.5.0，but I don't know how to use it.
Is this part of the code complete? If complete, how the client to get the server healthy status, is there any examples? If not complete, Is it being perfected?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3367
Grpc android client giving : "Protocol negotiation failed" when using grpc server behind AWS ELB. · Issue #3367 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
java version "1.8.0_101"
What did you do?
If possible, provide a recipe for reproducing the error.
Deploy a grpc C++ server inside  AWS EC2 instance.
Make a ELB with a certificate using  ACM.
Use android client to hit the ELB domain name.
What did you expect to see?
Excpected response from grpc server
What did you see instead?
Protocol negotiation failed
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3370
Netty server poorly handles unknown content type · Issue #3370 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the content-type is missing or unknown, the Netty transport sends RST_STREAM with REFUSED_STREAM. That's bonkers on multiple levels.
We should probably respond with HTTP 415 instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3373
Client close the TCP conneting When the right end is not reached · Issue #3373 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC1.5.0
What JVM are you using (java -version)?
JDK1.8.0
What did you do?
If possible, provide a recipe for reproducing the error.
I create gRPC client and gRPC server in different host, I  broken network  to make the Network from client to server inaccessible.
What did you expect to see?
I want to see the client  can quickly respond to the service unavailable as far as possible,
What did you see instead?
I  see that the NettyClientHandler will do the onConnectionError after about 20 seconds, what Throwable it catch is
Then ManagedChannelImpl will handle the handleSubchannelState, make the subchannel to IDLE and try to reconnect. But I don't understand What's the mechanism? How does the client feel disconnected from the server network.
And is there some  methods that the client is able to perceive the server unavailable state more quickly！
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3376
Client try tothe TCP conneting When the right end is not reached · Issue #3376 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3377
gRPC client try to reconnect subchannel about 20 Seconds after I make the gRPC server network unreachable · Issue #3377 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC1.5.0
What JVM are you using (java -version)?
JDK1.8.0
What did you do?
If possible, provide a recipe for reproducing the error.
1、I create gRPC client and gRPC server in different host,
2、Send message to server interval of one second
3、Disable network  to make the network from client to server unreachable.(unplug the server‘s cable)
What did you expect to see?
I want to see the client can quickly respond to the service unavailable as far as possible, rather than wait for about 20 seconds to know that the server is unavailable.
What did you see instead?
I see that the NettyClientHandler will do the onConnectionError after about 20 seconds, what Throwable it catch is
Then ManagedChannelImpl will handle the handleSubchannelState, make the subchannel to IDLE and try to reconnect. But I don't understand What's the mechanism? How does the client feel disconnected from the server network.
And is there some methods that the client is able to perceive the server unavailable state more quickly！
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3378
Socket leak in client when server sends GoAway · Issue #3378 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0 (previously 1.0.2)
What JVM are you using (java -version)?
Various versions of 1.8, this one 1.8.0_66
What did you do?
If possible, provide a recipe for reproducing the error.
Golang gRPC server configured with MaxConnectionAge set to 30s. Simple java main client:
What did you expect to see?
Max age is set low to exacerbate the issue, but is also seen over a longer period of time when run in production with a larger value.
On GoAway, the streams should be drained and the connection closed once gracefully finished. I expect to see no growth in count of grpc-default-worker threads. On the server side I expect to see no growth in grpc http2_client goroutines.
What did you see instead?
Every time max age is triggered, sending a GoAway, streams seem to be drained and unary calls fail. On retry a new connection and thus grpc-default-worker thread is created. Those threads are never cleaned up, even over the course of many hours. When the loop restarts a new connection is created, which results in a new grpc-default-worker thread. Therefore we see growth over time.
On the server side, we see a growth in grpc http2_client goroutines. They are all stuck on readFrame, waiting to receive a ping or EOF from the client.
Setting the GRPCMaxConnectionAgeGrace mitigates this a little, in that the server will force close the connections. However, this is not acceptable because sometimes we do have long running streams which we want to allow to finish gracefully.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3383
Netty{Client/Server}Transport.shutdown() has 5 sec timeout, which does not agree with the spec of the interface · Issue #3383 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The transport shutdown() API specifies that existing streams continue, but the AbstractNettyHandler sets a GRACEFUL_SHUTDOWN_TIMEOUT = SECONDS.toMillis(5), so when Netty{Client/Server}Transport.shutdown() is called, it actually will kill the existing streams in 5 seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3396
Following gRPC tutorial: Error: Could not find or load main class org.gradle.wrapper.GradleWrapperMain · Issue #3396 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I've been following the gRPC java tutorial, after modifying the server and client classes, I tried to compile again with gradlew installDist and I get the following error:
Could not find or load main class org.gradle.wrapper.GradleWrapperMain
What did you expect to see?
Success compilation
What did you see instead?
The following error:
Could not find or load main class org.gradle.wrapper.GradleWrapperMain
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3397
 The recommented way to use the gRPC in highly concurrent environments. · Issue #3397 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC-1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
1、create a gRPC server binding a port  the server side
2、create a gRPC client of singleton pattern
3、start multiple threads to send messages simultaneously using the same client(Using blockingStub)
What did you expect to see?
I hope that the gRPC able to cope with a certain amount of concurrent pressure
What did you see instead?
when I use a threads to send messages  using the client, one "send to return" takes about 40ms ;
when I increase to 20 threads to send messages simultaneously using the same client, what time one "send to return" take increase to about 200ms;
I don't think the 20 concurrent  threads would have so big impact .
Are there any other parameters that need to be configured to improve performance in a concurrent environment? or  recommend way to use gRPC in a concurrent environment better?
Hope for answers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3399
Tracking issue for full-stream compression being experimental · Issue #3399 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



3406
Investigate usage of deprecated ApplicationProtocolNegotiator · Issue #3406 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In #3390 we ignored the deprecation warning. We need to investigate whether we need the checks (and so tweak netty to keep the API semi-public) or whether we want to just delete them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3408
TransportTest.serverNotListening flakiness possibly due to recent changes · Issue #3408 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to @ejona86 this is likely not the same root cause as #1877 and is instead likely due to: 6ca91c4
The recent occurances:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3410
google-common-protos are not included in extracted-include-protos · Issue #3410 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
I don't know either it is protobuf or grpc-lite problem:
using annotation.proto from proto commons throws error, though it is included in libraries folder.
Also, extracted-include-protos (or extracted-protos) build directory does not include anything related with it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3412
Compiler warnings in bazel · Issue #3412 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Master at 6164b7b (waiting for the bazel naming fixes to be released)
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
We have configued a custom java toolchain in bazel so we can catch java warnings:
But now if we include the grpc-java rules, we get errors.
WORKSPACE:
It seems like it's trying to compile protobuf_java using our java toolchain (instead of just pulling in precompiled jars?).
Is there a way to prevent the compilation from using our java_toolchain? Or some other way to leave our warnings on, but not fail on grpc/protobuf?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3413
Document CallStreamObserver.request() thread-safety · Issue #3413 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
The javadoc for CallStreamObserver.request() makes no statement about thread safety. I see that the applicable implementations call request() methods that are documented as thread-safe, and that CallStreamObserver.request() is called as if it were thread-safe. I assume that this is meant to be a contract, as otherwise usage would be oddly complicated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3420
Trying to get a basic Google Cloud Endpoints gRPC project working with an OAuth2.0 auth provider · Issue #3420 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
We are trying to get  a Google Cloud Endpoints project with gRPC working with an OAuth2.0 authentication provider using ServiceAccountJwtAccessCredentials.
Below is the relevant piece of my Client code :
A question concerning this issue has already been asked by me in the google groups here: (https
What did you expect to see?
Currently  the audience that  is set by  ServiceAccountJwtAccessCredentials is being overwritten by the above line:
So instead of the audience (SERVICE_CONFIGURATION_NAME) that we set, we are obtaining a string like : https
Did not expect the GoogleAuthLibraryCallCredentials.java to overwrite the audience we set.
We were wondering whether ServiceAccountJwtAccessCredentials class is compatible with CallCredentials class or if there is another wrapper available to pass the ServiceAccountJwtAccessCredentials.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3421
First received frame was not SETTINGS. Hex dump for first 5 bytes · Issue #3421 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Inside a test I ran a grpc server and 5 clients that accessed the server concurrently (all from the same IP; everyone with its own channel). This is only happening sometimes, looks to me like some kind of race condition within grpc.
What did you expect to see?
Successful call
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3422
Resource leak in grpc 1.5.0 + netty · Issue #3422 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Backend configuration:
As you see, the number of executors were limited. At one point single request execution started to get too much time on the backend (seconds), that caused executor starvation and resulted in the following stacktrace:
After request execution time was fixed, no more leak records were seen.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3423
How to match versions of com_google_protobuf and com_google_protobuf_cc · Issue #3423 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you want to use grpc-java in the same workspace as compiling C++ protos, you need to make sure the protobuf versions match. If you get the version wrong, your C++ builds fail with "This file was generated by a newer version of protoc".
For example, our WORKSPACE currently contains:
I couldn't find anyone else who has reported the issue, so I'm hoping to discuss the best way to deal with this here. Options:
Manually keep them in sync (as above).
Use omit_com_google_protobuf_* flags to grpc_java_repositories() and define protobuf repos in the WORKSPACE.
Get Bazel to avoid relying on multiple com_google_protobuf* names for the same google/protobuf repo.
1 is tedious, 2 could break grpc-java and 3 is potential surprising. There is probably a good reason 4 hasn't been done.
Can you think of a better option for this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3425
Feature: StatusException and StatusRuntimeException utility methods · Issue #3425 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like to propose adding additional static utility methods to the Status class to simplify common patterns for dealing with StatusException and StatusRuntimeException. Since SE and SRE are unrelated, working with them cannot be done with polymorphism.
I'd like to propose the following additional API for Status:
The above code can be written using the existing APIs, but requires multiple nested if statements and instanceof checks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3427
grpc client sometimes stuck after connection reset · Issue #3427 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
We run the services in kubernetes load balanced by a kubernetes. The servers are running grpc java server with TLS. Clients are also running grpc java. After we have changed a kubernetes setting of --conntrack-tcp-timeout-close-wait duration from default 1h0m0s to 60s and --conntrack-tcp-timeout-established duration from default 24h0m0s to 15m. We have started to see a lot of stuck clients where all calls timed out after seeing this exception:
What did you expect to see?
All our calls are unary calls. I expect them they will go through even after seeing the connection reset.
What did you see instead?
About 0.5% of clients are stuck (we have about 10k clients running). And inspecting the heap dump of a stuck client after the calls is made revealed the state 2 instances of InternalSubchannel and activeTransport and pendingTransport are null in them. Forcing the client call did not change the state of the InternalSubchannel, the client was stuck indefinitely until the process was killed and restarted. After restarting the process it became normal again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3434
Cannot throw custome runtime exception inside clientinterceptor · Issue #3434 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
So i was trying to use ClientInterceptor by overiding onMessage(RespT message).  So i'm trying to throw my custome runtime exception inside ForwaringClientCall.listener something like this
Field code;
What did you expect to see?
I excpect it will throw my custom exception
What did you see instead?
it always end inside inside this method catch (Throwable t) and it will end with statusruntimeexception cancel
Thank you for your attention
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3435
grpc multiple instances of same service different ports within same jvm ubuntu · Issue #3435 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using? 1.3.0
What JVM are you using (java -version)? openjdk version "1.8.0_131"
What did you do?
I have a service EventServer with one method sendEvent.  I have created a unit test client for EventServerImpl1
My use case is there are 2 instances of EventServer running on different ports for this test case where one propagates the event to other and response vice versa
Example: EventTestClient invokes sendEvent to EventServerImpl1 and in sendEvent method of EventServerImpl1 it propagates to sendEvent method of EventServerImpl2.
Here 2 grpc servers EventServerImpl1(port 17123) and EventServerImpl2(port 17124) implements EventServer within same JVM for this.
Now in
EventTestClient: I have code as
Both are blocking stubs only
What did you expect to see?
I expect to see the request propagates to EventServerImpl2 as EventServerImpl1 being the client to it
What did you see instead?
When EventServerImpl1.sendEvent is triggered( stub2.sendEvent(request) ) the process hangs forever.
When I directly query EventServerImpl2(port 17124) from other java process during this hang over period it works fine. But within that same process its hung forever.
Again on Windows this is fine and test case runs well. But only on Ubuntu I see this issue
Please suggest if there is something I am missing here
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3440
Move Static factory methods off the class they construct. · Issue #3440 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ManagedChannelBuilder and ServerBuilder classes both expose static factory methods as a means to construct instances of themselves.  These classes can be extended, which means that all subclasses inherit the static methods.
However, when these static methods are call on the subclasses, they often return a different type than expected (InProcessChannelBuilder returns based on the service loader, for instance. See #3438).  This leads to confusion, and forces every subclass to add static methods that match the signatures)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3442
Netty server doesn't send multiple GOAWAYs during graceful shutdown · Issue #3442 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For full graceful shutdown, we should send one GOAWAY with last-steam-id=MAX_INT and a PING. When the PING ACK is received then we send another GOAWAY with the actual last-stream-id. We can choose to set a timer for if the PING ACK doesn't arrive back promptly.
It looks like we try to do shutdown gracefully with maxConnectionAge, but it seems like it may not actually function.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3444
Problem with ssl · Issue #3444 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
What did you do?
If possible, provide a recipe for reproducing the error.
I was setting up ssl with grpc. I have a self signed certificate with private key and certificate. The server is running fine using;
The client fails on rpc request.
What did you expect to see?
client rpc connection should go through
What did you see instead?
client fails with following error. Request does not reach server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3445
NettyChannelBuilder uses Java 1.7 APIs · Issue #3445 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Intellij complains that NettyChannelBuilder's usage of InetSocketAddress.getHostString is Java 1.7
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3447
Error of Tutorial example · Issue #3447 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_111"
What did you do?
If possible, provide a recipe for reproducing the error.
Follow the example of Maven section. Try to run mvn verify.
What did you expect to see?
No ERROR for maven verifying.
What did you see instead?
I just start to learn gRPC, hope someone can give me some suggestions.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3449
Feature: Lifecycle events for service implementations · Issue #3449 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like my service implementations to be notified of server lifecycle events for server start and shutdown. These operations could be used to warm caches, persist data, or close files.
The least intrusive implementation would be an interface a service implementer would opt into for receiving these events. Ex:
My initial thought is that onStart() would block Server.start(), so that the server wouldn't be ready until all services had successfully started. onShutdown() is trickier. It needs to be called only after the server has drained all requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3455
Proposal: Move forwarders into io.grpc.util · Issue #3455 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a couple classes in the top io.grpc. package that are "Forwarding"  classes.  These classes are generally useful on their own, and provide an interception mechanism for changing or monitoring the behavior of the forwardee.  While users could implement forwarders themselves, it would be better if we did it.  There are a couple reasons:
Forwarding is error prone.  As the classes we have evolve, we continually add methods that should have been abstract but cannot be due to backwards compatibility. ManagedChannel is one such class.  Because they are not abstract, they are easy to forget to override, as has happened in the past.  We are in a position to update the forwarding class as we modify the original class.  Additionally, we can take on the burden of testing that each method is forwarded more easily than users.
Forwarders act as good alternatives to mocks.  Often in tests we use mocks for ease of use.  This has proven to make our tests brittle and hard to understand.  It would be better to make dummy classes that are suitable for test use.   Forwarders act as a good base class for tests to extend.  It allows an inplace migration from mocks to not mocks.  Forwarders can delegate to a mock as the test is being updated.  Traditionally we haven't moved test helper classes to a shared spot, but this is due to inconvenience rather than it being  bad idea.
In #3105 the issue was raised that NoopClientCall and BaseClientCall were prone to abuse.  Their original intent was a stand in for mocks, as many callsites needed a nonnull instance.  However, because their default behavior was "do nothing", they were more easily abused.  I believe forwarding classes neatly solve both problems.  A forwarder can wrap a null instance to be used at call sites that expect a non null instance.  If any methods are called, they will fail with NPE preventing users from abusing the behavior.  They can define the methods they only need for their tests instead.
The reason I raise this is that there may be a lot of Forwarders if we adopt this pattern.  I think they are useful in both test code and in regular code, so the logical place to put them would be in a place accessible to both.  io.grpc.util seems appropriate, because they are supplemental to the core library.
As for the existing Forwarding classes, they will become shim classes, and their implementation will move to io.grpc.util.
As for which new Forwarders would live in the new location, the following have been on my wish list (with the first one being recently fulfilled by @dapengzhang0 )
Each of these would be useful to either users and/or ourselves.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3456
Https with grpc · Issue #3456 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
I create a HTTPS with grpc use code as follow:
What did you see instead?
But i got this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3457
Attributes.Key equality by name · Issue #3457 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I am using client certificates and trying to verify the name of the caller (e.g. whitelist certain callers of my grpc server). Here is the code I wanted to write in a ServerInterceptor:
And then I can use this SSLSession to extract info about the caller.
However, this does not work since Attributes.Key does not implement equals/hashCode. Instead, I think I have to write something like this:
Is this intentional behavior? I went to submit a pull request to implement these methods and then discovered there is a test explicitly asserting this behavior:
This seems related to #2942
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3458
FR: Port sharing with traditional HTTP services · Issue #3458 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of v1.6.1, there appears to be no way, when using gRPC with Netty, to host traditional HTTP services side-by-side with gRPC on the same port. I am working with an existing framework that wants to support gRPC but only has one port available and expects to also serve HTTP.
At the moment, the workaround would involve rearchitecting several disparate systems to know about split fleets of services or multiple ports, followed by some careful rollouts to migrate traffic. I'd like to avoid this if at all possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3460
Tracking issue for deleting deprecated methods in StreamTracer · Issue #3460 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
outboundMessage() and inboundMessage() will be released as deprecated in 1.7.0, thus should be deleted in 1.8.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3466
Migrate OS X CI to Kokoro · Issue #3466 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Travis works quickly. For Linux. But not OS X.
OS X tends to have a long build queue (right now it is at least 3 hours long). This could be fine, except if 5 OS X jobs are queued they starve out Linux builds. This has been a problem since OS X support was added to Travis, so waiting for things to get better doesn't seem a good strategy. Since the "Backlog macOS Builds for Open Source projects" tells a good story on https, we could notice when things have improved in the future.
In principle it'd be fine to only run on master (not per-PR), but I don't know of any option to do that for Travis. Kokoro shouldn't have any trouble handling our rate of PR builds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3469
Could not add interceptor(s) to `ProtoReflectionService`· Issue #3469 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What did you do?
Add interceptor(s) to ProtoReflectionService.
What did you expect to see?
ProtoReflectionService works with interceptor(s).
What did you see instead?
Got a NullPointerException or compilation error.
Problem
I ask a question on Gitter.
and I have got a reply from @e.jona86.
I think it is not easy to fix. So I report an issue.
ProtoReflectionService needs a reference to Server via notifyOnBuild but it could not, because an intercepted service is an instance of ServerServiceDefinition.
I think it is consisting some problems (may not a bug or may not a problem) as below.
ServerInterceptors#intercept binds a service and returns ServerServiceDefinition.
ServerBuilder#addService doesn't add ServerServiceDefinition to notifyOnBuildList.
ServerServiceDefinition doesn't implement InternalNotifyOnBuild.
Therefore, I could not add interceptor(s) to ProtoReflectionService.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3470
The parameter usage of KeepAlive · Issue #3470 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
create a client and a server in two different virtual machine (machine 1, machine2);
call one rpc request and server response success ,then unplug the cable of machine2 to make the network from machine 1 to machine 2 unreachable；
call another rpc request after one minute；
What did you expect to see?
I want to seen that the client quickly know that the server unreachable;
What did you see instead?
I seen that the client  throw exception after 10 seconds.
How to use The keepAlive and the keepAliveTimeout, why the second rpc need to wait another 10 seconds to sense the server unreachable.
What the keepAlive mechanism I understand is that the client send the ping after the keepAlive time,if the response don't back before the keepAliveTimeout, shuwdown the transport and make the channel
unavailable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3473
Auto detection and use of epoll for ELG · Issue #3473 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I know it's possible to pass in a custom ELG to the NettyServerBuilder, but it'd be great if by adding a dependency on the proper packages if the DefaultELGResource would just use reflection and use epoll instead. If I were to submit a PR, is this something that would be accepted?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3474
java.lang.NoSuchMethodError xxx.yyy$Builder.<init>(xxx.yyy$1;)V exception · Issue #3474 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
not stable reprodce this issue.
What did you expect to see?
no exception
What did you see instead?
a lot of the same exceptions:
just one details:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3477
Remove Thrift · Issue #3477 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It isn't supported or used.   Maybe some kind user will ask for it back, but until that happens, rm.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3481
Census contexts not propagated by in-process · Issue #3481 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In-process transport currently disables Census altogether. However, we still need to propagate the Census StatsContext and tracing Span from the client to the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3482
StreamObserver stops receiving messages from server stream after 30 minutes of being silent · Issue #3482 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What JVM are you using (java -version)?
Android
What did you do?
Android client application with gRPC and backend written on go.
Client starts receiving message from server stream. But if there was no messages during 30 minutes, stream stops receiving messages at all. No logs, errors or crashes was caught by onError() or onCompleted().
By watching logs at server side I can see, that these messages were sent to stream without any errors.
What did you expect to see?
I expect stream still receiving messages even it was inactive for some time.
What did you see instead?
No messages received.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3484
manual flow control enabled not worked effectively · Issue #3484 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java 8
What did you do?
I have a server side stream api and on client side I have manual flow control enabled.
If I send multiple messages without pause between response.onNext(),
got exception:-
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3489
Revisit the threading and ordering guarantees of StreamTracer · Issue #3489 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently StreamTracer must be thread-safe, as gRPC doesn't guarantee synchronized invocation for it. While the entire class can't be marked as not-thread-safe, as inboundUncompressedSize() may be called from a different thread (app thread) from inboundMessage() (network thread), some methods are called sequentially, e.g., inboundMessage() and outboundMessage(). If a tracer implementation only cares about inboundMessage(), it may be totally safe to not to synchronize. We need to find a way to relax the thread-safety requirement to make it easier to implement.
We also need a better definition on the ordering of the methods, e.g., is it possible for inboundMessage() to happen after streamClosed()?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3491
Question: what is used as :path pseudo header · Issue #3491 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
I am trying to load balance a grpc service using linkerd service mesh. They mention in the docs that they use the :path pseudo header to proxy the request. I wanted to understand what :path equates to with reference to a proto file definition? Is it {package}.{service}?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3492
Grpc Transport failed · Issue #3492 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
openjdk:8-jdk
What did you do?
If possible, provide a recipe for reproducing the error
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3493
Need to set keep-alive through ManagedChannelBuilder · Issue #3493 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For Pub/Sub streaming pull, we need to set keep-alive to prevent connections from being dropped. Unfortunately, this seems to only be available on NettyChannelBuilder and not ManagedChannelBuilder. Can we get a way to set this through ManagedChannelBuilder?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3494
how to pass exception cause from server to client · Issue #3494 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
server throw IndexOutOfBoundsException
client receive StatusRuntimeException but inside cause is null
What did you expect to see?
client receive IndexOutOfBoundsException
What did you see instead?
client receive StatusRuntimeException but inside cause is null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3502
Add CI for Bazel · Issue #3502 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While users are good at noticing when Bazel breaks, I suspect they'd appreciate it to compile without their intervention.
This probably should be on Kokoro.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3503
CensusTracingModule is breaking Bazel build · Issue #3503 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3505
Can not build maven project on Raspberry Pi 2 (Arm32) · Issue #3505 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All maven projects were easily built on my macbook but now I can not get them to built on my Raspberry Pi (the culprit seems to be the ARM architecture?!)
What version of gRPC are you using?
Tried several, also tried to simply build the examples on commit hash "589da07" which seems to be using version 1.7.0. I was also using version 1.5.0.
What JVM are you using (java -version)?
Pre-installed one on Raspberry Pi:
java version "1.8.0_65"
Java(TM) SE Runtime Environment (build 1.8.0_65-b17)
Java HotSpot(TM) Client VM (build 25.65-b01, mixed mode)
What did you do?
I tried to build the examples on version 1.7.0, where it fails to resolve the dependencies:
Could not find artifact io.grpc:grpc-netty:jar:1.7.0-SNAPSHOT
I tried to build by own example based on earlier tutorials on version 1.5.0, with the plugin from github: com.github.os72:protoc-jar-maven-plugin which tells me that ARM is not supported
On version 1.5.0 I tried to use the "standard" maven plugin, which similarly doesn't seem to find the fitting architecture in protoc executables:
Are ARM architectures simply not supported for "Java protobuf compilers", or am I missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3506
Utility class for automatically cancelling a context after an operation · Issue #3506 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CancellableContext must always be cancelled at the end of the request. Let's add a utility that simplifies the common cases, for example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3508
Unexpected RST_STREAM(CANCEL) and subsequent RPC-call cancelling · Issue #3508 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0 on both sides
What JVM are you using (java -version)?
On both sides
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I have GRPC server(aka service) and GRPC client, both in java. Client is doing some frequent task. Earlier client was using only one rpc-call per task, but today I've add second subsequent rpc-call to task processing. Rpc-calls are different - goes to different Service.methods). After adding second call I started to catch  io.grpc.StatusRuntimeException: CANCELLED in second subsequent rpc-call on rpc client-side. Exception is not so frequent, it was only two times per day, but reason of cancelling is unknown.
One maybe important thing: thread in which rpc-client work - is a GRPC-server rpc processing thread(so client is also a GRPC-server but I think it should not be relevant).
There is no timeouts or cancellations in my code. Channel created as(this is kotlin, sorry):
This is how rpc-call is made:
In task processing code calls are going in this order(code is synchronous):
This is log of exception:
From this log we can see the time and stub - CANCEL was triggered for OnlineInfoService call.
But in GRPC logs I didn't find any call to this rpc(OnlineInfoService) with CANCEL, instead I've found call with RST_STREAM for previous call
Logs from client, stream with RST_STREAM:
What we can see here:
The call is base.rpc.profile.mm.MatchmakingInfoService/Info
RST_STREAM is sent after receiving response(reason?)
So, two questions:
Why is RST_STREAM(CANCEL) was triggered after response is received?
Why cancelled was next after RST_STREAM call?
This situation was under load like one task per minute(so no load at all).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3513
Identifying the type of Stub after an instance is created · Issue #3513 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.6.1
What JVM are you using (java -version)?
1.8
Currently once a Stub is generated extending from AbstractStub, there is no way to identify whether is a BlockingStub, FutureStub or simple AsnycStub except from the name which is NOT ideal. Identification of Stub, will help enforce any application level checks such as enforcing deadlines for BlockingStub in the enviornment.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3522
gRPC Java is not usable from Java 9 modules · Issue #3522 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9"
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
What did you do?
Java 9 allows users to depend on older, non-modularized versions of the libraries by "converting" them to automatic modules. For example, when Maven dependencies on grpc are configured correctly, Java 9 allows me to do the following:
This allowed me to use classes from the grpc-core within my Java 9 module, but unfortunately it wouldn't compile:
The issue is that Java 9 does not support split packages across modules and this is exactly what's happening here, as io.grpc package exists in both grpc-core and grpc-context, and to make things worse both grpc-core and grpc-stub have transitive dependency on grpc-context.
I've tried excluding grpc-context from both modules using Maven exclusions, which allowed me to compile successfully, as I don't have any direct dependencies on grpc-context. However, I was not able to run the test server, because of the missing Context class:
There are several possible solutions, some better than the others:
Merge classes from grpc-context into grpc-core and leave empty/dummy grpc-context module around for backwards compatibility (although most people probably do not depend on it directly).
Do the same as above, but get rid of unnecessary grpc-context module.
Rename the io.grpc package in grpc-context to io.grpc.context, which would eliminate split package issue, but would break existing code that uses classes from the current location.
In any case, I'm happy to help do the work, but someone will need to decide which approach to take.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3523
Provide Automatic-Module-Name entry in JAR manifests · Issue #3523 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9"
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
What did you do?
Attempted to use gRPC from a Java 9 module.
What did you expect to see?
No compiler warnings or errors.
What did you see instead?
Maven complaining about the file-based automatic module name for gRPC and its dependencies:
This is happening because Java 9 uses JAR file names to calculate automatic module name, and this is very fragile.
The better approach would be to add Automatic-Module-Name entry to each JAR's manifest, specifying the reliable name consumers of gRPC libraries can use, even before the gRPC itself is fully modularized.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3525
GoogleAuthLibraryCallCredentials should not use ReflectiveOperationException · Issue #3525 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GoogleAuthLibraryCallCredentials uses ReflectiveOperationException, which requires Android API level 19. It appears that the animal sniffer plugin does not detect exception types in try/catch blocks (mojohaus/animal-sniffer#41). According to the user who reported this bug, GoogleAuthLibraryCallCredentials works on emulators running API levels <= 18 but on physical devices the use of GoogleAuthLibraryCallCredentials causes the app to crash with a VerifyError (https).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3526
SSL offload best practice? · Issue #3526 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What JVM are you using (java -version)?
I've developed a backend API for mobile and desktop application using gRPC, its now ready for online, but I can not find any documents about SSL offloading.
In traditional HTTP + JSON backend API, we often put a Nginx box between clients and application servers, client talks to Nginx with HTTPS, and Nginx talks to application servers using HTTP. But as this issue indicates, Nginx doesn't support sending http2 traffic to upstream servers yet, and we can't do the same thing we gRPC APIs.
I've searched a lot, and find nghttp2 and envoy, but I do not know whether its mature enough, I want to using something proven robust and stable like Nginx.
Any suggestions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3532
ProtocolNegotiators.TlsNegotiator overwrites existing SSLParameters · Issue #3532 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9"
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
I'm using a Netty ManagedChannelBuilder and I set it to use an SslContext configured for h2. Netty's SslContextBuilder will configure the Java9SslEngineWrapper that calls the SSLParameters#setApplicationProtocols with the {h2} array value to enable the client to use the ALPN extension. The ALPN extension is not sent by the client because the SSLParameters is overwritten by  ProtocolNegotiators.TlsNegotiator and the existing SSLParameters are lost.
What did you expect to see?
I expect that the current SSLParameters to be preserved.
What did you see instead?
The client is not able to perform negotiate the h2 protocol during the TLS handshake.
I installed locally a version of io.grpc:grpc-netty with the following change to ProtocolNegotiators#TlsNegotiator and it worked fine:
This implementation is more conservative and modifies the current SSLParameters which preserve the application protocols for Java 9.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3534
ManagedChannelImplTest.orphanedChannelsAreLogged is flaky · Issue #3534 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Insufficient attempt at a fix and some comments in #3490
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3536
NettyServerBuilder difference between executor() and workerEventLoopGroup() · Issue #3536 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
N/A
What did you expect to see?
More documentation
What did you see instead?
N/A
What is the difference between setting an executor(Threadpool) and setting a workerEventLoopGroup(EventLoopThreadPool) on NettyServerBuilder.
If I understand, all the IO operations (accept connexions, read/send packet...) are done by the boosEventLoopGroup thread.
But what about the RPC call themself ? Are they done by executor threadpool or workerEventLoop ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3537
Add best-effort detection of queuing to ThreadlessExecutor after draining complete · Issue #3537 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
During use of a specific client, netty begins to detect memory leaks, and my app eventually run out of direct memory.  My app eventually begins to receive OutOfDirectMemory errors which occur much later than the leaks are detected and manifest mostly as an immediate UNKNOWN status from the blocking stub.  The stack trace of what that looks like is below.
I'm using multiple gRPC and Netty clients, and even after leaks are detected and even after I see the stack trace above begin to be logged, it appears that these netty and grpc clients will continue to operate normally as long as their connections are maintained.  Upon attempting to create new connections, they fail, and the tcp estab errors are capable of being detected at the os layer and show up in metrics dashboards.
Here is the report from the leak detector:
Most interesting to me is io.grpc.netty.FixedHttp2ConnectionDecoder.decodeFrame(FixedHttp2ConnectionDecoder.java:119) in the netty report above, it looks like this method declares it can throw and maybe is and something gets into a weird spot?
The server implementation looks like approximately this:
I'm wondering if maybe the onCompleted() calls coming in behind an onError() call might race and cause an issue in the header frames getting flushed and then decoded?  I plan to move the onCompleted() up into the try block, and give this another attempt, but I'm pretty stumped as to what's happening here and would like some advice.
Thank you in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3545
LoadBalancer gets handleSubchannelState calls after shutdown · Issue #3545 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Subchannel State is SHUTDOWN
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3546
Context/CancellableContext should provide a try-with-resources utility · Issue #3546 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This will make user code cleaner in some cases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3547
Interoptest failing in GAE · Issue #3547 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Fails for both jdk7 and jdk8:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3548
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream · Issue #3548 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java 8
We are seeing a lot of warning messages from Netty shown below on gRPC server side. Could someone shed some light on why we are seeing these warnings?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3553
Make sure retry and hedging implementation handle balancer drop correctly · Issue #3553 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As mentioned in #3355. RPCs dropped by LoadBalancer should never by retried. We should also decide how hedging implementation should deal with dropped RPCs. We should have unit tests to cover them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3556
SSL Related Methods in  ManagedChannelBuilder  · Issue #3556 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
We use NettyChannelBuilder for real world use and InprocessChannelBuilder for tests. The problem, if we have to use SSL, we need to typecast the ManagedChannelBuilder to NettyChannelBuilder and call sslContext. However in tests, this fails because InprocessChannelBuilder does not have the sslContext method. We need to do an instance check and then type cast.
Instead similar to how usePlainText has been added to MangedChannelBuilder, can we add the following methods to ManagedChannelBuilder
negotiationType(NegotiationType) - Currently there are two versions of NegotitationType enum defined, one in netty module and another in http. Is there a reason to have two? or can we combine them and add it to core?
'sslContext(SslContext)' - This would require adding netty-handler module to core as a dependency. In the AbstractManagedChannelImplBuilder we can just throw UnsupportedOperationException. NettyChannelBuilder will continue to have its current implementation and InProcessChannelBuilder will just return this.
sslSocketFactory(SSLSocketFactory factory). In the AbstractManagedChannelImplBuilder we can just throw UnsupportedOperationException. OkHttpChannelBuilder will continue to have its current implementation and InProcessChannelBuilder will just return this.
This way we do not have to check for the instance type and cast. Switching between the actual channel builder and InprocessChannelBuilder would be very seamless.
What do you think about this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3557
ClientCalls.ThreadlessExecutor should reject Runnables after end of RPC · Issue #3557 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As seen in #3537, the executor was being used for multiple RPCs which caused some Runnables to be queued but never run. We are in a position to know they will never execute though, so it'd be nice to have a (possibly unreliable) detection of rejected Runnables to notice issues like this earlier.
This could be accomplished with just a volatile shutdown boolean that is checked before execute() and a shutdown() method. That's racy, but we're just wanting it to detect bugs, not provide correctness.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3560
API report for gRPC Core · Issue #3560 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Here is the report on API changes and backward binary compatibility for the gRPC Core library: http
The report is generated by the https tool for jars at http: according to the article https:.
Hope it will be helpful for users and maintainers of the library to be aware of API changes.
Feel free to request other gRPC java modules to be included to the tracker if you are interested.
Also please let me know if the tool should not check some parts of the API (it checks all public API methods and classes by default).
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3562
Many java cloud_to_cloud and cloud_to_prod interop tests failling: " No ServerStreamTracer found" · Issue #3562 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3563
How can the server distinguish between "client cancelled" and "client timed out"? · Issue #3563 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0_65
What did you do?  
I understand why this is the case - the client times out first & sends a cancellation, which the server processes prior to its own (apparently network-padded) Deadline expiring.
For our internal metrics, however, we want to track "the client cancelled the RPC early" as distinct from "the client timed out the RPC" (which, for our purposes, is the same as the timeout happening at the server side).
Is this possible?  I don't want to reverse the server's pad-deadline-because-network logic.
It seems like I need to hook into the server code that handles the client's "send cancellation upon timeout" signal, and hope that differs from the client's "send cancellation upon cancellation" signal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3571
InProcessTest is flaky · Issue #3571 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also on: https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3575
On Windows, when doing a heartbeat check of a Grpc server using Socket, Grpc has very noisy logging · Issue #3575 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Issue only reproduces on Windows operating systems.
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Open cmd prompt and run gradlew startServer
Open another cmd prompt and run gradlew runHeartbeat
Notice each time you do a heartbeat on Grpc's port you get this INFO stack trace:
What did you expect to see?
No log noise on a SocketHeartbeat that is gracefully closed on the client side.
What did you see instead?
Lots of log noise with the stacktrace on a SocketHeartbeat that is gracefully closed on the client side.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3578
Stress test client hangs · Issue #3578 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@zhangkun83 I looked at the code in #3517 and didn't see any obvious cause for this issue. Do you have some insight into whether this is an error in our stress client, a problem in gRPC, or a bug within the Census library?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3582
Grpc fails to build with Windows 7 + MSys2 (with MinGW-W64) + Bazel · Issue #3582 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
I was trying to compile a project that depends on grpc-java
To reproduce, simply write a bzl file that includes the five lines mentioned later.
Then build the project with Bazel
What did you expect to see?
I expect to see the project successfully built.
What did you see instead?
Manually modifying lines 32 to 36 in java_grpc_library.bzl solves the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3585
Bazel java_grpc_library(flavor="lite") doesn't work out-of-the-box · Issue #3585 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Git master (@8187f1e)
What JVM are you using (java -version)?
What did you do?
Configured a Bazel project with @grpc_java pointing at this codebase (and protobuf deps as per the Bazel native protobuf rules, pointing at latest protobuf code), added a java_grpc_library(..., flavor = "lite") rule.
What did you expect to see?
Successfully generated & compiled code from bazel build.
What did you see instead?
A number of different build problems, starting with no such package '@com_google_protobuf_java_lite//'. Details for working around them below.
I've managed to successfully build an Android client using a lite-proto java_grpc_library, but it involved doing the following changes:
Adjust deps added by the java_grpc_library macro

This removes @grpc_java//protobuf from being added unconditionally, as it was pulling in the non-lite protobuf runtime into the resulting APK. It's replaced by @grpc_java//protobuf-lite:protobuf_lite instead. It also renames the javalite remote repository from @com_google_protobuf_java_lite to @com_google_protobuf_javalite, because the latter name seems more "canonical", in the sense that it's what Bazel native java_lite_proto_library rules implicitly depend on.
Note that the protobuf issue 2762 referred in the TODO has been closed for a while now.
I'm not sure if //visibility:public is the right choice, but it matches the //protobuf:protobuf target. I've also changed the protobuf dependency from protobuf_java to protobuf_java_lite, as this was again pulling the non-lite runtime in the resulting APK. Ditto for the issue in the TODO.
Add missing indirect dependency to //stub
AbstractStub's @DoNotMock annotation was causing a "[strict] Using type com.google.errorprone.annotations.DoNotMock from an indirect dependency" build error.
If you think these are changes that should actually be made upstream, I'm happy to submit them as a PR (though they're pretty trivial).
Two caveats:
I still have a "DEBUG: Multiple values in 'deps' is deprecated" warning from my java_grpc_library rule, because I had to list the java_lite_proto_library targets of all the messages used by my service. It's possible I'm misconfiguring this. Should I instead put all the proto_librarys as deps of a single java_lite_proto_library? How would I share those with Java code that doesn't need gRPC?
I couldn't figure out how to make well-known protos to work. I think that's an instance of protobuf issue 1889.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3586
Random javax.net.ssl.SSLException: handshake timed out  · Issue #3586 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
Call the server from client
File file = new File("ca-chain.cert.pem");
What did you expect to see?
No timeouts
What did you see instead?
This behavior happens randomly like 5% of the time, I tried calling the process using multiple threads(500) to reproduce the problem locally, no luck!, this happens in our Kubernetes environment
A way to set handshaketimeout
On Client side
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3587
Open source the cronet unit tests · Issue #3587 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today, we only have the cronet production classes but no unit tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3593
netty SSL is wrong · Issue #3593 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
I  think do not need jetty alpn.
but:
netty has not load native library
In netty OpenSSL
the library name is:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3600
Metadata not being propagated between client adn server · Issue #3600 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.3.0
What JVM are you using (java -version)?1.8
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see? Metadata being propagated
What did you see instead? No metadata available in server interceptor
I am trying to send a subscriber id from the client to the server, both in java.
On the client side
The value is null and I dont understand why. It is working when running in-memory tests but when deployed no luck.
I see that the header is added to the metadata in the client interceptor but is not available in the server interceptor when printing the keys there are 3 default keys from gRPC
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3605
Tracking AbstractStub.withExecutor being experimental · Issue #3605 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3612
running gradlew java_pluginExecutable fails with error · Issue #3612 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-2ubuntu1.17.04.3-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Followed steps in readme in Compiler folder.
Specifically, ran $ ../gradlew java_pluginExecutable
What did you expect to see?
I dont know. I havent run this command before.
What did you see instead?
This happens on both master and v1.7.x branch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3613
Tracking io.grpc.testing.DeadlineSubject being experimental · Issue #3613 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3621
Need lots more examples · Issue #3621 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is intended to be a dumping ground for the moment.
waitForReady
channel state API to pre-connect
example NameResolver (with SPI) (both polling and non-polling)
channel/server.executor()
auth (custom client-side and server-side verification)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3622
Question:How can I get the a field name? · Issue #3622 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For example, I want to get the field name "a", how to do？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3623
CensusStatsModule.ServerTracer.fullMethodName is initialized but not used anywhere · Issue #3623 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3624
Make GrpcServerRule more customizable · Issue #3624 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently it's not possible to customize the in-process server before it's built, e.g., adding ServerTransportFilter or ServerStreamTracer factory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3630
OkHttpChannel ignores idleTimeout when reconnecting · Issue #3630 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
OkHttpChannelBuilder.idleTimeout(60, TimeUnit.SECONDS)
Then initiate an RPC with Deadline, which fails after Deadline exceeded when GRPC server is unreachable. Give up and make no more RPC calls.
What did you expect to see?
Because there are no remaining RPCs, OkHttpChannel stops attempting to connect after idleTimeout and changes channel state to IDLE.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3632
quickstart example fails on step 1 with jdk 9 · Issue #3632 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9.0.1"
Java(TM) SE Runtime Environment (build 9.0.1+11)
Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
followed instructions here:
What did you expect to see?
step 1 to succeed
What did you see instead?
Upgrading to gradle 4.2.1 fixes this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3633
Java 9: cannot find symbol javax.annotation.Generated · Issue #3633 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3634
Ranged version in grpc-netty cause maven-metadata download every build. · Issue #3634 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
I found following maven config in grpc-netty-1.7.0.pom:
Please don't use ranged version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3635
android-interop-testing proguard fails mentioning DeadlineSubject · Issue #3635 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We could ignore the warnings, but I don't understand why DeadlineSubject is being kept. I also don't know what caused this to break. It might be fair to do a bisect.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3636
Remove MethodDescriptor fields from codegen · Issue #3636 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of #3618 , method descriptor fields are deprecated, and the getter fields are now preferred.
We should remove any accesses to the static fields and then remove the fields from codegen.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3639
please provide a way to expose client host / ssl certificate information · Issue #3639 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
(This assumes mutual authentication is enable)
In our production environment, we use the tls certificate's common name as the client (/server) identity.  Our servers need access to the the client identity in order to perform application specific ACLs.
What did you expect to see?
In go/python, the server automatically populates the client's host/cert info into the context, and the information are accessible via:
java should provide an equivalent interface for accessing these information.
What did you see instead?
The information are available within the netty grpc core (SSLEngine.getSession(), but afaik, are not exposed to the user in any way).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3643
testing should be a Bazel package · Issue #3643 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, much of the repo is usable as a Bazel external repo through the provided BUILD.bazel files. This allows Bazel users to express dependencies like @grpc_java//core.
testing should also have a BUILD.bazel file, so that Bazel users use things like GrpcServerRule. (Currently, Bazel users can use this by depending on the grpc-testing Maven jar, but depending on both Maven and Bazel versions of grpc-java seems like a bad idea in the long run.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3644
Allow manual registration of Providers · Issue #3644 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some providers need configuration (e.g., Cronet needs Android Context, this Eureka resolver). We should consider having add/remove registration methods to manually register during app startup. This is probably a more common problem for name resolvers, and is easier to do with name resolvers, so they should probably be prioritized.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3648
Why is the message input stream not closed? Possible memory leak? · Issue #3648 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I discovered this while sending a relatively high throughput of requests (about 500 messages per second). Which started causing undefined behavior in my application.
According to, https
each InputStream instance is never closed after putting it on the wire. When sending many messages at once, this can cause a possible memory leak?
Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3650
Bazel: java_grpc_library rules can not be used from another repository (contains fix) · Issue #3650 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
openjdk version "9-internal"
OpenJDK Runtime Environment (build 9-internal+0-2016-04-14-195246.buildd.src)
OpenJDK 64-Bit Server VM (build 9-internal+0-2016-04-14-195246.buildd.src, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Import Bazel rules in a proto repository from another proto repository
What did you expect to see?
The other repository should be useable with Bazel
What did you see instead?
Build errors
I traced this here:
The error disappeared after changing it from
The -I imports already define aliases, but whatever src.short_path produces is prefixed with ../ and the proto-repo workspace name. That directory is not available in the build directory of the importing repo.
After this change, it worked in both the proto repo and the repo importing it.
If required, I can work on a reproducer or provide additional details - @-mention me in that case.
I still hope the description is sufficient... 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3660
Running examples on the master are failing · Issue #3660 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cloned the repo, tried to run the examples and it failed:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3664
Reconsider how method descriptor marshallers work · Issue #3664 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Marshallers have a lot of small problems that need to be address in 2.0.  We should take a look at how to make this better
Marshallers lack a "marshal"  method, unlike most other "-er" types in java.
Marshallers are also unmarshallers.   Instead they should be split into distinct types
Reflection and default instances are hacked in as ReflectableMarshaller and PrototypeMarshaller.  Instead they should likely be tagging interfaces instead of extensions, or separated out entirely.
The probably shouldn't use InputStream.  It's an awkward class that has to be worked around using KnownLength.  The reading loop is annoying, and its hard to read it using helper libraries.  It isn't zero copy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3666
Examples load with errors in Eclipse · Issue #3666 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
git clone git@github.com:grpc/grpc-java.git
Then load the Maven project in latest stable Eclipse (Oxygen.1) via:
Then run maven clean and maven generate-sources.
What did you expect to see?
The examples open in Eclipse with no problems whatsoever.
What did you see instead?
The project has 72 Java problems:
What operating system are you using?
in two terminals shows that the example code works as expected.
Perhaps this is an Eclipse/Java problem?
I searched through the issues but found nothing similar at a first glance.
Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3671
Add @CheckReturnValue to CallOptions.withX() methods · Issue #3671 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This would help prevent errors like the following toy example
This is incorrect
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3676
GAE+jdk7 regression introduced by ProxyDetector · Issue #3676 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
RPCs will just hang because ProxyDetectorImpl tries to use ProxySelector, resulting in this error:
java.net.Authenticator also has security restrictions and will likely have this problem. The solution is probably to check with the java.security.AccessController before performing the action, and falling back to no proxy if we fail. Since app engine is a highly restricted environment, do we even need to come up with an alternate way to configure a proxy here? @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3684
WARNING: Received unexpected ping ack. No ping outstanding · Issue #3684 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?
I see lots of these lines:
Looks like just a warning, but I wanted to know if this could be some network issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3685
Use exponential backoff in DNS resolver · Issue #3685 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In places like #3268, people are experiencing a long delay for DNS to resolve addresses after a failure. Since we're using exponential backoff for the connection retry, we should maybe also use it for initial DNS resolution instead of a hard-coded 60 seconds. This would reduce the need for users to plumb #2169. While #2169 is "a good thing," simply having better behavior by default is also "a good thing."
The problem we encounter today is if initial DNS resolution fails, it is retried every 60 seconds. (Note that exiting idle mode re-creates the DNS name resolver, so it should be considered "initial" resolution.) If later DNS resolutions fail, then we are fine because:
We will continue using the old addresses, and
Because after each connection attempt we'll call refresh().
But if the initial attempt fails then there won't be an InternalSubchannel and it won't fail periodically which won't trigger refresh().
So there's two ways to trigger the backoff:
implement the backoff in DnsNameResolver directly (so we don't block new connections), or
periodically trigger refresh() if the initial resolution fails (if the addresses are bad we will still do exponential backoff).
(1) is more straight-forward, but (2) would benefit all name resolvers. Since name resolvers notify the ChannelImpl on failure it should be possible to do (2) within ChannelImpl. It may also be possible to plumb things through the LB, such that failed name resolution still creates a subchannel but with zero addresses, and that subchannel could do backoff like normal and trigger refresh().
CC @ericgribkoff, @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3686
Access responseObserver within server interceptors? · Issue #3686 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want all my calls to my server to return back a response, even if some error occurred on the server.
Sample interceptor on my Server with onMessage that looks like:
Is it possible to call onNext from within an interceptor? Or is there any workaround to accomplish this?
Thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3688
Support smooth network changes · Issue #3688 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
On Android, create channel with non-streaming and streaming calls. Change data network from cellular to WiFi. (standard mobile use case)
What did you expect to see?
New calls are started over WiFi. Existing calls receive an advisory notification, enabling them to finish up while the cellular network is still available and smoothly start a new call over WiFi, possibly concurrently to the existing call.
What did you see instead?
All call activity continues on cellular data network until the OS yanks it (30 seconds on Nexus 6, Nougat). Communication is disrupted until channel transport is reestablished over WiFi.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3689
Provide notification on call when transport is shut down · Issue #3689 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This can apply on server-side when the server as a whole is shutting down and also when MAX_CONNECTION_AGE is triggered for a particular transport. It would just be a notification to allow the application to perform a graceful call closure.
It'd also be useful on client-side, especially on mobile (#3688), when connections are being migrated.
There may be concerns of both the client and server reacting at the same time. It should also be noted that in some cases only one side may receive the notification (i.e., when a L7 load balancer is involved).
I don't think any language provides this today. If it is deemed useful, this should be a cross-language feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3694
Integrate gRPC Cronet with build system · Issue #3694 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have open-sourced the gRPC Cronet transport, but it is not yet integrated into our build system. Cronet does not currently supply packages, just binaries on GCS, so we will have to be slightly creative here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3700
some jars or java files are missing in examples module !! · Issue #3700 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
when using examples，io.grpc.examples.helloworld.GreeterGrpc；io.grpc.examples.helloworld.HelloReply；
these classes are missing.
What did you expect to see?
no error
What did you see instead?
no dependencies(examples above)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3701
NullPointerException when create channel with hostname contains '_' underscore · Issue #3701 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
Create a channel with hostname contains underscore ('')
ManagedChannelBuilder.forTarget("host_1").usePlaintext(true).build();
It is due to the java.net.URI return null on getHost() when hostname contains ''.
We understand that '' is not align with standard, but many systems support '' nowadays, and is hard to avoid.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3702
java.lang.NoClassDefFoundError: io/grpc/BindableService for Java app. · Issue #3702 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_151"
Java(TM) SE Runtime Environment (build 1.8.0_151-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Since I don't really understand why this problem is occuring, I've been different methods to get the project working but it keeps throwing the same error. Things I have tried so far are, changing the grpc dependency versions. Setting option 'enable_deprecated=false' to true as well. Cleaning the project to regenerate the generated sources.
What did you expect to see?
The Java app to run on my Windows 10 computer using Android Studi 3.0 IDE. Android Studio is able to install Android app on an Android device (Nexus 7 in this case), but since there is no server, it doesn't have any thing to communicate with.
What did you see instead?
I got this error upon running the java app
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3703
DnsNameResolver don't use provided executorPool · Issue #3703 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_112"
Java(TM) SE Runtime Environment (build 1.8.0_112-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)
What did you do?
What did you expect to see?
Will not be created additional thread for rpc call expect configured before.
What did you see instead?
In my case grpc still use default CachedThreadPool and creates at least 32 thread.
It's occurs because DnsNameResolverProvider creates DnsNameResolver with default shared executor, instead of use provided for ManagedChannel: https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3706
Stabilize ServerBuilder.handshakeTimeout · Issue #3706 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3707
Missing TransportTracer unit test for local flow control window · Issue #3707 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty{Client,Server}Handler tests currently only check that the remote flow control window stat.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3712
Backport OpenCensus update (#3647) onto 1.8 release branch · Issue #3712 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#3647 was merged after the release branch was created, so it needs to be cherry-picked.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3713
Stabilize useTransportSecurity API on ManagedChanneBuilder · Issue #3713 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This allows the consumer of a builder to swap back from plaintext. ManagedChannelBuilder.useTransportSecurity()  is similar to ServerBuilder's method, but without args) method which will reverse the usePlaintext().
For Netty, useTransportSecurity() would be the equivalent of negotiationType(NegotiationType.TLS).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3721
Callbacks for analyzing the State of the Channel · Issue #3721 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's more of a question rather then an issue. I want to be notified about the channel state every time it changes. However I couldn't find any API for that. The only method that I could find was notifyWhenStateChanged(), however the problem is, this method only gets called once.
Ideally the callback of this method should be called every time the state changes from the current state the channel is in.
The really dirty workaround I have implemented to get notified about the connectivity status is to call
channel.getState(true) periodically after every X milliseconds. Then I return the state of the channel in my own callback.
Is there a way to figure out when:
The client gets disconnects from the server
The client is connected with the server
The client is able to send messages to the server & receive messages from the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3722
FRAME_SIZE_ERROR: 4740180 (Wifi only) · Issue #3722 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Hi everyone,
I am reporting an issue that concerns more than 100 users in our production environment.
It seems to already have been reported on the issue #2436 but I am sure I am connecting to the right gRPC server.
Every web API call throws the same FRAME_SIZE_ERROR exception.
Users that reported the issue have different smartphones, Android versions and network provider.
If we ask them to switch from wifi to mobile data, everything works fine. Is there any chance that some wifi routers configuration or network provider cause this issue?
This issue seems to happen since we moved to gRPC from the version 1.2.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3725
Maybe add Status.withCode · Issue #3725 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unlike other fields in Status, there is no with method to preserve the code.  This is surprising and makes it  harder to change a status code.
Would have been useful here: https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3734
Netty appears to stop accepting new connections after 2h when TLS is enabled · Issue #3734 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)
What did you do?
Start a server with any service definition and TLS enabled and leave it idle for 2h
What did you expect to see?
Client calls succeeding
What did you see instead?
Client calls timing out
Just to clarify, this is independent of keep-alive issues with StreamObservers - totally fresh clients (new jvms) time out on simple unary calls that worked 2h earlier, only remedy is to restart the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3746
Make ServerImpl's internalClose thread-safe · Issue #3746 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So we have this in ServerImpl.JumpToApplicationThreadServerStreamListener:
We should fix that. There's two ways to fix this
Allow truncated messages in our stream and deliver trailers. This would be nicest and would be helpful in other cases (like if too many requests are sent in a server call), as we can deliver a message to the client
Treat this as a cancel and send RST_STREAM. This would be similar to client-side cancellation, but we'd still need to verify it'd be safe on server-side.
In either case it'd probably be good if we made this trigger onCancel instead of onCompleted. That'd probably happen naturally for (2), but (1) would need special plumbing, but it's probably not too onerous.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3747
UNAVALIABLE status documentation · Issue #3747 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the documentation for Status.Code there is this (in FAILED_PRECONDITION comment):
A litmus test that may help a service implementor in deciding
From this, I had assumed that UNAVALIABLE could be used to inform the client that they could retry the call with no regard to possibly modified state.
However, from #1053, it looks like UNAVALIABLE may be sent by the gRPC client if there is a network error during the response, which means the client cannot blindly retry the call.
It would be nice if UNAVALIABLE did guarantee idempotency.  Otherwise, the documentation might be updated to avoid giving the wrong impression.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3756
io.grpc.StatusRuntimeException: INTERNAL: No value received for unary call · Issue #3756 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3762
ManagedChannel getState/notifyChanged API docs · Issue #3762 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using gRPC 1.7 (on Android) and notice the docs for ManagedChannel still say this functionality is unimplemented (and the base implementation throws as it should). However, the MannagedChannelImpl (which OkHttpChannelImpleBuilder uses) has this implemented. Is this an oversight or on purpose? It caused me to dive into the issues (culminating in #2292) to figure out if this was actually supported yet (I've determined it is). Should the docs be updated to something a little more helpful?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3763
ManagedChannel state/notify API · Issue #3763 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like to actually observe connectivity status on a gRPC channel so I can reflect the state in some other code (UI or whatever). Using the current API yields something like:
which is a little unwieldy (I haven't tested that either so might not be exactly that). Is there any interest in a nicer API? Or is that an exercise left to the user?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3777
largeUnary interop test flaky: wrong method name in stats check · Issue #3777 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seen here: https on PR #3776.
@zhangkun83 Any thoughts on this? My first thought was to blame my #3754 PR, but it looks like this is on the server side, and the server stream doesn't have to worry about multiple streams per call so it shouldn't be impacted even if there were a mistake in #3754.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3780
Can´t build HelloWorld Android project · Issue #3780 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
v1.7.x
What did you expect to see?
want to activate instruction 'gradlew installDist'
i referenced and followed this page https: and https
but, it doesn't work on my cmd window
what is the problem!
What went wrong:
Could not resolve all files for configuration ':protobufToolsLocator_grpc'.
Could not find io.grpc:protoc-gen-grpc-java:1.7.1-SNAPSHOT.
Searched in the following locations:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3781
You don't have permission to use the application 'protoc-gen-grpc-java-1.7.0-osx-x86_64' · Issue #3781 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I am trying to build my application that uses protocol buffers. But I am getting the error shown in the screenshot attached.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3787
grpc-okhttp 1.8.0 pom file has error, prevents build · Issue #3787 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
From grpc-okhttp-1.8.0.pom:
Instead I saw a version number enclosed in brackets, which causes the build to fail:
I checked the JCenter version at https
There may be 1.8.0 pom files from other grpc-java artifacts with the same problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3788
grpc mutual authentication issue · Issue #3788 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
To enable ssl mutual authentication
Actual behavior
Using PKCS11 as keystore provider and loading certs from HSM.
Client fails during mutual authentication with following error and stacktrace
Steps to reproduce
Works with JKS store provider but while using PKCS11 it fails.
While debugging it finds 4 matching aliases but it is not able to respond to the server.
Minimal yet complete reproducer code (or URL to code)
Server Code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3797
Cronet transport Received DATA frame for an unknown stream · Issue #3797 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Bidi streaming in android works with okhttp transport, but fails with cronet
Every 10 seconds or so after the bidi stream is created and messages are streamed successfully I receive the following exception
@ericgribkoff Probably you will need a repo with a reproducible code, but I am not sure when I will be able to create it. Anyway, i will create this issue maybe it will help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3800
gRPC subscription fails with UNAVAILABLE EOF Error · Issue #3800 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
no failiure
1st I do a Login call using the same ManagedChannel, which works fine. But then the next subscription request always fails with similar error as following.
Following is the stack trace.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3802
SHA-1 failure for proto-google-common-protos-1.0.0.jar · Issue #3802 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Platform: Ubuntu 14.04
Bazel version: 0.8.0
If I run the Bazel build with:
I get:
It can be fixed by updating the SHA-1 in repositories.bzl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3807
Failed to mark a promise as failure because it has succeeded already · Issue #3807 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.7
What did you expect to see?
We saw the following exception occasionally on the client side so that the server didn't receive the RPC:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3810
AbstractClientStream - Received data on closed stream · Issue #3810 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
gRPC version
grpc core 1.7.0
Synopsis
Using Google Pub/Sub GrpcSubscriberStub for batch pulling of messages per
I occasionally see the INFO logging message ...
AbstractClientStream - Received data on closed stream
My code is not experiencing any exceptions and everything appears to work as expected.
Looking at the code, there is also another INFO logging message ...
Resolution
The code / class AbstractClientStream should be configurable as to whether this INFO logger messages above are emitted.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3811
[python] Need more control on when the client side of the stream is closed · Issue #3811 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Currently, on the client side, after the generator completes it sends a close for the client's send channel.  This is perfectly legal, however, it seems to cause some issues with with a gRPC server in Java, or perhaps it's how it's been implemented in this particular case.   In this case, the server assumes, when it receives a half close from the client,  that the client is done and no longer interested in receiving events from the server.
There seems to be no issues using go or node clients with this particular server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3815
Why grpc-java instead of grpc+JNI · Issue #3815 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there some background into why grpc-java ended up being created instead of attempting grpc C + JNI bindings? Was performance an issue? Maybe it didn't play well with the concurrency paradigm?
Thanks - this will be insightful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3819
ServerCallImpl.internalClose triggers onComplete, not onCancel · Issue #3819 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When we get an outbound error with ServerCallImpl, we call internalClose(Status). However, it calls stream.close() exactly as if the client closed the RPC.
So the transport thinks this was an application-requested failure and so will call onComplete(). It should call onCancel() instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3821
Upgrade version for com.google.api.grpc:proto-google-common-protos · Issue #3821 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the following targets:
The "1.x" version I think should be used in gRPC as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3822
Add Context.Key.create and createWithDefault · Issue #3822 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We'd like to remove needless differences between Attributes.Key, CallOptions.Key, and Context.Key. The Context.key() and keyWithDefault() is actually a bit weird today, and not something we'd like to copy. But we'd like to add the create methods to Key for consistency.
We will leave the current key() and keyWithDefault() methods. Just add new methods.
Related: #1869, #1764.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3824
use ServerBootstrap to start then start grpc server with same port don't throw BindException: Address already in use · Issue #3824 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
throw BindException: Address already in use
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3825
after server shutdown client  trigger StreamObserver.onERROR(io.grpc.StatusRuntimeException: UNAVAILABLE: Network closed for unknown reason) , client can still be invoke onNext without throw any Exception ？ · Issue #3825 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
after server shutdown client  trigger StreamObserver.onERROR(io.grpc.StatusRuntimeException: UNAVAILABLE: Network closed for unknown reason) , client can still be invoke onNext without throw any Exception ？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3826
server performance issues · Issue #3826 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi grpc-java guys, I have wrote some programs to do the performance testing for grpc-java. The service is very simple, just echo the strings (about 400 bytes per request) received from clients. (Actually, I disabled servers' log.) Appears that it's is difficult for me to archive high requests-per-second and low response-time.
My environment and configurations are listed as follows.
Environment: 48 cores/128GB memory/10000Mbps net/CentOS Linux release 7.2.1511
According to the thread dump, many worker threads stick to SerializingExecutor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3835
Android examples fail to build with minify enabled · Issue #3835 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran into an issue with minify when testing out release builds of my project. So I built the android examples normally, which works, but when I change:
Same issue with my own project, but with a few more unresolved classes. (Note it's the Warning 21 unresolved references... that causes the build failure.)
I'm pretty sure I can just ignore these? Is there any formal direction on the preferred way to resolve this issue? I am not sure why there is a discrepancy between Google's minify and proguard. It would probably be good to have the examples work with minify now that it's the suggested option especially if you rely on multidex (which is the case for many Android apps now).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3836
Reflection service does not consult ExtensionRegistry · Issue #3836 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It just notices extensions that are pulled in from the services themselves. That'll miss most extensions.
We'll probably need to add a getter to ProtoLiteUtils.
This may be a good time to add an extra getter/setter to ProtoUtils (that can call ProtoLiteUtils for now). It'd be an ExtensionRegistry instead of ExtensionRegistryLite. But at the same time ExtensionInfo doesn't provide much more info than a instanceof would provide, and it means going through the immutable/mutable weirdness in the API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3841
Security support like Kerberos · Issue #3841 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Still in the stage of investigation, not in production use.
What did you expect to see?
Is there any plan on supporting more security features, including authentication, authorization, and encryption. For example, I would like to specify that only certain users can execute certain services; I would like the data is encrypted on the fly by the RPC framework; I would like to use Kerberos for authentication and authorization in the production system which is required by certain industries like finance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3842
Support Digest Authentication for Proxies · Issue #3842 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to figure out if the BigTable HBase client supports digest authentication. The google bigtable team asked me to check here.
What version of gRPC are you using?
Whatever the latest bigtable hbase client is using.
What did you expect to see?
digest authentication.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3843
Race in io.grpc.internal.MessageFramer.commitToSink · Issue #3843 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
messagesBuffered seems to be updated on error and from the application thread.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3849
How are gRPC calls mapped to HTTP/2 streams · Issue #3849 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Where can I find documentation on how gRPC calls are mapped to HTTP/2 streams? More specifically, what are the HTTP/2 setup in the client-streaming, server-streaming, and bidirectional-streaming cases. I tried to run the io.grpc.examples.routeguide example with WireShark attached. However, I wasn't able to find and HTTP/2 frames being exchange.
Thank you very much for you time.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3854
io.grpc.StatusRuntimeException: UNAVAILABLE · Issue #3854 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
can anybody give me some advice.
Thank you so much
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3856
Netty Flow Control tests have data races · Issue #3856 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The window size read from the testing thread should be executed on the event loop.  Since this test is flaky, and fixing this race would make the test more flaky (but less racy), the test is being marked @Ignored.
This issue tracks reenabling the flow control tests and fixing the data race.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3857
io.grpc.Attributes - reference vs. object equality · Issue #3857 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is more of a question around the expected behavior of Attributes#equals and the notion of "attribute equality" as opposed to a bug or an issue. For context, we have some tests internally that are failing in 1.8 as they were written with object equality in mind.
For example, the following fails in 1.8 but passes in prior versions, which upon immediate inspection wasn't intuitive, as InetSocketAddress#equals returns true when comparing the two different objects:
I'm interested in the motivation for the change in semantics (talking with @lukaszx0 in person, he recalls some talk about this previously). If reference equality was the intention, perhaps we could tighten up the javadoc a little to make it more explicit that this class now uses reference equality as opposed to object equality?
Or, perhaps this wasn't the original intention and it would be possible to revert to using a HashMap, although the benchmarks seem to indicate this would be slightly slower than the current impl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3864
Freshly checked out code does not build in Intellij IDEA · Issue #3864 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Also reproduced with 1.7.0 and 1.8.0 tagged versions, and the past three major releases of Intellij Idea.
Steps to reproduce
Check out the latest grpc-java code to a fresh directory
Open grpc-java with Idea
Attempt to build the project using the Build -> Build Project menu
The protobuf/test module does not compile, complaining about missing methods and type mismatches.
I was able to fix the protobuf/test module compilation by changing sourcesRoot to testSourcesRoot in protobuf-lite/build.gradle line 63.
I was able to manually fix io.grpc.netty.shaded.ShadingTest by explicitly adding the generated grpc-netty-shaded-1.9.0-SNAPSHOT.jar file to the grpc-netty-shaded_testShadow module using Intellij's Project Structure screen. This is sub-optimal. I was unable to find a solution using gradle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3873
google/api/annotations.proto no longer available · Issue #3873 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
It appears that with grpc 1.3.0 dependencies, we could transitively pick up com.google.api.grpc:proto-google-common-protos at 0.1.6 which published all the protos over here https however, newer versions no longer publish the protos, just the generated classes in the jar.  I found which appears quite old and is missing a number of types.  Unfortunately, the googleapis repo doesn't seem to allow the opening of issues and I'd found a related problem here #3410 where the same import was failing.
Is there an alternate location these protos should be sourced from for imports, or is there a place I can get in touch with the folks who own com.google.api.grpc:proto-google-common-protos to get them to publish proto files into the jar again?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3880
How to bypass hostname verification? · Issue #3880 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is an example of how to do this for grpc-go in here
And I'm looking for a similar solution for grpc-java.
I had been using overrideAuthority like this when the CN of the server certificate is known.
But I've come to a point where I can no longer keep doing this since the CN is not known beforehand. All I know is the IP address and port number in my use case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3884
Throw StatusRuntimeException in gRPC Proxy · Issue #3884 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What JVM are you using?
What did you do?
I would like to throw a StatusRunTimeException inside an interceptor, the relevant code piece is:
What did you expect to see?
I expected the same as if I use
within a gRPC stub, i.e. the client can catch the exception with status and description
What did you see instead?
Any recommendations how to tackle this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3887
grpc android mutual tls, how to send client certificate and key to server · Issue #3887 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I have done the server-side authentication, now I want to do client-side authentication, but I can not find a api to send my client certificate and key to the server, could you please give me some help?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3890
Can grpc-java share ports for other protocol services? · Issue #3890 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
like https but is go
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3891
proto-google-common-protos-0.1.9.jar' in project 'LogiVisual_java' cannot be read or is not a valid ZIP file	 · Issue #3891 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3893
Gradle plugin does not clean before regenerating, causing compile failures · Issue #3893 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The general contract for a gradle plugin is that execution causes the output to be valid with respect to the input. This is essential for gradle's performance and reliability. protoc-gen-grpc-java does not do this, because after a change to a .proto file, it leaves obsolete files lying around in the generated-sources directory. It should remove files which would no longer be generated (see the gradle Sync task), or at worst, delete all files in the target directory before regenerating.
At the very least, given that this task is somewhat difficult to configure and a doFirst block is not trivially obvious, add an example which uses a doFirst to delete generated files.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3906
java_grpc_library bazel rule has incorrect copy command · Issue #3906 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using the java_grpc_library bazel rule, and it fails due to "cp: missing destination file operand after ''.
If I change java_grpc_library.bzl (function _gensource_impl) in the following way, it builds properly:
Here's my WORKSPACE file:
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I expected to be able to use the java_grpc_library and have it build with Bazel without modifying the rule itself.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3907
How to get the ManagedChannel state? · Issue #3907 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want to get state of the ManagedChannel, but this class does not implement the “getState” and “notifyWhenStateChanged” method，how to get the channel state？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3908
bazel: android rules cannot directly depend on grpc java rules · Issue #3908 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Android rules to build properly when depending on java_grpc_library.
I'm getting this error:
in deps attribute of android_binary rule //android:android: 
Dependencies on .jar artifacts are not allowed in Android binaries, 
please use a java_import to depend on external/com_google_protobuf/libprotobuf_java.jar. 
If this is an implicit dependency then the rule that introduces it 
will need to be fixed to account for it correctly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3909
Any easier way to add method metric for grpc appliction? · Issue #3909 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want to add metric monitor to my application,
but i don't kown how and where to add my code is the best way.
is there any method I can hook method before execute and after execute done?
Any suggestion?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3910
Unable to execute quick start instructions with jave 1.8.0_121  · Issue #3910 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
following the instructions I attempted to checkout 1.8.0 but got the HEAD instead. I thing that is 1.10.0-SNAPSHOT.
What went wrong:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3918
Add dependencies checking between bazel and gradle? · Issue #3918 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-java got Bazel support in #2975, but grpc-java has no dependencies checking between bazel and gradle, so it would break their version consistency.
But I have no ideas how to check their version consistency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3919
compiler: clang: error: cannot specify -o when generating multiple output files · Issue #3919 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Configure project :grpc-compiler
What went wrong:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3923
Question:compile problem · Issue #3923 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
According to the guide, I add grpc-netty grpc-protobuf and grpc-stub to my pom.xml,  but I want to know  why not add grpc-core?
For protobuf-based codegen integrated with the Maven build system,
When using version 3.2 and 1.3, the compile result is ok.
My proto file: http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3926
Validation support · Issue #3926 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
NA
What did you expect to see?
A provision to validate input data in a meaningful way, preferably using bean validation 2.0 (JSR 380)
My assumption is that currently I have to do adhoc validation for every single request & it defeats the whole purpose of having a framework like bean validation.
Is there any plan to integrate this with bean validation?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3929
Create tool to detect accidental consumption of @ExperimentalApi and @Internal APIs · Issue #3929 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3938
Bump Android targetApiVersion to 26 · Issue #3938 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As will be required in Play store.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3954
Create BOM for grpc-java · Issue #3954 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A BOM provides versions for multiple libraries to aid keeping the versions consistent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3961
Drop support for Java 6 · Issue #3961 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This would allow using (at least some) Java 7 language features and more of the Java 7 API. Android support for Java 7 has advanced. We need to figure out exactly what restrictions we'll need, but on the surface things seem far enough along to push forward with the drop of Java 6 support.
We'd still support the subset of Java 7 that is used by Android; we're not willing to reduce our API level support for this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3964
server push · Issue #3964 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, grpc project team, I want to achieve when the client login system, the server records the client-related information, and then the server can push the message to the specified client at any time, push the message data structure is a variety of types, : Server should get the client connection, from the example you can see only the StreamObserver  responseObserver, but the T can only be a fixed type, is there any other way to achieve, please give a reference example, thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3966
Support Conscrypt on Android · Issue #3966 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This will allow OkHttp to use TLS1.2 even on Android API levels < 21. This was first brought up in #1906 and #3301, which exposed some issues with how gRPC OkHttp picks the security provider.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3968
Migrate the Android interop test app to protobuf lite · Issue #3968 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Nano is no longer supported by protobuf team. See https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3982
Tracking retry APIs being experimental · Issue #3982 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3985
Most of the functions in AbstractStub should be annotated with @CheckReturnValue · Issue #3985 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These functions create new instances rather than changing the internal state, e.g.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3989
java.lang.NoSuchFieldError: SSL_MAX_RECORD_LENGTH · Issue #3989 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running grpc 1.9 withio.netty:netty-tcnative-boringssl-static:2.0.6.Final on linux, I got following stacktrace.
The error is gone when running with netty-tcnative-boringssl-static:2.0.7.Final.
According to maven, grpc-netty depends on netty-tcnative-boringssl-static:2.0.7.Final. However, I didn't see it in release note. I think dependencies session in 1.9 release note needs update.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3990
When grpc program is ran using intellij+gradle, will fail to `libnetty-tcnative` resulting in: "OpenSSL is not installed on the system." · Issue #3990 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a grpc program that uses OpenSSL netty + netty-tcnative to implement TLS.
When I run it using the bundled product via command line, works fine.
When I try to run it within IntelliJ+Gradle... it fails to find the libnetty-tcnative-linux-x86_64.so leading to
What version of gRPC are you using?
What did you expect to see?
Expected it to be able to find that so and thus be able to run with openssl on the gradle/intellij build.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3991
When configuring TLS, getting vague error "Couldn't find the address for the requested channel"  · Issue #3991 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've got a TLS enabled grpc server that won't let me connect to it and I get a bland error: io.grpc.StatusRuntimeException: UNAVAILABLE: Channel closed while performing protocol negotiation
Issue happens on master branch.
OpenSSL version
OpenSSL 1.0.2g  1 Mar 2016
Reproducer
I am using the server certs from grpc-java/testing/src/main/resources/certs
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3996
Unexpected exceptions when server response or client request exceeds Max Message Size · Issue #3996 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
some unexpected exceptions are seen in the server log when a server response exceeds the max message size of the client channel or vice versa. Client log does show valid errors.
This issue is consistently reproducible with a hello world rpc example where request/response is a huge string with size greater than the default message size of 4MiB.
What version of gRPC are you using?
When server response exceeds max message size
Unexpected Exceptions in the server log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4001
Protocol Buffer Stream testing gRPC for a million messages in java · Issue #4001 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I am testing gRPC with a list of a million of items and sending this million of item by an stream.
But when I have sent a big amount of messages I have an exception for memory used, the single messages are short.
There is anyway to solve it?, In netty there are a way to send messages and flush the data. Did I have that opcion in gRPC?
I have this code on client:
using this code:
I have this exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4002
Can't seem to use self-signed certificates with grpc? · Issue #4002 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I need to figure out how to make a script that can generate self-signed certificates against a given host such as "localhost" for use with grpc TLS configuration.
Here is what I have so far:
I created a branch https to test this with. It includes the fix from #3997 that makes it so you can see SSL error messages in the logs for when the cert is not right.
I get the notorious sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
Can someone tell my why my ssl cert creation for self-signed isn't working? I thought because I have CN=localhost in the ssl cert generation, and I added my ca.pem to the trust manager that it would be able to certify "localhost"? Am I missing a step?
Full stack of error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4004
Steps to configure Mutual TLS in grpc-java? · Issue #4004 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I created a new HelloWorld with TLS enabled example here: #3992
So far I have only configured TLS. Not mutual TLS.
What would be the steps to enable Mutual Auth in this example?
The script added to https generates the cert files needed.
The grpc-java security.md says to do this:
OK no problem. But what does the client-side look like?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4006
Have LoadBalancers trigger NameResolver.refresh() · Issue #4006 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today we implicitly refresh the NameResolver when a transport disconnects. But we don't actually know if that disconnect is important. For example, with GRPCLB only the OOB connection to the GRPCLB server really impacts the addresses we use; GRPCLB will be telling us when a service backend should be removed from our list. Thus, the refresh is useless for all disconnections except from the OOB channel.
C today has the LB decide when to refresh. That seems pretty easy to implement in the normal cases and helpful in the complex cases. So we should consider doing the same thing.
Unfortunately, it does cause some problem for migrating existing LB implementations. Maybe if we see the LB manually call refresh() we disable the implicit refreshing we do today. Maybe something else.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4011
Document best practices for handling network connectivity changes on Android · Issue #4011 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This should document how to handle network connectivity changes on Android. This will only apply to OkHttp users, as Cronet internally manages and responds to connectivity state changes outside of the gRPC stack.
This document should include any current limitations and be updated when the respective fixes/enhancements are checked in, such as:
When the network goes down and an RPC is attempted, the gRPC channel will enter a DNS resolution backoff state running on a fixed 60 second timer. When the connection comes back online, it may take up to 60 seconds before the channel successfully reconnects. #3580 adds a resetConnectBackoff() method on ManagedChannel that short-circuits this backoff. Android apps using gRPC OkHttp should monitor the network state and trigger this method when the device moves from offline to online. Further, #3685 tracks using exponential backoff in the DNS resolver which will help mitigate this issue even without resetConnectBackoff() when the network is down only briefly.
Supporting smooth network transitions: When the Android device moves from cell only to cell+wifi, the OS will issue a network notification indicating the the cell connection will be terminate soon (typically ~30 seconds). Currently new RPCs issued on a gRPC channel during this time will continue to use an established cell connection, meaning they will fail if still running when the OS terminates the cell network. #3688 tracks adding a notification method on the ManagedChannel to allow apps to continue any on-going RPCs on the cellular connection but force new RPCs to use wifi, reducing the disruption caused by the switch from cell to wifi. This functionality is in-review in #3904.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4016
1.9.0 has different error than 1.8.0 for revoked client cert · Issue #4016 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We have a test which asserts that we get an error when trying to use a revoked client cert. On 1.8.0, we get a StatusRuntimeException on the call, and this exception has a cause with a nice message. Our test looks like this:
This works on 1.8.0, but now on 1.9.0, the e.getCause() returns null. So the request still fails, but we can't assert that it's failing for the right reasons.
Did something change around revoked certs or error handling in 1.9.0?
I didn't see any tests in grpc-java that seem to test an explicitly revoked client certificate. I did see this message for untrusted certs:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4017
Tracking issue for BinaryLog public API · Issue #4017 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4019
"google.api.http" is useless while gen stub, is it possible to use it to gen restful client code? · Issue #4019 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
use protoc and protoc-gen-grpc-java to gen java code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4024
How to get the connection status with the client from the server? · Issue #4024 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Is it feasible to get the connection status with the client from the server?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4025
netty 4.1.20 makes the RPC calls to fail · Issue #4025 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using the latest gRPC version (1.9.0), which comes with netty 4.1.17, but I have another dependency which requires netty 4.1.20. If I use the latter the RPC calls on the client side fail with the following exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4026
Maybe rename ClientInterceptor · Issue #4026 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For consistency, in gRPC 2 we could rename ClientInterceptor to ChannelInterceptor
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4028
DNS resolution failure on Android after connectivity changes · Issue #4028 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
For the grpc channel to be able to handle Android connectivity changes (eg. from wifi to mobile data, or from no data connection to wifi).
For the resetConnectBackoff() call on a channel to successfully short-circuit the backoff timer and make it reconnect immediately when triggered from a connectivity change.
What did you do
Built a grpc channel using the OkHttpChannelBuilder. Registered an Android BroadcastReceiver against connectivity changes which calls the channels resetConnectBackoff()  (as recommended in #4011).
What did you see instead
The resetConnectBackoff()  being called from the broadcast receiver event (for android.net.conn.CONNECTIVITY_CHANGE) and failing to short-circuit the backoff timer. Had to wait approx 60 seconds before the channel became usable again. Reports a host name resolution failure until the 60 seconds passes.
A sleep (of a few seconds) between the connectivity change and the resetConnectBackoff() call seems to fix the issue.
Is there any way to decrease the default backoff time. It may be a useful feature in situations like this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4029
Plumb proxy address through Name Resolver · Issue #4029 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty can't handle unresolved addresses. To avoid things like #4027 and any concerns of ProxySelectors returning unresolved addresses, we should resolve the address while the NameResolver is running. We then should plumb that result through to the transport.
We should probably have a check on addresses coming from the Name Resolver that verifies the addresses are resolved.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4032
While starting managed channels on client we get error: `Channel for target was not shutdown properly!!!` · Issue #4032 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Is this because a previous channel failed to be shut down correctly and now we are starting up another one?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4046
error: integer number too large · Issue #4046 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Successful compilation
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4050
Generalize NettyChannelBuilder.maxHeaderListSize to ManagedChannelBuilder · Issue #4050 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is necessary for Spanner in google-cloud-java.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4056
Tracking issue for Android connectivity management being experimental · Issue #4056 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Including from ManagedChannel:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4063
First received frame was not SETTINGS. Hex dump for first 5 bytes: 1503010002 · Issue #4063 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I ran a grpc server (in Golang) and a client (in Java) that accessed this server.
The error occurred always when I tried to send request to server via a blockingStub
What did you expect to see?
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4065
Http2Exception frame length exceeds maximum · Issue #4065 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We noticed a sudden disconnection and the only log I could grab from is the following coming from the client side
How can I debug this better? Is this frame legth set somewhere? Who can control if it exceeds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4067
HTTP1.x Support for grpc-java · Issue #4067 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Since grpc server do not support http1 stream, I have to use a web server in my application, for health check and some debug method.
Will it be possible to support this feature? When
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4077
Getting grpc exception `java.lang.NullPointerException: runnable is null`  · Issue #4077 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
1.8.0
What did you expect to see?
We have an app with dozens of bi-directional grpc streams.
When cancelling one of our jobs (but leaving the bi-directional streams open), we sometimes see:
We aren't sure what exactly is causing it.
Perhaps an executor service is getting shutdown without proper cleanup.
Or perhaps a channel's bidirectional activity is being interrupted due to our attempt to cancel the work being done.
Is it possible for grpc-java to handle this NPE better and provide a cause of issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4082
Getting warning Problem when calling halfClose - `call already closed` · Issue #4082 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TYPE: Question
What version of gRPC are you using?
1.8.0
Question
I closed some channels and unload some classes from my classloader.
Is there a way to figure out why this error is happening? Any examples of how to avoid it? Can I ignore this warning?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4084
Swap to java-library gradle plugin · Issue #4084 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should speed builds and rebuilds, while also getting us closer to having a (clean) Java 9 module.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4085
Create Java 9 modules · Issue #4085 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java 9 modules solve many causes of version collision issues, which would greatly help users. Granted, it's not helpful unless people are actually on Java 9.
This is probably blocked by #3522. It'd probably be reasonable to wait for #4084 as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4086
option to keep stream open after an exception · Issue #4086 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When an error condition happens, for example,
it closes the stream.. is there is a way to keep the grpc stream open ?
So application will be more resilient for errors like above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4091
Unicode support in Python 2? · Issue #4091 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A debug log from Apache Zeppelin python "interpreter" when code has an unicode character [1].
A wild, it seems grpc does't support unicode data in Python 2?
Related Zeppelin jira to investigate it on Zeppelin side -
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4092
Performance degradation while sharing channel across multiple threads · Issue #4092 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
According to previous answers to similar questions (i.e. #3268), the recommended way of handling gRPC channels is to have one channel and to share it across stubs. However, in multi-threaded application I see that this approach causes significant performance degradation. For example, if I share single ManagedChannel across 8 threads and run beenchmark test, I get a test duration of 326531 ms. In the same time, if I create ManagedChannels inside every thread, the result is completely different: 27748 ms. Modified files of the HelloWorld example are attached.
Am I doing something wrong? Would you please clarify how can I get the best performance while dealing with channels?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4095
Replace workspace("grpc_java") with workspace(com_github_grpc_grpc_java) · Issue #4095 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
... or something else more authoritative.
The workspace statement in the WORKSPACE file should match the name users are giving the external repositories that import this repo, e.g.
However, there's a convention to name a repository by reverse DNS, so something like com_github_grpc_grpc_java is more common.
Should we change the statement in the WORKSPACE file to com_github_grpc_grpc_java?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4097
Build reflection services using Bazel · Issue #4097 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4099
GET_MEMOIZED_IS_INITIALIZED method in dynamicMethod unsupported operations · Issue #4099 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
io.grpc:protoc-gen-grpc-java:1.10.0
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4102
Getting random "io.grpc.StatusRuntimeException: UNAVAILABLE: Channel shutdownNow invoked" when stress testing · Issue #4102 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My team has the following setup, where we have multiple Client nodes connecting to Multiple Server nodes with a channel from client to server of each node, where each channel comprises of multiple persistent streams left open for the lifetime of the process:
When stress testing the system, we see a random sudden shutdown of all the bi-directional streams:
We then have to reconnect each channel + reestablish the streams in order to continue.
This only happens when stress testing. Does not appear to happen in typical lower load situations.
To our knowledge, we are not shutting down the channels at any point. they need to remain open for the program to live happily.
But something is shutting them down somehow.
What are common ways to troubleshoot this behavior?
Is there some sort of timeout that we are victim of causing these sudden shutdowns?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4103
Document grpc-netty-shaded in Troubleshooting guide · Issue #4103 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Troubleshooting guide should also reference to grpc-netty-shaded for gRPC 1.9+
Also, add additional info re: #4163
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4116
Hints on setup (gc and threadpool) · Issue #4116 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm starting to build another grpc service that's supposed to handle something like 5k message per second (on commodity hardware) on average.
Messages weigh about 1k.
What's a good setup when it comes to:
Is there any recommended setup?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4118
getAttributes() always empty if called from SimpleForwardingClientCall · Issue #4118 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Let's say we have the following client interceptor which is attached to our channel:
When calling the getAttributes() method I expected to see a set of attributes which contains at least the information about the server to which the client is going to make a request to. Unfortunately, getAttributes() method always empty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4120
Windows CI is broken by GitHub HTTPS changes · Issue #4120 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to download protobuf:
iwr : The request was aborted: Could not create SSL/TLS secure channel.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4134
Support multiple ports in gRPC Java server · Issue #4134 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Most recent
What did you expect to see?
Support multiple ports in gRPC Java server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4135
Access the local address of a call from ServerCallHandler · Issue #4135 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
After #4134, I'd like to know which port/address the current inbound request comes from.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4138
Unable to run grpc-java in Linux Ubuntu 16.04LTS · Issue #4138 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can someone please help me figure this out. I have been unsuccessful in debugging forward with this
I am trying to run the example java code for a grpc server client application
JVM version:
compilation terminated.
In file included from /home/shouryalala/grpc/grpc-java/compiler/src/java_plugin/cpp/java_generator.cpp:1:0:
compilation terminated.
In file included from /home/shouryalala/grpc/grpc-java/compiler/src/java_plugin/cpp/java_plugin.cpp:8:0:
compilation terminated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4141
Provide FakeClock API in io.grpc.testing · Issue #4141 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4148
Don't require forked tomcat native · Issue #4148 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On reflection, it seems very strange that an allegedly interoperable network protocol for Java requires native code and therefore severely limits the platforms it runs on. This leaks into other software such as the API client libraries at google-cloud-java that have weird not-really-edge conditions such as not running on Android or on the Java 7 App Engine runtime.
Personal opinion here:
Performance be damned. Interoperability comes first. forked tomcat native should be optional at most. This library should be pure Java and fully functional in any standards-conformant VM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4151
Tracking issue for ALTS API being experimental · Issue #4151 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4154
NetworkOnMainThread exception while resolving IP address. · Issue #4154 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
When calling one of the stub's method I get a crash on Android, throwing NetworkOnMainThread exception with the following stacktrace.
My understanding is that the call io.grpc.internal.ProxyDetectorImpl.detectProxy(ProxyDetectorImpl.java:127) is happening in a grpc-default-executor-0, even though i've called .executor(Executors.newSingleThreadExecutor()) on the channel builder.
The grpc-default-executor-0 thread pool appears to contain the main thread, as Android triggers a NetworkOnMainThread exception if any networking is attempted to be done on it.
It seems related to #577, despite it being marked as closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4157
fix regression in v1.9.0 where using GRPC_PROXY_EXP with the Netty transport would cause an UnresolvedAddressException is not available in 1.10.0 · Issue #4157 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
However, i still face the same issue and fix seems not included in this 1.10.0 release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4159
Tracking NameResolverProvider being experimental · Issue #4159 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4163
Possibly misleading error "ALPN is not configured properly" when Java security manager is enabled · Issue #4163 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just spent a day on a wild goose chase trying to figure out what was causing this error:
ALPN is not configured properly. See https for more information.
Reading that page, and looking at my Maven dependency tree, I thought I had some kind of version conflict. I spent a day uselessly swapping out different library versions to try and fix this. In frustration I created a completely new project, with the same dependencies, and it worked. I turns out my app is using the Java Security Manager, and it was silently blocking tcnative from being loaded by netty-tcnative-boringssl-static.
Adding these three permissions fixed it:
I couldn't figure out how to whitelist only the tcnative library, as the Netty Native Library Loader appends a random number to the library name every time (ironically, probably for security reasons).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4170
channel.getState(true) will not reconnect · Issue #4170 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The javadoc for ManagedChannel.getState:
Gets the current connectivity state. Note the result may soon become outdated.
Parameters:requestConnection if true, the channel will try to make a connection if it is currently IDLE
However, it attempts to connect only if there has not been an open connection already. After disconnect, channel.getState(true) will not attempt to reconnect (state is IDLE).
What version of gRPC are you using?
What did you expect to see?
channel.getState(true) should try to reconnect the channel if the state is idle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4171
Make GrpcServerRule more reusable · Issue #4171 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See #2160 for some context. All the linked examples assume one mocks the service that is tested, which sounds weird to me (see https)
My grpc service talks to other grpc services and I'd like to mock out those. My Dagger module injects those secondary grpc service stubs and hence in the Test dagger module I'll need to provide mocked stubs and this is when things seem to fall apart.
I understand the suggestion to mock the impl instead (again see #2160), but I am not sure how to actually make this work. I have this code:
bur of course the use of reflection is a terrible hack. It looks like I'll have to replicate most of what is in https, right? So maybe the code in GrpcServerRule can be made more resuable. E.g. Datastore has a LocalDatastoreHelper, where I can start()/stop() in my tests @BeforeClass/@afterclass helpers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4175
Logging response body · Issue #4175 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to log the response body using the ServerInterceptor but can't figure out where the get this information. The close() in SimpleForwardingServerCall only has Status and Metadata.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4176
Bump to Guava 20 · Issue #4176 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We downgraded to Guava 19 in #2751. A lot of time has passed. We really want to get on to the more stable Guava versions.
We want to bump to Guava 20, and if that goes well try to bump further. I think Guava 21 was built with JDK 8 (or some such), so we need to avoid, but the following fixed that.
After we get to Guava 20 we should open a new issue to track upgrading further.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4180
Suggestion to add keyOfProto method to ProtoLiteUtils · Issue #4180 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a reason for why protobuf-lite doesn't have the keyForProto method in the ProtoLiteUtils? I seem to be able to implement it as a helper method my self, the same way it is implemented in ProtoUtils.
What version of gRPC are you using?
What did you expect to see?
A keyOfProto method in PotoLiteUtils
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4181
Change Bazel Workspace name to io_grpc_java · Issue #4181 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io_grpc_java is what's returned by getName('io.grpc', 'grpc-java') as defined by https, as java_import_external is replacing maven_jar.
See also #4095.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4188
How to write code when network is unreachable?  · Issue #4188 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I wirte a bi-directional rpc,  when the client try to connect to server，but the server is not ready， it will
After a few seconds, the server is ready, and the tcp connection is established finally.
When calling requestStreamObserver.onNext, there is no exception, but no data transfer, I want to know why? Do I need to get another 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4198
ReadableBuffers.BufferInputStream does not release buffer on close() · Issue #4198 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty Version used: 4.1.16.Final
Observed Netty leak detector complaining of bytebuf leaks on the gRPC server configured with Netty Epoll. This occurs more often, a few minutes after the service restarts on a prod machine. Here is the full trace of all 25 access for the bytebuf:
The most recent access to the leaked bytebuf occurs at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:273) but the bytebuf is actually released here.  Not sure what is causing the leak.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4202
Bidi calls never close, leaking memory client and server · Issue #4202 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following client/server leaves the bidi RPC call open, holding onto resources and ultimately going OOM if enough calls are made:
Replacing the client's ClientCall.Listener with one that calls .halfClose() upon completion works around the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4206
Tracking issue for channelz being experimental · Issue #4206 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4209
Tracking issue for binary log experimental API · Issue #4209 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4212
How would one propagate credentials between multiple services · Issue #4212 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
We're working on multiple services that call each other. For several reasons among which is auditing, we'd like to use the credentials from an incoming call to any call that is done as part of it. So if e.g. the user calls ServiceA.function1() and that in turn calls ServiceB.function2(), we'd like to pass the Metadata used in the call to ServiceA.function1() when making the calls to ServiceB.function2().
So far I've discovered and implemented a ServerInterceptor that would let me inspect the metadata passed when calling ServiceA.function1() and I tested .withCallCredentials(new CallCredentials()) which lets me set Metadata on outgoing calls to ServiceB.function2(). Now unfortunately those two mechanisms are not coupled. I am making the calls to ServiceB.function2() in my *ImplBase and all I get there is a StreamObserver, but no other context. So I don't see a solid way to store the Metadata in the Interceptor so that I can access this in the CallCredentails (or in the *ImplBase).
Did I miss anything? Any suggestions? Please don't hesitate to tell me that this is not how I am supposed to do this, if that is the case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4214
Hints for a Custom Marshaller(KnownLength vs Drainable) · Issue #4214 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using gRPC version 1.7.0 with Netty Epoll transport.
I am using a custom marshaller for non-proto messages. For InputStream provided by Marshaller.stream(message), currently I don't have a way to provide length of the message without serializing it. So, I have these two options:
Support KnownLength by serializing the message to byte[] which would be helpful in reducing the number of ByteBuf allocations (in MessageFramer when draining the message to OutputStream) as length is known. But this approach loses the benefit of Drainable, where we would be copying the byte[] to OutputStream.
Don't support KnownLength and support only Drainable to avoid additional copy when draining  to OutputStream. But this may lead to lot more ByteBuf allocations as message length is not known. (Due to usingBufferChainOutputStream in MessageFramer).
Could you share your thoughts on which approach provides lower latency? (Especially if we have large messages of 10 MB or so.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4218
Can not connect to Server after enabling TLS · Issue #4218 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my project using gRPC Java,I am using OpenSSL to make a secure connection between Client and Server through a revert proxy (HAProxy).
Since Client and Server interacting through a revert proxy, therefore I only config SSL for HAProxy, there's no need to do anything with the Server. So:
I managed to run the server successfully and configured SSL at HAProxy, I checked SSL configuration with https and everything is ok.
The documentation here mentions that the client code for a secure channel is this:
But the problem is I can't connect to the Server, no response and it doesn't throw any excetion or error at all.
But if I change usePlaintext from false to true (disable TLS) from client and Proxy is still having SSL, then I receive this exception:
This is dependencies at client:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4223
Can't run benchmark with --tls mode · Issue #4223 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Server run success in tls mode
I run AsyncServer with option --tls=true but java throw error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4225
Misleading 1.10.0 release notes · Issue #4225 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The 1.10.0 change list http says that #4027 is included, but that doesn't actually seem to be the case. The only released version with this fix applied is 1.9.1 through a back port.
The commit seems to have been merged to master shortly after 1.10.0 was cut:
Would be great to update the release notes to reflect this. Would also love to get a 1.10.1 release with this fix included, but if that's too much work we can probably sit on 1.9.1 until 1.11.0 is out.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4232
Uncaught exception in server when client is killed · Issue #4232 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Client connection closing uncleanly is a common occurrence, so I expect it not to throw exceptions.
When I kill my client, I see uncaught exceptions in server side (not random). The exceptions does not seem to break anything (can't tell for sure though), but they are being caught in my thread pools uncaught exception handler. Client is doing streaming calls (server streaming and bidi streaming).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4239
GrpcServerRule should be a final class · Issue #4239 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This was an oversight during initial review. It's experimental, so we can fix it. This came up in #4171.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4240
Flag to relax compression interop tests · Issue #4240 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed in #3195, since some implementations don't have access to the message compression flags, tests that rely on that cannot be exercised.
Would it be useful to add a flag that disables test steps that rely on this capability?
With such a flag, we could for example run client_compressed_unary against the Java server. The first call in that test would be skipped (as that requires the server to be able to inspect the message flags), but determining whether the subsequent calls succeed would still be useful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4241
message Empty is defined twice in interop-testing sub-project · Issue #4241 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Message Empty is once defined in the interop-testing sub-project itself:
And then again pulled in from protobuf-java
This becomes a problem when generating grpc classes using ScalaPB as it tries to place both under the same package and the same name.
I would expect interop-testing to not define Empty message and use the one from  protobuf-java instead. Would that be possible to change?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4242
grpc + springboot error java.lang.ClassNotFoundException: io.grpc.services.HealthStatusManager · Issue #4242 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Disconnected from the target VM, address: '127.0.0.1:55304', transport: 'socket'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4251
Extracting all keys from CallOptions objects · Issue #4251 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In gax-java, we would like to be able to merge two CallOptions objects together. We are able to partially implement this merging of CallOptions using the with<X> methods available on CallOptions, such as here: https
However, currently it is not possible to extract the full set of custom options from the CallOptions object, which means we are not able to create a merged set of custom options.
Is there any way to extract the full set of keys from a CallOptions object currently? If not, would grpc-java consider adding either (a) a merge() method on CallOptions, or (b) a way to extract the complete set of custom options, to allow us to implement merging?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4252
RetryPolicy from serviceConfig may not be populated to RetriableStream if name resolving is not finished · Issue #4252 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4258
bazel rules_kotlin visibility issues. · Issue #4258 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Visibility resolution not causing a problem.
Problem
I am the maintainer of the Kotlin Bazel rules and I am working on porting some of our Grpc stuff  to Kotlin. The visibility of the internal targets is causing the Kotlin compiler problems. I have only hit this problem in Kotlin.  The Java rules don't have this problem. The only symbol I am using is the InProcessServerBuilder in my test class.
The Kotlin compiler is probably being too eager. I hope there is a work short term work around.
If there isn't a quick fix  would it be possible to open up the visibility ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4259
Limit size of a message · Issue #4259 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using gRPC version 1.7.0 and this is my Service:
If I want to reject all LogData if its size exceed my limit then how can I do this. How to limit max size of a request. This is how I'm doing but at this point, my server has already parsed the request and allocate resource for it:
Is there any possible way to reject a request even before parsing it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4261
ok http read header error · Issue #4261 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
After some dig, I found okhttp failed to parse :status: and content-type header.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4263
Android Java: Duplicate Zip Entry in Gradle with another library using GRPC in com.google.protobuf · Issue #4263 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I'm using GRPC version 1.10.0.
What did you expect to see?
I'm getting an issue with
while compiling release + signed versions as opposed to debug versions.
We are rolling our own GRPC end and we have another library using GRPC:
Here's the dependency tree following exclusion of group:
Normally an exclusion of the group would work for the com.google.protobuf, but it doesn't appear to be working.
If you need more snippets of my project, let me know.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4278
OkHttpChannelBuilder#overrideAuthority not compatible with IPv6 hostname · Issue #4278 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Background: I'm using mutual TLS with a LAN client that presents an IPv6 link-local address as an IP SAN in its X509 certificate.
I expected to call OkHttpChannelBuilder.overrideAuthority("FE80::FABB:BFFF:FE01:3A52") to allow hostname verification to pass.
If you agree this behavior should be changed I'm happy to submit a PR. Perhaps we'd modify GrpcUtil#checkAuthority to strip square brackets from a validated hostname?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4284
Caused by: io.netty.handler.codec.http2.Http2Exception$HeaderListSizeException: Header size exceeded max allowed size (8192) · Issue #4284 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
This error occurs when a Java client attempts to send a header larger than 8192 bytes when connected to a server that did not explicitly specify a SETTINGS_MAX_HEADER_LIST_SIZE in its settings frame.  (Note this cannot be replicated using a grpc-java server because netty always specifies a SETTINGS_MAX_HEADER_LIST_SIZE.)
The expected result is no error - the client should send the large header to the server.
The HTTP/2 spec Settings section says:
These statements indicate that if the server does not specify any SETTINGS_MAX_HEADER_LIST_SIZE, then the client should place no limit on the sending header size. However, netty is enforcing a default max header size on both sent and received headers.  And to boot, there does not seem to be any way to specify or disable the client sender header limit through the grpc-java API.  NettyChannelBuilder has the maxHeaderListSize method, but this only specifies the SETTINGS_MAX_HEADER_LIST_SIZE for the receive path.
I think the proper fix would be for netty to not enforce any limit on client sent header size if the server has not specified a SETTINGS_MAX_HEADER_LIST_SIZE.
I am looking for a long-term fix for this issue and short-term workaround if anyone has an idea. Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4286
java.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: UNAVAILABLE: Channel closed while performing protocol negotiation · Issue #4286 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
I've tried to use grpc-java library to connect sever side with SSL,  but it was failure.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you expect to see?
Connection with SSL works fine.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4290
java.lang.IllegalArgumentException: Invalid host or port: http 50051 · Issue #4290 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am experiencing this exception because apparently ManagedChannelBuilder is not generating properly formatted url.
The generated url contains a whitespace instead of a colon and hence the exception is thrown
This is the where i am experiencing this
What can be the reason?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4291
AltsHandshakerStubTest.closeEarlyTest is flaky · Issue #4291 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4296
How to implement username/password authentication. Python client, Java server. · Issue #4296 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to figure out how to authenticate with username/password when I create a connection and nothing found.
So, my questions:
How to create a server with username/password authentication on java server?
How should python client connect to it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4299
NettyServerTest.channelzListenSocket is flaky · Issue #4299 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4302
Determine final NameResolver to LoadBalancer communication · Issue #4302 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Alluded to in #4137 (comment) . The biggest issue is probably how Java allows a list of lists of addresses. This is different than the other implementations. We need to come to a cross-language agreement about whether list of lists is necessary.
But we also need to design the final solution for how proxy information should be plumbed from the NameResolver through the LoadBalancer into Subchannel. That will remove PairSocketAddress or stabilize it (with a better name!).
CC @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4305
Generate deadline per call from single configuration · Issue #4305 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
The ability to specify a desired timeout per stub and have a deadline generated from the specified timeout per RPC.
Unless I'm missing something, the only way to effectively specify a (relative) timeout is to use (absolute) deadlines repetitively as follows:
This means I need to write .withDeadlineAfter(100, TimeUnit.MICROSECONDS) or similar on every call site. It would be nice to be able to specify a timeout or deadline generation specification on the stub since I consider it a cross cutting concern.
MyServiceStub stub = newBlockingStub(channel).withDeadlineSpecification(100, TimeUnit.MICROSECONDS);
Where a Deadline equal to Deadline.after(100, TimeUnit.MICROSECONDS) has been set on the CallOptions before each call.
Is it otherwise possible to specify a relative cutoff?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4312
Provide more detailed information on OpenCensus spans · Issue #4312 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had made some modifications to gRPC that I'm running in a local fork which have been very useful for debugging network issues, performance etc.  I wanted to start a discussion of adding more useful tracing information into gRPC.
Currently the only information provided comes from the ClientCallTracer, which simple marks the start/end of a call, along with message send/recv events.
I've additionally instrumented the netty transport (via NettyClientStream) to annotate the send operation span with:
Specifically the frame queued and frame sent annotations are very helpful for debugging network congestion on the client end.  Would this kind of tracing be useful for others?  I can clean up my code and submit a pull request if so.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4317
Handle run-away netty buffer thread-local caches · Issue #4317 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
gRPC uses ByteBufs from many non-Netty threads for message serialization. When the application has many threads, the per-thread caches can get out of hand.
#1758 is related, as it seems allocating the per-thread cache has a noticeable cost. I thought there may be another related issue, but couldn't find it; maybe I'm thinking of that Netty one.
@jpitz had success just outright disabling caching for non-Netty threads. I'm slightly surprised that didn't cause a CPU increase, as that would seem to mean our direct buffers are no longer cached. If our benchmarks show similar behavior, then SGTM.
However, I also wonder if we should swap to heap buffers for message serialization and framing. Especially for small messages. That might hide most of the cost of removing the cache, since for larger messages the cost of direct buffer allocation is likely dwarfed by any copying.
CC @carl-mastrangelo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4319
Cannot assign a value to final variable 'features' · Issue #4319 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4320
Variable 'features' might not have been initialized · Issue #4320 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
          
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4327
Reconnect wait time?  · Issue #4327 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Some way to configure a delay before a reconnect may happen.
We are currently running our applications in a kubernetes cluster and using services to point to the gRPC server:
When the server-pod is terminated, it sends a GO AWAY to the client and kubernetes spawns a new pod.
If in between the GO AWAY and the start of server-pod2 the client-pod tries to connect, the kubernetes service forwards the request to the old pod (IP: 192.168.0.10) and the client-pod has to wait for a socket timeout around 2min before it can reconnect.
Do you know of a way to configure the client to wait after a GO AWAY before trying to reconnect? The waiting time would be very short (like 5s).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4328
Use grpc-java Crash · Issue #4328 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
crash, please see grpc-ecosystem/polyglot#99
Thanks!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4329
FR: AutoClosable AttachedContext · Issue #4329 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today, if you want to use io.grpc.Context.attach(), you have to provide your own try/finally block. In order to take advantage of try-with-resources, if there were a AttachedContext that implemented java.lang.AutoClosable, then you could have
and omit the finally block.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4332
Document generation for gRPC API · Issue #4332 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Could you please help me out . How to generate document for gRPC API in JAVA env using maven
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4333
Channels always logspam about service config · Issue #4333 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There should be absolutely no service config processing today. It seems this code path should have been avoided with at least something resembling a null check in ManagedChannelImpl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4344
Inprocess servers and channels should not show up in channelz · Issue #4344 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At least not until they are fully supported. Today, they can be found but some data is mysteriously missing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4348
Access to TLS client and server certificates · Issue #4348 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I have a very specific problem. We want to build a GRPC service with mutual TLS. We don't care about (client or server) certificate validation. However, for both client and server we want to have the ability to fetch the others party certificate.
In other words:
a)  If I'm a server I want to learn about the certificate that the client is using when negotiating a TLS connection.
b) If I'm the client I want to learn about the certificate of the server.
We solved the problem from the server side with a ServerInterceptor (see example project https).
We are however struggling on the client side.
Questions
Does the grpc-java API allow to fetch the server certificate?
If it doesn't allow, how we would have to modify grpc-java to allow it? We are happy to contribute with a PR :) We just need a little help.
How can we disable the certificate verification? (We are using self-signed certificates on both sides)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4350
Build Failures · Issue #4350 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Whenever i am building the grpc-java master, i am getting following error.
What went wrong:
I took trace of the build and gotten following info.
I was expecting google/protobuf artifacts to be included as part of the project.
Am i missing something in this? I am pretty new in this and googling the topic did not get any useful info.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4351
Async server stub relies on callback for cancellation detection · Issue #4351 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There's an issue on server-side on how to notify the server of cancellation. That's been solved a couple different ways, but the first way was to throw in onNext() if the client had cancelled. However, it seems that's triggered by a callback, so it won't trigger if the application is consuming the callback thread.
We could check serverCall.isCancelled() instead, although we'd need to determine how much of an impact that'd have to existing servers. Alternatively, we could encourage more use of ServerCallStreamObserver.isCancelled()/Context.isCancelled() and similar ways of detecting cancellation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4352
Service IP Address can be set 0.0.0.0 Allow External Network Access · Issue #4352 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
help me
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4356
Add rest endpoint annotations for health.proto · Issue #4356 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Using gRPC 1.9.0
What did you expect to see?
If it were possible to implement the health.proto service as REST interface too, it would minimize the duplication and generation of protofiles when using together with the repository of gRPC-gateway(https).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4357
Tracking issue for PairSocketAddress · Issue #4357 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PairSocketAddress is used for us to express an EAG that has a proxy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4359
Stabilize channel state API · Issue #4359 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ManagedChannel.getState(), ManagedChannel.notifyWhenStateChanged(), and ConnectivityState.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4367
AbstractManagedChannelImplBuilder#executorPool set, but never used · Issue #4367 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I specified a custom executor, but noticed no changes on the client. After starting to investigated, I noticed that the executor that is set with executor() is never used in the AbstractManagedChannelImplBuilder#build method. Instead, it grabs the shared pool and uses that instead.
Snippet from source:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4377
conflict with guava · Issue #4377 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when i'm using grpc (1.10.1 and 1.11.0) with guava depedency version 24.1-jre it show:
UPDATE
after dowgrade guava to 20.0 it work again. Tks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4381
follow up changes of opencensus · Issue #4381 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MonitoringService seems to be outdated because com.google.instrumentation was already changed to io.opencensus.instrumentation.
com.google.instrumentation is still defined at build.gradle so it was not failed on compilation time.
Was it not updated on this PR?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4382
ATTR_LB_ADDR_AUTHORITY not available for custom name resolvers · Issue #4382 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm looking into implementing a name resolver, but I'm failing to support service config and gRPC LB server address due to the dependency on
core/src/main/java/io/grpc/internal/GrpcAttributes.java, which is not accessible outside the grpc-java package using bazel.
For example, NamesResolved.java has the following code:
Since attribute keys are identity based, I'm not able to see how I can support this in a custom name resolver without hacks or patches.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4385
RoundRobinLoadBalancer STATE_INFO attributes never set to READY · Issue #4385 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In RoundRobinLoadBalancerFactory, we have
But getSubchannelStateInfoRef(subchannel).value.getState() == READY never happens because the attributes is never set to READY, it is always IDLE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4390
the latest okhttp version is 3.10.0, why grpc still use okhttp 2.5.0? · Issue #4390 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
okhttp in grpc should be the latest version ,which is 3.10.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4407
feature request: support grpc servers on android · Issue #4407 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running a grpc server on android in java is not supported. Running an HTTP server on android is well supported and has many legitimate use cases. The same should be true for running a grpc server on android.
This need has come up in many issues. And the general suggestion is to use c++. Such as in #3041 #2273 #2227 and others. See also questions from stack overflow.
The docs are also misleading. In https it is not clearly stated that the server is not running in android, and this is not supported.
If the choice to not support android servers in java is continued, then the docs need to be made clear of this fact.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4412
Retried RPCs have stale grpc-timeout metadata · Issue #4412 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today, grpc-timeout is set by ClientCallImpl based on the deadline. But RetriableStream doesn't re-set the grpc-timeout when issuing more RPCs.
It'd probably be good to move grpc-timeout handling down into the transport. We already have the problem that any RPCs queued by DelayedTransport will have more stale timeouts in their headers. It'd be better to calculate the timeout as late as possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4423
NoSuchMethodError when creating connection to the server · Issue #4423 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a GRPC server running and I'm trying to establish connection to that. When the client tries to execute the below code,
it's throwing the below mentioned exception.
This was working fine for some time now. What am I doing wrong here? Below are the versions I'm using.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4438
Examples dont work when updating the example WORKSAPCE file to released versions · Issue #4438 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran into this when building a simple bazel/grpc app but have verified that I run into the same issue in the provided examples.  If you update the WORKSPACE file in examples/ to use
you get errors like this
What is the proper way to reference grpc-java in our workspace file?
What version of gRPC are you using?
What did you expect to see?
This command to build the examples.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4441
Could not find io.grpc:grpc-protobuf:1.13.0-SNAPSHOT · Issue #4441 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':compressingHelloWorldClient'.
Could not resolve all files for configuration ':runtime'.
Could not find io.grpc:grpc-alts:1.13.0-SNAPSHOT.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4443
Compile grpc-java using Bazel in another repo · Issue #4443 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
A successful compilation :)
I ran bazel build //tools/local_server:local_server on the code in this Pull Request: google/startup-os#47
I had this issue:
I then switched to head, since I saw that you fixed relative to absolute paths for some dependencies (can't find that commit now). Head was at commit 46079ff when I tried. I got the following error:
I then added the following bindings to WORKSPACE:
I then got the following error:
General note:
My main goal here is to be able to compile and run a grpc java server, built with Bazel.
The code in the startup-os repo serves as a collection of examples for how to use different Google Open Source technologies together. Once this bug is solved, you can point people to that repo for a working example.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4451
ManagedChannelBuilder.maxInboundMessageSize(int max) is still ExperimentalApi. · Issue #4451 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Currently, we used version 1.0.3
We have a plan to change version 1.10.0
What did you expect to see?
Depending on it (#2307), I tried to use NettyChannelBuilder to adjust maxMessageSize in version 1.0.3.
But NettyChannelBuilder.maxMessageSize is @experimentalapi.
So, I tried to use version 1.10.0 depending on #2382
In version 1.10.0, we can use ManagedChannelBuilder.maxInboundMessageSize(int max), but It also @experimentalapi.
It's really hard to use experimentalApi in real service.
So, Could you please confirm it?
I hope we can use ManagedChannelBuilder.maxInboundMessageSize as a non experimentalAPI ASAP.
Best regards,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4452
Update error-prone to 2.3.1 · Issue #4452 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4456
grpc-java-api-checker complains about imports of @ExperimentalApi · Issue #4456 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Don't flag imports of @ExperimentalApi types. I don't see a way to disable that kind of check:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4459
Attributes.equals disagrees with hashCode · Issue #4459 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need to calculate hashCode manually.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4460
Could not find any version that matches io.grpc:grpc-core:[1.12.0] · Issue #4460 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
A successful build when switching from 1.11 to 1.12.
Using gradle 3.5.1 with the java-library plugin.
When switching from version 1.11 to to 1.12 build fails at the task "extractIncludeProto" with message
The library grpc-core does get pulled in but somehow not recognized. Adding an explicit implementation/dependency to grpc-core makes the build work again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4465
Add Android example Bazel build support · Issue #4465 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like this would solve the dependency problems I experienced when I tried last:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4469
Provide a way for NameResolvers to dynamically provide authority · Issue #4469 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today, getServiceAuthority() must not do any I/O to determine the authority. That is, it must be computable from the target string.
It's come up before to allow the NameResolver to retrieve the authority from the name resolution system. However, in the past those systems couldn't securely retrieve the authority so it would allow MITM attacks. We've now come across a resolution system that can provide the necessary security guarantee, as it uses TLS to communicate with the resolution system.
Since this is a niche use-case, I think it is fair to leave getServiceAuthority() in place. Also, Channel.authority() is implemented via getServiceAuthority(), so the current restrictions are still probably appropriate. We'll just need to add documentation to Channel.authority() that it may be partially wrong (since each backend may have a different authority). CallCredentials shouldn't have an issue with dynamic authority, although that should be verified.
I think we can use an authority Attribute on the EquivalentAddressGroup or PairSocketAddress. This does require us to make a decision for #4302 since it's basically the same problem. The design decision has been made; we can safely use EAG here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4471
Tracking issue for channel tracing experimental API · Issue #4471 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4476
io.grpc.testing.integration.MoreInProcessTest asyncClientStreaming_serverResponsePriorToRequest is flaky · Issue #4476 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4477
Add ProtoUtils.metadataMarshaller · Issue #4477 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have it in ProtoLiteUtils, but not ProtoUtils. For now it can just call ProtoLiteUtils. The method signature should accept a Message instead of MessageLite, however.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4482
Please support setting and enforcing maxInboundMessageSize on Server/ServerBuilder · Issue #4482 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4495
Netty ObjectCleanerThread keeps high CPU · Issue #4495 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


4505
Illegal character in hostname error when using consul and docker · Issue #4505 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having microservices running in Docker containers and I use Consul as service discovery. Every now and then the GRPC calls between the services are failing and I get this exception:
io.grpc.internal.ProxyDetectorImpl.detectProxy Failed to construct URI for proxy lookup, proceeding without proxy
What version of gRPC are you using?
What did you expect to see?
I would expect that when the DNS name contains non-URI friendly characters, the GRPC call to continue to work and encode the URI properly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4513
No functional server found with gRPC v1.11 and 1.12 on Android · Issue #4513 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
This work on Android with the following dependencies:
However, with gRPC version 1.11 and 1.12 of those libraries, the following exception is thrown when a gRPC server is started:
java.lang.RuntimeException: Unable to start service @c7238b7 with Intent { cmp= }: io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional server found. Try adding a dependency on the grpc-netty artifact
What did you expect to see?
I was expecting the server to start with latest version. The same build configuration and the same application code is used for each gRPC dependencies version. It only works when using version 1.10.1
Our application is running on Google Pixel device with Android 7.x and 8.x, We're using Java 8.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4515
examples/helloworldtls: SSLHandshakeException when using ClientAuth.REQUIRE with two hosts · Issue #4515 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to configure TLS with required mutual authentication between two hosts in LAN without DNS-server using http
In my configuration server is accessed by IP so I've added subjectAltName to certificate generation script, see https:
What version of gRPC are you using?
What did you expect to see?
I expect that this is a valid configuration
What I get?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4516
unfair thread pool allocation for stream clients · Issue #4516 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Fair sharing of the server's thread pool among clients.
I have a service that can be modeled like this:
Each individual client uses a a single RPC to ping infinitely and process responses as they arrive. I was surprised to find that thread pool resources don't seem to be shared fairly among clients in this situation.
Here's the experiment I ran:
Send PingRequests as fast as possible without waiting for replies (flow control kicks in right away)
The first client gets a steady stream of responses (1 per second) and the 2nd client never gets a response.
Is that the expected behavior?
I explored this a bit further using a ServerInterceptor. I found that the first client dominates the executor's task queue with many more calls to onMessage() than I would expect given the docs for ServerCall.request:
Requests up to the given number of messages from the call to be delivered to ServerCall.Listener.onMessage(Object). Once numMessages have been delivered no further request messages will be delivered until more messages are requested by calling this method again.
That's not what I observe though. Instead I see two calls to ServerCall.Listener.onMessage for every one ServerCall.request(1).
If I delay the extra onMessage() in my interceptor such that only one onMessage() per ServerCall at a time is given to the executor, then I get the client behavior I originally expected: both clients see responses in a round-robin way.
I can use my ServerInterceptor to get the behavior I want but I'm nervous about deviating from the standard behavior. Also, maybe this a bug that needs to be reported?
Any advise or info is appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4518
Client-side h2c (insecure HTTP/1.1-to-h2) upgrade does not work · Issue #4518 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When specifying NegotiationType.PLAINTEXT_UPGRADE, the client should connect over HTTP/1.1 with headers indicating that this request should be upgraded to (still insecure) h2.
There seems to be quite a bit of machinery in place to make this work, but currently the client does not start sending the request after performing the TCP handshake. A possible fix for this has been previously proposed in https(and when I tried this locally it did appear to help), but the code has evolved since.
Our use case for this feature is that while in production you'd use TLS and ALPN to serve both HTTP/1.1 and h2 requests on the same port, during development it can be convenient to run without TLS. NegotiationType.PLAINTEXT is available for non-TLS connections, but does not (really) support HTTP/1.1 and h2 coexisting on the same port.
What version of gRPC are you using?
Checked on 1.11.0, 1.12.0 and master.
What did you expect to see?
I expected the grpc-java Netty client to successfully connect to a h2c endpoint when configured with NegotiationType.PLAINTEXT_UPGRADE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4520
Dynamically linked netty-tcnative is compiled against OpenSSL 1.0.1 · Issue #4520 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On Ubuntu 16.04 LTS NettyChannelBuilder with dynamic netty-tcnative (linux-x86_64 classifier) throws
This is related to
Is there any workaround for this problem? Is it possible to disable hostname verification in grpc-java? (I know, this question has been asked before)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4528
Roll forward "auth: Require PRIVACY_AND_INTEGRITY for GoogleCredentials" · Issue #4528 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It was rolled back in #4521 because of breaking internal users.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4543
Use property instead of static FQCN for ContextStorageOverride · Issue #4543 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a reason, why you don't use a property which can be set to identify the overriding class for Context.Storage? As it is one is required to create a class in package io.grpc.override in one's own package. This may even cause unresolvable collisions if multiple overrides were to be used.
Could this be something like (would be BC):
So I can do
Or am I missing something here?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4544
Receiving "INTERNAL: Panic! This is a bug!" messages · Issue #4544 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are experiencing TaskRejectedExceptions although the thread pool is not exhausted.
We are sending about one unary request every 1-2 seconds and the request is returned within less than 100 ms.
The message we see (on the client) is:
The call is done like this:
The executor which is set for the managed channel is configured as follows:
It seems to be weird that the queue is rejecting new entries although there are idle threads. Also, knowing that there is only one onNext() and one onCompleted() per request, why are there so many entries being scheduled on that executor? If I understand it correctly, the executor is used to process the on*() events, correct?
I am not sure if this is actually a gRPC issue or an Executor issue, but gRPC is the only place where we see this.
What version of gRPC are you using?
What did you expect to see?
No Panic
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4546
Receive UNKNOWN: Exception was thrown by handler · Issue #4546 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm using BI stream on Android.
But after get first bunch of values, I get UNKNOWN: Exception was thrown by handler
My ios colleagues have same problem. But they have solved it by using:
What am I doing wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4547
ClientCall#cancel() implementations should be thread-safe · Issue #4547 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling ListenableFuture.cancel(true) on the stub returned by ServiceNameGrpc.newFutureStub(Channel channel) calls through directly to the underlying ClientCall#cancel() method.  ListenableFuture#cancel() may be invoked from any thread.
ClientCall implementations (and in particular ClientCallImpl) should be fixed safely handle this, and the ClientCall docs updated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4552
Grpc java interceptor · Issue #4552 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.0.3
No way in grpc java to insert  custom logic before retry in case of  error from server.
Our grpc server can come in a random port.Lets say server go down our application infra should retry and before retry should open up channel on new server port.
As we have several client applications I need  to insert in common place rather than asking client to handle retry.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4558
StreamObservers.copyWithFlowControl calls StreamObserver.onComplete twice · Issue #4558 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Client stream observer on ready handler is invoked after stream is half closed.
Following error is found:
payload is a string of  1 million char.
This error does not happen with small payload.
What version of gRPC are you using?
What did you expect to see?
onComplete() should only be called once for request stream.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4559
High latency establishing new connection and sending first request · Issue #4559 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm seeing extremely high latency establishing new connection and sending in the first request (simple ping/pong). It's taking ~ 80 ms to just do the initial handshake,HTTP2 settings exchange etc.
Here's a Wireshark capture of the packets between a grpc client and server running on the same host and you can see the actual RPC request is made ~ 100ms.
Not sure If I have something misconfigured, just wanted to confirm if this is normal?
What version of gRPC are you using?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4562
Move internal.GrpcAttributes.NAME_RESOLVER_SERVICE_CONFIG to NameResolver · Issue #4562 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With NAME_RESOLVER_SERVICE_CONFIG key internal, it's impossible for third party name resolver providers to toy with service config.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4563
ManagedChannelBuilder does not expose NettyChannelBuilder.maxHeaderListSize() · Issue #4563 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
master
What did you expect to see?
Is there a reason that this method is not exposed? Or, if I want to restrict the MAX_HEADER_LIST_SIZE, is there a way to configure that through ManagedChannelBuilder or anywhere else?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4564
DnsNameResolver not work with Docker in user-defined bridge network · Issue #4564 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Differences between user-defined bridges and the default bridge
So i can communicate each other with Container Name.
I confirm that B to communicate with A is ok.
Sorry, i don`t know whats the reason.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4566
Insanely cryptic AbstractMethodError thrown when making any kind of request to the gRPC server [v0.12, Scala] · Issue #4566 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
So I'm trying to create an incredibly simple server in Scala:
And I have absolutely no idea what it could be. At first I thought my service class wasn't being initialized properly, but after removing the addService() call the issue persisted. It doesn't seem to be a service-level abstraction issue, but more so an abstraction issue when trying to open any kind of socket at all. I've based this implementation directly off of what I found in the docs, but perhaps I'm missing something. Any reason this could be happening? Is this a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4567
OkHttp does not have MAX_HEADER_LIST_SIZE · Issue #4567 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems it isn't imposing any limit now; I don't see any reference to DEFAULT_MAX_HEADER_LIST_SIZE within it. But it could also be hard-coded to something.
That makes it a bit weird to add, as it could impact existing users, but the limit is also there to protect the client and help encourage limited metadata for the benefit of proxies. This is also a behavior difference compared to the other implementations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4572
ServiceConfig example missing · Issue #4572 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi - Is there an example available for a sample service config with Hedging policy configured. I read https but wasn't sure what the actual values for methodConfig.name would look like.
Also are there any helper methods which take a json string and parses and returns Map<String,Object> which can be passed to attrs.set;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4573
How to count  number  of active connection  in grpc? · Issue #4573 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want o be able to know in  my TServiceImpl  the number of  active  connection
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4574
Abnormal asc files in v1.12.0 artifacts in maven central · Issue #4574 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We noticed some anomaly of io.grpc v1.12.0 artifacts uploaded to maven repo
Some asc files like http were added in 2018-05-07, and they are in binary format instead of text.  (ASC files should normally be text files)
Some asc files in the '1.12.0' directory like https are in binary format. But in other version directories like https:, these files are in text format.
This might be the reason that io.grpc v1.13.0 artifacts were failed to be uploaded to maven central.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4576
upload_artifacts.sh is hard to manually test · Issue #4576 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently it can only be run on Kokoro and only for tagged releases. @zpencer, has a kokoro job that lets him kick off a job against a private (fake) tagged release but this doesn't scale to more users and is slow as it requires building all dependent artifacts.
We need a way to be able to run the majority of the script from our workstations. This is generally not too hard with a little bit of reorganization, with the exception of gpg. While with gnupg 2.x we could leverage the gpg-agent to split kokoro-specific code out, there's not an easy way for gnupg 1.x. We either need to use something similar to the release key for testing or require gnupg 2.x. Since Kokoro is using Ubuntu 14.04 which has gnupg 1.x, we could use a docker container to get gnupg 2.x.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4581
java server:Stream 3 sent too many headers EOS: false · Issue #4581 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
StreamObserver can send message at the same time in the threadPool
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4583
Remove extraneous maven-metadata.xml*.asc files in maven repo · Issue #4583 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We closed #4574, but in maven repo, there are still some maven-metadata.xml*.asc files, which are not in ascii format and should be removed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4585
How support 20K connections in server PC · Issue #4585 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tested a 10K test connection, and then the server crashed. How does grpc-java set up to support more than 20K request connections on a PC
What version of gRPC are you using?
What did you expect to see?
How support 20K connections in server PC
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4590
Plumb lb contextual info to transport creation · Issue #4590 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For channels that use ALTS and grpclb, there are several connection types:
ALTS relies on the connection type to determine which type of negotiation to use. This info needs to be plumbed to the ProtocolNegotiator.
cc @jiangtaoli2016 @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4595
Question: Detecting server downtime on client · Issue #4595 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am using a streaming response service rpc subscribe (SubscribeRequest) returns (stream Event).
This is an infinite stream which will never be completed by the server. On the client side I am using an async stub to connect to this service. I have observed that-
When server restarts, the onError interface is called on client and I am able to resubscribe using that.
When the connection is idle for sometime, and server restarts, the client does not receive any onError callback and just stalls, It does not receive any new Events on stream.
How can I reliably detect server disconnection and handle reconnect gracefully?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4598
Typo in round robin factory name const in AutoConfiguredLoadBalancerFactory · Issue #4598 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An easy oversight. Just wanted to give a heads up.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4600
Proposal:  Remove mutable / immutable handler registry distinction · Issue #4600 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like to float the idea of removing the mutable / immutable service registry distinction on io.grpc.Server, as I feel it is an unnecessary distinction.  As far as I can tell, the sole purpose was a performance concern, but this shouldn't have bearing on the API surface.   The methods to get it are Experimental, and only seem to be used for reflection.  I believe reflection can still be efficient without knowing the difference.
This is not the same as the "fallback" registry, which is stable API, and IMO is a better distinction than mutable / immutable.
Thoughts @ejona86 ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4602
Audit code path when GrpcLB is not in ClassPath · Issue #4602 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need to guarantee that if GRPCLB addresses are provided by the NameResolver, they won't make it to a LB instance other than GRPCLB, as other LB types will not properly ignore the GRPCLB addresses and try to route traffic to them and never realize all such RPCs will fail.
Today it seems AutoConfiguredLoadBalancerFactory will throw, which isn't probably appropriate because it will cause the channel to go into panic mode. Instead, it could choose a LB instance that fails all RPCs with a clear Status. Or it could consider stripping the LB addresses and continue like normal, passing the non-LB addresses to the PF/RR/etc. If there are no non-LB addresses, maybe it could still fail RPCs with a clear status saying gRPCLB is required for this target.
We should also add a comment to the GRPCLB Attribute Key noting that LB policies won't receive it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4610
your REDME demo is error · Issue #4610 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to try use this tools by MVN. So I use your REDME demo but my MVN can't find
I don't known which version  plugin match which version protobuf.
My protobuf version is 2.5
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4614
AutoConfiguredLoadBalancerFactory throws in many cases · Issue #4614 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When LBs throw, we go into panic mode and the channel is permanently broken. Instead of throwing, AutoConfiguredLoadBalancerFactory could go into some failure mode where it fails RPCs, but still keeps the channel alive in case things improve.
However, some times there are throws scare me a lot, in that they are failing the channel due to invalid service config. Different logic is probably necessary there. Related discussion: starting at grpc/grpc#15896 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4615
Basic setup doesn't work. make better documentation · Issue #4615 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used the autogenerated code from protoc. I tried to use the client to make a simple call and the dependencies are all messed up. This might not be the right location for this issue, but I'm not sure where else to post it. Also, seeing that you have over 300 issues, this will probably never be resolved. That being said, after having to figure out the correct gradle magic spell to pull in the correct library and version of tcnative, I finally got it to work (apparently it's different depending on the OS). Why doesn't grpc-java just pull in the correct version(s) of tcnative? or why don't the docs say anything about how/what/where to get the basic hello world example to work.
What version of gRPC are you using?
What did you expect to see?
something that builds without scouring the internet for days while wanting to blow my brains out
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4618
Add LB.Helper.createOobChannel(List<EAG>) · Issue #4618 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This would allow removing the flattening logic in GRPCLB. However, #4469 probably should be completed first to allow the EAGs to each have their own authority. This may also mean we want to change the "this is a GRPCLB server" attribute to something other than ATTR_LB_ADDR_AUTHORITY.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4620
upgrading vision past 1.33.0 gives IllegalArgumentException: SunJSSE selected, but Jetty NPN/ALPN unavailable · Issue #4620 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running a discord bot on a raspberry pi and using vision to perform OCR on mobile screenshots. It works fine with 1.33 and lower, but 1.34 and 1.35 throw IllegalArgumentException: SunJSSE selected, but Jetty NPN/ALPN unavailable.
I'm running a build of Java 10 from here (since the official openjdk binaries are 64 bit):
Relvant stack trace from 1.35:
Is this a bug, or intentional? Can I enable or disable something via config to update the client?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4624
ManagedChannel.getState() throwing a N · Issue #4624 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.1.2
What did you expect to see? Expected ManagedChannel.shutdown() to execute without throwing a  java.lang.UnsupportedOperationException: Not implemented exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4626
gae-interop jdk7 timeoutOnSleepingServer is flaky · Issue #4626 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like a bug may be hiding the real failure information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4634
Conflig between netty-transport-native-epoll and netty-tcnative-boringssl-static · Issue #4634 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
I am doing service as connector using grpc 1.13.1 with the following roles:
Categorize requests, after that forwarding through other services (as client side).
Between the connector that calls the other services through the domain gateway, nginx uses ssl
The problem encountered conflict when:
How do I fix the error described above
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4640
getExtension can get values in android · Issue #4640 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.13.1
What did you expect to see?
rspPacket.getExtension(RoomsvrCommmsg.cMDCREATEROOMRSP); the server had sent, but i can not get the values. can anyone help me? I use in android! (use golang as server)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4641
getExtension always get default values · Issue #4641 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.13.1
What did you expect to see?
getExtension always get default values. can anyone give me some example ? how to use ？i use proto 2 in android . thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4642
Does grpc/netty now support TLS on Android? · Issue #4642 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A year ago, I opened an issue (#3041) regarding grpc in Android.
The purpose was to create a secured communication channel between server and client, both in Android.
I would like to know if in the recent updates grpc or netty were upgraded to feature this or do we still have to build the C++ server into the project?
Thank you and best regards.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4645
Tracking issue for ProxySocketAddress experimental API · Issue #4645 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4648
Please update tests w.r.t new releases · Issue #4648 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The tests are not up-to date.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


4651
Received DATA frame for an unknown stream error · Issue #4651 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi - We are seeing few sporadic "Received DATA frame for an unknown stream"  error on server side. On the client side we are making a unary call with deadline. Is this error expected on server side when the client deadline has been exceeded?
On the server side we do check if the context hasn't been cancelled via something like:
Here's the stack trace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4654
Fix build issues for jdk10 · Issue #4654 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After #4652, a build issue with jdk10 was discovered. We ended up disabling jdk10, but we should fix the underlying issue and re-enable jdk10.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4656
Abstract class missing in compiled .proto files · Issue #4656 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello folks
Instead of using gradle or maven I would like to "manually" build my .proto files. I use the following command to do that:
protoc --proto_path=./ --java_out=./ ./helloworld.proto
When I look in the output files I'm not able to find the abstract class which I should extend in my Server like in the example described:
When I run the example step by step then everything works like expected. What I'm doing wrong?
What version of gRPC are you using?
What did you expect to see?
When I build manually the .proto files, there should be an abstract class included.
This is not the case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4658
StreamTracer should be mockable · Issue #4658 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#3305 put DoNotMock on StreamTracer saying that the mocks are not thread-safe. But mockito claims they are, except for stubbing and verify methods. We need to figure out where the discrepancy is and either file a bug against Mockito or let the StreamTracer be mocked.
I discovered this as part of removing DoNotMock for #4452. For my changes, I left things as-is, but I found the documentation I wrote to be questionable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4671
Drop support for Java 7 · Issue #4671 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#3961 (drop Java 6) is coming to a close. This issue is to track dropping support for Java 7. Or rather, using Java 8 language features. As discussed in #3961, Android has fine support for Java 8 language features. Java 7 isn't supported any longer and the Java community jumped on Java 8 pretty quickly. gRPC in particular would love to be able to use default methods on interfaces, and similar Java 8 features.
This issue is to track what needs to happen before we can drop Java 7. If that is "wait for X to happen," that's fine, but if we decide we can't drop Java 7 support yet we should have an idea of when it would be possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4677
NPE in ProxyDetectorImpl · Issue #4677 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
A customer using google-cloud-java reported seeing NPEs around the time their RPCs time out. According to the customer, this happens even though they are not using a proxy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4678
Netty for Header to deal with · Issue #4678 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Problem solving
Hi，I am using GRPC with Netty. Now I want to process the Header passed by the client side, in the HeaderServerInterceptor. But this Header, which I also want to use in specific services, could you please tell me how to get it in specific services?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4680
Consider using Gradle's dependency locking · Issue #4680 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Gradle 4.8 added support for dependency locking. It'd be nice to use it so that we could easily and periodically bump versions of our dependencies. Certain dependencies we may not want to bump, but the rest of them could use + syntax so we wouldn't have to manage them as manually.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4681
Consider swapping to Gradle's Maven Publish Plugin · Issue #4681 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We're using the old maven plugin for generating artifacts. It doesn't support parallel build and has long been discouraged.  We had to use it previously to sign artifacts. But since we now sign artifacts with Kokoro and the Maven Publish Plugin supports signing there's no known limitations that would prevent migration. We should then remove the -Dorg.gradle.parallel=false scattered in our various scripts.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4683
Tracking issue for StatusRuntimeException · Issue #4683 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4684
How to properly obtain a message hash to send as metadata? · Issue #4684 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Currently in a project that I am working I need to send a hash of the parámeters sent to the server as part of a JWT token that is sent as Metadata (in our current REST API is sent as a HTTP Header).
The problem I am facing is that in a standard ClientInterceptor, and in a ClientCall, the Metadata is sent before calling the sendMessage method, so I came up with this "solution" (I'm using spring):
So finally the sendMessage does all three steps, start, request and sendMessage, but I feel that this solution could break in a non blocking scenario (I am building some tests now).
Could anyone give me some advice if this solution is OK considering the API desing of grpc-java or should I look into something else?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4690
Issues with protoc and protobuf-gradle-plugin · Issue #4690 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The code would compile without errors.
I have the following questions;
I have organised my proto-files separate instances and importing them from a single root document, this gives a very unpleasant experience with gradle, while using protoc manually does not result in these issues. google/protobuf-gradle-plugin#254
Is it expected that the example below would fail? If this is the case, why can this only be shown at compiling phase of the project, but not while issuing protoc to generate the faulty code?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4691
Tracking issue for Metadata.discardAll · Issue #4691 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4692
Tracking issue for SecurityLevel · Issue #4692 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4693
Tracking issue for ClientResponseObserver · Issue #4693 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4694
Tracking issue for StreamObservers · Issue #4694 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4695
Tracking issue for StatusProto · Issue #4695 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4696
Tracking Issue for HealthStatusManager · Issue #4696 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4698
How to close or not display gRPC internal logs? · Issue #4698 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How to close or not display gRPC internal logs?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4700
Dependency upgrades · Issue #4700 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In build.gradle
There may be others but these are the ones that are conflicting upstream (that is, other versions already being selected) in google-cloud-java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4712
Does ServerInterceptor ensure that all the logic in interceptor done even stream close from client side? · Issue #4712 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,
I'm now implementing Server Interceptor for GRPC.
I have limited resources, and want to return this resources after stream close.
so I implement interceptor like this.
in above, there is getResource and returnResource.
my question is
Does interceptor ensure that returnResource must happen even stream close at A point?
I always appreciate for your answer :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4713
[Question] "grpc-netty-shaded doesn't work with epoll" · Issue #4713 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
From https
When using grpc, you can use grpc-netty-shaded in order to avoid netty conflicts. Unfortunately, it doesn't work with epoll. This repo builds a shaded version of netty-transport-native-epoll with the packages relocated the same way that grpc-netty-shaded expects.
So if I use grpc-netty-shaded in linux machine that will hurt performance ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4714
Upgrade appengine-plugins-core from 0.3.9 · Issue #4714 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Somewhere in the build tree this happens:
Download https
I happened to notice this in the output of ./gradlew check
0.3.9 is very out of date
That library was never intended to be used outside a few very specific projects.
Need to figure out how this gets pulled in; and if it makes sense we need to upgrade it. I'm surprised 0.3.9 still works against App Engine server side, and if it does I doubt it will very much longer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4715
compile broken by protos · Issue #4715 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This happens on both Mac OS X and Linux with a clean checkout with .gradlew check:
In file included from /Users/elharo/grpc-java/compiler/src/java_plugin/cpp/java_generator.cpp:1:
1 error generated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4717
Consider adding warning to 1.14 release notes about using epoll · Issue #4717 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty 4.1.27.Final includes a nasty regression netty/netty#8159 which can result in an explosion in native mem usage when using epoll transport. This isn't a problem in 4.1.25.Final / grpc-java 1.13.x, and is fixed in yet-to-be-released 4.1.29.Final.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4721
Audit GrpcFuture cancellation · Issue #4721 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GrpcFuture is currently using an interruptTask() override to cancel the RPC.  This doesn't appear to be correct, as it is only called when cancel(true) is invoked on the outer Future.  There are a few problems with this:
The Future's cancellation is not atomically set with the calls.  If any callbacks start while the future is still cancelling, they may see the call is not yet closed.
The call is only cancelled when true is set.  This appears to be an incorrect interpretation of mayInterruptIfRunning, which is intended for tasks on an ExecutorService.  This is also different than internal RPC implementations
interruptTask() is bordering on being deprecated, and may not be available in the future
Futures can be cancelled from any thread, but ClientCall.cancel is not thread safe.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4722
GKE: Support for a bazel rule to generate api_descriptor.pb · Issue #4722 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Are there any plans on adding a rule to generate the api_descriptor.pb thats required to uses grpc on GKE Endpoints.
Its described in the "Configuring the protocol buffer" of endpoints/docs/grpc/configure-endpoints
If there is I have built one and can submit a PR but im not really sure where to put it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4724
Consider adding @Nullable / @Nonnull annotations to generated services · Issue #4724 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
It would be very helpful for those of us implementing *ImplBase classes in Kotlin if the parameters of generated rpc methods were annotated with @javax.annotation.Nonnull as it gives tooling a hint that the signature of an override should use the non-nullable form of the parameter types.
Minor, but would make implementing services in Kotlin that bit more seamless.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4725
java version "10.0.2" 2018-07-17 javax.annotation · Issue #4725 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Error has been referenced before:
When using java version "10.0.2" 2018-07-17 and building Kotlin example, receive the same error:
Have added the following dependency to resolve:
Is that the recommended solution?
Here is the previous build.gradle currently in the example:
Here is an updated build.gradle that runs without the error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4726
getFullMethodName return different value in Java and Go. · Issue #4726 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to put a signature which contains method name in the headers, but I different value in Jva and Go.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4732
grpc-netty-shaded incompatible with netty-transport-native-epoll · Issue #4732 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I expected to be able to specify EpollEventLoopGroup and EpollDomainSocketChannel as the eventLoopGroup and channelType when using grpc-netty-shaded.
Due to netty-shading rewriting the package path, grpc-netty-shaded isn't compatible with regular netty packages. This is generally fine because grpc-netty-shaded contains all classes necessary to use netty with grpc, but jars like netty-transport-native-epoll are missing, making it impossible (I think?) to use them with grpc-netty-shaded.
Thoughts on this? Should netty-transport-native-epoll/netty-transport-native-kqueue be shaded into grpc-netty-shaded?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4740
Attach channel state information to locally generated DEADLINE_EXCEEDED errors · Issue #4740 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Additional information can be added to description to help debug DEADLINE_EXCEEDED errors.
Things to consider:
Current connectivity state
Latest events from channel trace
Last error from LoadBalancer (saved even after LoadBalancer got out of TRANSIENT_FAILURE state)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4745
DnsNameResolver should delay refresh if one has happened recently · Issue #4745 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
RR and other LBs may cause refresh() to be called very frequently. There is a need to avoid constantly issuing DNS requests, so the cross-language design (can't find it right now; it's probably on a random C issue/PR) was to delay (not ignore/squelch) queries if a query had recently been completed. This allows time to combine the refresh() with other refresh()es and reduce the total number of queries.
grpc-java today relies on Java caching DNS results. This works fine. However, the cache does not apply to queries performed with JNDI. As we begin querying SRV and TXT records, we will need to add the delay logic.
This could be implemented in ManagedChannelImpl.
This is a blocker for enabling gRPC-LB. Putting this in 1.15 milestone since it impacts automatic ALTS detection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4747
Certificates pinning · Issue #4747 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Hi! I couldn't find any documentation about certificate pinning. I found some thread about it  but I failed to have any progress further on that. Can you provide a link, please?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4748
Negotiate SocketAddress between NameResolver and ManagedChannelProvider · Issue #4748 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This would provide the ability to introduce unix: and inproc: name resolvers. gRPC could then automatically choose a compatible transport.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4749
Add InProcess name resolver · Issue #4749 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This would make it easier for code to use inprocess during testing, as only the target string would need to be varied.
This is blocked on #3085.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4750
Add unix domain socket name resolver for Netty · Issue #4750 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is likely blocked on #3085.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4755
ALTS: release handshaker service channel if it is not used. · Issue #4755 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In current ALTS java implementation, we create a shared ALTS thread and a gRPC channel to the handshaker service when we build ALTS channel. The channel to the handshaker service will already be there until application exit. It is more efficient if we can ref count the channel and free this gRPC channel if nobody is using it.
Note that ALTS C++ code does the same resource management: creates a thread and a channel to the handshaker service and only destroys them during grpc shutdown. http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4756
Download Jars link is broken on main page · Issue #4756 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seen here:  http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4764
Travis-CI is flaky when downloading · Issue #4764 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Worse, sometimes is just hangs, with something like this at the end:
From https(since rebuilt), which just hung:
Downloading from apache-snapshots: https

This has gotten pretty bad this week. I think we may need to cache the .m2 folder to help address this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4767
io.grpc.StatusRuntimeException: CANCELLED: cancelled before receiving half close · Issue #4767 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I created 100 clients on the same machine， then the client calls the bi-directional stream RPC
just like the following pseudo-code.
It always gives a runtime exception on the server side after a period of time. I want to know what the problem is?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4771
Support DiscardUnknownFieldsParser · Issue #4771 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We could disable generating unknownFields from proto messages. It will be great if we could specify the  setting by using gradle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4772
Doc seems to be self-contradicting on CallStreamObserver.disableAutoInboundFlowControl · Issue #4772 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
looking at master HEAD
What did you expect to see?
Given that last paragraph I'd expect to see SERVER_STREAMING (1 request to * responses) to be affected on the server and CLIENT_STREAMING (* requests to 1 response) on the client, since these are the ones that have one inbound message.
SERVER_STREAMING has multiple inbound messages from the client's perspective and the same is true for CLIENT_STREAMING from the server's point of view, so listing those in the <ul> contradicts the part above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4776
ClientCallImpl.toString() could be more helpful · Issue #4776 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ClientCall current only prints out the method descriptor, which is not so helpful.  It would be useful to include some more detail.  Here are some ideas:
The deadline
whether the call has been started, half closed, or cancelled
whether initial headers have been received, or trailers recieved
what was the context for the call
the channel id of the call
if the channel has a subchannel assigned, the subchannel id or remote host name
Security level (if available)
Wait for ready or not
These would be useful when printing out the call, or including the call details in error messages, or generally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4783
Tracking issue for ReadableBufferList being experimental · Issue #4783 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#2937 and #2151 call for a public API that exposes an InputStream's remaining data as a list of ByteBuffers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4784
gae-interop jdk7 is flaky with "Each request cannot exceed 50 active threads." · Issue #4784 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4789
can't connect to grpc server in docker dontainer · Issue #4789 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have grpc server in a docker container and run my docker container with below command:
run -p 127.0.0.1:8090:9091 --name test -v "storage":"/usr/storage/test/" test
When I want to connect to this container from grpc client on calling remote procedure I got network closed exception!
I'm using grpc v1.12.0
Thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4792
grpc server executor is not populating java.lang.Error to logging framework · Issue #4792 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Whenever any java.lang.Error occurs, e.g. NoSuchMethodError, it gets logged by logging framework at least.
Above executor only catches RuntimeException and logs it to underlying logger. However, when an error occurs, e.g. NoSuchMethodError due to some incompatible dependencies the service implementation uses, the error could not be caught and logged, thus causing
the loop break while runQueue might still have remaining elements
the Error could not be logged, and fallbacks to ThreadGroup's default uncaught behavior, which is  to print it to System.err
The first consequence might be debatable as the framework does handle the remaining in the end, it seems. Although I would say throwing Errors would be quite usual from user code, thus it might be also reasonable to not break the loop and just "Log it and keep going".
The second one IMHO is having a severe impact. People often look at the log output instead of std err for long-running service. Above code will throw the Error all the way up, very likely there will be no other catches, making the error only print to console, making this error miss in any logging files, or other error reporting system like Sentry. We recently encountered such a case, very difficult to locate the throwing errors without any logs.
So can we also catch Errors and recover from it? Or at least log the error and re-throw it maybe, if you think recovering the error does not make sense.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4796
Move Channelz to io.grpc · Issue #4796 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.grpc.internal.Channelz is used to coordinate between the transport and the channelz service. Since that's coordination across artifacts/components putting that in internal hides an important API. Generally internal is just a "util" of classes that could be shaded into each transport without major issues.
The moved class can be marked @Internal without bothering me at this point.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4798
Dynamic certificate rotation · Issue #4798 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We use mTLS to perform the authentication between client and server. To make thing secure, we decide to roll over the certificate for both client and server very often. Is there a good mechanism to dynamically rotate the certificate without restarting either client or server?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4800
Netty 4.1.30.Final · Issue #4800 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm sure this is on your guys' radar but would be great if it could be included in the next release!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4809
OkHttp: INTERNAL: Flow control error Rst Stream · Issue #4809 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our android-interop test failed: https
junit.framework.ComparisonFailure: very_large_request failed expected:<[Failed... : INTERNAL: Flow control error
Note that the "expected" and "actual" appear reversed in the code, so ignore that "problem" in the message:
"Flow control error" seems to be caused by a ErrorCode.FLOW_CONTROL_ERROR, via a RST_STREAM. That should never happen in proper operation. This seems highly likely a bug, somewhere.
@ericgribkoff, what server are we using in this test?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4811
Issue NoSuchMethodError: io.grpc.MethodDescriptor · Issue #4811 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions:
get this problem when starting.
What version of gRPC are you using?
What did you expect to see?
If you konw how to solve this problem please tell me.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4814
Reset deadline timer / per message deadline · Issue #4814 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I have a bidirectional stream rpc where the call times vary wildly. Previously I had a default deadline but this call may take longer.
As I know the number of messages which have to be transported before the call, I could use a calculation like messages * time to get a deadline which might or might not be appropriate, i.g much too long for short call durations.
In most cases I don't care about the total call time but I would like to set a deadline that cancels the call if there was no message sent in the last X minutes.
A per message (+response) deadline or a way to reset the deadline timer every time a message is sent.
Is there any way to achieve this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4815
Context handling in Tracers · Issue #4815 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.10 and 1.11 the Context returned by ServerStreamTracer.filterContext was attached when streamClosed was invoked. As of 1.12 (and continuing through 1.14) this no longer seems to be the case. It appears this was undocumented behavior and relying on it was my mistake.
That said, I think it would be nice if ServerStreamTracer methods were guaranteed to be invoked with the filtered Context attached. Either way, it would be helpful to have the Javadoc for filterContext specify whether or not the filtered Context is attached when other ServerStreamTracer methods are invoked.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4817
findBugs will fail if we don't check the return value of Context.attach(). · Issue #4817 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Not forced to check the return value of Context.attach().
Upgrading to gRPC v1.14.0 broke our findBugs check, because in 1.14.0 Context.attach() is annotated with @CheckReturnValue. We have to use a work around to pass the findBugs check.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4818
Exception : call was cancelled · Issue #4818 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I wanna cancel a call in case I wanna close a server stream, but when there is no network after cancelling a call, all the request I send using stub I get the exception.
So how can I avoid the exception?
What version of gRPC are you using?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4822
How to use grpc in osgi environment now? · Issue #4822 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Is there any bundle version of gRPC now? or how to convert .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4823
Built-in support of grpc-web clients · Issue #4823 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Supporting grpc-web clients is possible only through a reverse proxy like Envoy which might reduce the performance. Is it possible to add direct support as this wrapper for grpc-go?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4827
Broken pipe - Debug logging - Openshift · Issue #4827 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
gRPC version : 1.13.1
I forward to you this issue : LogNet/grpc-spring-boot-starter#92
I see lot of exceptions (log as debug level) when I deployed a gRPC server on openshift.
Any idea ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4842
permit some services from custom authentication [need help] · Issue #4842 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I need help with custom authentication
I know we can use metadata and inspectors to support custom authorizations like basic authentication but how we can exclude some services from being authenticated in inspectors.
is there something like @PermitAll in JAX-RS (jersey framework implementation) which we can use and check the destination endpoint has this annotation or not in provider?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4843
Channel not changed connectivity state on some Android phones · Issue #4843 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use grpc-java on Android with Kotlin as language. When I turn off network or wifi, or turn on airplane mode on phone - channel connectivity state does not changed!!! He always stay on READY state...
Sample code how i listen connectivity state:
Maybe I do something wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4848
JAVA Client-Server grpc with SSL . Unable to communicate client server · Issue #4848 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to
I am expecting to run Client-Server grpc with SSL.
Hi,
And its working properly. But when I try to use TLS, getting following response:
Kindly suggest.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4849
NullPointerException if method is missing leading '/' · Issue #4849 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a go client initiates a grpc.ClientConn.NewStream to a java server, but the method passed into NewStream is lacking the leading '/', then io.netty.handler.codec.http2.DefaultHttp2Connection.DefaultStream will have a null property in io.netty.handler.codec.http2.DefaultHttp2Connection.DefaultStream.PropertyMap, resulting in a null stream in io.grpc.netty.NettyServerHandler#onDataRead and a NullPointerException when stream.inboundDataReceived(data, endOfStream); is called.
and on the client side the request results in
Adding in the leading / on the go client's NewStream call fixes the issue
What version of gRPC are you using?
This is using netty-codec-http2 version 4.1.29.Final with grpc-netty version 1.15.0
What did you expect to see?
A more descriptive error that there was something wrong in the request. Neither the server logs nor the client error message is descriptive. It is possible the text/plain content might be helpful from the client side, but I couldn't find out where the exception for the content type was coming from in order to fix it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4850
Exception in thread "main" java.lang.IllegalArgumentException: Jetty ALPN/NPN has not been properly configured. · Issue #4850 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to use grpc Java to use a service.
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Successful connection via grpc
Full Error log:
at this line in my java grpc client code:
Gradle dependencies:
Here's my gradle dependency tree:
Tried the troubleshooting guide: Used the same combination of
But still getting the error. Any help would be appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4854
Use default java keystore , when running unit test from intellij · Issue #4854 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I Expect the jvm trusted store to be used, when loaded with self-signed certificate.
load certificate with keytool
Loading a self-signed, certificate like this:
Then creating a default stub without ssl context:
       ManagedChannel channel = onChannelBuild(ManagedChannelBuilder.forAddress("my.host.nl", 443)) .build();
Running the unit test from Intellij.
loading an SSLcontext
From the example "HelloWorldClientTls", I load the certificate (After conversion to .pem), and then the test is executed properly without Exception.
Question
Is this expected behaviour and simply the fact that the unit test in IntelliJ is not using the jvm default keystore? If so, why do you provide an example to load an SSL context with a Netty builder?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4858
Allow custom NameResolvers to support CONNECT Proxies · Issue #4858 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This requires ProxySocketAddress being public. It seems we'll also need to inject ProxyDetector to NameResolvers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4859
Binary releases · Issue #4859 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would it be possible to create binary releases for Linux Max and Windows, so people pinning to a released version don't need to compile it?
See example:
Here's an example for how to build Linux and Mac on a Mac. Mac is built with Docker:
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4860
Android OOM upon network disconnect · Issue #4860 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With grpc-java 1.15.0 on Android I am seeing out of memory issues when network connectivity goes away. isReady() indicates unlimited readiness on the outbound stream for a bidi call until Java runs out of memory.
Here is the relevant code, the complete example is at https:
where channel is more persistently defined as
To trigger the issue I do one complete run of the RPC (50,000 messages upstream & 50,000 messages downstream) with the mobile data network on, then I turn mobile data off and do a second run on the same channel. The second run quickly runs out of memory as grpc-java buffers messages it can't send. The channel does not see a break in the connection when mobile data switches off.
I expected that isReady() would take care of this problem, but it did not. I have tried different variations, including one where writing to the stream is done from a separate, dedicated thread, with 1ms delays between each write, to not block anything and avoid races, but the outcome was the same.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4864
Catch `Exception` even if it isn't thrown, for Kotlin · Issue #4864 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Kotlin does not observe checked exceptions. https. It sounds like that that means that even things like Runnable can throw checked exceptions.
Lots of code will be broken in such an environment, including lots of Guava. But for improved Kotlin handling we could consider making sure to handle Exception catching places we have RuntimeException catching if the application may have been called.
It's probably a good idea to confirm the behavior and discuss this problem with Guava folks and come to a unified agreement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4865
grpc binlog should support headers only or messages only · Issue #4865 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now specifying headers-only would make us log messages truncated to 0 bytes, and specifying messages-only would make us log headers truncated to 0 bytes. This is not compliant with the grfc.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4867
how to scan inputs for xss and other similar attacks (server side) [need help] · Issue #4867 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I need an example of scanning sent data (with for example Jsoup) inside a server inspector and if there is any problem (I mean XSS and other possible attacks inside a string or data) clean it and send it for processing
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4870
android-interop-test isn't compiled in CI for PRs · Issue #4870 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#4853 broke android-interop-test:
However, if you look, the CI is completely green for it. It appears this is because android-interop-test is not compiled as part of android.sh, so it is only once things get merged to master we notice the breakage.
As another note, we discovered (and should remember for the future) that gradle build didn't notice the compilation failure. Apparently build does not include the test app.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4878
Segfault when  LoggingAppender is configured in logback.xml in google-cloud-java · Issue #4878 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Netty starting and terminating correctly
A user reported an issue with a system crash in google-cloud-java when starting Netty with LoggingAppender configured:
After recreating the issue and looking into the logs, it's a Sigsegv in native code outside the VM (
See the log file attached).
We tried updating all of the dependencies to 1.15.0 but that didn't fix it, the stack trace suggests it's an error in native code, so we're pretty sure it's not an issue with any Java code but some kind of issue with the binding configuration in grpc.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4879
java.lang.IllegalStateException: Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available · Issue #4879 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting following error in MAC where as same java spring boot application(pub/sub,spanner) is running fine in windows for my other colleagues:
nested exception is java.lang.IllegalStateException: Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available
Ran the compatibility checker output is as below:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4882
Build fails on arm64 in ':grpc-protobuf-lite:protobufToolsLocator_javalite', ':grpc-compiler:compileJava_pluginExecutableJava_pluginCpp' · Issue #4882 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Successful build on arm64
What I saw instead
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4884
Avoid unnecessary flushes for unary responses · Issue #4884 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently optimize flushes for unary requests on client-side, by delaying flushing until the end of the RPC. When looking at the code, I realized it doesn't appear we're doing that for server-side.
Using wireshare with the interop client/server with empty_unary, we can see a single packet for the request but three packets for the response:
We should optimize the response flow so that all three frames are sent with a single flush.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4887
grpclb-in-DNS clients fall back too early when the LB server ends the stream right after sending a server list · Issue #4887 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One of the scenarios is as follows:
One load balancer
the load balancer ends the stream with an OK status immediately after sending the server list.
The client, when ran in this test scenario, is expected to contact the balancer, get the backend address, and complete the test RPC with the backend. The Java client, however, actually ends up attempting to fall back to the non-existant fallback server right away.
I looked into this a bit and I believe the problem is as follows:
the client receives the server list, and starts creating connections to backends
the client receives the "end-of-stream" from the balancer immediately afterwards and checks if it should fall back
when deciding whether or not to fall back, the newly created subchannels are still in connecting state, and so the client proceeds to fall back.
Because the fallback timer hasn't gone off yet, I believe the client should be waiting a bit longer to give the newly created subchannels more time to connect. I'd imagine that this balancer server behavior is OK and could be used e.g. when the balancer needs to shed load.
The test can be reproduced on a machine with docker installed, by checking out this PR, creating a ../grpc-go directory with this branch, and running:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4890
Server returns batches of `Half-closed without a request` responses to client · Issue #4890 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We expect to see no error message, or at least a better explanation about what is occurring.
These errors seem to correlate with increased latency. We have a Finagle client that connects to Envoy, which forwards to requests to the gRPC service. I've dug through the code and don't really understand how this situation would arise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4893
NettyServer awaitTermination() returns before the shared EventLoopGroups are released · Issue #4893 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Expected to not see the NoClassDefFoundErrors because of a closed classloader after the call to awaitTermination returned.
In our application we load jars using the URLClassloader that communicate using gRPC and the NettyServer. When the module needs to be unloaded we block on the awaitTermination before closing the URLClassLoader.
The logs are filled with NoClassDefFoundErrors on various classes after the classloader was closed.
This is caused by the NettyServer implementation calling eventLoopReferenceCounter.release() after the ServerListener has been notified through listener.serverShutdown() (which in turn causes awaitTermination to return) .
The NoClassDefFoundErrors do not cause any problems, but I would like to prevent them from piling up in the log files, making it harder to spot any real problems.
In short I would like to know if there is a way to determine I can close the classloader without causing the NoClassDefFoundErrors appearing in the log files.
Example of exceptions raised:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4896
Using proto_source_root in proto_library breaks java_grpc_library · Issue #4896 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Say I have 2 proto files sitting in //some-package/
Then I compile the proto_library in //some-package/BUILD`, like the following:
The above works well because proto_source_root, which allows us to not have to import one proto file into another using the full path relative from WORKSPACE.
This also works fine. But finally, I compile java_grpc_library:
And here it breaks. java_grpc_library failes to compile with error:
So basically, A.proto cannot find B.proto. However, when I replace the import statement in A.proto with import some-package/B.proto and remove usage of proto_source_root in proto_library everything works, but we really don't want to do this for many reasons.
Does anyone know what could be the cause and how to work around this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4898
Enable gRPC-LB SRV lookup by default · Issue #4898 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It can currently be enabled via -Dio.grpc.internal.DnsNameResolverProvider.enable_grpclb=true.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4900
Need a way to specify source address when creating ManagedChannel as a client · Issue #4900 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is it possible to provide an option to specify source address to use when creating the ManagedChannel as a client. At the moment, the choice of source address appears to have been left to the operating system?
What version of gRPC are you using?
What did you expect to see?
An option to specify a source address to use on client side.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4901
CallCredentials interface, 2nd edition · Issue #4901 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Security level and authority are parameters required to be passed to applyRequestMetadata(). We will wrap them, along with MethodDescriptor and the transport attributes, to a first-class object RequestInfo, which is more clear to the implementers than via Attributes.
ATTR_SECURITY_LEVEL will be moved to the internal GrpcAttributes and annotated as TransportAttr, because transports are required to set it, but no user is actually reading them from
ATTR_AUTHORITY should be removed, because no transport is overriding it.
This is an API-breaking change because CallCredentials is interface. It will be changed to abstract class, so that further API changes can be done in multiple steps without breaking implementations.
The CallCredentials name is stabilized, thus it must be the name of the new interface. We will take the following steps to finish the change.
Introduce CallCredentials2, which is the new API, which implements the old CallCredentials. Change all stock implementations to it. Deprecate the old CallCredentials.
Make a release, and ask all implementations (including FirestoreCallCredentials) to implement CallCredentials2 instead.
Replace CallCredentials with CallCredentials2, keeping CallCredentials2 as an alias.
Make a release, and ask all implementations (including FirestoreCallCredentials) to switch back to the name CallCredentials.
Delete the alias CallCredentials2
During the whole process, the name CallCredentials stays usable, and we require no change in code that passes CallCredentials objects along.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4905
Mutual TLS instructional code in Readme is wrong. · Issue #4905 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Example code in the Readme should compile without errors?
What did you see?
Errors ranging from a simple missed semicolon, to a method that doesn't exist, and an undefined variable.
While trying to implement Mutual TLS and retrieve the client credentials serverside, I followed the Readme instructional example, which (amongst other things), suggests a ServerInterceptor, specifically:
This doesn't actually compile. Errors include:
There is no semicolon at the end of the first return line.
Proposed Fix
Perhaps the example code in the Readme can be changed to the following, which does compile:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4912
grpclb with TLS sends a malformed SNI host name to the balancer · Issue #4912 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In grpc/grpc#16727, there are several scenarios in which there is a grpclb balancer using plain TLS creds. The client is expected to find the balancer, get a backend, and complete an RPC to the backend all over plain TLS. Go and C++ pass this test but Java doesn't.
It appears that the root cause is that grpc-java includes the trailing period in it's host name passed to SNI. I dumped the SSL handshake between the java client and the balancer, and the java client sends an initial ClientHello with an SNI extension having  a host name of balancer.test.google.fr. (note the trailing period). This is unlike C++ and Go, which don't include the trailing period in the SNI hostname. The balancer SSL handshaker responds by aborting the handshake with an ssl_unexpected_message alert. Since trailing periods are invalid by SNI spec, I think that the java client needs to strip any trailing periods of resolved balancer names in SRV records. For example, java passes the "grpclb with plain TLS" test with this hack
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4917
Tracking issue for LocalSocketPicker being experimental · Issue #4917 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4921
how to set default window size in okhttp? · Issue #4921 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
how to set default window size in okhttp?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4922
How to customize the jvm startup parameters in the gRPC-java startup script · Issue #4922 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want to add some JVM startup parameters to the gRPC-java startup script.
For example by customizing the CreateStartScripts Task or other methods.
Does anyone know how to do it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4924
Configure repo to recognize Googlers as CLA approved · Issue #4924 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specifically, if a user is a member of google or GoogleCloudPlatform on Github, they should not need to sign a separate CLA.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4929
CallCredentials should respect the Deadline · Issue #4929 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
An RPC should never outlast a deadline set in either CallOptions or `grpc.
What I actually saw?
CallCredentials does not respect deadlines, so a ClientCall cannot guarantee that the RPC will finish within a set deadline (for example if an OAuth token needs to be refreshed). Furthermore, the current CallCredential api makes it impossible for CallCredentials to access the deadline set in CallOptions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4931
Provide a dedicated grpc-all.jar for downloading · Issue #4931 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
like I commented in netty/netty#4671.
I'm not opposed to produce empty netty-all.jar for maven repository, but a dedicated netty-all.jar is necessary for downloading at somewhere like github releases, some people or some projects manage dependence manually.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4932
Implement client-side health checking · Issue #4932 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4933
Java 11 support · Issue #4933 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I get following error on a simple grpc async communication.
underlying issue is with netty implementation, they look to have fixed it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4934
Why does grpc-all depend on protobuf-nano not protobuf-lite · Issue #4934 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
As I understood, grpc-protobuf-lite should be preferred over grpc-protobuf-nano for Android. Also I understand that grpc-all is not recommended to depend on, instead of it's better to explicitly depend on necessary parts.
My question is why grpc-all depends on grpc-protobuf-nano not grpc-protobuf-lite. Is it because of backward compatibility?
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4935
too many exec threads keep memory leak · Issue #4935 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi
i use grpc which version is 1.11.0
when i test the server's stablity ,make about 16000 connects ,there are too many exec threads to handle message ,moreover, the memory used  80%, it's very slowly ,and memory  keeps growth
could you give some solutions about this issue?
think you~
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4938
Require using InternalNettyServerBuilder to specify a ProtocolNegotiator · Issue #4938 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ProtocolNegotiator could then become package-private.
That then only leaves GrpcHttp2ConnectionHandler and ProtocolNegotiators as public-but-not-prefixed-with-@Internal in Netty. They should be cleaned up as well, but it can be a separate issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4942
Android has smaller DNS cache TTL than OpenJDK · Issue #4942 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For #4745 we added a cache for SRV requests that mirrors that done in Java itself. We've seen a report that this changed the behavior on an Android app from needing 6-10 seconds after migrating networks to 30 seconds to be able to connect.
The issue seems to be that doing DNS requests while the network is still coming online can produce weird results, including replies with zero addresses (not UnknownHostException). This may be related to IPv4 vs IPv6, but it's a bit unclear.
In any case, it appears Android uses 2 seconds as its cache TTL:
We should probably detect Android and swap to 2 seconds on that platform.
This would be good to backport to 1.16.x and likely even 1.15.x.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4948
Revert DNS cache TTL (#4947) · Issue #4948 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
internally android has problem with #4947 (b/117630132).
it is already reverted from the master, revert the change from 1.16.x.
original issue #4745
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4951
DnsNameResolver swallows UnknownHostException · Issue #4951 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As pointed out to us by a Googler, when JNDI is not enabled (the default), this condition will never succeed since balancerAddressesException == null:
This causes DnsNameResolver to return an empty address list, which causes "UNAVAILABLE: NameResolver returned an empty list".
This seems related, in part, to #4948.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4962
Investigate why DNS cache doesn't work on Android · Issue #4962 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On of the internal android user reported that when network switchover on Android
internally tracked bug b/117293120 (contains repro)
related issue #4951
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4970
Issues with SpringSecurity - AOP final issue vs missing interface proxying · Issue #4970 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I would like to use SpringSecurity to secure my grpc service.
(The authentication and exception handling is done via interceptors.)
However if I do that I get one of two issues.
First, the default way of Spring to apply the value is using an interface based proxy. This will cause
errors because the actual methods aren't present in any interface.
I can avoid that error by using an AOP based proxy, but if I do that, then I get a warning in the logs:
The error was introduced by: #2552 / #2553
Manually create an interface for that.
Remove final modifier from that method .
PS: I used Spring-Security as an example, but the same issues apply for any kind of annotation based runtime code injection. Such as method call parameter logging, timing/metrics...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4972
Tracking issue for Attributes annotations being experimental · Issue #4972 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
They were added in #4892. Although they are source-only, other people may start using them in their own code, so it's still public API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4975
GrpclbLoadBalancer should go to TRANSIENT_FAILURE if received a DROP-only server list · Issue #4975 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to discussion with @markdroth, GrpclbLoadBalancer should return TRANSIENT_FAILURE state and drop all requests if received a server list that contains only DROP entries. The current code, while likely unintentionally, appears to use CONNECTING state instead. We need a unit test for this case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4981
Failed to bind address already in use (shutdown not working properly?) · Issue #4981 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
In my shutdown, I do the following:
This happens in the teardown of a unit test.
Intermittently, the next test that runs fails with an "Address already in use" cause which I have verified is because the previous test is still holding on to the port for some reason.
I expect my shutdown procedure to guarantee that the port will be free after shutdown.
Am I missing something in my shutdown procedure or could this be a bug?
Relevant bits of stack trace and thread dump at the point when the second test fails to start the server:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4982
Loading service providers from a hard-coded list only works with non-shaded netty version · Issue #4982 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Isn't this missing the shaded package name?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4984
Tracking issue for io.grpc.SynchronizationContext being experimental · Issue #4984 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4985
1.13.2 - 1.15.1: 0.18.0 Bazel build fails - OkHttpClientTransport access guard failure · Issue #4985 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
The problem occurs on version 1.13.2 through 1.15.1 of gRPC. Using bazel 0.18.0 on OpenJDK 10. The output of bazel info is at end of this issue.
What did you expect to see?
No build error in bazel. The workaround for now is to put 'build --javacopt="-XepDisableAllChecks"' in .bazelrc or on command line
This is the output of the build error that is seen:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4987
gRPC-LB should fallback immediately due to obvious errors contacting gRPC-LB server · Issue #4987 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today the client waits ~10 seconds until the fallback timer has expired. While the timer is useful to address the long tail, it shouldn't delay using the fallback in case of obvious errors, like the channel failing to connect or an UNIMPLEMENTED response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4992
Allow non grpc services to report health/service existance · Issue #4992 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Feature-Request
Not all applications are purely grpc based, so it would be nice if the HealthStatusManager could expose the health also to other beans. This is especially useful for most monitoring systems that still rely on plain http (html/text/json...).
It would be nice if a method like the following could be added:
Alternatives considered: Create my own beans and track the health status twice.
Might be related to #1848, #4356.
PS: If this feature gets accepted, I can create a PR for that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4995
pubsub latest · Issue #4995 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4998
DnsNameResolverTest is flaky · Issue #4998 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

