1
Test issue · Issue #1 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
blah blah
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2
Net module · Issue #2 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Complete the Net module.
Remaining to do:
SSL support
Sendfile
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3
HTTP module · Issue #3 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Complete this.
Remaining to do:
HTTPS
Cookies
Pipelining test currently commented out
Some missing tests, including: chaining methods, multiple connections, pause/resume
Write some examples including: Websockets, sendfile, POST/PUT example
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4
Buffer module · Issue #4 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Complete this module.
Consider adding methods for getting, setting and appending primitive types.
Test remains to be done.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5
File module · Issue #5 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Implement this.
Initially use new Java 7 async file IO.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6
Global event handlers · Issue #6 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7
Shared data structures · Issue #7 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Complete these with associated tests. We should accept any value that's a primitive type, String, or implements the Threadsafe interface
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8
Composition · Issue #8 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Complete this.
Consider renaming when() and provide other ways of composing. Update methods in other modules to return Completions as appropriate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

9
UDP module · Issue #9 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Implement this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

10
STDIO module · Issue #10 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For reading/writing from console
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

11
DNS module · Issue #11 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

12
Timers · Issue #12 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Timer functionality
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

13
AMQP module · Issue #13 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

14
Redis module · Issue #14 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

15
SCTP module · Issue #15 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

16
PGM module · Issue #16 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

17
STOMP module · Issue #17 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

18
Memcached Module · Issue #18 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

19
SMTP module · Issue #19 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

20
JDBC module · Issue #20 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

21
REST module · Issue #21 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

22
Spawn module · Issue #22 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Module for spawning processes and capturing their input output streams etc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

23
Social media module · Issue #23 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For integrating with Twitter/Facebook/Google+
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

24
JMS module · Issue #24 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For interfacing with JMS providers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

25
Connection pooling · Issue #25 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Asynchronous connection pool will be needed for:
Net, HTTP, AMQP, Redis etc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

26
Package manager · Issue #26 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need to create a package manager for node.x
We should also host a public repository (e..g on Amazon) where people can upload and download modules.
All modules other than core should be managed via the package manager.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

27
Web framework · Issue #27 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should write a super lightweight framework in the style of sinatra/express that can be layered on top of core HTTP.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

28
AMQP client · Issue #28 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AMQP 0.9.1 client.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

31
Support hybi-10 websockets · Issue #31 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hybi-10 is now supported by IE, Thunderbird and Chrome.
We need to update our implementation to hybi-10 so it works (the current impl now won't work with the latest version of Chrome)
Someone has made a pull request in Netty here:
netty/netty#26
We should take a look and merge it into our forked Netty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

37
test fails · Issue #37 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi running tests (with gradle or with ant) fails at org.vertx.tests.core.file.FileSystemTest
getting null as message for all fails. I am on ubuntu 11.10, using openjdk 1.7
Copy of the gradle report:
org.vertx.tests.core.file.FileSystemTest
testMkdirWithParentsFails
testChmod
testMkdirCreateParents
testMkdirCreateParentsWithPerms
testCopyEmptyDir
testMkdirSimple
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

38
If no -cluster-host is specified 0.0.0.0 is used · Issue #38 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you are running vert.x in clustered mode and do not specify -cluster-host, it will default to 0.0.0.0 which means if you have multiple nodex running on the network they won't see each other (since they try to connect to the others at 0.0.0.0).
Workaround is to always specify -cluster-host when running clustered.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

44
Documentation / Website URL is broken - returns 404 · Issue #44 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FYI:
http://purplefox.github.com/vert.x/ -- returns a 404
Is there another location / site with documentation?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

45
Java examples build script is broken · Issue #45 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java examples ant build script in the 1.0.0.beta.1 distribution is broken.
To fix, change:

to
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

46
Release 1.0.0.beta.2 · Issue #46 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

47
Various cluster bug fixes · Issue #47 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Around the area of nodes joining and leaving the cluster
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

48
Introduce pingers on cluster connections · Issue #48 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Pingers so cluster connections are properly closed when nodes disappear from network
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

49
Vert.x core library · Issue #49 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Produce a vert.x core library as part of the distribution.
This can be used embedded in any Java application.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

50
Add vertx.bat to distribution · Issue #50 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Modify build.xml so vertx.bat is in the bin directory of the distribution along with vertx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

51
Release 1.0.0.beta3 · Issue #51 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

52
Upgrade vert.x to support SockJS 0.2.1 · Issue #52 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

53
Correct erroneous SockJS iframe and HtmlFile html · Issue #53 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to the overzealous nature of IntelliJ refactoring, the string 'body' was renamed to 'payload' in multiple places in the project, including some of the static html used by SockJS.
This may cause SockJS to fail to work with all transports.
This effects vertx-1.0.0.beta2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

54
SockJS bridge always using websockets · Issue #54 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to an error in the way handlers are applied in DefaultSockJSBridge, it means that only websockets will work for all sockJS transport.
This is because the bridge is applying a catch all handler for all requests which wipes out any non websockets handlers applied by the sock js server.
This effects 1.0.0.beta2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

55
Release 1.0.0.beta4 · Issue #55 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

56
Release 1.0.0.beta4 · Issue #56 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

57
Race condition in clustering · Issue #57 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

58
Tidy up of buffer API · Issue #58 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Remove buffer factory methods etc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

59
Release 1.0.0.beta5 · Issue #59 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

60
Race condition in event bus sending · Issue #60 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When two or more event loops attempt to send to the new server concurrently and the connection has not yet been setup
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

62
Release 1.0.0.beta6 · Issue #62 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

64
Small error on website. · Issue #64 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On this page: http://vertx.io/wsver-0002/ruby_web_tutorial.html in step 4 ("Get the persistor up and running") there is the following line which isn't grammatically correct and a bit confusing.
Vert.x ships with an out of the box bus module (busmod) called MongoPersistor. This is a busmod is component which communicates with other components on the vert.x event bus by exchanging JSON messages.

I think it should be more like the following?
Vert.x ships with an out-of-the-box bus module (busmod) called MongoPersistor.  A busmod is a component which communicates with other components on the vert.x event bus by exchanging JSON messages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

66
Exception when undeploying SockJSExample.groovy · Issue #66 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run a Vert.x server, deploy the SockJSExample.groovy sample app, send a couple of messages via the browser. Now try to undeploy the app. Server is currently throwing the exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

70
NoClassDefFoundError when running amqp demo · Issue #70 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
thx for fixing the 'rabbit lib' issue;
build the branch successfully, and did run the JS file;
Now I am getting the below:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

71
Improve JS logging API · Issue #71 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The JS logging API is a bit infulencent by a java language:
while for JS folks it might be more 'natural' to use something like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

72
Groovy API and examples · Issue #72 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Complete the full Groovy core api along with full examples and docs
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

73
Removal of singletons · Issue #73 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Usage of singletons (and static caching) should be removed everywhere from the vert.x API
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

74
Factory methods for constructing servers and clients · Issue #74 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Factory methods should be used for constructing servers and clients rather than the new operator.
This allows the vertx context to be passed behind the scenes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

75
Maps for Http Headers and Trailers · Issue #75 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Maps should be used for representing HTTP headers and trailers throughout the API
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

76
Miscellaneous API changes · Issue #76 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Various other small changes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

83
Background pool size hardcoded to 1 · Issue #83 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Somehow this got set to 1 a couple of months back... :(
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

84
Various typos in docs and tutorial · Issue #84 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

85
Upgrade to netty 3.4.0.final · Issue #85 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

86
Release 1.0.0.beta7 · Issue #86 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

87
Modules · Issue #87 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Allow modules to be installed in a module dir and referenced from command line or other verticles.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

88
add support for multipart/form-data · Issue #88 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my project, I need to upload a file to the web server. On client side I created a web form, to POST the file as multipart/form-data to the server. Then I used sample code from the "upload" example to handle the file upload on the server (save it in a file, for now).
However, this results in the following stream on the server:
As far as I can see, I need some code to reconstruct the original
stream (e.g. Commons FileUpload). Briefly glancing through the
documentation I could not find an immediate "vert.x way" of handling this.
Cool. I will take a look, but Netty contains a multi-part form parser in
the master branch which hopefully will end up in the 3.4.0 branch before
long so hopefully we can just use that
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

89
Add methods for dealing with HTTP-cookies · Issue #89 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP request/response interfaces (both client & server) should have convenience methods for getting/setting cookies (similar to what the Servlet-API does). These would simply help with parsing/generating the cookie-headers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

90
SockJS socket end handler not called for websockets · Issue #90 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

91
Upgrade jars · Issue #91 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Upgrade hazelcast and jruby to latest versions
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

92
Release 1.0.0.beta8 · Issue #92 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

94
Broken vertx.bat · Issue #94 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The windows batch file vertx.bat does not set vertx.mods and vertx.install so won't work if verticles reference any modules and won't let module dir be overwritten
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

95
Java webapp tutorial · Issue #95 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

96
Release 1.0.0.beta9 · Issue #96 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

97
Release 1.0.0.beta10 · Issue #97 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

99
Groovy SockJSSock close() · Issue #99 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling close() in the dataHandler is not triggering the browser's SockJS registered close() handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

100
Expose writeHandlerID on Groovy SockJSSocket · Issue #100 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

101
Websocket frame decoding fails for frames over 32kB · Issue #101 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

102
Performance related parameters · Issue #102 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add several performance related parameters:
connectTimeout - for connection attempts
bossThreads - no of threads to use for connecting
NetServer, HttpServer
backlog - tcp accept backlog
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

103
Netty uses adaptive buffer even when buffer size is specified · Issue #103 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
By default Netty uses an adaptive receive buffer even when the buffer size is specified to the server.
Code in vert.x should be adapted so, if a receive buffer is specified then an adaptive buffer is not used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

104
Network exceptions not propagated to ruby vertical  · Issue #104 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using NetClient in a ruby vertical, if the address fails to resolve or the connection is refused, the exception thrown in the underlying java code is propagated as a ruby exception to the vertical. I put an open rescue in the method calls connect on the NetClient instance, and it never is called. Here is a stack trace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

105
Exception in ruby NetSocket.write_str · Issue #105 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in src/main/ruby/core/net.rb the wrong method is called on the java object.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

107
MongoDB busmod currently swallowing errors · Issue #107 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

109
Cookie-based authentication on SockJS bridge and authentication manager · Issue #109 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The SockJS bridge and the authentication manager busmods could benefit from an authentication cookie. That would allow to reconnect several times to the brdige, without providing login/password.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

110
Plug custom authentication in SockJS bridge · Issue #110 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Users should be able to provide their custom authentication mechanism to the SockJS bridge (and maybe other future busmods).
A few examples of custom authentications that could benefit from that:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

111
Ruby API docs link broken · Issue #111 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http is returning a github 404 page, at least for me. It was working two days ago.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

112
feature request: expose client IP address in NetSocket · Issue #112 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are many use cases where one side of a TCP connection must know the IP address of the other side of the connection. NetSocket should expose the peer endpoint information such as IP and port.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

113
Groovy routematcher example doesn't work on Windows · Issue #113 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Other Groovy examples might also be affected.
This is due to the windows batch file including the lib/groovy dir on the classpath. This resulted in Groovy classes being loaded with the wrong classloader.
Fixed by removing dir from classpath, and also removing lib/groovy from build since no longer needed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

114
Consider using Errai JSON serializer · Issue #114 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

115
Allow core and background pool sizes to be configured · Issue #115 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

116
Groovydoc - @return tags not handled properly · Issue #116 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seems to be a bug in Groovydoc meaning @return is not parsed if there is no preceeding text. Add some preceeding text to workaround it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

120
Better layout for http://vertx.io/docs.html · Issue #120 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I’ve been using vert.x for a while now but I still find it hard to find the correct link to the documentation I want to look at. I rearanged the info a bit. I would send a pull request if I knew where the repos for the site is.
Please try this and see if you like it:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

125
Lowercase header names · Issue #125 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to the names of HTTP headers a re case insensitive. I suggest that they are lowercased before they are put into the header map so that getting the value of a specific header is easier.
I’m looking for "content-type", but some clients send "Content-Type" or "Content-type", so a simple
will return null in some cases.
I guess we could actually have both the sent key and the normalized key in the map so that we don’t break any code that checks for a specific case version.
OR put a wrapper around the map and let the get() method  lowercase the lookup param as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

126
Add perf tuning section to manual · Issue #126 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Including:
client boss threads
receive and send buffers
backlog
connect timeout
scaling
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

127
unescaped type parameter in Server.java example · Issue #127 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
on the Java example, instead of this:
say this:
I can see the type parameter has been served as an html tag, so maybe you want to use < and >
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

128
Doc is wrong or code is wrong, choose one (cluster mode) · Issue #128 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation (here:) told me about option '-port' for the clustered mode. I struggled to run this example from the doc :
Down to the code, it seems that the actual parameter to give to set the deployment port on vertx start is '-deploy-port'
The vertx command line help speaks also about this non effective '-port' option
So either the documentation is wrong or the code is wrong.
Could you please choose one and fix this ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

129
Add trace logging code · Issue #129 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So it's easier for users to diagnose issues when running.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

130
Python Support · Issue #130 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I see that this app supports a wide range of languages and am wondering if python support is planned at all?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

131
Possible isolation issue with Groovy · Issue #131 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can use metaClass to add static property to class (e.g. java.lang.Object) which can be used to share state
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

134
Feature: ENV variables in JavaScript verticles · Issue #134 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be awesome to have direct access to ENV variables from JavaScript verticles.
e.g. be able to use something like ENV.PATH to access PATH variable from environment.
Similarity: Ruby verticles can use ENV["PATH"] to access environment variables.
Workaround: generate config file from shell while starting application -> pass config to vert.x -> load config in verticle.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

136
Flow control on event bus · Issue #136 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To prevent OOM under high load
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

137
Support package.json  · Issue #137 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems Rhino does not implement CommonJS packages.
There's already a fallback for loading /index.js in Vert.x but first it should look for "main" in /package.json for greater compatibility with nodejs's implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

138
Kotlin Support · Issue #138 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Haven't seen Kotlin mentioned anywhere in the vert.x docs/wiki/discussions.
Much of the syntax is very similar to Groovy (James Strachan (Groovy) and Alex Tkachman (Groovy++) are core devs), which could provide insights and inspiration for the API.
On the Kotlin side, there's the germ of a discussion here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

139
Setup CloudBees DEV@cloud FOSS free · Issue #139 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since Travis doesn't support JDK 7 we should use the DEV@cloud service from CloudBees to setup CI with Jenkins.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

142
Netty exception leakage · Issue #142 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed ([1]) on the Google group, a netty ChannelException is thrown by HttpServer.listen (e.g. on duplicate port). This should be wrapped in a suitable vertx exception (including indication of the cause) to avoid leaking the netty implementation of HttpServer.
An example stack trace of where this occurs is appended below.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

146
sendFile sometimes marks incorrect mime type · Issue #146 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Summary
In some Linux installations of Java 1.7 where freedesktop.org's mime database is not installed sendFile() does not send the correct mime type with the file. e.g. index.html is marked as "text/plain"
Background
Under Linux the set of standard java.nio.file.spi.FileTypeDetector implementations makes use of freedesktop.org's mime database (as far as my limited testing was able to work out, it could try others.) - usually installed at /usr/share/mime.
If this database is not installed, probeContentType() returns "text/plain" for, at least, files with .html, .css and .js extensions.
(this could be the default FileTypeDetector's functionality?)
This is problematic for some Java installations, in particular if you install Oracle's JRE directly or Debian/Ubuntu headless JREs.
Proposal
Two ways this could be solved is either:
1 - Implement and inject into the chain your own implementation of FileTypeDetector so probeContentType works under that environment or
2 - change sendFile to not rely on probeContentType().
Extra Info
The JRE comes with a file "lib/content-types.properties" that is, as far as I can tell, in most/all JREs (Ive tested Ubuntu's headless, Oracle's distribution and OsX's), which could be successfully used?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

147
Problem launching vert.x from a directory with spaces in its name · Issue #147 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran into a small problem when testing vert.x for the first time (Mac OS X 10.7). When launching vert.x from a directory containing spaces in its name it produces a small error targeting line 22 of the vertx script:
I fixed it by quoting CURRDIR
I'll send a push request for that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

151
Update docs and website for java source verticles · Issue #151 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

152
Remove vertx start · Issue #152 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This seems redundant, and confusing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

154
Multi-value HTTP request params not handled properly · Issue #154 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, multi-value HTTP request params (for example as used by multiple select boxes) are not handled correctly.
The request params just give users the first value, instead of all of them.
The request params value should contain a string when there's just a string value associated with it, and a list of strings when multiple values are used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

155
Vert.x not loading all dependent jars in the lib folder for a mod · Issue #155 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a an issue generated from this thread: http
I have a small simple project (source code below) that uses two dependancies.  I created a Vert.x mod and tossed all the required jars into the lib folder of the mod.  I noticed that basically one jar is loaded but the rest are not as I continue to get a ClassNotFoundException error even though I'm 100% sure the required jars are in the lib folder.
From the Abdera (one of the dependencies) source code:
Digging a little more, it seems like it should be able to see the dependency.  This is the full stack trace that I see:
The libraries are put into the lib folder of the module.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

156
Add support for BSON · Issue #156 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ebson library almost-but-not-quite works with the JSON support already in Vert.x.  It would be nice to have BSON support transparently (or nearly so) so that binary data can be exchanged across systems.  For example, I have BSON data being sent as messages on my RabbitMQ broker that I would like to consume with the AMQP busmod.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

157
Add docs for CommonJS support · Issue #157 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

159
Fix timer docs · Issue #159 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As above but for Java, Groovy and Ruby too
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

160
In the docs website, home is having `active` class for all pages. · Issue #160 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The active class should be corresponding to the page title.
Current in install.html:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

161
Provide way of setting path adjustment when a Context is created · Issue #161 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In embedding vertx in certain other environments (e.g. OSGi) it is necessary to set the path adjustment so that resource loading can be redirected to the appropriate file system directory. This was discussed on the Google group here.
Currently, the only way of achieving this is to call vertx implementation methods from the application when it is called to process a request. Not only is this inefficient, it is logically misplaced. The resource loading strategy is independent of the application and is not something that should concern an application programmer.
The preferred solution would be to allow each newly created Context to be manipulated and have its path adjustment set before the Context is used for dispatching applications.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

162
Consider using slf4j for logging · Issue #162 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I realize it adds an additional dependency, but using slf4j for logging means developers will have more flexibility in how they want to log then using java.utils.logging.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

163
Consider using classpath somedir/* to load jars · Issue #163 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java 6 introduced a feature that allows a classpath element to be some/Dir/Path/* and it will load all the jars at some/Dir/Path so you can just put the jars that should be loaded when vert.x runs into $VERTXHOME/lib/jars/.  This would also make it easy for developers to drop in additional jars to be loaded at runtime.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

165
Police restrictions about registering handlers with listening servers · Issue #165 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx apparently does not support registering a handler with a server that is already listening. This needs to be documented, but also policed to ease problem diagnosis. For example, an exception could be thrown when an attempt is made to register a handler with a listening server.
See this thread for background.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

166
Provide source with Vert.x binary releases · Issue #166 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please provide sources for download for Vert.x binary releases.
This is especially useful when developing in Java since it allows to browse directly framework javadoc and internals.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

167
Exception Occurs when restarting a EventBus server. · Issue #167 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Testing Code:
Kill Server
Restart Server.
Client raises exception.
Cheers,
Daryl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

169
Shutdown vertx from verticle · Issue #169 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Is there a way to shutdown all of vertx from a verticle?  Basically, I am looking for a way to kill off vertx at the end of some automated tests and killing the java process doesn't seem very elegant.
thanks,
Jake
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

171
Allow disabling of registerHandler() for clients · Issue #171 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As said here:
There is currently no way to disable the registerHandler() for clients ( SockJSServer.bridge() for example).
Maybe the SockJSServer config could disallow "register" and "unregister" messages somehow?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

172
Allow sending of JsonArray on the event bus · Issue #172 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When working with JSON and passing around collections of things, it is tedious to always need to wrap in an envelope JsonObject.
You should allow sending of JsonArray on the event bus. This will require a small refactoring in JsonMessage. But you could  also probably achieve more uniformity to the APIs by making your JsonObject and JsonArray share a trivial common supertype, similar to how GSON has a JsonElement supertype for its JsonObject and JsonArray. This could also be done in an API backwards compatible way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

173
js.jar missing on vertx 1.0.1 · Issue #173 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Receiving java.lang.NoClassDefFoundError: org/mozilla/javascript/ContextFactory while starting JavaScript samples.
Comparing vertx 1.0 and 1.0.1 I've found out js.jar is missing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

174
Publish a gem · Issue #174 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be awesome if Vert.x was available as a gem for JRuby. That way it would integrate better into the way people write JRuby applications and the whole dependency management toolchain in Ruby -- Bundler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

175
Vert.x Supervisor · Issue #175 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Per discussion here: https:
It would be great to have a supervisor process for Vert.x.
The following is a code of mine that uses Java 7 File Monitoring APIs to watch file changes and restart a Vert.x process if required.
Cheers,
Chanwit
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

177
Reply Message from worker behind worker-queue not received in sender when work has been processed · Issue #177 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using the worker-queue, currently an reply message from a worker behind a worker-queue can not be received by the sender.
Could you please make a small change to allow the replies to get back to the sender.
Right now, the sender gets a reply when the work has been accepted by the queue, not when the work has been processed.
Based on the initial discussion in the google group.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

178
catch the disconnects/resets the underlying TCP connection exception · Issue #178 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It would be nice to have a way to be informed of the disconnection of the underlying TCP connection. (I.E. long polling handling).
Currently
the exception is voluntarily swallowed by
an exception handler is not triggered
Suggested evolution:
Add a connectionClosed handler on the ReadStream interface
Config param to throw the connection to the exceptionHandler
This issue is created in response to this thread
Thank you.
Jocelyn.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

180
DefaultEventBus sendRemote bug · Issue #180 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In sendRemote it currently says
I think what you actually need is
prevHolder is not used anywhere afterwards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

181
DefaultEventBus cleanupConnection · Issue #181 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I think the 2nd remove is redundant and can be removed.
holder has not toString() which is why the debug output might not be of great value.
And, yes I know it's sometimes a pain, but I think it's generally a good idea to use if (log.isDebugEnabled())...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

182
DefaultEventBus ConnectionHolder connected: redundant exception handler · Issue #182 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think either exception handler is redundant
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

184
DefaultVertx runOnContext: code simplification · Issue #184 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
That's how it looks like today
why not?
If that change is ok, than we might not need runOnContext at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

185
Connection code simplication · Issue #185 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All subclasses to ConnectionBase override
and remove all overrides. I think getContext() should be final and not be overriden. I cannot think of a use case where that makes sense.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

186
Update mods manual... · Issue #186 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With changes for inbound and outbound permitted in webserver module
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

187
documentation error in mongopersister examples · Issue #187 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Many examples use "match" when "matcher" is the correct setting
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

188
Eventbus registers a new context close hook for each handler · Issue #188 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think it is  more efficient (and cleaner) to change eventbus.close() to properly unregister all handlers and invoke eb.close by a ctx close hook which gets added when the context gets created.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

189
eventbus receivemessage reply handling · Issue #189 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think there is a bug in the code (copied below). As you can see, all handlers associated with the same address are removed if only one is a reply handler. I guess either the reply handler only must be removed, or if all handlers are reply handler, the whole "address" can be removed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

191
java example not working · Issue #191 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
try
or
result
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

192
error trying to build yardoc · Issue #192 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I run 'ant dist' or 'ant yardoc' I'm getting:
But I actually have theses gems installed in Jruby 1.6.7:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

193
Don't use deployVerticle for deploying modules · Issue #193 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider adding a deployModule function
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

194
EventBus unregister id does not always call completionhandler · Issue #194 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think, the following should be added.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

195
Fix cp startup files to work on windows · Issue #195 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
the usage of the ant exec task in the build.xml doesn't work on windows. One solution is to use git bash or cygwin on windows.
But using the ant copy and chmod tasks should be a good solution for unix and windows:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

196
HttpServerResponse.sendFile ignore headers. · Issue #196 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Setting a header in a http server and ending the response with a sendFile will ignore the header and not send it to the browser.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

197
Ruby examples do not work · Issue #197 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

198
vertx start doesn't honor -port · Issue #198 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting clustering...No cluster-host specified so using address 10.101.92.100
Started
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

199
Repackage from org.vertx to io.vertx 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since vert.x has a site at vertx.io rather than at vertx.org, its package names should be "io.vertx..." rather than "org.vertx..." in order to respect the Java package naming convention.
I know this is a big change, but perhaps it would be better to get it out of the way before vert.x becomes much more popular.
See this thread for background.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

200
404 Not Found on SockJSServer endpoint when specifying more then 1 instance · Issue #200 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When specifying more then 1 instances of a sockjs server (either through -instances or deployVerticle), the internal http/user session information is lost of misdirected resulting in a 404 Not Found on the sockjs endpoint.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

202
install-rhino tries to download a non existing ant package · Issue #202 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the install-rhino script contains a link to get ant 1.8.3
the location however only contains the latest, and as they went up a minor version it breaks the install script
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

203
mailer doesn't honor port · Issue #203 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

205
reply of same type as message · Issue #205 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What has been the reason why the reply shall be of the same type as the message?
Isn't that a rather unknown case?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

206
getOptionalLongConfig should take a long as default value · Issue #206 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The argument is an int and I get this when using the default value:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

207
Allow wildcards for addresses in sockjs bridge firewall · Issue #207 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

209
RecordParser matches delimiter spread around in the data. · Issue #209 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This snippet
I believe the correct output should be
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

215
Reopening issue #146 · Issue #215 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sendFile works fine on OSX, but on Ubuntu 12.04LTS 32bit, sends content as text/plain.
Solved (as suggested in issue #146) by installing shared-mime-info, as follows:
nevertheless, this problem needs to be addressed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

216
Use $JAVA_HOME in the vertx start script  · Issue #216 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice if the vertx start script ($VERTX_HOME/bin/vertx) used $JAVA_HOME/bin/java for starting the JVM. In this case running Vert.X from a the Netbens IDE with maven would be much easier.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

217
vertx.js not found if JS verticle is deployed from a Java verticle · Issue #217 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a module with a Java main verticle.
In this module I also have a JavaScript verticle.
I try to deploy the JS verticle from the Java verticle with container.deployVerticle("myverticle.js").
Deploying myverticle.js starts, the JS verticle tries to load vertx.js with the load("vertx.js") command
I get the following error:  java.io.FileNotFoundException: Cannot find script: vertx.js
If I run the JS verticle from the module directory with vertx run myverticle.js it starts successfully.
If I put the JS verticle into another module ant call container.deployVerticle("js-module-name") I get the same error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

218
mod.json is not read up when running a module · Issue #218 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It happens with master. Steps to reproduce:
1.) Clone master
2.) Build it
3.) Open $VERTX_HOME/mods/web-server/mod.json
4.) Add host and port to the configuration (e.g.: "host": "localhost","port": 8080)
5.) vertx run web-server
The error I get is:
If I try reading module configuration from a module that I created,  container.getConfig() returns an empty JSON object.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

219
Release 1.1.0.final · Issue #219 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

220
Support local module directory · Issue #220 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

221
Websocket in SockJS, NPE occurs in the shutdown method of the Session · Issue #221 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How to reproduce
Connection with the SockJS in Chrome, then reload the page
Errors that occur
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

224
Multiple despatch in work-queue · Issue #224 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Extend work queue to support dispatch of message to N workers.
When N workers, or a timeout has occurred, reply will be sent back to the sender specify timeout error or list of replies received from the workers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

226
Add ability to wiretap messages on the event bus · Issue #226 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In asynchronous, event bus based applications, it's often difficult to work out what's going on. Was an event triggered? Did the listener pick it up? What was the content of the event?
We really need a mechanism, such as the wiretap feature of Spring Integration, to inspect what's happening in the event bus. Without it, debugging problems in Vert.x applications will be difficult.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

227
Add note about receiving JSON on server side · Issue #227 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Explain in docs that JSON received on the server side is received as a JS object, Hash in Ruby etc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

228
GROOVY createHttpClient(maxPoolSize: xx, ...) => KO · Issue #228 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a dummy.groovy verticle, launched by "vertx run dummy.groovy" :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

230
Add HttpClientRequest.setTimeout() support · Issue #230 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently HttpClient only supports setConnectionTimeout(). It would be better that we could set timeout for the whole request.
Another issue would be what to provide for the timeout handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

231
Remove start, stop, deploy and undeploy commands from usage help · Issue #231 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since the vertx start, stop, deploy and undeploy commands are no longer available, please remove them from the usage help as well. I mean the help text that comes up when you start vertx without any command line arguments.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

232
Package javadocs as jar files to simplify deployment to a Maven repo · Issue #232 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please package vert.x-core and vert.x-platform javadocs as jar files to be able to deploy them simply to a Maven repository.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

234
Automatic set "Content-Encoding: gzip" header (web-server modul) · Issue #234 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I gziped javascript and css files, but web-server modul sent it back without "Content-Encoding: gzip" http header entry.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

239
IntelliJ and Eclipse plugins for Vert.x · Issue #239 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

244
Provide an option to launch vertx in debug mode so you can attach a debugger · Issue #244 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The title says it all. Provide an option to launch vertx in debug mode so you can attach a debugger.
This can be accomplished with small changes to the launch scripts.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

246
Release 1.2.0.final · Issue #246 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

247
Context not DefaultVertx specific · Issue #247 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
with 2 vertx instances on the same VM, the Context is shared between them. Which in a normal cluster scenario isn't the case  (1 vertx per VM). To be able to really test clusters in one VM, they should be separate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

249
Add coffeescript to docs · Issue #249 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

250
Vert.x embedded capabilities and API · Issue #250 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is to follow up the discussion thread at https
For the purpose of this request, I will call the application that is embedding Vert.x as MAIN application,
and I will call EMBEDDED application the Vert.x system.
In regards to the Vert.x embedded capabilities I would like to have when I use Vert.x in custom application are:
this last ability is very important to give easy access from the EMBEDDED verticles to the MAIN application beans.
A common example can be: expose REST/Web interface of an existing application. Somehow the Verticle must have access
to the MAIN application beans with the given limitations that this verticle won't be isolated from the MAIN classloader
and therefore there is no guarantee of state isolation. In other words even if the given verticle will be (classloader)
isolated from the others verticle, will share the MAIN application classloader making his state vulnerable to access
from other threads living in the MAIN classloader. It will be developer responsibility to guarantee consistency.
Things that don't make sense while embedding Vert.x
the main() and other startup scritps won't be used, a clean API must be provided
configuration files, directory locations, and other external resources must be provided
container functionality such as module-autodeployment or auto-relaod won't be required.
The key abilities of Vert.x reside in the threading model, the polyglot engines, and the bus modularity,
I would like to preserve those capabilities while embedding Vert.x
regards
Bruno
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

252
Add 'publish' method to vertxbus client · Issue #252 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In version 1.1, vertxbus.js for clients doesn't give the ability to use the 'publish' method of event bus. It's a trivial fetature to add, just copy 'send' method and update the envelope to call publish (it works):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

261
vert.x-platform.jar is required for embedding · Issue #261 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when vert.x-core.jar is included :
This is because the META-INF/services/org.vertx.java.core.VertxFactory file is in vert.x-platform
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

263
Source builds · Issue #263 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Where are the source builds for binaries?
The source on GitHub is different from the version in 1.1.0 final. It'd be nice to have vert.x-1.1.0.final-source.tar.gz.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

265
java.library.path · Issue #265 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How do you pass java.library.path to vertx without editing the vertx script? vertx run main -Djava.library.path=/path/to/lib doesn't work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

266
v8 JSON note · Issue #266 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Edit:
SyntaxError: Unexpected token ILLEGAL
For future readers, v8 doesn't like newlines in JSON.parse so they should be removed if JSON is being sent to Chrome.
I thought there was an issue in vertx related to sending JSON via websockets however there's no bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

267
DefaultVertx resp VertxInternal is missing shutdown() or stop() · Issue #267 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I guess mostly for testing purposes relevant, but still: DefaultVertx resp VertxInternal is missing a shutdown() method which releases resources allocated such as HashedWheelTimer. Since the timer is a daemon thread it'll not be stopped automatically.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

268
Problem in the Groovy Evenbus Bridge example · Issue #268 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please see this discussion: https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

269
Secure Websocket Handshake Fails in Safari · Issue #269 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As noted in https discussion.
Proposed fix in Handshake00 and Handshake08:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

272
NPE when using JSONP transport · Issue #272 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using EventBus/Javascript with JSONP transport sometimes causes the following:
Most probably, this is caused by bad/broken browser, however I expect vert.x to be more informative in this situation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

274
Buffer passed in callback caused OutOfMemory Exception. · Issue #274 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I started a branch of HttpClient.getNow(url, callback(res)) requests, and use res.bodyHandler(callback(body)) to receive data.
Then I passed body to another helper function to parse the data, after started about 20 connections, I got OutOfMemory Exception.
I fixed it by adding an explicit type conversion body.toString().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

278
Handle<?> cannot take function.bind() as parameter. · Issue #278 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As BoundFunction and NativveFunction are both extending BaseFunction, I don't know why this happen.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

279
Handler<?> cannot take function.bind() as parameter. · Issue #279 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
result in:
As BoundFunction and NativeFunction are both extending BaseFunction, I don't know why this happen.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

280
Make JsonArray generic · Issue #280 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
E.g. using JsonArray for storing Strings is not easy. If you fill a JsonArray with strings and call JsonArray.toArray() it returns an Object[] and cannot be cast to String[].
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

283
Docs type maybe 'validate' should be 'authorise'? · Issue #283 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looks like this should be authorise?  and... should be Authorise and .authorise according to the java source.  Me thinks.
Validate
Validates a session id.
To validate, send a JSON message to the address given by the main address of the busmod + .validate. For example if the main address istest.authManager, you send the message to test.authManager.validate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

285
Add README to mod projects · Issue #285 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Which contain the relevant section of the mods manual
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

286
Update build wiki · Issue #286 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
... to reflect new build
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

287
JsonObject.toMap() doesn't convert JsonObjects in JsonArrays to Maps  · Issue #287 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you put a JsonArray consisting of JsonObjects to a JsonObject, e.g.:
assume, you have a JsonObject containing the following JSON:
If you call JsonObject.toMap(), and call get("myarray") it returns ArrayList<JsonObject> instead of ArrayList<Map>.
This can be problematic if you use some kind of templating lib (e.g. mustache.java) that handles Maps as data context.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

289
Make note in docs that headers are lower cased · Issue #289 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

293
pagebeforeshow may not be behaving as expected · Issue #293 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Gentlemen
The pagebeforeshow wired up in  a controller may not be behaving as expected.  One would expect that an event called in pagebeforeshow would finish prior to the page being shown.  The page shows before the event finishes.  This may or may not be the intended functionality and I do apologize if this is invalid.
Example
User going from Page1 as a logged in user but not necessarily authorised to see Page2.
In a Page2 ...
In the controller...(psuedo code didn't want to clutter example with our code calling our server)
In this example we are mocking a failed resource authorization attempt and Page 2 renders briefly and then Page 1 is switched back into.
Issues
It seems that Page2 should not render until after the events in beforepageshow completes.
Use case
Suppose you have a login system wired up.  The user is authenticated and has a valid session.  But the login system implements Groups or what is sometimes called Role Based Security.  Each page's controller is either implementing a method or calling another centralized SecurityController method to authorise the User against whatever Groups they belong to and making sure the Resource (page and it's subsequent controller and resources) the user is attempting to access/use can be accessed based on the Group Resource rights(crude create, read, update, delete and execute).  The problem would be that the resource page would be visible and render briefly before disappearing or forwarding the user
This might be a bad use case example.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

295
Message.reply can't received at Server side, when use SockJSServer bridge in client. · Issue #295 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use SockJSServer.bridge to connect a Client to the Server Event Bus, when client send a message to a server registered handler, the handler then reply a message, and then the client can received that reply message, but when the client continue to reply this message, the server node can't received that reply.
I use Scala, so below code is scala code.
Server has a Node to register on Event Bus:
And start a SockJSServer use bridge method connect to Event Bus:
run above code on server and client:
A can received first msg, and reply it.
Client can received that reply, and reply it too.
A can't receive the 2nd reply.
I used installApp to simulate the bridge's behaviour, and I see SockJSServer can received the 2nd reply, and the server use eb.send(firstReply's replyAddress, msg) to send 2nd reply to A's reply handler, the A's reply handler can't received it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

296
Build script for Java examples in distro · Issue #296 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

297
vertx-dev ignoring logging properties · Issue #297 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

298
Local handlers in cluster do not receive messages · Issue #298 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

301
Logging section in the Main manual references to non-existing Java classes · Issue #301 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Th Logging section in the Main manual documents how to change the underlying logging framework, but references to non-exisiting Java classes:
The classes above are in the org.vertx.java.core.logging.impl package (the impl package is missing in the docs).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

302
IOException using HttpClient [sample provided] · Issue #302 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm having a problem using the HttpClient to connect to a python's SimpleHttpServer.
I have this verticle
The next requests works fine. The problem somehow seems to be with the first one.
This has been tested under 1.2.0 (but happened also on 1.1.0).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

303
Race condition in deploying modules · Issue #303 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If deploy two modules of same name at same time, can result in one not being deployed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

304
Ruby not loading in vert.x 1.2.1 · Issue #304 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've forked the repo to make sure that my application code wasn't causing any issues and this is what I see:
Failed to create verticle 
But if I switch back to 1.1.0...
Started
And if I curl from another session, I get Hello from vert.x!
From what I've read online, this happens when vert.x can't find JRuby because people haven't set a JRUBY_HOME. I have set mine however. My next thought is that it isn't getting passed to vert.x but it is as far as I can tell from the vertx.sh file.
I'll continue to debug and see if I can come up with a fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

309
mod-web-server failed to runmod due to 'preserve-cwd: true' option · Issue #309 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I tried the javascript tutorial on http to get into vertx and javascript. The problem occurs on Step 2 running the web server (repo: https).
I have Vert.x v1.2.2 (latest from official git-repo) and Java 1.7 (from Oracle).
In my app.js I use
to load the webserver which fails with this exception:
I analyzed the problem. If I deleted the line '' in the web server mod.json which looks like this:
The exception is gone and the webserver is getting deployed but the webserver does not function correctly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

311
Hide *.impl packages in the website javadocs · Issue #311 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Small request - that the *.impl packages be excluded from the generated Javadocs that are published on the website. They distract a bit from the the core API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

317
local mods in $VERTX_MODS not recognized · Issue #317 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when doing  vertx runmod my-mod, if the my-mod dir is located in $VERTX_MODS, then it will try first to download it from github, and in vein, then errors occur and the start script is stopped
Attempting to install module my-mod from http 
Can't find module my-mod in repository 
But if I run it in $VERTX_MODS's parent folder, and because my $VERTX_MODS folder is actually called mods, then it will be recognized and no github download is invoked, and every thing is fine.
I think if a module is already located in $VERTX_MODS, it should be recodgized as an installed local mod
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

321
Auto redeployment doesn't clean up periodic task · Issue #321 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps to reproduce:
deploy a verticle that registers itself as a periodic task with e.g. vertx.setPeriodic(10000, this)
modify the Java class (I modified a logging line)
overwrite the class file in the module directory
redeployment kicks in
the new version is deployed and starts, but the old one still runs
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

325
HttpClient really not designed for resuse · Issue #325 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have written once before in google groups about the about limitations in the current design of HttpClient given that it was intended to be reused and requests pipelined. I have recently come across another problem that is a serious issue and I think can really only be addressed by redesigning the HttpClient, which is something I'm happy to take on. However, I want to make sure that I have a full understanding of intents and reasons for the initial design, so I would like some peer review of the idea before I go off and do this.
Let's start with the easy problem: HttpClient is supposed to be reusable with pipelined requests being executed on a pool of connections. The first problem is that the client has setter methods, allowing mutation of some of the operating parameters mid use. While by the nature of a verticle only one thread will be using the HttpClient at a time, the same instance may be used in various parts of the code, and since the properties can be mutated, can be left in an unexpected state for the next place that uses it.
A more serious problem is that connection exceptions are reported on the HttpClient exception handler, and NOT on the HttpClientRequest's exception handler. This means either each user of the HttpClient sets it's exception handler (which overwrites the last) OR there is one generic exception handler that can do little more than log the error. The problem with the first case: Imagine two requests are made one after the other, potentially via different code paths. The second's use of the HttpClient overwrites the first's exception handler. Now, since the connections are made on a separate thread in the case of a pool, this means that if a connection exception occurs connecting on the first request, and there is enough delay such that the exception handler has already been set by the second use of HttpClient, the exception for the connection of the first attempt is reported to the second handler, even though the second attempt to connect may succeed. This makes it impossible to know which request actually had the error and act on closing down, cleaning up, reporting accordingly. There is a simple test case provided below. Finally, If the second method is used, where we set the HttpClient's exception handler once, and provide some generic logging implementation, the HttpClientRequest's exception handler is never invoked either. To make matters worse, since there is no timeout feature on HttpClient, this results in a dead end; neither the HttpClientRequest's end nor exception handler is ever invoked. There is no way to know that the HttpClientRequest will never complete.
I propose and would like comment on the following changes:
Deprecate both HttpClient and Vertx.createHttpClient()
Create the interface SharedHttpClient that is immutable, in that is has no setters and no way to set an exception handler. It has an isClosed() method so that a new client can be created if some code path decided to close the Client for some reason. All connection exceptions are passed to the exception handler of the HttpClientRequest, the HttpClient has no exceptionHandler() method. I would create a new interface to preserve backward compatibility, with the idea we would eventually remove the current HttpClient.
Create a new interface/class called HttpClientParams that has all of the setters on the current HttpClient.
Create a new method on Vertx: public SharedHttpClient createSharedHttpClient(HttpClientParams params);
Add a setTimeoutMs(long) method to HttpClientRequest the idea being if the HttpClient.request() (and related) does not complete and call the passed in response handler before the timeout, the exception handler for the request will be called with TimeoutException(). This would default to -1 which means no timeout and has the current behavior.
Add a setTimeoutMs(long) method to HttpClientResponse the idea being if the HttpClientRepsonse.end() (or exceptionHandler()) is not called the timeout, the exception handler for the response will be called with TimeoutException(). This would default to -1 which means no timeout and has the current behavior.
Alternatively to 5 and 6, there is one setTimeoutMs(long) on the SharedHttpClient, and the implementations of the DefaultHttpClientRequest and DefaultHttpClientResponse, handle each half of the timeout.
The implementation of DefaultSharedHttpClient is largely based on the current implementation of DefaultHttpClient, but delegates the connection exceptions to the appropriate HttpClientRequest so that code can know which request failed because of a connection error. It also does not need to implement any of the mutator methods that were present in DefaultHttpClient.
I believe without these changes (and from hours of debugging and trying to work around the current design) the HttpClient is not really reusable, the internal connection pool and boss threads notwithstanding.
Test Case to prove non-reuasbility of HttpClient when shared among code paths:
Results when run:
Got exception during connect for code path Two.
There was an exception on code path Two
You can see the exception handler for the first request was never called, so so it would just hang there, never having the exception handler nor end handler called.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

326
Incorrect SockJS session_timeout in documentation · Issue #326 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The SockJS server documentation (http) states (emphasis mine):
session_timeout: The server sends a close event when a client receiving connection have not been seen for a while. This delay is configured by this setting. By default the close event will be emitted when a receiving connection wasn't seen for 5 seconds.
But the code (DefaultSockJSServer.java) is implemented as a 5 minute session timeout:
The code is correct, the documentation is wrong.  BTW, all document versions state it as 5 seconds, not just Java's.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

327
HttpTestClient.testSendFile and ..OverrideHeaders fails on Windows · Issue #327 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
both tests fail with Maven and Eclipse.
replacing
works (no more failure). I did additional tests like
and it starts failing with the first non-Ascii char
In case of failure, the "return" string matches the original up until the first unicode char
Win7: English language, but with German keyboard and date configured
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

328
ModuleDir not used anywhere · Issue #328 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Interface org.vertx.java.core.file.impl.ModuleDir is not used anywhere and might be deleted.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

331
IllegalArgumentException thrown when deploying a module on a different Windows partition · Issue #331 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a main.js script that deploys the mongodb persistor module like this:
I think the first exception is due to the fact that the current working directory's root, G:\, is not the same as the root directory where vertx is installed,
I did not investigate the cause of the second exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

332
Maven Plugin · Issue #332 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have created a Maven plugin for vert.x (https) which allows verticles to be run as part of a Maven build.  Primarily useful for integration testing.  My intention was to put the plugin on Maven central using a group id of "org.vert-x.plugins" but I would need your permission to do that as you have already 'registered' the use of  "org.vert-x".  On speaking to PID he suggested that an alternative might be to fork my plugin repo into the main vert.x repo and maintain the plugin with the rest of vert.x.  Do you think this is a good idea and something you'd be happy to do??  If not then I'll just use a different group id.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

334
start / end milli calculations are wrong which gives test failures · Issue #334 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
filesystem/TestClient contains the following code:
and the following tests
at least on Windows these tests fail because end is wrong. It should rather be:
see testProps where you obviously had similar issues.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

335
JavaFileSystemTests don't close open files => Test failures on Windows · Issue #335 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On Windows tests following either testReadAsync or testWriteAsync fail, because both do not close the file at the end of the operation. UNIX and Windows file system semantics are known to be different here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

337
Need a method to know if headers are sent. · Issue #337 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In DefaultHttpServerResponse is a variable headWritten, but it's private.
Please add a method to DefaultHttpServerResponse for checking if the headers are allready sent to the client.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

339
JsonObject reusability. · Issue #339 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please add a method in JsonObject to expose the internal map clear method, this way we can use it to "reset" the JsonObject to make it reusable, you are giving us removeField already but it is a tedious task to remove all fields if needed.
Thank you in advance!
Edit: This is for the Java Lang Api.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

340
Application's js files accessibility in modules · Issue #340 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I've found an issue about sharing files (js libraries) for modules. Here is my structure:
Some custom modules use the same libraries.
In modules I include library this way: load("lib/jsuri.js")
On linux it works fine, but on windows it doesn't work. But if i put library in module's folder then it works fine. Where is the problem? Why on linux module can see lib folder in application path but on windows it can't? May be there is a better solution with sharing libraries?
Thank you!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

342
Improvements to Vert.X File System · Issue #342 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Tim,
Java 7 has a WatchService API. I am building a module that would like to reload a file if the file changes, and I don't think this is currently possible at the moment (according to the documentation). Would be nice if this could be added in =)
Edit: I'm adding extra suggestions to this issue.
Regards,
Daryl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

343
Add support for the Rhino Debugger · Issue #343 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I really really wanted to get this working and submit it as a pull request, but I have spent about half a day trying to debug the Gradle build scripts to no avail.  So I am just going to describe what I was trying to do here.
Mozilla offers a GUI Debugger for Rhino.  Adding the ability to launch in Vert.x would a Good Thingtm, nor is it hard to do at all.
I created a new class called RhinoDebugContextFactory which attaches the Rhino debugger to the ContextFactory.  Then in RhinoVerticleFactory I checked an environment variable in the static initialization block, to decide which factory to use.
Then when the ContextFactory is used the GUI debugger will launch, allowing you to load JS files, set breakpoints, etc.
I have run this ball most of the way down the field.  I just need you (or someone who understands Gradle far better than I) to pick up the ball and finish.
A note on why I gave up:
To someone just coming in to try and make a quick change, the directory structure and scripts feel, frankly, needlessly complex. Nor is Gradle the most clear system in the world.
I was able to add the dependency for the Rhino debugger to the build.gradle file in vertx--lang-rhino directory.  I could see that Gradle was correctly pulling it down and installing it, but somehow it wasn't being added to the classpath.  I spent four hours trying to debug that issue, and could not spare any more time since there was no solution in sight.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

345
Gist for new feature: -jars option · Issue #345 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is embarrassing, I forgot to fork my code so I could submit another pull request.  However since the change is self contained I am going to supply it here in a gist for your approval
The -jars option
The gist contains an enhancement to Starter.java to add a new command line option: -jars.
This option is an attempt to address one aspect of classpath hell the need to constantly update the -cp option as new jars are added (or removed) from a project.  The option specifies a single directory where jar files associated with the project live.  At startup tile, Vert.x scans the directory, and adds any files ending with ".jar" to the classpath.
Internally this change is quite simple.  Since Vert.x already has it's -cp option for adding things to the classpath, the -jars options just adds the jar files to the classpath before they are parsed into the urls[] array and passed into deployVerticle()
The Gist Of It:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

347
Jython timer ID not returned · Issue #347 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Missing the return statements : cancel_timer function is useless without it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

348
CoffeeScript doesn't work from container.deployVerticle · Issue #348 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx.deployVerticle("myscript.coffee") tries to load the script as JS. However, running vertx run myscript.coffee from the shell works as expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

349
Potential leak of reply handlers in EventBus · Issue #349 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I use vertx.eventBus().send(address, msg, replyHandler) send a message to another Handler, if that destination handler don't reply that message, the reply handler will exists forever, this could be a memory leak.
I suggest change send method to return a reply handler address, or add release handler mechanism when reply handler's  timeout reaching.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

350
Auto redeploy of modules doesn't seem to work if the module dir or classes are symlinked · Issue #350 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to solve that to automatically redeploy a vert.x module if I save a Java class in my IDE (NetBeans). The compile on save feature of NetBeans compiles the class to the target/classes directory (it's a maven based project), so I symlinked the root package of the classes dir to the module dir. When I save my Java file, the class file is updated but Vert.x doesn't redeploy the module. It does work if the classes are not symlinked.
It tried it on Ubuntu 12.04 with ext4 filesystem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

351
SessionID bug · Issue #351 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
It seems that EventBus is blocking messages with an assigned "sessionID" eventhough authorization is turned off. This makes testing more difficult since it imposes that authorization is fully configured if session is required.
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

353
Define working directory when calling deployVerticle · Issue #353 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm not sure if this is a conscious design decision, but currently when you call deployVerticle, the script inherits the working directory of the verticle that deployed it. Can deployVerticle be updated to allow me to specify a particular directory as the working directory for the deployed verticle? Or is this not recommended behavior?
Regards,
Daryl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

354
Update netty from 3.5.0 to 3.5.7 · Issue #354 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
update conf/gradle.properties
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

355
Need method to shut down embedded Vertx instance · Issue #355 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using Vert.x in an embedded fashion, there is no way to shut down the org.vertx.java.core.Vertx instance without stopping the JVM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

358
Cannot specify logging file placement · Issue #358 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It would be nice if we could specify the placement of the logging.properties as a command line option.
This is, if we specify in the command line: -Djava.ut.logging.config.file=/path/to/logging.properties
the startup script should nop try to put it's own (fixed to /conf/logging.properties, and allow that one to be used.
This way deployment can be easier as each one can use its logging config.
Kidn regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

359
Release 1.3.0.final · Issue #359 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

360
keep open no action required · Issue #360 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

361
keep open considering · Issue #361 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

362
keep open unknown · Issue #362 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

363
Thread context classloader not being set · Issue #363 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TCCL is not set in all places in vert.x. It should be.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

364
RFE: provide absolute URI in request · Issue #364 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Ease of use:
Provide a property like request.absolute_uri that contains the absolute URI of the request.
and while we are at it. request.base_uri would be great as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

365
Add includes command line option · Issue #365 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-includes can be specified when using vertx run, it allows the resources of a set of modules to be added to the classpath of the vertile
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

366
Lookup VerticleFactory in verticle's classloader based on file-extension · Issue #366 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue comes from a mailing-list topic: http
If the vertx support for a language is still experimental it is better if the language-support is in a module instead of the vertx core. Also if two modules need two different versions of the same language, ie because one of the modules was programmed  for an older version of the language it is necessary to load the language support from the verticle's classloader instead having it in core.
A general approach would be that if there is no suitable VerticleFactory on the main-classpath the VerticleManager looks up based on the file-extension given in the verticles name a VerticleFactory in the verticle's classpath (instead of the core-classpath)  and uses that VerticleFactory for the creation of the verticle.
For this lookup a  either a) a configuration-file which maps file-extensions to VerticleManager class-names can be used or b) (my suggestion) a default classname ie: 'org.vertx.java.deploy.impl.{extension}.{uppercase-extension}VerticleFactory' (alternative b would save the configuration file).
My proposal for parsing the name would be the regex ' ' so that the extension is only lowercase which differntiates it from normal fully qualified java class names.
Maybe this could be baked directly into VerticleManager after normal resolution before JavaVerticleFactory fallback.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

367
Upgrade vert.x to support SockJS 0.3.2 · Issue #367 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This will allow direct WebSocket connectivity.
Connecting to SockJS without the client
Any SockJS server complying with 0.3 protocol does support a raw WebSocket url.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

370
Python: Underscore doesnt work in RouteMatcher params · Issue #370 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
following the example here:
I tried adding some params to the routematcher
This did not match as expected. I expected a GET to '/user/foo' would match and params['user_uuid'] would contain foo. However the only pattern that would match was "/user/user_uuid" and instead of "user_uuid" in params there was an index of params['user'] = 'user' It seems the underscore caused an issue.
When I removed the underscore, everything worked as expected
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

371
Python Manual: handful of doc typos · Issue #371 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've found the docs easy to follow and concise. Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

372
Middleware concept · Issue #372 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Any plan to add middleware concept into the library in a pure Java form? Not really rocket science but in other languages, we often have a good lib to handle some basic stuff like handling headers...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

373
Fixed memory leak with SockJS server · Issue #373 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Memory leak was occurring with non websockets transports resulting in sessions not being timed out and therefore building up in memory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

375
SockJS Event Bus Bridge - Outbound auth · Issue #375 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be interesting to handle auth requirement for outbound messages (server to client broadcasting/publishing) so only authed socket (i.e. socket with a session ID attached) can receive the messages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

376
Support packages with Java source verticles · Issue #376 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

379
build failure running wmk.bat -x yard install on Windows 7 · Issue #379 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
note:  I hit this on a fork of a fork.  I don't think this has been fixed in main, but I'm not 100% sure.  apologies if this is already fixed.
Get vertx source
install jython
set JYTHON_HOME to jython install directory (not the /bin dir)
open windows cmd shell
expected
a successful build
actual
build fails with
What went wrong:
A problem occurred starting process 'command ' ''
The system cannot find the file specified
I "fixed" this by modifying
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

384
sendFile and RouteMatcher · Issue #384 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the Handler is part of a RouteMatcher, sendFile doesn't seem to resolve the dependencies of a html-file (like javascript-, css-tags).
for example, this one works fine:bug or intended?
I am using 123final embedded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

386
DeployModule: AsyncResultHandler? · Issue #386 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is probably going to be a lot of work.
I would like the Handler class to accept a "Error" parameter in the handle method. Every callback mechanism that could possibly end in an error should therefore pass through the error to the calling source.
Use Case:
I call deployModule, but deployModule fails silently (aside from the default vertx exception that is logged). There isn't a way for me to capture the exception that caused it (for example, IllegalStateException).
Having the error parameter in Handler is probably the easiest solution that I could think of. The alternative would be each functionality having 2 Handlers for Done and Error. The former solution I propose might change how people deal with the handlers (as now the handler gets called regardless of success). The latter will minimise that, but requires more work in the core.
Edit: turns out there is a AsyncResultHandler class. However, this does not work with deployModule. Thus deployModule needs to use AsyncResultHandler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

393
Load source of java dynamically issue · Issue #393 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i wanna load source of java in my project , so i use directly the class of compile which has been provided by verticle.
there is a small issue that the chart.
in my project the file have some word as comment that is not latin, so this error would be happen when i load the file
error: unmappable character for encoding ASCII//?????????????????????json??????
^
I find the ComiliingClassLoder didn't make a Charset as argument for StandardJavaFileManager which in the line of 49..
Would your fix this later ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

394
HttpClient does not define exceptionHandler · Issue #394 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DefaultHttpClient offers exceptionHandler() to … well … install an exception handler.  HttpClient does not.  Without an exception handler, there is no way to recover from cases like an invalid hostname or connection refused.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

395
ava .class Deployment (VehicleManager.java:doDeploy:594-597) · Issue #395 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Related Issue: #366
This code does not properly accommodate deploying pure Java .class files as it insists on a file extension for the language mapping.
Current Code:
Suggested Fix:
I have not tested this with .jars, but my expectation is that the same behavior would be observed.
As an aside, do you have a style guide that can be imported into Eclipse? My current setup automatically formats and cleans up code on save, and when I saved my changes it formatted the ENTIRE thing, which is why I was hesitant to submit a pull request instead (I'm also new to the whole pulling thing, and open source in general so...)
Edit: it just occurred to me that while it would work if the main class exists in a package (i.e. com.darylteo.MyModule) it is technically interpreting a file extension of MyModule... might be risky if for some reason or another someone names the main class com.darylteo.js.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

396
SharedData across Cluster · Issue #396 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There doesn't seem to be an issue logged for this so I figured I'd create one.
Currently SharedData is only shared within a single VertX instance. According to the documentation, the expected final design is to have the SharedData shared across all instances in a Cluster.
It would be nice-to-have to have various strategies for handling SharedData. The most obvious implementation would be to use Hazelcast. However, I can see reasons why people might want to have the option of providing their own SharedData implementations (such as a redis/memcached implementation) to provide more flexibility on the platforms Vert.x applications can be deployed on (such as Heroku). Although, I suppose an alternative would be to simply have it as installable modules instead of extending from SharedData, but this means Vert.X core would still be opinionated about which SharedData to use.
A good first step would be just to work on a naive implementation without local caching (like you currently do with the SubsMap). Once a working implementation is completed, enhancements can be made to improve the reliability and efficiency of SharedData.
I've already played around with the Vert.X source, creating separate hierarchies of SharedData (HazelcastSharedData and DefaultSharedData). However some discussion is needed to decide (if we are going to go with custom SharedData implementations) how to load the correct SharedData implementation through the use of configs.
Hopefully this functionality can be scheduled for 1.3.0 release.
Regards,
Daryl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

398
Memory leak with websockets and SockJS · Issue #398 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Memory leak in the SockJS server side impl when using websockets - sessions not getting gc'd due to close noe being called on the SockJSSocket class by the subclass.
Also there's another leak in DefaultWebSocket where if the websocket is closed from the client, close() isn't called and the writeHandlers aren't removed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

399
Cannot Vertx.undeploy_module in Ruby · Issue #399 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Deploy module like this
I get the deploy_id similar to this "deployment-ceabe4f5-533d-4ddd-9d4b-fafb9ccda833"
But when I try to undeploy like this
It fails with this message
Exception in Ruby verticle: java.lang.IllegalArgumentException: There is no deployment with name deployment
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

400
Vertx command line not exiting · Issue #400 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

401
SL4J logger results in StackOverflow · Issue #401 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe this problem is caused by a7765d1
What I get when trying to use the SL4J logger is
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

402
Release 1.3.1.final · Issue #402 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

406
Need response.endHandler · Issue #406 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I need to log some information out when the response finish sending data to client.
Tried a few ways but still cannot figure out how to do this in the current implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

407
exception when module is auto redeployed · Issue #407 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get an exception when I make changes to the files in mods/
Start
moduleDir is mods\test 
Module has changed - redeploying module from directory mods\test 
Stop
Performing a touch mods/test/Test.java cause the exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

408
mod.json file is kept open · Issue #408 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The mods/modulename/mod.json file is not closed after a module is deployed. I guess the scanner should be closed in VerticleManager.java:389
This is annoying on Windows, where an open file cannot be overriden, making it difficult to use auto-redeploy feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

410
Proxy support for vert.x module manager · Issue #410 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
May you please add support for running vert.x's module manager behind a corporate proxy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

412
CLI scaffolding for vert.x projects · Issue #412 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just gonna leave this here in case someone wants to pick it up. If not I will get to it... eventually (got so many things on my want-to-do at the moment, gotta regulate myself before I get too distracted =) )
Suggesting that the CLI should have a "new" command that will construct a complete vert.x project setup in the working directory. Play Framework has this.
Things that the CLI should do
construct folder hierachies that conform to the "vert.x" style (modules, libs, etc.)
and a .gitignore for ignoring those directories which should not be included.
prompt for type of project (.rb, .py, .js, .java etc.)
setup default gradle configuration if necessary
and IDE support (setting up build paths etc.)
A more advanced feature (although more of a convenience feature) would be  the ability to do something like
And it will checkout the entire repository, install and download all required module dependencies. This is to potentially allow for rapid deployment of vertx instances.
Kind Regards,
Daryl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

415
SharedData get() throws NullPointerException if you pass null for the name · Issue #415 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not sure if this is really an issue or something that we want to change. But from a client code perspective I would rather check for null than have a try/catch.
Basically I have some code where I might be passing null to sharedData.getMap(null). In that case it throws a Exception. In the code for getMap() it checks for null return after the first line, but then creates a new Map. The tries to place the Map into the SharedData.
create a new Map here, then putIfAbsent
This is the line that will throw the error. But if we had
Then we would not get an exception, but getMap or getSet would return null. Which I think is a little bit better.
What do you think?
Mark
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

416
SharedData get() throws NullPointerException if you pass null for the name · Issue #416 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not sure if this is really an issue or something that we want to change. But from a client code perspective I would rather check for null than have a try/catch.
Basically I have some code where I might be passing null to sharedData.getMap(null). In that case it throws a Exception. In the code for getMap() it checks for null return after the first line, but then creates a new Map. The tries to place the Map into the SharedData.
create a new Map here, then putIfAbsent
SharedMap prev = maps.putIfAbsent(name, map);
This is the line that will throw the error. But if we had
Then we would not get an exception, but getMap or getSet would return null. Which I think is a little bit better.
What do you think?
Mark
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

417
Jython Verticle Deployment / Undeployment : Not a worker thread + memory leak · Issue #417 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting from 1.3.0 final (1.2.3 is ok) :
In Jython, when deploying / undeploying at least 5 verticles (worker or not) 3
or more times in a row (waiting for them to be deployed / undeployed),
I get a "Not a worker thread" from checkWorkerThread called in
doDeployVerticle.
The thread name is MainThread, although doDeployVerticle is called in
BlockingAction... Even with empty deployed verticles, I get this bug.
PythonInterpreter's method execfile in JythonVerticle.java is
leaking as hell, causing OutOfMemory for PermGen space when
deploying / undeploying. Undeploying does not free anything, even with
a simple import vertx or whatever in the worker script.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

418
Rename thread back to original name · Issue #418 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a thread (worker or event loop) has returned from executing a verticle handler, we must rename the thread back to its original name.
This is because it's possible for the Runtime to rename the thread (Jython does this) which can result in some of the checks in VerticleManager to check if it is a worker thread failing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

423
DefaultEventBus not thread safe · Issue #423 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I wrote a prototype for our project, I chose vert.x as a middleware which involves consumes messages from kafka and redirecting it to mongoDB, since consumer api in kafka is a blocking api so I create a work verticle, after consuming about 50k messages, I found my cpu utilization was nearly 100% and consuming verticle stuck , I then found it was cause by a infinitive loop in HashMap.put() which was called by getHandlerCloseHook(context).entries.add(new HandlerEntry(address, handler)) in DefaultEventBus.registerHandler().
I think it was caused by concurrently calling the put or remove on the HashMap by a worker verticle, thus causing the HashMap to be broken.
After I change the
It seems everything was ok.
I wondering if it is proper to change the HashSet to ConcurrentHashSet, if so shall I make a pull request?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

425
trying to create Intellij IDEA gradle project for vertx fails · Issue #425 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
to reproduce:
windows 7
add path to vert.x/build.gradle; add path to Gradle home; click next
IDEA fails to generate the project with the following error:
When I looking in the "build.gradle" at vert.x/vertx-testsuite, I see (truncated):
I'm assuming that the source of the error (including the ref to "../src/dist/conf"
Not sure how to fix, just letting you know.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

428
Groovy module issues · Issue #428 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've been looking for days trying to find an example of a vertx module written in groovy actually working - no luck so far. The issue I keep running into is that groovy is failing to cast the reference defined in mod.json to a groovy.lang.Script.
So, I took the code from org.vertx.groovy.deploy.impl.groovy.GroovyVerticleFactory.createVerticle and placed that in a test groovy class (testloader.groovy). I then loaded the same groovy script referenced by mod.json and it loaded without issue.
Module layout is:
Any ideas on how to help figure out what's going wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

429
RTMP support · Issue #429 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Has anyone experimented with getting RTMP support in vert-x? Seeing as it's netty in the bottom, maybe adapting some code from Flazr would be possible?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

431
HttpServerResponse.putHeader() incompatible with RFC 6265 · Issue #431 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Origin servers SHOULD NOT fold multiple Set-Cookie header fields into
a single header field.  The usual mechanism for folding HTTP headers
fields () might change the semantics of
the Set-Cookie header field because the %x2C (",") character is used
by Set-Cookie in a way that conflicts with such folding.
Currently, the HttpServerResponse.putHeader(name, value) method overwrites any prior header field value for the specified header field name.  It is not possible using HttpServerResponse to issue multiple header fields with the same field name, and is therefore not possible to set multiple cookies in response to a single request and be compliant with RFC 6265.
Given that "Set-Cookie" is a special case for HTTP header handling, I propose that HttpServerResponse accommodate this special handling via the addition of a setCookie() method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

433
Java: Empty package name is not supported · Issue #433 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I trying to write a  real application.
So, I need to write multiple classes and verticles.
Before the migration to 1.3 I was running successfully my application with :
vertx run src/App.java >> 1.2.3 is ok.
now, I get this  issue (1.3)
Cannot find verticle src/App.java 
I notice that in the java/example every classes has a package name defined.
In my case, the package name must be "src" which doesn't make sense!
When I force this value I can run the verticle.
It will nice to include a small project which contain multiple verticles and some utilities classes.
I think it is the best test case to check this, and it help user to getting started with this wonderful framework..
If you need my help, let me know.
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

434
NPE when doneHandler is null using Java API · Issue #434 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not sure if this is already fixed - the error is easy to fix though (probably)
The doneHandler can be null because some of the ways to invoke "deployVerticle" in the Java API don't require a done handler. Work-around is to provide a blank Handler.
Tested against 1.3.0 in "psuedo-embedded-mode" (Eclipse invokes main directly, but still calls "run", "class", "-cp", "pathhere") So I didn't test this using the command line.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

435
HTTP 1.0 Connection might be closed before the response is written · Issue #435 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP 1.0 Connection might be closed before writing response, if request requires async processing.
I ran into this problem when trying to set up vert.x server behing lightttpd/nginx load balancer. Apparently, vert.x writes response headers and closes connection before writing response body.
Here is minimal test case that reproduces this problem:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

436
HttpServerResponse.sendFile(...) and URI's/URL's · Issue #436 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey folks,
I did some research but I can not find a solution.
Is it possible to send a file via HttpServerResponse which is inside a jar file?
I can fetch an URL to the file fia Classloader.getResource(), but how can I send it?
With kind regards.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

437
Typescript support · Issue #437 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Typescript looks very promising. Do you have any plans to add typescript support?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

438
stack trace printed to stderr · Issue #438 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Why not use a logger?
I'd like to personally suppress java.nio.channels.ClosedChannelException
Why can't I provide my own exception handler for HttpServer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

440
Possible connection leak · Issue #440 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

441
Cannot send Java Buffer to JS event handler · Issue #441 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

442
JavaScript event bus assumes JSonObject type for messages · Issue #442 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sending a message of type org.vertx.java.core.buffer.Buffer from a Java verticle which is handled by a JavaScript verticle results in the following error:
SEVERE: Exception in JavaScript verticle:
Please see
for more information and sample code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

443
Getting timeout on deployment when specifying multiple instances · Issue #443 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running vert.x-1.3.0-final on amazon cloud 32 cores (At least what cat /proc/cpuinfo indicates)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

444
Java source verticles don't work inside module · Issue #444 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is because CompilingClassLoader relies on absolute file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

445
Javascript error when trying to access a java object RouteMatch · Issue #445 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
view source and running example in https
I added also a rar in the example folder I you unzip that you can test it and see what is going wrong!
what I try todo is using the routematch object to isolate the oauth process in a separate module so everyone that wants to use oauth can leverage from that module.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

446
webapp  example miss vertxbus.js file  · Issue #446 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try all lang webapp,and get miss js/vertxbus.js error,just copy the vertxbus.js to web/js dir,it run ok.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

447
cancelTimer returns boolean in Java but void in Groovy · Issue #447 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking at two different Vertx classes in the jar files, I see in the vertx-core-1.3.0.final that cancelTimer returns a boolean.
In the vertx-lang-groove-1.3.0.final cancelTimer returns void.
Don't know why they are different, and I really need it to return boolean. Since I assume we can find out it the id is still in the WheeledTimer when we call cancelTimer.
Thanks
Mark
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

448
Provide setImmediate · Issue #448 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
setImmediate is a W3C proposal for efficiently scheduling an event and yielding to the event loop. If vert.x were to implement this or Node’s process.nextTick, cross-engine libraries like Q would be able to work without modification.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

450
Full CommonJS support · Issue #450 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Although vertx.js does attempt to be usable as a CommonJS module by assigning an object to module.exports, its use of Rhino's load function to eval all other core components (like core/sockjs.js) causes the vertx object/namespace to appear in the global namespace.
The following should fail for at least two reasons when run as a "main":
It turns out that V is in fact the exact same object as vertx because vertx.js assigns vertx to module.exports, but vertx is also defined at the global scope.
I think Vert.x should embrace CommonJS, and only define a very small number of objects in the global scope (like console), to enforce encapsulation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

452
Vertx-1.3.0.final and vertx.mongo-persistor-v1.2 causes NoSuchMethodError · Issue #452 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running vertx-1.3.0-final with vertx.mongo-persistor-v1.1 fixes the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

454
SockJS support flakey · Issue #454 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've been running into a lot of issues using the event bridge with IE (7,8,9) clients, which simply get disconnected after about 8 seconds regardless of whether any data is exchanged with the server. I've been able to reproduce this issue in Chrome (latest stable) by using transports other than the websocket default.
I'm running vertx 1.3.0 and I've tested against sockjs 0.2.1 and 0.3.0 with equal results.
If I run any of the sockjs smoke tests, they all (well, supported transports at least) work fine on IE and Chrome.
XHR-streaming is the default transport picked by the cursors or smoke tests for IE, which works perfectly fine, however XHR-streaming does not work in vert.x and results in the connection being immediately disconnected.
Any thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

455
NullPointerException throwed when connecting SockJsServer with java client · Issue #455 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

456
Vertx-1.3.0.final and de.marx-labs.redis-client-v0.3 causes NoSuchMethodError · Issue #456 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

457
java.lang.IllegalArgumentException in master when using -cluster · Issue #457 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I downloaded and compiled master to test the instances issue I reported earlier. But now when I run -cluster I get the above exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

465
Better loading of JS modules · Issue #465 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now, we use load() to load required scripts into our javascript verticles. However I feel there are several ways this could be improved.
Right now it functions like an include, which means that dependencies are not exactly well accounted for. For example,
ScriptA.js loads Vertx.js and ScriptB.js
ScriptB.js also needs Vertx.js, but since it is already loaded by ScriptA, it simply assumes that it is there and doesn't bother importing it. But this fails to properly document the dependency.
I would much prefer if node.js's method of modules is included in the next major release (as I know this will definitely break working code).
Now the reason for this is because I'm working on a non-runnable module that is designed to be included in js verticles (as well as compiled languages). However, as it stands, I have to create a .js shim that loads the required class and stores it on the global scope. It is also not immediately clear at the moment how I can distribute this shim (would vertx find it in the mods dir?)
What I would like to have is a way for non-runnable modules to register themselves as a loadable module (vertx.addJSModule('modulename', SingletonInstanceOfModule)?) and that is then returned on load (var module = load('modulename'); This better demonstrates the dependency on the module, reduces pollution in the global scope, and makes for easier module writing.
A not as ideal method could also be to allow loading by class name (but this might make javascript developers cry) - something like load('org.package.module').
This is also a good opportunity to work towards a compatibility layer between vert.x and node.js modules perhaps.
If you think this is a good idea, I will perhaps make some preliminary changes as a proof of concept and submit a pull request.
Kind Regards,
Daryl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

466
Add note to manual about -includes · Issue #466 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently missing
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

467
mkdir(file,boolean,handler) missing · Issue #467 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
bug details here:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

470
SLF4JLogDelegate is looping to itself · Issue #470 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should rather use sl4j's LoggerFactory and Logger
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

472
Define Verticle in Groovy Class, not only in groovy script. · Issue #472 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Use Groovy for :
Add the possibility to define a Verticle as a Groovy class.
To have the ability to mutualize things in base classes which extends Verticle (or a GroovyStyle version of Verticle).
Ronan.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

476
Promises · Issue #476 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Merry Christmas. I hope you will find this usable for V2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

477
Container.exit() doesn't undeploy modules · Issue #477 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While trying to figure out why one of my new worker modules doesn't allow Vert.x to shut down cleanly, I realized that the approach I was taking doesn't work.  Container#exit() only calls VerticleManager#unblock(); it does not undeploy any verticles.  This means that a Verticle's stop() method is never called, and that any non-daemon threads spawned by a worker will keep the JVM from exiting.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

480
EventBusbridge handleSocketClosed should call unregister handlers hook · Issue #480 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The EventBusBridge#handleUnregister hook should be called on socket close in EventBusBridge#handleSocketClosed , the socket close handler unregisters  any handlers which are open, but does not call the unregister hook.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

483
Multi-lang cookies() support · Issue #483 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add cookies() support to all langs and add section in docs about this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

484
The Deployment of BusMods causes inconsistencies if the deployed BusMod depends on other BusMods · Issue #484 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
container.deployModule("BusMod A", conf, instanceNr, deployedHandler) causes an half initialized BusMod A if the BusMod A has to deploy other BusMods. The deployHandler callback is called and does indicate a successful load of BusMod A, while actually A has not loaded all its depended BusMods.
This behaviour of deplyModule() causes unnecessary wait code and might get a heavy problem if BusMods are deployed during runtime, because the deploying Verticle cannot be sure when his depolyed BusMod is really ready for usage.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

485
Tests are failing on windows · Issue #485 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following tests are currently failing on Windows. I even created a new clone to make sure everything is clean. Since gradle test output is really poor (and obviously can't be changed easily), no additional infos beyond "java.lang.IllegalStateException: Timed out waiting for event" are available. All these tests passed before Christmas.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

488
Problem with EventBus and GString · Issue #488 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With :
I send (reply) :
I receive :
Now with "as String" :
I receive :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

489
sendfile truncates data · Issue #489 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using vert.x-1.3.0.final with groovy on Win7-x64 with JDK7u10-x64 (client) and Ubuntu-x64 with JDK7u9-x64 (server)
I have a client that sends a file to a server, which sends back another file.
Client:
The transfer from client to server (8436350 bytes in my case) works fine.
The transfer back however loses bytes!
On the server, bigfile.bin is 40902656 bytes.
After I start the server and leave it running, this is what the client prints:
Neither the client code, nor the server code, nor bigfile.bin have changed. In fact, the server wasn't even stopped, and yet the response vary.
All returned files are corrupt.
This makes the sendfile functionality currently unusable for me, as data corruption is not an option.
Cheers
Axel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

492
SockJS CORS error for non Websocket transports · Issue #492 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reproducible by running Groovy SockJS example https
Modify the index.html to limit to xhr-streaming:
Serve this file from a different host and run the demo, you will get a CORS error in the browser.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

494
org.vertx.java.busmods.BusModBase.getOptionalLongConfig(String fieldName, long defaultValue) throws ClassCastException · Issue #494 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For cases when
do the following:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

495
Sticky session · Issue #495 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys,
Not really an issue, but I was thinking that it would be great if we can have sticky sessions enabled at Vertx level.
The idea is that based on some criteria (maybe params or url pattern or cookies) Vertx should send similar requests to the same worker so that that worker can initialize a local cache in order to deal with those requests.
The use-case of this can be seen in the case of implementing rate-limit on an API. If all the requests with the same parameter (api_key) are sent to the same worker, we should be able to initialize a local cache to store the current rate limit and easily accept or deny a request. With this strategy we can simply remove a lot of complexity of an external storage. I think there would be a lot more use cases like this.
Just I am just wondering if we have this functionality in place or if this can be considered a feature.
Regards,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

496
HTTP HEAD request is stuck waiting from data. · Issue #496 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a HTTP HEAD response gives a "Content-length" different from 0, the callback is never called, createHttpClient.head(uri, callback). As defined in HTTP Specification, HEAD response must not have content even if Content-Length is defined in the headers.
The problem is that in vert.x the HttpResponseDecoder class is used but Netty handle the specific case of HEAD in a super class HttpClientCodec.
Note that CONNECT may also suffer from this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

497
Extend thread pool executor implementation · Issue #497 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The existing ThreadPoolExecutor implementations do not expose their metrics.
Provide a custom ThreadPoolExecutorFactory that simplifies this and exposes the metrics, in preparation for the addition of JMX support.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

498
Enable dynamic control of number of instances of deployed verticles · Issue #498 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should be possible to increase (and decrease) the number of instances of a deployed verticle at runtime, (without starting a new verticle bound to the same server instance).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

499
Enable language implementation to be set via System properties · Issue #499 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just like it says on the tin.
Will override the properties loaded from the langs.properties file.
This will make test configuration and language implementation dev easier.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

500
Move language tests to associated language implementation. · Issue #500 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Moving the language tests to each language implementations test source set will make it easier for contributors to see the requirements for developing a language implementation.
It may also mean that builds of the project can run faster through Gradle's parallelisation features.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

502
1.3.1.final SockJs exemple only websocket no fallback · Issue #502 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've downloaded the 1.3.1.final release and it seam that the sockjs examples fallback doesn't work properly on IE8.
I've tried the javascript and the java samples with the same result :
on Chrome (latest) and Safari (latest) it work fine because it uses websocket connection.
On IE 8  there's not fallback as expected (the close method is immediately called on the socket in the browser)
I've tried adding whitelist protocols but it's not better
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

504
Not able to run the samples (Java) · Issue #504 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Java version 1.7.0 (JRE/JDK)
I did follow as per the instruction but getting error:
The strange part is I able to run Javascript version but Java version is failing
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

506
Adding address to doAuthorise's parameters · Issue #506 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
Thank you very much for this incredible product.
I would like to extend mod-auth-mgr to add role-based authorizations.
I think it should be interesting to add "address" to the parameters in
Best regards,
Paco Hernández.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

508
Investigate updating Jackson to 2.x series · Issue #508 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Jackson is into the 2.1 series already. Presumably there's some benefit in upgrading, investigate/test to find out...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

509
Handling async operations at module start · Issue #509 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right now, the test suites rely on messages via the eventbus to know when a module really is deployed (sends a message to "test-handler" when all async operations in start() are done).
There should be a built-in construct to be able to tell at verticle deployment when a verticle and all of its dependencies are loaded/started, which might be problematic since you can do async operations inside the start method.
A proposal for Java would be to have a second start method:
Which the developer should overwrite in case of async operations in his start method and call the whenDone.handle() after everything is loaded.
For scripting languages, this could be a little more complex. The starter could return a boolean true at the end to make Vert.x aware, that it will call a method to show that it's finished (proposal: vertx.startedAsync()). If it doesn't return a boolean true, it will behave as the standard start() method right now (not considering async operations inside it).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

511
circular dependency exception loading groovy module from groovy verticle · Issue #511 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I realize this may simply be because the language loading for groovy just isn't done yet, but figured it couldn't hurt to report it.
This report is based on vert.x master (g17a47c3) and mod-lang-groovy master (18fb958b)
With a simple main app in groovy, and a hand-rolled groovy module called monitor.
Deployment of the groovy module from the app results in this. (but if you instead load the JS module that is commented out, it works)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

512
Can't use msg.reply() in worker on cluster setup · Issue #512 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to use msg.reply(jsonObject) in a workerVerticle on a cluster with one maschine running the http verticle and another running the worker. I'm using this code for deployment:
when I'm running this with 4http instances and 4 worker instances on one maschine everything works fine.
when running on two maschines with one 0http 4worker and another 4http 0worker, this exception is thrown:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

513
Strange HttpServer behaviour, requesting localhost:8080// · Issue #513 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the server test code (server.js):
Started with: vertx run server.js
Now running:
Tested with Vert.x 1.3.1.final.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

515
Vertx webapp example problem, loading vertxbus.js · Issue #515 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that vertxbus.js was removed from webapp/web/js folder, causing errors on loading.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

516
readystate on EventBus is not a property · Issue #516 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is there a reason the readyState on the eventBus is not a property ?
Folks that are familiar with WebSocket (or SockJS), would expect it to be a property...
Now - with vertx - the following does not really work:
For vert.x it would need to be written like:
which is a bit different/odd
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

517
Keep 2.0.0-beta open · Issue #517 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

519
Delete element in Array by JavaScript not work · Issue #519 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys,
I figured out that you can't delete an element in a JavaScript array.
That will print out 4
Thanks,
CodeChiller
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

522
Allow String objects on the Websocket Bridge as well as JSONObjects · Issue #522 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Websokcet bridge - can this be enhanced so that we're not forced to use JSONObject, but can say use String directly instead?
See #172 as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

524
2.0.0 SNAPSHOT classloader · Issue #524 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys,
Just want to test out the classloader in Vertx master branch.
Classloader refactoring - DONE
Each module/verticle type has its own classloader, not a classloader per instance
See Vert.x 2.0 plan for more information
Since a Verticle has its own classloader (not per instance) I would think that I can create an singleton class (connection pool) and reuse it between instances. I wrote a very simple example here:
If my theory is correct when I run https with -instances 2 it should display only one line of Singleton constructor but somehow the results are 2 lines, meaning Singleton class is loaded twice.
Not sure if my understand is correct or I need to enable something or it is the way it should react and no more changes will be done in terms of classloader in Vertx 2?
Regards,
Son.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

527
<:> is an illegal char on windows in module names in vertx 2.0 · Issue #527 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When installing a module on windows through the maven resolver I get following exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

530
DefaultPlatformManager.java prevents groovy class verticles from deploying modules · Issue #530 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the 'main' name of a groovy class verticle starts with the language prefix "groovy:".  This causes a nullpointer when deploying modules programmatically from a groovy class verticle.
Failed to deploy verticle
This can be fixed by adding making the following change to DefaultPlatformManager.java at line 455.  Not sure if this is the best fix, or if its already sorted in another way.
essentially, remove "groovy:" from the main "groovy:classname"
Thanks.
Please see google groups discussion topic
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

531
drainHandler gets erased after invocation · Issue #531 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This definitely applies to DefaultAsyncFile; I'm assuming it applies to other WriteStream implementations, too.
When a drainHandler is invoked, its reference is set to null.  This means that I have to set the handler every time the write queue fills up.  I should be able to set the drainHandler once and be notified every time it triggers.  The current behavior isn't documented, is confusing, and makes more work for the developer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

535
Refactor HTTP client · Issue #535 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To support multiple hosts/ports
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

539
Json.decodeValue should not return Object · Issue #539 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Whould be nice improvement if the Json.decodeValue (see http) would use generics, e.g. like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

540
Session's messageSize only grows, drainHandler not called · Issue #540 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Session implementation of the SockJSSocket keeps track of the write queue's size with messagesSize. This variable grows when the write queue is given a new message (Session.java#L89), but never shrinks when the write operation is performed. The drainHandler will never be called once messagesSize grows passed maxQueueSize / 2 (Session.java#212).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

541
API to Restart or just stop the Vert.x from a verticle. · Issue #541 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there any API that allows to restart (or at least just stop) Vert.x from inside a verticle.
If not, please add it.
Especially for "admin" related verticles that any production ready solution needs, this would be a must.
regards.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

542
Handle uncaught exceptions · Issue #542 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When something "unexpected" happens in my Java-based Vert.x server, I see this sort of output in stdout:
Exception in Java verticle script 
Is there any way for me to programmatically handle uncaught exceptions like these?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

543
nextOutboundMessageBuffer() called from outside the eventLoop · Issue #543 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
After switching to the latest vert.x version (2.0.0-SNAPSHOT with netty 4.0.0.CR1) I've got this error:
The error is triggered by this code:
Any help, please?
Thanks,
Mihai
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

544
Can't build Vert.x on Windows behind a proxy! · Issue #544 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x can't be built on windows if the system is behind a proxy (like 99% or corporate workstations) !
Maven, wget, curl, node, everything works can "find route to host", except vert.x
Following stacktrace is displayed:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

545
Support null values in JSON · Issue #545 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when putting in the null ref. for the value, you hit a NPE, because of an (unchecked) access of value.list
Not sure if it makes sense to pass in null... but the NPE was a bit odd...
In an example like here:
the get for options would return null anyways - so I think it's debatable to allow null... but the NPE was/is odd...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

546
vertxbus.js delete of wrong replyHandler object · Issue #546 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry no pull request for this, but I was working on a custom vertxbus.js and found the following issue:
See line 148
Should be
I'm nearly sure of this, but please double check my thinking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

547
Add support for accesing headers to WebSocket handshake · Issue #547 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
During the handshake headers are being sent to server (the same way like in HTTP).
The support should be probably added the through [Java/Groovy] getHeaders() method on WebSocket object.
Here is a sample code usage:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

548
Ensure Hazelcast CPU utilisation issue is fixed · Issue #548 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hazelcast/hazelcast#81 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

550
Pass the initiating request URI (or request object) to DefaultWebSocket · Issue #550 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In DefaultHttpServer when an UPGRADE request is received a DefaultWebSocket is constructed. It seems however that only the path segment of the URI is passed on as context. Ie:...
It would be nice to have the entire URI (for example to retrieve query arguments) or even the entire request to see what headers were passed in the initiating request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

551
Add Maven Archetype and Plugin for Vertx. · Issue #551 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Need to add maven archetype and plugin into the GH repository from.
Also, automate deployment of archetype and plugin to sonatype repository on every commit or like vertx frequency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

552
DefaultHttpClientResponse calls the data handler while pause() is active. · Issue #552 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the attached gist, I'm testing both DefaultHttpServerRequest.pause() and DefaultHttpClientResponse.pause().
The test creates an HTTP server, pauses for 100 msec when a request is received, then resumes and then the server's data handler is called. That looks good.
But the client seems to have a problem. In the client, I open a request to the server, then pause for 100 msec and then resume. But this time the data handler and end handler aren't called after we resume, which leads me to think the data event is occurring even when the client is paused.
There's a lot of debug output so we can see what's going on and when.  This test is adapted from node.js' pause and resume test here: 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

553
Vert.x should provide file stats similar to node.js · Issue #553 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See the node.js API here http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

554
Provide asynchronous DNS lookup functions similar to node.js · Issue #554 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See node.js API reference here http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

556
Websocket HTTP(S) bug in ClientConnection.java (host header incorrect) · Issue #556 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This line:
should be
i've seen that some code has been moved around since 1.3.1, i couldn't find this code anymore in the current master branch so not sure if this bug still exists.
As far as i can tell, this may prevent websocket connections for some servers (at least I have problems connecting to a websocket server and the host header is the main difference i can spot between the failing connections from vert.x and working connections from the browser)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

557
Unable to attach an exception handler to client connection · Issue #557 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

558
SharedSet's add() method returns improper value · Issue #558 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
According to specification of the Set interface , add() should return true when new element is successfully added, false if it's already in the set.
This is the implementation of the Set's add() method in SharedSet:
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

559
Provide a way to determine how many bytes were written to a Buffer · Issue #559 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The node.js API provides a Buffer#write method that returns the number of bytes written. This, of course, could be different than the string length (assuming the input is a string).
At the moment, nodej simply returns the input length, which works in some cases, but certainly not all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

560
Add Buffer#fill() method · Issue #560 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A convenience method that fills the buffer with a value would be beneficial for NodeJ's Buffer implementation. See node.js reference here
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

561
Buffer.setInt and Buffer.getInt don't work as expected · Issue #561 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is a very simple test case, showing the failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

563
Async start for non Java verticles · Issue #563 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Provide mechanism to allow the completion of start of a non Java verticle to be signalled asynchronously
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

564
JavaClusteredEchoTest takes long time to run · Issue #564 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After the recent changes to make listen async.
Need to investigate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

565
Coffeescript and Multiple Instances · Issue #565 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using the http coffeescript example:
This doesn't:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

567
Move multi-part form functionality into core · Issue #567 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

568
Optimisation · Issue #568 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

569
HTTP should not send a body for HEAD requests · Issue #569 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed in #vertx on freenode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

570
java.net.SocketException: Connection reset by peer errors when bombing requests (1000) in my test · Issue #570 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I try to create a test which executes a lot of requests to a HttpServer. I use the code below.
I run with vertx-platform-2.0.0-SNAPSHOT.
I run the code within intellij (latest) from a test. (right click on attribute run test)
Random I get errors see results below.. You have to play with the count and try a couple of times.
Greetings.
I cant add text files..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

571
Tests for JMX functionality · Issue #571 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

572
Problem with net server using python language · Issue #572 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i'm trying to run this example:
But when i try to connect i get this error:
Exception in Python verticle
AttributeError: 'NetServer' object has no attribute '_to_write_stream'
this one using http server runs without problem so i don't think it's a configuration issue:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

574
Encryption for EventBus · Issue #574 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For being able to run a vertx-cluster on a LAN, where other nodes are present (they should not be able to read the event bus communication) encryption for the server node traffic is necessary.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

576
Fix examples · Issue #576 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
They need bringing up to date for Vert.x 2.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

577
Proxy example fails with closed connection · Issue #577 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Need to investigate what is closing the connection
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

578
AngularJS JS example not working · Issue #578 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

579
Unable to start up multiple vertx instances of EventBusBridge · Issue #579 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We are currently experiencing some issues with a WebServer Vertical we have implemented.
Our WebServer basically sets up an EventBusBridge. However, our EventBusBridge implementation is a subclass of org.vertx.java.core.sockjs.EventBusBridge. The main difference is that we have provided some JMX functionality to provide statistics on how many users are connected, how many addresses they have registered handlers on etc.
When running a single vertx instance there is no problem, everything works as it should.
However, when running multiple vertx instances, we get a javax.management.InstanceAlreadyExistsException when subsequent instances try to register their MBeans.
Following this, we tried the following technique:
The first instance that starts creates the MBean, registers it with the MBean server, and stores a reference to it in a map in vertx.sharedData.
The second instance checks the map in vertx.sharedData to see if it already exists. If so, it tries to obtain a reference to this, and use it within its vertical (so we can reuse the same MBean instance for statistics).
However, when executing the second stage, we get a ClassCastException, despite the fact that the class we are casting to is identical:
e.g.
java.lang.ClassCastException: com.mycom.EventBusBridgeStatistics cannot be cast to com.mycom.EventBusBridgeStatistics.
I suspect that this is due to the EventBusBridgeStatistics class being on different classloaders. Does anyone know of any workarounds to this problem?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

580
SSL Exceptions when running webapp or ssl examples · Issue #580 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run any of the webapp or ssl examples and you will see SSL exceptions in the logs
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

581
Proxy examples not working · Issue #581 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Proxy examples not working - this appears to be related to the headers changes.
In particular the Groovy MultiMap needs to be wrapped..
For JavaScript we need a good way of iterating through the headers. I suggest a function on the wrapped headers something like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

582
Provide HTTP protocol version information in HttpServerRequest · Issue #582 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to have access to the HTTP version data in HttpServerRequest. At the moment, it's exposed in lang-dynjs though a backdoor by using the underlying netty request that's exposed in DefaultHttpServerRequest.
Please add the version information for the request to the Java interface so I don't have to be such a hack. Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

584
Document thread safety of core classes · Issue #584 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the JavaDoc.
People using them embedded need to know this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

585
Http Proxy and Pump · Issue #585 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Attaching some code that aims to create an HTTP Proxy using Pump.
Looks like it hangs, or in any case does not upload two files like it aimed, by running two verticles.
To run it (check the code first as there are hardcoded file paths - you need to give it a file to upload and a location), you do:
It will upload the file, but only one, not two, while i have two verticles, so, should be two files.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

586
Inherited verticle class not found. · Issue #586 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example code
This works in a TestVerticle when runned within IDEA.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

587
Close the module temp file that is downloaded from maven etc. · Issue #587 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 2.0.0 from github, when running on Windows.
After vertx have downloaded a module with HttpResolution I get a console message "Failed to delete zip". This is caused by a missing os.close() at the end of HttpResolution.downloadToFile().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

588
Running a module with -instance 2 cause 2 downloads of depending modules. · Issue #588 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 2.0.0 from github, when running on Windows.
If a dependent module is missing in then mods folder and vertx is started with multiple -instances, the dependent module is downloaded multiple times:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

589
ClosedChannelException · Issue #589 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm getting netty ClosedChannelException on the latest 2.0 master.
Easily reproducible : just run testClientDrainHandler test.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

590
Add local bound address to NetServer · Issue #590 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to have access to the local bound address in NetServer. This is needed for nodyn to implement
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

591
WebSocket fails with http 200 · Issue #591 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Connection with 2.0-SNAPSHOT fails with 200, expects a 101.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

592
Make SharedData available across cluster · Issue #592 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Before it gets forgotten - SharedData should be shared across all Vert.x instances in a cluster and not only on a single machine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

593
Register a handler to multiple addresses in a single request · Issue #593 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be really useful if we could register multiple handlers to a single address in a single request:
At the moment, we have to send a single request per registration:
Being able to do this in a single request would enable us to significantly reduce bandwidth and performance overhead due to network latency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

594
Expose client registrations/addresses via JMX · Issue #594 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be great if all client registrations/addresses were exposed somehow via JMX.
This would allow us to see which addresses clients are registering with and help diagnose issues and provide valuable insight into what data clients typically require.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

596
Compression over the EventBusBridge · Issue #596 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Optional compression of messages over the EventBusBridge websocket would be extremely useful.
Again, this helps reduce bandwidth consumption on the communication between client and sockjs server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

597
Conflation of messages on EventBus · Issue #597 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Optional conflation of messages on the event bus would be very useful.
Many pub-sub type applications are only interested in the latest available value. If a piece of data is still waiting to be sent to a client who has registered to an address, and this value is subsequently updated, then this value could be replaced before it is sent to the client.
This would be very useful for applications where data changes frequently, and clients might be slow at consuming the data (e.g. an online stock market application). Again, this can help reduce bandwidth consumption and result in faster updates to clients.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

598
Create a simple Migration document for moving from 1.3.1 to 2.0 · Issue #598 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think we would need a migration document so that those of us that are still using 1.3.1 until at least a Beta is released will know what changes we have to do to do the move. Mostly API changes. I think some things like in 1.3.1 you wouldn't use shared data if you wanted to have data shared among multiple instances of vert.x but now you can.
Thanks
Mark
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

599
Expose NetSocket in HttpRequest · Issue #599 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is needed to implement parts of the Node.js API in nodyn. The original discussion with purplefox and normanm is here:
Followed by a couple of brief discussions:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

600
Could expose the timeout hook of Cluster EventBus for user? · Issue #600 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I'm look into Vertx source , and i found DefaultEventBus have make checking timeout for cluster. it's seems send message of ping in every 20 seconds .
i think it would be good that let user make handler to process something that want after close the target server in cluster.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

601
Allow user to disable websockets on HTTP server · Issue #601 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Node.js doesn't do websockets well, or at all, really. The API requires you to handle the upgrade header yourself, and then you get a socket object to play with (see: http).
To implement this API in nodyn, I'd like the ability to turn off vert.x websocket handling with an option to http.createHttpServer() or as a post-construct configurable option.
Original discussion:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

602
Empty string as message body causes error in Socks event bridge. · Issue #602 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sending an empty string as a message body appears to cause an error with the socks bridge:
works fine as does passing no message body. Not sure if this should work or not but the rest of the event bus seems to be fine with it so I assume it's a casting issue with the bus? Note I've only tested this over the cluster event bus but I'd assume it's the same over the intra-jvm bus.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

603
Expose timeout handler on eventbus in cluster mode · Issue #603 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i' ve look into some code, and i found there are some timeout dispose in DefaultEventBus, i think it's would be great, if make a hook handler for failed PING message, since developer would do something for they are system while they found network failed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

604
JS api docs · Issue #604 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Use JSDoc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

605
DefaultHttpServerRequest attributes should be MultiMap · Issue #605 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Should this be a multimap since http allows several params with the same name like on the url request
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

606
can we have MultiMap in a generic form: MultiMap<T>? · Issue #606 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the rationale behind this is when we are dealing with file uploads it would be nice to also use MultiMap to store it but in this case instead of a String we want to keep a reference to: HttpServerFileUpload
The change would be minimal:
and a couple of other places in the file...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

607
Random access read can read beyond end of file · Issue #607 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Below is an example of a groovy verticle doing a file read that goes through... and beyond !
You can see by running it that after the end of file, the md5 of the buffer content stays the same.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

608
httpserver javascript error when accessing the parameters · Issue #608 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've just installed the vertx 2.0.0 beta 2 release. I get some errors when accessing the request parameters.
Here my example, it is just the http server from the example repo with access to the request parameters:
And here is the exception:
Exception in JavaScript verticle:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

609
NPE if params() is called before uri() on HttpServerRequest · Issue #609 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

610
Add HttpClientResponse#netSocket() · Issue #610 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is another request in support of the node.js API implementation in nodyn. Thanks for adding HttpServerRequest#netSocket() in support of the raw socket operations needed for node.js.
To support full compatibility, the client needs to communicate directly over the socket also, as seen in this example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

611
Javadoc for Javascript · Issue #611 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All the other supported languages have detailed documentation with all the available methods.
Makes me think, because Javascript is maybe the most popular language in Vert.x. I don't know how other people do, but I saw myself digging out the names of the methods from here:
Anyways, here is a list of doc generators to choose from: http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

612
Fix windows batch file · Issue #612 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently doesn't work with paths that have spaces - see google group for a fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

613
Add required module reg fields to vert.x modules · Issue #613 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

614
EventBus send and reply timeouts · Issue #614 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Probably use an Handler
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

615
Errror: Could not find or load main class 2.0.0-beta2 · Issue #615 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Windows 8 64bit
i set my path from
home/vert.x/1.3.1-final/bin
to
home/vert.x/2.0.0-beta2/bin
and in cmd => vertx => error
please is error in .bat file ?
thanks for solution
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

617
Allow a custom 404 to be specified · Issue #617 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In sendfile if the file is not found
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

618
NetSocket no longer supports write() with a doneHandler · Issue #618 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I miss this:
Is there any way for me to be notified when a write has completed?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

619
PlatformManager.stop() does not call vertx.stop() · Issue #619 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When embedding using PlatformManager, the stop() method only calls the redeployer.stop() method, but doesn't call also call manager.vertx.stop() as expected.
manager.stop() should call manager.vertx.stop() after calling redeployer.close()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

620
SharedMap's 'view' methods return copies · Issue #620 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given the underlying data structure is a CHM, what was the thinking here?
I understand the performance benefits (IME, continual iterations of CHM generates a tremendous amount of garbage under high write loads), but if this is the only reason it might make more sense to provide explicit read only forms of the view methods, ie. "readOnlyEntrySet" or vertx.sharedData().readOnlyMap("foo") for example.
Either way, this should be explicitly documented at the code and user level as this behavior effectively breaks the "backed by the map" contract of the parent interfaces.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

621
Multipart form upload error  in Vertx 2.0 beta2 · Issue #621 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Groovy :
and the file was uploaded, but file data is incorrect!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

622
[websocket] ServerWebSocket should allow reading the query string of the initial request · Issue #622 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Framework like Atmosphere are passing information as query string when opening a websocket. With Vert.x version 1.3.x, the ServerWebSocket is constructed using uri.getPath, which trim the query string and make quite hard to get that information unless I use reflection :-)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

623
Deploy modules from classpath · Issue #623 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Extend module reloader so it can watch configurable set of project dirs, e.g. IDEA/Eclipse out dirs
Change platformmanager runmod so it can take a -classpath parameter. If specified then it will look on classpath for a mod.json and set the module classpath to be the specified classpath.
Change module reloader so it watches all the file urls in the classpath
Then user can just do vertx runmod -classpath out/test -auto-reload=true
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

624
DefaultHttpServerRequest juri() method can throw an IllegalArgumentException · Issue #624 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The comment //Should never happen implies this is not the expected behavior.
Either the comment should be removed, or the code should be patched to handle bad URI encoding.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

625
IncompatibleDataDecoderException: No Body to decode · Issue #625 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using Dojo Toolkit RestStore the first GET request to list all items sends the following headers (source mode):
Accept: application/javascript, application/json
As you can see Dojo decided to send the content-type header with "application/x-www-form-urlencoded". Since this is a GET request it does not contain a body and Vert.x crashes.
I think that on DefaultHttpServerRequest.java the decoder should be enabled if the content type is present AND the method is anything other than GET or HEAD.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

626
Javascript - vertxHttpClient.chunked(true) doesn't return proper object · Issue #626 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to chain functions on my request object, I get a "cannot call method 'end' of undefined" if I try to chain something after .chunked(true). If I separate them out into distinct calls, it works fine.
Not working code (assume gnClient is a properly-declared vertx.createHttpClient() object):
Working code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

627
http GET parse url issue with + · Issue #627 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The default way Dojo Toolkit uses REST stores with sorted queries is by adding to the request path the following query:
So if i use Dojo and request all the persons on my database sorted by name, Dojo makes the following request (in source mode):
However on Vert.x side when getting the request parameters i get:
The expected value would be a + and not a space.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

628
fileSystem.mkdir() · Issue #628 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
beta3
create only null dir
on beta2 create correct
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

631
Beta4 ClassLoader changes breaks nodyn · Issue #631 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bumping nodyn to beta4 causes this error
If I checkout 06f9d62 - the commit just before the classloader changes - and build vert.x locally, the problems go away.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

632
Occasionally NPE with auto-redeploy and -cp option. · Issue #632 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Playing with the new -cp option I encounter a NPE:
It occur if the main module deploys module (like mongo-persistor), and the main module is redeployed. Only happens at about 30% of the redeploys.
I can reproduce it with the gradle template, by making these changes: and running this command.
and in another window run a series of
Adding System.out DefaultPlatformManager I can see that enclosingModID in deployModuleFromModJson() is normally "com.mycompanymy-module1.0.0-SNAPSHOT" when the redeploy works, but occasionally it is set to "io.vertxmod-mongo-persistor2.0.0-beta2" and the parentRef is null -> NPE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

633
Issue with SockJS and exception/end callbacks · Issue #633 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given the simple SockJS server below, I seem to not be getting reliable notification that a connection's been closed.
To reproduce the issue, perform the following steps (given the code below):
Run the server.
Navigate to localhost:8080
Note that the server prints "Open: ..." and the client prints "open". Everyone's happy.
Now stop the server. The client will print "close" and start trying to reconnect.
Restart the server. After a couple of seconds, the client will happily reconnect.
Now close the client. Note that the server prints no "End: ..." message.
Note that if you do this without restarting the server, everything behaves as expected. Also note that I'm doing this in Chrome. It may be different in other browsers, depending upon the vagaries of how their network stacks close websocket connections.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

634
Unable to run `runzip` command · Issue #634 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After making a project with the maven archetype I just wanted to run it from the generated .zip file in the target/ directory.
I got this exception
I tried it with 2.0-beta3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

635
Java HTTP Proxy with Pump · Issue #635 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to create a simple HTTP proxy using Pump. I wonder why the following code doesn't work:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

636
Deploying other modules doesn't seem to work in Gradle template · Issue #636 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The issue is that there are either no messages going to the second module or the reply doesn't find its way back.
Clone the repo of this file to check the difference between beta3 and beta4-SNAPSHOT:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

637
Javascript - add ability to catch all requests before individual route matches  · Issue #637 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Google Groups topic here
The ability to catch all incoming requests before they hit individual route matches would be excellent for code DRYness, as it would allow common functionality like authentication to occur inside this handler as opposed to inside each route handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

638
Not able to run the samples (Java) · Issue #638 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys! I've the same issue as it described in closed ticket (see #504)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

639
python cannot import classes relative to module directory · Issue #639 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that python's working directory is not the module's directory as it is described in the modules manual.
If I'm getting started with gradle:
I have a module which I can populate with a trivial python main class:
When I extend this main class to import another python class, which is located relative to my main class, then it will fail to load it:
If I try to put that to-be-imported class into the relative directory /, which can be found in the output of the first hello.py above, then it won't be found either:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

640
request.response.sendFile() doesn't serve files relative to the module directory · Issue #640 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The JavaScript request.response.sendFile() serves files from the current working directory instead of the module directory. From the JavaScript API Manual I cannot figure if that's the expected behavior or a bug.
When creating a simple module:
I'll get an 404:
When I change the request handler to:
I get the the desired 200:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

641
Deprecation warning on EventLoopGroup when building main project · Issue #641 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

642
Should be able to require() a Vert.x module from JS · Issue #642 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

643
Jython Buffer API uses FixNum · Issue #643 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a Ruby thing not a Python thing
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

644
2.0.0-CR1 vertx command default help screen issue · Issue #644 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run command
See section on -instances:
-instances specifies how many instances of the verticle
will be deployed. Defaults to 1
Default is vert-x.github.com/vertx-mods" is not supposed to be there.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

645
Javassist Error Message displayed while in Eclipse · Issue #645 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reproduction
Setup a new Gradle project (create build.gradle), pull in vertx-platform as dependency.
Create new main class (e.g. Main.java)
Import into Eclipse as Gradle project
try to run Main from Eclipse using Run
Error is displayed in eclipse console.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

646
Rare exception during auto-redeploy. · Issue #646 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using the auto-redeploy feature in beta6 (and it is great, really great) I sometime get an exception like this:
The exception is rare, much less than 1% of the reloads, so it does not prevent the use of redeploy.
I can not reproduce it but it have occured a couple of times.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

647
Auto-Redeploy - child modules · Issue #647 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As it is, auto-redeploy can only be true for top-level modules. However, I believe there are possible use cases for auto-redeploy to be enabled for lower-level modules.
Scenario 1
Module A deploys Module B.
When Module A changes, Module A correctly undeploys all children and redeploys itself.
When Module B changes, no redeploy takes place.
Suggested behaviour: Module B should detect the change, and Module A should treat that as a change in itself, and redeploy.
Scenario 2
A module I am writing allows devs to create a configuration file that tells the module which modules to deploy depending on various things (environment, id etc.). However, this module itself does not need to redeploy, but the lower-level modules should redeploy independently of each other.
Suggested behaviour: Module A should not redeploy if Module B changes, however we should be able to allow Module B to be redeployed on its own.
Suggested Enhancement
Allow "auto-redeploy" to be deployed on any levels.
if auto-redeploy is configured on a module, it should detect any changes within itself, in addition to any lower-level modules that it deploys, and treat that as a change in itself.
in order to avoid ambiguity, lower-level modules should not be able to disable auto-redeploy if it is enabled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

648
Pong fails because buffer has already been written · Issue #648 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe this problem was introduced during a recent refactoring for Netty:
Basically what was happening, is the DefaultEventBus had a static buffer which is what using for the PONG packet, and was writing that for every pong, but after the first write Netty actually wrote nothing.
Probably the underlying Netty ByteBuf needs resetting after writing. We need to support users writing Buffers more than once.
I have added a test case to demonstrate this issue JavaNetTest.testWriteSameBufferMoreThanOnce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

650
Homebrew installation · Issue #650 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be very nice if you could install vertx with homebrew. Is there any plan of using any type of package manager?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

651
vertx runzip (CR1) doesn't have the correct "current directory" · Issue #651 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Came across a small issue in runzip command. The API for sending files (req.response.sendFile("webroot/index.html") for example, seems to be giving me Resource not found at runtime. It works perfectly when I use runmod though.
I had started working on creating a pull request, but ran out of time last night.
Please let me know if a pull request would be helpful and I'll try again tonight.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

652
receive buffer size setting. in vertex 1.3.1.final · Issue #652 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Tim
I find a bug (maybe) that receiveBufferSize parameter is invalid.
my data are sent by NetServer and NetClient is more than 1024B,
so i set receiveBufferSize 2048, but i find it don't work.
finally, i found reason at line of 102  in TCPSSLHelper.java
FixedReceiveBufferSizePredictor always is 1024.
it's mean that user space size of buffer is 1024, but kernel of OS size is tcpReceiveBufferSize. i changed parameter of FixedReceiveBufferSizePredictor to tcpReceiveBufferSize, it work fine...
i don't test in vertx2, since i will plan translate project to 2 in two weeks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

653
Possible (Netty?) SSL problem with CR1 · Issue #653 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I run the JavaScript webapp example with CR1 the page fails to render in Chrome, but if I run it with a previous version it renders OK.
When running with older Vert.x, change the versions of the modules in app.js to beta1 from CR1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

654
Module reg backup · Issue #654 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

656
req.response().sendFile is not working when running module with runZip · Issue #656 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a verticle serving simple files living in the root of my packed zip module with req.response().sendFile("index.html");
It works fine if I run the application setting the VERTX_MODS variable pointing to the exploded structure of my compiled module (as I'm using the maven archetype it is target/mods); but if I use the runZip command, the same code returns "Resource not found" in the browser.
I'm under checking it against current master @ bcfcb33
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

658
vertx runmod uses wrong working directory · Issue #658 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of bcfcb33 all file systems operations are relative to the working directory of the calling process instead of the module directory.
When running a module after a successful ./gradlew like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

659
Add CONTRIBUTING.md to vert.x · Issue #659 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First, it's awesome to have an Eclipse project on GitHub!
I'm not sure if this is the case, but if contributors to vert.x now need to sign the Eclipse CLA, it would be helpful for every would-be contributor to know that as early as possible.
If you add contributing guidelines in a CONTRIBUTING.md file, we'll add a link to that  file when a contributor creates an Issue or opens a Pull Request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

660
Netty issues · Issue #660 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The latest Netty version is needed in order to make the ssl tests pass, but it breaks the websockets tests :(
So basically I can't find a Netty version to use that lets me run the main test suite through....
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

661
For discussion: pre-configuration of a Verticle in VerticleFactory at instantiation time. · Issue #661 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be useful to provide configuration for a verticle in the VerticleFactory before a Verticle is created & returned.
A straw man example: if one wished to constrain the number of instances of a given Verticle, an annotation could be applied:
In Java, properties of an Annotation on the class can be discovered before instantiating the class, but this is not portable across all language implementations.
An Annotation is sometimes converted to a Map of its properties, there might be a way to provide enable a language-feature conversion to a map for each implementation, but configuration through JSON would also achieve the same thing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

662
Add NetServer handler for parse Object · Issue #662 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
since vertex base on netty, i think it would be cool, if we could use a lot kind of decoder or encoder class which in netty packages..
now, i have a scene, that use NetServer and NetClient send/receive message with Buffer. i wanna en/de coder these buffer in JSON/Object.
this could be? 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

663
Problem with shared map · Issue #663 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm currently debugging an issue I have with a shared map. It might be due to a misunderstanding on my part. If so, I'm sorry for the noise. Below is a minimal test case that demonstrates the problem. In the Putter verticle, I add a new map entry, and in the Getter verticle I
But for some reason the two don't agree on the contents of the map. E.g. I get the output:
So I'm guessing there's some concurrency issue at play here.
I ran this test case with:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

665
keepAlive never configured · Issue #665 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Related to #533.  keepAlive is never used to configure the connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

666
Simple upload includes redundant "name" attributes · Issue #666 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run the simpleform example in vertx-examples. Output is this:
Netty shouldn't be adding extra attributes with name "name"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

667
Netty resourceleak when running ws_perf example · Issue #667 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run the ws_perf Java example in vertx-examples.
In one console:
In another:
Starting perf client
Received data on all conns
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

668
Vertx "runzip" littering /tmp folder · Issue #668 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
every time I run a zip, it's extracted in my /tmp directory, executed and left there forever.
Now, since ideally I don't reboot a production server very often, the temp folder is going to grow indefinitely whenever I start/stop my vert.x modules.
We use volatile EC2 instances (no EBS mass storage volumes attached), so the space on disk is running low and most of it is used in /tmp/vertx-zip-mods.
Shouldn't Vert.x cleanup the unzipped modules on shutdown?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

669
java.nio.file.InvalidPathException calling vertx.fileSystem.readFile on Windows · Issue #669 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When calling vertx.fileSystem.readFile with a relative path a java.nio.file.InvalidPathException is thrown because a prepended "/" is added in windows.  IE: c:\temp\abc.html is turned into /c:/temp/abc.html
This issue started on the v2.0.0-CR1 - tagging release we weren't seeing this in beta5.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

672
Make cluster solution pluggable · Issue #672 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently Vertx (as of 2.0.0) is tied into using Hazelcast to manage members and subscriptions.
If this was made pluggable then we could replace this with another clustering technology such as Oracle Coherence (or even to downgrade/upgrade the Hazelcast version being used). These plugins could be then developed as external modules, and supported by the community.
For many companies, being able to switch out Hazelcast for a commercially (or internally) supported product is an important box they need to tick before adopting a technology such as vertx. The reason for this is that although Hazelcast isn't used for a great deal in Vertx, some knowledge of it is required for setting up and maintaining a distributed cluster, and it has its "features" which people need to get used to and learn how to work around (e.g. the split-braining). In addition, (please note this is not my opinion), Hazelcast hasn't got a great reputation around the industry, and I have been told of several projects which needed to be rearchitected due to stability issues with it.
For me personally, I would like to see this made pluggable so that I can carry on using the existing version of Hazelcast (2.4.1) that we are currently using, so that I can add Vertx 2.0.0 components to the existing event bus (Hazelcast doesn't allow for different minor versions to join the same cluster).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

675
On windows, ClasspathPathResolver with absolute paths. · Issue #675 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using an uptodate CR3-SNAPSHOT, absolute paths fail with a
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

677
Netty ResourceLeakException during multipart parsing. · Issue #677 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An exception during multipart/form-data parsing with a  field.
Seems to occur consistently on the first fileupload. Further uploads does not cause exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

678
Eclipse reports "Build Path Problem" · Issue #678 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Eclipse reports the following "Build Path Problem" when is imported a branch folder of vert.x from into some workspace using Import facility of Eclipse.
Two Build Path Problem:
Both way lead to the same result:
I understand not why, the bunch of vertx-core's src/test is dependent on the bunch of vertx-platform's src/main, but the bunch of vertx-core's src/main isn't dependent on the bunch of vertx-platform's src/main,
So, it may be not easy to resolve the cycle consists.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

680
Some testcases have wrong package in vertex-testsuite. · Issue #680 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Some testcases have wrong package in vertex-testsuite.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

681
jks with bundle or intermediate hanging on Android & not valid on Firefox · Issue #681 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using a Godaddy SSL certificate it doesn't look like vertx is properly returning to the browser the Godaddy gd_bundle.crt or the godaddy intermediate certificate.  This is causing Android devices to hang and time out waiting for the intermediate certificate and Firefox to raise a not trusted website screen.  I've validated that both our godaddy UCC cert and the bundle have been properly added to the jks using the keytool utility.
Steps to reproduce
Buy a SSL cert that requires an intermediate certificate (Godaddy)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

682
Synchronize require() in Ruby verticles · Issue #682 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When starting multiple instances of the same module/verticle type concurrently, and where the verticle does a require(), this can result in failures because require() in the shared ruby runtime is not threadsafe.
We can fix this by overriding the require() method with a version that synchronizes access to the original version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

683
Option to not share runtime in verticles · Issue #683 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some language implementations (Ruby, Python,...) share a runtime instance amongst all verticles/modules of the same type in order to reduce RAM and permgen overhead to allow more verticle instances to run.
The isolation provided in this case between verticle instances is usually good enough but not 100% perfect.
For users who require better isolation guarantees at the expense of more RAM overhead we should allow a switch to be provided so each verticle instance has it's own runtime.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

684
Memory leak in SockJS · Issue #684 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a web browser using the EventBus bridge doesn't disconnect cleanly (for example, its WiFi connection dies or perhaps the user puts the machine to sleep), Vert.x will continue to pile up pending writes until all memory is exhausted.  Full report here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

685
vertx2.0-CR2 can not recognize upload file data from phonegap · Issue #685 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
groovy code, simple and standard:
upload from browser like chrome, everything is ok!
but if upload from a  phonegap app, nothing happened!
so I think the  reason is that uploadHandler can  not recognize upload file data from phonegap( data encode a little differently ).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

687
large zip files stored on bintray can't be pushed to mods repository with status 302 · Issue #687 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
example of a failed module:
ashertarnovertx-memcached2.1.0
attempts to push it return an error saying that bintray returned status 302
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

688
Problem with formAttributes MultiMap · Issue #688 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx version
I'm having troubles with formAttributes here is content of my form-data :
Content-Disposition: form-data; name="content"
and here is how the MultiMap parsed it (problem with dash and eventually other special char) :
And after add function on the MultiMap here is the result :
It doesn't erase the old value because of character misparsing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

689
Classloader weirdness during tests · Issue #689 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So, not super-simple to replicate but:
c-1) If you attempt mvn test on the 3rd project, it will fail with a ClassCastException due to some ActiveMQ classes getting loaded strangely across multiple tests
c-2) Running each test individually will work without a ClassCastException:
So it seems that undeploying a module (in TestVerticle's own stop()) isn't completely wiping classloader space, and the deployment of the module isn't isolated enough perhaps.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

690
Verticles deployed from module do not inherit includes from module · Issue #690 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps to reproduce.
Create non-runnable module with class to share
In runnable module, include non-runnable
The main verticle in the runnable can access classes from the non-runnable, but additional verticles deployed cannot.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

691
Bug in container.exit() ? · Issue #691 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi !
In 2.0.0-CR3 (and may be previous version) the exit() function on the vertx/container element doesn't seems to works.
Simple example:
The server stop working but the message "Bug !" appear !
Regards,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

693
IllegalArgumentException thrown when using runzip · Issue #693 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry, I'm not sure this is an issue, but I don't where to parse my problem. I created a maven project using vertx-maven archetype, pakaging the project into zip. Using vertx runzip {zipfile}, the message was printed after running that command:
java.lang.IllegalArgumentException: 'other' has different root
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

694
NPE when enabling JMX together with -cluster (v2.0.0-final) · Issue #694 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Happens on release v2.0.0-final. Java version:
We have found that this fixes it:
Let us know if you'd like us to submit a pull request (I have signed the contributor agreement).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

696
Exception on http client connection does not cause pooled connection to be freed up. · Issue #696 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a connection exception (e.g. connection reset by peer) occurs on an http client connection, then the the client close handler is not called resulting in the connection pool not knowing the connection was closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

697
HttpClient same context used for all handlers · Issue #697 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the DefaultHttpClient the same context is used for all handlers. This isn't really appropriate in am embedded situation where the instance can be shared by multiple contexts.
Also check DefaultHttpServer and Net clients and servers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

699
java.lang.IllegalStateException: Invalid object UnpooledHeapByteBuf · Issue #699 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to write a very basic proxy server, but it is generating an exception from the buffer.  The example code is here:
It's entirely possible that I'm doing something wrong, and obviously this is a naive proxy implementation. But, if you could take a look that'd be great.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

700
could vertx using on android as an restful http server?! · Issue #700 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sorry for this issue,I want to know that could vertx using on android to act as an restful server.
If I want to build some app as airdroid ,this may be an good start if it could.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

702
Document EventBusBridgeHook functionality · Issue #702 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, there is a hook for EventBusBridge events in Java. This should be documented in the manual.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

703
Custom SSL trust managers · Issue #703 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Support for custom trust managers would allow to implement custom trust stores. For example, store trusted certificates in a database so that they can be added/removed at runtime.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

705
v2.0.0 HttpClient does not honour server Keep-Alive response. · Issue #705 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Connection close example from server:
It would also be useful to have a timeout option for the entire request, not just the connect part.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

706
gradle dist task produces empty testsuite jar  · Issue #706 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current gradle build task 'distZip' does not produce a populated testsuite jar (it produces an empty jar file)
btw, I presume that testtools has been renamed testsuite.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

707
Vertx Json has pretty print for Json but it's not used. · Issue #707 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonObject toString() uses encode() which in turn calls Json.encode()
Looking at the Json class there's also a pretty print function.
We should be able to request pretty print if we want.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

708
osgi support · Issue #708 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Norman:
do you mind if vert.x supports osgi packaging
or is more friendly towards osgi in general?
currently there is some leg work involved, i.e.
Thank you.
Andrei.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

710
Module includes · Issue #710 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've created simple app with vert.x 2.0-final, Gradle template and Yoke (https). I've added Yoke to my mod.json:
When I run runMod or runModIdea, I get the error:
But when I change to Java, it works without problems. Server.java:
Also, if I remove yoke from exludes and add it to Gradle dependencies, everything works in both Groovy and Java:
It may be connected with this: http,
but I'm not sure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

711
Auto-Redeploy - child modules · Issue #711 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside main module I deploy another module with:
Auto-redeploy is worked fine for main module.
Auto-redeploy doesn't work for sub modules.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

712
http client - send request without port in host header  · Issue #712 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
as a developer i would like to have the option to send a request using http client without the port part in the host header.
currently, if i don't change the port (the default is 80), the server sends the request with "HOST" header like this : "host:80"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

713
Auto-Redeploy does not work for child modules · Issue #713 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside main module I deploy another module with:
Auto-redeploy is worked fine for main module.
Auto-redeploy doesn't work for sub modules.
Attached sample project where you can reproduce this bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

714
Auto-Redeploy does not work for child modules · Issue #714 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside main module I deploy another module with:
Auto-redeploy is worked fine for main module.
Auto-redeploy doesn't work for sub modules.
Attached sample project where you can reproduce this bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

715
Setting javac compile options · Issue #715 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How to run verticles written in java using the following compile options:
I already tried something like:
..but it did not work...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

716
HttpResolution should be able to do basic auth · Issue #716 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x is unable to install modules from a Nexus mirror if anonymous access is not enabled.
A simple solution would be to add the Authorization header in the same way the proxy header is added.
I have created a simple solution that reads the user / pass from from system properties 'auth.user' and 'auth.pass' base64 encodes the result and adding of the header before sending the request.
I will submit a PR after signing the CLA
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

718
Cannot deploy Groovy compiled verticle · Issue #718 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using Gradle template, try and deploy a Groovy compiled verticle using container.deployVerticle(). There is a classloader issue here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

719
EventBus not immediately available when creating cluster-aware Vertx using VertxFactory · Issue #719 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found in Vert.x 2.0.0-final.
We encountered a timing issue when we use VertxFactory to create an embedded Vertx instance with clustering enabled - it takes a while for the EventBus to become available (any EB operation throws an IllegalStateException in checkStarted). Perhaps the API could take a callback to register for completion?
Also see issue #694.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

720
getting remoteAddress of sockjs socket · Issue #720 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in sockjs-node there is a simple way of getting the remoteAddress of a connected client. I really miss that in the vertx implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

721
GitHub history incorrect after move to eclipse · Issue #721 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, we are maintaining a fork of Vert.x and the recent move to Eclipse has caused some issues in the git history. I've found we're not the only ones, see https:
GitHub is now convinced we have a completely different history: trayio/vert.x@eclipse:master...master
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

722
Use slf4j-api for logging instead of hard dependency on log4j · Issue #722 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would be great if end users could pick their favorite logging kit of choice instead of having hard dependency on log4j.
For example using the slf4j-api as the api for logging then ppl can pick their log kit of choice.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

723
provide an EventBus API to introspect the current queue/topic names · Issue #723 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when in tooling (e.g. imagine a developer UI where you want to send a message to an event bus; or you're building a camel route to/from some vertx event bus endpoint) it would be great to get nice name completion.
e.g. in a text box you could start typing the name of an event bus topic...
and the UI pops up a completion list for you etc.
We have hooks in Camel tooling for this so if you edit camel endpoints in hawtio you get nice tooling.
So I'd like to reuse that in the camel-vertx component. Here's the code if you're interested:
So it'd be great if there was some way, given a Vertx / EventBus to be able to query what names are currently in use (possibly specifying some filter and maximum number of results in case there's millions of them) so we can use this in UI tooling
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

724
Instrumentation infrastructure and service (was "JMX") · Issue #724 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Per IRC discussion, the scope of this issue is to capture an initial set of runtime statistics and send them over the event bus to a default consumer.
Initially, I think the following attributes would be nice:
number of instances of each verticle
everything we could scrape off of netty for the built-in servers
event bus endpoints and their addresses
This first iteration of this will push events on the bus.
The bus module consuming the events will initially be implemented using the Metrics API (http). Reporting of the API will be pluggable per the Metrics library. By default (via Metrics), the bus module will expose statistics via JMX.
The first iteration will not provide for any operations, but the design of the bus module should not preclude the addition of operations in the future.
The event bus module should allow for reception of arbitrary user statistics.
The initial message payload should look something like the following:
Each message type has an optional "category" for additional aggregation. The astute reader will note that these messages closely match the attributes available in the core Metrics API types. This should be the design goal. Message payload can be an array.
Leaving off Timer type for now as that could get a little screwy.
If feasible, we should continue to respect an approach similar to the existing "vertx.management.jmx" system property that will disable the bus module and skip the transmission of events.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

726
Should vertx expose exception "java.lang.IllegalStateException: Call expectMultiPart(true) before request body is received to receive form attributes" as response? · Issue #726 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was testing request.formAttributes();
And I had not set request.expectMultiPart(true);
And the exception was returned in the response.
Should it not return a 500 internal server error instead of exposing the exception to the public?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1211
buffer.duplicate() is invoked twice · Issue #1211 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is in the latest released version 3.1.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1212
Add max queue size in HttpClient · Issue #1212 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vert.x 2 there was an option to limit the size of HttpClient waiting connection queue made in this PR - #849 (discussion in #845). Apparently, in Vert.x 3, due to the refactoring, this functionality wasn't included.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1213
Add "Connection: close" handling to HttpClient keepalive connections · Issue #1213 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The functionality was added to Vert.x 2.x but was not carried forward into the 3.x code base.  If using keepalive connections and the server sends back an 'Connection: close' header then the client should close it's connection and not continue using it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1216
Allow to plug a Context exception handler · Issue #1216 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
that would allow to trace the flow propagation (i.e when a context schedules the execution of a context and its later execution, etc...)
Vert.x Unit could use that to be aware of failures and somehow get rid of TestContext , for instance:
the AssertionError would be caught by Vert.x Unit and make the test fail.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1217
HttpClientRequest end() could be invoked out of order · Issue #1217 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If HttpClient is not running inside a verticle/container. For example, it's running as a HTTP client application. HttpClientRequest.write()/end() are supposed to be called from outside vert.x event loop. When doing so, write() will be re-invoked in vert.x event loop but end() will not be. Therefore, complete flag may be set to "true" before all the write() calls are invoked. In such case, the request may end before it sends out all of its data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1218
ClientConnection should be closed upon http RequestTimeout · Issue #1218 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If an HttpClientRequest get's in a state where it is no longer receiving data from a server and a request timeout fires then Vertx should force the connection to close so that it can be freed up so another request can be processed.   Most likely since the connection is in an unknown state it shouldn't be reused if keepalive is enabled.
This issue combined with issue #1212 can easily cause an OOM or stalled HTTPClient situation on high throughput servers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1219
Waiting requests that have been timed out should not open a tcp connection. · Issue #1219 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a request goes into the HTTPClient wait queue and times out before being processed it will still cause an http connection to be opened and closed in a non-keepalive case.  This has the side effect of causing a large number of TIME_WAIT sockets on the local host and extra load on the server and network for no value.
If a waiting request times out it should be ignored rather than cause an interaction with the connection pool.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1220
Add Buffer#toString() / Buffer#toJsonObject() / Buffer#toJsonArray() · Issue #1220 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1223
No good way to clean up resource attached to a request · Issue #1223 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From a server perspective, there is no handler which is guaranteed to be called when a request finishes. HttpServerResponse.bodyEndHandler is only called if the request ends properly. If a socket is closed by either side, it may not be called. Another option is to use closeHandler but it will not be called when the request is ended either.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1224
VertX 3 can send an object via EventBus?? · Issue #1224 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a class,and i use Vertx.eventBus.send("Address",my_object).But i get this error:SEVERE: No message codec for type: for my_object.
So how to fix it???
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1225
ExecuteBlocking timeout · Issue #1225 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It should be possible to set specify a timeout in an executeBlocking that happens when no worker thread is available before this timeout.
This would be used in JDBCClient for instance, etc...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1227
Handle Exception when convert from Object to Json via EventBus · Issue #1227 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to send an Object via EventBus,and this is my way:
But i still get this error:SEVERE: Unhandled exception
java.lang.RuntimeException: Message type: Object not found.
I don`t know why vertX handles that Object type,even after i convert it????
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1236
HttpClientRequest timeout doesn't work as indicated · Issue #1236 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Based on the code in HttpClientRequestImpl#handleTimeout and the test testRequestTimeoutExtendedWhenResponseChunksReceived it would indicate that the request timeout is supposed to be canceled at the end of the response with some grace period applied as long as data is being received.
The current code doesn't actually work in that manner and I question whether a sliding timeout window is desired behavior either.
Currently, the timeout is canceled in handleResponse which is called when the underlying connection handler receives the Status-Line of the response in HttpClientImpl.ClientHandler#doMessageReceived.  Since this is the first packet of the response it means that the time it takes to receive the body, and the implied chunk handling timeout extension, is never included in the request timeout time.  A test that would illustrate the problem would be to set a requestTimeout, have the server send headers but delay the body for more than the timeout.  You should see that the timeout never fires as it was already canceled once the server sent the initial response packet.
It seems like the preferred behavior would be to cancel the requestTimeout timer in ClientConnection#handleResponseEnd and remove the sliding window implied by the chunk handling or make it optional.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1240
Prefix internal event bus handlers with "__vertx." · Issue #1240 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For instance the NetSocket handlers, that would allow the Metrics SPI to distinguish them easily.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1241
HttpClient: Netty "decodeResult" not handled · Issue #1241 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have an issue when a server send a response with too large headers, when debugging I  see that Netty has put the status "decodeResult: failure(io.netty.handler.codec.TooLongFrameException: HTTP header is larger than 8192 bytes.)" on the DefaultHttpResponse but Vert.x HttpClient does not check this status and handle normally the response which has incomplete headers.
For example the initial content-length header is not present in the headers and that breaks the processing of the response. Processing that should not be done as Netty has failed decoding the response.
Can you fix this problem?
I have a second issue, I effectively have some big headers but the  "HttpClientCodec" parameters are not configurable, I will open a second issue for this point.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1242
Make Netty HttpClientCodec and HttpRequestDecoder Configurable · Issue #1242 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add some options to HttpClientOptions and HttpServerOptions to let users customize the netty HttpClientCodec/HttpRequestDecoder options (maxHeaderSize/maxChunkSize).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1243
SLF4JLogDelegate does not pass down parameters when it is location aware · Issue #1243 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Should pass params as the second last parameter
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1244
Http client hangs if connection pooling is used (default) · Issue #1244 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm writing non-blocking HTTP proxy server and faced with the issue: after several benchmark iterations my server stop handling requests. As I see pooled connections are in CLOSE_WAIT state (according to netstat) which means that remote server has closed them, but vert.x http client still keeps them for sending data. I suppose when new request arrives vert.x acquires one of them to pass the request and then hangs.
The issue looks similar to #1218 but differs in closing connection trigger - my case is a remote server closes connection explicitly. I suppose that http client should close it in order and remove from pool.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1245
HttpClient metrics request lifecycle improvements · Issue #1245 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Client request metrics callback in the metrics SPI:
when a request is enqueued in the connection manager
when it gets the client connection
when a request time outs
that would allow the metrics SPI implementation to report client statistics like connection pool dimensions, request queuing statistics, etc.....
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1246
Add worker thread pool metrics · Issue #1246 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add to the metrics SPI details about the current worker pool.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1247
Deadlock if the connection is still being used while HttpClient is closing · Issue #1247 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This happens in Vert.x 3.2. In thread 5717, we hold the lock on HttpClientImpl.close (lock #1) and then we try to acquire a lock on ClientConnection.close (lock #2). In thread 7035, we hold a lock #2 in ClientConnection.handleClosed and try to hold a lock #1 at HttpClientImpl.checkClosed. And boom, we get a deadlock.
I don't have a good repro now since it's quite hard to reproduce consistently. But I can demonstrate from the stack trace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1248
Shared instance of HttpClient is not guaranteed to be executed in the same thread · Issue #1248 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This does not behave as I expected where the callback of HttpClient called inside event loop is not guaranteed to be called back in the same event loop due to the connection from another event loop is reused in another event loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1250
Support connection close header in HttpClient · Issue #1250 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1251
HTTP server incorrectly responds HTTP/1.0 to 1.0 clients · Issue #1251 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I send an HTTP/1.0 request to a (Ceylon) Vert.x http server with Vert.x 3.2.0 like
However the response version should indicate the capabilities of the server. Since Vert.x supports 1.1 as well it should instead respond with:
This way the client becomes aware that the server also supports HTTP/1.1. It does not however change the semantics of the response - the server still has to send a response that complies with HTTP/1.0 semantics since the client has indicated the maximum version it can use.
The only required change to implement this is thus to always write "HTTP/1.1" in the response. All the logic on setting response headers and closing connections etc should work as before, i.e. use the version from the request to decide semantics.
Some references for more information:
format of a message and its capacity for understanding further HTTP communication"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1252
Live Redeploy option is not working · Issue #1252 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying out vert.x 3.2.0, the live redeploy option appears to be broken:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1253
Update redeploy documentation · Issue #1253 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Eclipse need the launcher-class
It should give a complete example with Gradle and Maven.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1255
Add an ability to name Vert.x instance · Issue #1255 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is useful when dealing with unit tests that involve multiple vert.x especially if the name is used as part of the threads created by vert.x
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1256
A call to routingContext.request().netSocket().isSsl() make the verticle to stop accepting new connections · Issue #1256 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a route that tries to retrieve if the request is an http or https request.
The call the isSsl seems to stop the verticle to accept any new http request.
I use Vert.x 3.2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1257
Exclude codegen.json from final vertx-core binary · Issue #1257 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to utilize vertx-codegen to generate code, somehow it always picks up codegen from vertx-core instead of my own's. Would be great if you guys can just move it out of final release
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1258
Fat-JAR-Error: on unpackFromJarURL with whitespaces in the path of windows filepath · Issue #1258 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This happens in Vert.x 3.2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1261
Provide  a way to force request state to become 'ended' after invoking response.end() · Issue #1261 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I know this is a tricky subject, but the problem is real. Here is my scenario. I'm implementing an API method that allows the client to update a server resource with a new content PROVIDED the resource is already known on the server. A nice way of doing it is to have the client wait for 100-Continue before sending in the update stream itself which can be quite large.  Since the URL contains the resource ID the server can look it up first, and only if exists signal the client to proceed. However, if the resource does not exist, the server would reply with an error status and the client would not send the update. The connection can remain open and ready for the next request.
However, with vert.x this is apparently not possible...
Here is what I'm doing at a bit lower level:
In httpserverconfig I use handle100ContinueAutomatically = false
Upon receiving request, the server extracts the resource ID from the URL and checks for the resource availability status.
then proceed with setting up request handler as usual.
What I see:
In the case of resource being available, everything works as expected.
In the case of resource being not available, the connection becomes unusable and all subsequent client requests arriving on that connection simply time out. In that state, the following is what I see in my log (in my code I log these states after invoking "request.end()"):
This clearly shows that request is not 'ended' since really the client did not send any data expecting 100-continue but instead getting 404 (btw, I'm using standard apache http client and it behaves flawlessly in the scenario above)
This may lead to a bigger question: perhaps the right answer is to expose 'drainAndEnd ()' method on the request to ensure that nothing remains in the request pipeline and forcing the end state? Http/2 has this feature built-in.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1262
Enable adding netty logging handler to log HTTP requests/responses (for debugging) · Issue #1262 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Those who ever needed to debug Netty know that LoggingHandler is one of the first instruments.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1264
HttpClient connection should not be reused for a request when there is an on-going request · Issue #1264 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1266
HttpClient sharing clarifications and warns · Issue #1266 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An HttpClient should not be shared between different Verticles or Context. It should be documented and when the client detects a different context, it should print a warn on the console to make the user aware of this situation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1268
How we can check if Verticle sends Message successfully or not??? · Issue #1268 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have 2 Verticles :a sender and a receive.Sometimes - with sending-receiving first message ,i see that My Receive can not  handle first message -but ok with all other messages after it.So i have 2 assumptions: i have sent message when Receive haven't deployed completed ,or Message didn't send successfully.How can i fix it???
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1270
DefaultExceptionHandler for HttpClient · Issue #1270 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add a new option for HttpClientOptions where we should set a DefaultExceptionHandler for all HttpClientRequest created by that HttpClient.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1272
HttpClientRequest endHandler() is confusing · Issue #1272 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
endHandler callback handler is not called when the HttpClientRequest.end() is called. However, it is called when it receives a HttpClientResponse which is quite unexpected. And worse, it is also called after the handler for HttpClientRequest.handler(Handler<HttpClientResponse>) being called. I would expected it to be called when the entire data has been written to.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1273
MessageProducer.writeQueueFull always returns `true` · Issue #1273 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current implementation of this method in MessageProducerImpl will always return a value of true.    At least for my use case it would be preferable if it returned true only if the producer is out of credit and has started to place messages in its pending queue.  It looks like this may have been the intent (since the code checks the pending queue size), but the check is current pending.size() >= 0 when I think it should be pending.size() > 0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1275
Encryption for EventBus · Issue #1275 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Initial ticket: Encryption for EventBus #574:
For being able to run a vertx-cluster on a LAN, where other nodes are present (they should not be able to read the event bus communication) encryption for the server node traffic is necessary.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1277
remove hazelcast workaround (or at least the comment, that indicate it as a workaround) · Issue #1277 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
Issue hazelcast/hazelcast#5220 had been closed in October, we should upgrade to the latest stable build 3.5.4 (http://hazelcast.org/download/ ) .
and then we can remove the workaround here:
kind regards
Gabriel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1280
SLF4j logging arguments ignored · Issue #1280 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Logging with SLF4J enabled does not use all the log arguments.
for example:
outputs:
instead of expected output:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1283
JsonObject mergeIn function lost value  · Issue #1283 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mergeIn function overwrite previos value of JsonObject.
for example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1286
JsonArray.remove(int pos) should return JsonArray or JsonObject instead of their underlying implementations · Issue #1286 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current implementation returns / leaks a java.util.ArrayList<?> in case of a JsonArray or a Map in case of a JsonObject. It should check for these implementations and return a JsonArray or JsonObject wrapper.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1289
Worker verticle cannot synchronously wait for EventBus.send even when using additional workpool thread · Issue #1289 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The general idea is:
execute in an worker verticle
instantiate a countdown latch
wait for countdown latch.
From my observations the eventbus.send finish execution however nothing happens on the eventbus. The target does not get any message.
I tracked a bit the problem inside EventBus.send and it leads me to HazelcastAsyncMultiMap.get implementation which does an executeBlocking which is ordered with the caller.
The body of execute blocking in HazelcastAsyncMultiMap.get is never executed.
This is strange however because the eventbus.send is executed by another worker thread than the caller.
Is this the expected behavior? Seems to me like a problem.
Some code:
Sorry but the project is not compileable as a standalone but you can just copy this class. Will notify when i make the project work as a standalone project.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1290
HttpClient *Now could be an Handler<>> instead of simple handler · Issue #1290 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1292
JsonObject is loosing key order after being deserialized from the eventbus (vertx.eventbus()) · Issue #1292 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi I write the below code
The key order is not retaining in the json object got from the message body. Please fix this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1293
Add HAProxyMessageDecoder option to HttpServerOptions · Issue #1293 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
WebSockets behind AWS Elastic Load Balancers will lose Client IP information since TCP load-balancing must be used instead of Layer 7 where it injects a HTTP header such as 'X-Forwarded-For'. In this environment and other similar load balanced environments the Proxy Protocol is used which was designed by HAProxy. Amazon AWS ELB supports it and is the recommended way of dealing with load-balancing WebSockets while retaining the Client IP and allowing the WebSocket connection to remain open indefinitely. Netty implements the decoder and is named HAProxyMessageDecoder. The dependency is netty-codec-haproxy. It would be ideal if HttpServerImpl could support this Decoder when setting up Netty internally as part of the ChannelInitializer. Perhaps it could be added as a flag on HttpServerOptions (i.e. boolean proxyProtocol). Essentially this option opens up the world of scalable load-balanced WebSocket servers with the simplicity of running just vert.x based HTTP server directly behind a cluster of load-balancers such as AWS ELB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1294
Use toArray(T[0]) where possible · Issue #1294 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sounds like an optimization we could have for free.
I took a look and can send a PR that's a very limited change (in core, at least). But @vietj pointed out we should have some microbenchmarks to rely on before doing such kind of things.
How should we do it ?
Proposal :
create a repo within the vertx organization holding benchmarks
initializing this repo with the benchmarking structure (using : jmh). So that layout is good to go
creating a very simple "sample" benchmark people can use as a pattern on to add new bechmarks
let the community add benchmarks through PRs
What do you guys think ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1295
Configure LogDelegateFactory through file · Issue #1295 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JULLogDelegateFactory can be configured through a system property and a file vertx-default-jul-logging.properties. I wonder if it would make sense to also make LoggerFactory configurable through the system property vertx.logger-delegate-factory-class-name as well as a file (probably called vertx-logger-factory.properties with a single property vertx.logger-delegate-factory-class-name) or through the Java service mechanism maybe.
This would make it easier to pre-configure the required logger by placing a file in the classpath. This would even work in a fat jar where system properties can only be set by the caller.
What do you think?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1296
io.vertx.core.Launcher doesn't launch launcher class · Issue #1296 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to run gradle-verticles example. I followed a README, but after build and run, no verticle listens on the port.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1298
FileResolver performance issue · Issue #1298 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Fatjar it creates perf issues when unpacking resources because it went from ZipFile#entries() (that is basically a lookup in the Zip dir structure) to ZipFileInputStream that performs a scan of the Zip file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1299
VertxImpl.deployVerticle combines asynchronous with synchronous completion · Issue #1299 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
deployVerticle can perform asynchronous computations.
Given the code below on error case the handler is called synchronously when closed is true.
My suggestion is to always invoke completionHandler asynchronously.
This would simplify caller code a lot if this method will always invoke the handler asynchronously. In this way the caller can embrace declarative style programming without having to worry about results coming synchronously while declarative code executes.
This should be applied to all APIs which might mix them.
I am trying to write this kind of code:
And because of the described problem i am forced to do the one below otherwise the AsyncJoin might be complete before onCompleted was registered and since is a declarative construct the order should not matter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1301
Rxfied Buffer.buffer(byte[] bytes) is not available · Issue #1301 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to user Rxfied Buffer.buffer(byte[] bytes) but it seems not available
Any alternative solution !?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1302
EventLoop thread blocked on Vertx.clusteredVertx() · Issue #1302 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx 3.2.1.
Sometimes EventLoop thread blocked on Vertx.clusteredVertx().
Method Vertx.clusteredVertx() called on the main java thread on application startup.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1307
ConcurrentModificationException from ConnectionManager.close · Issue #1307 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got this exception from HttpClient.close:
I'm guessing the problem is with the synchronization on the methods of the inner ConnectionQueue class that access the allConnections member:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1309
Throw a more specific exception from HazelCastClusterManager in case lock timout is reached · Issue #1309 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I would like to analyze the exception thrown when a failure to acquire the lock occurs.
I woul like to be sure it's due to a timeout.
Right now the only option is to check if the exception is a VertxException and if the message of the exception starts with "Timed out waiting to get lock".
It's a rather fragile solution to detect the timeout.
Could it be possible to throw a specific subclass instead to facilitate the exception handling?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1310
vertx start failes silently if a verticle doesn't exist · Issue #1310 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using the vertx command line loader you can start a verticle:
   vertx run phantom
and you will get:
Which doesn't indicate that phantom doesn't exist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1313
TCPSSLOptions: Some default values missing in Java doc · Issue #1313 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think these values was fetched from SocketDefaults earlier, which has now been removed
I guess it is really just the comments that need to be updated to include the default value
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1314
HttpClient metrics aggregation · Issue #1314 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using an option defined in the http client client for this purpose. See vert-x3/vertx-dropwizard-metrics#20 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1316
Error loading from classpath within .zip files · Issue #1316 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue description
I have found an issue with the vertx.fileSystem().readFile() function.
The function will fail if you try to load a file from the classpath and that file is stored inside a .zip file.
The problem is in the class io.vertx.core.impl.FileResolver. The method unpackFromJarURL() is assuming that the file will be always stored inside a .jar file:
The method will throw an ArrayIndexOutOfBoundsException if the file is stored inside a .zip file.
How to reproduce it
I have attached two files:
test.zip: Compressed file that implements a Vert.x service. It contains two files:
vertx-service-factory-3.2.1.zip: Official Vert.x Service Factories implementation, used for loading the above service. Note that the .zip extension is not relevant here. Renamed from .jar to .zip just for being able to upload the file here.
For reproducing the issue just download both files and introduced the following commands (Linux/Mac):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1318
Http server actual port · Issue #1318 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NetServer has an actualPort() that returns the current actual port, there could be the same for HttpServer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1320
Improve documentation of getClusterWideMap · Issue #1320 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are many aspects when going distributed which are missing from the documentation
"Get the cluster wide map with the specified name. The map is accessible to all nodes in the cluster and data put into the map from any node is visible to any other node."
More specific topics:
how much HA is in there (is the data replicated?)
are there situations when data can be lost?
how about performance?
how about split brain? How about concurrent updates in a split brain situation? How about merging of the split brain?
Incorrect documentation for put with a TTL.
It seems that the parameter is not a timeout but a TTL which does not match the comment below.
I assume the word timeout does not refer to the TTL in which case i assume there is some internal timeout to consider although not mentioned for other methods which take the completionHandler as parameter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1321
Add java.util.UUID support for JSON · Issue #1321 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using the JDBC client to query my database. Unfortunately, I'm also using java.util.UUIDs which the vert.x JSON abstraction does not support. Converting it to a String does not work because the DB expect a UUID.
Is it possible/allowed to extend the supported datatypes? I've read that jackson supports UUIDs out-of-the-box. I hope that this will fix my problem.
Cheers,
Paul
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1323
Reuse existing connections for the HttpClient · Issue #1323 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the ConnectionManager used by the HttpClientImpl, it is only polling the first connection and if it is closed, creates a new one. Should it try to empty the queue first ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1324
Extend cluster manager SPI to allow encryption configuration · Issue #1324 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Do it make sense to extend the cluster manager SPI to allow enforcing the cluster manager security (encryption) by API / option.
See #1275 (comment).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1325
Add processing hooks in the clustered event bus · Issue #1325 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue proposes to add "hooks" in the clustered event bus to intercept the messages just before they are written on the wire, and just after they have been read from the wire.
It would allow customizing the binary format or apply message-based encryption.
See #1275 for more details.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1326
DatagramSocket.close() does't decrease metrics counter. · Issue #1326 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DatagramSocket.close(handler) call metrics.close()
This cause "vertx.datagram.sockets" (and i think other socket counting metrics) to show wrong data
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1327
Direct Scala support needs revival · Issue #1327 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Support for Scala as a first class citizen has gotten left behind in recent times.  It needs a champion (or four) to help it regain entry back to full citizenship.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1328
Config should not be printed to log when JSON cannot be parsed · Issue #1328 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the entire config file (passed to -conf) will be printed to the log if it cannot be correctly parsed as a JSON object on vertx startup. Since the config potentially can contain sensitive information that you don't want printed in a log this is not a good default.
I suggest vertx don't print the content of the config, rather just an error message telling that the config cannot be parsed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1329
Peer certificate chain cannot be retrieved after NetSocket TLS upgrade · Issue #1329 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1330
Raw WebSocket (via /websocket) always returns binary (instead of text) · Issue #1330 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a simple sockjs echo server written with vertx using sockJS.write(Buffer.buffer(msg)) where msg is a String. Now, on the client side, if I use sockJS client, then the onmessage gives me an echo String. However, when I use websocket and connect to /websocket, then the echo is a blob instead.
I tested with ws://echo.websocket.org  and they echo a String instead of a blob. Shouldn't vertx behave in the same way?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1331
How to start one module after another · Issue #1331 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i need to send a message from second to module first when module second starting, so i need first  module to start before second, How is it possible?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1332
Get the number of available threads in the worker pool from the vertx object · Issue #1332 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would be nice to fine tune vert.x to know the number of available threads in the worker pool. I would me helpful for me to understand a bottleneck in a system.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1333
Get the number of execute blocking code waiting for a worker thread to be available · Issue #1333 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would help me to identify a bottleneck.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1336
Need MongoDB Client to support ReadPreference at the Operation level. · Issue #1336 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MongoDB supports the WriteConcern and ReadPreference at the DB, Collection, and Operation level.
The setting at the operation level overwrites the setting at the Collection level which overwrites the setting at the DB level.
The current Vertx MongoDB Client supports the WriteConcern at the DB, Collection and Operation level.
For Write operation, one can use the *WithOption() methods to specify the writeConcern. This is the operation level of WriteConcern which overwrites the collection and DB setting of the MongoClient.
Foe Query operation, one is limited to the readpreference setting when the MongoClient is created. To use different ReadPreference, one needs to create another MongoClient with different readPreference.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1338
Add method for setVerifyHost on NetClientOptions · Issue #1338 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently you can only set the verifyHost for HttpClientOptions.
You should be able to set this option when using the NetClient as well.
We should be able to reuse the HTTPS identification algorithm that is already in place in the SslHelper class
if the host is passed to the createSslHandler() in NetClientImpl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1339
Additional HTTP methods support · Issue #1339 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x 2 had support for any extended HTTP method as methods are accepted as String. Vert.x has now limited itself to work only with standard HTTP methods and this has been a limitation for our application to migrate to Vert.x 3.
As per the discussion with @vietj , it is expected in 3.3. Adding this issue for tracking convenience.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1342
Improve HttpServerMetrics SPI to include url pattern · Issue #1342 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the http server metrics passes the received url to the metrics provider implementation.
R requestBegin(S socketMetric, HttpServerRequest request);
However for monitoring purposes this leads to an explosion of monitoring statistics.
It would be interesting if vertx could pass the associated router that matches the url requested so the
url pattern can be used for monitoring purposes.
Suppose I have a router defined that matches urls of the type:
Where I visualize my monitoring metrics I don't want to see:
This will generate too many lines in monitoring tools.
I would like to be able to get access to the path so I can get something like this:
In order to make this possible the matching route needs to be passed to the beginRequest method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1343
Websocket deadlock during handshake · Issue #1343 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1345
Nested zip tests fails on Windows · Issue #1345 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Failed tests:
reported by @FainTMako on Window 7
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1346
Default command specified in Main-Command MANIFEST entry not run if no Main-Verticle entry · Issue #1346 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vext.x version 3.2.1
In VerxCommandLauncher line 378 there is check for verticle != null only then getDefaultCommand() executed. But may be we not needed any vehicles in manifest at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1347
Null Pointer returned in ConnectionBase.writeChannel · Issue #1347 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've just seen a null-pointer exception when our very simple http server below is serving files. Nothing special.
I traced back the Null Pointer to ConnectionBase.writeChannel
There is a wierd case that is returning a null, can someone suggest a reason this is done and why it would reach this code?
More of a philosophical question, why is the null returned? Surely this means a large amount of null checking and fragile code ?
Maybe there should be an exception?
Note this has not changed in the main branch since 3.2.0
Note the IP stuff has been taken out for NDA reasons.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1348
Add "computeIf*" methods to LocalMap interface · Issue #1348 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These are very useful additions to the Java Map interface which it would be nice to see added to LocalMap (they greatly simplify concurrent population of the map).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1349
Clustered deserialization of a JsonObject within a JsonArray ends up a LinkedHashMap · Issue #1349 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A tweak to the JsonArrayTest.testClusterSerializable() seen here reproduces the issue. Here is an example:
This was an issue for us because we frequently use the underlying List instead of the JsonArray and getting a JsonObject from that list would always work in our non-clustered dev environment. After clustering we experienced some intermittent issues where we would get random java.util.LinkedHashMap cannot be cast to io.vertx.core.json.JsonObject exceptions.
You can work around it by using JsonArray.getJsonObject or converting the LinkedHashMap to a JsonObject but it was definitely hard to track down since it didn't happen in our non-clustered environment.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1355
Deadlock between ClientConnection and HttpClientRequestImpl · Issue #1355 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
After a week attached to our load balancer which does a simple poll to one of our rest end points (we have no other traffic right now) all 4 machines (4 instances) end up in deadlock and had to be "kill -9"ed , which  in theory brought down our whole DC. Since we are in testing stages this was not a big problem but I imagine to most it would be a bit hair raising.
Also looking at the traffic it seems our load-balancer (a cisco content switch with ACE module) sends a request gets the response then resets the connection. I believe this behaviour is causing the deadlock, since this is important for us to go live I will try create a test to replicate this behaviour.
This was running 3.2.0 code (Ive seen no fixes in 3.2.1) and using JVM 1.8_74 on RHEL 6.5
Here is the jstack information.
Debugger attached successfully.
Server compiler detected.
Deadlock Detection:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1358
Remove HttpClientImpl#close method synchronization · Issue #1358 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1361
Support HttpClient access to https via proxy · Issue #1361 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running applications in a network that does not have direct internet access but have e.g. a squid proxy, it is currently not possible to access https urls, since that requires a CONNECT tunnel request to the proxy, upgradeToSsl and then a http request to the origin server on the NetSocket.
It is also necessary to enable Proxy authentication for the CONNECT request since the proxy might require that, which is a different account/password than authentication on the origin site.
the section explaining the CONNECT method, but that is a bit brief: https
an example request flow is the following:
client connects to proxy.example.com:3128
server replies with http response
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1368
Would like ability to query for timer status using ID · Issue #1368 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to be able to find out from vertx if it thinks a given timer is active using its ID.
Something like:
Extra credit if instead of just a boolean it returns the number of milliseconds until the timer is due to fire.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1369
AsyncFile.flush bug? · Issue #1369 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like AsyncFile.flush does not ensure that the entire data is written out before calling FileChannel.force(). It should have waited until the outstanding write has been flushed before calling FileChannel.force()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1373
Implementation of Future.completer() · Issue #1373 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The else block of the completer() method does not make sense to me. It calls failed() on AsyncResult which returns a boolean indicating if the result failed or not. If the else block had been omitted altogether, the result of completer() would have been the same.
I was expecting the else block to mark the future as failed.
Am I missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1375
Vertx.clusteredVertx() handler not called if cannot bind to address · Issue #1375 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When starting clustered vetx instance:
if it cannot bind to the address it prints the exception:
and the result handler is never called.
The problem seems to be in io.vertx.core.impl.VertxImpl.createAndStartEventBus() where only error is logged and the resultHandler is not called:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1377
Add support for automatic verticle redeployment in HA mode on CTRL-C or kill SIGTERM · Issue #1377 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HA mode the documentation states the following: "Please note that cleanly closing a Vert.x instance will not cause failover to occur, e.g.CTRL-C or kill -SIGINT"
Can this behavior become a user setting allowing to choose if CTRL-C or kill -SIGINT induces a failover or not?
I have the following use case: At some point in time I want to do maintenance on my Vert.x nodes by taking them offline in a round robin fashion. I am running a verticle that is receiving messages on the event bus that are being storied in an ElasticSearch database using bulk inserts. These bulk inserts run in a separate thread that needs to be stopped cleanly otherwise I run the risk that some events will not be stored. Since executing kill -SIGTERM simply kills the process my custom shutdown hook for finalizing the bulk inserts is not called introducing the risk of data loss.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1379
Feature: disable blocked thread warnings until application is started · Issue #1379 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Following the "golden rule" during application startup and initialization may be unimportant.  Therefore please provide a way to disable warnings until application is fully deployed and started.
The reason I am requesting this is because my company has a large vert.x 2 ruby application (ported from rails/sinatra) that is being upgraded to vert.x 3.  We do a lot of pre-loading during application startup, and it would be difficult to make all of that asynchronous or wrapped with execute_blocking.  We're getting the multiple warnings and large stacktrace during application startup.
But during application startup, I don't mind blocking the event loop, because there's no other work the application could be doing that's being blocked.  Once verticles are started and accepting requests, I do want to see the warnings.
Therefore, I'd like to have some mechanism to disable event loop warnings/stacktraces until the application has been fully deployed.
A few ideas for how this could be done:
Add more general disableBlockedThreadWarnings and enableBlockedThreadWarnings methods to Vertx.  Those would call new setter on BlockedThreadChecker to set value on a final AtomicBoolean.  Within the timer task run() method, check value before logging.  I like this solution the best.
Add a ready() (for example) method to Vertx, along with a new option to disable warnings until ready() is called.  Less flexible, but same effect during application startup.
Extract the 4 options that affect this (blockedThreadCheckInterval, maxEventLoopExecuteTime, maxWorkerExecuteTime, warningExceptionTime) into their own class, and provide a static instance with defaults.  Provide a way to replace the instance at runtime.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1380
CompositeFuture.any handler not called on success · Issue #1380 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CompositeFuture.any(f1, f2).setHandler(handler)
The handler is not called when f2 or f2 succeeds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1382
Fix Message Producer · Issue #1382 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
We forget to add credit header in MessageProducer when we set it with deliveryOptions.
As a result the drain handler will never be call.
Modification:
Add credit header when we set delivery options.
Result:
The drain handler will be call in every situation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1383
Possible NPE in VertxImpl::deployVerticle · Issue #1383 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This method is called with null argument for completionHandler by at least 2 other VertxImpl methods. However, there is no check for null when calling completionHandler when Vertx is closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1385
Precondition check in EventBusImpl.addInterceptor/-removeInterceptor · Issue #1385 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to handle this kind of error during registration:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1386
Support waiting for event bus replies in worker threads · Issue #1386 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In case where a worker thread is used to run a a business function, it would be useful if the worker could communicate with existing vertices in a blocking fashion.
Here's an example where a result from a reply handler is received (via an event thread) and passed to the worker thread (which calls the proposed vertx.runOnEventLoop method)
runOnEventLoop would use any available event thread to run the lambda and then wait for the future to complete (and there might be variant with a timeout).
The dangers with respect to concurrency are somewhat limited: Control of runOnEventLoop only returns when the provided future is complete, so the original worker thread can't change state while it waits for the result.
However, the lambda calling future.complete could change state afterwards, which is potentially a bad thing.
Advantages:
From the perspective of the worker thread it remains trivial to maintain state in a single-threaded fashion. There's no need to declare it a multi-threaded worker verticle, which would also look drastically different.
the worker thread can participate in message exchanges on the event bus
Disadvantages:
no guarantee that the event code can't change state in the worker thread after future.complete has been called.
Implementation:
This has been implemented using a secondary thread pool (a work stealing executor).
Those short-lived threads are used to pass the torch to an existing (or newly created) event loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1387
CompositeFutureImpl's all and any methods silently fail when composing >32 Futures · Issue #1387 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Because a primitive int value is used as the flag to compute the composite status of all the component futures, and because an arbitrary number of futures can be passed using the variants that accept an arbitrarily-sized List, if a List with more than 32 Futures is passed in, the implementations will not function correctly and issue no errors.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1389
Vertx instances are not garbaged in LauncherTest · Issue #1389 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The various tests in LauncherTest create Vertx instances (in commands) which are not garbaged.
The Vert.x instances should be cleaned up as the underlying file descriptors needs to be garbaged.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1395
Problem with getting netSocket() in the middle. · Issue #1395 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got this exception from time to time when trying to call HttpClientResponse#netSocket() while the data is streaming using Vert.x 3.2.1. I cannot create a consistent reproduction yet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1396
calling HttpClientResponse.netSocket().close() does not remove the connection from the pool · Issue #1396 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I want to terminate the request early, I made a call to  HttpClientResponse.netSocket().close(). It seems to close the connection properly but it never seems to remove the connection from the pool. It eventually cause the connection pool to exhaust. I will try to find whether it's easy to create a repro.
It looks like createNetSocket() does not hook closeHandler(). Therefore, when a connection is closed, the connection manager never removes it from the connection queue and thus the connection leak without having a connection lying around.
@vietj What do you think?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1398
javax.net.ssl.SSLHandshakeException although setTrustAll is true · Issue #1398 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My vertx client cannot connect to an HTTP server via TLS. The server delivers a trusted certificate and the client does not trust the server, because the client connects to the server using "localhost". In my case it works as expected because client and server are running on the same machine and the certificate is trusted for a different domain name (other than "localhost"). Therefore I tried to solve the problem using the easiest solution first:
But this leads to the following exception:
I expect that httpClientOptions.setTrustAll(true); makes the client trust both untrusted certificates and trusted certificates which get delivered from a different domain name than the certificate is targeted for.
Yet I haven't tried other solutions like adding the server certificate to the truststore of the client or to change the virtual host file of the OS to simulate that the client connects to a domainserver. (Hint: My router doesn't support NAT Loopbacks). But why does setTrustAll not work as expected?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1400
Add support for error reason (+reason text) in ServerWebsocket::close · Issue #1400 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
WebSocket spec defines optional reason codes and text when closing a websocket connection: https://tools.ietf.org/html/rfc6455#section-5.5.1
ServerWebSocket however just provides a simple close() method without any parameters (internally Nettys new CloseWebSocketFrame(1000, null) will be called). Also websocket client's closeHandler has no way to access reason data. Please provide support for that, as we need to signal the client the concrete close reason!
In the meanwhile: Is there any simple way to hook into the close process and override the reason code?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1401
Vert.x command line tools/launcher should return an error code when a failure occurs · Issue #1401 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All Vert.x command line operations currently always return a "0" exit value, even if it is known the command did not run successful.
For automated deployment tooling (e.g. puppet scripts) it is very useful to return a non-zero exit value. This will allow tooling to check the exit value, stop executing when one command fails, and provide better feedback on which step a failure occurs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1402
The Vert.x "stop" command should check if native operations complete successful · Issue #1402 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Vert.x stop command currently does not check if the underlying native commands complete successful. E.g. when the "kill" process fails due to a "Operation not permitted" failure, the vertx stop command does not report this problem. Instead, it reports the Vert.x application has been stopped (but it would likely still be running).
Native commands executed during the stop command should be checked for the exit value. When a failure occurs, any output of native processes should be shown in the vertx command process output to get more feedback on why the command did not run successful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1406
Incorrect test: ClusteredEventBusTest.testDefaultCodecReplyExceptionSubclass · Issue #1406 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Test ClusteredEventBusTest.testDefaultCodecReplyExceptionSubclass is incorrect because event can be sent before consumer will be registered on all nodes of the cluster.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1409
Missing Test for AsyncMap<X,Buffer> in ClusterWideMapTest.java · Issue #1409 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ClusterWideMapTest.java don't have test method for AsyncMap<X,Buffer>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1410
move MimeMapping to a public package · Issue #1410 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1411
on-redeploy="cmd args" fails on windows · Issue #1411 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The on-redeploy switch on Windows fails with (for example):
Error while executing the on-redeploy command : 'gradlew classes'
java.io.IOException: Cannot run program ""gradlew classes"": CreateProcess error=2, The system cannot find the file specified
This happens with any command that has arguments (e.g. 'classes' or 'shadowJar' for gradlew). I tried to pass only gradlew, without arguments, but this also fails unless I specify the extension as well gradlew.bat. Funny enough, executables can be passed with or without extension (e.g. java OR java.exe) but always without arguments (java -version fails similarly to gradlew classes)
I believe the problem is in how the command string is built in io.vertx.core.impl.launcher.commands.Watcher.executeUserCommand line 268
Either the cmd string should be passed as is into the ProcessBuilder OR it should be added to the command list similarly to how it is done for non-Windows systems, i.e. prepending cmd /c ...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1415
redeploy="ant_pattern" incorrectly checks path in Windows · Issue #1415 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As it is right now, passing something like --redeploy="src/**/*.java" has no effect on Windows machines, i.e. no file is ever matched against this pattern since the pattern tokenizer fails to break the pattern into tokens due to the fact that / is not a file separator on Windows.
Rather than modifying either the tokenizer or the matching algorithm, a possible solution would be to store the patterns () after converting between *nix and Windows file separator char, if needed.
I believe a better solution would be to enforce a file separator char on the pattern, i.e. refuse to accept something like --redeploy="src\**\*.java", only accept path patterns separated by / and then replace this with the correct OS file separator, if needed.
Ant has / as its default file separator character but allows you to change it. I don't think this is necessary. An "enforce and convert" should be all that is needed in this case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1416
Http client metrics missing @<id> · Issue #1416 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using Vert.x 3.2.1 and according to "https" the id should match "vertx.http.clients.@" (e.g. vertx.http.clients.@3b773558.get-requests.max), but it is "vertx.http.clients." (e.g. vertx.http.get-requests.max).
Was this change on purpose?
If yes, documentation should be updated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1423
PostgreSql json datatype · Issue #1423 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there!
Here is an example of calling a function with a json data type parameter: https
If I use text data type instead of json it works well.
Could you please add support for this type?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1425
vertx run xxxx.groovy,chinease chars will be garbled,but java file is OK · Issue #1425 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Succeeded in deploying verticle
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1426
Future.failedFuture returns successful future if cause is null · Issue #1426 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A question from our team:
Should Future.failedFuture always return a failed future?
At present failedFuture(null) returns a succeeded future.
Agree that we should never call failedFuture with null, but it can happen by accident ... and depending on the complexity of the system, finding the root cause can take some time.
Also perhaps, calling Future.fail(null) should really set the cause to NoStackTraceThrowable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1427
multiple verticle instances as REST service with routingContext.next() · Issue #1427 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I have a problem possible bug with multiple deployed instances of a verticle that is used as a REST endpoint. The service will receive every request and sanitize the payload. Then the next matching route (router.next()) will be called.
The Sanitizer verticle do something like this:
this.router.post("/*").handler(routingContext -> { // do something routingContext.next(); }
This Sanitizer verticle is deployed several times:
deploymentOptions.setInstances(5); this.vertx.deployVerticle(verticleName, deploymentOptions);
We use for all verticles the same router to go through all matching routes with routingContext.next(). For every request our Sanitizer is called, but it is called 5 times because it is deployed 5 times. Vert.x didn't notice, that´s the same verticle which is called multiple times. I want that the Sanitizer verticle is only called once and then the next route (e.g. /test/test).
Is this a bug in vert.x or should I handle the router in a different way?
Example of verticle (The Runner.mainRouter is initialized once in Runner class):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1428
Solver - Logging with Slf4J not working for io.vertx.core.impl.ContextImp · Issue #1428 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I have some problems with the logging of vertx. When using the default logging framework everything works fine. But when using SLF4J with logback some of vertx loggins don't appear in the log.
The class 'io.vertx.core.impl.ContextImpl' (line 338 of vertx 3.2.1) logs if an error occurred but this log entry never appears in the log file. The reason so far is unknown.
Could you please have a look? Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1430
CompositeFuture.all/any fails for 1 single fail · Issue #1430 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there:
We just encounter a problem and it is difficult to reproduce.
For example, if we use Future future = Future.future(); and then send the http request
and if one of the request fails very fast like got connection refused instantly
and then we set the future.fails(url+" request failed");
and then interesting thing is
CompositeFuture.all(...)/any(...) method some times execute without receiving other responses.
the difficulty of reproduce is not every time it happens, but happened in few tests
Our guess is when one of the future fails and it successfully registered in the compositeFuture and the other future has not registered successfully yet, thus the size of compositeFuture list/set is only 1 and the only 1 fails then the rest would fail also, not sure about the logic but it happens
We will continue test this problem and maybe later submit our code
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1432
Allow to set the metrics factory programmatically on MetricsOptions · Issue #1432 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
like the ClusterManager on VertxOptions
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1433
HttpClient fails when response is chunked, but no body is sent · Issue #1433 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using HttpClient to invoke a third party REST API. Using a curl on the resource in question gives the following:
Vert.x doesn't like the combination of chunked and "no content", which can be reproduced with the test below:
The following exception is thrown.
Switching setChunked to false fixes the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1436
vert.x could support socket.io · Issue #1436 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vert.x could support socket.io?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1437
Service loading of VerticleFactory does not work with mvn exec:java · Issue #1437 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The service loading of VerticleFactory's does not work when starting Vert.x with Maven's exec:java target. When using the ServiceVerticleFactory the verticles are not started as a service but as a regular verticles. This means that the service descriptor is ignored (without any warning) and the worker verticles are started as non-worker verticles instead (resulting in blocking event threads).
A quick fix is to supply the correct class loader to the SeviceLoader in the DeploymentManager. I will open a PR for that.
PR: #1438
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1440
MimeMapping support for WOFF2 · Issue #1440 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the file MimeMapping.java has no support for the new top level type "font" thus no support for WOFF2 files. Regarding the specification the mime type for woff2 should be "font/woff2".
This leads to a some parsing exception in chrome for example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1449
StopCommand issue on Windows · Issue #1449 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On Windows the stop command can match multiple process when the vertx.id is similar.
e.g. In case of the two running processes: 'app' and 'app-2'.
the command 'stop app' will stop both of them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1451
HttpServerRequestImpl.handleEnd() should catch endHandler.handle() exceptions · Issue #1451 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The body handler I set on an HttpServerRequest threw an exception.  I expected the request's exception handler to be called, but it was not.  This is with Vert.x 3.2.1.  The stack includes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1452
ClassNotFound when io.netty.handler.proxy is not included for the proxy functions · Issue #1452 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The proxy code tries to catch a NoClassDefFoundError when the optional proxy handler jar is not included in the pom, but it still gives a NoClassDefFoundError.
To check the issue, I have created a small verticle project with fatjar that uses the proxy, which gives the following exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1453
Only one certificate used in TLS handshake when using PemKeyCertOptions · Issue #1453 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you have a keystore file with certificate chain and you create NetServer and use setKeyStoreOptions(JksOptions) option, then the whole certificate chain will be sent to the client during TLS handshake.
If you have a pem file with certificate chain and you create NetServer and use setPemKeyCertOptions(PemKeyCertOptions) option, then only the first certificate in the chain will be sent to the client during TLS handshake.
The same problem exists in Vertx 3.3.0 and also when you use OpenSSL engine (setSslEngine(SSLEngine.OPENSSL) option). And when using OpenSSL engine there is no alternative because it requires PemKeyCertOptions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1461
Inaccessible client's certificate when using OPENSSL engine · Issue #1461 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Little backstory...
Due to reasons our server requires client authentication during TLS handshake and accepts self-signed certificates. In order to make it work on Vertx we are forced to do an ugly hack with getDeclaredField() and setAccessible() in order to set SSLHelper.trustAll to true for NetServer object. This works and after accepting a connection we use peerCertificateChain() to get client's certificate and we do stuff with it.
It stopped working with SSLEngine.OPENSSL, we get SSLPeerUnverifiedException instead. The problem is surely in Netty but maybe also in Vertx.
Returns:
an ordered array of peer certificates, with the peer's own certificate first followed by any certificate authorities.
But when Netty is configured to use OpenSSL engine, getPeerCertificateChain() returns only certificate authorities (getPeerCertificates() works correctly). In our case, peerCertificateChain() from NetSocket calls SSLSession.getPeerCertificateChain(), there are no certificate authorities (because self-signed certificate) and SSLPeerUnverifiedException is thrown.
So it is clearly a bug in Netty, but in getPeerCertificateChain() documentation there is also this:
Note: this method exists for compatibility with previous releases. New applications should use getPeerCertificates() instead.
And Vertx doesn't provide anything that would call SSLSession.getPeerCertificates() (which, as I mentioned, works correctly).
BTW: it surely would be nice to get rid of the hack I mentioned at the beginning. Any chances to have setTrustAll() in NetServerOptions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1462
Support map entry adder in data object converters · Issue #1462 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1463
vertx-rx-java - Unnecessary wrapping of handlers while invoking setters on delegate · Issue #1463 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While consuming vertx-rx-java, I see that handlers set on delegate are wrapped objects of input parameters. This seems to pose two issues -
The input parameters in rxjava as well as core packages are of io.vertx.core.Handler type. Still, in rxjava package, we wrap it to the same type through constructor before passing it to delegate. This creates unnecessary objects.
If null is passed as a parameter to rxjava package, it results in NPE in core package.
My use case expects to wait for some data to arrive from an external source and write it to client. I register to drain handler when I have excess amount of data and write queue gets full. When I do not have data to write (as I wait for my source to send some), drain events make no sense and I unregister by setting drain handler to null. Though my overall functionality is not impacted, there are NPEs thrown from vertx and additional objects are created.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1465
Pump does not handle end of stream · Issue #1465 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here's the code of the Pump :
I think this method should have the following last line in order to handle the end of the reading stream :
rs.endHandler(v -> ws.end());
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1466
Deadlock in ServerConnection / HttpClientRequestImpl · Issue #1466 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use an HttpClient per thread, and this just happened.
Found one Java-level deadlock:
Java stack information for the threads listed above:
There is a chance that it's just a glitch, we had some weird behaviour, two instances launched instead of one or something...
Also, this code looks a bit dangerous (io.vertx.core.http.impl.HttpClientRequestImpl#getLock):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1468
eventBus publisher should have a publish method · Issue #1468 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It was slightly confusing when i used the eventBus to create publisher.
I had code that looked like this
but the publisher did not have the "publish" method (the write method does the correct function though).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1469
HttpClientMetrics#createEndpoint may be called multiple times for the same endpoint · Issue #1469 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of io.vertx.core.http.impl.ConnectionManager.QueueManager#getConnQueue can lead to HttpClientMetrics#createEndpoint being called multiple times for the same endpoint if different threads try to use a fresh HTTP client:
HttpClientMetrics#createEndpoint is called from the ConnQueue constructor so a single instance of ConnQueue must be created if none is in the map.
Otherwise SPI implementations my leak resources acquired in #createEndpoint as #closeEndpoint would never be called for the corresponding queue instance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1471
tls protocol error logs message · Issue #1471 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The content if the buffer should not be logged
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1472
launcher can't be subclassed as described in documentation · Issue #1472 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
there are actually two separate issues:
io.vertx.core.Launcher's main method is implemented as
and therefore Launcher can't be effectively subclassed and customized - the instance created will be always of the parent class and not of hte implementation.
io.vertx.core.Launcher provides some methods that can be used by Launchers subclasses, e.g. afterConfigParsed(), beforeStartingVertx(), beforeDeployingVerticle() and so on. it seems that none of these methods is implemented in launcher flow.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1473
Json.decodeValue() hangs up when unknown attribute is present · Issue #1473 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to decode { "payload":"hello" } into a POJO class with just a single attribute String message (and its public getter and setter).
Instead of an exception, the method never returns.
Tried with vertx 3.2.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1474
java.lang.ClassCastException when removing a keyset of Shareable entities of a ConcurrentSharedMap · Issue #1474 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version used:
Vert.x 2.1.6
Java 8
I'm trying to clear the cache using vert.x shared data and I get an exception.
Knowing that:
keySet returns a Set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.
My KeyCache class implements Shareable and override equals and hashcode for 2 private String.
Exception:
And I think there is another issue, because if I am using a String as a key of the SharedMap, and if I want to clear it, I have to do it one by one using the Map:remove(Object key), if I use Collection:removeIf(Predicate<? super E> filter), it does not work, see example below:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1475
DNS search domains resolution · Issue #1475 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Implements DNS search domains for the AddressResolver
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1477
Add SNI support · Issue #1477 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Maybe I just can't find the options for enabling SNI, but I think it is not supported.
It is already supported in netty and I found an example for it:
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1478
Unfinished Futures? · Issue #1478 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When result() is called it simply returns the member variable.  Documentation says this:
Is there anything that guarantees the future has completed before the result is returned?  Am I missing something about how this works?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1479
AddressResolver should not bind locally · Issue #1479 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current AddressResolver binds locally a DatagramChannel which is not necessary (and not always permitted) via the DnsNameResolver implementation.
The bind is used to obtain a channel and it is possible to create a DatagramChannel directly without the need to bind. The method newChannel in DnsNameResolver can be changed from:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1480
Metric "vertx.eventbus.messages.pending" can contain incorrect value. · Issue #1480 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 3.3.0
In the case where a handler is removed after a message is sent, but before it is received then the pending count can be incremented, but not decremented.  Consider the following sequence:
A message is delivered locally and a handler is found at line 366 in EventBusImpl.java.  This increments the pending count metric and calls deliverToHandler.  When the runOnContext block is scheduled it is determined that the handler has been removed at line 498 and so the message is never actually processed.  As a result the pending count is never decremented making is seem like there are pending messages when in fact there aren't.
This happens most often with the "credit" handler which is installed to receive the credit based flow control messages.  It is often the case that the hander gets removed because the producer has been closed, but the consumer on the other side doesn't know this and sends the credit update.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1481
OpenSSL KeyManagerFactory support · Issue #1481 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when available from Netty:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1482
java.lang.ClassCastException: java.lang.Long cannot be cast to [Lio.vertx.redis.impl.Reply; · Issue #1482 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sometimes, will throw exception like that , and then, can not receive the reply. :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1483
any chance for Jackson 2.5+ on vertx 2.x? · Issue #1483 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a relatively large application based on vertx 2.1.6 which is not worth the effort for updating to vertx 3. however due to some problems we need to have Jackson at least 2.5+ as dependency. but it seems that vertx forces Jackson 2.2.2 no matter how we packages the module.
currently we are packing everything as fat Jar and vertx puts Jackson 2.2.2 in its lib/ and loads it even when Jackson 2.7.4 is present under mods/module-name/lib.
Is there any way to change this behaviour and to force using newer Jackson versions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1484
MQ-based ClusteredEventBus support · Issue #1484 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes we want to persist the event into the MQ to avoid it being lost in some special cases. For example, if the Vert.x node crushed, the unhandled events in this node will be lost.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1486
Allow AsyncFile's to be opened in append mode · Issue #1486 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Appending to a file requires three steps:
Open the file with FileSystem.open() with an OpenOptions object on which setTruncateExisting(false) and setWrite(true) have been called.
Get the file properties with FileSystem.props()
Call setWritePos() on the file with the length according to the properties.
It seems like a simpler and less error-prone way would be to add setAppend() and getAppend() to OpenOptions and make AsyncFileImpl's constructor translate it to StandardOpenOption.APPEND.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1487
SEVERE: java.io.IOException: An existing connection was forcibly closed by the remote host · Issue #1487 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On the server side (vertx), I have (earlier, setChunked is set to true)
The client prints "Cool stuff" as desired.  However, when the client exits, I get this error on the server
When I use HttpURLConnection instead of OkHttp, I still get the same error. Could someone please help?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1489
Proxy based http connections do not throw Proxy errors · Issue #1489 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Http Client requesting via web proxy does not throw errors from the proxy server.
Reproducer:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1491
Preserve order of enabled cipher suites and protocols for TCPSSLOptions · Issue #1491 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently we use HashSet for storing the suites and protocols.
Ordering set when building the options should be respected in the options and when creating the ssl engine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1494
Let the user access the logger delegate and logger implementation · Issue #1494 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This has been discussed on the mailing list. A user wants to be able to reconfigure some loggers programatically after the logging SPI has been initialized.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1496
H2C direct duplicate IdleStateHandler when using idle timeout · Issue #1496 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1498
Implement HTTP Proxy for non SSL HttpClient · Issue #1498 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the moment the HttpClient proxy configuration uses CONNECT for non SSL HttpClient and instead it should do a straight connection with a target requestURI, i.e
should be equivalent to:
so we do have request like:
the client connects to the-proxy host.
Note: this does not affect NetClient that will always continue to create a tunnel using CONNECT
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1500
NoClassDefFoundError netty: ChannelMatchers & ByteBufUtil$HexUtil · Issue #1500 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get a NoClassDefFoundError when stopping a small application:
I am using the maven-shade-plugin to build  a fat jar.
Any guidance on this is highly appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1502
DeliveryOptions should have a toJson() method · Issue #1502 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While the toJson() method on a data object is optional IMHO the 'vertx-provided' data objects should be feature-complete by default and contain this method.
Also when referring to the service-proxies documentation (section on Proxy creation):
Generally, service interface contains a createProxy static method to create the proxy. But this is not required
But then this code leads to an error in code generation:
If agreeing with this change, I'll create a PR.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1503
HttpClient - Netty - unhandled exceptions halt program when using proxy · Issue #1503 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I'm enjoying the new implementation of socks proxy support in vertx but it looks like I'm not able to handle a few exceptions related to io with the proxy server.
I get that when using an invalid proxy.
I was also getting another exception in netty that I cannot reproduce right now. It was a unhandled netty exception coming from the channel pipeline.
I'm looking for a fix that would allow me to put my own exception handlers on the pipeline for netty through vertx.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1504
HTTP/1.x keepalive connections don't clear the paused buffers at end · Issue #1504 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
In the latest releases of Vertx, 3.3.1 and 3.3.0, the pausedChunk is now stored in ClientConnection. We see an issue with this when re-using an HttpClient and pausing to read the response. The pausedChunk will continue to get appended to with each new response body once the client hits its maxPoolSize and starts re-using connections. Before this didn't happen when it was stored on the HttpClientResponse.
Is this intentional, meaning that an HttpClient is not meant to be re-used for pausing and reading multiple response bodies?
We created a simple runnable fat jar that demonstrates this here.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1505
Play 2.5.4 + vertx 3.3.0 error on startup · Issue #1505 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello Vert.x,
I'm getting an error when I'm running play service with vertx 3.3.0
If  I remove vertx dependency, Play service running fine.
I didn't have this problem with vertx 3.2.1
Thanks,
Effi
Here is the exception stack trace
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1506
Multivalued server cookies should be seen as a single semi colon separated header · Issue #1506 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cross posted issue
I apologize, initially i posted this to vertx-web, as i suspected the issue was in  CookieHandler code, but now I'm sure the issue is in vertx core code, as http headers parsing is done by vertx-core
Version
Context
If a client got multiple cookies to send in a request, and ALPN is on and the request is issued with HTTP/2, the vert.x server cannot read correctly the cookie header nor the CookieHandler works fine.
It gets just one Cookie of many (a random one as they're sent in random order by browser as per specs)
This is due to the fact that Http/2 sends cookies in multiple COOKIE headers and not anymore in a single semicolon separated field.
Please add conversion in a single ; separated header using Netty's  HttpConversionUtil as Netty's  has already provided that solution to this issue, see: netty/netty#4457
Steps to reproduce
Enable HTTPS and ALPN on a Vert.x server
Use latest version of google chrome and ensure you're negotiating http/2 (e.g. check with 'http/2 and spdy indicator extension')
Using the 'cookie inspector extension' or whatever, add some cookie name-value pairs to simulate a request with multiple cookies set
Refresh the test page and debug if you can get all the test cookie pairs at server using a CookieHandler or with a raw logger.info("All headers "+  new JsonArray(request.headers().entries()).encodePrettily());
You'll get just 1 cookie of the many, if you repeat the request or delete some cookie you can have it in random rotation, but never more than one cookie  per request is readable to vert.x
Extra
This issue can cause authentication/session issues too
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1507
SSL Insecure Cipher Suites · Issue #1507 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please configure the default SSL settings to remove following cipher suites or give us some documentation on how to disable ciphers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1509
Missmatch between documentation and implementation for LocalMap · Issue #1509 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation of LocalMap states:
The map only allows immutable keys and values in the map, OR certain mutable objects such as {@link io.vertx.core.buffer.Buffer}
However the implementation in:
Has only a whitelist of allowed Types. Immutable objects are refused.
Not sure whether this is an implementation or documentation problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1510
Support for NPN and SPDY? (In addition to ALPN) · Issue #1510 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I know it's not so cool, now that http/2 has replaced spdy, but in some real cases advertising and supporting also the spdy protocol can give good benefits, as http/2 is not yet supported by many mobile browsers (my vertx apps are webapps accessed from mobile devices) especially android webviews.
The very same thing I'm asking for here, was just implemented by cloudflare for nginx, so you can agree... it can help in some real cases; check following post and the comments:
PS. SPDY and NPN are implemented by Netty, check SpdyServer.java example in netty repository.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1511
Proxying - Host header not formed properly · Issue #1511 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While proxying though the Vertx HTTP client, the Host header that goes as a part of CONNECT request (as only https targets are supported by Vert.x right now) is not appropriate as defined in the spec.
Host header should contain the host:port of the target server, but currently it is populated with that of proxy server. Thus, some proxy servers / web applications might dishonor the request due to this discrepancy.
Reproducer is hard to implement, but below should explain the problem.
Expected request at the proxy:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1512
ns.upgradeToSsl fails hostname cert check · Issue #1512 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When connecting with NetClient using upgradeToSsl (which is for example used in mail STARTTLS), the cert name is matched against the resolved ip address, which fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1514
FileResolver does not use vertx.disableFileCaching when using Eclipse · Issue #1514 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem:
Setting the environment vertx.disableFileCaching to true does not disable file caching.
Cause:
Environment:
Eclipse with dynamic reload:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1517
UnsupportedOperationException with unlocatable hosts config file · Issue #1517 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Thank you for taking your time to read my entry. Last night while work was being done on the environments, we got this error:
We suspect that it is due to the following:
In the AddressResolver class on line 109 (https) the parseSilently returns a Collections.emptyMap() as it probably has trouble finding the hosts file. Then, on line 115 (https) an attempt is made to put a value into this map, which is not a supported action.
So, the issue is caused by attempting to put a value in a map that does not support puts
Extra:
Vertx 3.2.1
I might have missed some information, if so, please request and I'll do my best to provide it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1518
WriteStream javadoc improvements · Issue #1518 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking at the API of WriteStream#drainHandler it says:
If the write queue is full, then the handler will be called when the write queue has been reduced to maxSize / 2
Implementations differ in the sense that they call it either only once the queue has been reduced or every time the queue has been reduced.
This looks suspicious to me and I wonder what is correct.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1519
ClusteredEventBus should log when it can't deliver a message to a remote · Issue #1519 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For debugging clustered event bus networking problems, it would be useful if ClusteredEventBus logged a message whenever it can't deliver a message.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1520
Using Netty 4.1's codecs from within Vert.x · Issue #1520 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty has a bunch of codecs (namely codec-smtp and codec-mqtt) which I'd like to use from within Vert.x. Is there any way I can plug them directly into a NetServer so that they encode/decode Buffers or do I have to "manually" handle encoding/decoding using these (which seems to be hard enough as encode/decode methods are protected inside final classes)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1521
Lock is not released in clustered vertx · Issue #1521 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I updated the Vertx version, this code stopped working:
It only executes the code at the first time, but the lock is not released. The execution reaches the release point. What can be the problem?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1522
StaticHandler, page Not Found · Issue #1522 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
at least from my point of view, strange  StaticHandler behavior observed.
Instead to serve "webroot/loginpage" file,
it calculated that it should serve "webroote" file.
In this use case I wanted to protect all static served files with username and password.
Of course i excluded  loginpage, loginhandler and logout routes from RedirectAuthHandler.
Please check code and logs below.
It looks that issue is in
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1523
DNS resolve problem when we pass a IP to NetClient.connect. · Issue #1523 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I meet a problem, the API doc said that "host can be a valid host name or IP address.". But when I pass a IP such as 1.2.3.4 in NetClient.connect, it still try to resolve this as a host name. When I use this method in a domain such as "company.com", NetClient.connect(80, "1.2.3.4", new FakeHandler()), it will connect failed and resolve the IP to "/1.2.3.4.company.com".
Could you help me?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1524
localhost resolve issue in Windows when using netty resolver · Issue #1524 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when using the netty resolver code (https)
the resolution of "localhost" does not have the hostname set in the InetAddr object so that getHostName() returns the ip address. This breaks some unit tests using localhost and expecting "localhost" as hostname (e.g. tls cert check).
I will create a netty issue for that, since their resolver code creates the object, but it would be good to implement a test and a fix inside vert.x as well, when the netty code is fixed, we can take out the fix in vert.x again (that mostly depends on what comes first, the next vert.x version or the next netty version and whether the netty people decide the fix is valid)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1525
Load the ndots value on linux from /etc/resolv.conf and allow a value of 0 · Issue #1525 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have issues to run a webserver connected to a redis server with Vert.x 3.3.2 in a docker environment. I get the following error:
It works perfectly with Vert.x 3.2.1.
I made a repoducer:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1527
Unexpected FileSystemException · Issue #1527 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today my iOS mobile browser Safari 9 produced a lot of mystifying requests to the same URL which produces the following stacktrace:
The exception occurs while executing the following line of code in WebserverAndSockJsServer.java:266
and it leads to an parsing error on Safari.
Any ideas why a lot of requests are producing this exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1528
No way to disable file caching in 3.3.2 · Issue #1528 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be no way to disable file caching.
has no effect. Using the vertx launcher with the following arguments
also has no effect. I'm having to restart the server each change.
I note issue #1514 and the fix but it seems like command switch should work even with a static initializer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1529
Vertx eventbus cluster issue - version 3.x (cluster host listen on all interfaces) · Issue #1529 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please note that i have gone through few of posts like
and few more. So this issue is not related to port being blocked by firewall...
Now coming to the issue if we use vertx as API and try to use it in cluster creating vertx object using
Vertx.clusteredVertx(options, handler)
Then if the cluster host is not set on the VertxOptions it defaults to "localhost" even if the cluster is enabled. Thus the only interface its listening on is localhost and two separate machines cannot send/publish messages to each other over eventbus.
If we want to listen on all interfaces and set clusterhost as "0.0.0.0" then too the eventbus send/publish is not working. The reason being in "ClusteredEventBus"
the "serrverId" is created with combination of host, port. On both the machines it would end up with same values ("0.0.0.0" : )
With this configuration when we do send/publish a message in ClusteredEventBus -> sendToSubs we have a check if the serverID is same as current nodes serverid
if (!sid.equals(serverID)) {  //We don't send to this node
This is true for as all nodes which have been configured with cluster host as "0.0.0.0". So the message would never be propagated to the remote host/nodes
May be we can use a unique ID auto generated or some other mechanism to get the "serverid" to keep it unique across a cluster configured to listen on all interfaces.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1531
Possible concurrency issue in Event Bus · Issue #1531 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like, there is possible concurrency issue in Event Bus, when we're adding and removing local registrations.
There is very very little possibility (but non 0), that when we're removing last handler in one thread and adding the new one for the same address in another, we can lost handlers list for that address.
Is this real issue or not, because of it's very little possibility, or I'm missing some additional synchronization?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1532
Overloads for CompositeFuture.all() and any() that collect results prior to completion  · Issue #1532 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed in this thread on the Vert.x forum there is a need for an additional set of overloaded static members of bothCompositeFuture.all() and CompositeFuture.any() that have the same behaviour, except that the composite feature completes when all of its constituent futures have completed (regardless of their outcome). The current behaviour has the composite future complete on the first success or failure.
The new method overloads have an additional parameter collectResults with a value of true.
The existing members will not be changed so as not to break backwards-compatibility and will defer to the composite future implementation with a default value of false for collectResults.
I will create a PR shortly that will implement this design and provide unit tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1535
Deadlock with HTTP proxy app · Issue #1535 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I've implemented a reverse HTTP proxy with vert.x-ceylon version 3.2.0. I have now several times found the app in deadlock state, after which it does not respond to new conncetion attempts anymore. Here is an example:
Found one Java-level deadlock:
Java stack information for the threads listed above:
The org.otherone.vhostproxy.vertx.MyPump class in the middle of both traces is a customized version of the standard PumpImpl class which adds just some logging after the write() call. It does not hold any locks when calling vert.x apis.
I strongly assume both threads are processing tasks related to the same request, since they lock against the same connection object, and in HTTP/1 only one response can be streaming data at once.
To me it seems the deadlock arises because in both HttpServerResponseImpl and HttpClientResponseImpl the methods involved in the deadlock all hold locks while calling both upstream and downstream methods. By downstream I mean the pump calling HttpServerResponseImpl.write() and HttpClientResponseImpl.resume(), and by upstream I mean HttpServerResponseImpl.handleDrained() and HttpClientResponseImpl.handleChunk() calling the pump.  The pump is located at the "top", coordinating traffic between two downstream connections. As can be seen all four vertx http methods hold or attempt to hold locks. Having written numerous proxy, router and gateway software products in the past I have learned that this locking model is not deadlock-safe. One robust solution to this is to decide on a locking model where locks are allowed to be held a) only while calling downstream code or b) only while calling upstream code. Locking-while-calling-downstream has seemed sensible to me so that's what I have used.
So if one would decide not to allow locks during upstream calls, the solution (where there is state that actually needs protection) is to introduce state instead. So for example HttpClientResponseImpl.handleChunk() that wants to deliver new stream data upstream, instead of doing (pseudocode):
Introducing state variables typically makes the classes more complex as they may need to check whether they are "in the middle of something", but this should avoid deadlocks as long as it is clear what is upstream and what downstream. And in case it is not, don't hold locks when calling other components at all and use state in all cases..
To further visualize what I'm trying to say here, here's before & after sequence diagrams - arrows towards the pump are upstream calls and arrows away from te pump are downstream calls:
I would be interested in hearing what you think. I am considering looking deeper into the HTTP classes and see if I can get some pull requests going myself..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1536
SystemD watchdog integration · Issue #1536 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice if the Vert.x participated with SystemD's status info (starting, started, successful vertical deployment, etc)
and watchdog functions (e.g. add a ping/handle event on the event loops to notify the watchdog, add hooks for the application to do additional checks [on watchdog ping function]),
It is easy to detect when a daemon is under the control of systemd, as certain environment variables are set, stating the location of a communication socket that can be written to, to notify the system of the process state.
This has an advantage with other external processes that can use systemd service status to determine the health of an instance (e.g. Linux-HA).
The systemd commands are listed here:
An example of interacting with the socket and configuration without pulling in this dependency is here:
See redisSupervisedSystemd
An example of watchdog (in config files and being consumed in python is here:
Discovering the ping interval
Pinging on the configured interval
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1538
RxHelper should have an api to use WorkerExecutor · Issue #1538 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since Vert.x 3.3 allready exposes  WorkerExecutor, RxHelper should have a convenient method to let RX to run on the custom workerexecutor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1539
WorkerExecutor should accept custom function to create ExecutorService · Issue #1539 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
WorkerExecutor should accept custom function to create ExecutorService. This will help customize the policy on the thread pool. For example, we might want to have a policy such that if the queue is full, it should reject the request rather than continuing to enqueue that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1541
Use unmodified hostname in exception about dns failure · Issue #1541 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
currently or with the new resolver code, the exception about dns failure mentions the hostname with a search suffix appended, e.g.
resolution of hostname.unknown.internal.mydomain.com failed, I this it would be better to put the original hostname from the resolver call into the error message
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1542
Documentation example on 'Async coordination' is incorrect · Issue #1542 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The code sample in the paragraph Async coordination in the Vert.x Core java manual seems to be incorrect:
The text below is referring to a different code structure. I haven't used this yet, but presumably it should be more like this:
If this is indeed how it should be I can create a PR.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1546
Flush after push promise · Issue #1546 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Push promise should trigger a flush. When serving the request we delay the flush after the request is handled to flush one time. Otherwise we flush after writing the push promise
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1553
BodyEndHandlers can be called after the full response has been read & flushed. · Issue #1553 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BodyEndHandlers registered on the HttpServerResponse can be executed on the EventLoop thread after the response has been wholly received.
This is not-consistent with what the javadocs have written
Add a handler that will be called just before the response body has been completely written. This gives you a hook where you can write any extra data to the response before it has ended when it will be too late.
Here is a test case that demonstrates this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1554
DatagramSocket should use unpooled buffers · Issue #1554 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DatagramSocket copies the direct buffer to an pooled heap buffer - it should use an unpooled heap buffer instead.
Workaround : use -Dio.netty.allocator.type=unpooled
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1555
CompositeFuture join method · Issue #1555 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This operation is like the CompositeFuture#all method, except that it always wait until all its futures are completed and will not fail as soon as one of its futures fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1558
Safe jackson module registration · Issue #1558 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently mapper and prettyMapper can be customized because they are public static fields but such customization can be a bit fragile (because of visibility issues) even if no concurrent modification happens.
I propose to add method Json.customize(Consumer<? super ObjectMapper> customizer) which will pass mapper and prettyMapper to customizer to allow user safe customization (like registering modules for e.g. guava serialization/deserialization) and either
make these field public volatile (to preserve backward compatibility for ones who modified mappers in these fields);
make them private volatile and provide accessors;
make them private, provide accessors and use them under syncronized/rwlock.
Also I propose register modules from com.fasterxml.jackson.databind.Module SPI by default for mapper and prettyMapper using ObjectMapper#findAndRegisterModules method.
If this proposal makes sence for project maintainers I can make pull requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1564
Remove KeyCertOptions limitation for OpenSSL · Issue #1564 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The previous version of OpenSSL engine was restricted to use pem file format.
Now the engine can use a generic KeyManagerFactory : netty/netty#5439
We can so support it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1568
Improve handling of exceptions thrown in Future handlers · Issue #1568 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my multi-developer Vert.x 3.x project it seems very easy to write code that doesn't handle exceptions well. I think that Vert.x could do better here.
I've attached an example of one of the common scenarios. The program invokes some method that returns a Future. This is often a method that accesses a database or other web service. In the example I call someAsyncMethod, which just sets a timer. The handler for the database or web service responses (the timer handler here) does some stuff and then completes the Future it returned earlier. However, due to a programming error or unexpected condition, the handler throws an exception.
In someAsyncMethod, I've anticipated that the timer handler may throw, so I catch any exception and fail the Future. If I don't do this, then any exception will propagate back to Vert.x, and the Future I returned from someAsyncMethod will never be completed. But the exception thrown from the caller's handler wounds up being caught by the catch block in the timer handler. It then tries to fail the Future. Since the Future is already completed, the call to fail throws IllegalStateException. That exception then masks the original exception. In production we see IllegalStateException in the log but have no idea what actually triggered it.
I've shown one possible solution in someOtherAsyncMethod. Here I move the call to complete outside the try block so that any exceptions thrown by the handler will propagate out of this handler. This at least produces the right message in the log. It's not easy to do consistently, though.
Another strategy would be to check whether or not the Future is already completed in the catch block, and do "something else" if it's already completed. But the "something else" would probably be just writing the exception to the log, so there's some record of what went wrong, or rethrowing it (this is what Future.compose does), which will ultimately return it to the Vert.x event loop. There's nothing else the handler can do because the future has already completed.
Some recommendations for how Vert.x could handle this situation better:
Don't allow exceptions to propagate from a handler to the method that completed the Future. The completing method can't possibly handle a random exception from the handler in any meaningful way. If a handler throws, Vert.x should treat that as an unrecoverable condition and just log it. Perhaps there could be option to install a global exception handler that would do something else.
Do something with the exception passed to Future.fail, even if the future is already completed. Either include it in the IllegalStateException that fail will throw, or just rethrow it directly, which seems to be the behavior recommend by Future.compose.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1569
Support local address for TCP clients · Issue #1569 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient should allow an option to specify the local ip address. This is useful for a machine with multiple ip addresses / network interfaces. It might want to communication to happen on a specific network interface. Another use case is for a HttpClient with a really high outbound fanout and slow response (i.e. web crawler). Without an ability to force the outgoing connection to share the same local ip address and port, it will be difficult to scale the number of requests on one machine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1570
netty resolver may get ipv6 addresses even when only ipv4 is available · Issue #1570 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Following up on this groups thread https, it is necessary to switch to the next netty version 4.1.5 when it becomes available to get fix for the issue that the resolver might get a ipv6 address even though only ipv4 is available and is unable to connect to the address. This behaviour is switched off by -Djava.net.preferIPv4Stack=true, which was not honoured by the new resolver in netty 4.1.
The netty issue for the issue is netty/netty#5657
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1571
HttpServerResponse.sendFile() returns status code 200 for non existing file · Issue #1571 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Usually I would expect a webserver to respond with status code 404 for a non existing resource. Today I noticed that sendFile("doesnotexists.js") returns 200 with content-length = 0 instead of 404.
Does it work as expected? Regarding the javadoc [1] there is no word about status codes.
Btw, does sendFile() really bypass the userspace when using SSL?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1572
Is it possible to get EventLoop for verticle by using open API only? · Issue #1572 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I need to get verticle's EventLoop to use it in netty-based library. I want to reuse it to avoid any issues with synchronization. I found only how to get EventLoopGroup but in this case this library will be executed on different EventLoop.
I found another way by using internal structure case ((ContextImpl) vertx.getOrCreateContext()).nettyEventLoop();
Is it possible to add this method to Context interface?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1573
Blocked thread warning when opening or closing an AsyncFile  · Issue #1573 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Users have reported blocked thread warning when opening or closing an AsyncFile.
Here are example stack traces:
and
One user provided more details and reported he was using a mapped Windows shared drive.
I have been able to reproduce the opening issue by a slow network filesystem (with twickle and nbd).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1575
ConnectionHolder should log when queuing messages · Issue #1575 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ConnectionHolder creates a queue and inserts messages bound for a remote host if it isn't connected.  It would be very useful it it logged debug messages when this happened.  It would also be exceptionally useful if it logged a warning for failed connection attempts to remote peers, including the attempted host/port.
Also, the queue appears to grow without bound.  It would be good to limit the size of the queue via a config entry, then stop queuing messages for that remote host once that limit is reached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1577
Close the shared worker pools when closing Vertx · Issue #1577 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1578
Rethrow the RejectedExecutionException when a worker task is rejected · Issue #1578 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
so the caller of executeBlocking is notified
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1580
Log a warn when the Connection header is used in HTTP/2 response headers · Issue #1580 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1581
File close is done from the wrong thread · Issue #1581 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Got this thread warning from time to time due to AsyncFileImpl.close is called from Vert.x event loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1586
Make JsonObject and JsonArray extend a common class · Issue #1586 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently both JsonObject and JsonArray are 2 completely independent classes, but they do share some method signatures. It could be beneficial to make both classes extend some common interface (for example JsonData).
The main shared methods that could belong to this common class are:
Adding this hierarchy, could enable users send/receive JsonData objects in/to the EventBus without the need for casting if any of these methods needs to be called.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1592
Bad documentation · Issue #1592 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In VertxOptions, DeploymentOptions, etc, the option to set the time seems to be documented inconsistently. Some of them are "ms". Some of them are "ns". (Even in the same method).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1595
[Question] Current approaches and best practices for Dependency Injection on VertX · Issue #1595 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello There,
looking in the documentation and searching i didn't find any current approaches nor best practices for Dependency Injection with vertx, so i'm asking here for advices i hope someone can share their knowledge and approaches about that subject.
Maybe explaining my current problem could help you understand why i have doubts.
Currently i'm developing an service for integration with an external third party service, that integration will be via REST api calls.
In the current design, i have a Service that 'll handle the communication with this third party service, doing the network call, and this Service has 2 more dependencies, that works fine with Dependency Injection, based on Google Guice, the problem is, to do the network call i need a vertx instance to create the HttpClient, and i'm doing this to inject it:
As you see, i'm sure that must have another way of doing it, because this approach i used is just for the sake of working, but i think maybe could have problems.
As you see on the binding, i use mongodb, i inject it in a class responsible for persisting the data, looks pretty weird too me too.
Could someone share their knowledge about it? How do you design your services / persistence modules to talk to vertx?
Thanks, and sorry for my english, if i failed somewhere.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1596
Using random port with HttpServer only works for first server. · Issue #1596 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to setup multiple HttpServer instances listening on different random ports in my application using the port 0 method.  The first one works, however subsequent ones do not and the actualPort() method reports 0.  The same technique used with NetServer works as expected with each instance reporting a random port in actualPort();
Using Clement's excellent starter app to reproduce.  Change the start method to
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1597
Consider setting a default value to the `Launcher-class` in the StartCommand · Issue #1597 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The default launcher class should be: io.core.vertx.Launcher. It would avoid passing --launcher-class="..." every time. This value should be overridden only in application using their own main class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1598
Asynchronous read/write done on wrong thread · Issue #1598 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The open/close issue has been addressed here #1573 . Async read/write still is blocking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


1600
There is no read method for Buffer. · Issue #1600 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ByteBuf has readInt()   readShort().
It's very convenient.
Buffer only has getInt() getShort() method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1601
NetSocket implementation can redeliver the same buffer when paused · Issue #1601 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current NetSocket implementation accumulates received data when it is paused and does not clear the pending data when it is resumed.
The pendingData field should be set to null when it is delivered to the application.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1602
NetClient with SOCKS Proxy checks wrong hostname on upgradeToSsl() · Issue #1602 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using a NetClient with SOCKS Proxy, the upgradeToSsl() checks the ssl cert against the name of the proxy, not the name of the target server.
I created a unit test that shows the issue by setting the proxy hostname to 127.0.0.1 and connecting to a server at localhost, this way it fails with "No subject alternative names matching IP address 127.0.0.1 found".
A unlikely usecase, however I got the error when trying to send a mail via smtp with starttls over TOR, which uses SOCKS5 to connect.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1603
Stop Methods Not Being Called on Exit · Issue #1603 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've made a simple test to figure out why none of my stop methods are getting called on exit (Ctrl-C from command line).
I don't get any error messages even though I've Log4J2 set to debug. I've disabled Log4J2 and same behavior. vertx.close() only works in this very simple example. On my 3 verticle (1 worker) actual app vertx.close() does nothing. Any ideas?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1605
Deprecate and @GenIgnore CompositeFuture#result(int) in favor of CompositeFuture#resultAt(int)  · Issue #1605 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1607
vertx don't instant sends messages while processing handlers! · Issue #1607 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that vertx only sends cluster messages when is idle (nothing to process).
That means while a vertx is very busy/active there is no messages dispatched to eventBus until the vertx becomes completely idle, that could be a big limitation if there is a need to send instant messages.
What is the solution to force vertx to instant send a message without waiting the need to be idle?
In order to demonstrate this issue, I have created two very simple verticles:
For these tests ping verticle is a worker verticle ([w-##] means vert.x-worker-thread-##), however it's not revenant if it's a standard verticle because both configurations are similar. Both ping and pong suffers from the reported issue and therefore the messages were stuck on eventBus until idle (nothing to process).
Note that If the ping used a multithread worker then the 1 second extra stuff wasn't noticed and the entire process was 1 second quicker (see ping code), however the pong continues suffering from the reported issue.
Test1 results: ping and pong are worker verticle:
What is the solution to force vertx to instant send a message without waiting the need to be idle?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1608
Expose io.vertx.core.http.impl.MimeMapping methods to public API · Issue #1608 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x http uses this class to figure mime, but this class is not accessible via public API. Would be nice to have the methods getMimeTypeForExtension and getMimeTypeForFilename accessible via public API too.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1610
Making coming release compatible with RxJava2 · Issue #1610 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
RxJava has just come out with one of the biggest release candidate which includes bug fixes cleanups and improvments they changed whole api with this it is now closer to Java 8 and I would like vertx to be compatible with coming releases of RxJava
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1613
Unable to load multiple client certificates into PEM trust store · Issue #1613 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I try to load multiple client certificates for client authentication, only one of the certificates gets loaded.
I have created pull request #1612 that should fix this issue. The certificates were all being loaded with the same name/alias into the keystore.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1614
Infinite skip of control characters in an http request (beyond size limits) · Issue #1614 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps:
have a web server
The connection is not dropped. An attacker could keep connection open and slowly stream control characters.
The problem is caused by: netty/netty#5796
however i am using Vert.x, that's why i also filed the bug here.
I think Vert.x could fix the problem by adding some new ChannelHandler in the function below.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1619
Too many log generation - LoadBalancer Heartbeat · Issue #1619 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Connection is reset by client before we could determine if it's HTTP 1 or 2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1621
Http Request stuck with malformed chunked encoding body · Issue #1621 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I issue a request with missing \r\n after a chunk length. This is never received by my handler and the connection is not closed immediately (as opposed to a valid request).
Code to try
i looked at the code a bit but i did not find exactly where is the chunked encoding handled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1622
Add client side support for intercepting idle peers. · Issue #1622 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
When working with the following configuration: HttpServer using SockJS and Eventbus with Javascript eventbus in Google Chrome.
Those are the steps to  enable idle peers disconnecting when timeout occurs:
Server:
This works great, the only problem is that when server detects idle and disconnects client it's impossible for server to know the reason it could be de to client closing the browser application or client is idle.
Required:
Add client-side support so client also recognize that it has been disconnected from server due to timeout.
Thank You!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1623
Support classpath root nested in JAR · Issue #1623 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the upstream issue for vert-x3/vertx-web#452 Allow templates to be loaded from classpath
Classpath root may be a folder inside a JAR, not the JAR itself.
For example, in Spring Boot, here's the list of root URLs:
... and so on with all libs
Note the jar root, as well as BOOT-INF/classes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1625
MessageConsumer close hook reports an IllegalStateException on the Context exception handler · Issue #1625 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since version 3.3.3 undeploying a Verticle which registered an event-bus handler throws the following exception:
The problem seems to occur on applying the close-hook on an EventBusImpl.HandlerEntry.
Here HandlerEntry.close() is invoked with a completionHandler, which is handled successfully twice.
The first time it is handled directly in HandlerEntry.close().
The second time it is handled through the chain:
Up until version 3.3.3 this wasn’t a problem, as the HandlerEntry.close() was supplied with an anonymous completionHandler, but since version 3.3.3 it is supplied with a FutureImpl which throws an exception if handled multiple times with a success state.
The following code sample will reproduce the problem:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1628
vertx.close() throws IlegalStateException: Result is already complete (since version 3.3.3) · Issue #1628 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unhandled exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1631
vertx (non clustered) don't instant sends messages while processing handlers! · Issue #1631 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that vertx in some cases doesn't send messages instantaneously.
That means while a vertx is very busy/active there is no messages dispatched to eventBus until the vertx becomes completely idle, that could be a big limitation if there is a need to send messages immediately.
For non clustered vertx, the issue happens when using vertx.executeBlocking (non ordered) or when processing default code in a Multi-Thread Worker.
To illustrate the issues, I created a simple ping pong example with junit tests.
Ping sends several messages to pong;
Pong emulates a 50ms processing time and reply back the message to ping.
Ping, in some cases, doesn't receive immediately the message after pong has processed it.
The tests includes two workarounds (while the fix is not available)  that solves the issue:
Test source code is available here: https (using vertx 3.3.3)
Note: There is also an identical issue but for clustered vertx: vert-x3/vertx-hazelcast#43
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1632
vertx close 3.3.3 · Issue #1632 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm getting this stack (multiple times) when closing vertx instance in 3.3.3. All is OK on version 3.3.2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1633
Context#executeBlocking does not log blocked threads · Issue #1633 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1634
Log4j2 impl does not support logging method name and line number properly · Issue #1634 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported on the groups https
the Log4j2 implementation does not log the method name and line number of the log statement, rather it logs  Log4j2LogDelegate.log():151 which is the log call in the log impl.
To fix this, it is necessary to provide the class name of the logger class and use logger.logMessage with ExtendedLoggerWrapper as described here https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1635
Limit the maximum number of connection per endpoint · Issue #1635 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x HTTP client should be able to limit the maximum number of connections per endpoint rather having only one global option for all connections (HttpClientOptions.setMaxPoolSize)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1637
JsonObject#getMap() differs for json from string or built by chaining multiple JsonObjects · Issue #1637 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I found some inconsistency in the underneath map of JsonObject. It looks to me as some inconsistency in how JsonObject builds underlying map.
Consider following scenario.
Given I have Json as string received from some source, e.g.:
I can build JsonObject and then get it as map. "my" object is represented as below in the map
However, if I add another object to that json programatically, such as: json.put("other", new JsonObject().put("some","data")); and then will get it again as map, then "other" is not represented as Map
If I'd use JsonObject methods to access any element in my json it would be fine. However, I'm doing this processing as explained above and finally convert it to Map as other elements of the system requires Map. However, current behavior is cumbersome, and when working with JsonObject by adding some new nested object I need literally use Maps to get consistency, I'd prefer to use JsonObject methods as they are fluent and more readable.
Below is very simple piece of code that you can see what I mean:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1638
RFC7230 compliance · Issue #1638 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice for Vertx HTTP Server to comply with RFC7230 in the following aspects:
A server MUST NOT send a Transfer-Encoding header field in any response with a status code of 1xx (Informational) or 204 (No Content).
A server MUST NOT send a Transfer-Encoding header field in
any 2xx (Successful) response to a CONNECT request
A server MUST NOT send a Content-Length header field in any response
with a status code of 1xx (Informational) or 204 (No Content).
A server MUST NOT send a Content-Length header field in any 2xx
(Successful) response to a CONNECT request (Section 4.3.6 of
Any response to a HEAD request and any response with a 1xx
(Informational), 204 (No Content), or 304 (Not Modified) status
code is always terminated by the first empty line after the
header fields, regardless of the header fields present in the
message, and thus cannot contain a message body.
when such cases happen and there is an attempt to write those headers or the data down, I think the request should fail to avoid unintentional breaking of the HTTP protocol
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1640
Apparent dual completion of future during event bus close hooks · Issue #1640 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Upon switching to 3.3.3 we are seeing a very high volume of the following exceptions in our test logs:
It seems easy to reproduce using a verticle that registers addresses on the bus and uses async shutdown.
Digging into the code a bit, I think I see the source of the problem:
When calling EventBusImpl.close here is the code that is run:
At this point completionHandler is a Future which will be passed to unregister and then completed successfully with the next statement.  However, the call to unregister eventually leads to an invocation of EventBusImpl.callCompletionHandler which has the following implementation:
So we queue an asynchronous execution of the hander with a successful result.  However, since completionHandler here is the same future that we we passed to close the net result is that the Future is completed twice.
This happens for every Verticle you have deployed, which is why we see so many of these in our logs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1641
Http2Headers result of entries() should not be cached  · Issue #1641 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If adding this test to Http2HeadersTest, it will fail
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1642
Improve HttpClientRequest reset support · Issue #1642 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently we support HttpClientRequest#reset() for HTTP/2 connections.
The support could be extended to:
It is useful for supporting reverse proxies implementations with Vert.x : when the client of the proxy sends an entity and something wrong happens (like an exception signed by the HttpServerRequest#exceptionHandler) the corresponding HttpClientRequest can be reset. For HTTP/2 it is natively supported, for HTTP/1.x this means closing the connection (and waiting for responses in case of pipelining). Having this behavior built-in the reset method for HTTP/1.1 makes easy to implement this for the proxy implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1643
Remove @Deprecated CompositeFuture#result(int) · Issue #1643 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1647
HTTP response status const · Issue #1647 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think it could very very useful to include a set of final static response status (Internal Server Error, Bad Request etc...) like you did in HttpHeaders and like it exists in HttpStatus by Apache Components.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1649
If HttpClientResponse exception handler throws, connection is not returned to pool · Issue #1649 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClientResponseImpl calls handleException when exceptions occur, in particular if the handleEnd method catches an exception thrown by the end handler. The handleException method invokes the exception handler if it's present. But if the exception handler throws, then that exception propagates up and aborts the handleResponseEnd method before that method can return the HTTP connection to the pool. After a number of such exceptions, all the connections in the pool are "in use" and the application is unable to obtain any more. This is a major issue because it's easy for the exception handler to throw. If the exception handler tries to complete a Future that is already completed, or send a response when a response has already been sent, it will throw.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1650
Expose executeBlocking() with custom executor · Issue #1650 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There should be an overloaded method for executeBlocking() which takes a generic executor. Currently, it is not possible since ContextImpl.setContext is not working non-Vert.x thread. If it is modified to work on non-Vert.x thread, it could expose this functionality. While #1539 could help that, this proposed change makes it much more flexible to use multiple thread pool to perform various tasks where it is quite inflexible with createSharedWorkerExecutor since it has a limited set of configurable parameters. In addition to that, this makes it easier for Vert.x to share worker threads with outside components.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1654
Ignore result on AsyncResult · Issue #1654 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Labels : Enhancement , Question
Yes, this sounds silly !!
An example should speak by itself :
Here we can't use future.completer() since listen's argument is Handler<AsyncResult<Integer>>. But sometimes (and this is the best example I have in mind), the result doesn't matter, what matters is "did it succeed or not ?".
What would be the best way to implement it in your opinion ?
Usage :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1656
WebSocketStreamImpl does not warn that it will ignore exceptionHandler and endHandler · Issue #1656 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I use webSocketStream(...) and I chain  exceptionHandler(...) after the handler(...) method, the exception handler will be ignored, as the connection is established immediately after handler(...) call. Here's an example:
Do you think it's reasonable if I create a PR with a state check whether a handler was already called? I think this way it's less misleading.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1657
EventLoopContext#executeFromIO fails when executed by Netty GlobalEventExecutor · Issue #1657 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When Netty uses its GlobalEventExecutor thread and propagates into Vertx, EventLoopContext#executeFromIO does not expect such thread and fails to execute the task:
for instance:
This can happen if the creation of a Bootstrap fails, in this case the promise is created with the GlobalEventExecutor (see AbstractBootstrap#initAndRegister())
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1658
Regression in Vert.x 3.3.x: when stopping Vert.x, the eventbus shutdown logs an error · Issue #1658 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When upgrading from Vert.x 3.2.0 to 3.3.3, we've been noticing that the following error is logged when shutting down Vert.x:
This happens when Vert.x is shut down, and an event bus has been started. When the event bus is stopped manually before shutting down Vert.x, the error is not thrown. The following test shows this difference in error logging only:
We are not sure what part of the code triggers the error, but it is introduced somewhere between 3.2.1 (does not occur) and 3.3.0 (first version when problem occurs).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1659
HttpClientRequest back pressure should apply immediately · Issue #1659 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current HttpClientRequest only apply when the request is connected, which potentially can buffer more than expected:
Before connecting it would be good to apply back-pressure and return true when pendingChunks.length() > pendingMaxSize.
Note: when the request obtains the connection, it should check it was not paused to call the drain handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1660
HttpServerResponse.sendFile blocks eventloop · Issue #1660 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling HttpServerResponse.sendFile produces the following exception:
Given there is no indication that this is blocking I did not expect the call to execute the write on the current thread. And given the documentation on the similar method says:
This seems to be inaccurate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1661
JsonObject.getByPath() (JsonPath implementation) · Issue #1661 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A lot of libraries offer the opportunity to use JsonPath to query json data. It's becoming quite a standard, like XPath, GPath, etc. (main inspiration for opening this issue comes from gatling)
In my opinion it could be a nice addition to the JsonObject / JsonArray implementations especially for testing (maybe for http clients, too).
Or even better
Relevant :
a Java implementation
a discussion in the Google Group
Questions before trying to give the implementation a try :
Do you think the feature is needed (if so, please upvote this issue) ? Or not.
Should we rely on a third-party library (and thus not reinvent the wheel but add a library to the fatJars, maybe not needed for a lot of clients).
mapping onto objects / typing may be very difficult : json.getByPath("$.items[*].id") will return a collection of Integers (or JsonArray ?) whereas json.getByPath("$.items[0]") will return a JsonObject : this might be very tricky
dealing with errors ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1663
LocalEventBus for sending thread-safe references implementing Sharable · Issue #1663 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First of - I'm am more than willing to code this myself through a pull-request. Question is only: has this been already discussed to death? Would there be any demand? Would this be in-line with your design?
Justification: Sending huge immutable/threadsafe objects over the EventBus is currently an unnecessary chore, both for the programmer himself, and the server (potentially introducing many irrelevant de/encodings and allocations). Simply allowing the programmer to declare "I hereby solemnly swear I know what I'm doing" by implementing a mixin interface, and enabling him/her to explicitly pass such a reference on a LocalEventBus (or predefined channel of the "normal" EventBus) would vanish the issue.
There already exists a LocalMap that accomplishes virtually the same effect, arguably in a much less "vertexy" way, resulting in less elegant APIs. So no new risks would be introduced, and due to the "opt-in" nature the programmer would have only himself to blame if hell freezes over ;)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1664
A composite future join should fail with the cause of one of its components · Issue #1664 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1665
-- · Issue #1665 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1666
RoutingContext getAsJsonObject throws exception · Issue #1666 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When sent a json object using some tools(like RestClient firefox) to server throw exception on convert body of request to jsonobject because json sent with some characters like "\n" and JsonObject can not convert this String to JsonObject but "org.json" has not this problem and can convert this string to JSONObject.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1672
We should be able to turn off useNormalisedPath by default · Issue #1672 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
useNormalisedPath should be able to be turned off by default (probably per Router basis). I find that we have to turn this feature off most of the time especially when we have to deal with wide range of inputs including special characters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1673
vertx HttpClient exception handler · Issue #1673 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Am using vertx 3.3.2.
httpClient.exceptionHandler is throwing compilation error.
Whether its removed in this version and how to handle connection exceptions.
Could anyone please help on this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1674
Support UNIX Domain Sockets in HttpClient · Issue #1674 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty already supports DomainSockets/DomainChannels, so I was hoping it might be possible to implement support (via HttpOptions/SocketOptions) to support UNIX Domain sockets (AF_UNIX)??? We do this quite often for secured APIs across docker containers. We mount the socket file as a volume in the container and then the different applications communicate via the UNIX Domain socket. We have also taken to communicating with the Docker daemon itself in this manner instead of exposing the Docker HTTP API.
My suggestion for implementation would be one of the following:
Add an overloaded method for Vertx.create(Net/Http)(Client/Server) which could take a "Path" object to point to the location for the UNIX domain socket..
Add logic to the Net/HTTP Client/Server implementations to parse a URL of the format "unix+http://" or "unix+socket://"
Probably many more questions to be answered, but that should be a good start.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1678
Move Cookie interface from Vert.x Web to core · Issue #1678 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cookies are not specific from the web framework and if one is doing a HTTP server just with core it would be nice not to re-invent the API.
I'd like to propose to move:
to core.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1679
RoutingContext getAsJsonObject throws exception · Issue #1679 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When send json to server using some plugins like restful client Firefox get this exception.
The problem is converting String to JsonObject. I test org.json.JSONObject and didn't get this exception.
The problem is by some characters like "\n" which will be added to json string in receiving in server side and JsonObject class can not convert to JsonObject but JSONObject didn't has this problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1680
Incorrect UDP source port in reply packet · Issue #1680 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I tried to develop a server receiving and sending UDP packets (see code snippet below). The issue is that the reply packets don't have the correct source port, that is, the port the server listens on.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1681
Upgrade to Netty 4.1.6.Final · Issue #1681 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1683
Vert.x websocket client doesn't set host header · Issue #1683 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Vert.x websocket client doesn't set a Host header. I'm not sure this can be considered a bug, but I do see other clients behaving different. This is a problem for most load balancer configurations which makes it bit of a usability issue.
A workaround is easy though by passing the header manually:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1687
HttpClient: Vert.x should default to port 443 when using https · Issue #1687 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi everybody!
When not specifying a Port - using the Vert.x websocket client - results in connecting to port 80 in both cases - http and https. I think it makes sense to default to port 443 on https connections.
Greets, Markus
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1689
OCSP Stapling (for improving HTTPS effective throughput and allow scalability) · Issue #1689 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cross posted on: netty/netty#5943
Please read this article:
Please focus on:
Our extension is a standalone library but we could equally well fold it into the netty-tcnative library itself. If there is interest, we can contribute it upstream as part of Netty’s next API-breaking development cycle.
hoping you'll show that there's interest!
Anyway it think in any case vert.x should wrap this feature ( once it's ready ) in the HttpServer implementation for this reason I'm opening a ticket also here...
And I hope also, that even if Netty will not show interest, VertX can do that, and embed that implementation itself...
It can reduce the ssl performance bottleneck that still require me to use nginx reverse proxy in front of some VertX as you know that even with tncnative we're not as good as nginx on https, maybe most of the bottleneck it's due to the missing ocsp stapling support, and it may be also a visibility opportunity for this project itself as letsencrypt can feature it too.
It's reactive!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1691
Does not get response by second request · Issue #1691 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I am trying to use vertx with rxjava in web router like:
The first request to the server, I've got the result Hello as expected. But further request to the server, I've got only sandwatch from the browser.
It seems to be, that is an error in vertx rxjava conversion.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1697
How to use the "Vert.x Command Line Interface API" · Issue #1697 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have read the doc, but I don't understand how to use the api, this is my code
I created a stage but where can I entering the command like "copy [-R] source target" to tell my program to do sth ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1699
Http2 not working from worker verticle · Issue #1699 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using HTTP_2 from a verticle deployed as a worker verticle causes an internal NullPointerException . The following code throws an exception unless
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1700
Allow tuning for gzip/deflate compression level (for performance) · Issue #1700 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Allowing Vert.Xers to cofigure their webserver deflater compression level.
Inspired by the nginx equivalent: http
Usage example:
Note:
Before this PR the .setCompressionSupported(true) was enabling the netty's HttpCompressor default compression level that is 6.
In my proposal i  set the default compression level to 1 (fastest, not the best size saver but anyway very good compression the modern web usage case (in my experience), less cpu cylce wasting, less http requests stucking in 'waiting state')
Why this PR?
Making vert.x flexible in this configuration too cause in order to demonstrate we have nothing to envy to other webservers like nginx ;)
Saving server resource usage (less cpu time for compression = more cpu time for the event loop, less overwarming ;) )
Reducing latency TTFB for static assets when compression is enabled
A bit more  rationale:
A best practice suggested by any moder site 'speed test' is to enable compression, but - as a drawback - enabling it we consume more cpu cycles at server end, and if we tune up it uncarefully we can end up - paradoxically - to get a worst time-to-first-Byte (TTFB) and even a worst total request time with compression enabled compared to no compression at all.
A best pratice to avoid such issue and achieve the better performance compromise, is to tune  compressor to do the 'bare minimal' work and don't overkillig, in other words, remembering that our target is reducing latency at the very minimum level and not really reducing 'file size'.
From my personal experience with nginx and apache too, and confirmed by many online guides, the best value for gzip compression level is 1 or 2 for a web server. Going higher that than just saves some bits, but pay back it hardly in server resource usages and processing latency (when compression is not cached but done on-the-fly)
Bonus: a further performance improvement can be to implement a compression cache layer in vertx but this is uncommon and complex also in other webservers so not a priority.
See also discussion on closed PR: #1576 (closed due to CLA and master branch  git commit history sync issues)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1702
Cannot delay HTTP response · Issue #1702 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've hit a subtle issue that doesn't allow me to delay a response to the client.
In the real code (this is a simplification) I'm using the RxJava extensions to wait for a particular condition before sending a response to the client, but the problem happen also with the following code.
The code above works perfectly if you comment the delay. When sending GET or POST requests to port 9000 the body is printed to the console (in the case of POST requests, I'm sending them using Postman) and the message "Hello World" is returned to the client.
If you just put a delay into the observable (any amount of time causes the problem), the issue appears:
The problem happens on the first GET request. If I send only POST requests, the problem happens on the second request, while the first works.
The offending line seems to be the one marked as "important" (i.e. reading the content of the request and logging it or doing anything else with it).
I think that this should be solved, but I'm looking also for a workaround (eg. is there a way to buffer the request content to be able to read it multiple times without errors?).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1707
Add an .editorconfig file in this repo? · Issue #1707 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We recommend that all repos should have a .editorconfig in the root folder with at least the following content:
Why not add it in the root of this repo, so forks can follow rules automatically?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1709
Disabled file caching and multi instance deployment leads to FileAccessException or FileSystemException · Issue #1709 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I made a reproducer using IntelliJ:
The exception looks like this:
Nov 10, 2016 12:58:28 PM node.StartupInstance
It means that vertx tries to access a cached filed which is currently blocked by some other process wherease file caching is disabled.
The reproducer shows that FileSystemException or FileAccessException occurs when the the WebServer gets deployed twice or more AND when file caching gets disabled AND when the program gets executed by IntelliJ or Eclipse IDE (by running the main() method of StartupInstance). Executing the fat-jar works without issues.
I tried to solve the issue without success. I changed my file permissions Windows 10 for the .vertx folder and I tried several changes in IntelliJ like disabling indexing, disabling auto compiling, disabling framework detection, adding filter paths for the compiler, cleaning the project, running IDEA as administrator, but nothing helped. I also tried to get information about the process blocking the file using the Sysinternals Process Explorer (procexp). But procexp didn't find any handle or dll for this file.
As the issue occurs only within the IDE there needs to be some influcence from the development environment to the .vertx folder. But the strange thing is that the issue disappears when I change the DeploymentOptions from 2 instances to 1 instance. The IDE cannot be the root cause anymore in my eyes.
Does the reproducer show the same issue on your IDE?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1711
JsonObject: add methods for type checking · Issue #1711 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, JsonObject has multiple getXXX methods for the basic data types (Integer, Long, String...).
There currently isn't a method to check whether a value holds the expected data type. It can be done by using above methods and catching the ClassCastException, but it seems better to provide methods like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1712
JsonObject#mergeIn does not merge recursively · Issue #1712 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One can argue about how to deal with lists, but I would also merge those.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1715
ClassCastException at ReflectionUtils.getComponentType · Issue #1715 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ClassCastException occurs during startup of my app. I'm using Vert.x 3.3.3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1718
Unable to start vert.x with exploded mode · Issue #1718 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running vert.x from CLI using command like:
The application is refusing to start saying no command by name org.vertx.demo.SimpleVerticle.. but when I do start with same set of options via Launcher.main(args)  form a custom main program from an IDE things run well.
Using vert.x v3.3.3
where $MY_CP is custom classpath which has jars/classes directory etc.,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1719
Request: Make the ending of the response in HttpServerRespone.sendFile() optional · Issue #1719 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would you see any problems in extending HttpServerResponse.sendFile() with a flag boolean autoEnd or similar that would allow one to do:
One would naturally have to take care of setting the Content-Length header oneself in this case.
Right now, sendFile() automatically ends the response and trying to write anything in the callback (rightfully) throws an exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1720
Socket idle-closed in middle of slowly progressing sendFile() response · Issue #1720 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried streaming music to a music player from vertx using sendFile(), but the connection is closed after the time given idleTimeout (I have 60 seconds) set in HttpServerOptions has passed after the request started.
I tracked the socket closing down and it seems this triggers the closing:
I guess some other piece of code forgets to mark the connection "busy" while sendFile is active..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1721
Incorrect HTTP-Version should be reported to the HttpClientRequest exceptionHandler · Issue #1721 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1722
Honoring Commandline Quotes during redeploy · Issue #1722 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When starting vert.x application using run with redeploy the arguments with quotes for the option values are treated literally without ignoring the quotes that are passed by the shell.
the redeploy patterns target/classes/**/* is parsed as literal string with " and application is not able to do the redeploy as needed.
The same command when run without quotes for --redeploy works as expected.
This could be a potential issue when passing paths with spaces or may be in some other scenarios.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1723
Stack overflow when undeploying · Issue #1723 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Happens sometimes
Some excerpt from the ConcurrentHashMap documentation:
Bear in mind that the results of aggregate status methods including
{@code size}, {@code isEmpty}, and {@code containsValue} are typically
useful only when a map is not undergoing concurrent updates in other threads.
Otherwise the results of these methods reflect transient states
that may be adequate for monitoring or estimation purposes, but not
for program control.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1724
Allow to configure maxInitialLineLength and maxHeaderSize in the HttpClient · Issue #1724 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
like we do have on HttpServer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1726
Too long initial line results in empty reply instead of 414 response · Issue #1726 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
If a request is made where the initial line is longer than the max initial line length, an empty reply is returned instead of a 414 response code.  Haven't even been able to find any particular way to implement this myself; best I've been able to do is register an exception handler on the HttpConnection to log it.
Do you have a reproducer?
Steps to reproduce
Run the main class in the gist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1727
Too long max headers results in empty reply instead of 400 response · Issue #1727 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1728
Default http server host and port configurable using system properties · Issue #1728 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1729
Add new CLI arg to support external JSON VertxOptions · Issue #1729 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When starting Vert.x applications with the CLI, you can't point to a JSON file for VertxOptions. This would be useful for users who need to set nested options (e.g, setting custom HTTP headers in Hawkular metrics options).
The launchers classes support a few nested objects, but not deeply nested ones.
As a workaround, Java/Groovy developers packaging apps in fat jars may extend the Launcher class and implement io.vertx.core.impl.launcher.VertxLifecycleHooks#beforeStartingVertx.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1730
ClusteredEventBus should provide Connection Exceptions back to the event bus sender · Issue #1730 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Network errors inevitably occur and it would be really helpful to see connection exceptions returned in the AsyncResult result cause. That way a retry could be attempted by the application writer (which if multiple nodes are available the round robin from subs.choose() will attempt a different node) or alerts could be elevated as appropriate. Currently the ConnectionHolder while calling connect() only calls close() on connection exceptions which doesn't provide any indication that there was a problem except the eventual ReplyException timeout, which really prevents a second attempt since the only indication a problem occurred is after the default 30 second timeout. Could the ConnectionHolder.connect method be modified to provide a way for the caller to reply to the Message if an exception occurred?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1731
Consult vert.x a multithreade problem · Issue #1731 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The program starts with 3 threads, the thread pool is set to 2, but the result is only two threads.
Program code is as follows：
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1734
Upgrade to Netty 4.1.8.Final · Issue #1734 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1736
Update boring SSL dependency to 1.1.33.Fork24 · Issue #1736 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1737
Vert.x Cluster Corrupt When 2 or More Members are Shutdown Ungracefully · Issue #1737 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the title suggests, it looks as though when 2 or more Vert.x instances are killed in an ungraceful manner (ie. SIGKILL instead of SIGINT/TERM), the list of active handlers becomes incorrect and the cluster is corrupt in such a way that is unrecoverable.  I'll start by providing a way to demonstrate the problem.
The way I have been reproducing this is by using the pointtopoint example provided in the Vert.x example
I edited the receiver slight to provide more information in the failure case.  It looks like this:
In all the following experiments, I am running 4 Receivers:
And a single Sender:
Gracefully stop 1 Receiver
In this case, I CTRL+C (or send a SIGINT) to a single Receiver.  In this case, the Sender continues to function normally and all is well
Gracefully stop 2+ Receivers
Using kill <PID> <PID> <PID> to kill multiple receivers gracefully at the same time.  In this case, all is well and the Sender continues to behave as expected.  You can see that the each Receiver is not stopped at the same time, but that upon receipt of the signal stops handling messages.  At no point does the Sender ever fail to have a message handled.
Ungracefully stop 1 Receiver
Using kill -9 <PID>, I kill one single Receiver.  Here you will notice that the Sender will receiver some timeouts in it's calls.  This presumably can be attributed to there being messages sent to the downed handler prior to the cluster recognizing that it is gone.  IMO, some failed calls in this case are probably expected as the cluster does recover once things have settled.
Ungracefully stop 2+ Receivers
Here is where the proverbial hits the fan.  In this case, I kill -9 <PID> <PID> <PID>.  At this point, it appears as though, undeterministically, what the remaining, clustered vertx process think remain versus what it is in the Hazelcast map is sometimes incorrect.  On occasion they are different and sometimes they are the same, but neither are ever correct.  You'll notice that the Sender begins to kill several calls.  This is because it still thinks that handlers that were just killed are still available.  Where it gets more interesting is that if I then check the contents of the Hazelcast map, it sometimes contains the now deleted handle endpoints, but on occasion will be entirely empty.  This means that without completely destroying and remaking the cluster, one cannot recover.  In a system that has many different services, this makes for some massive downtime.
It's worth noting that I do appreciate that kill -9 is a less than desirable thing to occur but the reality is that things do crash and that being able to recover from these crashes is crucial.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1738
Add Official Support For Kotlin · Issue #1738 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x supports some of the JVM languages. Support is missing for Kotlin, which is odd considering that Ceylon is already supported. Would be wise to provide support for Kotlin if Vert.x is going to target Android since Kotlin has a significant presence in Android development.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1739
Vertx Deadlock:  ServerConnection.handleClosed() v. SockJSSession.write() · Issue #1739 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This deadlock is happening on v3.2.1, however it appears that the same lock inversion problem exists on the current v3.3.3.   I will be trying to created a tiny, canned example to repro this soon, but because it involves a 'channel inactive' call I'm thinking this is far more of a timing issue instead of a connection/load issue.
Also, all locking here is OUTSIDE of our 'acme' code, and inside the vertx codebase.  From my understanding of these stack traces and the threading model, this essentially means that any SockJSSession.write() call (regardless of the thread it is called from) can deadlock with a 'ServerConnection.handleClose()' call.
some package names have been changed to 'acme' to protect the innocent:
Found 1 deadlock.
Heap
The only options we see right now to work around this are either (A) reducing the eventloop threadpool size to one, or (B) somehow acquiring and synchronizing on the appropriate ServerConnection instance BEFORE we make a SockJSSession.write() call.  This option (B) must be done before all calls to 'synchronized' SockJSSession methods, not just .write().
The  'bus bridge impl' that we are using is based on the impl at:
with minor modifications to support a 'PING' socket data message type.  The ping support just pokes some bean internal state, doesn't do any other socket read/write calls, and it independent of the above stack trace.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1740
Provide an insensitive case multimap implementation · Issue #1740 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1741
RecordParser implement ReadStream<Buffer> · Issue #1741 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
That way we can trivially pump files or other ReadStream sources through it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1742
File caching implementation not thread safe · Issue #1742 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The FileResolver implementation of caching is not thread safe. The problem occurs when the same file (that is about to be cached) is concurrently being read from multiple verticles. This issue can be reproduced with FileSystem#readFileBlocking, however, I believe that async implementation will yield similar results.
The problem here is the following. Consider a use case, when a file is read in multiple verticles in parallel. This file does not reside in a local filesystem, and as such Vert.x will try to cache the file by moving it to the .vertx directory.
First verticle that hits FileResolver#resolveFile will trigger the copying action of the resource to the designated .vertx cache directory. Only after this copy action is finished, the file will be read - thus this verticle will read complete data.
Every other instance that hits FileResolver#resolveFile will find the cached file during resolution - as the file is currently being copied over there - however, it might happen that it will read the cached file before it is copied completely - thus this verticle will read only partial data.
The problem can be reproduced by running supplied verticle in multiple instances. The verticle only reads 10 files from attached jar (all are 1MB in size) and outputs the size of read payload.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1745
Blocking code is executed in the one thread · Issue #1745 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My code:
Why blocking code is executed only in the one thread consequently?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1747
Message should have an acknowledge method · Issue #1747 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Message class has a fail method for signalling failure but there is no corresponding method to signal that processing suceeded.
When implementing a MessageConsumer for a Message Broker this is problematic as messages need to be individually acknowledged by the client code in order to implement transactional behaviour.
My current work-around is for handlers to cast the message to an implementation specific message:
Introducing an acknowledge() method on the Message interface would avoid the ugly typecast and to me it seems this should be of general interest for all message handling.
Other names are of course possible, e.g. succeed which would match fail or perhaps handled to indicate that the Handler handled the message.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1749
Traffic shaping support · Issue #1749 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there any support for traffic shaping (global or per urls)? For my needs would be enough to some how set netty GlobalTrafficShapingHandler, but I'm not able to find any way how to do it.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1750
Customization of Netty "initialBufferSize" · Issue #1750 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would it be possible to add a new configuration options in both HttpClient and HttpServer to allow to customize the initial size (128b default) of the parsing buffer of Netty HttpObjectDecoder.
I see that when handling an high load on my application with requests or responses with multiple headers, the CPU is mostly consumed by netty "AppendableCharSequence.append", which has to always grow and so has to copy char arrays.
Methods involved in vertx:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1751
Fragmented websocket frames sent to the SockJS bridge silently close the websocket connection · Issue #1751 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When SockJS messages are sent as fragmented websocket frames, the websocket connection is silently closed.
I post the issue here, because all data handlers of the ServerWebSocket are affected.
For the concrete problem see line 107 in the WebSocketTransport.java:
The listener (data handler) does not handle partial JSON messages and rejects them by closing the connection.
Further, the heuristic to detect a valid message might accept a partial message by chance.
Chrome already fragments messages < 3KB, making the bridge unreliable for our use-cases.
The pull request #964 offered a solution for this issue, but was declined because "... dataHandler should only be used for writing/receiving websocketframes if you know they're final binary frames".
This is not the case for the WebSocketTransport.WebSocketListener in vertx-web.
In general, data handlers do not have access to the underlying frames, they can only guess if the frame is a final or a continuation frame.
Could you please reconsider the mentioned pull request?
If it breaks existing code, I could rewrite the pull request to make the frame concatenation optional, e.g. by a configuration parameter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1752
DNSclient.lookup4 does not return the ip address when a CNAME is used · Issue #1752 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When resolving for example www.yahoo.com or www.msn.de, the result of DNSClient is a CNAME and not the final ip address. This is either caused by the number of consecutive dns operations are used up or only the first address is resolved in general.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1753
DNS issue when requesting `moose.rmq.cloudamqp.com` · Issue #1753 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current DNS resolver is unable to resolve: 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1755
DNS client making request to non-existent DNS port returns java.net.PortUnreachableException which has no detail message · Issue #1755 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1757
HttpClient leaves connection open on websocket request failure (resource leak) · Issue #1757 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running this code:
Then end result is WS Connection failed (as expected) but netstat -natp|grep :44444 (in Linux) shows the connection is still ESTABLISHED. Only closing the java process (naturally) gets rid of the connection.
I added the Connection: close header so that HttpClient wouldn't pool the connection and leave it open because of that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1758
IllegalStateException handling multi-part form files · Issue #1758 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a client that posts a multi-part form containing 3 file attachments to our Linux vert.x 3.3.3 HTTPServer.
The client uses keep-alive to perform a sequence of uploads over a single connection.
In the vast majority of uploads, everything performs as expected.
However, occasionally we get an IllegalStateException within the internal code that handles the form file attachments :
This failure occurs before our routing context handler is called, and therefore we appear unable to catch the exception and handle it better (like failing the context, for instance). Instead, the request hangs until the idleTimeout kicks in, and the request fails.
Looking in the "file-uploads" folder, the three files are present, and appear to be complete. And obviously, the files remain there (i.e. not cleaned up) as the process managing them has failed.
The error itself implies that an AsyncFile is being closed twice!
The issue only appears with one particular client of ours. All our other clients have not exhibited this behaviour.
Is there any way for us to catch and handle exceptions from there?
Running the test generates the exception consistently here. Out in the wilderness, the exception occurs fairly frequently (several times a day), which is somewhat of an issue for us.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1760
The Source with Vert.x binary releases are missing in 3.3.3 · Issue #1760 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1764
Performance penalty of localConsumer() when in -cluster mode · Issue #1764 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using vertx 3.3.3
There seems to be a performance penalty when using localConsumer() in clustered mode.
There is cases where you want to mix and match how various verticles are consumed. Some you may only want them as local and others clustered. So a localConsumer() should not incur any performance loss.
See conversation with Julien and Thomas here: https
The reproducer code...
Basically either run the code as:
Check the performance between the two commands.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1765
NullPointer in sendToSubs · Issue #1765 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cloned from vert-x3/vertx-hazelcast#52
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1768
When will Vertx add support for BKS keystore/truststore type ? · Issue #1768 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using Vertx in our project, I noticed it only supports JKS/PKCS12 format for TLS mode. We are using Bouncy Castle  keystore/truststore, can Vertx add support for BKS format?  If so,  how soon will it take to get in? Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1769
AsyncFile drain handler should not be called after the file is closed · Issue #1769 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1772
NullPointerException using ClusterManager with Vertx Groovy · Issue #1772 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was making some tests with Vertx, Groovy and Zookeeper, then I got a NullPointerException.
After check it out I realized where is the problem:
VertxOptionsConverter.fromJson
This method is used from groovy to parse the Map -> JsonObject -> VertxOptions, but it does not look for a clusterManager, so it is always null
But my question is: should it be really fixed inside VertxOptionsConverter? Since a JsonObject should be exactly how it sounds and does not contain any complex type?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1773
Need JsonObject(Object) constructor that builds a map from POJO fields · Issue #1773 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The standard way to serialize POJOs into a JsonObject seems to be
However, this is inefficient: it serializes the POJO to JSON, then deserializes it again when the JsonObject constructor is called, then re-serializes it once the JsonObject is sent over the wire (or sent to Mongodb).
It would be great to have a constructor
which reads the public fields of pojo (and the fields with getters), and builds a Map<String, Object> from these fields, then initializes the JsonObject#map field directly using this map, avoiding the extra serialization and deserialization.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1779
HttpClient follow redirect · Issue #1779 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient request can follow redirect on a 30x status code response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1781
Lack of custom log level support in the Vertx logging abstraction framework · Issue #1781 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Lack of custom log level support in the Vertx logging abstraction framework. JUL might not support this but Log4J2 do support custom log levels but the Vertx logging abstraction does not have support for this when Log4J2 specific logging functions are abstracted away.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1782
Suggestion: Skip blocked worker instance by option · Issue #1782 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently if i run my verticle as a worker with 2 instances (multi-threaded worker launched with --worker --instances 2) then the request handler instance is choosed in simple order regardless of the blocking state of an instance.
And if one of instances is blocked (for example, by debugger) then 50% incoming requests aren't processed.
So in this case i wish to use another strategy - skip blocked instance and choose non-blocked one.
As currently worker instances are coupled with netty channels so one naive idea is to temporarily disable the netty channel corresponding to blocked instance (possibly in io.vertx.core.impl.BlockedThreadChecker) if there is some config option (--multi-threaded-worker-skip-blocked).
Also implement a public method to allow user to mark current instance as blocked. So user can write something like:
Suppose this will be usefull for production debugging ;)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1783
EventBus interceptors should be able to intercept on both send and receipt · Issue #1783 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the eventbus interceptor can only inspect and transform messages on send. The interceptor does not have the ability to perform complementary operations on message delivery.
A use-case would be for distributed tracing technologies where tracing of intra-cluster communication is the goal. One would want to "start" a trace on message send and "close" the trace on delivery (or, perform further trace-state management if a response is expected).
PR forthcoming.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1785
Provide support for EventLoop execution interception · Issue #1785 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To tie together work done over time, many frameworks (e.g. see log4j MDC) use mechanisms based on thread-local storage. This works well in thread-per-request models of computation, but it fails miserably in event-driven models...like Vertx.
It would be nice to have some interceptor mechanism that could be used to "wrap" chunks of code to be executed and be able to re-establish state around the execution. For example, one could use this type of interceptor to reset the state of a TLS variable to what it was during the last execution and thereby adapt TLS-based mechanisms (e.g. log4j MDC) to the more event-driven Vertx world.
PR forthcoming.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1786
DecodeException used in Json, is missing useful information. · Issue #1786 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Maybe I overlooked something, but why not use the information that the exceptions from Jackson provides? Especially the JsonMappingException gives useful information about the json format (e.g. missing/invalid params), which is useful feedback to provide consumers of a REST api.
For now it seems,  that I have to manually go through the json object to see if the all the params needed are present and valid for a given endpoint.
It would help a lot if the DecodeException contained easy accessible information about the path to the invalid/missing parameters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1789
Load balancing of datagram servers · Issue #1789 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of 3.3.3, you can deploy multiple instances of a verticle, and leverage load balancing for HTTP servers and TCP servers.
However, deploying multiple instances of a verticle creating a datagram listener will result in a java.net.BindException: Address already in use.
You can avoid the exception by enabling address reuse:
But only one verticle instance will handle the messages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1791
createHttpServer: io.vertx.core.VertxException: Thread blocked. ver 3.3.3 · Issue #1791 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I followed the example, but an error occurred.
An error does not occur in 3.2.1 but an error occurs in 3.3.3.
Is this a JDK issue? my jdk version is 1.8.0_73
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1796
HttpClient can use SSL/TLS per request · Issue #1796 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1797
When cluster manager fails to join the cluster, VertxImpl discards the error, leaving the caller stuck · Issue #1797 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if the clusterManager.join() call returns a failure, the resultHandler submitted to the VertxImpl constructor is never called (neither success nor failure) resulting in the handler never completing and the caller getting stuck with an unresponsive stack.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1800
3.4.0.Beta1 with netty-tcnative, NoSuchMethodError · Issue #1800 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've been using OpenSSL via netty-tcnative-boringssl-static (1.1.33.Fork23), mostly because ALPN doesn't work with JdkSsl. When trying vertx 3.4.0.Beta1, the following exception is thrown when using OpenSSLEngineOptions with HttpClient:
The latest netty-tcnative (2.0.0.Beta1) has the same problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1801
Better exception handling · Issue #1801 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In eclipse/vert.x/src/main/java/io/vertx/core/impl/ContextImpl.java
should be
Otherwise the exception is not logged - which seems to be the point of the original code.
So in my logs I currently see
which is not as useful as having a message for each exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1802
Better failure logging when handleMessage failes · Issue #1802 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In eclipse/vert.x/src/main/java/io/vertx/core/eventbus/impl/HandlerRegistration.java in method deliver there is a catch block which could be improved slightly.
It has been advantageous to me to see the address of the message handler which has failed (for whatever reason)
So now if my event handler "service.releaseaccount" has a failure I am told so by name, which could be quite useful
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1803
Remove deprecated AsyncResultHandler and VoidHandler · Issue #1803 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These types are leftover of Vert.x 2 and was useful because of the lack of lambdas in Java 7.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1804
Remove unecessary ReadStream sub types · Issue #1804 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServerWebSocketStream
WebSocketStream
HttpServerRequestStream
NetSocketStream
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1805
Server pausing improvements · Issue #1805 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current a server can be paused, i.e stop accepting requests, by closing new connections when they arrive.
It would be best if that was done at HandlerManager level : pausing a connection would remove the handler from the list and thus it would work best with redeployments that wants to stop accepting requests and delegate them to other handlers using server scaling.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1807
Feature: Support large message framing for text messages in websockets · Issue #1807 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We would like to send and receive large text responses over websockets from our vertx server.  Since the message may be too large for the default websocket frame, the vertx library should split it into multiple frames.
io.vertx.core.http.WebSocketBase already supports sending large binary messages with the writeBinaryMessage function, so I would like to add a new function writeTextMessage.
This would be required to resolve issue 521 in vertx-web (vert-x3/vertx-web#521).  In the pull request (vert-x3/vertx-web#520) for that issue, it was identified that making some changes to WebSocketBase in vertx-core would be the best way forward.
This is similar to Issues #932 and #964.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1810
VertxImpl.createSharedWorkerExecutor does not verify poolSize correctly · Issue #1810 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In VertxImpl.createSharedWorkerExecutor the poolSize check is performed against maxExecutionTime, likely by mistake.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1812
BlockedThreadChecker treats max execution time as if it is in nanos, though Java API docs claim it to be in millis · Issue #1812 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking at the JavaDocs for Vertx.createSharedWorkerExecutor , it appears that the max execution time for a task is measured in milliseconds, but BlockedThreadChecker compares this value to VertxThread.startTime() that returns a value in nanoseconds, and indeed, BlockedThreadChecker divides that value by 1000000 to get at a milliseconds value.
All the other entities in the chain from Vertx.createSharedWorkerExecutor to BlockedThreadChecker don't document the meaning of the max execution time value, so I'm not sure which is correct, and I've also failed to locate where that value is being acted upon other than to issue warnings to the logs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1813
httpclient will always timeout  for one server if it is timeout many times even thoughit is normal now · Issue #1813 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
like the title.i am use httpclient to get file from some server.the server use nginx to be the web server.but,recently i found that if some rqeuest always timeout.
then,i try to find the reason.i found that if httpclient timeout sometimes for one server.httpclient will always timeout even though this server is normal now.when i restart my app,it will be normal.
my core code is:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1814
httpclient deadlock · Issue #1814 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
my app locked today,then i print the stack log:
Found one Java-level deadlock:
Java stack information for the threads listed above:
Found 1 deadlock.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1815
TrustManagerFactorySpi not initiated before call · Issue #1815 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When adding TrustOptions with a TrustManagerFactory, the factory is never instantiated by Vert.x despite the init method present.
Relevant forum thread here. Information here: https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1820
SSL server multiple certificates · Issue #1820 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
this is more suggestion for new feature.
These days I was working with OpenShift (Kubernetes) and I noticed quite nice feature called named certificates. You can specify more key/cert pairs and they are used accordingly request target hostname (Server Name Indication, similar to virtual hosting).
This can be quite handy when one need to expose SSL service on multiple endpoints (for example behind multiple load balancers). Also this allows certificate composition instead of regenerating one with alternative subject name.
One key/cert pair should be considered as default and vertx should fall back to this one if request target hostname does not match to any other key/cert pair hostname.
Regards,
N.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1824
Future fail/complete returns boolean instead of throwing an IllegalStateException  · Issue #1824 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation
Future completion methods throw an IllegalStateException when the future is already completed. Vert.x itself does not rely on this behavior.
When a future might be completed several times (for instance a close or a timeout), Vert.x takes the necessary steps with the idiom, in order to propagate the event correctly.
This change allows to simplify the existing code and use complete the future directly and keep the ability to remain aware of whether the Future was actually completed by the method call or not.
Changes
Future completion returns a boolean indicating whether the Future was completed or not by the method call instead of throwing an exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1826
Future<T> extends Handler<AsyncResult<T>> · Issue #1826 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
It is actually possible to turn a Future<T> into an Handler<AsyncResult<T>> using Future#completer() method. This is actually the polyglot method to achieve it as AsyncResult<T> might not be mapped correctly sometimes (like in JS or Ruby).
The implementations of Future actually implements Handler<AsyncResult<T>> and return this in the completer() method.
When using java-ish languages like Java, Kotlin or Groovy, it should be possible to use directly the represented Future type directly as an Handler<AsyncResult>.
Resolution:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1828
Future#future(Handler<Future<T> handler) method to future creation in an expression · Issue #1828 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Allows to write an expression:
instead of the three statements:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1830
HttpServerResponse data was truncated · Issue #1830 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
pom version:
response.write(UrlEncoder.encode(r,"utf-8")),  no response data was truncated
otherwise, the data was truncated.
anyone can help on this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1831
Add a Future#orElse and AsyncResult#orElse  · Issue #1831 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
a recent contribution added Future#recover(Function<Throwable, Future<T>) method, similar to the Future#compose(Function<T, Future<U>>).
compose has a synchronous version : Future#map(Function<T, U>) . Future#map(U), recover currently does not have one.
Changes:
added an orElse method that is the synchronous version of recover : orElse(Function<Throwable,T> / orElse(T). This method is added to AsyncResult and Future like map is.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1834
Don't call HttpServer request/ws close handler holding locks · Issue #1834 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
currently the ServerWebSocket and HttpServerRequest close handlers are called under synchronized lock of the connection. This can create deadlocks in SockJSSocket because a SockJSSocket may uses different request/websocket (reconnects) and event loops.
Change:
when processing a Netty close event, call the close handlers in the next tick (i.e scheduled to run on context).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1835
Add tryComplete/tryFail methods that allow to complete/fail Future if not yet completed · Issue #1835 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1836
The JSON File from --conf should be read with the UTF-8 Charset · Issue #1836 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The JSON File from --conf should be read with the UTF-8 Charset (JSON default encoding) and not with the underlying platform's default charset.
In our case we have problems with Verticle's which we are deploying with a json config file (encoded in utf-8). Some characters are not decoded correctly because the default charset of the platform ist not utf-8.
A workaround is to set the default encoding via -Dfile.encoding to utf-8. But this could have other implications in existing code.
The Problem lies in the class io.vertx.core.impl.launcher.commands.RunCommand and possibly other locations.
The Scanner should use UTF-8 as default encoding. Perhaps you could add an option to specify the encoding along the --conf option too.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1840
New HttpServerResponse endHandler to be notified when the HttpServerResponse is disposed · Issue #1840 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
currently the HttpServerResponse#closeHandler is called only if the response is closed abruptly for HTTP/1 and is called whenever the corresponding stream closes for HTTP/2. The behavior is not consistent and also it seems that a new endHandler that will be always called to allow cleanup after the response is disposed in a consistent manner.
Changes:
A new response end handler is added and it is called whenever the current HttpServerResponse becomes unused, wether it is on purpose (i.e calling response end() method) or because the transport (connection for HTTP/1.x and stream for HTTP/2) is closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1842
Vertx HttpClient - Wait queue does not empty after timeouts · Issue #1842 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
If you create a HttpClient with the maxWaitQueueSize set to a positive number,
and then
if the wait queue fills up, (poolSize for the HttpClient is also a fixed number)
and then
if, subsequently, one or more of the HttpClientRequests being executed in the pool time-out, owing to no response from the server after their set timeout value, I see a strange behavior that all subsequent requests will receive a "Connection pool reached max wait queue size"
Here is a small standalone reproducer:
Thanks..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1845
Remove Netty's DNS codec fork and reuse Netty's DNS codec in DnsClient · Issue #1845 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1849
Address resolver should have a retry mechanism · Issue #1849 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In certain network configuration, the DNS server can be located remotely. Therefore, it might be susceptible to a packet drop. When that happens, AddressResolver seems to fail to resolve the DNS name. I would prefer that we have some DNS retry mechanism rather than letting the request fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1850
Make it possible to customize DNS behavior · Issue #1850 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1851
KeyStoreHelper just support PKCS8,Not support RSA private key · Issue #1851 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1852
Remove unnecessary WriteStream sub types · Issue #1852 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
A few synthetic type extending WriteStream have been introduced because code generation only supported type variables as type argument declarations. Since 3.4 we removed that limitation and now we can remove these useless types: PacketWriteStream so far.
Change:
Removal of io.vertx.core.datagram.PacketWriteStream
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1853
Round robin dns server selection for hostname resolution · Issue #1853 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
currently the dns resolver is configured to use the first server from the list and the others for failover. By using instead a rotational server list we can provide round robin.
Changes:
provide configuration to configure the dns server list to be rotational for dns server selection
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1854
Change the default number of dns max queries to 4 · Issue #1854 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
currently the default number of dns max queries is 3. By default the resolver will send 2 queries : A and AAA. When the server does not respond, there is one query left and in case of failover, only the A query is sent. Increasing the value to 4 allow to send A and AAA when failover occurs.
Change:
The default number of max queries is 4 instead of 3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1856
Should use ResolverConfiguration whenever possible to find DNS configuration · Issue #1856 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On Oracle JVM, I think it is much simpler to use sun.net.dns.ResolverConfiguration to find the DNS configuration. Look at http for an example.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1859
Load the rotate option from /etc/resolv.conf on Linux · Issue #1859 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1861
Don't get a lock with Hazelcast · Issue #1861 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
i wrote a small class for getting a lock with the Hazelcast Cluster manager.
This code will never get a lock and runs in a timeout.
Why is this happen ?
Thanks
Marcel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1862
Handle HTTP/1.1 decode errors · Issue #1862 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation: when the Netty HTTP/1.x decoder finds a protocol error (invalid chunk, initial line too long, etc...), it signals it with an error in the HttpObject. We handle it in a single case (http server invalid request) and we should handle it in all case on server request or in client response and make no further processing of the connection.
Changes: when an HttpObject is received we check there is no decode error. When there is a decode error we signal it to the HttpServerRequest or HttpClientResponse and then we close the connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1864
WorkerExecutor callback should run on caller context · Issue #1864 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently it runs on the context which created the WorkerExecutor
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1866
JsonObject.mergeIn(JsonObject other, int depth) does not regard NULL values · Issue #1866 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
i am unsure if it's a imperfection or a design decision by intention:
Using JsonObject.mergeIn() with JSON object keys having NULL values leads to NullPointerException -- the reason for this is that Map.merge() requires the source map to be non-NULL.
Any idea or hint on this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1867
WorkerExecutor must order tasks on the current Context and not on itself · Issue #1867 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1870
In case of NO_HANDLERS, vertx handler executed in wrong context and thread type · Issue #1870 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using 3.4.0
Run ThreadConsistencyTest.testNoHandlersReply
Explanation of the test:
clustered vertx
deploy worker verticle
Eventbus.send to some whatever address
completion handler is invoked on wrong context and thread
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1872
Vert.x 3.4.0 doesn't start with Netty 4.1.9.Final · Issue #1872 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1875
High Availability mode · Issue #1875 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
The documentation sais that : "When vert.x runs with HA enabled, if a vert.x instance where a verticle runs fails or dies, the verticle is redeployed automatically on another vert.x instance of the cluster"
So, if I have really understood what it means, if any of my vert.x instance dies, another one in the cluster will redeploy the failed instance verticle as a child verticle.
But if the second instance dies itself, the two verticles are then unavailable.
Is there any way to allow instances to die while keeping the application running "forever" ? Something to allow self-healing of the instances ?
Thx in advance for your help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1885
how many max connections vertx eventbus can have ? · Issue #1885 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have done multiple projects with vertx so far and quite happy with its performance. Would like to know if it would be suitable for writing a GPS tracking server. My plan is to handle around 100,000 simultaneous connection initially. Can I use eventbus for such loads and would it be possible for vertx server to handle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1887
Shared worker executor serializes taks even if ordered = false · Issue #1887 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1889
Can't run embeded Vert.x under JDK9 · Issue #1889 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm currently trying to migrate SlideshowFX to JDK9 (build 161 with Jigsaw).
The application embeds Vert.x in order to provide a WebServer. Until now I have been using Vert.x 3.3.3 and the application was running "well". Now I'm trying to use versions 3.4.0 and 3.4.1 and when starting the application, I've got the following error and the application can't boot:
When looking at the source code of vertx-web, I can see the META-INF/services/org.codehaus.groovy.runtime.ExtensionModule file. As specified by the ServiceLoader class, such files are used in order to define services not developed as JPMS modules but running as JAR files on the classpath. I suppose the addition of this file is intentional by the Vert.x developers but I can't figure out how to be able to start SlideshowFX again.
Have you encountered such issue and were able to fix it?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1890
Calling resume in an AsyncFile endHandler will cause a new call to the endHandler · Issue #1890 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1892
Race condition in Future setHandler/completion between threads · Issue #1892 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In one of our projects we have encountered a problem with CompositeFuture.all() when running "outside"
of a verticle (in junit tests). Here is a sample program:
After a while it prints something like
Inside implementation of CompositeFutureImpl.all() the setHandler() function is called upon each future in the composition (in our case two). The problem here is that the completion of futures runs in a different thread than setting the handler. Neither of the functions (setHandler() nor complete()) are atomic and it may result in
a situation when the handler is never called. The problem seems to be more fundamental. The future
implementation (FutureImpl) is not thread safe and using it from different threads may cause difficulties.
When running inside a verticle it's ok because asynchronous callbacks are serialized within the event loop
and should not run concurrently.
I don't know if this is an expected behaviour and Futures (and their compositions) should be used only
within verticles. Our understanding based on looking into the implementation of CompositeFutureImpl is that
the intention was to make it thread safe.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1899
Timers should be cancellable until they are fired · Issue #1899 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: timers are scheduled by the event loop and executed on its context, during the time between a timer callback is scheduled and its actual execution, the timer cannot be cancelled although it could still be. Such situation can happen easily with worker contexts where timer tasks can be delayed due to blocking.
change: uses an atomic boolean cancelled to allow a timer to be cancelled when it has been scheduled for execution on the context. The atomic boolean guarantees the visibility across threads and also the timer can be marked as cancelled once.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1902
Type Matching Event Bus Messages? · Issue #1902 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think it would be quite valuable to support an overloaded method for the EventBus consumer to allow specifying the type of the message:
This would allow for type-safe message handling and allow for matching different consumers to different types. I'll try to look into what it would take to make this possible. It obviously wouldn't easily apply to some of the dynamic languages though...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1903
Retrieved Buffer byte array size not correct. · Issue #1903 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the length of the buffer does not match the initialized size.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1905
EventBus interceptor does not get message body when clustered · Issue #1905 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From David Klotz on the forum
Hi, 
I'm currently a bit confused by the differing behavior of event bus interceptors in a non-clustered and a clustered vert.x environment (currently on 3.2.1, can test again in 3.4.x if something in that area has changed since then). When run in a non-clustered environment, the interceptor has access to both the message body and the message headers, but when run in a clustered environment, the message body is always null. Is this behavior by design or a bug?
Cheers, 
David
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1906
Cannot process buffer in worker NetClient on channel inactive · Issue #1906 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the new version 3.4.1, I get the following exception when I send an email through an non-shared client and a AWS SES server:
I think the problem is this: in the line 197 of NetClientImpl, the attribute conn can be null because of the method removeConnection has been called in the VertxNetHandler, so it causes a null pointer exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1909
VertxException for already timed out HttpClientRequest if HTTP server closes connection. · Issue #1909 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I’ve seen during my tests, that if I send a HTTP request that is timed out, and after that I send another one which gets a response, and then the connection on the server side is closed – then the first request (the one that timed out) calls its exceptionHandler with a VertxException with a message Connection was closed.
EDIT: I am seeing this behaviour with Vert.x 3.4.1.
At first I thought that it is due to the client trying to keepAlive its connections and reacts with an exception when closed from outside  – but then the exception should rather be thrown on the vertx object itself, not on a request that supposedly finished time ago. And then it seems it does not matter if I set setKeepAlive(true) or setKeepAlive(false).
Here is a gist with a test replicating this behaviour.
And here is a log I get from that test:
Also, if I comment out the 66th line in the gist (closing the HttpServer), and I close HttpClient on line 101 instead, the same issue appears.
I would expect that if the request has already timed out, it is closed and won’t call its exception nor response handlers anymore. Am I doing something wrong, understanding something wrong, or is it a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1910
FailedFuture should always have a cause even when the provided cause is null · Issue #1910 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1914
Vert.x HttpServerResponse serialization · Issue #1914 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have 1 Verticle which receives HttpRequests. This Verticle sends the data on to a processing verticle which in itself sends it on to a processing verticle  and so on untill all processing is done. At the end I would like to to send a response...
And this is my problem: I cannot send the RoutingContext or the HttpResponse over the EventBus to the next Verticles otherwise I will loose the Vert.X Clustering capabilities since that object is not serializable.
I tried saving the same object to a Apache Ignite Cache with the same result.
In the beginning I had an architecture which involved Orchestrator Objects in order to reply and so always return to the original Rest Verticle, but this is not scalable as I would like.
Any information on such a possibility would be appreciated.
Tim fox wrote in an older response to a similar question the following
You could serialize it to a byte[] and deserialize it at the other end. Vert.x 3.0 supports custom serializers on the event bus, so you could create one for HttpServerRequest.
I would very much like to know how to do this as I am unsuccessful to do this.
Thank you in advance
Yoav
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1916
3.4.1: Eventbus can only eat max 50% CPU  · Issue #1916 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Clustered vertx, core i7.
The test is about send and reply between verticles and then measure rate.
The test has a bunch of eventloop verticles doing send to a bunch of worker/eventloop consumer verticles. When the senders receive a reply they send again (a kind of async/reactive busy loop)
The observed behavior is that i can never increase the CPU usage to more than 50%. I doubled the number of eventloop pool size and no effect.
You can run it with:
As a control test you can run another test which can load the CPU 100% by doing md5 computations in 200 worker verticles (can also be event loop verticles)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1917
Codegen does not work · Issue #1917 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all
I am trying to generate a service proxy but it does not work at all.
The code does not get generated.
You can find the project on the attachment.  Please help me.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1919
Add support for BigInteger/BigDecimal in JsonObject · Issue #1919 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My primary use case here is that the default way that Jackson serializes/deserializes java.time.Instant is as a BigDecimal for the seconds since epoch plus nanos (or whatever the most accurate clock time it can convert to). Thus, when I try to use JsonObject normally, I can't deserialize what was serialized before without disabling the timestamp as nanos options in Jackson ahead of time.
Adding a gamut of methods like getBigInteger(String) et al. would be useful, too, but I think this would be more appropriately implemented via better dynamic conversion so that, for example, calling json.getBigDecimal("foo") would still work if the foo field was stored as a Double instead. Similarly, calling json.getDouble("foo") would likely call Number::doubleValue or similar to do an auto conversion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1920
Future.setHandler() emits unpredictable behaviour if called multiple times · Issue #1920 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given a simple test class:
Thus, if you call setHandler() multiple times for any reason, directly or indirectly, you can't be sure of whether one or more of the given handlers will be called unless you know for sure when the future will get completed.
In order to not encourage writing code with potentially unpredictable behaviour, I can think of at least the following potential changes to the Future interface:
Allow calling setHandler() just once, throwing IllegalStateException on successive calls.
Replace setHandler() with addHandler() which would allow multiple listeners of a single future. All  map(), compose() etc metods would also start using the new method instead of the old.
What do you think?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1923
Creating JsonArray from List of non standart objects · Issue #1923 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I create a JsonArray like this:and send this via Event Bus I get java.lang.IllegalStateException: Illegal type in JsonObject: MySuperClass
Here is a part of stacktrace:
I think JsonArray class can either check type of elements in the list or perform JsonObject.mapFrom() automatically under the hood.
BTW it's not reproducible in Clustered Event Bus
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1925
HttpClient does not remove established HTTP/2 connection when the channel becomes inactive · Issue #1925 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm working on a project, where I have two Vert.x applications which communicate with each other using REST. In one application I'm running an HttpServer and in the other an HttpClient, which connects directly using HTTP/2. When the server crashes, there is an unhandled "an existing connection was closed by the remote host" exception in the client, but the connection does not seem to get removed from the Http2Pool. Thus when the client application tries to make another request, the request.end() method succeeds without any exception and the client application never gets a response or an exception.
I'm using Vert.x 3.4.1 and JDK 8 Update 121.
I have created two demo Maven projects that can be used to reproduce the problem:
Press enter in the client to make the first request.
Stop the server process using Ctrl+C
Press enter in the client process again to make another request (for which no response is received and no exception is thrown).
The code of the demo applications is also here:
I've tried to debug the client application stepping into the Vert.x code and found out that an infinite loop seems to be created when a new request is made after the server has crashed. ConnectionManager.deliverStream(conn, waiter) calls Http2Pool.createStream(conn), which throws an exception because DefaultHttp2Connection.isClosed() returns true. Thus deliverStream() calls getConnection(waiter), which results in ConnectionManager.deliverStream(conn, waiter) to be added to the context's queue again.
Best regards,
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1926
What's the reason for own Buffer implementation? · Issue #1926 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I wonder what's the benefit of using custom Buffer implementation as opposite to default Java's of netty's?
On a first sight seems a bit ineffective as there already many wrappers around exiting wrappers - to deserialise objects etc in many popular libraries. Very often there is a need to convert it to string or use getBytes which is coping operation. Seems like initialisation of BufferImpl itself requires copying.
Is that all really necessary?
I might miss a bigger picture, if I am wrong I apologise in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1927
SelfSignedCertificate is always generated with the "example.com" domain name · Issue #1927 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SelfSignedCertificate is always generated with the "example.com" domain name which is not very useful if we use it in tests where both server and clients are on the "localhost". Hence, unless we provide an option to the HttpClient - setVerifyHost(false) - the client cannot talk to the server using this generated certificate.
I suggest to override the create method in SelfSignedCertificate with domain name as the parameter and pass this FQDN to the underlying Netty implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1931
vertx throws "IllegalStateException: Failed to create cache dir" though "vertx.disableFileCaching=true" · Issue #1931 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using vertx for a small web service that should run without disk write access.
Sadly vertx insists in having a writeable cache directory though I set "vertx.disableFileCaching=true":
I had a quick look at FileResolver.java and would expect any cacheFile handling to be skipped when ENABLE_CACHING is false, but as far as I understand the code, the public interface of at least FileResolver would have to change.
Before digging deeper into the code and developing a patch, I would like to know if changing the behaviour to match what I expect, is appreciated.
Do I miss something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1932
awaitResult/fiberHandler behaviour · Issue #1932 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I was playing with the fiberHandler example in vertx and I noticed that if two messages are sent on the eventBus (different address, same eventBus) in the same request, then the output is what I would expect it to be from two request.
For example, in this case:
In general with N sender and N consumer the behaviour seems unpredictable. Not sure if a bug or I'm misusing the constructs awaitResult/fiberHandler.
Any elucidation on the matter will be appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1937
Request for a new ContextImpl that mimics a Worker Context but allows multiple queues · Issue #1937 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have run into the following issue in the past before using Vert.x and now that I am using it as well. I really like the functionality that a Worker Context provides: A separate thread that runs tasks in the order they were submitted to the context to be executed. However this functionality could be even more helpful if the Worker Context would allow the submission of tasks to be executed in order in different queues based on some (defined?arbitrary?) identifier/priority. For example, I have the need to "serialize" the execution of tasks but tasks which have different priorities could be executed in parallel but I still need the "serialization" feature for tasks of the same priority.
Thanks - Juan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1938
Intermittent failure in Http1xTest.testCloseTheConnectionAfterResetBeforePipelinedResponseReceived · Issue #1938 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can reproduce on my machine with @Repeat
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1939
vertx.deploymentIDs() not updated after verticle undeploy. · Issue #1939 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx.deploymentIDs() not updated after vertx.undeploy(verticle)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1940
Local event bus reply handler result failure on successful reply. · Issue #1940 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When sending a vertx.eventBus().send message on a local event bus I am seeing a timeout failure on the reply handler of the vertx.eventBus().consumer Message<T> requestMessage.reply  for successfully replied messages. My consumer code looks something like this.
I have had a quick look at HandlerRegistration and see this line of code in the constructor which starts a timed task to call the reply handler with a failure.
This timed task is however stopped by EventBusImpl.deliverMessageLocally that invokes HandlerRegistration.doUnregister which then invokes
that should cancel the timed task when successfully replied to.
Since send reply only selects at most one handler I am a bit confused why this is happening? Can anyone with greater knowledge of the EventBus internals explain why this is happening?
Note my vertx.eventBus().send command is one a different Verticle to my vertx.eventBus().consumer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1941
Vert.x Junit test does not complete using Rxjava · Issue #1941 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm trying to create a WebSocketServer using vertx-rx-java 3.4.1, but I'm facing an issue in my JUnit test.
I created a unit test which sends and receives a message, then closes the client and completes the Async, but still the test does not finish.
I tried to solve it, but after some hours work I just can't find the mistake.
I created a GitHub repo where you can reproduce the test.
Maybe the log output can help you:
As you can see, the tearDown method is not invoked.
Kind regards,
Robert Winkler
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1942
Does the latest vert.x mongo-auth support "SCRAM-SHA-1" or "MONGODB-CR" authentication? · Issue #1942 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the latest version of vertx-auth-mongo, an MongoUser object could be something like this:
While the method, examinePassword of class MongoAuthImpl, retrieves the encrypted password from a given key ,which assumes it were a String value mapped by that key, but a JsonObject actually.
So i wonder if it supports the  "SCRAM-SHA-1" or "MONGODB-CR" authentication?
It would be better if there’s some sample code~
Thx!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1943
Please add support $numberLong · Issue #1943 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonObjectCodec.java  still not support "$numberLong",
when document is
That write to MongoDB, it throws java.lang.IllegalArgumentException: Invalid BSON field name $numberLong
But  if I change to
That would be stored as BsonType.INT32 not the BsonType.INT64 which my data is Long type !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1944
HttpClient does not use HTTP proxy when client options ssl=true overridden by request options ssl=false · Issue #1944 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am trying to use the http client in order to access several restful apis through my proxy.
Some of the api providers use https  and some http, therefore I configured the http client to use ssl.
When doing so, the proxy settings is completely ignored when attempting to connect to a non https api.
The following is a simple reproducer:
My expectations was that this reproducer will fail sending the request as the given proxy does not exists. Instead, it works and return my machine ip (which defeat the point of configuring a proxy on the http client)
If I am not configuring the http client with isSsl = true then all the requests to the https-apis are failing with "not an ssl/tls frame" related exceptions
Am I missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1946
How to capture http request in vertx? · Issue #1946 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A code like this not works
But this works.
Anyone can help me?
Thanks.
I am using fiddler to capture this traffic and my vertx version is 3.2.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1947
How to get root from HttpClient which is published from ServiceDiscovery · Issue #1947 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When we publish an HTTPEndPoint record, we pass an argument named as root. This root is not accessed when we getRecord.
Publishing record:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1948
LocalMap support ttl? · Issue #1948 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I find that AsyncMap supports TTL, but LocalMap does not support.
Will LocalMap plan to support this feature as AsyncMap?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1949
Add tags to repository
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please add tags to repository, for example: distributed-systems, concurrency , high-performance .
It makes project more popular )
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1950
Oauth · Issue #1950 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi I new developer in vertx, I develop in Ruby.
I trying to make a social login (facebook and twitter) also try with github but this works.
Error:
Whoa there!
There is no request token for this page. That's the special key we need from applications asking to use your Twitter account. Please go back to the site or application that sent you here and try again; it was probably just a mistake.
Thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1951
HttpClientRequest handle correctly Buffers with a readerIndex > 0 · Issue #1951 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using code similar to example. And IndexOutOfBoundsException was observed. After debugging for a while I found a reason of the problem.
In proxy code we have something like:
In file HttpClientRequestImpl there is a code:
And if buff has readerIndex not equal to 0 then call to writerIndex fails with reasonable IndexOutOfBoundsException.
Current workaround is using Buffer.slice() before passing buffer read by http server to http client. But I think that buffers with non 0 readerIndex should be handled properly by HttpClientRequestImpl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1952
Vertx deploys a Verticle class · Issue #1952 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to have a Vertx#deployVerticle(C<? extends Verticle, ...) so one can deploy a class without using classloading
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1953
Vertx deploys a Verticle instances · Issue #1953 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to have a Vertx#deployVerticle(Supplier<Verticle>, ...) pretty much like Vertx#deployVerticle(Verticle,...) but that is able to handle multiple instances
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1955
Can Vertx Web client synchronize · Issue #1955 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like to nest Vert.x Web Client in Vertx-web and get the results.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1956
Requesting ftp urls via http proxy works incorrect · Issue #1956 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If one has setup HttpClient to use http proxy and tries to request FTP resource via it then proxy requests HTTP resource. So the code
sends following HTTP request to the proxy:
But uri should be ftp://ftp.example.org/file.
From code I can see that http scheme is hardcoded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1960
--redeploy ignores -D system prooperties · Issue #1960 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I understand it correctly...
If --redeploy then initializeRedeployment() which calls startAsBackgroundApplication
There's a check here
But It seems that the properties are null at this point...
Calling System.getProperties().list(System.out); in our own verticle the passed in -D properties are gone only the java one show up. Removing --redeploy everything works as expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1962
Add support for jackson-modules-java8 · Issue #1962 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, can support for these modules be added or at least the Date/Time one?
When using Json.decodeValue(someString, SomePojo.class) or someJsonObject.mapTo(SomePojo.class) and we have Java 8 Instant type we get an exception.
JsonObject has getInstant() but that does a direct mapping with return new Instant(someDateString);
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1965
Json Creation | DataObject Annotation | Setting Java 8 LocalDateTime object returns null · Issue #1965 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Team,
I am creating a Java 8/JodaTime LocalDateTime class variable in one of my value objects annotated with DataObject. When I set the variable using setter methods as LocalDateTime.now() and try to get the json, it does not set anything to the variable in json. Also the variable is missing from the json. Any ideas why this is failing. After looking at the different examples, I saw that everywhere Date is represented by Long type and at none place Date, LocalDateTime, LocalDate is used.
Any help is appreciated.
Thanks
Piyush
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1967
Fix the CompletionHandler in AsyncFileImpl#writeInternal · Issue #1967 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
should be a failed future, a test should be added
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1972
Extend VertxLifecycleHooks to support shutdown · Issue #1972 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The VertxLifecycleHooks class does not notify the Launcher when the vertx instance is shutdown. We should add (ideas):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1975
Faster json parsing · Issue #1975 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation:
We can speed up json parsing provide in Buffer.
In fact, Jackson is a bit more efficient when the parsing is based on byte[] or InputStream (Jackson-Performance).
In addition, this will reduce intermediate String allocation.
We can use the underlying netty ByteBuf to achieve this.
Modification:
We need to add a method in Json to be able to decodeValue from Buffer.
And then we can modify toJsonObject and toJsonArray implementation in Buffer.
Result:
Better performance for json parsing based on Buffer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1977
Add support for max lifetime on HttpClient pool connections · Issue #1977 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add support to HttpClient pooled connections such that a keep-alive connection is only used up to a specified maximum amount of time before being closed and recycled.  This would allow for clean recycling of IP by first removing it from DNS, such that you only need to wait for DNS TTL + HttpClient max connection life time.
The connection could either be checked when the connection is obtained from the pool or an existing/new background maintenance thread could scan through existing connections and closing any any that are too old.  While checking when obtaining the connection from the pool is sufficient, proactively closing would allow the server side to detect that all connections are closed, and thus could recycle itself earlier if it detected it didn't have any current active connections.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1978
Support minimum idle connections for HttpClient · Issue #1978 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the keep-alive pool within HttpClient is only increased when there is an active request and there are no extras in the pool.  When using Vertx HttpClient in a SSL WAN deployment, keeping the TCP and TLS handshake out of the way of a customer request is preferable.
In such the same way that HikariCP (https) supports a minimum number of idle connections.  I think ideally this is more of a percentage with a defined minimum and maximum that is dynamic in the middle.
Even if you didn't support this full model in the beginning, just supporting an easy mechanism for someone on the outside to create additional connections (w/out having to do some kind of fake request to a real URL) would allow someone to implement this entirely on their own.  This would also allow for situations where you know you are going to start failing over a ton of requests to a remote location, you could start to warm up connections.  So that when you do the switch, the first few hundred customers aren't paying all the handshake penalties.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1981
Log4j2LogDelegateFactory and Log4jLogDelegateFactory · Issue #1981 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to use log4j2 instead of JUL.
According to
I have to set (version 1)
and according to
I have to set (version 2)
which one should I take?
Please update the api-doc.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1983
MessageCodec for CollectionTypes? · Issue #1983 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have this:
and want to use this codec:
However, I get this error:
Are Collection-Types (Set/Map) not allowed?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1984
Mapping between JSON objects and Java objects by Codec · Issue #1984 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to docs we can map between json and java object by using Jackson’s ObjectMapper#convertValue():
However, I have a "MessageCodec" for "User.class" so the conversion between json and object can be handled by "vertx" instead of "jackson" (faster?). I can not find a method where I can convert it explicitly by using this MessageCodec:
Actually I have do something like this:
Would be nice if vetx can provide something like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1985
Customize a server WebSocket's idle timeout · Issue #1985 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be useful if Vert.x permitted the idle timeout to be set on a per WebSocket basis.
Currently, the idle timeout for a server WebSocket can only be set via io.vertx.core.http.HttpServerOptions#setIdleTimeout, but because this is an HTTP server option it applies to all server WebSockets.  This prevents someone from specifying different WebSocket idle timeouts based on things like the URI, path, or headers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1986
HttpServer no-body responses with Transfer-Encoding: chunked · Issue #1986 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When we are trying to respond to HEAD request using HttpServer and specify Transfer-Encoding: chunked then single zero chunk is written. While RFC says:
The HEAD method is identical to GET except that the server MUST NOT send a message body in the response (i.e., the response terminates at the end of the header section).  The server SHOULD send the same header fields in response to a HEAD request as it would have sent if the request had been a GET, except that the payload header fields (Section 3.3) MAY be omitted.  This method can be used for obtaining metadata about the selected representation without transferring the representation data and is often used for testing hypertext links for validity, accessibility, and recent modification.
I tried following:
Also I suppose Transfer-Encoding: chunked similarly can be applied to 304 (Not Modified) responses.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1987
Clustered vertx blocking vertx.eventBus().send · Issue #1987 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is a little example
Everything is totally fine in non clustered vertx instance.
But when I do the same with clustered vertx
I have a totally different result
Messages have been sent just after SendVerticle execution finish. Seems like clustered vertx blocking eventBus().send from sending messages.
So the question is: How can I achieve in clustered vertx exactly the same result as in non clustered? I need this messages to be send asynchronously.
P.S. Also the interesting thing is that: If I use .setMultiThreaded(true) to the SendVerticle.class everything is fine... But it seems like a hack and may be there is a better way to achieve what I need because it is not working exactly in clustered vertx instance. And also my SendVerticle is really not multithreaded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1988
Add Rocker template support. · Issue #1988 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1996
Calling ServerWebSocket reject is documented to return a 404, but returns 502 instead · Issue #1996 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServerWebSocket.reject() is documented to return a HTTP 404, but we observe that it returns a 502 instead, and the source code indicates 502 as well:
404 seems better than 502 to me, but certainly the docs and code should agree, and I think ideally the reject() should provide an obvious means of setting the status code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1997
HttpServerRequestImpl Reject unfriendly Request URL · Issue #1997 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I call a url running on Vertx like:
It will cause an exception and not work. I think it should be accept the invalid charactars like "{", "}"
Refer to Jersey, jersey servlet container handle this as:
So back to vertx, I suppose the io.vertx.core.http.impl.HttpUtils should adapter the unexcepted charactars.
My solution is:
for the compatibility
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1998
Configure file resolver caching per Vertx instance · Issue #1998 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation:
Currently Vertx file resolver caching is configured globally. It is desirable to have a finer grained configuration per Vertx instance instead of a global static initialization that is defined for all Vertx instances of the JVM at the JVM initialization time.
changes:
Provide a new VertxOption that configures the file resolver caching. The default value is true unless the system property vertx.disableFileCaching is set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

