5002
CallCredentials in 1.16.0 · Issue #5002 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This may be a non-issue but I wanted to verify the precise intention of the staged changes described in #4901.
The first steps imply a transition release which doesn't break existing code, presumably this is 1.16.0.
Introduce CallCredentials2, which is the new API, which implements the old CallCredentials. Change all stock implementations to it. Deprecate the old CallCredentials.
Make a release, and ask all implementations (including FirestoreCallCredentials) to implement CallCredentials2 instead.
But in its current form, the 1.16.0 CallCredentials breaks binary compatibility for implementations since CallCredentials.MetadataApplier has changed from an interface to an abstract class, and this is in a parameter of its only method applyRequestMetadata(). I guess maybe the answer is that because that method is an @ExperimentalApi then you are SOL. But since implementing libraries need to be rebuilt to work with this anyhow, why bother staging it at all?
And in the subsequent release, users of CallCredentials will suffer the same fate despite the interface itself being non-experimental. I am curious why this break needs to happen - couldn't it be kept as an interface with an abstract BaseCallCredentials implementation added that implementors can extend to be insulated from further API evolution?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5013
Fluter Plugin project cannot resolve grpc · Issue #5013 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am developing a flutter plugin that uses grpc. Actually I need to do the java client
I am using version 1.15.1 of GRPC
When I try to use or to import io.grpc, it says that cannot resolve symbol grpc
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5015
Revisit LoadBalancer API's threading model · Issue #5015 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The LoadBalancer main interface is not thread-safe, and is guaranteed to be called from the SynchronizationContext. This has relieved implementors from worrying about synchronization.
As for the auxiliary interfaces, SubchannelPicker is intentionally thread-safe because it on the critical path. Helper and Subchannel are not on the critical path, we made them thread-safe because they are implemented by GRPC and we thought making them thread-safe would probably provide more convenience to their callers.
However, client-side health checking (#4932) and our (Google-internal) request routing work revealed two use cases where a LoadBalancer may wrap or delegate to another, while adding additional logic. Helper and Subchannel may also be wrapped in the process.
For example, HealthCheckingLoadBalancerFactory wraps Helper.createSubchannel() to initialize health checking on the created Subchannel, and we find it much easier to implement if createSubchannel() were always called from the SynchronizationContext, which is not the case right now since createSubchannel() is thread-safe. In fact, probably all LoadBalancers always call createSubchannel() from the SynchronizationContext, otherwise it may race with handleSubchannelState() and it's non-trivial to handle, and will cancel out the benefits of the threading guarantee on the main LoadBalancer interface.
Because of the apparent issue with createSubchannel(), we are going to suggest always calling it from the SynchronizationContext, and will log a warning if it's not the case.
We'd like to discuss whether it makes sense to make Helper and Subchannel non-thread-safe, and require them to be called from SynchronizationContext.
My argument for non-thread-safety: we made Helper and Subchannel thread-safe based on the mindset that they is only one implementation which is from GRPC. In fact, a 3rd-party developer may want to wrap them and add their own logic, and it now becomes their burden to make their added logic thread-safe too.
Possible argument for thread-safety: Subchannel.requestConnection() may be called from the critical path. However, since it doesn't guarantee any action for the caller, the caller can easily enqueue it to the SynchronizationContext.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5018
How to get client IP from HA Proxy 1.8 · Issue #5018 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
I'm using grpc to translate data between client and server. Client call server via HA Proxy (version 1.8 support live reload) but server side not get real client IP. How can I get real client IP via grpc code or any config from HA Proxy.
This is my code server
Thank so much,
What version of gRPC are you using?
What did you expect to see?
Get real client IP
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5019
Any way to get the Channel target through the channel and stub? · Issue #5019 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there any way to get the server name through the channel or stub or status
When service-a calls service-b , if service-b goes down, It will get such an error , status.getCause() is .
Connection refused: no further information: /127.0.0.1:9898
Through the status object, we can see the ip and port of server (127.0.0.1:9898).
The ip and port is obtained by resolve the Channel target name of service-b through NameResolver,
But I can't find any way to get the Channel target ManagedChannelImpl.java#L123  ( the target is my service-b instance name )  like channel.getTarget() or stub.getTarget() or status.getChannelTarget() etc..
Is there any way to get the Channel target?
What version of gRPC are you using?
What did you expect to see?
The instance name of the server can be obtained in the status or channel or stub.
If I get the channel target, I will customize the log like this
Connection refused: no further information: /127.0.0.1:9898 (service-b)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5025
Tracking issue for HealthCheckingLoadBalancerUtil being experimental · Issue #5025 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5028
Shaded source jars do not contain any files · Issue #5028 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The source jars that are associated with the gprc-netty-shaded packages do not contain any source files.  Seeing how the package names are rewritten when the jar is created this makes it extremely difficult to debug issues when using libraries that make use of the shaded jar.
What version of gRPC are you using?
Seems to apply to any version of shaded jars
What did you expect to see?
a jar file that contains the source code for the classes contained in the shaded jar, with the same package renaming that occurs in the classes jar
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5029
Tracking issue for ChannelLogger being experimental · Issue #5029 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5032
Using DNS Service Discovery returns UNAVAILABLE: NameResolver returned an empty list · Issue #5032 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
One of the scenarios is as follows:
Using envoyproxy as Load balancer.
Using AWS Service Discovery as DNS Service Discovery
DNS Service Discovery server that serves as an A record pointing to that load balancer
One "backend", which the load balancer points to
Such a flow
The gRPC client server will return UNAVAILABLE: NameResolver returned an empty list when the ip of envoy is changed.
It seems that gRPC client server has done DNS cache and it is not updated to new ip.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5034
how to handle "DEADLINE_EXCEEDED" · Issue #5034 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
sometime i will meet the exception when i try to request ; how to handle it ? thanks
io.grpc.StatusRuntimeException: DEADLINE_EXCEEDED: deadline exceeded after 9996417917ns ;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5038
MessageDeframerTest is flaky · Issue #5038 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I observed this test failed on travis more than twice today.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5040
UINT32 data converion is taking the value as integer. · Issue #5040 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
in proto file filed is mentioned as UINT32 and the value after  DynamicMessage.parseFrom(,); coming as integer and its wrong;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5041
Prevent sharing Context object between server and client thread · Issue #5041 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
The issue with sharing Context object between server and client calls.
I have a GRPC server that while handling bidirectional stream request (stream A) creates a client bidirectional stream to another GRPC server (stream B). The idea is that lifecycle of the streams A and B are different and it's not required to close stream B when stream A is cancelled.
But it doesn't work atm. As far as I understand the reason is that Context object attached to the thread handling Stream A is used by Stream B as well. Actually Stream B listens for cancellation event from the Context, that is undesirable.
The question is how to break this dependency of the Stream B from the original Context.
I have one option is to create the Stream B in a separate thread from a thread pool.
But would like to know whether this is correct or probably there are another options.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5045
Broken null check in MetadataUtils · Issue #5045 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Should be
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5046
"unknown enum constant" warnings when building with Bazel · Issue #5046 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I run bazel build //... in grpc-java at HEAD (or v1.16.1) I see many warnings like this:
This was discussed on bazelbuild/bazel#6414 and is due to a missing compile-time dependency of guava on j2objc.
What version of gRPC are you using?
What did you expect to see?
No warnings when building.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5048
Send serialized object over grpc · Issue #5048 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a third party class which implements serializable,  i want to serialize that object and send it over grpc, how do i do that. Bytestring doesn't allow byte[] from serialized object.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5056
Separate usage of io.grpc.internal.TimeProvider for time stamp and backoff · Issue #5056 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Now TimeProvider is used for both time stamp and backoff. Time stamp should reflect system clock changes (?) whereas backoff duration should be absolute amount of time of delay.
Related to #4883.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5060
Add auto-request to ClientCall/ServerCall · Issue #5060 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One of the main downfalls of using ClientCall/ServerCall directly is that you then have to call request(1) after each message. It would be easy to add the auto-request behavior as an opt-in feature. We could then change the async stub to use this feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5061
Add option to disable cancellation causing exception on Server · Issue #5061 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As mentioned some in #4351, if there is a cancellation on server-side we end up throwing an exception when sending from the async stub. That's very surprising and isn't great.
That used to be the only way of receiving cancellation notification with the async stub. However, we now have ways to let users add their own cancellation listeners. So we could either disable the throwing when using cancellation callback or have an option that will disable the throwing behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5062
Android java GRPC: Error: INTERNAL: Missing HTTP status code  · Issue #5062 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Correct response,
on android maven build I get the following error on response (note I see the correct response on the logs but the error stops it been returned correctly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5065
JVM fatal error on Google cloud logging logback · Issue #5065 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JVM crush with:
A fatal error has been detected by the Java Runtime Environment:
JRE version: Java(TM) SE Runtime Environment (9.0+11) (build 9.0.4+11)
where aprMajorVersion is native method:
private static native int aprMajorVersion();
Related issue on Netty: netty/netty#8337
Somthing wrong with loading or calling.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5066
Tracking issue for grpc Servlet API being experimental · Issue #5066 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5071
Handshake failed: when server request verify client's certificates · Issue #5071 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
i have Node.js grpc server, when i want to set checkClientCertificate in server option my android client cant connect to server and show this error in logcat
and in server console show this error :
but all things work fine if set  checkClientCertificate  to false in server.
this code work for both Node.js client/server. whats need to add or implement in android ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5075
Transparent retry should be per-hedge/retry · Issue #5075 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Transparent retry is limited to 1 attempt. It seems like that one attempt should be per-hedge and per-(higher-level) retry. In the current implementation transparent retry is limited to 1 attempt per RPC.
We should discuss whether the "scope" of the "1 attempt" and see if we could maybe even change the retry spec.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5076
Remove Census dependency from grpc-core · Issue #5076 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Census is an implicit dependency today and automatically enables itself if Census is included on the classpath. This was because that behavior was a "requirement."
I've since learned that other languages didn't implement that "requirement." If we kicked census out of grpc-core, it would be possible to add grpc-context back into grpc-core to resolve #2727 and #3522 and similar. (The general idea here is that internal could also be moved out of grpc-core, so Context-only users don't pull in as much code.)
Unfortunately that puts us in a bit of a bind for existing users, as they will probably expect that they can enable Census classloader-wide without code changes to each call site.
A possible solution to that is to provide a global interceptor API, where we allow exactly one call to a method that sets the global interceptors that are used for all Channels. The expectation is that this method would be called in main().
Another option is to add a grpc-census artifact that grpc-core looks for and uses if available via reflection. That would certainly be easier for users to update.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5078
Need a way to specify source address in GRPC C++ channel creation · Issue #5078 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
An option to specify a source address during channel Creation( CreateChannel).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5080
Upgrade to netty 4.1.31.Final · Issue #5080 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Source: yidongnan/grpc-spring-boot-starter#139
What version of gRPC are you using?
What did you see?
What did you expect to see?
Maybe a (debug) warning in the logs or nothing at all.
Possible solution
Manually updating to netty 4.1.31.Final fixed the issue
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5082
Conflict with protobufJava · Issue #5082 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5083
Java Examples Version 1.18.0-SNAPSHOT fail to build · Issue #5083 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Trying to use the grpc-java example with maven version 1.18.0-SNAPSHOT
What did you expect to see?
Running the command the documentation states it should work. Although the 1.18.0-SNAPSHOT version is nowhere to be found in public repositories.
Do I need to build GRPC from scratch myself in order to use it?
It simple doesn't work because the grpc version on public repositories is 1.16.1.
So my question is: Is there a repository address which I can use in the pom.xml file to download the dependencies version 1.18.0-SNAPSHOT or do I really need to build it from scratch?
I also tried downgrading the version of GRPC in the pom file to 1.16.1 with no avail, some classes are missing.
The main page of the github page states to use the version 1.16.1 but the examples simple don't work with it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5084
package too big · Issue #5084 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
compress the code ,discard the useless code
I am using grpc 1.10.0
however, guava is too big , which is 2.2M. I am consider whether can provide a small guava that can be use.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5085
duplicate class error in android · Issue #5085 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to separate gRPC module from my app module in Android project.
clone version 1.6.x branch and used helloworld in android examples .
move configs and .proto file to grpc_module
added dependency of grpc_module to app
take  error or all classes: error: duplicate class: io.grpc.examples.helloworld....
This is some lines of this error:
You can see this project here and see the commit changes
Check it out please
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5086
grpc-netty dependency version issue · Issue #5086 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm getting this error
If I edit grpc-netty-1.16.1.pom in my local repository and remove the square brackets in the version (i.e. from <version>[1.16.1]</version> to <version>1.16.1</version>), it builds properly.
It looks like a maven issue, question though is, do we absolutely need to specify the dependency that way?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5091
java_grpc_library output for maven · Issue #5091 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I used java_grpc_library to generate a grpc library for a project. I can use it in a bazel based project. My question is If want to publish it into the maven central repository what should I publish? I published a .jar file with a suffix (do_not_reference) but it doesn't detect it.
Thanks,
Adib
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5092
failure for proto-google-common-protos-1.0.0.pom.sha1 · Issue #5092 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
download "proto-google-common-protos-1.0.0.pom.sha1" failed when sync project with gradle;please help me ,thanks!
error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5093
Add example using #transportExecutor to apply Android socket tagging · Issue #5093 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
On Android 8 (Oreo) devices the GRPC connections get closed when strict mode is enabled in the app.
The same issue is logged for OkHTTP but they have not found a real solution so far:
square/okhttp#3537
The workaround which they suggested does not apply to GRPC because for non-TLS sockets GRPC is not using a SocketFactory:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5094
UNAVAILBLE "End of stream or ioexception" · Issue #5094 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting "End of stream or ioexception" whenever i am trying to call any function from proto file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5096
IllegalStateException: There should be no outstanding pingFuture when setting keepAliveTime · Issue #5096 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I tried to keep a channel open and send data periodically. I wanted the connection to stay open so I set setkeepAliveTime to 10 seconds and  keepAliveTimeout to 2 seconds.
In my Application I saw a lot of crashes when sending data because of an IllegalStateException: "There should be no outstanding pingFuture".
So I tried to reproduce it with the sample and saw the same error. I modified the HelloworldActivity to keep the Channel open and did set the keepAlive.
The Client crashes with the following error after waiting 10 seconds and trying to send new data:
The server shows a termination of the stream:
To reproduce, you can use the attached HelloworldActivity class with the sample server and send some data, wait over 10 seconds and try to send some more data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5097
Can http.proxyHost/http.proxyPort be used or only https.proxyHost/https.proxyPort · Issue #5097 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I was testing a GRPC client over a plain transport (no TLS enabled), and I did expect this test https to work if using http.proxyHost and http.proxyPort instead of their secure counterparts (https.*).
but I got this error :
This line here makes me doubt this is even possible:
Thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5100
How do I judge whether the grpc ManagedChannel is  available or not？ · Issue #5100 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5101
alts client throws IllegalStateException: Cannot write frames while the TSI handshake is in progress · Issue #5101 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5102
netty: Add test for h2c Upgrade · Issue #5102 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed in #4612, ProtocolNegotiatorsTest.httpProxy_completes may be a good template.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5103
When does grpc support okhttp 3.0  · Issue #5103 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
grpc-okhttp of  grpc 1.6.1  contains okhttp 2.5.0 ,but I want to use okhttp 3.0 because I need use it for  andriod glide.
I can't compaile different  okhttp's version  for andriod 's app
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5112
Reduce the number of copies of gradle wrapper binaries · Issue #5112 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seems only two or three copies of gradle wrapper are needed:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5113
Make proxy configuration channel specific · Issue #5113 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using gRPC in a java agent that is attached to our customers JVMs. The agent communicates via gRPC to our server for sending app usage metrics.
The principal contract for our agent is to not adding any side effect into the instrumented application.
We have faced a customer environment, where the outgoing gRPC connection needs to go though a HTTPS proxy, in order to reach the internet. The customer application, on the other hand, establishes outgoing HTTP connections inside their local network that don't go though that proxy.
Given that gRPC proxy configuration is done via the standard system properties (https) that are system wide, we are unable to properly configure the gRPC client to use the proxy without adding the (terminal) side effect of forcing the other HTTP outgoing connections to go though that proxy.
This could be solved if the proxy configuration could be done specific to the gRPC channel.
Any idea if/on-how i can make this work right now?
Would you consider reducing the scope of the configuration to the channel instead using system wide configuration? If yes, i could work on it if you give me some guidance
Note: Proxy authenticator config is also system wide
What version of gRPC are you using?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5114
Unable to load LoadBalancerProvider in the runtime for Bazel apps · Issue #5114 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Bazel apps if not having a (transitive) dependency for @io_grpc_grpc_java//core:util will fail with the following error in the runtime:
A temporary workaround is adding a runtime dependency in the BUILD file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5115
Could not find io.grpc:grpc-netty:1.18.0-SNAPSHOT. · Issue #5115 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Latest HEAD
What did you expect to see?
build to succeed. Why are we using SNAPSHOT versions here?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5130
document for alts examples · Issue #5130 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Because ALTS examples can only run in ALTS-enabled environments, might need a README to document the requirements.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5138
Kokoro fails with address already in use · Issue #5138 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i've been observed this on many platform, on both netty and okhttp.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5139
Make ServerBuilder and ManagedChannelBuilder one time use · Issue #5139 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling ServerBuilder.build() multiple times has unclear expected results.   We should document that builders are one-time use unless specifically called out.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5142
CallOptions#withOption() mutates original instance if existing key is overwritten · Issue #5142 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CallOptions should be immutable. However, if CallOptions#withOption() is called with a key that is equivalent to an existing custom option, the original CallOptions instance has its option overwritten.
The following test case reproduces the issue:
This causes issues when combined with AbstractStub#withOption(), as the stub's option can be permanently overwritten by ClientInterceptors. See this example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5156
Bazel 0.20.0 fetch fails on removed/deprecated native.http_archive rule  · Issue #5156 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue is already solved on master with dd89dba - this issue is about fixing it on stable as well.
What version of gRPC are you using?
(not relevant, it's a Bazel rule issue)
What did you expect to see?
To not have compatibility with a stable version of Bazel with a stable version of grpc-java.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5160
NoClassDefFoundError: io/opencensus/trace/MessageEvent$Type · Issue #5160 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
OpenJDK Runtime Environment AdoptOpenJDK (build 11+28)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11+28, mixed mode)
What did you expect to see?
Receive the following exception when sending a message:
However I can lookup and find the dependency for MessageEvent in: Maven: io.opencensus:opencensus-api:0.12.3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5165
Error: Program type already present: androidx.concurrent.futures.DirectExecutor · Issue #5165 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, does anyone face this issue while tried to running grpc implementation on android?
Error keep showing while im try to run my program
Error: Program type already present: androidx.concurrent.futures.DirectExecutor
Here is my build.gradle file content
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5166
Downgrade Guava to 21.0? · Issue #5166 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be helpful for downstream consumers of grpc-java if the Guava dependency could be downgraded to a prior release. We are using grpc-java and have been happy with how it has integrated in with existing codebases with minimal dependencies. Starting with the 1.16.x release however, Guava was upgraded from 19.0 to 26.0-android. This complicates integration with existing codebases, as going from 19.0 to 26.0-android has removed quite a few older APIs which are still used in open source and internal code. Additionally, for our use cases we'd prefer to use the -jre variant instead of the -android variant.
We are using Maven's requireUpperBoundDeps (https) in all of our projects to catch common dependency issues, which requires us to do one of two things:
Add exclusions to grpc-java dependencies or disable warnings on Guava to quiet the check. This isn't great because if grpc-java starts depending on new APIs introduced in Guava, we'll fail at runtime with MethodNotFound/ClassNotFound exceptions.
Update all third party and internal codebases to use Guava 26.0-android or later.
I've been able to successfully compile grpc-java with Guava 21.0. This is also the version in which no non-@Beta methods are removed going forward https:. Would the grpc-java maintainers consider moving to this release to make it easier to integrate into existing codebases?
What version of gRPC are you using?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5167
Client fails if server does not support ALPN ext · Issue #5167 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The server to which I am attempting to connect does not support ALPN or NPN. When using other language bindings such as Go I can still connect to this server. With the Java language binding it reports a it cannot negotiate an application protocol. This seems to be because of a check in grpc-java/netty/src/main/java/io/grpc/netty/ProtocolNegotiators.userEventTriggered that does NEXT_PROTOCOL_VERSIONS.contains(handler.applicationProtocol().
Because the server does not support negotiation, handler.applicationProtocol() return null (i think) and thus the connection fails. If I comment out this check and then the connect succeeds and everything works; which is the behavior I am seeing in other language bindings.
I have attempted to configure the negotiator using ApplicationProtocolConfig.DISABLED and custom settings on an ApplicationProtocolConfig instance, but all changes seem to have no effect.
Is there a way to configure around this, of does the Java binding simply have a different behavior?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5176
INTERNAL: HTTP/2 error code: INTERNAL_ERROR Received Rst Stream (with error code 2) · Issue #5176 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC and what language are you using?
java version "1.8.0_181"
What operating system (Linux, Windows, …) and version?
osx client, linux server
What did you expect to see?
Successful requests.
What did you see instead?
Anything else we should know about your project / environment?
I've started seeing problems after enabling the HTTPS load balancer.
The LB is connected over 443 to a pod running ESP and gRPC
Requests over REST work normally.
Here's a LB log
Note that the difference is sizes is likely just the JSON vs protobuf response
I get this both with non streaming and with bidirectional streams.
However on the bidirectional stream I get the streamed responses back and then get the error, which suggests a problem with how the stream is being closed.
gRPC: special handling of "trailer only" responses.
The gRPC protocol makes a distinction between HEADERS frame with the END_STREAM flag set, and a HEADERS frame followed by an empty DATA frame with the END_STREAM flag. The latter is not permitted, and results in errors not being propagated through nginx. Instead, gRPC clients complain that "server closed the stream without sending trailers" (seen in grpc-go) or "13: Received RST_STREAM with error code 2" (seen in grpc-c).
To fix this, nginx now returns HEADERS with the END_STREAM flag if the response length is known to be 0, and we are not expecting any trailer headers to be added. And the response length is explicitly set to 0 in the gRPC proxy if we see initial HEADERS frame with the END_STREAM flag set.
This was fixed in 1.13 according to the commit history
The problem is I can't see it in the official nginx change log (perhaps the change wasn't marked in CHANGES ?)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5178
1.17.1 not on JCenter · Issue #5178 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1.17.1 is still absent from JCenter after 8 days. The symptoms look the same as #3787 which may have been closed & locked prematurely.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5181
OkHttpTransportTest earlyServerClose_serverFailure_withClientCancelOnListenerClosed is flaky · Issue #5181 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
All tests should pass. Instead I see this failure more than once and it seems to be a flaky test:
build output:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5185
Non blocking server impl and recommended usage of Server.directExecutor() · Issue #5185 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Ive been building a non blocking implementation for kotlin coroutines on top of grpc-java. Similar to the reactive-grpc project. (marcoferrer/kroto-plus#16 & Kotlin/kotlinx.coroutines#360)
Im having a hard time finding the preferred / best practices for configuring a non blocking server.
When configuring the executor for the server, some sources point to using a directExecutor while others recommend using aForkJoinPool. Based on related discussions, it seems the former has the possibility of being unsafe?
I ran a benchmark on a coroutine base port of the existing benchmark service.
The results were in favor of using directExecutor over a forkJoinPool, but if directExecutor is considered unsafe Id rather live with decreased QPS. Another reason why Im looking for clarification is because Id like be able to outline the recommended configurations in my projects documentation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5188
"GOAWAY received","file":"src/core/ext/transport/chttp2/transport/chttp2_transport.cc","file_line":1083,"http2_error":11,"raw_bytes":"too_many_pings" · Issue #5188 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are running streaming grpc connection to transfer a lot of messages and data.
We constantly see that the gRPC server fails after sometime with "too_many_pings" errors.
The error is very consistent happening roughly at the same time and data volume.
Below are the relevant grpc debug logs. Please let me know if more logs are needed.
What version of gRPC are you using?
What did you expect to see?
Long running GRPC connection with no error.
Relevant log on server
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5189
Tracking API ManagedChannelBuilder.defaultServiceConfig() being experimental · Issue #5189 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also the API ManageChannelBuilder.lookUpServiceConfig()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5192
readme.md missing documentation for Kotlin-DSL of Gradle  · Issue #5192 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
This is in reference to the current readme.md
What did you expect to see?
Kotlin-DSL example of how to use the Gradle build extension, now that it is 1.0 with the 5.0 release of Gradle. For documentation:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5194
Clarify expectations on Stream Tracers · Issue #5194 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is specified that stream tracers run in the order they were added to the server.  This is ambiguous in the case of automatically added tracers, which is the reason for #5193 .   Talking to @ejona86 , it seems stream tracers should be independent, and the order in which they run should not affect the correctness of the run.  Tests for census which overwrite the span context break when the census tracers are added at the end of the list.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5199
copied .proto files in apk · Issue #5199 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I'm using grpc in a java module in in android application.
But when I build application all of .proto files copied in root of .apk file!
If .proto files converted to java classes by protoCompiler and compiled application do not using of them, why this happen?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5208
Cannot link to javadoc from jdk11's javadoc tool [issue originally filed at grpc/grpc.github.io#801] · Issue #5208 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See the description at
We might need to generate a package-list.html page for javadoc. Related to #3522
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5211
No such property: javaCompilerTask for class: com.android.build.gradle.internal.variant.TestVariantData. · Issue #5211 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
How can I solve this problem?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5213
Document expectations about NameResolver SocketAddresses · Issue #5213 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, a name resolver returns a collection of SocketAddress wrapped up in EquivalentAddressGroups. In the most common case InetSocketAddress will be used. Currently there are no expectations about the data in the address, but I believe we need to clarify this.
This came up in working with HTTP Proxies.  In case a Proxy is used, Netty can derive the the initial CONNECT message from the InetSocketAddress hostname.  This may be present or may not, but the behavior of this may change based on what the name resolver returns.
I don't know what to say here, other than it may be absent, but I wanted to open up a discussion because  it recently came up.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5214
Add support for Guava 27.0.1 · Issue #5214 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I tried to upgrade guava from 26.0-jre to 27.0.1-jre and I get compilation errors in my project (using bazel):
It seems like they pulled this out into the failureaccess library. If I add "@com_google_guava_failureaccess//jar", to the list of deps, it seems to work:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5215
Possible to use custom executor on server side? · Issue #5215 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
A way to have an RPC run using a different executor on the server side.
For some background, we have gRPC services where some methods are known to return quickly and other methods are slow and inherently blocking. We have the server configured to use a fixed size thread pool, so there is a risk of these slow RPCs saturating the thread pool and starving the quicker RPCs. Our approach when implementing these slow RPCs has been to manually dump work into a separate thread pool to unblock the gRPC thread.
I was looking to make a custom proto method option to indicate that a method should use a dedicated thread pool, and then respect this option with an interceptor. However, I didn't see an easy way with the ServerInterceptor interface to move an RPC to a different executor (the way you can on the client side using CallOptions#withExecutor). I assume this is because handling the incoming RPC requires choosing an executor and must happen before the ServerInterceptor chain can run?
Does this use-case make sense? Any pointers? Thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5218
DnsNameResolver uses Jndi and does not allow to use a different dns resolver · Issue #5218 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
An easy way to configure a different DNS resource resolver like netty dns because of a bug in the JNDI dns resolver.
In code we want to use a different implementation for io.grpc.internal.DnsNameResolver.ResourceResolver
Background
The implementation of the DnsNameResolver uses JNDI to resolve additonial records (like SRV and TXT). Unfortunately the JNDI implementation has a bug so that FQDN have to be used (see. https).
In our kubernetes environment are multiple namespaces for different stages (e.g.: dev, test, pre, ...) and the bug in OpenJDK requires to use the FQDN for a grpclb address, e.g.: service-foo-grpclb.dev.svc.cluster.local instead of just service-foo-grpclb.
Problem
The current implementation has no way to change the resource resolver without reimplementing the io.grpc.internal.DnsNameResolverProvider and io.
In addition the DnsNameResolver contains logic for different cases (like grpc lb - which we need) and is much more than just a simple dns name resolver.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5222
ManagedChannelImpl should not call NameResolver.refresh() if it's not started · Issue #5222 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This was discovered by internal user. ManagedChannelImpl calling refresh() on a not started NameResolver produced an exception and led the channel into panic mode.
This looks like a pre-existing issue, while made more visible (or rather, disruptive) by #5089 where refresh() started to be called from the sync context. Prior to that, the exception would be caught by the scheduled executor service, which would only end up in logs rather than panicking the channel. We should probably back port the fix to 1.18.x
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5224
 Caused by: javax.net.ssl.SSLHandshakeException: Handshake failed · Issue #5224 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Getting the following Error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5225
java_grpc_library- import not found  · Issue #5225 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I have almost a similar problem that is discussed here:
But I didn't understand the final solution. I have a protobuf that defines services and also imports some other protobufs. I can generate the proto_library without any problem but when I use it in grpc_proto_library, it gives me the import not found or file not found. I use proto_source_root in my proto_library.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5228
Add client transport using JDK 11's HTTP/2 client · Issue #5228 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java 11 added support for TLS 1.3 and HTTP/2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5238
How do I create a grpc over local socket (unix domain socket) · Issue #5238 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to create a grpc server over local host - i guess using a local domain socket would be prefereable. I saw some places that say to do:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5239
How do I create a grpc over local socket (unix domain socket) · Issue #5239 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to create a grpc server over local host - i guess using a local domain socket (unix domain socket) would be prefereable. I saw some places that say to do:
but couldn't figure out how to do it in the context of the io.grpc.netty
Also want to note, locally I'm developing on a Mac, in deployment will work on CentOS, perhaps I need to do some special config for this to work properly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5240
Unable to execute Java GRPC TLS client with 1.17.1 or 1.19.0-SNAPSHOT · Issue #5240 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Tried using 1.17.0 and 1.19.0-SNAPSHOT
What did you expect to see?
I have a GRPC server running successfully behind an envoy Load Balancer secured using X.509 based certs/keys.
I am facing a problem while creating the client for same.
Maven repository gives the option to use till 1.17.1 and the example shown on GRPC-JAVA Git suggest bumping to 1.17.3-SNAPSHOT or 1.19.0-SNAPSHOT.
I have tried using both the options i.e. 1.17.1 (maven) and 1.19.0-SNAPSHOT (MASTER branch checkout and local build/install)
Steps Performed for build/install 1.19.0-SNAPSHOT:
Checked out Master branch of grpc-java code
Assuming, this will install the required jars in my local maven repository, tried running my client as:
Error is:
Looks like the protoc-gen-grpc-java dependency is still not getting added.
Now, tried to use the 1.17.1, my pom is
Here, I am getting the error
Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.6.0:java (default-cli) on project grpc: An exception occured while executing the Java class. Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available
Any suggestions what I might be doing wrong here.
AJ
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5243
gradle build meeting problem org.gradle.api.internal.tasks.DefaultTaskInputFilePropertySpec cannot be cast to org.gradle.api.tasks.TaskInputs · Issue #5243 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5249
Support for HTTP/2 non-indexed header fields · Issue #5249 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Ability to set header names outside of a-z, -
We are trying to send a signature value as gRPC metadata, the value changes with every message.
Metadata is translated to headers in HTTP/2 which in our case, due to HPACK, the client, server and reverse proxy store in the dynamic table for header compression.
As a result the dynamic table size will increase until its full (by default up to 4096 octets).
When it's entries are removed from the dynamic table in FIFO order to make space for the new entries.
This is undesirable because of the increase in memory use in our proxy and because after X requests all the headers are resent.
HTTP/2 supports non-indexed headers, which as far as I can gather from the docs, do not get stored in the dynamic table.
You signal a non-indexed header with the first four bytes of the header key being '0001' or '0000'.
However these are non-valid ASCII characters and thus do not get through the validity check.
I'm sure the validity check is there for a reason, and I very much realize we're in an edge case here.
Would it be possible at all to bypass the check or is this something that shouldn't be done for compatibility reasons?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5251
Javadoc is failing in Travis CI for java 11 · Issue #5251 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
javadoc: warning - You have specified the HTML version as HTML 4.01 by using the -html4 option.
The default is currently HTML5 and the support for HTML 4.01 will be removed
in a future release. To suppress this warning, please ensure that any HTML constructs
in your comments are valid in HTML5, and remove the -html4 option.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5253
Travis CI java 11 flaky timeout · Issue #5253 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5254
Reset Stream accidentally sent for Connection · Issue #5254 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't have an easy repro, but I got this exception either shortly before or after getting an unexpected GOAWAY:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5256
NullPointerExceptions: okio.Sink.write() and okio.Sink.close() · Issue #5256 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I am seeing some exceptions in the client logs on Android when I try to connect to a server that's down. The exceptions show repeated attempts to write to a sink and close it, even though the sink does not exist. Maybe related to the recent buffering refactors? The channel state cycles between CONNECTING and TRANSIENT_FAILURE, and every time it gets to TRANSIENT_FAILURE this set of exceptions occurs. I don't see an impact on my process, so if it's not a real problem then those exceptions may need to be swallowed somewhere.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5258
java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument · Issue #5258 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.17.2, built jars, etc using gradle.  Java 1.8.0
What did you expect to see?
I am unable to create simple grpc objects, both in Matlab and another proprietary java application and get similar NoSuchMethodError errors.
Issue Description
So initially I am trying to get grpc-java to run in matlab, but when I tried 'o = io.grpc.ManagedChannelBuilder.forAddress('localhost', 5001)' I get the following error:
Java exception occurred:
What is interesting, I was able to get past that initial error by adding 'import io.grpc.Metadata', but still ended up with the following error:
Which didn't make any sense to me since I can build and run code on command line using same jars. So I submitted a ticket to Mathworks, and they are looking at it.
But what led me to open this ticket, is in parellel we are adding grpc-java support to another java product, that allows us to create our own plugins, and after adding grpc-java to our code, now on startup we now get the following similar error in this tool, so now I think this isn't a Matlab thing, but something else that is wrong either with something I am doing, or the code.  Any ideas?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5262
Expose ProtoReflectionService as Bazel target · Issue #5262 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Doesn't seem like its accessible by anything but gradle currently. Would be nice to add a BUILD.bazel file which exposes it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5263
Document multiple EquivalentAddressGroups vs multiple SocketAddresses in NameResolver · Issue #5263 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the javadocs don't state when to use multiple EquivalentAddressGroups or multiple SocketAddresses in a single EquivalentAddressGroup.
A group of SocketAddresses that are considered equivalent when channel makes connections.
Usually the addresses are addresses resolved from the same host name, and connecting to any of them is equally sufficient. They do have order. An address appears earlier on the list is likely to be tried earlier.
Handles updates on resolved addresses and attributes.
Implementations will not modify the given servers.
Parameters:
servers the resolved server addresses. An empty list will trigger onError
attributes extra information from naming system.
Do I use multiple SocketAddresses if there are multiple paths to one and the same server, such as 10.1.2.3 , 127.0.0.1 or ::1? (Would that ever happen?)
Or do I always create new EquivalentAddressGroups for each address? (But then why am I able to list more addresses?)
It is also unsure when (and for what) the attributes on the single EquivalentAddressGroup is used and when (and for what) the attributes from the onAddresses call is used, and finally whether they are merged somehow or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5270
large memory usage in io.grpc.netty.NettyServerStream$TransportState · Issue #5270 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
we can't see any netty leak log.
we see the JVM Old Gens pace is full.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5271
why maxConcurrentStreams  in NettyClientHandler is set to 0? · Issue #5271 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm confused why maxConcurrentStreams  in NettyClientHandler is set to 0?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5273
DnsNameResolver SRV and TXT doesn't observe search domains · Issue #5273 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There's a JDK bug:. This was mentioned in #5218.
Since SRV and TXT are still basically experimental, it's unclear how much to prioritize this. It's also unclear how we could solve this. We could use Netty's DNS resolution, although that has its own complexities and risks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5276
Android presubmit test failing due to key deletion · Issue #5276 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The oauth_token.txt file was removed grpc/grpc#17746 - core isn't using it anymore, but it is (was) still in use in this repository for setting a PR status message, see here
@jtattermusch Our Android presubmit tests are now failing. Can the key temporarily be restored to GCS? If there's a preferred way of authentication that supersedes the auth token, I can follow up by migrating but it would be nice to have the presubmit working in the meantime.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5279
Tracking issue for ProxyDetector being experimental · Issue #5279 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ProxyDetector, ProxyParameters, ManagedChannelBuilder.proxyDetector
These APIs were added for #5113
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5280
Service Config DNS TXT record attribute does not match spec · Issue #5280 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Based on the proposal, Service Config should be specified in the grpc_config attribute in the DNS TXT record. However, in grpc-java, it seems to be checking for _grpc_config instead, with a leading underscore.
This seems like a bug, and it should be checking grpc_config instead as stated in the proposal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5286
gRPC appengine executor hangs on async call · Issue #5286 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I am using gRPC client in the appengine standard java8 runtime. I want to supply appengine thread factory for the async calls. But when I specify that gRPC call hangs. I created an appengine servlet which does this and the servlet never returns any response. AppEngine logs does not show this request either.
When I specify, a normal executor the async call works. I can see the request in the appengine logs. It seems like gRPC is doing some operation that is not allowed on the appengine thread which causes it to crash.
But when I specify an AppEngine specific thread factory, the gRPC call hangs.
In #3382 @ejona86 Mentioned that appengine executor can be specified to do appengine specific calls. But that does not work. Are there tests to cover this use case ?
I started this thread https on discussion group, but after spending more time, I believe the issue is caused by this bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5288
Tracking issue for xds API being experimental · Issue #5288 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5291
Why does opencensus custom stats exporter not work in 1.18.0 · Issue #5291 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
statistics metric data through a custom opencensus stats exporter.
Glad to see that grpc 1.18.0 uses the latest opencensus. I wrote a simple stats exporter, expecting to see metric data log to json format.
But I can't see any log out, or see any data from zpage /stats and /rpcz.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5292
CompositeReadableBuffer: Failed executing read operation · Issue #5292 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC version 1.13.1 - Java version 8
What did you expect to see?
According to the comment in CompositeReadableBuffer this assertion error should never happen.
When the error occurs there is no feedback to the client.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5298
Retry scheduler in RetriableStream is racy · Issue #5298 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is racy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5301
Remove  compileOnly libraries.truth · Issue #5301 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
This is out of date. Truth 0.42 and HEAD are now both at 25.1-android.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5303
GoogleDefaultChannelBuilder does not support user-provided CallCredentials · Issue #5303 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GoogleDefaultChannelBuilder overrides the CallCredentials on CallOptions. This means that the user can't supplement the credential. Other languages will perform the union of the CallCredentials in the CallOptions and the GoogleDefaultCreds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5310
Bazel building is broken with protobuf<3.6.1.3  · Issue #5310 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Bazel build is working; currently it is broken since old protobuf versions uses the removed REPOSITORY_NAME and PACKAGE_NAME (see protocolbuffers/protobuf@af48106).
Solution
Bump protobuf to 3.6.1.3?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5313
Contributing guideline points to a dead/old link for google java style guide · Issue #5313 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue Description
While going through  CONTRIBUTING.md file observed that clicking on style guide link returns 404
What version of gRPC are you using?
What did you expect to see?
Clink on Google Java Style Guide. should open the java style guide page.
Solution
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5314
Why are multiple deps for java_grpc_library deprecated? · Issue #5314 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't see any reason for this and actually I feel like its probably not advisable. In my scenario I have 2 java_proto_library instances, my service definition and my model objects that the service is composed of. I require the ability to define both as deps for this to work.
Reading the source, it looks like this list gets added to as well, so I really don't see why this limitation is here without any docs. I would propose we remove this check, WDYT?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5315
Grpc-Java : make sure to call shutdown()/shutdownNow() and wait until awaitTermination · Issue #5315 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true.
I start a new channel by request. Is-it correct ?
shutdown not done efficiently ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5319
Upgrade Mockito dependency to version 2 · Issue #5319 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
To use Mockito version 2.
Would you upgrade the dependency to mockito 2.24.0?
Mockito upgrade guilde from 1.10 to 2.X
Background
I'm trying to clean up grpc-related conflicting/outdated dependencies.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5326
End of stream or IOException in android Pie · Issue #5326 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi
i use grpc in my android app, when i test in android Pie i see this exception when call rpc.
this problem just happen when i use WIFI , and with mobile data work fine. in other device with android < 9 work fine in wifi and mobile data.
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5330
Set custom metadata with value from response body · Issue #5330 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Question: How do I access headers.put() and responseBody at one place in interceptCall?
This is what I Intend to do:
This is how I tried:
I generated AWS s3 url (temporary) and tried sending 302 at that url. That was the general practise in HTTP server as well.
This is the Blocker:
No such concept as 302 redirect in grpc
This is the alternative I thought of:
I'll send my response with 200. But I'll set a custom metadata called location with the url present in response body. My Http proxy server could check when response metadata has location set, respond 302 REDIRECT with metadata value.
This is how I tried:
Created custom interceptor that implements ServerInterceptor
Overrode interceptCall and tried setting body to metadata
This is the Blocker:
I'm unable to get hold of setMetdata() and responseBody at one place together.
sendHeaders is the place where I'm able to set header as shown in HeaderServerInterceptor example.
onMessage is the place where I can access responseBody.
Can't find one place where I can do both!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5331
Provide JUnit 5 GrpcTestExtension · Issue #5331 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
In order to be able to test with JUnit 5 I would like to have a comparable solution like GrpcCleanupRule but as JUnit 5 extension.
Example
In my PoC project mmichaelis/poc-grpc you may see an example, which is very similar to your GrpcCleanupRule (because that was my intention 😄): In module grpc-test you will find the class GrpcTestExtension and an example usage in HelloServiceImplTest.
Help wanted?
I may assist in adding this to the grpc-java project, but there are several questions:
First of all: Do you like the extension?
Where to place the JUnit 5 extension? Into testing module? Or an extra module?
And if it is an extra module: How to share code? My intention would be to refactor GrpcCleanupRule, so that GrpcTestExtension and the JUnit 4 rule share as much code as possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5332
Tracking issue for Server.getListenSockets() being experimental · Issue #5332 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Usage:
Server.getListenSockets()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5334
Set context in executor when calling Credentials.getRequestMetadata · Issue #5334 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I've written a custom implementation of a com.google.auth.Credentials class which retrieves tokens from etcd (using their v3 gRPC api). I'm attempting to trace these method calls by using the Context to link work done on separate threads. I've discovered that the Context is not available in my Credentials class (specifically when getRequestMetadata is called using an executor).
I've been able to work around this temporarily by changing:
Is it expected that the Context be available for use in a custom Credentials implementation? By doing so, this might also help to close some other open issues (#4929) and also allow deadline propagation to work properly when authenticating against a gRPC api.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5335
Server cert hot reloading · Issue #5335 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Server can reload new cert without restarting
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5337
GRPCLB should keep drop index when new picker is created due to subchannel state change · Issue #5337 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently in GrpclbState, subchannel state change produces a new RoundRobinPicker, which has dropIndex initially 0. This may cause the client to drop more or less percentage of requests than the percentage of drop entries in the list.
To fix the problem, the dropIndex of the previous picker should be passed to the new picker, if the new picker is due to subchannel state change. dropIndex should be a mutable integer (maybe AtomicInteger) shared by the previous and new pickers, so that the new picker doesn't take a premature snapshot of it.
In the case where the balancer sends a new drop list, dropIndex will keep starting from 0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5340
OkHttpTransportTest.serverChecksInboundMetadataSize is flaky  · Issue #5340 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5343
Java 11: cannot find symbol javax.annotation.Generated · Issue #5343 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Related issue
These workaround for java 9 seems to be no longer working for java 11. Anyone faced this issue before?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5346
ServerBuilder and listening · Issue #5346 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the standard way to listen on a socket is to call addPort(), but from recent requests, this API is too limited.    I would like to explore some ideas for expanding this functionality.  Specifically:
Make a standard way to add multiple ports to a single server.
Make it possible to listen on things other than ports, in particular SocketAddresses.
Make it possible to add more ports / sockets after a Server has been built.
This would effectively allow a server to add ports after start()
Maybe allow servers to gracefully close ports they started on.
Support having no listening ports on the builder.  This would mean adding a ServerBuilder ctor that has no ports at all.
This issue is more exploratory rather than mandatory.  Right now the request is just to listen on multiple ports, but we should be careful to not add overlapping APIs (such as on both Server and ServerBuilder).
cc: @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5348
Split java_lite_grpc_library from java_grpc_library Bazel rule · Issue #5348 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed in #5237. This is already the direction the rule was going.
Before making the change, I need to get some agreement internally that the benefit outweighs the churn to our users. Otherwise I wouldn't be able to migrate existing usages.
There will need to be a long period where the new rule exists and you can still specify "flavor" for the old behavior, to allow migration.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5349
Consider dropping 'srcs' from java_grpc_library Bazel rule · Issue #5349 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is to simplify java_grpc_library by only specifying the 'deps' pointing to the java_proto_library.
This has come up a few times internally as well as in #5237.
We'd need some cross-language agreement. In general we don't have many spare cycles to work on something like this cross-language right now, so there will probably be some push-back simply because what we have now "works."
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5354
How to deploy java grpc applications in aws cloud? · Issue #5354 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to deploy the grpc services in AWS but AWS is not supporting http/2 port. any other way to deploy in aws?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5359
bazel: migrate to deps of maven_install · Issue #5359 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
jvm_maven_import_external (and jvm_import_external) allow providing deps which will be added to the java_import in the generated workspace. You can refer to the target that includes deps via @com_google_guava_guava instead of @com_google_guava_guava//jar.
Unfortunately, if we use the non-//jar targets, they aren't available with maven_jar so it'd break users that haven't migrated from maven_jar to jvm_import_external/jvm_maven_import_external. See also #5214
We need to notify our users we will require the deps to be provided appropriately and give them some time to migrate. This includes dependent tools, like http.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5363
Test failure: serverChecksInboundMetadataSize FAILED · Issue #5363 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not sure why this would flake.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5366
configurable jitter in maxConnectionAge · Issue #5366 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
We have a gRPC streaming service that supports long running streams. We want to have maxConnectionAge on them. The current issue we are facing is, NettyServerBuilder adds hardcoded +/- 10% jitter on the connection age passed. In our case, we would like have to more wider range as these are long running streams.
The proposal is to add a overloaded maxConnectionAge method with jitter% as additional argument.
Is this some thing that is acceptable?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5369
Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available · Issue #5369 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The jar should be running fine.
I am using java 8 to build an executable jar. Below is the java version:
After building, I am running the jar on an AIX7.2 machine as follows:
But I am getting the following error while running:
What is the problem here and how to solve this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5370
BC BREAK on NettyChannelBuilder.newClientTransport after 1.13 · Issue #5370 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are affected?
What did you expect to see?
After 1.13, the signature of the method newClientTransport was modified. Since this is a public method, and not package private, this should be done only in MAJOR releases (2.x).
My dependency manager (Gradle) considers 1.16 as backwards compatible with 1.13  (which is correct and make sense), so as some of my dependencies is requesting 1.16, it installs that version. There is another library that depends on 1.13 and relies on the old signature of newClientTransport.
As per semver rules (), please release a new MINOR version (1.19) reverting back the signature to the old one, OR alternatively maintaining both and identifying the old one as DEPRECATED, so it can be removed in 2.x.
For anyone else facing the same issue, temporarily add the following to gradle:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5371
Allow GRPCLB_NAME_PREFIX to be configured per service in DnsNameResolver · Issue #5371 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Feature Request
Some third party servers that I try to connect to don't expose their grpc service addresses with the grpclb prefix, so it would be nice if I could configure the service name lookup by providing a custom service prefix.
Example
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5375
StreamObserver.onError not called on android when network switches to Roaming · Issue #5375 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
StreamObserver.onError getting called when network type changes to Roaming
Actaul observation
On android, for bidirectional streaming, if the user has not acrtivated Connect to data services when roaming and if the network type is switched to roaming, StreamObserver.onError isn't called. As a fallback, I tried creating a new RPC stub on the existing ManagedChannel, but to no avail. Only when I created a brand new channel along with a new stub, did the StreamObserver.onError was called the next time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5376
Running gRPC service in docker container · Issue #5376 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to run a few micro-services inside a docker container using docker-compose. One of this services is a gRPC-Java with auth credentials that will work as a server. When I'm creating the ManagedChannel I build it as follows:
ManagedChannelBuilder.forAddress(host, port).build();
But when running locally with docker-compose I need to use usePlaintext() because the server is not expecting any auth or I'll get:
What version of gRPC are you using?
What did you expect to see?
Successful communication without adding specific usePlaintext() for local run and removing it for other environment.
Is there a way to set a default ManagedChannel that would set the  usePlaintext() if necessary ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5383
Bazel incompatible changes · Issue #5383 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This repository doesn't build with Bazel future incompatible changes, and will break with future releases of Bazel.
In order to detect the issues in advance, you can try Bazelisk:
Some of the issues can be fixed automatically using Buildifier:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5385
bazel: export `:internal` from `:inprocess`  · Issue #5385 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
examples's tests compiles.  Currently, it does not since a few supertypes of inprocess lives on the internal package which inprocess depends on but does not export it. The solution is simple:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5386
NettyServerBuilder protected stat setters? · Issue #5386 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Wondering why these are protected and not public? Especially given this is a final class, who are those for? Should I be able to set those as a public user of the NettyServerBuilder?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5389
grpc-java latency seen more than 1-2ms for 0.6% txn(Total 2M txn) · Issue #5389 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Hi,
I am running simple sync java "Hello" client & server and sending around 2M messages from client to server.
At start the latency is in milliseconds due to warmup & after sometime latency seen is 400-600 micro seconds.
But approx 0.6 % of the messages show latency of  more that 1-2 ms and this is seen through out the run not just at the startup.
Please help me why this happening and is this expected behavior,If yes,why?
If NO, then what is the possible way to debug this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5392
proper publish-subscribe pattern using grpc · Issue #5392 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, i'm trying to implement pub sub pattern using grpc but i'm confusing a bit about how to do it properly.
my proto:
server service:
How to remove clients from global observers properly? How to received some sort of a signal when connection drops?
How to manage client-server reconnections? How to force client reconnect when connection drops?
Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5393
Stop using //jar from jvm_maven_import_external targets · Issue #5393 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed in #5214, the current //jar usage (like @com_google_guava_guava//jar) is broken when it comes to cross-workspace transitive dependencies. But that's all that was possible with maven_jar. The proper fix to this is to use the deps feature of jvm_import_external/jvm_maven_import_external.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5394
Move publish exclusion logic from top level gradle.build to subproject · Issue #5394 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Move publish exclusion logic from top level gradle.build to subproject (xds, gae-interops)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5399
Tracking issue for MalformedConfigException being experimental · Issue #5399 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5400
tcp SEND-Q keep accumulating bytes · Issue #5400 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm currently using two spring boot application, one for client, one for server, using grpc-lognet dependency in server side.
I created client side with ManagedChannelbuilder.
I use channel as a bean and injected in class. and use like this
is that okay to do this??
and it gives me unavailable io exception intermittently. (also I have no idea that it works in production level)
I checked my server status of tcp, and it shows some accumulated bytes in Send-Q. and sometimes this value goes up like over 2000. And the connection between server and client stopped.
like this
is that alright to use plaintext? or am I missing something?
plus, I've tried using withDeadlineAfter option on each grpc stub. It gives me an [error] deadline exceeded instead of [error] grpc unavailable io exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5404
MoreExecutors.platformThreadFactory() for java8 on app engine? · Issue #5404 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't have good understanding about app engine restrictions, but a Bigtable customer recently ran into an issue because the Cloud Bigtable client did not use MoreExecutors.platformThreadFactory() for java8 on app engine (only for java7). It seems like grpc-java has a similar issue:
Should IS_RESTRICTED_APPENGINE be updated to include 1.8 for executor creation?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5412
(cd examples; bazel build //...) fails with bazel 0.23.0: conflicting actions · Issue #5412 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Seeing this on v0.19.0 and master.
What did you expect to see?
Successful build.
This is what I'm seeing:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5414
How to close ServerCall in ServerCall.Listener? · Issue #5414 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am writing a ServerInterceptor which will inspect one field of request message and determine whether current user can do this operation, If not, server will send Status.PERMISSION_DENIED to client and close. Now I almost approach it, below is reduced code
But this code will raise exception in server
I looked at some source codes, and found that seems like there is not a simple API exposed I can use to close ServerCall in ServerCall.Listener. And I don't sure how I can implement custom ServerCall.Listener, ServerCall or something else to achieve this. And how much work I need to do. If it is too much work to do, I think I have to put this permission check into every handlers in MyServiceImplBase.
Could someone give advices?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5422
Android lint InvalidPackage: javax.naming · Issue #5422 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Sample project:
Running ./gradlew :app:lintDebug triggers errors:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5428
received message twice in provider side during performance testing? · Issue #5428 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using Client-Side RoundRobinLoadBalancing, met an issue
invoke gRPC call once, but received same message in provider side twice during performance testing.
Had anyone met this before?
Or is this an known issue?
Thank you very much.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5433
Allow configuring onReady threshold · Issue #5433 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
v1.17.1, though this hasn't changed in later versions
What did you expect to see?
Right now isReady applies backpressure once 32 KiB of data is buffered:
However, our use cases involve larger payloads (1-2 MiB/message), which means that sending any message immediately applies backpressure. We'd like to maximize throughput, so we're OK with more memory usage (to a point). We've also found in our own benchmarks that sending a couple messages beyond when isReady changes to false increases throughput reasonably (about ~50%).
While this is an okay workaround, it'd be more convenient to be able to set the threshold manually; also, then we can manage how much data is actually enqueued, instead of selectively ignoring the backpressure signal.
Would it be acceptable to make this setting not static final (or at least not final)? Or is there another way to adjust the backpressure threshold?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5435
grpclb: SubchannelPool should handle state updates for cached Subchannels · Issue #5435 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GrpclbState tracks Subchannels' states as a mutable attribute in Subchannel.getAttributes(). However, GrpclbState only update this attribute for the Subchannels its managing.  For those cached in SubchannelPool, their state attributes are stale. When they are given back to GrpclbState, IDLE state is assumed, and will not be used for picking even if the actual state is READY.
To fix this, two changes are needed:
Expand SubchannelPool interface to handle Subchannel state updates, which GrpclbState will call. SubchannelPool should save the state separately, not in the existing attribute.
When SubchannelPool gives a cached Subchannel back to GrpclbState, it needs to schedule a call to handleSubchannelState() in the SynchronizationContext, so that GrpclbState will take the latest state as if it was just reported from the Channel.
Thanks to @menghanl for reporting this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5436
grpclb: should use fallback addresses if no balancer address is given · Issue #5436 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently it will just fail all RPCs. We should instead enter fallback mode immediately.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5439
InProcessChannel with optional stack trace · Issue #5439 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Error Stack trace.
In reference to this stack overflow question: here
Is it possible to have an option to show full stack trace for InProcessChannel, since I use this in integration tests and I need to see full reason of exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5450
Data race in NameResolve.Listener.onError · Issue #5450 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NameResolve.Listener.onError can be called concurrently in different threads, so the following code in onError() impl may have data race.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5451
grpc-compiler artifact not found · Issue #5451 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
is in the BOM. However there seems not to be any such artifact on Maven Central.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5457
When having multiple clients with their own stream request observers invoking a server grpc method , after one client receives onError , call is terminated for all other clients  · Issue #5457 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I expected that only Client 2 will not receive any more messages , but client 1 will continue to .
How can we manage multiple threads/ clients in this scenario ?
Sorry if this is a very basic question, I did research a lot but could not find relevant solutions.
I have a code where there are multiple threads , executing the same rpc  method  ( server streaming) , within which a new channel/stub is constructed to the same gRPC server.
The clients keep receiving data through onNext of the request observer, until one of them throws an error and results in an onError() invocation.
StreamObserver documentation mentions that after OnError() further calls cannot be made, but in this case , there are multiple clients , each with their own streamobserver object.
What is the best way to handle this ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5458
exception at runtime when trying to start the server · Issue #5458 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
getting this exception when running my application at startup. Not sure what is the root cause for it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5460
Please, extend support for the GraalVM native JVM target · Issue #5460 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See some work done on
If this is backed in in the library, then all users would benefit.
See googleapis/google-cloud-java#4664 for more context.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5465
publishToMavenLocal failed in checkArtifacts · Issue #5465 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
When I try to build master 1.20 on Mac, ./gradlew build -PskipCodegen=false succeeded while ./gradlew publishToMavenLocal failed at grpc-compiler:checkArtifacts.
Here is the error output:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5466
GRPCLB not conformant to LB policy selection spec. · Issue #5466 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Per the documentation on ServiceConfig from
the presence of balancer address take precedence over the
deprecated LoadBalancingPolicy.  The current implementation
does the opposite, because it converts LoadBalancingPolicy to
the new LoadBalancingConfig which takes higher precedence.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5467
Enhancements to examples · Issue #5467 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Latest
What did you expect to see?
each example should have a README file which a user can read to understand the example.
an extensible, consistent and logical directory hierarchy for the examples. I think the current directory structure can be enhanced to make it more user friendly
improved documentation: better content, links, fixed typos/grammar
dependency on released version: the current master (SNAPSHOT) version of examples depends on master (SNAPSHOT) version of the grpc library. Can we change it to depend on the latest released grpc version so the user who just wants to build examples doesn't need to build the grpc library?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5468
Server shutdown, client see different errors · Issue #5468 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the issue I originally posted on grpc/grpc-go#2679
What version of gRPC are you using?
What version of Go are you using (go version)?
go version go1.11.4 linux/amd64
What operating system (Linux, Windows, …) and version?
Linux, 4.14.97-90.72.amzn2.x86_64
What did you do?
If possible, provide a recipe for reproducing the error.
It's bidi stream, and the client is do thing just like: (I open multiple stream inside the same go client).
and server side is java, using 1.17.1, and the server side code,it just normally send stuffs into stream, and everthing is ok, and when I do engine.shutdown() in server side,
I see the above code received different kinds of err, some of them is
and some are:
and In my go code, I didn't seem to do cancel to the stream, why I got some cancel errors?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5471
Customise code generation to not include final methods · Issue #5471 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I use grpc-java as part of the quarkus-grpc-extension. The extension enables to use grpc-java in Quarkus. One of the extension's feature is to use CDI in gRPC services. gRPC services and interceptors should be singletons and my first attempt to make them @ApplicationScoped failed due to a final method in the generated service code (final on bindService()). This makes it hard to create a dynamic proxy.
It would be great if one could customise the code generation in a way that the user can control whether he wants to have final methods or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5479
./gradlew installDist results in an error com.google.protobuf not found · Issue #5479 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Using gRPC v1.19.0 in CentOS 7.
What did you expect to see?
From the checked out folder, the below two commands were executed without any error.
Then I changed my working directory to examples and tried to build examples
I got the following error
What could be the error ? I have protoc 3.6.1 installed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5482
Invalid UTF-8 ByteString generated for uint64 greater than value 55903. · Issue #5482 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a nested message, setting uint64  to value greater than 55903 causes ByteString of message to be invalid UTF-8.
Issue is reproduced using a sample project
Details are in the README.md of this project.  But, for a quick reference for the important files:
What did you expect to see?
ByteString to of message to be a valid UTF-8.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5487
connection waiting for very long time grpc v13.1 · Issue #5487 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
I am using old version v13.1 grpc java client
JDK11 , GRPC Service fronted by Load balancer
What did you expect to see?
We use unary blocking call for sending the request like,
I observed some requests are waiting even past the configured deadline, currently 300ms
From the thread dump I see,
and this waits on the waitAndDrain for more than 12 hours.
I tried upgrading to v1.19, seems the problem go away, still monitoring it. But want to understand does this any resolved issue from earlier versions?
I see lot of issues reported in the older versions regarding stream close and connection waiting  grpc/grpc-go#1462 , grpc/grpc#11643 but withDeadline not being honored seems a little concerning to me.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5489
Grpc Server read client ip address and send to service  · Issue #5489 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I wrote interceptor like this
now i want ip address which was captured above to be sent to my services whenever my method get called so that i can add debug log by creating client ip and request data dump in server logs.
Pls suggest a better way.
if metadata which i send from the client have an unique id which i set in server context(key=unique id ,value=client ip address) and while making my method call i set this unique id in request params and compare both(context and request parameter of unique id) at service level. For this approach i need to rewrite my proto file which "I DON'T WANT TO DO".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5490
Throwing StatusRuntimeException from within a ServerInterceptor · Issue #5490 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I'm using a gRPC interceptor which sometimes throws a StatusRuntimeException with status code PERMISSION_DENIED - there is also a io.grpc.util.TransmitStatusRuntimeExceptionInterceptor in my list of interceptors (#2189). The PERMISSION_DENIED code successfully gets sent to the gRPC caller, but there is always this exception stack trace logged out by the gRPC server.
I haven't been able to find a way to get rid of this ERROR log, and would rather not disable or tune down the logger itself. It looks like the TransmitStatusRuntimeExceptionInterceptor closes the call early on a StatusRuntimeException being thrown which then means when another interceptor calls e.g. onHalfClose() this error appears.
Is there a better way to go about using StatusRuntimeException or closing calls early in gRPC interceptors in general, in order to avoid ERROR logs like this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5493
Exception java.lang.IllegalStateException: Could not find policy 'pick_first' · Issue #5493 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
When executing the Quickstart class of Google Firestore Service I get this exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5494
Channelz should use milliseconds for timestamps · Issue #5494 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#4883 changed the TimeProvider.currentTimeNanos()'s precision to milliseconds, because there isn't a way to get the current time in nanoseconds precision. After #5056 is fixed, Channelz/ChannelTracer will be the only users of TimeProvider, and they all convert the time to proto Timestamp which doesn't mandate the unit. It will only be misleading to keep TimeProvider.currentTimeNanos() as is. It should be changed to currentTimeMillis().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5495
Implement LoadBalancer.Helper#createResolvingOobChannel · Issue #5495 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The interface was added in #5415 but is not yet implemented.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5496
Extract name-resolution logic from ManagedChannelImpl for re-use · Issue #5496 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First mentioned in another comment, and then discussed with @ejona86 and @dapengzhang0, it was concluded that we need to extract the following logic:
Parse the target string and convert it into a URI
Manage NameResolver retries
Wire up NameResolver and LoadBalancer
out of ManagedChannelImpl, and make it usable in the following cases:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5497
Move LoadBalancer.handleSubchannelState() to a per-Subchannel listener interface · Issue #5497 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In hierarchical LoadBalancers (e.g., XdsLoadBalancer) or wrapped LoadBalancers (e.g., HealthCheckingLoadBalancerFactory, the top-level LoadBalancer receives Subchannel state updates from the Channel impl, and they almost always pass it down to its children LoadBalancers.
Sometimes the children LoadBalancers are not directly created by the parent, thus requires whatever API in the middle to also pass Subchannel state updates, complicating that API. For example, the proposed RequestDirector includes handleSubchannelState() solely to plumb state updates to where they are used.
If we instead pass a listener when creating a Subchannel to accept state updates, those updates could be directly passed to where the Subchannel is created, skipping the explicit chaining in the middle:
If a wrapping LoadBalancer wants to look at or alter the Subchannel state updates for its delegate (like in HealthCheckingLoadBalancerFactory), it can still do so in the wrapping LoadBalancer.Helper passed to the delegate, by intercepting the SubchannelStateListener.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5498
Setting a deadline for a long-lived streaming stub · Issue #5498 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using an implementation of bi-directional gRPC streaming, and are interested in setting an appropriate deadline for each request. The stub is used for a long-lived/high throughput stream.
When using unary, I know we could create a new stub for each request, then use it for the unary request.
However, with streaming, the stub is used for lots and lots of requests. Is there a way to set the deadline for an existing stub on on a message by message basis? I did not see anything for streaming deadlines in the examples https://github.com/grpc/grpc-java/tree/master/examples.
In our code, we are using requestStreamObserver.onNext(requestMessage) to queue up each message for sending.
What version of gRPC are you using? 1.19.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5507
I would like to contribute a streaming timeout/deadline example · Issue #5507 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I recently talked to @carl-mastrangelo about how to add timeout/deadline support for bi-directional gRPC streaming (see #5498). The solution works great. I would like to contribute an example for how to do this to the Examples area of this repository. I wanted to check with the grpc-java team first before submitting a PR to make sure you are good with this. The main idea is to provide an example that others can benefit from when using streaming. The documentation for gRPC says that deadlines are important (to avoid the default internal possibly indeterminate timeouts), so I think it would be good to include a sample that others could work from.
Please let me know what you think. If in agreement, I will draft and submit a PR.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5509
Use the JWT service builder in GoogleAuthLibraryCallCredentials · Issue #5509 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
GoogleAuthLibraryCallCredentials.JwtHelper uses a deprecated constructor to create a ServiceAccountJwtAccessCredentials.  The deprecated constructor was removed in google-auth-library-java's 0.14.0 release, but given its use in grpc, the Constructor was re-added in 0.15.0.  The deprecated constructor will be removed in future releases.
There are*Credentials.Builder which is the preferred method of creating any Credentials, and have been available since the 0.8.0 release.  Please use ServiceAccountJwtAccessCredentials.Builder instead of the ServiceAccountJwtAccessCredentials constructor.
NOTE: I will submit a PR for this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5510
There should be a way to disable OpenCensus stats and tracing · Issue #5510 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, out-of-the-box client and server config includes a very expensive "no-op" in the form of the enabled-by-default opencensus tracing and stats interceptors. This is the case even if no implementation library is on the classpath, and disabling them is difficult/discouraged/impossible (without reflection) depending on the transport.
There's also significantly more garbage produced when enabled.
It would be great to enable these only when the impl library is detected, however:
There are circumstances when it might be there but not used
It may be the case that only one of stats or tracing is being used
Even if it is being used, instrumentation overhead of this magnitude may be considered undesirable (and these numbers are just the api plumbing without any additional cost from the impl itself)
Could these be changed to be disabled by default? I'm unsure why such settings are considered internal when they pertain to external functionality. There's not much danger of anyone "accidentally" leaving it disabled since it would be immediately apparent that the stats aren't working but the converse is of course true and I would assume most common.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5513
Update GoogleAuthLibraryCallCredentials to use non deprecated constructor in google-auth-library-java · Issue #5513 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In google-auth-library-java, we will be removing a deprecated constructor in ServiceAccountJwtAccessCredentials: https
This is currently used in GoogleAuthLibraryCallCredentials:
This implementation will need to be changed to be compatible with future versions of the auth library.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5519
Why is startup so slow? · Issue #5519 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Using the example code there's a ~5second gap during the startup of the server, which seems odd...
I assume this isn't normal / intended, but it's unclear what is causing this and what could solve it ...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5523
Android Interopt Test is breaking due to mockito upgrade · Issue #5523 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5528
Use resolved versions instead of resolutionStrategy.failOnVersionConflict · Issue #5528 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Gradle 5.2 added support for publishing the resolved versions of dependencies used.
We are currently using failOnVersionConflict because we didn't have a way to check that Maven would resolve dependencies correctly. Although failOnVersionConflict is similar to Maven Enforcer's dependencyConvergence, we only care about supporting requireUpperBoundDeps.
Unfortunately, resolved versions seems to be sufficient only for direct dependencies. A transitive dependency included twice could have the lesser of the two versions first (and so Maven would chose the wrong one). That may not happen very often, so we could potentially rely on things like https to notice failures. failOnVersionConflict is a PITA and error-prone, so even suboptimal tradeoffs may be welcome.
Using resolved versions is also of interest to #4680.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5529
Convert C++ compilation to new Gradle C++ plugin · Issue #5529 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There's lots of improvements, but the most functional is composite build support. That would allow Android builds to --include-build .. and avoid the need to first install to maven local.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5530
Consider converting grpc-bom to Gradle's Java Platform Plugin · Issue #5530 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java Platform Plugin can be used with Maven Publish plugin to produce a BOM. It'd be nice in that it would remove our custom XML creation, but it's also minor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5533
Use AndroidTicker instead of default system ticker · Issue #5533 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The internal import detected an errorprone from #5491:
Stopwatch.createUnstarted(AndroidTicker.systemTicker())
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5534
GrpclbLoadBalancer should have full control over the lifecycle of StopWatch · Issue #5534 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would be good to add another GrpclbLoadBalancer constructor without the StopWatch argument. The old constructor is just @VisibleForTesting, and GrpclbLoadBalancerProvider will call the new constructor. In this way, GrpclbLoadBalancer can have full control over the lifecycle of the StopWatch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5539
Assessment of adoption r8 to take place proguard in Android build. · Issue #5539 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5540
Throw away mockito from AbstractInteropTest · Issue #5540 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is only little usage of mockito in AbstractInteropTest, and it's causing problems in android-interop-test #5531 (comment) .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5543
Impossible to ignore ALPN negotiation failure · Issue #5543 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Setting the ApplicationProtocolConfig to SelectedListenerFailureBehavior.CHOOSE_MY_LAST_PROTOCOL should unconditionally choose the last protocol even if ALPN negotiation didn't yield any protocols.
Related to #5167
Looking at the logic in io.netty.handler.ssl.ReferenceCountedOpenSslEngine.DefaultOpenSslSession.selectApplicationProtocol(), selectApplicationProtocol() is only invoked if
applicationProtocol is not null. The method selectApplicationProtocol() will ignore the negotiated protocol if CHOOSE_MY_LAST_PROTOCOL is selected and the selected protocol is not in the list of protocols.
It seems inconsistent to be able to ignore the results of the ALPN negotiation only in the case that the negotiation yielded some protocol but not in the case that it yielded no protocols.
Use Case
I am using an AWS Network Load Balancer (NLB) to perform TLS termination for a gRPC application. The NLB cannot perform ALPN but the backend server which is implemented using grpc-java is HTTP/2 capable and tests using Go or Python based gRPC clients succeed against the server via the NLB.
I would like to be able to invoke the application using grpc-java and force the use of HTTP/2 even though ALPN negotiation will not succeed as I know the backend is HTTP/2 capable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5551
Let Netty decide number of threads for default NioEventLoopGroup · Issue #5551 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
netty/src/main/java/io/grpc/netty/Utils.java:
DefaultEventLoopGroupResource decides the default parallelism for the NioEventLoopGroup if numEventLoops is 0. Please let Netty decide that because we can override the value with a property (io.netty.eventLoopThreads) instead of in code. Please let 0 (the default) pass through.
Thanks,
Michael
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5552
java Client -> nginx GRPCs ssl -> java Server using DNS · Issue #5552 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
have an answer by the server using TLS MUTUAL through nginx
currently I have generated the relevant certificates so that the communication is carried out between java client -> nginx (GRPs ssl) -> Java server but the problem is when I try to integrate the TLS part with the CA CRT certificate and probe with CA in Bundle and normal CA and does not achieve communication, it should be noted that these same certificates I have with NODE - GO and it works without problems if I mix NODE -> JAVA, GO -> JAVA works sim problem being JAVA the client my question is. how can I validate the certificates at both ends and that it depends on the MUTUAL TLS connection being carried out correctly
sorry for the bad inglish THANKS
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5556
Breaking change in NameResolverProvider with latest release · Issue #5556 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I use yidongnan/grpc-spring-boot-starter 2.3.0 and use custom NameResolvers to connect remote services. Due to interoperability conflicts with java's service loaders I cannot directly access/use the provided grpc NameResolvers and have to first use spring logic to determine the remote host before using the NameResolvers.
Due to the changes introduced in grpc-java 1.19 (method parameter change) I am now unable to
use the 1.18 API with NameResolverProviders.
The change in https simply exchanged the parameters without providing a method for backwards compatibility.
Due to this change I'm unable to provide support for either <=1.18 or >=1.19 versions.
I know that at some point the other method will be removed, but I hope to have some time for migration.
Did you forget to add the method override or is it intentional?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5557
How to solve `Warning: io.grpc.netty.shaded.io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter:`? · Issue #5557 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
i am using google translate api's, when i get release build throw the bellow warning's from android. I search many examples but still i get this warning. Please any one give me an solution to solve the error.
Here i mention my gradle file and warning output.
Please anyone give me a solution for this error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5558
Where to keep message definitions, generated classes and how to version them? - good practices · Issue #5558 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there.
I have question to people who are experienced in using gRPC in multiple microservices architecture written in Java.
TLDR: Where is the single source of truth for message/service definition and how to integrate it with CD?
Do you keep .proto files within repository that provides gRPC server or separated code base?
Do you compile .jar with those classes and pushes it to private repository to make them accessible to other consuming apps or they should generate those classes on their own?
How do you version those packages?
I imagine this situation: Me and my team develop microservice Order. We define our OrderService and I/O messages. We deploy our OrderApp v1.0. and OrderServiceProtos v1.0 (artifact in private repo)
There is another team developing Customer service and they want to use our OrderService to fetch some data. I assume their only resposibility is to download jar with our generated classes, create Channel, create Stub and go fetch some data.
Next week my team add some method to OrderService. We deploy OrderApp v1.1. and OrderServiceProtos v1.1 (artifact in private repo). We notice another team about update. At that moment they know about update and they can fetch the most fresh jar.
So I wonder: ​ Should I bump OrderServiceProtos everytime I deploy new version of OrderApp ?
What if our CD pipeline runs many times everyday (20+)? I don't want to compile and deploy OrderServiceProtos v1.3 that looks exactly the same like v1.2 (because only the App part was updated and CD pipeline ran)
I am wondering if anyone of you had this same considerations.
Or maybe flow with published artifact as a single source of truth is not correct?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5562
Add support for custom attributes in NameResolver.Helper · Issue #5562 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Related
Feature-Request
The java service loader API has the drawback that it creates instances without context.
In my case it creates NameResolverProviders without spring's dependency injection.
With the Attributes API that present up to and including 1.18, I was able to pipe the potentially required beans/config to the actual implementations. Now this path is blocked.
Lets assume we have a config which contains the "service discovery server URL".
Somehow we need to push this tiny piece of runtime only information into the ServiceDiscoveryNameResolver(Factory).
We now (1.19 or later) have basically three options:
Encode everything in the URI
This will soon become a nightmare for every maintainer as more and more properties needs to be encoded for the potential case that one provider needs them. This option cannot pass more complex instances such as a RestTemplate or HttpRequestOptions.
Use static fields to pass the variables
Well you can pass anything through static variables, but using them to transfer something stateful sounds like a bad idea and fails as soon as the load order is slightly of or multiple distinct instances of gprc-services run in the same JVM (to save some memory).
Wrap the NameResolverProvider (registry) in another (spring-managed) registry that will first try to use the contextual name resolvers before falling back to the grpc-managed ones. Well this works but somewhat defeats the purpose of specifying priorities and availability in the first place.
Prior to 1.19 we also had a forth option:
Pass the context through the attributes
In yidongnan/grpc-spring-boot-starter I use the third variant, but also considered using the forth variant because it would free my code from conditional wrappers and would allow adding other contextual name resolvers more easily.
I currently don't use the extra attributes, but I considered it for future simplifications.
The DiscoveryClientResolverFactory is currently my only contextual name resolver. In this example I could request the DiscoveryClient bean from the applicationContext instead of passing it in the constructor.
IMO it would be best to revert the helper back to the unspecific attributes or add an optional, mutable and unspecific attributes to the helper because:
A single getCustomAttributes() : Object would fail as soon as another layer of context is added on top.
At least the default port is useless when other service discovery mechanisms are used. I'm not sure whether I would call it an implementation detail but at least it's related.
There is no factory method/forwarder class to overwrite one value with another without risking to become fragile to changes to the helper class which seems to be the case for 1.21 again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5574
WriteBufferingAndExceptionHandlerTest is flaky · Issue #5574 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looks like the local address is not being cleaned up fast enough
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5576
ClientCall errors does not finally invoke ClientCall.Listener.onClose() · Issue #5576 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
ClientCall.Listener.onClose() should be invoked when there is a ClientCall error for unary calls.
When there is an exception thrown by call.sendMessage() or call.halfClose() within asyncUnaryRequestCall(), it results in cancelThrow() calling ClientCall.cancel() and scheduling a stream closed task (i.e. ClientCall.Listener.onClose) on the executor.  However, the exception propagates up to futureUnaryCall  and blockingUnaryCall which catches it again, calls cancelThrow() again but never drains the executor within the try-catch block.  Thus ClientCall.cancel() is called but not ClientCall.Listener.onClose() on client call errors.
Is ClientCall.Listener.onClose() expected to be called whenever the client call terminates?  Is dropping the ClientCall.Listener.onClose() call a bug or expected behaviour?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5583
Huge Off-heap memory used by java.nio.DirectByteBuffers · Issue #5583 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Problem:
When I run stress tests with my grpc-java server on amazon linux 2, I saw huge process memory usage, but It was not heap memory or Metaspace (they are pretty small).   so I took heap dump and use jxray to generate the report, I saw huge off-heap memory usage.
Here is the screenshot:
However, the server is running perfectly ok on my Mac pro with the same code.
And here is my code to start grpc server:
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5584
not able to connect to grpc server getting 'First received frame was not SETTINGS' · Issue #5584 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I generated java code from maven plugin 'grpc-java' and published. using artifact in sbt project to connect to grpc server. but not able to connect(on kubernates cluster). while i connect from local using port forwarding it connects and messages are sent (from maven project).
Client code used in sbt is below
Getting below error while trying to send the message.what could be the reason.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5592
Consider supporting Guava 19 in grpc-api · Issue #5592 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As requested by @adriancole at #5590 (comment) .
I worked to remove major ecosystem incompatibilities with Guava 20 starting in 2017 and claimed victory in 2018. See #4176 to follow the chain. Guava 20 was released in 2016, so I do have limited sympathy for libraries that remain incompatible, especially since every occurrence I've seen has included at least one @Beta API.
Supporting Guava 19 is a bit difficult from a testing perspective, unless we depend directly on Guava 19. If we continue compiling against Guava 20+ it's likely regressions will be introduced. Depending on Guava 19 directly would be unfortunate and hurts us getting to Guava 27, which we need to avoid Android dependency issues with listenablefuture and failureaccess.
@adriancole, I generally expect to know what libraries are incompatible with newer Guava versions and get some agreement from their maintainers they are working on the issue. That way I can track progress and know when we can use the newer Guava. What libraries are causing the trouble?
Also, note that we don't generally support users downgrading our published dependencies. We did "make it work" for a while for older Guava versions after we became aware it was wide-spread, but downgrading dependencies is not something that is acceptable without informing upstream.
I just tested and grpc-api is API-compatible with Guava 19. I think I'd take the approach of having our own Preconditions class in io.grpc that we use instead for the while. It can still call Guava's Preconditions, but it will ensure we only call overloads that are available in Guava 19. Note that this will cause more garbage creation, since the overloads were added in Guava 20 as a performance optimization. For cases where the garbage may be costly, we could implement the method ourselves. @adriancole, does that sound like a fine approach?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5593
OpenCensus grpc method is not set · Issue #5593 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
We are using 1.19.0 in combination with OpenCensus 0.19.2.
What did you expect to see?
When using the RpcViewConstants.GRPC_SERVER_SERVER_LATENCY_VIEW from opencensus-java I would expect to see the metric split up by gRPC method, as is intended by them grouping the metric by the tag grpc_server_method.
However, grpc-java still sets the deprecated method tag which means this grouping is broken when using grpc-java:0.19.0 with opencensus-java:0.19.2.
The easy fix would be to set both tags, to ensure a wider compatibility with opencensus. I can prepare a PR if that sounds like a good approach.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5596
Investigate bulk metadata functions · Issue #5596 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Metadata provides limited public APIs for interaction, typically requiring a Metadata.Key to do any reads or writes.  This is useful to an application, which may know the key name and marshaller ahead of time, but not so much for middle-ware which may need to scan for keys.   As an example, a middle-ware that looks for metadata prefixes and builds a custom Key depending on the suffix of the key name has trouble with the existing Metadata API.  It requires multiple iterations through the metadata, and up to O(n^2) ops when trying to extract values with duplicate key names.
Metadata is also mutable, and does not want to expose internals, as they may yet change.  I am proposing some experimental APIs here to address the bulk metadata functions use case:
The different options provide the equivalent of a map operation (we might also be able to provide the equivalent of a Java8 stream).  Option 1 is the least flexible, but has the simplest API.  Option 2 allows the caller to provide their own Key producer based on the key name, but the value consumer doesnt get to know the key name used.  Option 3 still uses the same marshaller for each key, but allows the consumer to know the key name. Option 4 is a combination of 2 and 3, allowing both dynamic marshaller construction based on the key name, and allowing the consumer of the the produced values to know the keyname (perhaps for later caching?)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5598
Tracking issue for removing Nio fallback logic · Issue #5598 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Remove backward compatibility code for Epoll fall back logic for version 1.22.0.
This fall back is introduced in #5581
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5600
client side proxy when using ManagedChannelBuilder.forTarget() · Issue #5600 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
I have been using 1.16.1 version. Now upgraded to 1.20.0 version.
The machine where am running the client side ie, ManagedChannelBuilder.forTarget(serveraddress)  call is used is proxy enabled.
I get an error saying "Channel closed while trying to CONNECT through proxy"
I can read the proxy address from environment variable http_proxy.
For example : http_proxy="10.9.3.2.9090" and my target Address = "10.45.6.1:7070" (ie grpc server is running on another machine)
How do i make the grpc allow this proxy and send request to the target Address.
What did you expect to see?
I need a sample example. I see a proxydetector that is available but not sure about the usage of it since the method takes a single address.
I am new to grpc.  Need help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5602
Disable automatic call request when autoFlowControlEnabled is false · Issue #5602 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.18.0 but problem still present on master
What did you expect to see?
When taking over automatic flow control by calling disableAutoInboundFlowControl I would expect the same amount of messages to be emitted as actually requested. But one extra message is always emitted.
After some tracing this reason comes from here:
It should be possible to at least disable this automatic request(1) call to avoid overflows when integrating with reactive streaming libs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5603
Protocol message tag had invalid wire type · Issue #5603 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This could mean either that the input has been truncated or that an embedded message misreported its own length.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5607
GRPCLB should enable client-side health-checking in fallback mode · Issue #5607 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When working normally, the remote balancer health-checks backends and only send healthy backends to the client, thus no need for client-side health-checking. In fallback mode, client-side health-checking is needed.
@ejona86 @markdroth @menghanl and I had a discussion today. The simplest solution for Java is to wrap GrpclbLoadBalancer with the health-checking LoadBalancer, thus it always enable client-side health-checking (if service config enables it). It's considered acceptable both normal mode and fallback mode have it enabled indiscriminately.
However, GRPCLB with pick_first child policy won't work well with health-checking. Health-checking returning unhealthy would fail RPCs, but the pick_first policy will not try the next backend, because InternalSubchannel still considers the connection READY. Fortunately, our only user of GRPCLB w/ pick_first won't turn on health-checking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5608
open ssl error-  help: No ALPN negotiated after enabling useTransportSecurity to grpc server · Issue #5608 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
Secure Renegotiation IS NOT supported
What version of gRPC are you using?
What did you expect to see?
Should be able to use OpenSSL command to our server, but after adding useTransportSecurity I haven't been able to ping my server:
Locally, when I try to run a request seeing:
Any tips as to how to trouble shoot this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5609
Add spellcheck CI to repository · Issue #5609 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are tons of typos and spelling errors in our codebase, some are in the code and some are in the comments. As grpc-java is becoming more and more popular, maybe it's time to clean them up and have a required CI task running spellchecking on PRs. It might add some pain when creating PRs, but fixing typos in a single PR should not be too headache and it does things good to us. Envoy's repo is doing very well on this, maybe we could borrow what they are using.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5610
AndroidChannels: failing requests right after network recovery · Issue #5610 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
In our project we use android JobService, which starts right after device establish network connection. Inside that service we run Grpc request over AndroidChannel. We expect to see successful network calls at that point
What actually happens.
Most of the time, this request fails few times in a row (as JobService reschedules itself on failure). At first it seems that though JobService is started, no connection is available for some reason, but then we tried to add simple http request via OkHttpClient - and they work well.  Additional digging in logs and debugging reveals, that this might be related to DnsNameResolver, as it might resolve address when request is already in progress. This issue seems highly related to #4028, but occurs in AndroidChannel.
Steps to reproduce
Given mentioned setup (JobService + AndroidChannel), it requires android device with API 24+. Issue can be reproduced by toggling off device internet connection (both WiFi and mobile, seems no difference), wait around 10-15 seconds, and toggling on connection.
Example project, which can demonstrate this issue can be found at https://github.com/AntKos/android-grpc-jobservice.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5616
Question: how to set Status details? · Issue #5616 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
As per https I would expect io.grpc.Status to have the same repeated google.protobuf.Any details = 3; functionality but I can't find out how to do this in Java.
Could you please advise on how to achieve using this details field? Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5620
grpc java.lang.IllegalStateException: call was half-closed at · Issue #5620 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5624
Unable to activate real-time metrics to OpenCensus · Issue #5624 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#5099 implemented a way to record real-time metrics. Cool! Now I'd like to activate it, as it's disabled by default. I'm not successful in enabling this, however.
Tried with a NettyServerBuilder for example, but the setStatsRecordRealTimeMetrics method is protected.
I don't see any other way to set the private attribute recordRealTimeMetrics in the AbstractServerImplBuilder class from the sources.
The work-around I'm using now is ugly in bypassing the protected attribute (Kotlin, but you get my point).
after which it starts to work, except from the method name not being exported (but that's #5593).
What version of gRPC are you using?
What did you expect to see?
A public function on the Builder to call setStatsRecordRealTimeMetrics(true).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5631
Bidirectional streaming RPC · Issue #5631 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I use bidirectional streaming rpc, and I reconnect when reply invoke onError(), then update the helloRequestStreamObserver ref.
I lost request, it's ok, because  ref update util reconnect success. this are some solution to avoid losing request?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5635
Tracking issue for MethodDescriptor.getServiceName being experimental · Issue #5635 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5636
GC friendly long live server streaming · Issue #5636 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my application, I use server streaming, when client send request and receive responses until connection will not close(days or more). At heapdump i found that initial request never released until stream not close.
Why not release it as only method was invoked at this place https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5644
grpc-protobuf-lite not working with com.google.cloud:google-cloud-bigtable · Issue #5644 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The use of io.grpc:grpc-protobuf-lite and com.google.cloud:google-cloud-bigtable should not raise NoSuchMethodError.
While I was checking the compatibility of google libraries, I found grpc-protobuf-lite has classes that are not compatible with many GCP-related libraries (the list noted below), including com.google.cloud:google-cloud-bigtable:jar:0.84.0-alpha.
Example project to reproduce this issue: http shows:
For grpc-protobuf-lite, I only found this sentence in the doc:
For Android client, use grpc-okhttp instead of grpc-netty-shaded and grpc-protobuf-lite instead of grpc-protobuf
from grpc-java documentation
Questions
Would you explain the difference between grpc-protobuf and grpc-protobuf-lite?
Do you think the incompatibility between io.grpc:grpc-protobuf-lite and com.google.cloud:google-cloud-bigtable is something that needs to be fixed (probably for Android apps accessing GCP services)?
Incompatible Libraries
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5649
Rely on ChannelFactory in NettyServer instead of dynamic classes · Issue #5649 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reading up on what it takes to support Graal native image compilation for gRPC, most of the incompatibilities are in the Netty tier (not the responsibility of this repo), but here's a low hanging fruit item:
They suggest using a ChannelFactory when working with ServerBootstrap to prevent unecessary reflective instantiation, something like this:
I spotted #5460 as well which talks about Netty things, but the article I'm including also shows that this sort of thing can be sideloaded/managed externally from this repo. The change I am suggesting however would impact the ServerBuilder API a bit, but I think it might be a good one long term anyhow, WDYT?
More info @ this article:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5650
HOL blocking for multiple bidi streams · Issue #5650 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
I would like to know more details on how grpc bidi streaming works on top of HTTP2 streams.
Specifically, in this issue - #3849 below statement got me a little confused
An RPC* corresponds to one HTTP/2 stream. All streaming RPCs use the same HTTP/2 stream.
So does this mean - if I have 2 or more streaming GRPC requests on a single connection, it will lead to no multiplexing and head of line blocking? Is there any way to avoid that?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5652
Add state-checking logic to our StreamObservers · Issue #5652 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently rely on ClientCall/ServerCall to verify that onNext() is not called after onCompleted(). When this is done incorrectly the user gets a Call-centric error message instead of StreamObserver-centric. We should duplicate some of that logic to StreamObserver so we can deliver a better error message.
For example, this would have helped the user in #5620.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5655
java.lang.IllegalStateException: Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available · Issue #5655 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Description in this issue...
googleapis/java-bigtable-hbase#2140
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5660
Remove MoreThrowables as stated in TODO · Issue #5660 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I've found a class in grpc-core by @ejona86 which should be deleted when Guava 20+ is being used. The class is still being used and we are now using guava 26, so I think this could be refactored or the TODO removed.
Merge Request: #2751
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5661
Occasional spikes of 500ms-2s latency on sending from java grpc client to java grpc server · Issue #5661 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I previously filed grpc/grpc-go#2788 with grpc-go after noticing a large gap between outbound data and inbound window updates. After matching up debug logging on the client and the server, I was able to determine that the requests seem to just not be making it to the server for awhile. For instance below is a debug message from the grpc java client, followed by the corresponding read on the grpc service.
It seems to be the case that for a small period of time 500ms-2s, no outbound data will be received by the server and then all of it will be received at once. I was wondering if you had any thoughts on what could be causing this or how we could further debug the issue. It seems like one avenue would be to write a custom Http2OutboundFrameLogger that adds a timer to the channel future on outbound data being sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5665
Authentication example is presently harmful · Issue #5665 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The example is currently equivalent to the "header" example. So there's no possible value-add it could contribute at the moment.
But unfortunately it is recommending making a ClientInterceptor for sending JWT to the server. That's not what we recommend. We would recommend using MoreCallCredentials.from(Credential) along with ServiceAccountJwtAccessCredentials (which is Google-centric, but users can potentially use the fromPkcs8() construction method) or to implement CallCredentials directly. CallCredentials has the advantage that the credential 1) can verify its security requirements, like how all JWTs should be sent on an encrypted connection, and 2) will be fresher, as it is called just before the RPC is sent (a waitForReady RPC could be delayed for days).
The example also needs to incorporate how to propagate the authenticated user to the application via Context. Ideally it would at least note how to fail the RPC if the user is unauthenticated. Examples of how to do this is available on SO.
I'm considering deleting the example for the upcoming v1.21.0 release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5671
Large number of PoolThreadCache garbage objects · Issue #5671 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using grpc-java version 1.16.0 in Apache Ratis for RPC communication. Apache Ratis is a java implementation of Raft consensus protocol and uses grpc for server-server and client-server communication. In the scenario there are ~10KB requests coming from the client to the server and the server is replicating those requests to other servers. There are thousands of these requests coming gradually to the server from the client. There are other small sized metadata related communications as well.
We are currently seeing a lot of GCs getting triggered and lot of garbage PoolThreadCache objects. Here is a snippet of the major unreachable heap objects.
It seems like there is lot of garbage being generated via thread caches.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5674
Define and use SubchannelPoolHelper · Issue #5674 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5675
Migrate to use SubchannelStateListener for Xds · Issue #5675 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5676
Subchannel identity crisis · Issue #5676 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since we are doing lot of wrapping on the LoadBalancer API, and Subchannels are passed through various interfaces, a wrapped Subchannel will require a lot of care to make sure it's consistent on all APIs, e.g.,
The Subchannel from createSubchannel() should be the same objects that's passed to SubchannelStateListener on every wrapping level.
An upcoming ORCA load reporting API is another example (#5639 (comment)).
The Subchannel from PickResult will have to be unwrapped as well. ManagedChannelImpl assumes the Subchannel from PickResult is the real "SubchannelImpl".
Possible solutions:
Move LoadBalancer.Helper methods that accepts Subchannel to the Subchannel class, e.g., updateSubchannelAddresses(). Stop passing Subchannel to the listeners. But that requires a start(), which is a non-trivial API change on the current Subchannel, but could be considered for new APIs.
The opposite of above -- move all state-mutating methods, e.g., shutdown(), requestConnection() to Helper, eliminating the need for wrapping Subchannel.
Provide a util to help correctly wrap Subchannel while keeping the consistency.
Add another identity object to Subchannel. This could also used by ManagedChannelImpl to retrieve the real "SubchannelImpl" from PickResult.
Solutions 2 and 5 wouldn't go along with our plan of changing Subchannel attributes to an object, because a wrapping Helper can only add its own stuff on that object by wrapping it, which ends up the need for unwrapping it on the Subchannel. Otherwise they seem to work well.
@ejona86 @voidzcy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5677
Simplify example-gauth with our recommendations · Issue #5677 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Instead of GoogleCredentials.fromStream(), use GoogleCredentials.getApplicationDefault(). We can comment where to put the JSON file and what environment variable to set if they want it somewhere else. We then would note that the JSON file is unnecessary on Google platforms.
Remove refreshAccessToken() and its comment. This will be done automatically when necessary.
GOOGLE_AUTH_EXAMPLE.md would require being updated to match.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5679
Make XdsLbState a LoadBalancer · Issue #5679 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
XdsLoadBalancer should decide the newPicker when either the fallback balancer or the xdsLbState child balancer updateBalancingState with their own newPicker and their own childHelpers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5681
Use a reliable groovy/gradle style checker · Issue #5681 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#5680 just removed the troublesome spotless style checker.
Maybe find another style checker that is more reliable. CodeNarc might be a choice.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5688
Fedora Fix for Netty-Shaded · Issue #5688 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I was unable to get grpc-netty-shaded or grpc-netty (+ the classifier) working on Fedora 30.
This is the error I encountered when using netty-shaded:
And here's the error I encountered when using grpc-netty + the fedora classifier:
I was able to workaround this issue by creating a sym-link for libcrypt.so.1:
Creating this link solved the issue for me.
Note: you might need to install openssl-devel.
Leaving this here in-case it helps someone in the future.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5692
NameResolver refresh not triggered if empty addresses returned · Issue #5692 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I've implemented a custom NameResolver to resolve addresses in Consul (DNS or HTTP). We're pairing this name resolver with the RoundRobinLoadBalancer to provide simple client-side load balancing.
While integration testing, I found that if we return an empty list of addresses in the name resolver, no refresh is ever triggered on the NameResolver (leading to a permanent error of UNAVAILABLE for all calls). If I change the NameResolver implementation to call Listener.onError() instead when no addresses are found, refresh() will eventually be triggered and the problem can resolve itself.
When writing the name resolver, I believe I may have gotten tripped up on this comment (which makes it sound like onAddresses() with an empty list is equivalent to onError()):
For reference, the DNS name resolver doesn't pass an empty list of addresses:
I'm not sure if this is expected behavior and I know this is an experimental API, but wanted to report in case this wasn't the desired behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5724
Does gRPC retry mechanism work and if so, where am I wrong? · Issue #5724 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I'm trying to figure out how to set up custom retry mechanism. After looking at A6-client-retries and searching through github/google I didn't find any real examples/explanations. So I think that I missed some notable thing.
So, I try to create a client connection with a retry mechanism. Like:
And client behavior doesn't change.
Could anybody get me an advice/example or move me in the right direction?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5729
NPE in DelayedClientTransport · Issue #5729 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
No NullPointerException in DelayedClientTransport.java
We (Firestore) have had a few reports of a NPE within DelayedClientTransport.java. (firebase/firebase-android-sdk#428).
Looking at the stacktrace, it seems as though picker is null here:
Examining that function further, it seems as though picker is set here and here:
In the first case, there's a null check that protects it, but there isn't in the second case. Should there be?
(All links to the 1.16.1 tag, but the code looks effectively the same in master wrt this issue.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5732
any options to show the detail of timeout? · Issue #5732 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
solve problem
but found less than 1 millionseconds is cost in server side. would like to know if any optional configs to show the detail of timeout in client side, like which part cost most of the time?
or any other suggestion to solve this problem?
appreciate if any help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5733
how to build Any Object ?  Any any = Any.newBuilder().build();  · Issue #5733 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
How to set value to any,
Is there some method like  any.put("k","v") ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5737
Example Configuring Conscrypting on non Android · Issue #5737 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Some example where conscrypting is put to use. Other parts of documentation like are good compared to this. I am using example-tls as base but I not pretty sure where the line Security.insertProviderAt(Conscrypt.newProvider(), 1); goes and if there is anyother changes that are needed.
Is this enough if I add that Security.insertProviderAt(Conscrypt.newProvider(), 1); over there and just add the conscrypt gradle dependency? Is there something else I need to do?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5756
Service config does not support integers · Issue #5756 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
From the A6 client retries proposal it looks fairly clear that e.g. maxAttempts should be an integer. It wouldn't really make sense for it to not be a whole number anyway.
In the ManagedChannelBuilder it's just not allowed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5758
Make service config more explicit · Issue #5758 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when a service config is supplied, we do not know if things are configured correctly as we desired. Service configs are applied silently. This makes it hard to know what goes wrong when using a service config. For example, in #5724, a retry service config is supplied by user but does not correctly applied to the service since the service name in the config was wrong. User sees nothing but retry is not happening. Is it possible to give out some information about what's going on when there is a service config?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5761
How to enable TLS in android client · Issue #5761 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Android client must send the client certificate along with the request.
Need some reference or code snippet on how to add TLS in grpc android.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5764
Avoid NameResolver.Listener deprecation for 1.21 · Issue #5764 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There's still some possible changes for the Listener2 API. Let's not encourage people to move to it yet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5777
Tracking Issue for Attributes.Builder#discard · Issue #5777 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5782
JCenter not up-to-date · Issue #5782 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking at https, I see:
all, api, auth, context, core, netty, netty-shaded, okhttp, protobuf-lite, protobuf-nano, protobuf, services, stub, testing, protoc-gen-grpc-java
Missing 1.21.0:
alts, android, benchmarks, bom, grpclb, interop-testing
I'm going to give it another day. If they don't show up I'll file yet another issue with JCenter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5788
Using InternalMetadata class in Armeria · Issue #5788 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all.
As some of you may have seen, Armeria team mantains a Java implementation of gRPC that runs on top of the Armeria server framework, a generic HTTP/1+2 server framework built on Netty (made by our good friend @trustin himself :) )
We interface with protoc stubs by creating Call objects and starting them - after started, a Call goes through io.grpc business logic as normal in most cases with surprisingly few gotchas. The Call interface is a quite nice plugin point.
We have one major caveat though, no support for the Metadata class
While Armeria has its own methods for adding response trailers, we're finding more and more users would like to be able to use it so their existing gRPC business logic can run as-is on Armeria, and if possible I'd like to achieve that. It means I need to use InternalMetadata to be able to create and serialize Metadata.
Is it kosher for Armeria to use this class? I understand it is for "specifically supported transport packages" - if Armeria could be considered a specifically supported transport package, that would be great! But if it's not possible to have official support like that, if it's "at your own risk but should be ok" that'd be fine too. For context, the first version of our implementation used a lot of io.grpc.internal classes to try to minimize code duplication - that was naturally a nightmare to maintain and I'm hoping not to repeat my mistake ;)
Also, as an alternative or in addition, any thoughts on making Metadata an interface and letting implementations control the serialization themselves? If that happened, we wouldn't need to use InternalMetadata either.
Thanks!
References
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5790
Tracking issue for ORCA related APIs · Issue #5790 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OrcaPerRequestUtil and OrcaOobUtil are utility classes for client to access backend metrics for Open Request Cost Aggregation (ORCA). Design doc can be found in Envoy community.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5791
How to specify IP address using ServerBuilder · Issue #5791 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The ServerBuilder only provides forPort() method to bind the server on a port, however, I want to specify the IP to listen instead of 0.0.0.0.  Is there an official way to do it? I googled but nothing useful found.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5792
Where is the source code of io.grpc.Server class located in the reposiory? · Issue #5792 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using? What did you expect to see?
I expect the source code of the class io.grpc.Server
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5793
Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available · Issue #5793 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
For those guys who meets similar issue on Raspberry Pi, the issue could be solved by updating JAVA version for 8 jdk to 8 sre.
I spent three days deploying a server service on my raspberry which will use Firestore API, and stuck by this issue by almost one day.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5794
java.util.ServiceConfigurationError: io.grpc.ManagedChannelProvider: Provider io.grpc.netty.NettyChannelProvider not found · Issue #5794 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using grpc 1.21.0.
I have a gRPC Java client that should connect to a gRPC server and make a simple request – which it does, successfully, in a unit test I wrote. However, when I package my jar and run it in a different environment outside of IntelliJ, I get this stack trace when I try to initialize the gRPC client:
I have two thoughts about what might be going on. First, my maven shading configuration may be wrong. I am not an expert on Java dependency management and could easily have made a mistake:
I decompiled the jarfile generated during the package phase, and it seems to indicate that the Netty stuff may be missing or misplaced. I expected to see see the class io.grpc.netty.NettyChannelProvider from my stack trace in the netty directory here:
screenshot of my decompiled jarfile
Second, the server logs indicate to me that Spigot is probably also using Netty, and it's possible that its Netty version is conflicting with the one in my project.
The applications using my project, which I do not own, run Spigot in their own Runtimes, so I declare this dependency in the provided scope.
Finally, here is my source code where I am initializing the gRPC client. I don't think this is causing the problem, but it can't hurt to check:
My question here is: what am I doing wrong and what else can I do to debug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5804
Should rawConfig include policy name? · Issue #5804 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#5397 assumed that rawConfig includes policy name, but the constructor
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5805
what does "excessive buffering internally" mean in io.grpc.internal.StreamListener::onReady ? · Issue #5805 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
There is a  concept of "Stream" in grpc ,but i can't understand some description on "Stream". When reading docs on io.grpc.internal.StreamListener , I saw words like "without requiring excessive buffering internally" . Is "excessive buffering" the same as memory?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5806
NettyServerHandler closes connection when first go_away is ackd regardless of starting stream · Issue #5806 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Scenario:
Server has a connection max age and a grace period of 60 and 120 seconds
A client call/stream starts just as the max age (60 sec) is reached on the connection
The client receives the first go_away as he should
The client acks the go_away
The server as soon as it sees the go_away ack ping sends out the second go_away and closes the connection regardless of the grace period or pending streams
client closes its active stream and receives UNAVAILABLE error
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5807
The Android Helloworld sample doesn't work on Android 9 · Issue #5807 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I'm using the Android Helloworld sample, gRPC version 1.21.0
What did you expect to see?
The Hello world should work as it is for previous versions of Android, it works fine in Android 8.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5811
Log more information for xds load balancer · Issue #5811 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5812
Add retry logic for XdsComms · Issue #5812 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5814
How to start servcie with different impl class · Issue #5814 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm a rookie.Now,I have a DemoServer with lots of method.Those method could be classifid according to certain rules.
For Example
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5815
TLS examples use cert and key naming inconsistent with the rest of gRPC codebase · Issue #5815 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The examples here:
uses cert/key file extensions that are inconsistent with the rest of the codebase:
.crt is used for certificate and .pem is used for private key, but everywhere else in the code we're using pem for the certs and key for the private keys.
Examples from our codebase:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5819
Gradle plugin outputs different filenames on different linux distributions · Issue #5819 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see
Project builds correctly on Arch and Debian.
Outputs build/distributions/JobServ.tar on Arch Linux and build/distributions/jobserv.tar on Debian.
(Notice the change from CamelCase to all lowercase)
This is not the end of the world, but an annoyance for anyone who needs to handle that tar as part of their build process.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5822
Way to implement a fail-over client (especially for bidistream call)  · Issue #5822 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am implementing a fail-over client which switches to another channel if any error(e.g. deadline exceed) happens. This is fair straightforward to unary call. However,  it seems to impossible for bidistream call because when an error happens the Status returned has no clue to figure out which request fails.
I typically use ClientCall.Listener to capture errors and want to insert some metadata to mark requests, however, I am not sure if every grpc-server implemented by different languages would return the metadata sent by clients.
So is there any way to implement such a fail-over client?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5828
Update protobuf dependency to v3.8.0 · Issue #5828 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
The google-cloud-java generated clients are generated with a tool that uses protobuf v3.8.0, which contains bug fixes. Clients compiled with protoc v3.8.0 have changes that are not backwards-compatible with protobuf v3.7.1, namely the UnusedPrivateParameter.
It will be a similar story with other users who are pinned to the lastest protobuf version.
What version of gRPC are you using?
What did you expect to see?
Dependency on protobuf v3.8.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5831
Is there any possibility to add custom NameResolver.Listener to Channel? · Issue #5831 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am trying to implement some offline-first functionality. And when device re-establishing network connection it takes some time for NameResolver to resolve a host for my previously built ManagedChannel.
Thus, I need to know when I'll be able to send gRPC calls without following failure:
io.grpc.StatusRuntimeException: UNAVAILABLE: Unable to resolve host %name%
I expect to see a possibility to add extra listener for NameResolver and postpone my calls to the point of time when NameResolver.Listener#onAddresses will be called.
Is there any in v1.20.0 or in the most recent?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5841
[Bazel] java_rpc_toolchain does not respect Java toolchain flags  · Issue #5841 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I build gRPC code with Bazel using Remote Build Execution (RBE) and I have to use a custom jdk8 toolchain [.bazelrc snippet]. Java toolchain flags don't seem propagated to the java_rpc_toolchain rule as it declares a fixed dependency on the default Java toolchain, which is jdk10 for Bazel v0.25.0. I believe this is the primary reason contributing to the following error returned by Bazel:
Unrecognized VM option 'CompactStrings'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
Please let me know if I can do anything else to enforce a custom Java toolchain for Bazel gRPC rules.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5847
Test failure: Java components in grpc_interop_alts · Issue #5847 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All Java related test cases are failed.
Error parts:
Shutting down
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5850
GRPC is giving Transport closed for unknown reason error when trying to build Tensorflow Image recognition using Grpc Client · Issue #5850 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
GRPC v1.10.0
What did you expect to see?
I am building tensorflow image recognition model using grpc client as mentioned in https
I am running maven package, but it is giving error - Transport closed for unknown reason
I need to integrate this to kafka after making sure this is run.
Please let me know how to solve this issue.
Let me know what data is needed to solve this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5854
How to determine whether a server is ok? · Issue #5854 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I used the pick_first load balance when I create a etcd client with 3 entrypoints, when docker paused the etcd container which one was used by etcd client,grpc cannot detect the situation and change connection to the good one, I wander how do grpc determine whether the server is ok?which part is about this?I am a new bird and is hard for me to find out the related part.Thank you very much
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5855
UNAVAILABLE: HTTP/2 error code: NO_ERROR Received Goawaysession_timed_out · Issue #5855 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I have no idea, this is coming from Google Firebase.
What did you expect to see?
No error
This is the callstack:
This is my lines of code that triggered this
This is working most of the time, it happened only twice so far so maybe it's something temporary but I have no idea what it is and how to overcome this.
Please advice
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5856
How to add a single retry for a specific scenario in interceptor? · Issue #5856 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I am working on auth interceptor which responsible for auth tokens on every single call. Sometimes, when a token expired, I have to change auth metadata on the client side and make a retry for this call.
I have already implemented auth interceptor on start and not I'm trying to find out how to make recall when the interceptor found that token expired on onClose(..){..}
Could anybody give advice or other help with this issue?
Interceptor code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5858
All internal APIs are shown in the javadoc (gh-pages) · Issue #5858 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5864
The plugin should add boilerplate configuration and not require the user to do it · Issue #5864 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is bad practice for Gradle codegen plugins to depend on the user to add new sourceSets. The plugin should do the following:
Also, the following seems to be boilerplate too. What does it do, and can the plugin do it as well?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5868
GRPC is giving Connection closed error when trying to build Tensorflow Image recognition using Grpc Client  · Issue #5868 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am building tensorflow image recognition model using grpc client as mentioned in https.
I am running maven package, but it is giving error - io.grpc.StatusRuntimeException: UNAVAILABLE, Connection refused: brazossrik01/9.3.67.64:9000
override a deprecated API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5869
response.toString() returning empty String for a default responses · Issue #5869 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
alive: false in my console
Instead I am getting a empty String when printing my response Object which only contains default values.
What did you try to do?
I am currently just playing around with gRPC to prepare myself for production use and found some strange behavior when trying to print my response objects.
I had this issue with a more complex message but it also happens with a minimal case.
Basically if you have a
and return it to the client with alive = false and try to print the response you just get a empty string. If you set alive = true it correctly writes down the value of the field in your console as:  alive: true
Note: Directly accessing the field still works. response.getAlive() returns false, so there is nothing wrong with the message itself, but with the toString() method.
This behavior does not only happen with boolean values but also if you return the first value of a enum, so I would assume with every default value?
Is it expected behavior to return an empty string for a default message or is this a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5872
Benign exception messages are logged at level INFO · Issue #5872 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Benign errors (for example, due to connection resets) are not printed at INFO level.
Description
There are some exceptions that are not useful, spam the logs, and are downgraded to FINE level logs lines. This filtering is done via a static list of strings (QUIET_ERRORS) in NettyServerTransport.java.
An example exception message is Connection reset by peer.
Version 1.21.0 included a change to run with epoll on Linux systems, when available (#5581). This seems to have altered certain exception messages to be prefixed with more transport-level information, and the same exceptions are now making their way into the logs at level INFO.
For example, we now see the following, which was previously logged at TRACE:
This is presumably due to the syscall:read(..) failed: prefix causing the exceptions to not be excluded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5874
Allow complete override of User-Agent Header on a per-RPC level from grpc client libraries · Issue #5874 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
This is a followup from a discussion that was initiated on gitter grpc/grpc channel.
Currently, the grpc/java library reuses the User-Agent from the channel for each RPC
and discards User-Agent by treating it as a reserved header.
However, User-Agent is not a reserved header and this creates complications
when trying to write a proxy-like gRPC service for HTTP endpoints that care
about User-Agent for response customization.
Posting it here to get more ideas about how to resolve this.
quoting the conversation below:
What was the underlying reason for the restriction on not allowing User-Agent to be overridden on a per-call basis?  can't seem to find a spec which reserves the User-Agent string for gRPC/HTTP2 and yet there is code in place in the libraries (grpc-java/ grpc-go ..) to discard any user-supplied metadata regarding User-Agent and always use the channel's value eg:
@ejona86 we seem to have a use-case in which a per-RPC user-agent will make
things easier for us. The alternate is to use custom metadata fields to
preserve this information. that approach seems non-standard and we were hoping
to avoid it.  Will it be possible to include a per-RPC user-agent in gRPC? i
will be happy to code it up. but based on what i read in past issues, this
request was repeatedly turned down.
Eric Anderson @ejona86 Jun 04 14:44
That is a cross-language decision. You would need to make clear what the
use-case for it is.  Right now, it isn't clear what the use-case is.
Oh. I see now.
You want to communicate the origin client's user-agent to SVC-C
Yeah. That's not appropriate for user-agent.
Asad @asadali Jun 04 14:45
ack
Eric Anderson @ejona86 Jun 04 14:46
.... unless you are making something closer to a proxy. Maybe.  It sort of
seems like a can of worms. It just makes a mess of things.
But I think I understand now.
Asad @asadali Jun 04 14:48
so the intermediate gateways aren't pure proxies but maybe more like aggregators. in the non-GRPC world, the implementation made an assumption that
User-Agent is the originating client's user-agent. and all intermediate hops
honored that.  I agree, that this is a very loose reading of the spec. I feel
the more logical method is to update the user-agent on each hop
however, systems built around that assumption aren't happy when they lose this
info :( IMO, gRPC clients can default to per-channel behavior but the choice
should ultimately be left to the user if they want to override it
Eric Anderson @ejona86 Jun 04 14:51
Well, today the application can't set the entire user-agent. gRPC will always
include itself in the user-agent.  I'm trying to check what HTTP says to do for
user-agent and proxies.
Asad @asadali Jun 04 14:52
yeah i can use another opinion on this. and current gRPC behavior is what I am
trying to rationalize. does it need to always include its user-agent?
Eric Anderson @ejona86 Jun 04 17:31
@asadali, proxies do forward the user-agent. We do want to enable grpc proxies,
so that does mean we should forward the user-agent. Although on the server, any
compatibility quirks would generally be with the proxy, not the end-client. So
it still seems muddled, but it does seem we should consider it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5881
Add dependency on grpc-core to the main README.md · Issue #5881 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The "Download" section starts with a Maven pom file excerpt containing some dependencies. Note that grpc-netty-shaded doesn't include some classes that are available in grpc-core, for example, io.grpc.internal.AbstractServerImplBuilder. I suggest to add dependency on grpc-core to avoid confusion.
(I've spent quite some time trying to figure out why example-tls builds with Maven but my project doesn't... Turned out the difference is that my project uses netty-shaded.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5882
Neither OnCancelHandler nor onComplete gets invoked after half-close · Issue #5882 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
After server sends completion event to the client, i.e., half-closes the call, client doesn't dispatch any other events (although request stream isn't closed/ completed).
In addition to that server OnCancelHandler doesn't get ever invoked, although client shuts down and closes connection.
What did you expect to see?
Servers OnCancelHandler must be invoked in either case, independently if call has been already half-closed or not and if connection has been forcibly shutdown or not. It should be possible to free-up resources like database connections in OnCancelHandler, but as off now it doesn't seem that there is a single place where we could do this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5889
NPE while creating channel · Issue #5889 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using? -> 1.20.0
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5894
Unable to make GRPC call in 32bit Windows Machine · Issue #5894 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
More Details
This code is working fine on a 64-bit windows machine, but throwing the below exeptions while running on a 32-bit machine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5895
ServerCall.Listener.onComplete not exposed to async stub · Issue #5895 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@TMilasius in #5882 was needing a point to free up resources. That is onComplete/onCancel in the ServerCall API. But we don't expose onComplete. We'll have to deal with naming collisions with StreamObserver itself, but we should expose a way to receive the onComplete notification, probably by providing a runnable in the same way as onCancel.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5907
Able to authenticate in my local machine and unable to do it in my VM · Issue #5907 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Not to throw this exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5912
NoSuchMethodError: io.opencensus.tags.TagContextBuilder.putPropagating? · Issue #5912 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.21.0 from maven repository
What did you expect to see?
I am trying to make a API server on Spring framework that communicates with my other grpc servers.The servers are made on python, and all work well with python clients.
However, when I try my Spring server, this happens.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5913
File import problem · Issue #5913 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I follow the demo of the official document, but when I run the greetergrpc.java generated after compile-custom is executed, I see something below
I don't know what went wrong. Thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5916
Inconsistent error code conversion with gRPC cpp · Issue #5916 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The HTTP to gRPC status code conversion is not consistent between Java & C++ implementations.
As envoyproxy/envoy#4735 (comment) mentioned, gRPC C Core maps 429 to RESOURCE_EXHAUSTED but Java maps 429 to UNAVAILABLE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5925
This ALPN config does not support HTTP/2. · Issue #5925 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Same behavior as with unshaded version.
When switching from 1.20.0 to 1.21.0 I get the error in the attached log.
The versions do match the ones in https and switching to netty-shaded does not fix the problem.
Although this run is from within IntelliJ running the jar directly results in the same error.
The used setup is nothing special:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5942
compiler:grpc_java_plugin no longer visible · Issue #5942 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Is there a particular motivation for marking it as non-public?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5944
Received unexpected EOS on DATA frame from server · Issue #5944 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When response trailers are quite large (likely around 1MB of trailers) we receive an internal error from gRPC rather than the original trailers.
This is affecting Google Ads users - who are unable to debug their failed requests, see googleads/google-ads-java/issues/100.
The error is generated in Http2ClientStreamTransportState where it appears that the EOS flag is set while still receiving data.
Is it possible that this is a race condition where the server has already sent the response and closed the stream before the client finishes receiving the headers, data and trailers? I suppose that could happen if the response is sent in several packets, and Http2ClientStreamTransportState is running at the packet level, rather than message level?
What version of gRPC are you using?
v1.21.0
What did you expect to see?
Response trailers which contain a detailed failure message.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5956
Status CANCELLED under load · Issue #5956 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Hi,
I have a service that communicates with upstream via reactive-grpc. It performs both unary calls and subscriptions.
Under high load, after request/subscriptions rate exceeds some threshold, the service starts receiving StatusRuntimeExceptions with status CANCELLED.
I performed some Wireshark investigations and discovered that the amount of time taken by the service to respond to http2 PING sent by the upstream gradually increases with the load. At the moment it exceeds keepalive timeout configured for the upstream, the upstream cancels the call.
Are there any ways to configure/examine the process of http2 ping-pong under grpc? What aspects of configuration may affect this process? What code is responsible for this processing? Where should I put a breakpoint? Any explanations, suggestions, and considerations are welcome.
I'm not sure what particular information about my configuration I should provide, but I will provide anything required.
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5963
How to set up header in grpclb? · Issue #5963 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Use instructions for setting up custom headers in grpclb
I want to send grpclb server with custom header information, such as metadata containing x-server-name: ABC
Thank you for your help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5964
UNIMPLEMENTED Error when trying to run kafka with tensorflow · Issue #5964 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Latest version
What did you expect to see?
Seeing UNIMPLEMENTED Error when trying to run https java code .
Please suggest if there is problem in ClientCalls.java file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5966
GRPC sometimes picks wrong Executor · Issue #5966 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using GRPC for our Firestore Android SDK. Dependencies are:
We have some integration tests that set up two different RPC stubs:
ManagedChannel channel = initChannel(context, databaseInfo);
These GRPC stubs are independent of one-another and use a different channel with a executor.
Some of our operation verify that they run on the correct executor by looking at the thread ID, and this invariant often breaks in the GRPC callbacks when the Managed Channel is first set up. It seems like is picking up the wrong executor.
We have since fixed this by removing the call to channelBuilder.executor(...) and instead calling FirestoreGrpc.newStub(channel).withExecutor(...)
Is this the expected behavior? More details can be found in the discussion here: firebase/firebase-android-sdk#585
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5968
async client stub: need to ignore unary response msg if status is not OK · Issue #5968 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The future and blocking APIs wait until the close() before delivering any received message. If the status is an error they throw away the request.
We need to do the same for async stub. See also grpc/grpc#12824
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5969
async server: need to ignore unary response msg if status is not OK · Issue #5969 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The expectation for unary responses is that the server will respond with an message or an error. If the server responds with a message and an error, the message should be thrown away. The async API currently would send the message. For unary responses, we should delay sending the response until the onComplete()/onError(). If onError() is called we should not send the message.
See #5968 and grpc/grpc#12824
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5978
ByteBuf.release() was not called before it's garbage-collected · Issue #5978 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
JVM version (e.g. java -version)
I got the above log by setting -Dio.netty.leakDetection.level=paranoid.
From the log it seems like NettyServerHandler does not correctly call release() on the ReferenceCounted objects it receives. But, I'm not explicitly using NettyServerHandler anywhere in the codebase. Though I'm using grpc and following are the classes which are being used:
Do you have any idea which of these might be using the NettyServerHandler?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5979
Scala: IndexOutOfBoundsException during sending response · Issue #5979 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I'm using Scala 2.11.
I created protobuf file with the one rpc service and 2 messages: UserCluster and UserClusterResponse (the latter is a list of the former). Then I implemented this service (class ClusterGrpcHandler with method getCluster). This service correctly generate and return data, but this data can't be send to the client. The client got an error with code Unavailable and message transport is closing.
I tried to add as many debug messages to the my app as I could and got following logs:
and exactly after 4th line return statement from method getCluster is located.
I tried to debug this code and found that method getCluster correctly generate object which have to be sent to the client. Also I found that somewhere in the netty internals exception java.lang.IndexOutOfBoundsException with message readerIndex(0) + length(10) exceeds writerIndex(0): PooledUnsafeDirectByteBuf(ridx: 0, widx: 0, cap: 30) occures. Here is stacktrace of this expcetion:
Can someone help me to understand what can be wrong and how can I make my app to send correct response to the client?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5984
Failing plugin test · Issue #5984 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Following these instructions, compilation succeeds, but when I run gradle test task, it fails with the following message:
How to fix it? Any help will be appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5985
OkHttp HPACK header compression is not fully implemented · Issue #5985 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Disregarding Huffman encoding, upstream Okhttp's HPACK implementation does not fully implement HPACK compression. Especially for the writer, its implementation is very minimal, with very simplistic header field representations (for table lookup, Indexed Header Field Representation is completely not implemented, only for indexed name; no dynamic table is involved at all).
Okhttp3 has fully implemented this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5986
enabling grpclb with alts can log channel and eventLoop mismatch warning · Issue #5986 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With grpclb and alts, name resolver creates handshaker factory which only sets the eventloop type. this can spam log about eventLoop and channel type mismatch. This warning is legit but may confuse user.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5989
Fails generating proto service implementations in Kotlin gradle module · Issue #5989 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to generate proto service implementation in java. I created a separate gradle module for using protobuf. Here's how it looks:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5990
Cannot use generated classes · Issue #5990 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
I'm trying to generate and use classes from the example in the quickstart.
This is the proto file:
According to the instructions in the quickstart guide, after compiling the proto file I should have a GreeterGrpc. This is what I get instead:
According to the guide I should extend GreeterGrpc.GreeterImplBase, but none of the generated classes contains GreeterImplBase (or even simply the string "ImplBase").
Notes: I compiled the proto file with protoc 3.9.0. More precisely:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5995
Openensus method tags are always null · Issue #5995 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
After sending an RPC I expected that metrics like roundtrip_latency can be grouped by client method. But it seems like it's always null. I think they are getting lost in the translation of method -> client_method
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5997
Bidirection stream calls get exit with StatusRuntimeException also · Issue #5997 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am newie to gRPC and use the latest version (v1.22.1) to develop a POC about trying to push notice from server side in a multi-thread environment.
I build the server, Notice Server and the client Notice Client. The all corresponding maven project files are attached as below.
prototypegRPCJavaServer.zip
The business logic of Server and Client is very simple just like chatting room. The Client sends message to the Server via method chat and will get pushing message via notice method. The Client creates a sheduled pool to run two ManagedChennels in separate thread to get notice data and additional ManagedChannel for rest threads to send chatting messages.
However, one channel used for pushing data will raise exceptions and exit sooner or later. Following is the root cause.
Did I do anything wrong and where I should look into.
Thanks in advance,
Flik
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5998
Error connect over TOR · Issue #5998 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Connecting successful over TOR
am trying to connect via GRPC to a server over TOR
Is it just a matter of using the onion address and port? I tried removing TLS but no luck I get an "UNAVAILABLE" error
any ideas? I am using ORBOT SOCKS Proxy running on the android device
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5999
Tracking issue for GracefulSwitchLoadBalancer being experimental · Issue #5999 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6000
Using GrpcCleanupRule leads to java.lang.NoSuchMethodError (thrown by  io.grpc.NameResolver$Factory.newNameResolver() ) when class extending ...ImplBase takes an Interface constructor parameter · Issue #6000 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I did not expect my unit tests to throw
java.lang.NoSuchMethodError from inside io.grpc.NameResolver$Factory.newNameResolver(...)
Here is a repo with instructions on how to reproduce the issue:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6001
Extension file 'java_grpc_library.bzl' has errors · Issue #6001 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
I don't know but I am using Bazel version 0.27.2
What did you expect to see?
I am trying to install ONOS following the Developer Guide. The site says install Bazel first, and I did install Bazel first - version 0.27.2. Then, I installed Java version 201 manually because of the new licence issues. Finally, I cloned the git repository for ONOS version 2.1 and tried to build it using "$ bazel build onos" command. As it was trying to install the software, the process was interrupted with the final message:
I tried to install different versions of jdk and onos but it did not help. I do not understand why I am getting this problem. Can someone help?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6002
SharedResourceHolder should roughly handle exceptions during close · Issue #6002 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If we look in SharedResourceHolder, if resource.close(instance) fails throws instances.remove(resource) is not run. While we shouldn't encourage exceptions to be thrown during close, we would like it to be able to recover eventually. In this case, any future resource fetches will get the partially-closed resource, which will immediately fail.
@xCASx, a workaround would be to keep the client objects alive for as long as possible. We generally encourage that for performance, but as long as one client object is alive we won't attempt to shut down this executor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6003
No such method error "io.netty.internal.tcnative.SSLContext"  · Issue #6003 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Working GRPC java ssl connection but getting below error when trying to establish GRPC SSL connection using netty-tcnative: (Sometimes the connection works, sometimes it fails)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6008
Unable to upgrade to protobuf 3.9.0 · Issue #6008 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In this PR, I am trying to upgrade to the latest Protobuf.  However, Bazel cannot build gRPC due to a dependency apparently missing from Proto:
It appears the root cause of this is protocolbuffers/protobuf@f313b9c  which attempts to avoid using bind().   The alternative, if not native.existing_rule("zlib"), has documentation that warns:
Note: If possible, avoid using this function. It makes BUILD files brittle and order-dependent.
I believe there is some ordering mismatch between when the zlib rule is defined and used.   Attempting to move the bind() call up in the gRPC repositories.bzl file causes other failures, so it isn't clear what needs to change to fix this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6009
SslContext creation failed · Issue #6009 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Created sample application to run grpc server in SSL mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6010
Differences between setting Metadata to Channel and using CallCredentials in stub · Issue #6010 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
on the title
I wonder what differences are between them.
It looks working in same way, is there any expected benefit using stub.withCallCredentials instead of setting Metadata to stub?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6011
Transport failed with go grpc client · Issue #6011 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I'm running the helloworld example of grpc-java, but request with a go client.
The request is successful in go client, but the grpc-java server throw an transport failed error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6012
Tracking issue for CallMetricRecorder being experimental · Issue #6012 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6015
Image or File Streaming  using gRpc · Issue #6015 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi ,
Now i am try to upload java grpc using image or file upload..But didn't know the concepts and lot of search the tutorials ..Can you explain that concept.pls
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6016
xds:investigate io.envoyproxy.protoc-gen-validate:pgv-java-stub · Issue #6016 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like protoc-gen-validate has pre-generated code available on maven central at io.envoyproxy.protoc-gen-validate:pgv-java-stub. It includes the .proto file so it "just works" as expected as an implementation dependency. Using it would avoid us needing to run the codegen ourselves and avoid shading.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6020
StatusRuntimeException: INTERNAL: Panic! This is a bug! · Issue #6020 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running this test against grpc 1.22.1, an exception because of an internal bug is raised
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6021
Tracking issue for OrcaMetricReportingServerInterceptor being experimental · Issue #6021 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6023
Protoc compiler plugin is being created with .exe suffix for all systems · Issue #6023 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Only windows binaries should have .exe, but all platforms have it. This is annoying because you have to change the file type manually.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6029
Error using Java 11/12 · Issue #6029 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.21.0
What did you expect to see?
I have the following code in order to use the PubSub Emulator:
When I run it in IntelliJ, it works fine. However, when I build a fat jar with sbt-assembly and run it, I get this exception:
I checked when running in IntelliJ, and it also uses the NettyChannelProvider as the ManangedChannelBuilder's provider.
So what would be happening differently when running in a release jar?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6030
Tracking issue for Deadline.Ticker and related APIs · Issue #6030 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6032
when create multi client for difference server, throw such exception java.lang.RuntimeException: ManagedChannel allocation site · Issue #6032 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
version: 1.21.0
What did you expect to see?
How to maintain multi client in our service,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6035
Using netty-tcnative with openssl-fips.  How can I verify that grpc is running with fips enabled? · Issue #6035 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am running grpc-netty-1.18 with netty-tcnative 2.0.20 on CentOS Linux release 7.6.1810.  This is all in a docker.  I need to verify that its running in FIPS mode.
I've gone and built the dynamic netty-tcnative with OpenSSL 1.0.2-fips, and I do see it reporting  that it using the expected version in the logs.
For reference these are the jars being used:
I see APR logs stating that fips mode was successfully entered.
Everything seems to work as intended and I dont see any errors, but I also dont see any way to get info on whether grpc is running with FIPS mode
On load I see log output about a bunch of cipher suite mappings, default cipher suites, and supported protocols.  I know some of the loaded cipher suites are not fips compliant, but Im not sure if that log output would be different with fips enabled or not.
I've tried passing  io.netty.internal.tcnative.SSL.fipsModeSet(1) but I dont see any difference in the log output.
Is there some conclusive way determine whether grpc is running in a fips compliant mode?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6036
DNSNameResolver ignore targetURL. · Issue #6036 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
The authority part of the target URL passed from client is used to form part of the DNS host and port when it looks up the SRV and TXT records.
Here is the start:
From this point onward the authority obtained from the targetUri passed to this constructor is lost. Therefore if we want to use an alternative DNS server from the default one, the current code doesn't work.
In the code where it looks up the SRV record:
Given that "grpclbHostname" is the service name passed from the client with prefix _grpclb._tcp. there is no way I can use a different DNS server other than the underlying one for the host where the code is executed.
For example, this is what I want to be able to do:
Even though I have the SRV record for _grpclb._tcp.helloworld.testdomain.com defined in "dnshost:dnsport", the code fails to find it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6037
none
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6040
CallMetricRecorder is not test-friendly · Issue #6040 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently only InternalCallMetricRecorder can create CallMetricRecorders. If an service implementation records metrics and wants to test that behavior, it cannot do so unless it uses the internal class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6041
Non-systematic StatusRuntimeException with error code INTERNAL_ERROR with alpakka akka streams googlepub/sub connector. · Issue #6041 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue itself
I'm using alpakka pub/sub connector, it use gRPC library inside. Some times publishing fails insde grpc library with strange stacktrace:
Restarting graph due to failure. stack_trace:
As alpakka developers say(akka/alpakka#1854 (comment)), they are users of grpc, and issue located insde grpc because it is internal (protocol level).
This thing fails with ~10-15 mps publishing total for 6 publishers with parallelism level of 10 for each. Issue occurs "sometimes", after some period of ordinary function.
Same thing I have with subscribers - they just fail after ~ 30 minutes of work.
The thing I wanted to see is an abscence of such unclear exceptions and normal function.
What version of gRPC are you using?
1.21.0 which comes with alpakka
Versions used
Code which probably will reproduce the issue:
It is in scala as I can't write java code at all. It runs for ~ 30-35 k entries and then subscriber just stops. Tested at live pub/sub topic/subscription.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6043
Tracking issue for stabilizing AndroidChannelBuilder  · Issue #6043 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are considering stabilizing AndroidChannelBuilder APIs. Here are some potential changes:
Deprecated methods scheduledExecutorService(), sslSocketFactory() and transportExecutor() will be removed. Users should configure the delegated ManagedChannelBuilder directly.
fromBuilder() will be renamed to usingBuilder(), which gives a clearer implication that original builder could still be used/changed.
Implicitly, Android connectivity management (see #4056) will be stabilized.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6045
Delete GrpcUtil.IS_RESTRICTED_APPENGINE · Issue #6045 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
IS_RESTRICTED_APPENGINE was for GAE Java 7. That doesn't exist any more, so these code paths are dead code. We should delete IS_RESTRICTED_APPENGINE and assume it is always false.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6050
Minimalistic gRPC Client/Server application (maven based) · Issue #6050 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Something I've been struggling for days, because of the outdated tutorials or non-maven based project examples, there is not enough talent pool on gRPC java either, so I've created a minimalist maven based client/server based project with a single class file in each to convey the problems.
Please download project from https:
Server runs fine -> Run Server:  java -jar Server/target/Server-1.0-SNAPSHOT.jar
Once the above error gets fixed, the Client will throw an error while compiling because of some dependencies errors, I'd highly appreciate for getting it to work, I've spent two days struggling with this.
The objective is that jar file for client or server is independently deploy-able.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6053
Does gRPC Testing support JUnit5? · Issue #6053 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
Does gRPC Testing support JUnit5?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6067
Need to know how NettyServerBuilder allocates memory to the buffer · Issue #6067 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Question copied from grpc/grpc#19887
If i increase the inbound max message size at server side to be 1GB by NettyServerBuilder, how will the memory be allocated to buffer?
Will complete 1GB be allocated to the messaging buffer or will it be lazy allocation meaning only that only that much memory will be allocated , that is needed by object.
For example : If i set NettyServerBuilder.maxMessageSize(MAX_MESSAGE_SIZE), where MAX_MESSAGE_SIZE = 1GB
Then if client sends 500 MB object , will complete 1GB memory will be allocated or simply 500 MB memory will be allocated to the buffer ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6074
Convert Alts to use new protocol Negotiator style · Issue #6074 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TsiHandshakeHandler needs to extend ProtocolNegotiationHandler
AltsProtocolNegotiator needs to be modified to work for both clients and servers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6075
Should Deadline implement equals()/hashCode()? · Issue #6075 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seems reasonable that these should implement equals() and hashCode(), no?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6080
Tracking issue for ClientCallTracer APIs being experimental · Issue #6080 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Introducing ClientCallTracer class, which extends ClientStreamTracer.Factory for tracing client side RPC events, with an addition of exposing tracer component properties via Attributes.
Client side tracer implementers would provide same tracing logic as using ClientStreamTracer.Factory, with a plus of ClientCallTracer#getTracerAttributes(Attributes.Builder) to put properties being exposed externally.
New API ClientCall#getTracerAttributes() bridges the access to tracer properties on ClientCall and on ClientCallTracer.
Why existing ClientStreamTracer.Factory is not enough?
The problem came up with external users/frameworks wishing to access tracer specific properties (e.g., SpanId or TracerId created by Census when CensusTracingModule is applied). Putting tracer properties in CallOptions and propagating through ClientInterceptor#interceptCall(...) only makes tracer properties accessible in interceptor applying time, it does not tie tracer properties to the ClientCall instance. External frameworks/users are not able to access tracer properties unless installing a ClientInterceptor that runs strictly after the tracer installing interceptor. This raises two problems:
Relying on a certain order of interceptors is problematic, which makes special cases for particular interceptors. It is hard to maintain the ordering of different interceptors as there are many places registering interceptors (in-channel, wrapping channel, global interceptors).
Currently, interceptors for Census modules run last to avoid ClientStreamTracer.Factory being overwritten in CallOptions. So no other interceptors are able to access tracer specific properties.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6082
Deadline silently overflows at ~292 years · Issue #6082 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside of Deadline's constructor, there's this snippet of code:
deadlineNanos = baseInstant + offset;
A long of nanoseconds overflows after ~292 years, so for all intents and purposes, it's probably OK, but it still might be worth checking that an overflow didn't occur (either using a library like Guava's LongMath.checkedAdd(long, long) or Java8+'s Math.addExact(long, long), or even just making sure the result isn't negative.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6092
Unary call can hang forever if uncaught exeception thrown in client interceptor · Issue #6092 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
v1.2.0, but reproduced with v1.23.0
What did you expect to see?
If a buggy interceptor throws in onClose, gRPC logs the error, but doesn't cancel the call. This can lead to a client hanging forever. Interceptor implementations should take care not to throw, but we think gRPC could also guard against this. A deadline doesn't help, because the deadline future is cleaned up before calling the client observer's onClose method.
For instance, ClientCallImpl#closeObserver could catch runtime exceptions and cancel the call.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6094
grpc-java v1.23.0 should use which version netty-transport-native-epoll ? · Issue #6094 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
For HTTP2 DoS vulnerability, should I use netty-transport-native-epoll  v4.1.39 or v4.1.38( The grpc-java v1.23.0 use v4.1.38 netty) ？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6095
INTERNAL: Received unexpected EOS on DATA frame from server (Android) · Issue #6095 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When doing a blocking call from a java/kotlin client I am getting the following error:
When doing a non-blocking async call the onNext is called correctly, and the response proto is succesfully sent. Yet after this the same error occurs and onCompleted is not executed. When I do a stack trace on the exception I see the following result:
Wrapping the Service on the server with try-catch blocks does not show any exceptions on the server. If necessary I can post the code of the server Service and the client calls.
What version of gRPC are you using?
No errors or more detailed error information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


6101
cpu running into full load,Possibly infinite loop · Issue #6101 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem representation ：#2832
What JVM are you using (java -version)?
netty version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6105
NPE in com.google.auth.oauth2.JwtCredentials$Builder.setPrivateKeyId(JwtCredentials.java:223) due to a mistake in io.grpc.auth.GoogleAuthLibraryCallCredentials · Issue #6105 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi All,
I run an application that uses java clients libraries for pubsub, stackdriver logging, stackdriver tracing.
Everything works ok, if the application uses only pubsub or stackdriver logging & tracing, but if it uses all of them then I got a NPE.
I debugged the application and it seems like I found the root cause.
There is the following  class:
The stacktrace of the issue:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6108
While grpc server occurred request parsing error, server application layer was not noticed · Issue #6108 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
While grpc server occurred request parsing error (pb incompatible normally), application layer was not notified, gprc framework just close current stream and then send a SendResponseHeadersCommand frame but not a cancelStream frame. Can anyone answer the two questions above? thx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6112
Netty server terminated - k8s readiness probe using gprc-health-probe · Issue #6112 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
A successful test by GRPC-health-probe on a k8s readiness probe.
A java grpc service when queried by a k8s readiness probe with a grpc-health-probe gives a netty exception netty server gives a io.grpc.netty.shaded.io.grpc.netty.NettyServerTransport notifyTerminated. The same service runs fine when used with outside k8s with docker
Minikube 1.2.0 k8s 1.15
Works fine with Go GRPC in k8s but with Java GRPC this error occurs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6114
PubSub no route to host / network unreachable · Issue #6114 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What did you expect to see?
Working PubSub connection
Since last week my service can no longer connect to PubSub this is happening both on my local environment as well as from GKE.
In GKE I am getting the following error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6115
java.lang.UnsatisfiedLinkError: no io_grpc_netty_shaded_netty_tcnative_osx_x86_64 in java.library.path · Issue #6115 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6118
Netty client channel with TLS over proxy does not establish a connection anymore in 1.22.0 and 1.23.0 · Issue #6118 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A netty grpc channel never establishes a TLS connection to a valid grpc server when using a HTTP proxy. The problem is reproducible in versions 1.23.0 and 1.22.0 but not in 1.21.0 and earlier.
The proxy is configured on the JVM with -Dhttps.proxyHost/-Dhttps.proxyPort.
The channel does send http CONNECT with the correct destination to the configured proxy but after the proxy responds with HTTP/1.1 200, instead of starting with the TLS connection the channel simply hangs and does not send any further traffic to the proxy.
The issue is caused by changes in io.grpc.netty.ProtocolNegotiators. Replacing this file in 1.23.0 with the one from 1.21.0 (with some minor compile fixes) restores the functionality.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6119
Upgrade to okhttp3  Issue #6119 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Indeed a lot of android apps now use okhttp3 to make http requests. But if an android app also uses grpc, it must still embed okhttp 2.5.0 library.
Kind regards,
Laurent
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6129
GoogleAuthLibraryCallCredentialsTest is flaky · Issue #6129 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6133
com.google.errorprone:error_prone_annotations:pom:2.3.3-SNAPSHOT · Issue #6133 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6138
Tracking issue for io.grpc.EquivalentAddressGroup.ATTR_AUTHORITY_OVERRIDE being experimental · Issue #6138 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6139
Java gRPC bi-streaming delay on receiving message at client · Issue #6139 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying implement RouteGuide Java example. https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/routeguide
I modify Server to response a message immediately after receive a message from client.
But client seem to be can't receive message from Server before requestObserver.onCompleted() was call from client side.
At first time server and first time client run: All message reply from server show up right requestObserver.onCompleted() was call.
At second time client run (server still running): Client receive message from Server after send two message.
Running log:
At First time server and first time client
What happen with my code?
How can I make client receive message immediately after server response?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6144
Trace context propagation using non-gRPC headers · Issue #6144 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, gRPC uses the grpc-trace-bin header for context propagation across process boundaries. This works perfectly for an environment in which all services are using gRPC for service-to-service communication. In the case of a more "polyglot transport protocol" environment, preserving the trace context becomes a little more involved.
To give some more specific context / motivation for the problem at hand, we have inbound HTTP requests that are subsequently proxied by an "API gateway"-like service over gRPC to respective backends. All other downstream traffic is gRPC. We're running this in a "mesh" setup, with Envoy running as a proxy alongside each container.
Envoy is configured (via Isito) to look for B3 headers, and will correctly do the context propagation, for HTTP. It doesn't know about grpc-trace-bin and thus can't participate in these traces. Instead it will emit its own B3-flavored trace for the particular hop, and we end up with incomplete traces - one set for the client / server gRPC spans, and another for just the proxy hops.
I'd like to propose / seek feedback on the idea of making the wire transport for tracing configurable / pluggable. I'm coming at this from the perspective that gRPC's trace propagation is tightly coupled to a gRPC-specfic format and it doesn't really make sense (at least to me) to teach an HTTP server / proxy how to handle gRPC's internal format.
Maybe I'm missing some background. I did a quick look in the issues for this repo but didn't see anything obvious. Looks like something similar has been brought up in the Go community, via census-instrumentation/opencensus-go#666, and census-instrumentation/opencensus-specs#136 (closed out).
If this is better for a list, happy to post there too, jlmk where to ask.
Basic idea of the change - Open Census has the concept of Binary and TextFormat "setters" and "getters" to do the propagation. We replaced the grpc-trace-bin propagation header with the full set of B3 headers (no reason this couldn't be the single B3 header).
I've proven this out internally with some light forking of the code to make a new tracing module that does the B3 propagation. The following code is an example, isn't production ready, etc. etc.
We're not actually forking gRPC for this, rather we're making a new tracing module that has the above changes, which we then install into client / server pipelines:
InternalNettyServerBuilder.setTracingEnabled(serverBuilder, false);
With these code changes, we get full end-to-end tracing with all clients, servers and sidecar Envoys adding their spans.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6146
Android kokoro build is very flaky · Issue #6146 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Android kokoro build became very flaky after #6103
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6150
Question: Fastest unix socket setup for single-request server · Issue #6150 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
I need to run a server that will respond as fast as possible for a future request. This server's only purpose is to serve this single request and die, so I don't care about multiple requests or high load.
Currently what I'm doing is:
Can I change something in this server/ELG setup to make it act faster?
I'm using directExecutor as I guess it should be faster that starting a thread for the request.
Not sure about the 1 thread ELG though.
Please remember I only need to serve 1 request as fast as possible. I will never receive more requests after this request.
Thanks a lot
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6153
Add copy method to NameResolverRegistry · Issue #6153 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
The problem
2 applications in the same JVM (tomcat) define a custom ´SelfNameResolverProviderthat maps the client nameself` to
the own application. If both applications add it to the registry then the second one will mistakenly connect to the first application.
Possible Workaround
Create new (empty) registries and populate them with "well-known" NameResolverProviders.
Drawback: All providers must be known at compile time and any later additions won't be picked up from the classpath.
Suggested fix/improvement
Add a copy(), clone() or initializeDefaults() method to the registry that allows creating safe copies/independent instances of the registry that still contains the default/expected providers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6157
[Question] big gap before and after execution of implemented service logic · Issue #6157 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We are trying to implement a high-throughput low latency service, when increasing throughput, noticed increased amount of traffic has gaps before and/or after the execution of implemented logic, as shown in the screenshot below:
Here is grpc server side configs:
Wondering if anyone has insights about what those gaps are? or what the executor is waiting for?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6160
Question: prevent auto-cancellation · Issue #6160 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
When RPC finish a second RPC using a Future stub with a forked Context should not cascade cancellation.
We have a use-case where we want to fire and forget an additional RPC when the first RPC finish. I have tried to reproduce that here: ContextResource.java#L62. What we see is the second RPC will be cancelled with  io.grpc.StatusRuntimeException: CANCELLED: io.grpc.Context was cancelled without error.
Replacing fireAndForgetWithListenableFuture with fireAndForget has the expected behaviour of preventing the cascading cancellation.
What would the "correct" way of using a forked Context with a future stub be? I tried to find an example but came up short.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6161
helloworld example client tests misleading · Issue #6161 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HelloWorldClientTest.kt uses a mock for serviceImpl. However, it never defines the SayHello RPC method. This causes the RPC in greet_messageDeliveredToServer to fail with Unimplemented. However, this doesn't fail the test because HelloWorldClient catches the exception and logs it.
Standard error for io.grpc.examples.helloworld.HelloWorldClientTest:
It appears this is the same flow of HelloWorldClientTest.java. Both of them should be fixed to provide a fake implementation for sayHello. That should not be done via the mocking framework, but via the instance passed to delegatesTo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6162
Uncaught exceptions in server · Issue #6162 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Error response after uncaught exception
Refer to the following file/line number:
You can see that Exception types that are not subclasses of Error or RuntimeException (known as "checked exceptions") are not caught here.
Uncaught exceptions result in no response being sent to the client (but the connection remains open) and thus, from the clients perspective, the RPC call hangs indefinitely.
All exceptions should be caught here, not just runtime exceptions and errors.
"Checked" exceptions can be thrown from code that does not declare it in the signature by several means. One example is here:
Another example is from any kotlin code that calls a java function that throws a checked exception.
NOTE: it looks like the same problem exists in multiple places in this file. The line number I linked is the specific one that I hit in the wild.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6164
Question fro ManagedChannelImpl.getNameResolver  · Issue #6164 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I guess this is a bug  in ManagedChannelImpl.getNameResolver ?
this target should be set in host other than path？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6166
Long running request got cancelled when sending a message from server · Issue #6166 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
From Maven:
Client (C#)
From nuget:
What did you do?
We implemented a service that receives a request from a gRPC client and then waits for a condition to trigger which can take up to several hours. When this condition is finally triggered, the gRPC server sends a message to the client and completes the connection.
The server uses keep alive heartbeating with a keepalive time of 30sec.
Now the problem is that when the server finally reached the condition and wants to send a message, we catch the following exception:
The client uses the async API without setting a deadline or headers, without using a CancellationToken and without Context Propagation.
What did you expect to see?
As we can see that the heartbeats are working fine, our expectation is that the server can send messages using the streamObserver and the call us not CANCELLED.
We were able to reproduce this issue and to create a network capture (I removed the heartbeats):
The RST_STREAM message has Error code CANCEL(8).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6167
tracking issue to backport proxy handler fix (#6159) · Issue #6167 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when the #6159 is verified, backport to 1.22, 1.23 and 1.24
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6168
Guava 26-android conflicts with runtime dependencies  · Issue #6168 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
What version of gRPC are you using?
Java 11.0.3
What did you expect to see?
I do not expect to see java.lang.NoSuchFieldError: JAVA_LOWER_CASE which is part of the CharSet object from guava JRE.
The guava 26-android version conflicts with my current runtime environment since it does not have the field above. I have guava 23 JRE in my runtime that needs to be supported. Gradle automatically picks the higher version number to load during runtime. I am able to easily override the guava version used for my project by specifying
compile ('com.google.guava:guava:23.0') { force = true }
However, every upstream client that depends on my library needs to force their guava up the chain (we all use lower versions).
Does anyone know of a way that I can forcefully set the guava version for my library while maintaining the versions as well for upstream consumers of my library? I hate to tell everyone using my library to add { force = true } to their guava dependency.
I don't need android support, so if there is away to drop android guava completely and replace it with the jre version of guava, that could be an acceptable solution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6174
How does IOS call the GRPC server based on NettyServerBuilder · Issue #6174 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How does IOS call the GRPC server based on NettyServerBuilder? thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6193
C# client call java server Exception:Transport failed · Issue #6193 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting your issue.
copy helloworld.proto to C# project.
What version of gRPC are you using?
use java example run grpc server.
use java client  call java server  is right.
but C# client call java server is error.
What did you expect to see?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6195
Remove "safe" checkbox from android-interop-testing · Issue #6195 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#6192 disabled GET on the channels, such that MethodDescriptor by itself does not enable. Since GET is half-baked at this point and not making progress, it is probably best to remove the "safe" checkbox and the interceptor that sets safe to true. That is trivial code and can be added back again if/when GET work resumes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6202
INTERNAL: Protocol error Rst Stream when communicating with .NET Core 3 server. · Issue #6202 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have compiled a repo with the issue in a reproducible manner :
I have basically download the "Greeter" example from dotnet and java  repos and tried to make them work together. Since we are trying to migrate our services to .NET Core 3.0;
Someone reported the same issue on stackoverflow for Kotlin
I have tried the same .NET Core 3 server with Python, .NET and BloomRPC client and it worked flawlessly, which is why I post the issue here.
What version of gRPC are you using?
What operating system (Linux, Windows,...) and version?
I am running on Windows, using Docker in a Linux container.
What did you expect to see?
I expected to see a response containing "Hello whatever message I sent initially".
What did you see instead?
Steps to reproduce the bug
I have described it completely here.
I have also attached a log from the package sniffer on the client here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6204
API to add constraints on SSL for key size · Issue #6204 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem? Please describe.
I have a gRPC server which is using mutual TLS and I want to reject connections from clients who have a public key size less than 2048 bits.
Describe the solution you'd like
There should be an API in the SslContextBuilder class to set SSL key size related constraints
Describe alternatives you've considered
I was able to achieve the same using a ServerInterceptor by doing something like this
This is a bad way to do it because
The validation is being done after the connection is already
established.
The validation is only triggered when a request/call is made.
Every single call involves an extra overhead of validation.
In case of a validation failure, only the call is rejected but not the connection to the client.
In an ideal scenario
The validation is done during the connection establishment phase. (or some point during the creation of the channel between client and server)
The validation failure would prevent the connection from being created and not set it up and disconnect later.
A client is only validated once per session and all the calls made during that session do not incur any overhead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6209
how can I know the channel is inactive in the grpc server. · Issue #6209 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I'm here for the help of grpc usage.
When I working on grpc netty server in java. Do I have a way to know if the netty channel between client and server is inactive?
The scenario is that I want to clean some resources (for instance, the TCP connection between my service and database etc.) if the server side detects the channel in between is inactive.
The code below describes how I created the grpc service:
Basically what I found in the source code is:
However, it only handles the situation when (e.g.) the client shuts down abruptly while doing the request to the server. **What I really needs is our server is able to detect the channel's inactivity in-between anytime rather than the only or limited scenarios like above. **
If there is any feature or method I can use fitting for my need?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6210
Add interop unit test for LookasideChannelLb with XdsClient · Issue #6210 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6213
ALTS should use Conscrypt when available · Issue #6213 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Something like this would work:
Although it would be better to create the Conscrypt provider with reflection, so that Conscrypt is not a required dependency. There are platforms where Conscrypt is unsupported and making a fat jar with it does require extra configuration. I'm unsure whether we should add a dependency on Conscrypt or let the "user" do so (even if that is gax-java).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6216
Wrong dependency details in https · Issue #6216 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Wrong dependency details in https
Issues :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6217
Trouble adding Google Services library on Android project with gRPC library · Issue #6217 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was trying to add Firebase Analytics into my Android project with gRPC library, in which Google Services library is also to be added.
By simply setting up the app from the Firebase console, upon syncing I have gotten the following error:
In project 'app' a resolved Google Play services library dependency depends on another at an exact version (e.g. "[2.3.2
,2.3.3]", but isn't being resolved to that version. Behavior exhibited by the library will be unknown.
For extended debugging info execute Gradle from the command line with ./gradlew --info :app:assembleDebug to see the dep
endency paths to the artifact. This error message came from the google-services Gradle plugin, report issues at https://
github.com/google/play-services-plugins and disable by adding "googleServices { disableVersionCheck = false }" to your b
uild.gradle file.
I am using gRPC version 1.22.1.
Downgrading to 1.21.1 results in no such errors showing up again, but it is more of a workaround than a solution.
The problem occurs from 1.22.0 onwards to the latest version.
My hunch on why this happens is because of version disparity at errorprone at line 34 and line 188.
Set up a Firebase project, add Android app, and follow instructions (down the line the google-services.json and dependencies at the gradle files are being added)
Dependency failing: io.perfmark:perfmark-api:0.16.0 -> com.google.errorprone:error_prone_annotations@[2.3.2,2.3.3], but
error_prone_annotations version was 2.3.2.
The following dependencies are project dependencies that are direct or have transitive dependencies that lead to the art
ifact with the issue.
For extended debugging info execute Gradle from the command line with ./gradlew --info :app:assembleDebug to see the dep
endency paths to the artifact. This error message came from the google-services Gradle plugin, report issues at https://
github.com/google/play-services-plugins and disable by adding "googleServices { disableVersionCheck = false }" to your b
uild.gradle file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6218
netty-tcnative-boringssl-static version compatibility with 1.24.0 · Issue #6218 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm curious as to what would be the continuation of the compatibility matrix exposed in this section: https
Thanks,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6219
grpc-bom to specify type:pom for protoc-gen-grpc-java · Issue #6219 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem? Please describe.
When our tool (cloud-opensource-java dashboard) tries to read grpc-bom to check the compatibility of Google Java libraries, it fails because our tool tries to download a "JAR" file for protoc-gen-grpc-java (which has type:pom).  GoogleCloudPlatform/cloud-opensource-java#943
While io.grpc:protoc-gen-grpc-java:1.24.0 properly declares type:pom, grpc-bom contains:
From gRPC BOM reader's perspective, I cannot tell the packaging as pom.
Describe the solution you'd like
I want grpc-bom to declare "type: pom" for protoc-gen-grpc-java. I guess the change would be at https
Describe alternatives you've considered
Alternatively, I can implement special case for protoc-gen-grpc-java in our tool. But declaring the packaging in the BOM properly would make more sense.
Additional context
Add any other context about the feature request here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6235
Mutual TLS with client hostname validation · Issue #6235 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've found a lot of information online about hostname validation on the client side, but is there a way for the server to verify the client's hostname when using mutual TLS? I'm currently building my server with something like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6236
Support for introducing custom tags to metrics · Issue #6236 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem? Please describe.
@mackenziestarr mentioned on Gitter:
I'm using the prometheus exporter and the grpc latency metrics look like this grpc_io_client_roundtrip_latency_cumulative_bucket{method="google.bigtable.v2.Bigtable/ReadRows"} but i would like to add an additional tag to achieve something like grpc_io_client_roundtrip_latency_cumulative_bucket{method="google.bigtable.v2.Bigtable/ReadRows", table="my-bigtable-table"}
Describe the solution you'd like
Be able to access the opencensus contexts defined in the CensusStatsModule — pretty similar to this github issue census-instrumentation/opencensus-specs#142 which suggests maybe it is possible in grpc-java
It is fine to add the tag manually in the application; google-cloud-java doesn't need to do this automatically at present.
Describe alternatives you've considered
Re-implement latency stats
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6243
backport #6220 (bom specifies protoc type) · Issue #6243 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
backport to 1.22 1.23. and 1.24
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6252
Method type specific MethodDescriptor wrapper · Issue #6252 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem? Please describe.
It would be great if MethodDescriptors would be wrapped in method type specific class/interface, similar to RequestMethods. It would enable gRPC tooling to know what type of method it is at compile type, so it would be possible to return appropriate action interfaces based on the method type (does method have single/multiple request/responses). This would help to reduce the tools API verbosity and a bit of complexity.
Describe alternatives you've considered
Current approach is to have differently named methods (unaryMethod(), serverStreamingMethod(), ...) and check if appropriate method type is passed at runtime.
Additional context
I'm trying to create a gRPC method mocking tool for easier testing - gRPCMock. This feature would help determining what type of stub needs to be returned and have single name method for all types.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6259
file transfer using grpc stream · Issue #6259 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm currently sending file from server to client using grpc. This files could have a size of few kilobytes to 50megabytes.
Below my proto example:
So i use stream to get my file ....
As explained in this tutorial and official tutorial etc, we should use async stub in client side in order to get chunk that are sent by server.
My first question is how to wait properly as this call is async ?
Then, When my client call my grpc remote method, i feel my app is stuck when i'm wrting to ByteSink file. Server is sending chunk on first call (or first iteration or hasNext() call on blocking stub)  without any flow control on each chunk during loop ... or without waiting onNext iteration from client ... So server is sending data, client begin to write few kilobytes and then client is stuck and server continue to send is data until he finishes, but client is still stuck  on writing in byteSink file. This error occured only from remote server. When i run the server locally, the download is OK.
Any idea about what is happening ?
Initialy ,i worked with blockingStub, then i tried asyncStub ...and if i didn't had a sleep in server side, i cannot load correctly all bytes. Also, when i send file that had  1mb size, i face same issue.
Currently,  i'm sending between 8 to 16ko but the download is very slow ....
Below piece of code of my server  code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6266
Determine whether we should drop dependency on ByteStreams · Issue #6266 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We purposefully avoided com.google.io for Android, which is why IoUtils existed. I'm not sure if anything there has changed, but #5834 started using com.google.io. ByteStreams pulls in a bit more code that would initially be expected and maintaining IoUtils was trivial. There is some potential performance gains (memory usage and CPU) to be had by ByteStreams, because it uses shards that are combined at the end vs one contiguous chunk of ByteArrayInputStream.
From #5834 we see that using ByteStreams added .5K and 14 methods. That's not much, but simultaneously seems a bit much for limited gain.
This came up as ByteStreams.toByteArray was noticed by a Google-internal Android checker for some related code. (cl/272629838)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6268
Tracking Issue for Xds/SDS Channel/Server Builders being experimental · Issue #6268 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Additional context
For now (in the absence of XdsCredential) we need to use XdsChannelBuilder and XdsServerBuilder to be able to use XDS provided TlsContext information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6274
Disabled tests in io.grpc.xds.sds.trust.SdsX509TrustManagerTest need to be re-enabled · Issue #6274 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Many tests in io.grpc.xds.sds.trust.SdsX509TrustManagerTest read from files that fail with blaze (internal failure). Need to fix by using resources
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6279
offloadExecutor is experimental API · Issue #6279 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Was originally added in #6238 (was renamed from blockingExecutor)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6282
Service Service cannot generate ServiceGrpc.java file · Issue #6282 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I would like to ask, my proto file definition is correct, I want to add the service RandomService in the service.proto of the benchmark module, but did not generate the RandomServiceGrpc.java file. Thank you！
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6283
DelayedClientTransport can trigger RejectedExecutionException · Issue #6283 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've seen the following exception (b/142475326):
The application was using our default executor, which means we scheduled work after the channel terminated or the reference counting is broken.
When the channel terminates it guarantees that it is done scheduling work on the executor, but not that all the scheduled work is complete. The problem here appears that some of that work is scheduling more work on the same executor.
Specifically, this runnable can produce more runnables:
But while that runnable is running, 'stream' is likely to have already been removed from 'pendingStreams'. So if the channel is shut down at that point the transport will terminate abruptly and no other transport will "own" the call yet, so the entire channel can terminate before the runnable completes.
We could either split start() draining to a separate method in DelayedStream so that newStream()+start() can be called directly within reprocess(), or we could keep a counter for the number of streams still draining and delay transport termination until it reaches zero.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6299
how to avoid this exception ? · Issue #6299 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6300
Race condition causing NPE with LocalChannelProvider and GrpcCallContext with timeout · Issue #6300 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There seems to be a race condition causing a NullPointerException when using an InProcessServer, a LocalChannelProvider and a GrpcCallContext with a very short timeout.
The following example call will (often) cause the problem:
GrpcCallContext context = GrpcCallContext.createDefault().withTimeout(Duration.ofMillis(1L));
Assuming that the (mock) server will take more than 1 millisecond to respond, the expected outcome should be a DeadlineExceededException wrapped in an ExecutionException. Instead, a NullPointerException is logged and the call hangs indefinitely.
The exception that is logged is:
The following test class will reproduce the problem. If you change the value of the CLIENT_CONTEXT_TIMEOUT constant from 1 millisecond to for example 100 milliseconds, you will get the expected outcome of each call just timing out and the test case will succeed (after 10 seconds).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6306
Can't compile when proto definition contains oneOf field type · Issue #6306 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please answer these questions before submitting a bug report.
What version of gRPC are you using?
What operating system (Linux, Windows,...) and version?
What did you expect to see? Should compile and generate from proto definitions without errors
What did you see instead?
Task :compileKotlin FAILED e : Supertypes of the following classes cannot be resolved.
Please make sure you have the required dependencies in the classpath:
class entity.grpc.User.MyAgeCase, unresolved supertypes: InternalOneOfEnum
Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6315
netty-tcnative incompatible with Conscrypt provider · Issue #6315 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using conscrypt like:
Security.insertProviderAt(Conscrypt.newProvider(), 1);
On one machine we got lots of weird failures, but also:
It looks like Netty is trying to dig into the JDK to reuse code. But that is only used in ReferenceCountedOpenSslContext which is when Netty is using tcnative.
GrpcSslContexts prefers tcnative, which is how tcnative is being selected. Netty then tries to use Conscrypt because of getInstance("TLS").
It's unclear what the best solution is here. We probably do want to figure out a fix for Netty to work with Conscrypt, but it's unclear what rules Netty should use, since it is already in hack territory. In the short-term, if Conscrypt is the provider for "TLS" we could select JDK+Conscrypt instead of tcnative in GrpcSslContext.
CC @normanmaurer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6322
Localized exceptions are being logged at level INFO (see also #5872) · Issue #6322 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue is related to #5872.
What version of gRPC are you using?
What operating system (Linux, Windows,...) and version?
What did you expect to see?
Useless exceptions being logged at a lower level than INFO.
What did you see instead?
Useless exceptions being logged at the level INFO.
Steps to reproduce the bug
Have your Windows set to german and have a client forcefully close the connection to the grpc server.
The following exception is then logged at INFO level:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6323
Request got cancelled by RST_STREAM - race condition · Issue #6323 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Revised version of #6166. We actually thought that the elapsed time was a factor but it seems it is a race condition and can be observed instantly.
We implemented a service that receives a request from a gRPC client and then waits for a condition to trigger. When this condition is finally met, the gRPC server sends a message to the client and completes the connection.
In our service it can happen that a trigger is fired by a few threads concurrently since we receive updates via several input sources. This is where we sometimes run into the described problem.
When creating the reproducer it could be observed that the request is always answered and the RST_STREAM comes in later. However, onComplete() is not called.
NB: In our full-blown service (Spring Boot based) we only saw the reply in the tcp dump but not in our application. But this is probably due to the nature of a race condition.
We also see this message in the logs:
This is probably where the RST_STREAM originates from that causes our service to not get the response or have onCompleted() not called.
I read that StreamObservers are not thread-safe but I don't know how StreamObserver and ServerCallImpl are connected.
I was wondering if ServerCallImpl could be made thread safe in this regard. Looking at the ServerCallImpl source code I can see that there are several fields representing the state but only one is volatile.
So after all it seems we are simply using gRPC wrong. Do you think there is a chance that gRPC can behave better in such cases because we wasted quite some time finding the root cause of this issue.
We now prevented this problem by guarding the triggering by an AtomicBoolean that only lets the first thread pass. Another approach was to create a synchronized method in our StreamObserver that calls onNext() and subsequently onCompleted().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6330
Can channelBuilder support add a  param to cancel using opencensus tracer  · Issue #6330 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem? Please describe.
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
Describe the solution you'd like
A clear and concise description of what you want to happen.
Describe alternatives you've considered
A clear and concise description of any alternative solutions or features you've considered.
Additional context
Add any other context about the feature request here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6332
Classpath clash between protobuf-java & protobuf-lite · Issue #6332 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, there are some equal classes in protobuf-java and protobuf-lite:
There are clashed archives:
And both these libraries are used in grpc-protobuf:
It would be great to fix dublicated classes at grpc-protobuf.
Thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6337
grpc-java android wear OS · Issue #6337 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using grp-java in an android app and i have been asked to migrate the app for android wear OS.  Will grpc-java work on Android wear OS?
thanks
chris
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6340
gRPC Client Threads Concept  · Issue #6340 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Client Thread Consuming & Queue Logic Questions
I have a server stream rpc call
I have grpc Client request created using java and used the StreamObserver onNext
I am trying to understand threading and queuing concept on the client side.
What happens if message on the server side are queuing up fast and the client is been consuming it slow. After 2 hour the TCP connection closed, as the server message are getting queued (GRPC_ARG_KEEPALIVE_TIME_MS is 7200000 (2 hours))
I have written my processing logic in onNext, will this cause it to slow down the consuming of messages?
How is the order of the message maintained in the client, if cachedPool is used?
Will overriding the executor with to more number of thread pool withExecutor(Executors.newFixedThreadPool(20) help?
I have also tried using MoreExecutors.newSequentialExecutor(Executors.newSingleThreadExecutor()), will this slow down the client consuming of messages?
What is the efficient executor in MoreExecutors to process messages sequential and fast?
Will client host device CPU/Memory constrains restrict the number messages being consumed per min?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6348
Packet validation problem · Issue #6348 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is no problem in communication transmission, but due to the differences in the generated structures and the different check codes generated by CRC, how can I validate the packets?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6353
INTERNAL: REJECTED_SEMAPHORE_EXECUTION  · Issue #6353 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got this error code.but I don't understand meaning of REJECTED_SEMAPHORE_EXECUTION
Cloud you explain why my grpc client call got this code(REJECTED_SEMAPHORE_EXECUTION)? Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6354
Are grpc-benchmarks and grpc-interop-testing for users? · Issue #6354 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The artifacts grpc-benchmarks and grpc-interop-testing are part of grpc-bom. Are they intended to be used by users?
Background:  GoogleCloudPlatform/cloud-opensource-java#1004
Our static analysis shows that transitive dependencies of the two artifacts have missing class references. I'm wondering whether these missing references would cause problems for Google Cloud users or not. If they will not go users' class path, then it won't cause a problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6356
Update google-auth-version to 0.18.0 · Issue #6356 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In build.gradle
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6357
Update OpenCensus to 0.24.0 · Issue #6357 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In build.gradle.
Most other projects in the GCP orbit have already migrated to this version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6364
Propose to officially support ARM64 platform · Issue #6364 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Yes, recently, I am working on promoting Hadoop building on ARM64 server, while an error occured due to missing the io.grpc:protoc-gen-grpc-java:exe:linux-aarch_64:1.15.1 artifact for aarch platform, see error messages:
In the Maven central repo, there are different version of  protoc-gen-grpc-java artifacts for linux-x86, osx-x86, windows-x86, but no aarch64 specific package. see:
I have searched this problem in google, found that there are some similar issues brought up by others, such as #2202 and disscussion , there are also some posts share workarounds by compiling grpc-java manually with private patches. actually, I have also tried to build protoc-gen-grpc-java but it also easily fail for some reason.
Describe the solution you'd like
Hope we can officially support ARM64 platform and publish io.grpc:protoc-gen-grpc-java:exe:linux-aarch_64 artifact in Maven central repo.
I am not sure if I am missing someting, please pointing out if I am wrong.
Describe alternatives you've considered
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6365
grpc-interop-testing on Maven Central no longer includes tar/zip · Issue #6365 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also applies to grpc-benchmarks, but that's not as big of a deal.
It seems the last version the zips were included was 1.18.0. I assume this was broken when we swapped to the maven-publish plugin.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6367
ComputeEngineChannelBuilder has wrong signature · Issue #6367 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The generic type in ComputeEngineChannelBuilder class signature
However, fixing the bug might be ABI breaking for existing users.
cc @zhangkun83
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6374
gRPC SSL / https support for Android application · Issue #6374 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there any example related to building Android application that should communicate with https gRPC server?
I have managed to create C# application that successfully communicates with Node JS localhost server and credential code is:
Server code is:
In grpc-java side I have tried OkHttpChannelBuilder, AndroidChannelBuilder and NettyChannelBuilder but I have not found solution to make communication work yet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6392
interop-testing: Support CompressedResponse for streaming · Issue #6392 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
server_compressed_streaming fails for grpc-java. There is support for CompressedResponse for unary:
But it appears there is no support for streaming. We should add support and enable server_compressed_streaming in run_interop_tests.py.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6396
ThreadlessExecutor thread dead lock · Issue #6396 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
version: 1.21.0
Possible Reason
invoke execute method, add runnable to ThreadlessExecutor
start execute LockSupport.park(this);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6397
Compilation error with generated code in Netbeans with oneof in prototype · Issue #6397 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using? V1.24.0
What is your environment?
Product Version: Apache NetBeans IDE 11.2
Java: 1.8.0_231; Java HotSpot(TM) Server VM 25.231-b11
Runtime: Java(TM) SE Runtime Environment 1.8.0_231-b11
System: Windows 10 version 10.0 running on x86; Cp1252; en_US (nb)
What did you expect to see?  I expected the build to complete
What did you see instead?  I get a compilation error in the generated code:
Scanning for projects...
This same prototype works just fine in C++.  I just downloaded all the Java today so it is the latest.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6399
gRPC client to use a proxy server with traffic between the client and proxy server encrypted as well · Issue #6399 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
As implemented in #5173, we could call ManagedChannelBuilder.proxyDetector to specify a custom ProxyDetector that returns a ProxiedSocketAddress.
The current concrete class HttpConnectProxiedSocketAddress contains proxyAddress, targetAddress, username and password and does NOT specify whether the traffic between the gRPC client and proxy server be encrypted or not.
By tracing through the code and the calls in netty, it appears that the traffic between gRPC client and the proxy server is NOT encrypted, though via HTTP CONNECT the gRPC client and the destination server DO established a secured channel.
As described in here, there are 2 things about https proxying:
a proxy which knows the "CONNECT" verb and is able to forward connections to a ultimate SSL-powered target server;
a proxy which is itself a SSL server and will engage in SSL with the client, to protect requests and responses when they transit between client and proxy.
So it appears that gRPC currently support the point 1. but have no support for point 2.?
Describe the solution you'd like
Ideally we should be able to specify the proxy server as a URL (or some way to indicate whether the client and the proxy should have traffic encrypted between them) instead of just a socket address with no protocol attachment.
Then the code logic should perform proper handshake as shown in the Go lang example - which supports a proxy server URL, which has a protocol part http vs https for the proxy server as well (not just the destination), and it performs proper TLS handshakes between the client and the server as seen in here
Describe alternatives you've considered
I must admit that I am not a networking expert and I have mostly been just looking into netty/grpc/java code to see what options can we have out there from code level.
I am not sure if I can configure netty directly to achieve my goal, netty implemented HttpProxyHandler which gRPC client code eventually triggers, but unfortunately from my understanding, that HttpProxyHandler does not encrypt traffic between the gRPC client and proxy server neither.
I do not see any trivial alternatives, please help :)
Additional context
Is gRPC intended to use https/handshake with the proxy server too ? (not just the destination server). As based on the code in here and the comment in here, it might want to support it? But again, I am quite new to all these so I could just be misreading the details.
Many thanks in advance!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6404
Ability to only log events for the xds client and policies · Issue #6404 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently we use ChannelLogger which logs events of all channel (including data plane). There is no easy way for users to port only logs of control plane events to StackDriver.
cc @srini100
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6405
Have grpc-protobuf-lite depend on protobuf-javalite, not protobuf-lite · Issue #6405 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What did you expect to see?
My understanding is that with more recent protobuf versions the Java Lite code generation requires a different approach and is compatible with com.google.protobuf:protobuf-javalite artifacts as opposed to the old com.google.protobuf:protobuf-lite:3.0.1 artifacts. The current grpc-protobuf-lite still depends on the old com.google.protobuf:protobuf-lite:3.0.1, yet the current grpc artifacts generally use recent protobuf versions. I expected to see a dependency on the new protobuf-javalite artifact instead. Or would a new grpc-protobuf-javalite artifact be more appropriate?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6406
I made a "gzip request" to server ,but there isn't a "gzip response" to be returned. · Issue #6406 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use java to had a "gzip request" to server ,the code is list:
but the response i had is not a "gzip response".
I readed the others Issues that I found one whitch means ,it needn't a "gzip response" to be sent for a client use gzip to had a request . So , what should I do to right my options ? I want a "gzip resopnse" to be sent for a "gzip request" ?
thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6408
There is a recursion loop in NameResolver. · Issue #6408 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
There is a recursion loop in NameResolver.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6410
abstract class NameResolver has recursion loop in non-abstract start methods · Issue #6410 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Steps to reproduce the bug
If you create an implementation of NameResolver and don't override one of start(Listener) or start(Listener2), you get an infinite loop and stack overflow.
Yes, my implementation is incorrect (as I'm experimenting in an effort to understand how this works), but it seems this condition should be prevented somehow.
It's easy to see in the source code that these two methods delegate to each other.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6412
2 way SSL with Grpc and netty [Android] · Issue #6412 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(using grpc version 1.24.0 and nettychannelbuilder)
I have looked at this issue and used the code provided by @voidzcy in the example, but i have encoutered a problem regarding my device not being able to detect my certificates who are under the "raw" fodler, and i got this error:
" Caused by: java.security.cert.CertificateException: could not find certificate file: server.pem"
i then tried to add my own Sslcontext, but couldnt figure out how to make it 2 way ssl (server certificate, client certificate, and client key), with Grpc.
Update:
I have used:
while having the files server.crt client.crt and key.key in my "raw" folder, but i get this error now:
Update:
I have checked the stack trace and it says :
But at the begging of my activity i wrote
Security.insertProviderAt(Conscrypt.newProvider(), 1);
and added "classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'" to my classpath in gradle
I also tried usuing Play Services Dynamic Security Provider and still the same error occurs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6413
TLS support for Android with server's certificate signed by a trusted CA · Issue #6413 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have an Android client which I'm trying to connect to my server via TLS. The server already has a certificate signed by a trusted CA and I was able to connect to the server using TLS with gRPC-Swift, so I think the server it's working properly. However, with Android I'm having troubles to establish the secure connection.
I saw the example from the documentation which uses :
But it didn't work neither.
Finally, I added Conscrypt like the README said using this line before the channel creation:
But I'm not sure if I'm using it properly.
Additionally, when I see my logcat I can't see an error related to TLS, so I can't find what error is happening.
My gradle file has these dependencies:
I have tested my code with unsecure connections and all works fine but now with TLS I can't find what is casuing the error. So, my question is how can I connect to my server via TLS from an Android client? Do I need to add another thing?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6417
Client blocks exactly at the third call while calling the unary method in loop? · Issue #6417 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux centos
What did you expect to see?
The client should able to call the GRPC server in the remote host in a loop using the same channel.
What did you see instead?
While calling in the loop, the client receives response 2 times and blocks at the third attempt forever. It happens only if I call a remote machine in AWS from my local machine. Local Client to Local server or AWS EC2 Client to Another EC2 server working as expected.
Steps to reproduce the bug
Host a GRPC server in the remote machine. In the client, create a channel and use the same channel instance to call the remote method in a loop and shut down the channel after the loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6418
Build grpc-all fat jar after making changes · Issue #6418 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to build a fat jar of grpc-all for version 1.22.1. I am able to do it by executing the following gradle script:
This actuallly builds the fat jar from the remote maven repository. I want this:
Make some code changes in the grpc java (https://github.com/grpc/grpc-java), branch v1.22.1 and then build uber jar reflecting those changes. How can this be done? I have already cloned https://github.com/grpc/grpc-java to my local machine at /home/ankit/grpc-java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6421
io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!  Caused by: java.lang.OutOfMemoryError: unable to create native thread: possibly out of memory or process/resource limits reached · Issue #6421 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6422
what would happen if my service is printing this log : io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!     · Issue #6422 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My service is printing this error:
io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!
Caused by: java.lang.OutOfMemoryError: unable to create native thread: possibly out of memory or process/resource limits reached
according to the log , I have increased my jvm config:  xms from 502m to 1024m, xmx from 1024m to 4096m, this exception log is going away from my service.
My question is : how to reproduce this exception in other environment. and what  thing would be caused by this error log (like the service is down or something else), as  we didn't find any service down accident and didn't receive any error report from out client. especially cannot reproduce this ,even with loadtest
Can someone help answer my question?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6423
gRPC Server Exception : Connection reset · Issue #6423 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi
why each time client send request to serer, sever respond with internal exeption:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6426
How to throttling in server-side (not the manual flow control version)? · Issue #6426 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm wondering how you guys to deal with the problem which the client-side's produce rate is greater than the server-side's consume rate.
In my case, that lead to a OOM eventually.
Is there a simple way to implement a throttling in server-side when I can't change the client-side's code.
Here is a issue I raised at another repo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6427
Grpc over Bluetooth RfComm ? · Issue #6427 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was wondering if it was possible to use grpc over bluetooth to connect two devices? I tried using the bluetooth device mac id as the host but that clearly doesn't appear to work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6428
How to get the  server address when call complete? · Issue #6428 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, everyone,
I'm first use grpc-java, how can i get the server address when client complete one request if success or not?
i want statistics the error count of every server.
can anyone help me?
thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6432
why client  send data failed when server invoke the onComplete? · Issue #6432 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider the following gRPC scenario:
Client opens bidi-stream to server and starts sending data
Server invoke the onComplete ,so closes the response stream and sends the status trailers (translates to sending http2.END_STREAM)
Client continues to send data
if follow the http2-spec,the client is allowed to continue to send data that is processed by the server.But I just tested and the client invoke onNext to send data will throw the exception and log
call was half-closed.
how to explain this case?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6435
Extract json parsing to separate module (ex: grpc-gson) to allow for other implementations such as Jackson (ex: grpc-jackson) · Issue #6435 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
It is frustrating that gson is the only option. My code uses jackson ALL over the place, but I still have to bring gson into my classpath for a single technology.
Describe the solution you'd like
I propose to extract the json parsing logic into a separate module (such as grpc-json in keeping with the convention). I further propose a jackson (fasterxml, not codehaus) module be included (grpc-jackson) to accommodate my (and many others') use-case
Describe alternatives you've considered
None. The JsonParser class is api internal.
Additional context
This seems like a very simple thing to do. The ONLY reference to gson is in a single class in grpc-core. The tests are similarly basic, so the change would take maybe a day to implement fully. I may even submit the PR myself, as it is THAT annoying to me.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6436
Error in TLS protocol · Issue #6436 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Im using mutual TLS authentication between my android client and python server, the handshake is going ok, but i get the error UNSUPPORTED_PROTOCOL on my python server.
my server is not web based and when i tried connecting to it via a python client it worked well.
my certificates are in .crt format and my key is in PKCS#8.
I believe that the problem is me not using TLS v1.2 , but whenver i change the SSLContext instance to "TLSv1.2" it doesnt do anything, and when i change my channelBuilder.connectionSpec(ConnectionSpec.COMPATIBLE_TLS);
to something else, the handshake doesn't go through and my server throws LAST OCTET INVALID and FIRST OCTET INVALID
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6438
Tracking issue for NameResolver.Args.getChannelLogger being experimental · Issue #6438 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Make ChannelLogger accessible through NameResolver.Args.
Subcomponents in NameResolver may want to log information to Channelz, such as XdsClient created by XdsNameResolver.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6445
ava.lang.NoSuchMethodError: io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder · Issue #6445 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6446
protoc version problem · Issue #6446 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My protoc version is 3.10.1 and protoc-gen-grpc-java version is 1.25.0.
When I use protoc-gen-grpc-java, it reports:
Error loading shared library libprotoc.so.17: No such file or directory (needed by /usr/local/bin/protoc-gen-grpc-java)
While I have libprotoc.so.21 in /user/lib
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6447
The grpc-cronet Android library build produces an empty aar · Issue #6447 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Target/compile SDK version is 28.
What did you expect to see?
I expected to be able to use the CronetChannelBuilder class, but I wasn't.
What did you see instead?
Upon opening the aar file downloaded from maven central I noticed there were no classes included and the file has a size of 543 bytes.
Steps to reproduce the bug
Running the grpc-cronet build with gradlew produces an aar that is practically empty.
As far as I can tell the line minifyEnabled true in the release build causes all Java classes to be left out of the final aar. Because this is a library and there is no entry point all code is considered dead. I also think proguardFiles should be replaced with consumerProguardFiles in the release build configuration for an Android library.
When running into this issue we started to doubt whether grpc-cronet was actually meant to be released on maven central yet. It is however recommended to use cronet for gRPC on Android here.
Am I missing something here? I couldn't really believe grpc-cronet has had 4 releases published to maven central, the first almost two months ago, with the actual product being in an unusable state.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6454
Tracking issue for NameResolver.Args.getScheduledExecutorService being experimental · Issue #6454 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Make transport executor accessible for scheduling small tasks in NameResolver. Similar to LoadBalancer, subcomponents in NameResolver may want to schedule small tasks to be run later. One example is XdsClient in xDS resolver that schedules retry tasks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6456
Need a way to stop server side streaming when client disconnected · Issue #6456 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
here is pseudo code to impl a server side streaming:
On client side, if everything is ok, CancellableContext.cancel() or ManagedChannel.shutdownNow() will terminate someMethod call gracefully, but if client crashes && heavyCompute always returns null, someMethod call will run forever...
so is there a way to fix this?
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6461
using gRPC 1.25.0 cause epoll io pending tasks increased to several hundred · Issue #6461 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using gRPC 1.25.0 cause epoll io pending tasks increased from less than 10 to several hundred
i see netty 4.1.42 refine the epoll impl，cound it be a reason to interpret this..there is no further informations
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6462
Bidirectional streaming in Android gRPC disconnect after about 20 seconds · Issue #6462 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bidirectional streaming in Android gRPC disconnect after about 20 seconds in Cellular internet. With wifi everything is OK. I use AndroidChannelBuilder with default config in client, and I use NettyServerBuilder with default config in server.
Server Exception is:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6467
How to put data to Server and then get data back · Issue #6467 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HI every one, I'm playing with Flight Server and I want to send (do_put) some data table to server, then the server do some computation and after completion (for the moment just Sync operation) I want to resend back the result as a Table again.
I can't find in the last version the possibility to attach data into an action!
My question is may be naive but it will en light me for the possibility to interact seamlessly with all my micro-services.
Thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6468
Client health check in Bidirectional streaming · Issue #6468 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Bidirectional streaming in server side, how I can check that the client connection is ok or not? for example I want to know when client internet be disconnect.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6469
Example RouteGuideGrpc Can not found · Issue #6469 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use maven to generate the protocol source code, and I can not found the RouteGuideGrpc class in the target generated-sources
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6470
Why my generated source newStub method param type is com.google.protobuf.RpcChannel? · Issue #6470 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
as the example, the newStub param type is ManagedChanel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6471
Duplication of classes found in protobuf-javalite-3.11.0.jar and protobuf-lite.3.0.1.jar. Why does protobuf-lite-3.0.1.jar appear if it's not written in any of the gradle files of the project? · Issue #6471 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
The following happens when the implementation of com.google.protobuf:protobuf-javalite:3.11.0 is done in gradle. Errors are replaced with missing classes one when the implementation is removed.
I've checked all three gradle files related with the android module but none of them contain explicitly an implementation of protobuf-lite.3.0.1.jar.
Are there any implementations which depend upon protobuf-lite.3.0.1.jar?
These are the gradle files of the project:
Thank you for your time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6472
Android generated code from 'helloworld' is invalid. · Issue #6472 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Successfull building.
What did you see instead?
Several errors.
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6473
grpc server restarted, client cannot connect immediately. · Issue #6473 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when grpc server restarted, the grpc client cannot connect the server immediately.
Sometimes a few seconds, sometimes a few tens of seconds.Why is that？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6474
google/protobuf/empty.proto: File not found · Issue #6474 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm trying to use grpc-java in an Android app to hit an API that makes uses of protobufs. It seems when using java-lite and then adding this line to a .proto file import google/protobuf/empty.proto, I'm receiving this error:
Any help would be greatly appreciated!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6478
Known uninteresting log is INFO level · Issue #6478 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6484
DEADLINE_EXCEEDED is triggered after header continuation frame is received · Issue #6484 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.25
What is your environment?
Client: Android
Server: Windows running C++ version of gRPC
What did you expect to see?
HTTP/2 implementation in OkHttp library has hard coded frame size of 16384 bytes. In case server is sending a response with trailers that won't fit to max frame size, the frame is split on server side to headers frame and continuation frame. These frames should be then read on client side and stream should get closed.
What did you see instead?
In case the server sends headers frame and continuation frame, gRPC-java implementation will read the frames, but it doesn't handle the end of stream correctly and therefore it keeps on waiting for more data. Finally DEADLINE_EXCEEDED error is triggered after the configured timeout since there will never be more data coming as server already sent everything.
Steps to reproduce the bug
Make a request from Android client to server
Send response (e.g. error) from server with large trailing metadata so that all data won't fit to OkHttp's max frame size (16384 bytes)
Android client receives the data, but will keep on waiting more and original request will finally fail with DEADLINE_EXCEEDED error
The problem is on below code:
Here the readHeaderBlock method reads the header frame and the continuation frame correctly and updates the member variable continuation with flags from the continuation frame. However, in the above code endStream is already evaluated based on the flags received from the first frame, which will not have the FLAG_END_STREAM. So the endStream will never be true if there is a continuation frame and this will cause that client will keep on waiting for more data.
Solution proposal:
Instead of evaluating endStream immediately from flags received on first frame, flags should be evaluated after reading the header block in which case continuation.flags should always have the flags for the whole response. This way the stream end is received correctly and client will not keep on waiting for more data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6486
exception is raised "java.lang.IllegalStateException: listener unset" - depends on executor? · Issue #6486 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux with Java 11 in a Docker contaoner (openjdk:11.0.5)
What did you expect to see?
What did you see instead?
I see 2-3 exceptions per second:
Steps to reproduce the bug
Use io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder and assign ThreadPoolExecutor with some pretty small queue (I have ArrayBlockingQueue with capacity 1024). Then create some incoming traffic (I have ~ 12K incoming requests per seconds).
After I increased the queue to 8096 the problem has gone.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6497
DEADLINE_EXCEEDED errors when routing to partner AWS NLB via nginx proxy · Issue #6497 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Successful response
What did you see instead?
We have setup a Java Client and have configured timeout for 2300ms.
The app is deployed on AWS and it connects to an internal nginx proxy, which then further routes the calls outbound to the partner.
Here is the Spring bean definition
And the usage
As a suggestion from our partner and following https
we updated nginx proxy, but this seems to have no effect
Any ideas on what might be going on and what can we try further?
Steps to reproduce the bug
Use Java client, to connect to Partner AWS via nginx proxy from our AWS instance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6498
gRPC takes about 6ms single trip between processes on local machine · Issue #6498 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was experimenting with gRPC and it seems a really great tool. However I discovered when I have a server & client on my local machine, I observe about 6ms.
The difference between clientTakes and serverTakes is roughly 5-6ms (larger when the server just started)
Initially I thought it's something wrong in my code so I referred to: https
And I did the exactly same thing as above by adding a timer on client and server. It seems the difference is still consistent at 5-6ms.
(in the pic above i used Scanner to wait in the while loop for sending requests. thus the "a" "f" etc. Please ignore them).
My question is:
Do we expect this 5-6ms even when two these server/client live in the same local machine? My estimate rule of thumb for data travel between two machines in the same DC is 500us(https). Is there anything I might be missing?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6506
Linux build of protoc-gen-grpc-java does not support java lite · Issue #6506 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Using v1.25.0 pre-built libraries from:
What is your environment?
Windows 10 and Ubuntu 16.04
What did you expect to see?
Expect the same version of the behavior of the protoc-gen-grpc-java plugin to generate "java lite" on both Windows and Linux.
On Windows we can generate java lite gRPC clients with:
What did you see instead?
But the Linux build of the same plugin version on Linux:
Fails with:
Steps to reproduce the bug
Is there an official or more up-to-date repository for accessing the pre-built java plugin then
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6507
Allow creating context with more than 4 keys · Issue #6507 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
I'd like to create a context with more than 4 keys
Describe the solution you'd like
Ideally, an overload to withValues that potentially could take a Map<Key, V> of Context keys and values, enabling an arbitrary number of context keys to be used in a single context if a consumer of this library wanted more than 4
Describe alternatives you've considered
We could just use a single Context key and store all of our context in a single map associated with that key, but before I do that I wanted to understand if there was a reason for limiting withValues to taking 4 key-value pairs
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6511
Example HelloWorldServer does not gracefully shutdown · Issue #6511 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
On a fork up at commit d168632
What is your environment?
Mac OSX 10.14.6
What did you expect to see?
The server should allow in-flight RPCs to finish
What did you see instead?
The client receives error WARNING: RPC 1 failed: Status{code=UNAVAILABLE, description=Network closed for unknown reason, cause=null}
Steps to reproduce the bug
Add a call to Thread.sleep(15000) in io.grpc.examples.helloworld.HelloWorldServer.GreeterImpl.sayHello
Build and run the server
Run the client
It seems like server.shutdown() does not wait for in-flight RPCs to finish before returning. The documentation makes it seem like that it should block.
I am able to "fix" the issue by adding a call to server.awaitTermination() in the stop method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6514
DEADLINE_EXCEEDED - negative value · Issue #6514 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm seeing errors in my log of a DEADLINE_EXCEEDED, but some of them have a negative value for the exceeded after. Is this expected behavior and if yes, what is the reason, as in the example bellow it is minus two seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6523
NameResolver.Listener2 confusing javadocs · Issue #6523 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not sure in which issue type this fits best.
What version of gRPC-Java are you using?
What did you see instead?
The javadocs on io.grpc.NameResolver.Listener2 are confusing because on one hand it states:
This is a replacement API of {@code Listener}. However, we think this new API may change again, so we aren't yet encouraging mass-migration to it. It is fine to use and works.
Which sounds like we shouldn't use it yet. On the other hand, the other method is marked for removal (for a version a few months ago)
@deprecated This will be removed in 1.22.0
So is it going to be removed soon?
Related to #1770
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6524
Clarify NameResolver.Listener behavior/expectations when the servers remain the same · Issue #6524 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
I have a (Spring) discovery service based NameResolver which sends regular updates/ticks to the application, however it does not contain details which service name might have changed. So I have to check them for updates frequently, even if only one is service updated.
Should I verify whether the server addresses remained the same before invoking onAddresses/ onResult? How expensive is calling the method with the same servers over and over again? Does it trigger new connections to be made?
Describe the solution you'd like
Javadocs that explain what the listener will/are supposed to do if they get (partially) the same addresses.
The listener will create a diff with any previous server list and prepare (close) connections for the new (old) servers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6527
Revert stickiness from round robin · Issue #6527 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Stickiness had a "final" design that we implemented, and then the design changed and then it evaporated completely. It isn't thus a cross-language feature and we've never considered it stable nor provided documentation for it. We should delete it. (Today someone was asking how to use it; we don't want users to use something that we consider dead)
Unfortunately it doesn't cleanly revert because there was a reorganization of RRLBFactory. There's some other conflicts as well, but I don't know how painful they will be to "merge."
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6530
DnsNameResolver not refreshing after a cache hit · Issue #6530 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
I implemented a NameResolver based on DnsNameResolver from version 1.19.0 - it has the same caching logic, but calls a high-level API instead of a DNS server. I encountered an error in the following scenario:
The first resolution returns a faulty result and caches it
The relevant code in current version of DnsNameResolver looks like
refresh() is never called again, I am stuck with a faulty result.
As I understand the problem, it is because in step 2 the listener is not called, neither onAddresses() nor onError(), so the calling code is waiting for callback and cannot schedule a refresh.
So is it a bug in DnsNameResolver code or is my approach wrong? How do I ensure that re-resolution eventually happens, apart from getting rid of caching?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6534
Update googleauthversion to 0.19.0 · Issue #6534 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is important and necessary for downstream clients including dialogflow and bigquery. Otherwise we're going to hit linkage errors with any version of gRPC.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6536
repositories.bzl uses http (not https) · Issue #6536 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I see a lot of lines like this:
If we're actually resolving these they're going to stop working on January 15, 2020.
I'm not 100% sure this matters, but just in case I wanted to raise the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6542
Update protobuf to 3.11.4 · Issue #6542 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


6550
Decide where to put context propagation helpers for guava callbacks · Issue #6550 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
open-telemetry/opentelemetry-java#702 is more related to grpc-context than open-telemetry. We need to decide where it should go.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6551
Supplying Servername (TLS+SNI) · Issue #6551 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, our team has a grpc server written in go setup behind a HAP and we need to provide a serverName for the tls+sni configuration. We have go clients and Android clients. With go, it's possible to supply the servername like so
grpc.WithTransportCredentials(credentials.NewTLS(&tls.Config{ServerName: "host"})) and that works.
However, I'm unable to figure out how to supply the serverName equivalent on android beyond ManagedChannelBuilder#useTransportSecurity and that doesn't seem to be working. Please help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6552
Clarify the Javadoc for CallStreamObserver · Issue #6552 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The relevant part of the current Javadoc:
As far as I can tell, for any call, there are three implementations of StreamObserver involved:
I think it would be nice to clarify that. I've spent significant time trying to understand where does ClientCallStreamObserver appear, being confused by the premise that there are only two implementations of StreamObserver.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6554
Feature request: Add com.google.rpc.Status in a javalite variant · Issue #6554 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think the title is self-explanatory but in case it isn't we're building a client for Android devices where we extensively using WKT (solved by the protobuf-lite library) and some protos pertaining to google (com.google.rpc.*).
We would like to have the lite variant in order to be used on Android devices. Is it possible? Is this the correct place to ask for it? Pointing to @ejona86 as, as far i can see, you're the one answering these kind of questions! :D
Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6560
grpc reports "cancelled before receiving half close" although stream is reset by client · Issue #6560 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
The problem is 100% reproducible on CentOS and macOS.
What did you expect to see?
On the server side it would be good to see a different reason for the cancelled call in the StatusRuntimeExcpetion e.g. "CANCELLED - client reset stream" or even another Status entirely that makes it easy to differentiate.
Additionally, either no DATA frame should be sent by the client after a RST_STREAM or the NettyServerHandler should ignore it when receiving it directly after the RST_STREAM.
What did you see instead?
Steps to reproduce the bug
Both client and server use grpc-java. We have a bidirectional call, after the stream is established the client's onNext throws an exception. Therefore grpc-java sends a RST_STREAM followed by a DATA frame to the server.
In the server logs this can be observed with:
and then the exception:
What makes the problem hard to diagnose on the server side:
The way the problem presents itself could be a server problem, as you could argue that the server did close the stream and therefore data from the client could be interpreted as a racy frame. This is the reason we spent a few hours debugging it on the server side even though the problem originated on the client side (that my team doesn't have any control over).
Another thing is that we had to deactivate WARN logging on the server side for grpc because these exception traces trashed the log files. Generally we like to observe exceptions logged on WARN because we detected some bugs in our application that way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6565
enable service config error handling by default · Issue #6565 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in #6564, service config error handling enabled ManagedChannelImpl2 which will replace ManagedChannelImpl is introduced. After verification, fully migrate to service config enabled impl and delete the original (default) codes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6567
How to set grpc client port · Issue #6567 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the grpc client creates a connection, the port is random. However, in a special network, I need to set a fixed port. How can I do this? Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6568
Cancelling the stream with status Status{code=INTERNAL, description=Completed without a response, cause=null} · Issue #6568 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a gRPC client and server that both are streaming to each other. Code implemented in java.
The client triggers onNext in the server a few times and the server aggregates data each time, the the client then triggers onComplete which starts some server side logic and when it finished the server triggers the onComplete on the client side.
I can see in the logs the following logic:
Then a second later the client:
Received Rst Stream.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6569
Getting feedback on errors while using waitForReady or enableRetry  · Issue #6569 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
yes using the connection retry  and/or , rpc retry blocks all feedback from coming back to the user.
Describe the solution you'd like
i'd like to have an onError callback either for the context/stream/channel that i'd be able to  report back to the user, i'm aware that while the error is being reported a  race condition may occur that will no longer make it valid for that time, but the user should have the option to decide if they should respond or do something with it.
since GRPC's logging is based on java logging, it cannot be integrated with the standard application logging framework, so even the errors themselves aren't always visible at all.
this is problematic when you situations where failure in services are being reported to a main dashboard or SLA team, the retry logic should continue to execute, while a reporting mechanism should be in place to send feedback in real time if the failures have stopped happening.
Describe alternatives you've considered
attempting to use getState(false) or notifyStateChanged proved to be unreliable
notifyStateChange doesn't tell why it has happened, and getState is too transient to be called periodically.
attempting to subclass netty proved to be too sensitive and will brake in future versions:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6571
how to user custom picker in RoundRobinLoadBalancer · Issue #6571 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi, I want to write a weighted round robin LoadBalancer.
I want to reuse RoundRobinLoadBalancer and change the SubchannelPicker(ReadyPicker), but The class is protected and final cannot extend.
how to change it at runtime or another way do this ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6573
Android grpc app Gradle build experience needs improvement · Issue #6573 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It does not really seem possible to have decent quality Gradle builds for grpc-based Android apps that use certain common 3rd party protobuf types. It also is time-consuming to find appropriate workarounds to make builds succeed anyway. In my case I only use three pretty common 3rd party types,
as well as corresponding standard APIs to manipulate the types from Java programmatically:
The types and APIs are available from certain Gradle artifacts,
but in the end I can't get successful builds if I use the artifacts. Instead I have to manually copy a bunch of the classes I need plus dependencies from the artifacts into my project.
There is a combination of aggravating factors preventing normal build configs:
The artifacts are big and some of the stuff gets in the way of javalite, and also sometimes overlaps with protobuf-generated classes.
The Android R8 tool, used for code optimization and obfuscation, is very particular about duplicate code, and does not work well with artifacts protobuf'ed with the gradle-protobuf-plugin when some classes also come in via some other regular Gradle dependency. The problem is with protobuf'ed classes showing up in the project's build output and coming in via dependencies at the same time.
I've experimented at length with excluding transitive dependencies and protobuf'ing dependencies instead of pulling them in normally, but was forced to manually copy google.rpc.status.proto, io.grpc.protobuf.StatusProto, com.google.protobuf.util.Timestamps, and com.google.protobuf.util.Durations. I will have to keep them in sync with new releases of their corresponding artifacts.
One thing that may help could be a review of common 3rd party types and common 3rd party artifacts with an eye on creating new or more comprehensive javalite-based artifacts.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6575
Metadata.BinaryStreamMarshaller is experimental · Issue #6575 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Metadata.BinaryStreamMarshaller and Metadata.Key.of(String, BinaryStreamMarshaller)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6578
Try to remove SuppressWarnings("GuardedBy") · Issue #6578 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#6566 introduced suppressions to allow being compatible with newer versions of Error Prone. But we should spend some time to see if we could tweak the code so that the suppressions would be unnecessary.
If we can't remove them or if it would make the code worse, we can leave them as-is and close this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6579
DnsNameResolver seems overly strict when validating service config · Issue #6579 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DnsNameResolver only allows a pre-determined set of keys used as filters, in the entire list:
That means we can never add a new filter key. That seems like a very bad idea. I don't know if this is cross-language, but the precise behavior doesn't seem nailed down in https.
CC @dfawley, @markdroth
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6582
Trying to implement retry mechanism for my project · Issue #6582 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HELP Required::
How should we implement it. Does only ServiceConfig file can handle the retry? Does Throttling Policy required?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6584
E/AndroidRuntime: FATAL EXCEPTION: grpc-okhttp-2 · Issue #6584 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Using grpc as it is required in com.google.cloud:google-cloud-speech:1.22.0 . When doing the speech recognition the crash is coming sometime.
Start the Speech Recognition than it will stop with this crash
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6588
Automatically detect lingering server calls · Issue #6588 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem
When subscribing to a server streaming call, it's tedious to set up machinery for canceling the stream when no longer needed.
Describe the solution you'd like
When a user calls stub.foo(observer), gRPC attaches a Cleaner to it which cancels the corresponding ClientCallStreamObserver when the inbound stream observer object becomes unreachable.
Since there is some runtime cost of registering Cleaners for each and every streaming call (and there can be thousands of them at any given time, and an unlimited number in the app lifetime), this may best be an opt-in feature. Not sure about exact API, and whether it should be opt-in per-app, per-method, or per-call.
Adding a cleaner also holds a ref to ClientCallStreamObserver as long as the inbound stream observer object is alive in the heap, even if the call itself has completed. We need to make sure this doesn't leak significant resources.
Describe alternatives you've considered
Per-app opt-in is a form of "debug mode" where lingering connections are logged, and then in prod the machinery may be set-up manually in strategic places.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6590
INTERNAL: Panic! This is a bug! · Issue #6590 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Long running server process. Attempting to make a call after some time idle, the reschedule() call fails with Panic.
What did you expect to see?
API call succeeds.
What did you see instead?
Panic.
Steps to reproduce the bug
Please see related issue on Google Ads Java client library.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6591
Remove grpc-exp from ALPN · Issue #6591 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-exp was an experiment that didn't go anywhere. We should remove this vestige.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6597
Setting max threads · Issue #6597 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to be able to cap the maximum number of threads the grpc Java library uses. Right now, it defaults to 2 threads per CPU. If there are multiple processes on a 64 CPU machine, then many superfluous threads are generated reducing performance. While there appears to be a means to set this, behind the scenes, it is set to a static with a limit = 0, meaning unlimited.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6601
Deadlock on start gRPC server · Issue #6601 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
openjdk version "1.8.0_171"
OpenJDK Runtime Environment (IcedTea 3.8.0) (Alpine 8.171.11-r0)
OpenJDK 64-Bit Server VM (build 25.171-b11, mixed mode)
What did you expect to see?
Proper start of gRPC Server
What did you see instead?
Start sometimes hangs with deadlock
Steps to reproduce the bug
I suppose it's a race condition related to synchronization in gRPC (ServerImpl), await in NetServer.start and vertx/nettty event loops (probably single threaded). Probably it could happened at any time if someone start gRPC server and concurrently open new client connection to that server.
In my case I stopped and started the gGPR server but I'm not sure if it is somehow related.
Analysis
What I see in the thread dump is the following 2 threads that stays in that state, seems, forever:
From what I see in these thread dumps and the code I think that this could be the problem (deadlock):
Vertx grpc starts server (ServerImpl.start) in vertx blocking thread
ServerImpl synchronize on lock and then try (keeping lock) to start server (NetServer.start)
NetServer.start opens a channel, binds to it, and since that moment it, I assume, may receive connections from remote clients
It seems, at this time a remote client opens connection to this server (already bound)
Then in channel's event loop (probably single threaded) is received initChannel which try to get ServerImpl.lock in ServerListenerImpl.transportCreated (coudln't because got by ServerImpl.start)
NetServer.start then schedules runnable in channel's event loop and blocks with channelzFuture.await()
Now, channelzFuture.await() waits for a runnable to be executed in channel's event loop (probably single threaded)
At this point channelzFuture.await keeps ServerImpl.lock lock, while the ServerListenerImpl.transportCreated occupies/blocks (this is what I suppose) the single threaded channel's event loop thus making impossible to process further
I'm attaching file with thread dumps of the whole JVM
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6606
http to https change over to Maven not yet available in Maven · Issue #6606 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In reference to #6536 which appears to have been fixed just after 1.26.0 was released.  There are no later versions or patch versions available at https or the other required grpc dependencies that includes this critical fix.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6612
android client can't work in release · Issue #6612 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I update from 1.11.0 to 1.26.0, I can work in debug mode,but when I build in relase mode and open proguard_rule,It can't work and I get these error;
Is there anything wrong or I lost the proguard_rules?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6613
gRPC seems to treat socksProxyHost as httpProxy · Issue #6613 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Latest from master: b8474d6
What is your environment?
openjdk version "1.8.0_232"
OpenJDK Runtime Environment (build 1.8.0_232-8u232-b09-0ubuntu1~18.04.1-b09)
OpenJDK 64-Bit Server VM (build 25.232-b09, mixed mode)
bazel version
What did you expect to see?
I expected gRPC to respect system properties:
and use socks to connect to remote hosts
What did you see instead?
gRPC appears to send HTTP proxy commands (rather than SOCKS) commands
Steps to reproduce the bug
Note: those ports and hosts are what I am trying to connect to with gRPC.  Something that starts with the string "CONNECT" is an HTTP proxy command, not a SOCKS command.  SOCKS uses a binary protocol and expects the first byte to be the SOCKS version.
If I use tor, it gives the following error:
When java is configured as above:
(and pointed to a real SOCKS proxy rather than nc) parts of my program that just java.net.URL connection work properly (using the proxy).
This seems to be a repeat of #5600, but I am certain this isn't a proxy configuration problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6617
How can I find out about send errors in server-side streaming? · Issue #6617 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In route guide example
How can I find out about send errors in server-side streaming?
Even if the client terminates abnormally, I noticed that the above code keeps running without any errors.
When I ran the same test on a server written in golang, it returned an error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6618
Please consider a patch release with https:// endpoints in Bazel rules. · Issue #6618 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On 15th January maven central turned down http:// endpoints. The v1.26 release still uses those endpoints. @ejona86 fixed this on master a4299eb but the latest release still uses the turned down endpoints. Please consider doing a patch release that contains the before mentioned commit.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6623
io.grpc.StatusRuntimeException: INTERNAL: Protocol error  Rst Stream · Issue #6623 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version:1.22.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6624
 Caused by: java.io.FileNotFoundException: META-INF/native/libio_grpc_netty_shaded_netty_tcnative.so · Issue #6624 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Facing below error using 1.21.0 versions of GRPC core, netty shaded. Any help is appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6625
Increasing message size in bazel with java_grpc_library · Issue #6625 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How do we increase the message size limit when building with java_grpc_library through bazel?
I see suggestions about setting maxMessageSize but I'm not sure where we would implement that.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6638
How can I implement refresh token mechanism in an GRPC android client? · Issue #6638 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First of all, there are already two questions on the StackOverflow with this same kinda issue this and this which is kinda workaround, not an actual solution.
So there is a ClientInterceptor that is intercepting and attaching the header to the request so if the access token expired the server will respond with an UNAUTHENTICATED status but then how to recall the same method with new access token attached to it.
It is something like an authenticator which is used in retrofit here is the  link.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6641
Deadlock in server transport with multiple ports · Issue #6641 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServerImpl.start() calls NettyServer.start() while holding ServerImpl.lock. NettyServer.start() awaits a submitted runnable in eventloop. However, this pending runnable may never be executed because the eventloop might be executing some other task, , like ServerListenerImpl.transportCreated(),  that is trying to acquire ServerImpl.lock causing a deadlock.
This is a deadlock for multiple-port server transport usecase with the same deadlock mechanism as #6601.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6642
io.grpc.StatusRuntimeException when using shutdownNow · Issue #6642 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.26.0
What is your environment?
Mac Java 8/11
What did you expect to see?
No exception
What did you see instead?
Steps to reproduce the bug
Note this is a BiDi stream call. The client is closing the connection on the server without the server knowing this will happen. This is done by calling:
Everything seems to work properly but I see the above exception in my logs. Note: I don't believe this is the same as #4102 as I'm calling shutdownNow() only once.
As an aside, I'd prefer to just call shutdown() instead of shutdownNow() but awaitTermination takes a very long time (10-20 seconds) if I do this. I don't know if it's related.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6643
java.lang.NoSuchMethodError: No virtual method build() Crash in runtime as it is not able to find the build method · Issue #6643 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
I wished it to work normally and give the speech recognition
What did you see instead?
Crash with  ".NoSuchMethodError: No virtual method build()"
Steps to reproduce the bug
Start the voice recognition, init the setup  and then call the speech recognition method
This build() method is found in compile time but it gives following error in runtime everytime.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6644
NettyChannelBuilder issue after upgrading to grpc 1.26.0 version · Issue #6644 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On upgrading grpc version from 1.21.0 to 1.26.0 and protobuf version from 3.6.1 to 3.11.0, seeing following issue
An attempt was made to call the method io.grpc.netty.NettyChannelBuilder.usePlaintext(Z)Lio/grpc/netty/NettyChannelBuilder; but it does not exist. Its class, io.grpc.netty.NettyChannelBuilder, is available from the following locations:
It was loaded from the following location:
Correct the classpath of your application so that it contains a single, compatible version of io.grpc.netty.NettyChannelBuilder
any idea what is going wrong here?
these are the dependencies. This is an existing project, and I updated only the versions for grpc and protobuf and it broke..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6650
round_robin can continually be CONNECTING · Issue #6650 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you have enough backends and they are all unavailable, then it becomes likely that at least one of them will be CONNECTING. That will delay RPCs and avoid giving them a clear error message.
When a subchannel becomes TRANSIENT_FAILURE, we want RR to continue considering it (for channel state and picking logic) TRANSIENT_FAILURE until the subchannel becomes READY. That means it would "ignore" CONNECTING subchannels, except for new and recently-READY subchannels.
This was done in C core in grpc/grpc#20245
This problem really impacts all LBs, even including pick_first. However, round_robin is hit particularly harder than pick_first. @dfawley and I are quite interested in expanding the scope of this change to more parts of grpc, but there are some issues it creates that would need to be resolved, mainly in when we choose to reconnect.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6663
Dangling CountDownLatch.await() in tests · Issue #6663 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In ContextTest.earlierParentDeadlineTakesPrecedenceOverLaterChildDeadline and ServerCallsTest.inprocessTransportManualFlow. Most likely fix is to wrap into assertTrue().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6673
can not build successfully in grpc-okhttp 1.27.0 version in android · Issue #6673 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using grpc for cloud speech-to-text in android application, this is the libs I am using
this both libs working fine in the demo application, but in my application, it's not working. I am getting this error and can not sync project successfully
someone please help to solve out this issue...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6674
io.grpc.StatusRuntimeException: INTERNAL: Protocol error Rst Stream · Issue #6674 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
android client
Current phenomenon: after establishing a connection with the server, there is no interaction, and the client will receive this error after three minutes
By tracing, I located the error here：
Please tell me if you need more information
Hoping you can help me
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6678
Conscrypt fails when building grpc-java on Power · Issue #6678 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried building grpc-java on Power by skipping Android and codegen specific stuff as mentioned here - https, I am facing the following errors:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6679
Update netty to 4.1.44+ · Issue #6679 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
There is a security vulnerability for Netty versions lower than 4.1.44. See: https
Describe the solution you'd like
Update Netty to at least 4.1.44
Describe alternatives you've considered
There are no real alternatives because we need grpc and want it to be secure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6683
StatusRuntimeException trailers not sent to client · Issue #6683 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Trailers attached to a thrown StatusRuntimeException by a server implementation are passed to the client.
What did you see instead?
The trailers are not passed.
Steps to reproduce the bug
It should print test. It prints null instead.
If you uncomment the onError call and comment the throw line then it works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6684
Seeing javax.net.ssl.SSLHandshakeException when enabling Conscrypt · Issue #6684 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
openjdk version "1.8.0_232"
What did you expect to see?
Enabling Conscrypt should not break gRPC call from a GCE VM (over CFE).
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6685
OkHttpChannelBuilder.flowControlWindow(int) isn't working · Issue #6685 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Tried this with all of:
What is your environment?
What did you expect to see?
During server-side streaming RPC's, increasing the client's flow control window size should improve the rate at which the client can receive messages (particularly when the connection has some latency).
What did you see instead?
When using the OkHttp client specifically, the above expectation holds true as long as the flow control window size is somewhere between its default value and double the default value – the rate at which the client can receive messages scales linearly with the size of the flow control window. However, going even a single byte above that range results in the client receiving only a few messages, then stops receiving messages entirely. Even when the RPC stops due to deadline and a new streaming RPC is started over the same connection, no more messages are sent.
Steps to reproduce the bug
Though we first encountered this in our production environment, we've been able to recreate it in a controlled test environment like this:
a client that initiates the server-side stream and immediately discards messages as they're received
a server that produces a stream of uniformly-sized messages (~100 bytes) consisting of a random ByteString wrapped in a protocol buffer, sending them as fast as possible
a proxy sitting between the two that adds latency to all network communication (we're using toxiproxy)
all three components run in separate processes on the same machine (just a developer's workstation)
Here's our protos:
Here's how the OkHttp channel is created-
Enabling as much logging as possible (eg. looking at http2 frame logs) doesn't show anything useful, the server sends data until it just stops and there aren't any logs at that point
As shown in the above table, the drop in send rate from adding 100ms is surprisingly drastic (99% slower)
We repeated the same experiments with Netty. Netty is significantly slower in the ideal case (40k msg/s compared to 200k msg/s) but doesn't experience nearly the same drop due to high latency (20k msg/s). We can also increase the flowControlWindow past 2*default without detrimental effects.
We found some mention of BDP in this blog post (yes, I know this is for grpc-go). From a quick code search, it appears as though BDP is implemented in the grpc-java netty client code, but not in okhttp. Can't tell if this is actually related to the problems we're seeing though.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6686
Service config parsing should handle 'not specified value' as default value · Issue #6686 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
service config is a proto representation in json format.
so, the unspecified value should be in its base form (e.g. null string = "")
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6689
Android: Execution failed for task ':app:mergeDebugJavaResource' · Issue #6689 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Build Successful.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6692
I see a lot grpc related warnings in catalina log · Issue #6692 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
I don't know what grpc is for and why do I have it. I do use Firebase so maybe it comes from there. I see the following under maven dependencies:
I see there is version 1.27.0 but because I didn't put grpc dependancies in the first place, I don't know how to update and whether it will be a good idea to do so without breaking things.
What is your environment?
I see the above around 2 hours after tomcat server was up and running, then I saw the following 10 times:
and then tomcat undeployed and redeployed my war. A minute after redeployment I saw this
18 minutes after that I see
and it's been quiet since...
Steps to reproduce the bug: I have no idea. Even though it's been quiet since, I hope someone can shed a light here about what's was going on... Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6694
Migrate binarylog to v1 proto from v1alpha · Issue #6694 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6695
benchmarks should use protos from grpc-proto · Issue #6695 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need to upstream the java_package and java_outer_classname (and maybe java_mulitple_files). Our current values for those things aren't great, so we could fix them when upstreaming, but we need to make sure we won't break anyone (e.g., internal code).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6696
Netty is significantly slower than OkHttp · Issue #6696 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Tried this with all of:
What is your environment?
Both:
What did you expect to see?
Netty & Okhttp clients should have relatively similar performance.
What did you see instead?
OkHttp is about 5x faster than Netty.
Steps to reproduce the bug
See methodology here: #6685
In those experiments, a server-side streaming RPC is set up where Netty is benchmarked at receiving 40k messages/sec while OkHttp receives 200k messages/sec (with low latency).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


6703
How to use the library for high throughput scenarios · Issue #6703 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a simple RPC contract akin to:
I have a question how to use this library effectively for high throughput scenarios, where source of data server side is able to produce data at a higher rate than GRPC is able to dispatch the data over the network to the clients. The process that produces data uses native code, so needs to be initialized and torn down to free up resources once the RPC is over.
I was under the assumption that onNext(msg) would block at some point, but it seems that is not the case, and I essentially just end up running out of memory as netty tries to buffer everything.
After this realization I've moved to casting the StreamObserver<Data> to ServerCallStreamObserver<Data>, and essentially I check stream.isReady() before every stream.onNext(data). If it's not ready I just sleep in a loop until it becomes ready. This got rid of blowing up the memory problem.
This is obviously evil, and it seems to permanently steal the threads from the executor pool, preventing other clients to be served. Also, this sort of means I have to go on an unbounded thread pool to support an unbounded number of clients.
The benefit of this is that I have a clear execution path of when the call starts, or when it finishes, so my code can tear down the process that produces the data and free resources allocated if RPC for some reason breaks.
Ton of threads that are busy sleeping is obviously not great, so I tried to move to the implementation suggested by:
#2247 (comment)
However, if the client terminates prematurely, it seems my runnable just stops being called, and I have no indication that RPC call is now over and that I can clean up the resources related to the RPC call. Meaning my native code is now never freed causing me to leak resources.
Looking at the exception catching the clients going away, it seems there is very little GRPC stack frames in there, so I wonder if GRPC itself does not know if netty noticed the client going away:
Summary of my questions:
If using the async onReady approach, it seems I am never notified that the client has gone away. How can I know once the RPC call is over so I could clean up resources?
If I block in the RPC thread, is it expected that I will only be able to server numberOfThreadsInThePool clients at the same time? I assume if I use the onReady approach I can serve infinite clients as long as I don't block the threads?
Is there clear way to control how much buffering netty does, and ideally disable it? I would much prefer onNext to block if it can't put stuff directly on the network buffer, because it seems it's very hard to tame netty not to use stupid amounts of memory.
Is there any documentation around this? All the examples are pretty primitive without handling backpressure, and I have to crawl comments on issues to find clues of how to do this sensibly at scale without eating up all the ram.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6707
'channelLogger' is already in use when updating from 1.23.x to 1.24.x · Issue #6707 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Mac OS X
Java 11
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Edit AbstractIntegrationTest in app/src/test/java and set useGrpc to true
Run SmokeTest either by delegating to Gradle in your IDE or with Gradle
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6712
Android Gradle Build Errors · Issue #6712 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Gradle 6.0.1
What did you expect to see?
I have previously encountered some errors when building an android project as shown here but resolved them by using the sample files provided in the examples. That was with a clean Android Studio project and using my actual proto file. I expected to be able to use that same setup to integrate grpc into my actual project and generate the required code.
What did you see instead?
When I integrate grpc into my actual project using the same elements from my gradle which worked in the clean project, there are numerous errors which occur no matter what variations I try and use to resolve them.
Is there a fundamental error in the gradle file as it is being used in my actual project?
I will provide the gradle files being used in my actual project for reference and then outline some of the errors that occur and the variations I have tried to use to resolve them.
Steps to reproduce the bug
Here is the project level gradle file before grpc integration:
Here is the app level gradle file before integrating any grpc items:
Here are the same two files after integrating grpc as following the format that was running on the clean project with the production proto file:
Top-level build file where you can add configuration options common to all sub-projects/modules.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6719
Upstream XDS interop tests proto changes to grpc-proto. · Issue #6719 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Even though the grpc-proto is not being really used. we should upstream new messages to grpc-proto.
new messages: LoadBalancerStatsRequest, LoadBalancerStatsResponse
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6720
INTERNAL: gRPC frame header malformed: reserved bits not zero · Issue #6720 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version:
Environment:
I sending punch of files through grpc, I send the files as chucks in form of bytes, the programs runs well, but when I send too much file chunks it gives me these error:
Sometimes give these error also
Any ideas that could help, it seems that the netty server not able to handle too much data to received or what?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6722
possible to chain CallCredentials, or use multiple instances? · Issue #6722 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I might be missing something obvious, but it seems that there is no way to use multiple CallCredentials instances (I am looking in grpc-java 1.26.0) with a client stub.
The use case I am thinking of is that we have library code which offers a CallCredentials implementation which sets a header for "service name", and I'd like to pair this with https
Since AbstractStub.withCallCredentials(..) overwrites the credentials instance on each call, my first naive idea was to write a small CallCredentials implementation which just calls each of the two CallCredentials instances in order:
This is not allowed as each CallCredentials implementation calls applier.apply(..) or applier.fail(..), and io.grpc.internal.MetadataApplierImpl throws an exception when either method is called after it has been "finalized".
Is there no supported way in the CallCredentials design to be able to use multiple classes at runtime? It seems like this would force people into combining all of the credential logic that they want to attach to their client stub into one implementation - or in other words, composition is not possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6724
update reflection.proto from v1alpha to v1 · Issue #6724 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
grpc-services contains deprecated v1alpha/reflection.proto which instructs to use v1/reflection.proto, however the file is not shipped with this jar. It is unclear if there's a maven artifact that contains it that should be used instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6725
Update okhttp version from 2.5.0 to 2.7.4 · Issue #6725 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This update of com.squareup.okhttp:okhttp:jar version from 2.5.0 to 2.7.4 would help resolve a reported vulnerability CVE-2016-2402
It would help us a great deal, if you can update the version
As shown in the mvn tree
Also, we would appreciate it if you can let us know, whether it possible to do a quick release as early as possible.
Requesting you to downport the com.squareup.okhttp:okhttp:jar version fix update to io.grpc:grpc-okhttp:jar:1.17.1 as well
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6727
FR: Cancellable Response Iterators for Server-side streaming calls · Issue #6727 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
I'm implementing a client that streams responses. It's really easy to do this:
But I want to stop processing at some point when I find the response I'm looking for:
This unfortunately leaves the connection hanging. I want to close the connection. This is surprisingly difficult, but it shouldn't be. Here's what I think is maybe the right way?
CancellableContext withCancellation = Context.current().withCancellation();
This seems unnecessarily complicated. I'm have no idea if it's even right.
Describe the solution you'd like
I'd like the return for a server-side streaming call to be subclass of Iterator that implements AutoCloseable, which when closed would cancel the request. That would allow me to do this:
Describe alternatives you've considered
If there were a way to explicitly request something like Context.of(responseIterator).cancelCurrentRequest(), that would also probably be fine.
I could explicitly kill the entire channel, but I'd prefer not to.
Notes
I'm still learning the Java gRPC interface, so it may be that I have overlooked an existing solution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6728
Panic when empty serverlists from the grpclb balancer · Issue #6728 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when grpclb gets empty address, it ends up causing uncaught exception in subchannel.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6733
java.lang.UnsatisfiedLinkError: no netty_tcnative_osx_x86_64 in java.library.path · Issue #6733 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
why cant load
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6735
Unable to load the library 'io_grpc_netty_shaded_netty_tcnative_windows_x86_64', trying other loading mechanism. · Issue #6735 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using io.grpc:grpc-netty-shaded:1.13.1 in my java application and on start up it gives debug level errors before finally extracting and loading the 'io_grpc_netty_shaded_netty_tcnative_windows_x86_64' from temp folder in windows.
I have tried the latest grpc netty shaded version as well and it gives the same debug level error at loading.
Please suggest the solutions which solves the problem rather than changing the log level kind of solution.
Though loading is eventually successful but it's irritating to see so many stack trace logging at the debug level as well. And every time application comes up the dll is extracted to temp folder increasing the temp folder size unnecessarily.
What is the correct java.library.path to look for the 'io_grpc_netty_shaded_netty_tcnative_windows_x86_64' so that it succeeds i n first attempt.
logs look like this -
First attempt to load
Eventually
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6738
How do I set the GRPC_ARG_KEEPALIVE_TIME_MS parameter on the server? · Issue #6738 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Make sure you include information that can help us understand your question.
By default, the GRPC_ARG_KEEPALIVE_TIME_MS parameter is set to 2h on the server. How can I change this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6740
Is there a way to access MethodOptions from ServerInterceptor's interceptCall method? · Issue #6740 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I saw this issue and someone commented that it's been "fixed". But after following the link I'm still unsure about how it can be done.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6744
Add an API for injection-frameworks/spring-boot to create stubs of a specific type · Issue #6744 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
I want to automatically inject stubs into beans/components without having to create them explicitly.
Currently I use reflection to invoke the factory methods/constructors, but that broke unnoticed for me. So I would like to have an API that is future proof (and extensible).
Describe the solution you'd like
A method in the grpc-java API library, that can be used to create the stubs for me, so that I don't need to guess the way to do it:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6750
XdsNameResolver should not split host:port · Issue #6750 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The first thing XdsNameResolver does is split the host and port:
The values are then recombined later. For example:
XdsNameResolver should not do this and instead treat the string as an opaque string. There are times the host and port may need to be split (e.g., VirtualHost matching, although even there it seems inappropriate; but that's another discussion), but in general we want the majority of the system to treat it as an opaque string.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6755
Many LB-related Javadoc warnings · Issue #6755 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These have cropped into the build, and some I think have been here for multiple releases (some look almost a year old)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6757
CallOptionsTest is flaky · Issue #6757 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i've seen this more than one time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6760
RELEASING is out of date · Issue #6760 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It surprising that it matters which system is used to deploy to Maven Central, but leaving that aside I doubt anyone at Google is still deploying with Windows 7 or   Mac OS X 10.12.6
We deploy GRPC to Maven Central under the following systems:
Other systems may also work, but we haven't verified them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6761
Profiling for crypter's decryption for ALTS Channel. · Issue #6761 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Under heavy traffic using ALTS, I briefly profiled the client to see where the cpu time went through VisualVM. It seems that it spent significant time running javax.crypto.ShortBufferException.<init> ()
Not sure how much these numbers reflect reality but it seems that there is room to improve. The reason why ShortBufferException is created and thrown is to trigger the caller to allocate a bigger output buffer. (code) Once it's caught, the caller CipherSpi will create a temporary big enough buffer, decrypt the data into it by recalling the cipher, and copy it into the origianl output buffer. (code)
Since this routine is being heavily called, it'd be great to have some optimization not to have ShortBufferException and cost caused by a temporary buffering.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6762
cannot run jmh benchmarks · Issue #6762 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Error: Could not find or load main class org.openjdk.jmh.runner.ForkedMain
one issue is jmh plugin and gradle version is not matching, but there are more issues than this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6765
MethodDescriptor.setRawMethodName breaks Immutability if multiple types of transport are used · Issue #6765 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6775
Include grpc-android and grpc-android-interop-testing in main build · Issue #6775 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Mentioned in #6132 (comment), dependencies in grpc-android and grpc-android-testing are not synced with the main build. We should maintain them using the same versions of dependencies.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6782
Lint error: Duplicate platform classes · Issue #6782 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, trying to use this library in order to connect to GCP and when trying to build the apk it gives me the following Lint errors:
../../build.gradle: commons-logging defines classes that conflict with classes now provided by Android. Solutions include finding newer versions or alternative libraries that don't have the same problem (for example, for httpclient use HttpUrlConnection or okhttp instead), or repackaging the library using something like jarjar.
../../build.gradle: httpclient defines classes that conflict with classes now provided by Android. Solutions include finding newer versions or alternative libraries that don't have the same problem (for example, for httpclient use HttpUrlConnection or okhttp instead), or repackaging the library using something like jarjar.
There are a number of libraries that duplicate not just functionality of the Android platform but using the exact same class names as the ones provided in Android -- for example the apache http classes. This can lead to unexpected crashes.
To solve this, you need to either find a newer version of the library which no longer has this problem, or to repackage the library (and all of its dependencies) using something like the jarjar tool, or finally, rewriting the
reports.zip
code to use different APIs (for example, for http code, consider using HttpUrlConnection or a library like okhttp).
Note: This issue has an associated quickfix operation in Android Studio and IntelliJ IDEA.
To suppress this error, use the issue id "DuplicatePlatformClasses" as explained in the Suppressing Warnings and Errors section.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6786
Race in StreamObservers.copyWithFlowControl · Issue #6786 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
That StreamObservers.copyWithFlowControl would deterministically copy values
What did you see instead?
That StreamObservers.copyWithFlowControl has a race that can lead to non-deterministic behavior
Steps to reproduce the bug
The following test class reproduces the bug (generally after a hundred thousand attempts or so)
Why this race happens
If the FlowControllingOnReadyHandler.run method is interrupted between target.onNext and the next target.isReady call, it is possible for it to never see that the target was in a not ready state, meaning that both a new invocation of the ready handler will be started, and the current one will continue.  In this test this is exhibited by the list being out of order.
General issues with the ready mechanism
This race is caused by a more general design flaw of the isReady/onReady mechanism used across ClientCall, ServerCall, and CallStreamObserver.  The typical pattern of
always has this race of the stream transitioning from not ready to ready between the call to next and the call to isReady.  Avoiding this race is very non-trivial, especially given the limited invariants of the onReady call (there doesn't appear to be any guarantee that this method isn't called spuriously when the stream was already ready).  I've been trying to find a good example of this for a while, but this is the first concrete example I've come up with.
Potential solution
One potential fix would be to have StreamObserver.onNext (and {Client|Server}Call.sendMessage) return a boolean atomically indicating that the underlying stream is ready, and to add an invariant that onReady will be called if and only if the underlying stream transitions from a state where it is visibly not ready to one where it is, but this would be a breaking change on any implementations of these classes.  The above pattern would then become
Note that this solution only works when the messages are being pulled.  When the messages are also being pushed asynchronously, rendezvousing the message and the ready event would still be tricky.  For this use case, a whenReady(Runnable) mechanism that invokes the handler exactly once (immediately if already ready) would be preferable.  This approach while more general would be more expensive than the one above as it requires creating a runnable for each message that is sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6789
Custom transport for REST, Soap, ... · Issue #6789 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We like the interfaces grpc provides and would like to use them to communicate to our legacy services too over REST, SOAP (and TCP for that matter)
We are aware of the proxy that already exists for REST - but it doesn't work for us.
We want to use as much of "vanilla" GRPC as possible and provide as light an integration as possible so we can reuse all the existing goodies that have been built into the framework (such as the opencensus integration)
Picking REST as an example for this question. I've had a poke around and the plan is to:
annotate the proto service definition using the existing HttpRule annotation
the Rest ClientInterceptor would change the message serializer/deserializer to use JsonFormat from protbuf utils and add the HttpRule instance to the metadata which is pulled from the MethodDescriptor so it can be pulled out by the Transport.
My questions are:
are we on the right path here for how the framework is designed to work with new transports?
are there any gotchas that might catch us out with the method we've chosen above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6795
IllegalStateException: listener unset · Issue #6795 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
CentOS Linux release 7.6.1810
OpenJDK 64-Bit Server VM (Zulu 8.38.0.13-CA-linux64) (build 25.212-b04, mixed mode)
What did you expect to see?
No errors
What did you see instead?
Steps to reproduce the bug
Found by internal load testing
I found #6486 but there OP is using a
ArrayBlockingQueue with capacity 1024, whereas I'm using a SynchronousQueue, which is unbounded. Unlike the OP, I'm not seeing a RejectedExecutionException. The only thing we do is set a bounded thread pool executor that sends out usage metrics. A test project is available on GitHub.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6796
Resource leak exception in logs · Issue #6796 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
CentOS Linux release 7.6.1810
OpenJDK 64-Bit Server VM (Zulu 8.38.0.13-CA-linux64) (build 25.212-b04, mixed mode)
What did you expect to see?
What did you see instead?
Recent access records:
Steps to reproduce the bug
Found by internal load testing
The only thing we do is set a bounded thread pool executor that sends out usage metrics. A test project is available on GitHub.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6797
Tracking issue for deprecating ATTR_LOAD_BALANCING_CONFIG · Issue #6797 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ATTR_LOAD_BALANCING_CONFIG is marked as deprecated, remove it probably in 1.30.x.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6806
ClientCallStreamObserver.disableAutoInboundFlowControl doesn't disable initial flow control · Issue #6806 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Calling ClientCallStreamObserver.disableAutoInboundFlowControl would disable all inbound flow control not explicitly initiated by the user.
What did you see instead?
The default behavior of requesting one initial message for streaming responses and two for unary responses is still applied.  It's worth noting that in streaming request server calls, disableAutoInboundFlowControl disables all inbound flow control (for unary requests, this doesn't even make sense as the handler isn't invoked until the request is received).
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6808
GRPC will keep retrying (until RPC timeout) if a user uses a bad service account key · Issue #6808 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What do you see?
When a user uses an invalid service account key (like one that was deleted), it is treated as an UNAVAILABLE error. Unavailable errors are interpreted as ones that should be retried by client libraries; consequently the application will attempt to retry this operation with invalid credentials until the RPC timeout is reached (usually 10 minutes).
What do you expect to see instead?
When a user uses an invalid service account key to authenticate with GRPC, it should yield an UNAUTHENTICATED error which indicates the operation should not be retried.
Steps to reproduce the bug
This is most easily reproduced through experimenting with the client libraries.
Create a service account and service account key, download it.
Delete the key entry in Cloud Console (so the downloaded key is no longer valid).
Authenticate with some google service using that key. Here is an example using Pub/Sub like this.
Additional details:
Suggested fix:
The code that controls this behavior is in GoogleAuthLibraryCallCredentials. I don't think all IOExceptions should be retried though.
In this case, one can see that the exception has a .getCause() which is HttpResponseException and it has .getStatusCode() == 400 which indicates a bad request. This is the error thrown if the user provides an invalid service account key.
Would it be possible to modify it so that if it is an IOException, it will examine the getCause() of the exception and throw UNAUTHENTICATED if the cause is HttpResponseException with status code 400?
Example of exception that you see:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6811
Error in handshake · Issue #6811 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How I made a channel -
host is a valid https url.
grpc server is written in Go and deployed in cloud run and is not installed with any custom certificates.
When I make a call to a gRPC service, I get handshake error like this .
This issue is intermittent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6814
How to instantiate a BlockRpcChannel for Generated Java · Issue #6814 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not sure if this is the right place, but I'm having issue with using the generated java code from my proto.
I'm just trying to utilize the generated Java Client.  I looked at the example:
And I expected the newBlockingStub to take a Channel (ManagedChannel).  In my case, its' expecting a BlockingRpcChannel.  I can't find any examples of how to create a BlockingRpcChannel
Question:
Did I somehow generate the java client incorrectly from the proto
If I did generate it correct, how do you create a BlockingRpcChannel?
Also what is there a difference between the two interfaces?
More Details are posted here (build.gradle, etc):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6817
The Ready event is missed in RetriableStream. Sublistener::onReady is called but masterListener.onReady() is not. · Issue #6817 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
I am using 1.26.0, and I have tried 1.27.2 and latest code 1.27.3 (compiled by myself).
What is your environment?
Windows 10, with openjdk 11.0.2
What did you expect to see?
I expect to see the onReady is called, then trigger masterListener.onReady().
What did you see instead?
onReady is called, but masterListener.onReady() is not called.
Steps to reproduce the bug
Sorry, it is hard to reproduce, but I can analyze the code to explain.
In drain(Substream) of RetriableStream, the new state was generated when all the entries were runWith the substream. but in the start(), a StartEntry was added, then the stream started after runWith. There is a possibility that the stream has sent the data successfully and call onReady to notify (another thread), but the new state which include the substream in the drainedSubstreams was not generated, then masterListener.onReady() was not called.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6821
Infrastructure for generic JWT authentication · Issue #6821 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
The problem I see is that it is described in documentation how to implement JWT authentication for a custom (non-Google) server so everyone has to repeat the same code that is shown in the documentation and it could lead to invalid implementations.
Describe the solution you'd like
It would be great if the grpc-java project offered an infrastructure (like set of interfaces/classes) that would drive gRPC users to the right implementation of JWT implementation, for both client and server.
#5915 introduces a new example on JWT but I still believe that a set of interfaces/classes to use is a better way.
Describe alternatives you've considered
Keep all as is.
Additional context
I'm author of the grpc-java-jwt library that contains two modules:
core with the basic infrastructure for any JWT-based authentication
keycloak with implementation for Keycloak.
It would be great if grpc-core contained basically the same as the core.
If you show me where I should place the new code, I could prepare a new PR, if you want.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6825
Gradle Build not executing properly · Issue #6825 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently I'm trying to set up a demo project for gRPC.
I'm encountering a problem regarding the generated code.
My gradle file is attached. I've tried Gradle 5.6 and Gradle 6.0.
The errors persist:
I hope there is a fix.
Best,
Nicolas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6832
Duplicate class error · Issue #6832 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After running build with grpc-gradle plugin two sources sets are generated.
The classes between these two source sets are duplicate and causing conflicts in compilation.
Please let me know what am I missing. Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6833
Remove dependency on javax.annotation.Generated · Issue #6833 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A similar issue was previously reported in #5343, which I cannot reopen. The problem with the solution proposed there is that the upstream library that is pulled this way is licensed under the CDDL. You should probably talk to a lawyer about the implications of that, and whether they apply here.
In any case, given that gRPC seems to be intended to be licensed as Apache 2, it seems wiser to remove the dependency entirely or at least provide an option to avoid it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6836
Question regarding the behavior of ServerInterceptor.interceptCall · Issue #6836 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi I am trying to figure out why my two interceptors are bouncing back and forth repeatedly. I have a RpcServiceModule that provides an ExtendedServerServiceDefinition:
ExtendedServerServiceDefinition providePortalService( PortalServiceRpc portalServiceRpc, UserStatusInterceptor userStatusInterceptor, RequestValidationInterceptorFactory requestValidationInterceptorFactory, ClientStatusInterceptor clientStatusInterceptor) { return new ExtendedServerServiceDefinition( portalServiceRpc.bindService(), List.of( clientStatusInterceptor, userStatusInterceptor)); }
After stepping through the code, I saw that the userStatusInterceptor always gets called first, meaning that the interceptors in the list are called from the last to first?
Secondly, in my Interceptor's implementation, I only override interceptCall, which checks the status and throws if the status is not proper. Each interceptorreturn Contexts.interceptCall(current(), call, headers, next), but it seems like the calls are bouncing back and forth even though to my understanding it should just go from one interceptor then on to the next and finish if all is good right? Please let me know if I am overriding the correct method or if I should be overriding interceptForward instead. Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6842
java.lang.IllegalStateException: lbHelper is null · Issue #6842 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
no exception error
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6847
Avoid sharing classes in test scope between multiple modules · Issue #6847 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example: FakeClock is a utility class for unit testing. However, it is in grpc-core's test scope but used for cross modules. This is problematic as build tools may not pull test sources to a dependent module. We have hacks in build files to force pulling it into classpath for test scope.
We should eliminate such usages before having more and more such hacks (grpc-rls started doing it). They should be put into grpc-testing module and compiled into the artifact as a utility for tests. If they are not intended for users, we can annotate them as Internal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6848
Enable grpclb for java implementation · Issue #6848 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am a .NET developer trying to communicate java client with custom C# implementation of lookaside server. The question is if somebody may share working configuration of how to enable grpclb in Java? I have tried examples and read release notest but without success.
Steps I have tried before:
when working with JAVA I have faced few pages over the internet with some puzzels but I can not get them working together.
My current setup:
is it required to configure dns resolver like this .nameResolverFactory(new DnsNameResolverProvider()) ?
how to force grpclb policy for ManagedChannel?
it is required for lookaside server to listen to port 80 or 443 or port can be variable when setting target?
is it required to support TXT records? (I see a log like this FINE: No TXT records found for grpc-server-balancer)
is it required to support grpc service config?
So sorry for "newbie" questions bear in mind I'm not a full blast Java engineer
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6849
Problem with TLS,Cert,Sec? · Issue #6849 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello all,
Im student from Slovakia and I try to create my first app.
I have app app deployed on Openshift. I cant resolve the following error on client side:
Thanks for all answers. Ports are different because Openshift work curious
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


6850
Port is bound if start is Interrupted · Issue #6850 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
GRPC 1.25.0, but the problem can be found also in master
Netty 4.1.43.Final
What is your environment?
What did you expect to see?
I expected GRPC server not to keep a bound port if the start fails due to interruption.
What did you see instead?
the server fails correctly but the port is still bound.
When the server is starting for the second time, the port is still bound which leads to a failure.
Steps to reproduce the bug
A little background story: I have nothing to do with GRPC, I am trying to implement restarting Spring Application Context on a signal (HTTP REST call) due to reloading the whole app (the main reason is that the database structures have changed). The signal can come at any point when the web server is alive, which can be even before the application context is fully refreshed. If the signal comes and there is a thread creating an application context, we interrupt it, discard its result, and start a new context. I hope this explains the role of interruption in my use case.
One of the beans is a GRpcServerStarter which encloses Server (NettyServer). If the initialization of this bean is interrupted at the wrong stage (server is binding to a port), then the future.await() is interrupted, server crashes, bean is not created, application context is closed. This however still leads to the port being bound, and the binding leaking.
After this interruption, there is no way to create a new server as the port is used.
HandlerMethod details:
I assume that a fix should handle better the InterruptedException by trying to unbind the port. I guess that this bug could be fixed in Netty, however from theit point of view, the binding can still succeed; you were just not patient enough to wait for the result, and it is your problem that you crash.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6853
How to transfer server-side exception to client? · Issue #6853 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When my grpc server creates a new SRE, and adds the causing exception:
responseObserver.onError(new StatusRuntimeException(Status.INTERNAL.withCause(t)));
(where t is an IllegalArgumentException)
... when the client catches the SRE, the Status.cause field is null. If I also add a 'withDescription("some text"), the description is available in the client.
@ejona86 wrote:
@ericmandm, no, your issue is different. The cause is not transmitted between the server and client.
@ericmandm wrote:
Ah Ok, thanks... and sorry I missed that in the documentation.
Is there a best practice for sending the details about a server side exception information to the client? For example, is putting json text in the description field, then deserializing at the client end a decent strategy?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6860
http2 on openshift · Issue #6860 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi everybody,
do you have somebody experience with grpc on openshift? Is possible to configure there a http2 protocol? Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6862
gRPC-Java Inflater to support reading Z_SYNC_FLUSH mode of zlib · Issue #6862 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Describe the solution you'd like
Inflater routines do not support the zlib functionality of Z_SYNC_FLUSH. This functionality needs to be added to Inflater. One other thing to note is grpc-cpp library supports this (https)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6866
android-interop-testing spews lots of warnings · Issue #6866 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For the generated code, we should probably disable the warning, like we do elsewhere:
The rest look like they'll need changes, but I just too a cursory glance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6868
Teach Android build -PfailOnWarnings=true · Issue #6868 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Multiple of our CIs currently run with -PfailOnWarnings=true. This is observed by our main build.gradle to enable -Werror:
We should observe the property for Android as well. This will help keep our builds clean and prevent things like #6866.
Android also has a fair number of linter warnings. It would be nice if we got to a place where they were covered by -PfailOnWarnings=true as well, but that could happen later (in which case we should create a new issue to track it).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6892
Add grpc-testing-proto to grpc-all · Issue #6892 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is to expose the generated code's javadoc and suppress the generated code's jacoco results. Currently javadoc is not generating documentation for the generated code.
I expect this to be non-trivial, but not especially difficult.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6893
Add grpc-alts to grpc-all · Issue #6893 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is to expose the code's javadoc and suppress the generated code's jacoco results. The main issue is suppressing the generated code's jacoco results, since the generated code is in the same package as the manually authored code.
The jacoco issue looks really ugly. We may need to rework our usage of the gradle plugin to compile the generated code into a separate destination directory, so then we can filter the entire directory instead of individual classes.
While it would be good to have a way to reliably filter generated code from jacoco results, it is probably easiest to move the generated code into a different package.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6898
compile protoc-gen-grpc-java failed on architecture x86_64(mac OS) · Issue #6898 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to compile the protoc-gen-grpc-java followed by this instruction,but i get the erros:
The detail erros:
Making all in src
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6906
LoadBalancer/Subchannel might need keep in TRANSIENT_FAILURE until READY · Issue #6906 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the same issue as #6650 for general lb/subchannel.
If you have enough backends and they are all unavailable, then it becomes likely that at least one of them will be CONNECTING. That will delay RPCs and avoid giving them a clear error message.
When a subchannel becomes TRANSIENT_FAILURE, we want RR to continue considering it (for channel state and picking logic) TRANSIENT_FAILURE until the subchannel becomes READY. That means it would "ignore" CONNECTING subchannels, except for new and recently-READY subchannels.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6910
java.lang.OutOfMemoryError: Direct buffer memory · Issue #6910 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Hi,
i face sometimes a memory issue of my client app that is trying to connect to grpc server.
What happen ? my client app is not able to connect to my grpc server (for some reason, for example grpc server down). So, there is a retry each minutes until grpc server is reachable.
And when finally the server is reachable, sometimes i face an outOfMemory issue. On client side, i only try to get from server a simple json payload  and the grpc message size is not heavy (less than 4mo that is the max size if i understood).
I need to stop my java process in order to start without any exception.
Any hints about this memory issue ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6914
RoundRobinLoadBalancer hangs on subchannels creation · Issue #6914 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux  4.9.0-8-amd64  Debian 4.9.144-3 (2019-02-02) x86_64 GNU/Linux
openjdk 11.0.1 2018-10-16
OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)
What did you expect to see?
LoadBalancer will not hangs on subchannels creation
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6917
Bug / FR: Shaded Netty artifact doesn't include Netty-Epoll or Netty tcnative · Issue #6917 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Netflix uses the shaded netty jar in its gRPC applications.   This jar helps avoid netty conflicts, but fails to load Netty Epoll/KQueue, as well as Netty TCnative.   This results in subpar performance of gRPC, notably in allocation profiling.  I think this is nearly a bug, since these libraries should likely be the default, and it's difficult to enable them with the shaded artifacts.  Thus, I am suggesting that these deps be shaded and included for developer convenience.
If this is not feasible, it would be really helpful to include some example code showing how grpc users can do this themselves (perhaps in ALTS / GCP artifacts?)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6919
How to support existing REST APIs written in Java · Issue #6919 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a microservices written in java where we have exposed REST APIs being consumed by  various clients.We want to migrate to gRPC while supporting the old clients.
I came across the grpc-gateway  but it has to be implemented in Go which I don't want to use.
So how to support existing REST APIs written in Java ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6921
Building gRPC with Bazel: Guava lists don't have collectors · Issue #6921 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm including the gRPC repository into my Bazel WORKSPACE like this:
I have also copied over the Maven dependencies from Github.
Now, when I try to include Guava in my BUILD dependency, I add this: "@com_google_guava_guava//jar",.
The following results in an error:
Is this maybe not supported in the Guava version used in gRPC?
Would I be able to override which Guava version I'd like to use if building with Bazel?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6922
An Authentication object was not found in the SecurityContext · Issue #6922 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How do we fix this ?  Issue when adding @PreAuthorize in gRPC Method... For rest it works fine...
Note: : Application is deployed in wildfly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6925
Update Netty beyond 4.1.45 (per CVE-2020-11612) · Issue #6925 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
There is a security vulnerability, CVE-2020-11612 in netty, before 4.1.46. (This is flagged by build-time tools, such as the commonly used OWASSP dependency-checker.)
My reading on this one is that it particularly affects any use of netty code in a server situation, where untrusted clients data is able to reach the server directly and be decoded:
The ZlibDecoders in Netty 4.1.x before 4.1.46 allow for unbounded memory allocation while decoding a ZlibEncoded byte stream. An attacker could send a large ZlibEncoded byte stream to the Netty server, forcing the server to allocate all of its free memory to a single decoder.
i.e. it affects GRPC server implementations but not clients (unless they are communicating with an untrusted/compromised server, I suppose?)
Describe the solution you'd like
Update shaded netty version to at least 4.1.46 (4.1.48 is the latest, at time of writing.)
Describe alternatives you've considered
Only other option is to ditch use of grpc-netty-shaded in favour of managing separate dependencies. Which negates the whole purpose of having grpc-netty-shaded, and can lead to issues with other dependencies that require (different, conflicting) versions of netty.
Additional context
The table in this project's Security policy doc suggests that a future 1.29.x is earmarked to use 4.1.48.Final.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6926
Performance Question · Issue #6926 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mu-scala is a Scala wrapper atop of gRPC. Currently, it's at gRPC 1.28.x and we've observed performance degradation. Details here.
As you can see in the comparative, the big hop happened with the 1.27.x release, with this new feature:
I’ve tried to revert it back (using that java system property to false) but nothing changed apparently, so the problem may be somewhere else :thinking_face: . I didn’t check the okhttp version though.
Am I missing something? Could you please point me out to any other grpc benchmarking reference? Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6928
OpenCensus 0.26.0 update · Issue #6928 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can we update OpenCensus to 0.26.0 from the current 0.24.0?
if not, what needs to be fixed before we can proceed?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6929
happens-before in StreamObserver · Issue #6929 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It's not clear to me what concurrency guarantees are provided in StreamObserver. For example given below where the observer is converted to a future:
Given that onError/onNext/onCompleted may be called from different threads, is there a happens-before relationship (according to the Java Memory Model) between subsequent calls to the observer or not, assuming the observer is not shared between multiple calls? This is not documented anywhere. If there is a happens-before, then the volatile on value is redundant, if not, then it would be required.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6933
Is it possible to run gRPC service inside a tomcat container ?  · Issue #6933 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a Spring Boot application running on a tomcat server with a few REST endpoints exposed.
As gRPC can be deployed as a standalone service , it manages it’s own connections and port. Wouldn’t it be problematic to go with this approach of running it on a tomcat server ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6934
Mutual TLS with chained (root ca -> intermediate ca -> client) certificates · Issue #6934 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can't get mutual tls to run with a certificate chain on the client side.
I ran https successfully with mutual tls enabled but the client's certificate file ../../testing/src/main/resources/certs/client.pem is just a plain certificate without the full chain.
I tried to get this to run with a client cert that was signed by an intermediate cert which is in turn signed by a (self-signed) root ca cert.
The client is using a chained certificate file that contains (in this order) its own cert, the intermediate's cert and the root's cert.
Both server and client use the root ca cert.pem as their trustCertCollectionFile.
Both server and client have the ip address 127.0.0.1 in there subject alternative names and in the client I changed the line
Is this supposed to work? I can generate test certificates to reproduce the problem if needed but note that the following openssl command line claims that my certs are ok:
Note also that the sample runs fine with my certs when I do not use mutual TLS although the server also uses a full chain certificate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6939
Xds interop test is failing in v1.29.x · Issue #6939 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6943
Logspam from Netty if sending when cancelled · Issue #6943 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Docker image: adoptopenjdk/openjdk8:alpine-slim
What did you expect to see?
I expect to see no unnecessary logs.
What did you see instead?
Unnecessary logs.
Steps to reproduce the bug
To reproduce, create a long lived server side streaming rpc, with a Netty server that has .maxConnectionAge() and .maxConnectionAgeGrace() set. Observe that when the age and grace period has passed you receive the following log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6952
Add ability to change backoff policy · Issue #6952 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The gRPC Go APIs allow you to configure the exponential backoff policy, can we get the APIs same APIs in java? There is in fact a TODO to add this feature!
Use case is that I'm running a set of services locally. I would like to set the maximum retry backoff to 5 seconds, since there's no chance of causing excessive load to any sort of cluster.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6954
Receiving Unknown Status code on hostname with InetSocketAddres  · Issue #6954 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
version 1.24.2
What is your environment?
What did you expect to see?
Status code unavailable
What did you see instead?
Status code unknown
Steps to reproduce the bug
used :
where address contains a hostname that does not exists
got back StatusRuntimeExcetpion with cause of  UnresolvedAddressException and code Unknown
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6964
Authentication failure with bidi streaming is not notifying the client · Issue #6964 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Java version: 1.8.0_241, vendor: Oracle Corporation,
What did you expect to see? && ### What did you see instead?
I would expect that when calling
inside ServerInterceptor, that client's onError or onComplete will be called in ClientResponseObserver. But there is no notification sent to the client whatsover. With blocking GRPC calls there is an exception raised on the client side when trying to call the method e.g. if changing https to fail authentication, but not with bidi streaming.
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6971
SSLException: handshake timed out due to long java GC pauses and default handshake timeout being 10 secs · Issue #6971 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a service which establishes 1000s of ssl based grpc connections to our backend servers, while trying to process a lot of other data. Due to this we encounter long java GC pauses, sometimes >10 secs.
The default handshake timeout is 10 secs
As a result of this, we encounter multiple handshake timeout errors in the order 1000s as well. Is there a reason why this is not exposed to the client? so that the caller can change the value.
Is there any other alternative approach to solve this and not encounter so many handshake timeouts. May be an interceptor and queue up the requests if the handshake is not complete?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6974
How To use Java client With TLS But ignore the service endpoint certs · Issue #6974 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm asking for help if I want to ignore the service certs,How cloud I do this throw java client since
it is easy through httpclient or with GUI tools such as postman.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6975
wrong version on readme? · Issue #6975 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
I think there is a small failure on gradle non-Android dependencies readme.md
This are the gradle dependencies writted on documentation:
shouldn't be version 1.29.0 all of them?
Fixing this in my gradle file have solved a lot of cannot find symbol java errors
Best regards
Nacho.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6981
Support OSGi Remote Services by enhancing grcp protobuf plugin code generation · Issue #6981 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to implement an OSGi Remote Services distribution provider based upon grcp.  OSGi Remote Services is a specification:
that allows OSGi services to be exposed for remote access by consumers via a distribution provider.   ECF's implementation of remote services:
has support for pluggable distribution providers:
One of these providers uses grcp/protobuf as a distribution provider
To make this distribution provider easier to use, it would be valuable to be able to have grcp protobuf plugin generate two additional classes:
An OSGi service interface class.   This is an interface declaration that has all of the non-streaming method declarations in a single interface class...e.g. for the grcp health service example, proto would be:
Also desirable would be an abstract superclass implementation of this service interface class to allow naive subclass implementations of the remote HealthCheck service, for example:
I've submitted the following pull request as an initial suggested implementation of changes to grcp plugin to support generation of the service interface and abstract impl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6982
java.lang.NoSuchFieldError: NETTY_SHADED when upgrading from 1.27.2 to 1.28.0 · Issue #6982 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.29.0 -- although I tried all gRPC versions from 1.27.2 to 1.29.0 to determine the exact version of breakage and it looks like it occurs between 1.27.2 (working) and 1.28.0 (not working).
What is your environment?
My development machine has macOS Catalina 10.15.4 with Java 11.0.6 installed
I'm seeing the same issue in production, where we run the openjdk:11-jre-slim-buster Docker image, which contains Debian + Java 11
We're using Kotlin 1.3.72, compiled for the JVM
What did you expect to see?
I expect to see the content from the content service (in this case, website copy).
What did you see instead?
I get an error message (see "Steps to reproduce the bug")
Steps to reproduce the bug
I don't see any error logs in the shell where I'm running the grpc service.
This PR seems relevant: #6774
Thanks! Let me know if you need any more information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6983
bidi-stream flow control · Issue #6983 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use grpc bidi-stream in product.
It will be OOM , if client consume lower(whatever reason).
How to control stream memory size ?
I test manual flow control , It is too slow .
I use ServerCallImpl#isReady() judge stream if can execute onNext().
The DEFAULT_ONREADY_THRESHOLD is not enough, my single msg about 80KiB, how can i configure this.
Can any other idea to resolve this problem?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6984
Would you accept a pull request for gRPC-webpieces-http client and gRPC-webpieces-server? · Issue #6984 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking into doing work for gRPC generation for our microservices and webpieces is a BUNCH of webpieces although with a backpressure feature wired through 'every' layer even in http1.1.  I know http2 'has' backpressure though in webpieces, the sockets get turned off on a backpressure event due to controllers not keeping up leaving CPU to concentrate on finishing existing requests before turning backpressure on.  Instead of netty, webpieces has it's own nio layer(a library nio layer not a framework like netty library so easier to compose with).
thoughts on a pull request in the future?  It may take our organization some time to create the implementation, so we would fork the repo and hopefully be back in a couple/few months to do a pull request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6985
generate an async interface · Issue #6985 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For some reason the generated code is an abstract class like so
public static abstract class AuthApiImplBase implements io.grpc.BindableService {
could we possibly slightly change that line to
public static abstract class AuthApiImplBase implements AuthApi, io.grpc.BindableService
so that there is an interface.  This can be very powerful for extensibility.  I would like to implement that interface right now on clients and servers and hide some json underneath it while we slowly get to gRPC from json(ie. getting our foot in the door this way at the very least so can swap it out entirely later but unfortunately with no interface here, it has made it a bit harder).
Another thought...java only allows extending from a 'single class' so in the future it would be better that one does not have to extend AuthApiImplBase as well so services could extend another class but I am guessing that would be too huge of a rework at this point.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6986
Will there be a flag for generating CompletableFuture methods in the future? · Issue #6986 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Coming from twitter with extensive 'scala.Future' use which is just like java's CompletableFuture, I had a question on the roadmap...
I am wondering the roadmap of java-grpc generation and if non-streaming, simple request-response methods will in the future be able to use CompletableFuture like so (perhaps via a grpc gradle plugin configuration change?)...
public CompletableFuture method(GrpcRequest request);
such that synchronous generation is NO LONGER needed.  if you want sync, you can then call it like so
thanks,
Dean
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6989
Tracking issue for ServerCall.getServer() · Issue #6989 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Introducing this API to expose the Server instance that dispatches the call on ServerCall interface. Services that need to access the server (e.g., ProtoReflectionService) can obtain the server reference with a server interceptor, without the callback logic of NotifyOnServerBuild.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6994
Retry policy does not provide visibility into failures · Issue #6994 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
A retry is configured for UNAVAILABLE
And there was user misconfiguration (a typoed hostname, or no ALPN provider)
Library consumers get no notification that a retry is underway or the reason for the retry.
Describe the solution you'd like
There are several options:
Allow the library consumer to provide an Observer during channel creation. It could get notified for many different types of events that could happen during a channel's lifetime.
Log to a logging facade that library consumers can supply their own implementation for. This is particularly important with shaded dependencies (which gRPC provides their own).
Describe alternatives you've considered
The alternative we implemented is to remove the retry policy configuration from our channel. Not much of an alternative.
Additional context
Discussion on issue #1577
cc: @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6995
Quick question on url path of gRPC protocol... · Issue #6995 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@ejona86 @voidzcy as I assume you know this off the top of your head.  On the simple helloworld server (I have the example working of course), I don't see a way to modify the base url that grpc comes in on.  Does grpc have to be the root?  I mean for example, is all grpc protobuf binary forced to come in over?
I think the full url of an endpoint from what I have seen is
where a proto file of package orderly.something and a service called AuthApi and a method called authorize would be
do I have this correct?
Oh, and one more thing. I then assume the content type MUST be specified to application/grpc ?
I was not sure looking at this https
which has application/grpc+proto vs. application/grpc+json.
thanks,
Dean
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6996
Question: WS.Reputation.1 reported by Symantec in Windows binaries from repo1.maven.org · Issue #6996 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Binaries for Windows downloaded from https are reported to have "WS.Reputation.1" by Symantec Endpoint protection.
Are you guys responsible for those binaries ?
Url:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6997
Test that newly-added Java 8 ALPN works · Issue #6997 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In https Java 8 received a backport of the Java 9 ALPN API. It appears to be available starting in 8u251 or u252. Support was added to Netty in netty/netty#10196 and released in 4.1.49.
Since we do some of our own detection, we should make sure it works with these more recent Java 8 versions. Even though Java 8 has very poor AES GCM performance, if it is an additional option it can help users on nicher platforms why may not need high throughput. We will also need to update SECURITY.md.
It may make sense to split out a separate issue for OkHttp.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7002
BaseDnsNameResolverProvider exception with 1.29? · Issue #7002 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
No exception being thrown.  I have a project that contains peer dependencies that use 1.28.  I then installed a library that used 1.29.  I force 1.29 on all the peer dependencies. I expect 1.29 to be backward compatible.
What did you see instead?
It looks like in 1.29 BaseDnsNameResolverProvider was removed. Is 1.29 backward compatible?  would it break library dependencies that utilize 1.28?
it seems to crash when
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7006
Upgrade to Gradle 6 to support Java 13 · Issue #7006 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
If you run gradle with Java 13, you will get "Unsupported class file major version 57". This can be fixed by changing to Gradle 6.
Describe the solution you'd like
Patch:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7007
netty should use BDP by default  · Issue #7007 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since now we expose Netty{Channel,Server}Builder#initialWindowUpdate via #6979. We should use it by default.
We probably need to use smaller windowSize than current DEFAULT_FLOW_CONTROL_WINDOW 1MB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7022
Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true · Issue #7022 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What's the problem ?
The exception java.lang.RuntimeException: ManagedChannel allocation site threw too many times,  the detail as the following stack shows. I do not want the exception happens.
build ManagedChannel code, you can also find it here :
close ManagedChannel code, you can also find it at shutdownManagedChannel:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7024
How can I share some value without sharing Context.Key object instance? · Issue #7024 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Summary
How can I store and get a value from Context without sharing Context.Key instance?
Detail
I want to share some value with grpc Context. but I can't get the stored value with Context.Key instance
I tried this snippet
The result was
But I expected
It means if I want to get value from a Context, I should use same Context.Key instance.
It is strange. Because, I'm trying to share some values with Context and when I get the stored value I should use same Context.Key.
To share some value, should share the key object instance. (not the key value)
If I can share myKey object instance, I don't need Context to share value.
What about multi-threaded case? It is more difficult to share the Context.Key object instance.
I can't understand use of Context and Context.key to share value.
In short, My question is.
How can I store and get a value from Context without sharing Context.Key instance?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7028
RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor · Issue #7028 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Android 9
What did you expect to see?
No exception
What did you see instead?
RejectedExecutionException
Steps to reproduce the bug
Add Google Cloud Speech client into the android app.
Full crash log.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7035
Compress behavior difference between grpc-java and grpc-go · Issue #7035 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Client:
grpc-java append grpc-accept-encoding header even if  compress calloption has not set.
grpc-go append grpc-accept-encoding header only if compress calloption has set.
Server:
grpc-java will check the grpc-accept-encoding header which client send to server and compression is not enabled by default. Compressor will be set with the grpc-accept-encoding  message compression method
ompression.
grpc-go will not check the grpc-accept-encoding header which client send to server and compression is enabled by default. Compressor will be set with the grpc-encoding message compression method
Why? Are there any other reasons for the inconsistency？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7036
my grpc-java server has only one tcp connection! · Issue #7036 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when i test performance of grpc-java server, i find that:
anyway，my server only has one connection!  the test command is:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7037
How to read stats from census module?  · Issue #7037 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
This is more of a user question. Given grpc-census package captures stats by default via CensusStats module, how do I retrieve them? I see that it internally adds server call interceptors which record events but I am not sure how can I expose them or export them elsewhere.
Thanks, in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7042
Is it possible to manage managedChannel and stub by dynamically changing EquivalentAddressGroup of NameResolver.Factory? · Issue #7042 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is it possible to manage managedChannel and stub by dynamically changing EquivalentAddressGroup of NameResolver.Factory?
I want to load balance by dynamically allocating the grpc server using spring eureka and grpc
on client application.
Below is the code of name resolver...
Below is the code to build a managed channel...
Sorry for lack of English proficiency. Thank you for your understanding.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7043
Feature request - proxy settings support at client level · Issue #7043 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Currently proxy settings can be set using environment variables. Unfortunately this applies at JVM level and could have side effects on other services running in the same JVM.
Describe the solution you'd like
It'd be great to have the possibility to define the proxy settings at client level in the code rather than relying on environment variables. That would allow the use of different proxy settings in the same JVM without having side effects on components running in the same JVM.
Describe alternatives you've considered
The alternative would be to run our services in different JVMs which is a no-go in our situation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7044
io.grpc.StatusRuntimeException: INTERNAL: Protocol error Rst Stream · Issue #7044 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux. Java gRPC client talking to a Go gRPC server.
We have a multithreaded client that makes different calls to the gRPC server. We reuse the ManagedChannel, but create a separate blocking stub for each thread. We see the error when the server takes a long time (a few minutes) to process and returns a large error message.
If I change the code to use a ManagedChannel per thread, the problem goes away. This makes it appear that there is a concurrency issue with the ManagedChannel.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7051
Support for proto3 field presence · Issue #7051 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Proto3 introduced the optional syntax to support field presence tracking in release 3.12.0. We need to add support in our grpc protoc plugin.
See this doc for more details. Basically we need to add a function GetSupportedFeatures() to our grpc protoc plugin to mark our compliance.
Please plan to do this in the next release. If not, please let me know. Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7053
Bump Guava to 29.0-android · Issue #7053 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Once we use protobuf-java v3.12.0 #7052, the upper bound of guava version will be 29.0-android.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7056
GRPC access logs · Issue #7056 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm migrating my application to grpc. Everything working fine but for latency plotting I need access log in tomcat but I'm unable to generate access log. The only solution I found so far is the server interceptor. Doesn't grpc support access logging just like we have in tomcat if yes how to enable?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7062
netty: Delete AttributeKey.newInstance("channelLogger") · Issue #7062 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As I mentioned in #6707 (comment) :
But even better: we should consider deleting the attribute. It is only used by ProtocolNegotiators, which already has access to GrpcHttp2ConnectionHandler. We could just add method to GrpcHttp2ConnectionHandler instead, which would be explicit.
#6707 is closed because the issue itself is resolved. But this is to clean things up more.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7065
RPC failed: Network closed for unknown reason · Issue #7065 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
i have this issue appearing once in a while. I have a system A talking to the system B via rpc, and once in a while i get this error with connection. Full log see below. The strange thing is, this time i don't see connection issue with my server boxes , A can talk to B with same call with no issue. But when i try run A locally this error appears. I can ping locally to the port and ip with no issue.  Please advise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7075
how to benchmark grpc services? · Issue #7075 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
for rest services, we can use many soft to benchmark, how to benchmark grpc services?
I want to compare grpc and rest service at QPS/avg Latency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7076
is service side StreamObserver noblocking? · Issue #7076 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is service side StreamObserver noblocking ?
we using netty in current project,is it a good idea call onNext/onError/onComplete in netty's IO threads to improve performance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7082
How to get metrics of GRPC methods in a ServerInterceptor · Issue #7082 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I'm trying to get the time it takes for the GRPC method to run, including all the logic inside the method(database queries, s3 object retrieval, etc.), and the status code it returns.
Currently I have this Interceptor implementation:
But the time being logged is always the same and is not including my database queries, as these are being made after this time is calculated and logged.
For the status code, I couldn't find any indication that it was possible to get.
How would I go about doing this?
My project is using GRPC version 1.20.0, I'm mentioning this in case these features might've been added in a newer release.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7085
Force client to refresh DNS during service cell drain event · Issue #7085 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a gRPC service running in multiple cells. Each cell is backed by its own AWS NLB. There can be multiple cells in a given AWS AZ.
I want to move clients to a new cell to help balance the load over a long period of time.
The service requires a customer's traffic to be served out of the same cell.
The issue is that grpc-java keeps a TCP connection open unless it gets a TRANSIENT_FAILURE by use of max connection age. There is no way to server side send a 302 redirect or forcibly close the TCP connection.
Any ideas how to issue a 302 redirect or force-connection re-estalbish server-side to the client?
If this were an HTTP RestAPI at say foo.com, I could send an HTTP 302 to a sub-domain pointing to the new cell (cellb.foo.com), forcing the client to redirect traffic to the new cell, including a DNS fetch + new TCP Connection
Any ideas on how to server-side direct the client to a new endpoint / IP Address / TCP Connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7088
Is ServerCall.close() always called? · Issue #7088 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, basically the title is self explanatory, I want to know if ServerCall.close() is always called after any rpc
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7089
RetriableStream.Sublistener.onReady() has broken concurrency for hedging · Issue #7089 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As mentioned in #6817 (comment), there could be multiple concurrent Sublistener.onReady() invocations. They should not all be propagated to the master listener which may cause excessive buffering.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7092
connection reset by peer when using Firebase · Issue #7092 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using Firestore that is using gRPC java behind the scenes
I got the following error:
The stacktrace ends with this
Does that mean there was a connection problem between my server and FireStore server? A connection error somewhere else? How can I know what was causing it?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7093
Error when building OkHttpChannelBuilder: "No enum constant" TLS_CHACHA20_POLY1305_SHA256 · Issue #7093 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
OS: Both Linux and OSX experience this error
JDK: Only happening on 1.11
What did you expect to see?
Creating an OkHttpChannelBuilder using grpc/okhttp should work
What did you see instead?
Steps to reproduce the bug
I have noticed this constant exists in okhttp (here) but not here. I believe the difference is one is okhttp3 (4.x) and one is not. Any idea how to resolve this?
Here is the code used to build the object:
Any help is appreciated!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7095
Getting error while GRPC call: Can't find decompressor for deflate · Issue #7095 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have an application where I have to send a number and get a corresponding image from the server. The server is C++ and it uses Gzip compression and deflate algorithms to send the compressed data to the client.
On the android side, I have to call the API and the response will be stored in 'image'.
The request is 'CID'. The service is 'getsampleimage'. The response is 'image'.
But if I use the above method, it is throwing the error 'cant find decompressor for deflate'. I dont know whether it is correctly decompressing the Gzip format or not. Does anybody know how to do decompression on the android client side for the image data(Byte array)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7099
alts: Running on GKE gVisor gives error "ALTS is only allowed to run on Google Cloud Platform" · Issue #7099 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running a Java server in a faily minimal docker image on GKE on GCP, and trying to receive a request via ALTS that yields the odd error that "ALTS is only allowed to run on Google Cloud Platform".
currently tries to read /sys/class/dmi/id/product_name, which doesn't exist in the minimal container image I'm using.
Should there be an alternative model for not early erroring-out for Kubernetes containers, or is the requirement that Kubernetes always re-expose the Node's /sys mount to the Pods (hostPath docs) so that this business logic can continue to work?
FTR, gVisor aka GKE Sandbox doesn't allow hostPath mounts, so the best I can do at the moment appears to fake it with my own hack file.
See also grpc/grpc-go#3666
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7104
grpclb: Only one of the SRV records will be used · Issue #7104 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If there are multiple SRV records the NameResolver will resolve the addresses for each and attach each address's name from the SRV.
However, GrpclbLoadBalancer will then flatten the addresses and just use the first authority, tossing any EAG that didn't use that authority. Since #4469 it has been possible to provide a per-EAG authority. But createOobChannel() only accepts a single EAG (#4618), which is a blocker.
The current behavior dates to #2934, which appears was to perform exponential backoff when failing to connect to the balancer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7105
Possible buffer leak in blocking stub DEADLINE_EXCEEDED race condition · Issue #7105 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One of my unit tests started reporting a netty ByteBuf leak when upgrading from 1.26.x to 1.27.0, and it remains in subsequent versions up to 1.29.0. I'm not 100% sure but strongly suspect it's related to #6328, and in particular the interplay of that change with the ThreadlessExecutor used by blocking unary calls.
It's a somewhat extreme case, the test itself was there to verify a past unrelated concurrency issue. Basically making many consecutive calls using blocking stub with very short (1ms) deadlines. Though likely rare in the wild I think it does expose a real bug.
Here is example snippet which reproduces the leak error log(s) every time mid-test for me when pointed at a local etcd server:
I can provide more of the leak access records if needed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7107
Smallest possible dependencies for a grpc-java client · Issue #7107 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to use grpc-java to implement a grpc client. I was able to implement it using the Getting Started guide.
However, in my case, the size of the compiled shaded Jar of my program plays a very crucial role (even reducing by few MBs would be helpful). Therefore I was wondering what the smallest possible dependencies that I could use. I am currently using the following dependencies.
I noticed how grpc-okhttp and grpc-protobuf-lite is recommended for Android clients. Can I use them (since they seems to be very low in size) although my client will be running in a non-android environment ? What are the differences between the implementations ? (I found out that protobuf-lite lacks some capabilities, although I am not sure exactly what are lacking)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7110
Failed to collect dependencies at io.grpc:grpc-all:jar:1.30.0 -> io.grpc:grpc-rls:jar:1.30.0 · Issue #7110 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
No error appears when grpc bumps to 1.30.0
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7112
Add protobuf-bom into grpc-bom · Issue #7112 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please consider adding com.google.protobuf:protobuf-bom into grpc-bom. This will allow not specifying version of additional libraries from protobuf family.
Example how this might be implemented:
With this feature protobuf-java-util stay aligned with protobuf version that was got transitively from.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7117
xds: investigate io.envoyproxy.controlplane:api · Issue #7117 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Similar to #6016 which was not possible because the latest version of io.envoyproxy.protoc-gen-validate:pgv-java-stub in maven is not up to date as what we needed.
io in maven is more up to date and even includes com.google.cloudapi that #7109 needs. However, we don't know how frequently it updates on a regular basis. It may still fall behind our need.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7123
Please add "s" in domain name · Issue #7123 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not sure why I got wrong domain name "dialogflow.googleapi.com" instead of "dialogflow.googleapis.com".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7124
Executing a jar-with-dependencies built with maven-assembly-plugin 3.2+ throws "java.lang.IllegalStateException" · Issue #7124 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
io.grpc:grpc-core:jar:1.30.0
What is your environment?
JDK: tested with both OpenJDK 8 (1.8.0_232) and 11 (11.0.7)
What did you expect to see?
A perfect, flawless execution of a jar-with-dependencies that would be spoken of for generations to come.
What did you see instead?
Using any version of maven-assemble-plugin 3.2.0 or higher seems to introduce the problem, so the issue is likely related to some change there. There was a similar error reported in #5493 - not sure if it's related to what's happening here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7125
ServerBuilder should warn/error if a service impl is registered twice · Issue #7125 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.30.0
What is your environment?
Windows 10
What did you expect to see?
A warning/error that the user registered a service twice.
What did you see instead?
Nothing, the second implementation was ignored silently.
Steps to reproduce the bug;
I can add/register both implementations, but I can only access one of them.
Additional context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7126
none
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7129
grpc-java upgrade from 1.12.0 to 1.28.0 crashes JVM · Issue #7129 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently use grpc-java in our spark application running on k8s cluster.
When upgraded to 1.28.0 the JVM crashes with the below error:
The problematic frame from the logs refer to this package  /tmp/libio_grpc_netty_shaded_netty_tcnative_linux_x86_646080581338743196850.so
Below are the dependencies as suggested by the release notes:
I have attached the error log generated by the container.
Please let me know if there are any other dependencies I am missing which is causing the error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7132
Load-balancing - start method is not being called from NameResolver · Issue #7132 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are trying to implement gRPC load balancing in Java with Consul Service Discovery.
Version info: grpc-java v1.30.0
The problem is that when the app runs, the start method from our custom NameResolver class not being called !
Here is our code:
Here is the custom NameResolver class (start method here is not being called)
I have put breakpoint at start method to check and it's not being called !
Here is the custom NameResolverProvider class
Is there anything wrong on our code ?
We are looking forward to hearing from you soon !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7133
Remove NameResolver.Factory · Issue #7133 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NameResolver.Factory is old and was meant to be replaced by NameResolverProvider. I've been slowly trying to remove it, especially ManagedChannelBuilder.nameResolverFactory(). I see evidence new users are using it, so this issue is to be a gathering point for why it is being removed and making sure there are alternatives to the current usages.
Since NameResolverRegistry was added in v1.21, most users shouldn't need the factory. A small number of users may need a "default name resolver override". This would be similar to defaultLoadBalancingPolicy() which was added when we removed loadBalancerFactory(). However, the NameResolver API needs tweaks to support that, where each NameResolver would be for a particular scheme and the NameResolverRegistry would select the appropriate NameResolver (instead of the current "call all the name resolvers in order until one understands the URI").
NameResolver.Factory is used internally in grpc. I don't care much about that, since it does little harm, but I don't expect NameResolver.Factory to ever become stable and it should be removed. It just may go slowly due to priorities.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7138
Consider configuring `ProtoReflectionService` to use it without internal APIs · Issue #7138 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to the popularity of gRPC, some frameworks or libraries have an integration layer for gRPC.
Especially, Armeria has its own server/client implementations to serve/call a gRPC stub.
ProtoReflectionService is using the internal reference of a gRPC-Java server instance since 1.30.0 #6967.
That means a stub running without gRPC-Java server could not use ProtoReflectionService. line/armeria#2806
Armeria injects ServerServiceDefinitions to ProtoReflectionService using notifyOnBuild() hook.
If ProtoReflectionService supports better ways to build ProtoReflectionService,
it could be a good extension point for gRPC-Java echo systems.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7139
okhttp: isReady does not become false · Issue #7139 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Android application I'm trying to upload a large file (165 MB) using client gRPC streaming. The file is chunked into 2 MB chunks.
Each time I run this code, the application crashes with:
Log output before the crash is as following:
What is important, there is no delay between each sending x chunk log entry, which means the callback provided to setOnReadyHandler is called immediately and requestStream.isReady flag stays true.
Seems like here is the problem: even though the previous data has not been sent and is buffered by gRPC, isReady returns true. The JavaDoc of isReady method says the following:
Therefore my understanding is, that in this case false should be returned, because OutOfMemoryError suggests, that excessive buffering is happening.
How can I improve the code to get rid of OutOfMemoryError? Also is my understanding of isReady() method correct?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7140
cronet: Add compatibility with MigratingDeframer · Issue #7140 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The tests for cronet use mocks to assume specific behavior about the stream, so were not trivial change to support MigratingDeframer. We should improve the tests so they can work with MigratingDeframer (or not), or decide we don't actually need MigratingDeframer for cronet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7157
How can I use the .proto file to generate the code for one request and one response · Issue #7157 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I saw the above description in the official documentation
but after experimenting, I found the code I generated through the plugins for ways 1 and 2 is the same
environment:  java1.8 maven plugins: protobuf-maven-plugin version 0.6.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7159
Does netty-codec-http2 still need an exact version match? · Issue #7159 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While trying to upgrade the netty version of a large project, I ran into a version conflict with grpc-netty. This looks to be because it requires an exact match on the version of netty-codec-http2. This seems a bit strange given that most other deps do not have strict requirements, including the other netty libraries.
I see that this was added by #1459, but this seems to date to when netty http2 support was in a pre-release state. I would hope that it's more stable now, although I don't have personal knowledge of the subject. Could this limitation be relaxed going forward?
(I realize that using grpc-netty-shaded would sidestep this issue, and this may be my solution for now. I'd rather not have to, though)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7161
How to recompile grpc-netty-shaded with a local snapshot version of Netty? · Issue #7161 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey all, I am experimenting with setting up a project using grpc-netty-shaded compiled as a native image using GraalVM.
Right now I want to experiment with making some changes to netty and then seeing the effect of the changes in my application.
How do modify the compilation of the grpc-netty-shaded project to use my local version of netty? For example, I want grpc-netty-shaded to compile with my local version of io.netty:netty-handler:4.1.51.Final-SNAPSHOT that I built locally rather than  io.netty:netty-handler:4.1.48 in Maven Central.
Right now I've tried tinkering with changing the versions specified in https but there appears to be no effect.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7164
Server-side full-stream decompression · Issue #7164 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is follow on for #3403 and #3395.
Java based server is not able to receive this stream.
Server should look into "content-encoding" header to determine if it requires GzipInflatingBuffer for decompression.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7166
SDS: avoid using deprecated envoy api v2 fields  · Issue #7166 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are some usages of deprecated fields in current code base:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7168
migrating thread deframer breaks weighted_round_robin_test_cpp_java · Issue #7168 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MigratingThreadDeframer is disabled in OkHttp via #7167. We believe the disabled code pass improved the performance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7171
services:reflection should export its java_proto dependency · Issue #7171 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here's the current definition of //services:reflection:
It depends on services:_reflection_java_grpc, which is private. However, the generated service exposes those private symbols as part of its public API:
As a result, IntelliJ for example complains about ProtoReflectionService not being fully defined because its supertype isn't accessible as a dependency. Is there a reason why this _reflection_java_grpc target is neither public nor exported? (The same is likely true for _channelz_java_grpc and _health_java_grpc in the same package.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7178
How to consume metadata headers in the actual call? · Issue #7178 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the header example server, but the header isn't used in the service, just in the interceptor.
There's no information in the docs. My use case includes passing authorization + device-uuid headers
to the grpc calls.
In go/python and other grpc implementations the headers reside in Context which is passed as a parameter to the call.
Any help will be appreciated!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7179
Make io.grpc.protobuf.StatusProto available for javalite · Issue #7179 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to use io.grpc.protobuf.StatusProto and associated status.proto and com.google.rpc.Status with javalite. I believe the only way to do this right now requires copying io.grpc.protobuf.StatusProto.java and status.proto into my project. This is undesirable as it requires regular manual updates and risks versions going out of sync, and it introduces java code into my pure Kotlin project.
Edit: Perhaps creating a fat jar would work as well, but even if so, it would seem a worse approach than the manual copying route.
An old workaround protobufing grpc-google-common-protos is no longer usable with Android R8 minified builds:
Related issues, locked to comments and clarification requests:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7180
Decrease minimum allowed keepalive time interval · Issue #7180 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently there is a limitation on the minimum value that can be set as keepalive time, defined in KeepAliveManager.MIN_KEEPALIVE_TIME_NANOS with 10 seconds.
The rationale behind the minimum limitation is probably to allow a high number of connections and throughput without creating too much overhead.
But there are also situations where not many connections/throughput is required, but a fast response time instead.
There are already gRPC implementations that allow lower values (I'm using ETCD on server side).
I suggest to reduce KeepAliveManager.MIN_KEEPALIVE_TIME_NANOS to 1s or 10ms to allow using the full range available on server-side. Maybe instead a hard limitation just logging a warning for setting keepalive times below 10s?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7182
Received DATA frame for an unknown stream xxxxx · Issue #7182 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
oraclejdk1.8
What did you expect to see?
no unnecessary exception logs
What did you see instead?
no unnecessary exception logs
Steps to reproduce the bug
a client-side streaming rpc such as:
when I closed stream on server side, client-side reacted obClient.onCompleted(). And then server-side print a excption:
Maybe this is the case its also possible that this frame is received on a CLOSED stream.
In addition, if I don't do obClient.onCompleted(), there will be a memory leak.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7186
Android Java (grpc-java) client fails to connect to go server  · Issue #7186 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC and what language are you using?
What operating system (Linux, Windows,...) and version?
MacOS Catalina 10.15.15
What runtime / compiler are you using (e.g. python version or version of gcc)
java 8
What did you do?
Trying to connect to go grpc server, on the same network, for swift grpc it works but for android no.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7189
`AbstractInteropTest.deadlineExceeded()` flaky · Issue #7189 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
.. because a client call can expire even before sending any request, especially in a busy machine.
What did you see instead?
The failure occurs in a slow or crowded machine, such as a public cloud CI server.
Steps to reproduce the bug
Run an interop test against it.
Find the sporadic failure of deadlineExceeded() where the failure occurs even before the call reaches at the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7192
ManagedChannel#enterIdle does not respect its documentation/javadoc · Issue #7192 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux (RHEL 7.6), Red Hat OpenJDK JRE 1.8.0.252
What did you expect to see?
The javadoc of ManagedChannel#enterIdle says:
Invoking this method moves the channel into the IDLE state and triggers tear-down of the
channel's name resolver and load balancer, while still allowing on-going RPCs on the channel to
continue. New RPCs on the channel will trigger creation of a new connection.
So I was expecting that if I do a RPC using the channel and then I am executing ManagedChannel#enterIdle while the call is still on-going, the channel would still go in idle mode.
What did you see instead?
The channel does not go in idle mode.
This is due to this fix: #4630 (enterIdleMode() exits idle if still in use)
Steps to reproduce the bug
Execute a RPC call with a long deadline and then trigger enterIdle() on the channel while the call is still on-going. Check the state of the channel afterwards.
Comments
I understand #4630 that it may be not possible to allow on-going RPCs without hitting some nasty race conditions. If so, I think then the javadoc of  ManagedChannel#enterIdle should be corrected to describe exactly the behavior because today it is at least very misleading (if not wrong).
Thank you for all the good work on gRPC-java !
Kind regards,
Vincent
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7193
Help！！！！HTTP Request specified an invalid port number. · Issue #7193 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7199
Support SslMasterKeyHandler in NettyServerBuilder · Issue #7199 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a problem with adding SslMasterKeyHandler#newWireSharkSslMasterKeyHandler on the server side. I tried to do this with channelFactory:
and later with ProtocolNegotiator:
In the first case, the setting had no effect. In the second case, the server worked incorrectly (it stopped accepting connections, even without a handler, just with a negotiator wrapper).
What should be the proper implementation?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7201
Failed ALPN negotiation: Unable to find compatible protocol · Issue #7201 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Java - 9.0.4
Spring Boot - 2.3.1.RELEASE
What did you expect to see?
I created a simple Spring Boot project to call my Dialog Flow agent.
I am working from behind my companies firewall.
When I ran my application from InteliJ I was expecting to see the response back from DialogFlow.
What did you see instead?
However when i ran my application I saw the below error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7208
grpc-okhttp gets gRPC response slowly when request/response are large · Issue #7208 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
grpc-java version 1.27.0
What is your environment?
Android, API version 24
Linux, OpenJDK Runtime Environment (build 1.8.0_242-b08)
What did you expect to see?
I use gRPC to upload large amount of data (10 Mb) to server and receive same data back. I expect that request and response will be delivered to and from server in same time taking into account network connection throughput is symmetric.
What did you see instead?
Response is delivered from service by 8 times slower when okhttp is used. Moreover delay ratio depends on message size. With netty both request and response take similar time.
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7211
Hide AbstractManagedChannelImplBuilder from public API · Issue #7211 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Transport implementations extend io.grpc.internal.AbstractManagedChannelImplBuilder to obtain most of their builder implementations. However, this leaks to the user in the Javadoc and with an api dependency in Gradle. The Javadoc in particular is a confusing mess because it isn't clear what is stable, experimental, and internal. Since we don't generate io.grpc.internal Javadoc and since the extending class "shadows" the base ManagedChannelBuilder, it also means the user is unable to click links to get to documentation for a large number of its methods. We should avoid extending AbstractManagedChannelImplBuilder in public (non-internal) classes.
To do this, we should extend ForwardingChannelBuilder instead (probably extending the Simple* version, which would need to be created). Transport implementations would create a AbstractManagedChannelImplBuilder and forward to it. We don't want to remove (useful) public methods in this process and break users, so we should make sure that there aren't any stray public methods in AbstractManagedChannelImplBuilder that would be dropped in the process.
The only abstract method in AbstractManagedChannelImplBuilder is buildTransportFactory(). We should probably inject that method in the constructor and convert the class to concrete, non-abstract. To simplify migration we can create ManagedChannelImplBuilder as a shim on top of AbstractManagedChannelImplBuilder. The shim could override some protected methods and make them public. It can also provide a setter for the checkAuthority override used by things like NettyChannelBuilder. Once all classes (external and internal) are migrated we can remove AbstractManagedChannelImplBuilder and combine it with the shim. If some classes still extend ManagedChannelImplBuilder that may be okay, but we should try to avoid such inheritance if possible.
The same should be done for AbstractServerImplBuilder.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7212
GRPC - SSL authentication-not connecting to the server eventhough there is no error while debugging · Issue #7212 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello all,
I want to make a SSL connection to a remote C++ server. I have three files for making the SSL connection using C++ client.
There is also example documentation(in GRPC) for making the connection between c++ server and c++ client. So, if i make the connection, it works perfectly.
Now that I want to use the android client. So, now I have three files for the android client.
So, I have used the following SSLfactory for assigning the certificates and keys to the trustmanager and keymanager.
And I have used
ManagedChannel channel = OkHttpChannelBuilder.forAddress(Host,Port).sslSocketFactory(getSslSocketFactory()).build();
for building the channel. I am pretty sure that I have added the client and CA certificates correctly. But I am not sure whether I am doing it correctly for adding client key.
I have also added the CA certificates in my android phone where I am testing the android application. Still it is not making the SSL connection and does not provide the respone from the server. Any help would be appreciated. Thank you in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7216
How to get a notification in server side when a connected client disconnected · Issue #7216 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi All,I am using gRPC-java to build  a Long Connection framework between client and server ,Now I want to get a notification in server side  when a  connected client disconnected ,then I can do something related to the client .
I have searched  in internet several days  , but I have not get any effective results.
Has anyone has the same question and could get me some instructions ?
Best regards.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7217
'./gradlew build' fails because of missing plugin dependency · Issue #7217 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When aopalliance is not already in the cache, I get:
Adding maven central to the plugin repo's in settings.gradle solves the problem. I'd be happy to PR, but I'm not sure if that's the 'right' solution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7218
benchmark scripts use incomplete classpath · Issue #7218 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since 0044f8c the benchmar no longer include the dependencies on the generated classpath, so for example benchmarks/build/install/grpc-benchmarks/bin/qps_server fails with a java.lang.NoClassDefFoundError: io/netty/channel/EventLoopGroup.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7222
RPC call stuck and eventually throws DEADLINE_EXEEDED if hedging attempts got throttled. · Issue #7222 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First hedging attempt hits the concurrency limit on the server and immediately returns status UNAVAILABLE
Error rate is above a threshold and client side retry throttling prevents additional retries
Client call hangs until it hits DEADLINE_EXCEEDED.
What version of gRPC-Java are you using?
What is your environment?
Linux, Mac OS, java 11
What did you expect to see?
What did you see instead?
Below is the log output from modified io.grpc.examples.hedging.HedgingHelloWorldClient
Steps to reproduce the bug
I was able to reproduce this bug by modifying hedging example:
Added ClientInterceptor and ClientStreamTracer to io.grpc.examples.hedging.HedgingHelloWorldClient to log returned statuses,
modified io.grpc.examples.hedging.HedgingHelloWorldServer to randomly close call with status UNAVAILABLE,
After running the modified example, search DEADLINE_EXCEEDED in the log and look at other logs having the same callId.
I my log example above you can see first attempt finished with status UNAVAILABLE in 4 ms and call finished with status
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7223
ProtocolNegotiators bypass SslContext.newHandler · Issue #7223 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This prevents any ability for subclasses of SslContext to provide custom or wrapped SslHandlers.
Instead, call the appropriate sslContext.newBuilder methods.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7228
Ability to create a CallContext with retry settings · Issue #7228 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
In googleapis/java-spanner, we're investigating the possibility of letting users set per-request timeout and retry settings.
Currently, the timeouts and retry settings are set at the time of client creation when the UnaryCallable is created (example). If we want to specify per-request timeouts, you can pass in something like CallContext.withCallOptions(CallOptions.withDeadline()) to the RPC call. But there is no equivalent option for retry settings.
Describe the solution you'd like
If CallContext or CallOptions includes a withRetrySettings() method, then this can be accomplished.
Describe alternatives you've considered
The only solution we have right now is to ask the customer to create multiple clients where each client has different retry settings set. But this doesn't resolve all use cases because some customers have requested the ability to programatically change the retry setting in their applications. Instantiating and managing multiple clients can be tedious.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7229
com.google.common.base.Suppliers$NonSerializableMemoizingSupplier cannot be cast to java.util.function.Supplier when using Grpc in Gradle plugin for Android app · Issue #7229 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Arch Linux, JDK version 1.8.0_242, Gradle 5.4.1, Android API 24+
What did you expect to see?
I wrote custom Gradle plugin which uses grpc-protobuf 1.28.0 as a dependency. I use this plugin to build an Android application so both my plugin and com.android.application are used at the same time. I expect my application will be built successfully.
What did you see instead?
Build fails with error:
A problem occurred evaluating project ':app'.
Steps to reproduce the bug
Add the following line into buildscript/dependencies section of the top level gradle.build
For example clone any simple android app:
The root cause seems to be grpc-protobuf uses com.google.guava:guava:28.1-android as dependency see pom. Android version of Guava Supplier class doesn't inherit java.util.function.Supplier I believe because it is not compatible to Android API below 21. When grpc-protobuf is used as dependency in Gradle plugin Gradle resolves guava to android version instead of jre one and it conflicts with requirements of Gradle Android plugin.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7236
Http2 exception while connecting gRPC server running on cloud  · Issue #7236 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
java.version: 1.8
What is your environment?
Linux  operating system
Currently gRPC server is running on cloud using a docker image openjdk:8-jre-alpine on port 9090
gRPC Client is running on my machine currently and trying to connect to server using plaintext.
What did you expect to see?
Response from cloud GRPC server based on proto response object
What did you see instead?
I see following exception:
Caused by: io.netty.handler.codec.http2.Http2Exception: First received frame was not SETTINGS. Hex dump for first 5 bytes: 485454502f
Steps to reproduce the bug
Both gRPC server and client  either locally and running on cloud then it works, just fails when accessing from local to Azure cloud using AKS.
Request started from gRPC client
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7237
gRPC keepalive read ACK message in java code and GRPC_ARG_HTTP2_MAX_PINGS_WITHOUT_DATA option · Issue #7237 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have TCP connections open for very long durations. I have enabled the keepalive on client side to detect the server disconnect scenario.
I have enabled
1) Is their way to read the keepalive acknowledgement message in java code of gRPC?
2) The channel are ideal for long time without data, I am trying to set the GRPC_ARG_HTTP2_MAX_PINGS_WITHOUT_DATA to 0 in java. I am not finding a way to do it. Can you please suggest?
default value mentioned is 2
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7238
How do you tell the difference between various INTERNAL errors? · Issue #7238 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context:
I'm working on an Android app which connects to a server with a GRPC stream. The server periodically will send RST_STREAM, resulting in io.grpc.stub.StreamObserver.onError being called in my stream response observer.
When calling io.grpc.Status.fromThrowable(cause) and inspecting the resulting Status object, I can see the following Status object:
We need to be able to tell apart from other INTERNAL errors, but it appears the only way to know it was caused specifically by RST_STREAM coming through is by looking at the description field provided.
Question:
Is there any way that we would be able to tell the difference between a RST_STREAM triggered INTERNAL error, and any other INTERNAL error in a way which isn't checking the description string contains "Rst Stream"?
If not, is there any chance that this sort of detail is exposed somehow to users of this library?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7244
Drop support for Android levels 14 and 15 · Issue #7244 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We follow Google Play Services support, as it provides much-needed TLS upgrades and provides a good "temperature" of what versions may be worth supporting. A year and a half ago it dropped support for API levels 14 and 15. We should follow suit.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7248
TLS handshake fails when using client certificate and OkHttpChannelBuilder · Issue #7248 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi I am using OkHttpChannelBuilder and sslSocketFactory with client certificate for mutual TLS authentication. From wireshark i can see server send Certificate Request but Client responds with a certificate of size 0.
My Client Certificate is store is KeyStore and I can verify Client Certificate CN is same as DN in Server Certificate Request.
I am using grpc 1.30.2 on Android 9 and 10.
My basic question is if OkHttpChannelBuilder supports sending client certificate with cutom trust manager?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7249
AbstractClientStream - Received data on closed stream  · Issue #7249 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is happening for large volume of single message and i am using Spring GCP Pubsub as a client application
Request to please let me know what needs to be done to rectify this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7252
Synchronous grpc C++ server and asynchronous grpc java client for bidirectional streaming RPC · Issue #7252 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello all,
In my application, I had to use bidirectional streaming RPC. My teammate has implemented synchronous API (for C++ server) on the server side. On the client side also, he has used synchronous API for bidirectional streaming in C++.
Now, I have to do that for android client. But I have read that, android client does not support synchronous method for bidirectional streaming. So, I am using asynchronous android client with synchronous c++ server. How does it affect the performance?
As far as now, I can see some of the responses are missing from the server when I call the RPC continuously. Is it because of the mismatch between the methods used by the client(android-asynchronous) and server(C++ synchronous)? Or is is related to some other problem? I would need your valuable suggestions
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7261
How to get a client response  when using StreamObserver to push a message to client at server · Issue #7261 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context:
I'm using grpc's StreamObserver to push data from the server to the client. I found that StreamObserver#onNext has no return value, so I can't know whether the client has successfully processed the message.
Question:
I hope the server can sense whether the client has  successfully processed the message. If some exception throw in client , the server needs to try again. Is there a way to achieve this function through gRPC java？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7263
xxxClient error:  io.grpc.StatusRuntimeException: UNIMPLEMENTED: Method not found! · Issue #7263 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
I already know that the remote server is available。but I can't find the error answer。
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7268
Alts on Android · Issue #7268 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have an application with client on Android and gRPC communication to backend. My backend runs on VM in Compute Engine. When I am trying to use alts builder I am getting 'ALTS is only allowed to run on Google Cloud Platform' error on client.
What version of gRPC-Java are you using?
1.30.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7269
How to pass custom variables inside a single grpc request · Issue #7269 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How to pass custom variables inside a single grpc request, like RequestContextHolder in SpringMVC, and make sure that the scope of these values is restricted to this request?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7270
Migrate compiler to cpp-application Gradle plugin · Issue #7270 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The cpp-application plugin is now stable:
It replaces the earlier 'cpp' plugin which we are using:
The cpp plugin will be removed; we should migrate away from it before it is.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7276
Android example: use Maven Central as fall back · Issue #7276 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This was discussed out-of-band with @ejona86. We'd like to be able to advertise the latest grpc-java version on grpc.io, as soon as the version is released (e.g., grpc/grpc.io#374). We can't do that right now because of the Android-Java examples depending solely on JCenter; an issue which we hit before (grpc/grpc.io#317, grpc/grpc.io#318).
More context: grpc/grpc.io#374 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7279
Upgrade netty to 4.1.51.Final · Issue #7279 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
We're trying to use Google Secret Manager and its corresponding Java library in a micronaut project, and when trying to compile it to a native image using GraalVM, running into issues regarding GenericJson, which when worked around, results in errors related to grpc and grpc-netty-shaded
Describe the solution you'd like
mentions some changes to accommodate openssl and GraalVM
I believe upgrading the netty version that grpc is using should help alleviate the issues I'm running into.
Describe alternatives you've considered
Additional context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7281
gRPC - Circuit Breaker recommendations · Issue #7281 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi Team,
We are currently building a service that uses grpc as transport protocol.
As part of it we are planning to have a circuit breaker for grpc client
we would like to know if there are any recommendations around building/using circuit breaker library/framework that can be consumed by grpc client?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7286
grpc-okhttp/grpc-netty gets gRPC response slowly from grpc android server · Issue #7286 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
grpc-java version 1.27.0~1.31.0
What is your environment?
Android, API version 25
Android okhttp/netty client
Android netty server
What did you expect to see?
I use grpc-netty  client and server in the same android phone/emulator but different processes，I think a request & reponse should not take more than 5 ms.
What did you see instead?
A small request & response takes an average of 20ms, change the client channel to okhttp does not help.
Steps to reproduce the bug
just use the Helloworld demo(server stream)
android grpc-netty server response the request immediately and call onCompleted
client receive the onCompleted call but takes 20 ms after request sended
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7289
Mesh CA proto is not shaded · Issue #7289 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed google.security.meshca.v1 in the build output, which is weird because it should be com.google; there was missing java_package and java_mulitple_files=true in the proto file. This was a tell-tale sign that the proto had not been used from Java before.
However, since it was in XDS, that is "okay" because all generated code in xds should be shaded and internal. However, looking at the configuration in xds/build.gradle it does not appear the google.security package is shaded.
It appears this leaking of generated code made it into v1.31.0. We should fix the shading and backport it to v1.31.x.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7297
`rules_proto_grpc` Bazel rules fail to compile with Bazel 3.4.1 due to errorprone GuardedBy failures. · Issue #7297 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.24.x
What is your environment?
Windows, but should fail on all OSs.
What did you expect to see?
The GRPC rules consume io_grpc_grpc_java at 62e8655, which doesn't contain change d3c77f2. As such, newer versions of Bazel fail to compile GRPC due to GuardedBy static analysis failures in errorprone, and thus the rules are worthless.
I attempted to simply upgrade the version they were using to 1.25.x, but this caused other failures.
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7307
java.lang.NullPointerException at NettyServerHandler.java:486 using nodejs client · Issue #7307 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
ubuntu, java 1.8
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7308
RetriableStream only retries error on first call · Issue #7308 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
MacOS, 10.15
What did you expect to see?
A client can have a channel to a server and make multiple calls for a call type which is retryable. For a transient error, such as UNAVAILABLE any of these calls could fail - the first, the second, the third - and should be retried.
What did you see instead?
Retry occurs if the first call returns UNAVAILABLE.
Retry does not occur if the first call succeeds and the second call gets UNAVAILABLE.
Steps to reproduce the bug
I think this line is to blame, https:
If the first call fails, when closed(Status, RpcProgress, Metadata) is called, state.winningSubstream is null and it will be RpcProgress.PROCESSED, resulting in a call to makeRetryDecision(status, trailers).
If the second or subsequent call fails, state.winningSubstream is not null, and the retry logic is bypassed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7310
MaxInboundMessageSize doesn't seem to be applied · Issue #7310 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
GRPC 1.24.0
What is your environment?
Docker image: openjdk:8-jre
What did you expect to see?
I expected the maxInboundMessageSize to be much higher than the default of 4MB when we set the following:
What did you see instead?
Steps to reproduce the bug
This is happening in one of our deployed services.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7318
Error-prone warnings in MeshCaCertificateProviderTest.java · Issue #7318 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reported in the import CL on all mock(ScheduledFuture.class) occurrences. The warnings reads:
Do not mock 'java.util.concurrent.ScheduledFuture' (which
Future factory methods instead, a SettableFuture, or a real ExecutorService or FakeScheduledExecutorService.
Mocked Futures don't properly implement the interface contract of Future.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7321
gRPC - ContentSubType Support · Issue #7321 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I find that grpc-go support registering a custom codec and specifying a contentSubType when making a call.
Is it possible we support this feature in grpc-java so users can use custom serializers?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7324
Upgraded embededd OkHttp library to latest version, 3.14.9 · Issue #7324 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Not necessarily a problem, but the app I work in uses Retrofit, which as of creating this PR uses version 3.14.9 of OkHttp:
Describe the solution you'd like
I'd like to see if upgrading grpc-java's version of OkHttp to 3.14.9 causes any breaking changes.
Describe alternatives you've considered
I've excluded the embedded version of OkHttp that grpc-okhttp brings in, but it was requested of me to try and get the library aka grpc-java to upgrade internally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7329
io.grpc.StatusRuntimeException: UNKNOWN: Exception calling application: string is too large · Issue #7329 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I use BlockingStub call two operations and then close。
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7334
xception in thread "main" java.lang.NoSuchMethodError: io.grpc.ManagedChannelBuilder.usePlaintext()Lio/grpc/ManagedChannelBuilder; · Issue #7334 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I run test, the program does not report an error. When I build the plug-in into another project and use it, I get the following error
This is my code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7336
Intermitent errors under load: INTERNAL: Invalid protobuf byte sequence · Issue #7336 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Under a load test, I'm seeing the errors below, with the grpc-java.  There is a single service RPC that has bi-directional streams. The errors only occur under load.
#5997 and others appeared similar, but as far as I can tell I'm synronizing access to the streamObservers.  And this is observed, (only I think) when the message is coming from the server.. not when the response is going back.
What version of gRPC-Java are you using?
What is your environment?
Also sometimes
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7345
How to retry with new auth token using builtin retry? · Issue #7345 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My requirement is similar to #6638 and #5856, but on JVM, not Android. I want to retry a bidi streaming call with a new auth token if the server responds with a particular status. In both of the aforementioned tickets, an interceptor option was discussed, but this comment also mentions using the builtin retry with ClientStreamTracer that was never elaborated on. I'd like to get some details on using the builtin retry with ClientStreamTracer option.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7348
An `alts` release built with JDK 9+ wouldn't work under Java 7 or 8 · Issue #7348 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From #6829 (comment), I gather that your process may be to build releases with JDK 8. If so, then this is more about convenience for anyone else who might do a local build. (Compare #6839, which dealt with similar calls in core.)
My attempt to turn up other such calls shows some in alts:
Still, after a bad protobuf release (protocolbuffers/protobuf#7827) and a near miss with Guava (google/guava#3994), I figured it was worth bringing this up again in case you want to take additional measures.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7351
NioEventLoop - Unexpected exception in the selector loop. java.io.IOException: Invalid argument · Issue #7351 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.13'
What is your environment?
macOS 10.15.6 (19G73)
What did you expect to see?
Either no exception or exception that makes sense to the library consumer.
What did you see instead?
Steps to reproduce the bug
I'm able to reproduce it reliably running an integration test for my project. It the problem is not obvious I can give instructions on executing it in your environment.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7357
netty: INTERNAL error if GOAWAY is not a graceful shutdown · Issue #7357 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported by a user. This seems like a bug introduced in #6918
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7360
animal sniffer does not catch ByteBuffer's usages that break in Java 8 when compiled with Java 9+ · Issue #7360 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Originally reported in #7348. Existing usages are manually fixed by #7349. But we'd want to prevent this happens in the future.
Java 9 introduces overridden methods with covariant return types for the following methods in java.nio.ByteBuffer:
In Java 9 they all now return ByteBuffer, whereas the methods they override return Buffer, resulting in exceptions like this when executing on Java 8 and lower:
java.lang.NoSuchMethodError: java.nio.ByteBuffer.limit(I)Ljava/nio/ByteBuffer
This is because the generated byte code includes the static return type of the method, which is not found on Java 8 and lower because the overloaded methods with covariant return types don't exist (the issue appears even with source and target 8 or lower in compilation parameters). The solution is to cast ByteBuffer instances to Buffer before calling the method.
We'd expect animal sniffer to catch usages that could potentially break Java 8 users.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7361
Observer setOnReadyHandler semantics wrt GRPC thread · Issue #7361 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've got a situation where I think I'm using the observer setOnReadyHandler correctly, but may be running into potential concurrency issues due to running on the GRPC thread.
If execute() is run on the GRPC thread, it gets stuck on the second call to waitForReady(). It works correctly if executing on a new thread. For testing, I'm using the default and not the direct executor, since waitForReady() is a blocking op.
I've got a full test rig setup. https:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7363
more questions on GRPC retry · Issue #7363 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-java version 1.31.0
If it works I have two questions:
Do I need to make a service config or simply add the enableRetry() option can work as well?
How do I view the logs of the retry if a retry is being invoked? (do I need to add an interceptor to capture the logs)
Is the retry included in the scope of withDeadlineAfter or it will reset the deadline?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7372
Delay in processing request and sending response under load · Issue #7372 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am running a performance test on my unary gRPC server using GHZ, under load about 100K request the response time is high(about 1s to 1.5s) for initial few thousand requests.
After some debugging what I am observing is that there is a delay of about 500ms between the end of server interceptor and invocation of the gRPC service method, and about 500ms delay between the end of service method and invocation of SimpleForwardingServerCallListener.onComplete.
Please let me know if the question is vague or you need more information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7373
Throwing an exception from some StreamTracer methods hangs the RPC · Issue #7373 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
If a client-implemented ClientStreamTracer method throws an exception, the RPC should fail.
What did you see instead?
The RPC never completes (blocks forever or the future never completes, depending on stub type).
Steps to reproduce the bug
I was able to reproduce this bug with both the InProcessChannel and Cronet transport implementations.
From grpc's GrpcServerRuleTest:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7376
Unexpected exception: `io.grpc.StatusRuntimeException: UNKNOWN: channel closed` · Issue #7376 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
io.grpc.StatusRuntimeException: UNKNOWN: channel closed
Steps to reproduce the bug
This happens before the exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7377
Lack of compat with grpc-web due to lack of HTTP 1.x support · Issue #7377 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is currently a stalemate between grpc-java and grpc-web around use of HTTP 1.x.
Could you fix it in this repo? It doesn't seem like the other project in this organization plans to fix this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7381
Change Default Thread Executor of the Server · Issue #7381 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the default Thread Executor defined for the gRPC Server is Cached. This executor is known for being extremely slow, even when compared to a Single Thread executor.
Since developers are more likely to build a gRPC server following default configuration, many who do not tweak their servers will assume that a Java implementation of the gRPC Server cannot perform well.
Therefore, I'd like to first ask for the reason behind choosing this executor type instead of other options available.
Secondly, given that developers are most likely not going to benchmark the different executors, I'd like to propose to switch to a Fixed executor, with the number of threads based on the number of availableProcessors() for the JVM.
Third, if we agree that there is certainly no need for the default behavior to guarantee the order in which requests are submitted, and that this is how other implementations are also doing it, then we should consider WorkStealing.
Lastly, if we cannot agree in changing the default Thread Executor, I'd like to then propose that we make the ServerBuilder require user to indicate a Thread Executor, therefore not having a default.
In this benchmark with a 2 CPU server and a 6 CPU client (ghz; 5 connections; 50 concurrency requests), we can easily see how every other thread executor is nearly, or more than, 2x as faster as the Cached executor:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7384
How to make use of all the CPU cores? · Issue #7384 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have a question. I have a simple client/server application with grpc-java which just works fine! My concern is, It never seems to use more than 30% of the CPU even under high load! I just use a managed channel builder to create a channel and stub as shown here. How to make use of all the CPU cores? Both client and server runs on the same machine. (ExecutorService with more threads does not seem to help!).
My client side code is more or less like this.
As I have a single channel between client and server in the above example, I also tried creating multiple channels (4 channels) assuming that would help!
No luck.
Can you suggest what needs to be done to make use of all the cores?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7385
gRPC Netty with TLS failing on Android API < 24 · Issue #7385 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
The current latest: 1.31.1, although it's probably present in earlier versions.
What is your environment?
Android
What did you expect to see?
Being able to use NettyChannelBuilder with TLS negotiation type on Android devices with API levels 16+.
What did you see instead?
The client crashes with the following error on Android devices under API 24:
SSLParameters#setEndpointIdentificationAlgorithm is only available in Android 24+.
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7387
Interfaces for supporting zero copy into Protobuf (HasByteBuffer & Detachable) · Issue #7387 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
APIs for supporting zero-copy protobuf deserialization from ByteBuffers to protobuf messages. The marshaller can wrap ByteBuffer as ByteSting with UnsafeByteOperations, concatenate ByteStrings into a single RopeByteString and then create a CodedInputStream from it.
New interfaces for the inbound InputStream to allow the marshaller:
HasByteBuffer: access the underlying ByteBuffers directly without copying bytes
Detachable: keep the ByteBuffers around until the application code is done with using the protobuf messages.
More details and an example marshaller implementation can be seen in #8102 (comment).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7388
How to skip host name validation with the OkHTTP channel · Issue #7388 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm porting my gRPC client from the Netty channel to OkHTTP so I can use it on Android. This client is connecting to a gRPC server over TLS, but the server is on a private network and uses a self-signed certificate. In Netty, I can do the following have the host name verification disabled:
That'll give me an SSL context that I can pass to NettyChannelBuilder.forAddress(...).useTransportSecurity()..sslContext(insecureTlsContext). How can I do something like this with the OkHTTP channel?
I've managed to get something to work by cheating and using Netty's InsecureTrustManagerFactory.INSTANCE, but it doesn't make sense to have the Netty channel as a dependency just for this. Also, I read on SECURITY.md that it's a bad idea to have both.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7393
Tracking issue for ForwardingServerBuilder being experimental · Issue #7393 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7397
Is there a way to configure NettyServerBuilder with SniHandler? · Issue #7397 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is it possible to configure io.grpc.netty.NettyServerBuilder with io.netty.handler.ssl.SniHandler for Server Name Indication capabilities of a gRPC server?
I would like to use SNI to switch the server certificates used based on the host name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7398
Add SOCKS proxy support · Issue #7398 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
I'm unable to leverage network privacy using gRPC.
Describe the solution you'd like
As a developer on the cutting edge of privacy technology, which is surging in popularity lately, I'd like to use gRPC with SOCKS5 proxies in order to privately connect with servers without revealing my private information, like IP, to the server. Ideally, using gRPC would not result in the leakage of other private information like the timing of communication, and data about the graph of who is communicating.
TL;DR: privacy is a big deal and increasingly more relevant. It's a good time for gRPC to be more compatible with SOCKS proxies.
Describe alternatives you've considered
gRPC doesn't work with the common alternative for network privacy: Tor.
Additional context
This topic was mentioned many times 4 years ago but times have changed and it is probably worthwhile to revisit those decisions. Major advances are happening in the area of network privacy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7404
libio_grpc_netty_shaded_netty_tcnative_osx_x86_64.jnilib not signed · Issue #7404 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
macOS
What did you expect to see?
The file grpc-netty-shaded-1.31.1.jar/META-INF/native/libio_grpc_netty_shaded_netty_tcnative_osx_x86_64.jnilib being signed.
What did you see instead?
That it's not signed.
Steps to reproduce the bug
Submit a package to Apple for Notarization containing grpc-netty-shaded-1.31.1.jar. The Notarization process will fail, with the following being reported:
I've worked around this by extracting the libio_grpc_netty_shaded_netty_tcnative_osx_x86_64.jnilib out of the jar, signing it, then replacing it in the jar before sending off to Apple. I think ideally the binary should be signed as part of the build phase of the
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7409
NO_ERROR · Issue #7409 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
code is
error is :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7410
Cleanup ManagedChannelImpl shutdown/shutdownNow flow · Issue #7410 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of ManagedChannelImpl shutdown/shutdownNow flow evolved into a mess after a sequence of features being added, typically the retry (ManagedChannelImpl.uncommittedRetriableStreamRegistry) and ConfigSelector (ManagedChannelImpl.pendingCalls). This needs some cleanup.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7415
How to pass a header to a CallCredentials?  · Issue #7415 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've a CallCredentials that uses a header value to do a look up in the DB, and then apply the result as an extra header.
Since CallCredentials doesn't have access to metadata, I wrote a ClientInterceptor; in ForwardingClientCall.start, I get the header value and copy it to the Context.
In the CallCredentials, I get the value set before.
However, this is coming out as null.
My questions:
Why does the above not work? I can confirm that both the ClientInterceptor and the CallCredentials are running on the same thread. However, I've noticed that the Context object id changes.
Even though MetadataApplier doesn't have public access to the headers, MetadataApplierImpl does as field origHeaders. The latter isn't a public class, so there's no way to get the headers without reflection trickery.
There's a Contexts.interceptCall method meant for intercepting a ServerCall with a Context parameter; why is there no equivalent method for intercepting a ClientCall?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7421
Exception while executing runnable io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed@7c7357a4 java.lang.NullPointerException · Issue #7421 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7429
Export detailed metrics via OpenTelemetry · Issue #7429 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
OpenTelemetry is the official successor to OpenCensus. But grpc-java does not expose metrics in an OpenTelemetry-compatible way.
Describe the solution you'd like
It would be nice if the detailed metrics currently exposed via OpenCensus were exposed in an OpenTelemetry-compatible way.
Describe alternatives you've considered
Setting up an OpenCensus-based metrics pipeline just for grpc-java -- certainly possible, but runs counter to the idea of unifying metrics and tracing under the OpenTelemetry umbrella.
Additional context
Given that OpenTelemetry is the official successor to OpenCensus, I tried to figure out if OpenTelemetry is OpenCensus-compatible, but couldn't find relevant documentation. It is possible that this is the case and that OpenTelemetry support is a no-op as a result.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7430
Upgrade Netty to 4.1.52+ · Issue #7430 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've seen test failures when upgrading to Netty 4.1.52. It seems likely related to TLSv1.3. This test was run on Java 11. TlsTest.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7431
Support TLS 1.3 for okhttp transport · Issue #7431 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our current okhttp version (2.7.4 Feb 2016) does not support TLS 1.3
Okhttp3 supports that. Since we don't have a short-term plan for upgrading to okhttp3, we may consider adding TLS 1.3 support to our existing okhttp transport.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7435
LoadBalancer.requestConnection() may be ignored if it's called before subchannels are created · Issue #7435 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What did you expect to see?
Calling ManagedChannel.getState(true) will make the channel to try to connect to the server at least once, no matter when it's called.
What did you see instead?
Calling ManagedChannel.getState(true) makes the channel try to connect to server only if it's called after subchannels are created, i.e., after name resolution in pick-first, and after backend addresses are received in grpclb. If getState(true) is called before that point, the channel won't try to connect to servers after subchannels are created, unless getState(true) is called again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7439
Upgrade compile/target Android SDK version to 29 · Issue #7439 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-android (currently SDK 28) uses android.net.NetworkInfo to detect network connectivity for API < 24, which has been deprecated in SDK 29. This may block us upgrading the compile SDK version.
grpc-android-interop-testing (currently SDK 26) needs some cleanup for errorprone and need to migrate android support library to AndroidX.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7442
De I need to shutdown and re-create a ManagedChannel.shutdown() for recovery from StreamObserver.onError() · Issue #7442 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey, thanks for looking this question!
In our java application, we create a ManagedChannel, and an async stub from that channel, in order to do streaming calls.
When StreamObserver.onError() is called, we did some recovery work, including:
However, according to the doc of channel:
A virtual connection to a conceptual endpoint, to perform RPCs. A channel is free to have zero or many actual connections to the endpoint based on configuration, load, etc.
And the question:
shutdown and re-create channel seems not very necessary.
My question is, when StreamObserver.onError() is invoked, are step 1,2,3  needed for the recovery? or We can reuse the the channel and stub, just need step 4 to re-create the StreamObserver, which means starting a new RPC on a previously opened channel by re-creating a StreamObserver ?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7449
De I need to shutdown and re-create a ManagedChannel.shutdown() for recovery from StreamObserver.onError()  · Issue #7449 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey there! Thanks for looking at this question!
This is a follow up question from #7442
I wonder if there were cases where ManagedChannel should be recreated. Or ManagedChannel is totally self-recoverable, ManagedChannel.resetConnectBackoff() is enough for the recover task upon network jitters ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7456
Make backoff policy in AbstractManagedChannelImplBuilder and subclasses customizable · Issue #7456 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently AbstractManagedChannelImplBuilder.build() method creates backoff policy with default values:
This makes it impossible to configure backoff policy when using sub-classes such as NettyChannelBuilder.
Ideally we should be able to customize backoff policy on each builder implementation (NettyChannelBuilder is the one that I specifically care about at the moment) and use default policy if custom value hasn't been provided.
Please let me know if there are any other ways of configuring this policy or if I'm missing something.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7462
how to cancel a subscribe · Issue #7462 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7463
Multiple gRPC servers within the same application and towards the same host interfere with each other? · Issue #7463 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Settings:
Two identical grpc servers on the same machine within the same JVM (It's a local simulation for a cluster). They are binded to different ports.
When a request towards the server A is issued, everything is fine. When a trying to build a channel towards B, gRPC complains about the channel used for A to not being closed.
The request done towards A is a stream requests, so it is supposed to be still working.
The code used for creating the two different channels:
What version of gRPC-Java are you using?
What is your environment?
OpenJDK Runtime Environment (build 15+36-1562)
OpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing)
What did you expect to see?
No errors
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7464
How do I use CronetChannelBuilder with localhost (i.e. plaintext)? · Issue #7464 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems like CronetChannelBuilder doesn't support plaintext channel right?
How do I test it with non-ssl localhost server?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7465
What is the correct Kubernetes health status for channel state TRANSIENT_FAILURE? · Issue #7465 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Javadoc states:
Channels in this state will eventually switch to the CONNECTING state and try to establish a connection again.
Which of Kubernetes liveness and readiness check does this map to? I believe the application is alive but not accepting requests, not down, but I can see someone arguing the other way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7467
JUnit ExpectedException is deprecated · Issue #7467 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In JUnit 4.13 ExpectedException is deprecated. The replacement, assertThrows, is Java 8-centric and would be annoying to use in the short-term. Using try+fail would increase boilerplate and would be worse than just using ExpectedException.
We can @SuppressWarnings for now, but we should swap to assertThrows (or Truth's variant) in the future once we can use Java 8 in our tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7479
ChannelCredentials is experimental · Issue #7479 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This includes TlsChannelCredentials, InsecureChannelCredentials, CompositeChannelCredentials and many more.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7486
Build Error: This version of %1 is not compatible with the version of Windows you're running · Issue #7486 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
protoc-gen-grpc-java:1.4.0
What is your environment?
JDK 1.8
Windows 10
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7505
Include exemplars in OpenCensus instrumentation · Issue #7505 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
The OpenCensus GRPC instrumentation does not attach exemplar spans along with the distribution stats it collects.
Exemplars are example points that may be used to annotate aggregated distribution values. They are metadata that gives information about a particular value added to a Distribution bucket, such as a trace ID that was active when a value was added. They may contain further information, such as a example values and timestamps, origin, etc.
Google cloud monitoring can interpret and display these exemplars to link metrics to example spans.
Describe the solution you'd like
Add exemplars to grcp-census instrumentation directly near this code:
Adding something like this should work:
Describe alternatives you've considered
I don't think there is a way to do this without updating the grpc-census instrumentation code. AFAIK adding the exemplar to the MeasureMap directly is the only way to do it.
Additional context
I'm not sure how to get the OpenCensus Tracer for tracer.getCurrentSpan() inside of CensusStatsModule. It may also be beneficial to check if the current span is being sampled before attaching it to the MeasureMap.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7513
The different between Retry policy and Hedge Policy · Issue #7513 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have read the documentation : https: . I kind of confuse different of hedge policy and retry policy. I wonder when i enable Retry Policy if the first RPC is fail, the second will be send to the same address? Can you distinguish those two policies to help me.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7514
XdsServerBuilder is experimental · Issue #7514 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also:
XdsServerCredentials
XdsChannelCredentials
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7519
Crash due to use of getAlpnSelectedProtocol on Android 11 · Issue #7519 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.25.0
What is your environment?
Android 11, target API level 30.
What did you expect to see?
Possibility to use grpc-java in apps targeting API 30 on Android 11 devices.
What did you see instead?
Steps to reproduce the bug
Use io.grpc:grpc-okhttp:1.25 transport and issue a gRPC request in an app compiled to target API 30 on Android 11. This happens due to outdated OkHttp while it seems the graylisted getAlpnSelectedProtocol method issue was fixed in https:(more info in: square/okhttp#3980). It is not possible to force grpc-okhttp to use 3x OkHttp as there are breaking changes, it also seems that the #6119 has stalled.
I am not sure if there is any workaround to this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7520
About the size of the NettyServer thread pool · Issue #7520 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I read the size initialization code for numEventLoops in the io.grpc.netty.Utils.DefaultEventLoopGroupResource class. I understand that "io.netty.eventLoopThreads" is a property that customizes the value of numEventLoops, but System.getProperty("io.netty.eventLoopThreads") does not seem to be useful. Why is this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7524
Does nginx grpc_next_upstream support http_502 · Issue #7524 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use nginx as a proxy server of grpc server. I expect nginx server can take an upstream server as unavialble when the upstream server return a response with error code 502. However, nginx server didn't work as expected. nginx server didn't take the upstream server as unavailable, and keep sending request to it as usual.
Below is an example. A grpc client sent request to nginx server every seconds, and nginx kept sending request to the upstream server which return 502.
Does nginx grpc_next_upstream support http_502?
access log file:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7527
Protobuf-3 grpc-java : Missing method “getIdCase()” ? Classes generated with '--experimental_allow_proto3_optional · Issue #7527 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used the proto3_optional, and getting this xxCase() method missing on field that are 'optional'. Is there a workaround for this?
Generated message class "muni.model.Model$Person" missing method "getIdCase"
Caused by: java.lang.NoSuchMethodException: muni.model.Model$Person.getIdCase()
Note: I need to retain hasXX() method working for validating objects, and JsonFormat.printer(myproto) for deserializing.
Note: Not sure where this bug belongs, reported in protobuff, protocolbuffers/protobuf#7970
Proto object
Error about missing method
Error happens wherever deserializing is involved
e.g jsonprint, System.out.println(myproto).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7529
Request timeout for OkHttpChannelBuilder · Issue #7529 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, is there a way for us to set a request titmeout for OkHttpRequestBuilder?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7530
Accessing the server from inside a call in order to implement a "shutdown" rpc · Issue #7530 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
Is it possible to access the Server instance from a call handler so that it can request graceful shutdown of the server?
I would expect it to be available through the current Context, and even found the corresponding Key definition, but it turns out to be package private, and has a comment suggesting to file an issue:
Is there maybe another way to implement a "Shutdown()" rpc? I could of course resort to having a global variable holding the Server instance, which is a singleton anyway, but would very much like to avoid doing that.
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7531
How understand and resolve  kinds of GRPC Client Errors · Issue #7531 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version：
BidStream Client Code:
The code log.error("findMulti client", throwable); Sometimes print kinds of errors,but I still can't understand and resolve them even though I search any issues.
Any idea is welcomed ,thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7534
Getting grpc-netty-shaded working in a GraalVM Native Image Build? · Issue #7534 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I'm working on trying to get client libraries which depend on grpc-netty-shaded working with GraalVM native image builds with the Quarkus framework.
I've gotten to the point where I can succesfully compile an application, but at runtime I encountered an error that looks like this and am curious what conditions might cause this:
One tricky point is that Quarkus also pulls in their version of Netty. And I was wondering if grpc-netty-shaded can co-exist with another version of Netty on the classpath; I was wondering if this error might be related to this complication.
Curious if you might give some hints for what might be wrong. I.e. Are these providers discovered via reflection for example?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7536
Question about overrideAuthority and OkHttpBuilder settings · Issue #7536 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I am trying to implement a GRPC connection using swift GRPC and I run into a 401 unauthorized issue I asked for help there and they pointed me to include an http header called "authorization".
The connection to the server using GRPC-Java is done like this:
So I have two questions:
1 What exacty does ".overrideAuthority" property do?
2 In this particular case does using OkHttpBuilder include that header and if yes what would be the value on that header?
I am curious as I have little experience with networking and http and so far after researching the 401 error all I can find is setting the header to use a token but in Java the implementation did not add any token as far as I understand (There is no login on the server all I get from it is a signed csr from an earlier connection to the server)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7540
Apply package name shading to native-image config files in grpc-netty-shaded · Issue #7540 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The grpc-netty-shaded JAR provides several config files under the resources/META-INF dir:
I.e. native-image.properties and reflection-config.json in the screenshot.
Inside these config files, the library writers reference Netty package classes, and it would be very useful if these classes could also have their packages renamed during the shading process.
But it should be updated to this:
These files and settings are used by Oracle's GraalVM compiler to assist in the ahead-of-time compilation process. The original library writers added it in so that it would work with native image building.
Is your feature request related to a problem?
Yes, this will greatly contribute to the internal effort of getting Google Cloud Java client libraries compatible with GraalVM native image compilation.
There is significant user interest from Native image app developers for this feature (Quarkus, Micronaut, Spring + GraalVM).
Describe the solution you'd like
Is it possible to extend the shading process to apply package name updates to config files under META-INF/native-image/?
Describe alternatives you've considered
Users can duplicate configuration on their own manually, but this runs the risk of going out of sync with the Netty repo when changes are made.
cc/ @meltsufin
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7544
Contextualized listeners chain support · Issue #7544 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, ContextualizedServerCallListener can be built only with  ServerCall<ReqT, RespT> call,
Metadata headers and ServerCallHandler<ReqT, RespT> next parameters which are used to create the wrapped listener.
This allows to propagate context to the method implementation.
However, it's impossible to have another listener with access to the context.
Please expose ContextualizedServerCallListener to accept custom listener as the input argument :
In server interceptor :
This will allow to build contextualized chain of
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7552
Binary backwards-incompatibily in 1.33.0 · Issue #7552 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My library contains code like:
which breaks when moving from, unless recompiled (and then the new binary would not be compatible with versions < 1.33.0). This is because a class (AbstractManagedChannelImplBuilder) was removed from the direct superclass heriarchy:
Changing the direct superclass or the set of direct superinterfaces of a class type will not break compatibility with pre-existing binaries, provided that the total set of superclasses or superinterfaces, respectively, of the class type loses no members.
I know that technically netty transport is still considered experimental (per #1784), but (a) it's the primary transport and (b) it's been that way for more than 4 years.
Was this intentional/known or is it a case of "it's experimental, tough!"?
It should be easy to avoid I think by for example just adding an empty abstract class AbstractManagedChannelImplBuilder extends ForwardingChannelBuilder... maybe in a 1.33.1? :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7557
replace NettyChannelBuilder.nameResolverFactory · Issue #7557 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Grpc load balancing needs to be used, but the method nameResolverFactory() has been abandoned. How to replace it？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7558
Inconsistencies in Bidirectional Streaming Error Handling · Issue #7558 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Documentation on when and what onError() callbacks are called when receiving errors from either side (server / client), and a consistent behavior in both.
Also - a consistent error (and documentation) of using a stream after an error has been raised on it.
What did you see instead?
Multiple inconsistencies in Exception classes and whether they've even been thrown.
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7563
gRPC server instantly resets stream for requests to one API after some time · Issue #7563 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all. We are using java-grpc version 1.23.0 (EDIT: have noticed the same behavior in 1.32.2) and we are seeing some unusual behavior. After some amount of time of responding to requests normally our gRPC server will start sending OUTBOUND RST_STREAM in response to requests to only one of our APIs. The requests seems to make it to the Netty layer but never make it to our API implementation. Does anyone have an idea why this might be happening?
Some observations
This only happens to one of our microservices (in a mesh of many)
This only happens to a single API call on the server
In the logs I see error codes 5 and 8 I believe are HTTP 2 error codes for stream closed and cancel.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7566
Passing multiple --plugin args to protoc with java_grpc_library? · Issue #7566 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, we have been using java_grpc_library for a while and it works great!  We are now adding Kotlin code to our monorepo and we'd like to support kroto-plus, which is implemented as a protoc plugin (passed to protoc using --plugin). It looks like java_grpc_library currently doesn't allow multiple --plugin args.
The question: is this something that's already on your radar?  I didn't see an existing issue for this.  Or is there a workaround already?  If you are not planning to support this, we can probably contribute a fix ...
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7571
ServerCall#close(Status, Metadata) never called for client-cancelled calls · Issue #7571 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
also affects previous versions
What is your environment?
What do you wish to achieve
I wish to report the request count/duration including the result status (including CANCELLED ones).
See also:
What did you expect to see?
What did you see instead?
Which might lead to a memory leak if a resource is attached to the ServerCall instead of the ServerCall.Listener.
Steps to reproduce the bug
Add a custom cancel method to the ServerCall and call it from the Listener#onCancelled
Use the GrpcContext#addCancellationListener to mark the call as cancelled (not tested)
Expected changes
ServerCall#close is also called for (client-side) cancellations.
ServerCall#close's documentation is amended stating that it won't be called for (client-side) cancellations and other client errors such as connection loss/timeout(?).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7579
gRPC client blocks indefinitely · Issue #7579 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
On restarting the gRPC server we expect all the client connections to close. But this doesn't seem to happen.
What did you see instead?
The connection on the client-side remains as it is, for some client requests we got
CANCELLED: io.grpc.Context was cancelled without error , After that all the requests got blocked indefinitely.
Note: We have DNS for load balancing.
Steps to reproduce the bug
Start a gRPC server.
Make some calls to gRPC server through the client.
Try simultaneously restarting the server.
Try making new calls to the server using the client mentioned in 2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7581
Thread Leak · Issue #7581 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
OpenJRE 15 on Linux and Windows
What did you expect to see?
I'm trying to receive chat messages via a long running stream.
What did you see instead?
GRPC permanently spawns new threads while reading from the stream without closing them.
My function which i use to receive the messages looks like the following:
All threads have the same stack trace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7583
Use grpc-bom in the examples · Issue #7583 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Examples will be copy paste a lot and it is good to show there all the best practices.
Describe the solution you'd like
Use gRPC bom in the example code.
Describe alternatives you've considered
Keep things as they are.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7584
grpc stream server java.lang.OutOfMemoryError: Direct buffer memory · Issue #7584 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I run client test code:
the server fails after 10 successful requests.below is log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7587
Grpc time out for 15 minutes · Issue #7587 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey, i am using mentioned version of grpc libraries. so we have 2 services running on grpc , service A create a managed channel during startup and uses it throughout lifetime of pod. service A receives heavy load (100 req/s) . sometimes we keep receiving timeout error for around 15 min , no call reaches service B. after 15 min automatically this resolves, after doing some browsing i checked this could be becasue of TCP_USER_TIMEOUT being set to around 15 min by default. so can someone confirm if this is the same issue, or something else which i am missing
Below is the code used to create channel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7591
RetriableStream backoff algorithm · Issue #7591 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there, I have a question about the implementation of the RetriableStream. I am trying to configure a gRPC client using a retryPolicy. If I for example configure it to try 5 times, with an initial backoff of 2s and max of 10s, multiplier two, it can result in a set of backoffs looking like:
I would have expected it to go in a generally more incremental direction. It seems that for each iteration the next backoff is taken from a range (0, nextBackoff):
Is this expected behaviour? Shouldn't instead some small amount of jitter be applied instead? Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7594
Flaky OkHttpClientTransportTest.testClientHandlerFrameLogger · Issue #7594 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seeing this a couple of times in the past.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7596
client fatjar seems too big · Issue #7596 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I try to build a client-server communication channel via grpc, where the server is a Spring app and the client is an oracle JVM. I need to build a fatjar which contains all the runtime dependencies for my code. If I do this,
My question is am I doing something wrong? I thought grpc client app should be a lightweight thing, but 10 MB and 10 thousand class is everything but not lightweight.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7599
Non-recoverable status when the client executor has rejected tasks (INTERNAL: Panic! This is a bug!) · Issue #7599 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Operation system: Linux / Windows
Jdk: OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.6+10, mixed mode)
What did you expect to see?
In the case of using a channel with an executor that has a maximum pool size and an "Abort" rejection policy. Using a stub based on "AbstractAsyncStub" when a sufficient concurrency is created for rejected in the executor then occurs:
"io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!" due to "Caused by: java.util.concurrent.RejectedExecutionException: Task io.grpc.internal.DelayedClientTransport$5@363c30da rejected from java.util.concurrent.ThreadPoolExecutor".
What did you see instead?
After this point the system does not recover until the reboot and the requests always produce the last panic error.
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7602
Error While Calling Api · Issue #7602 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
how to solve this? in my android App
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7604
ComputeEngineChannelBuilder fails on App Engine · Issue #7604 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
I'm using version 1.33.1.
What is your environment?
App Engine Standard Environment using Java 11.
What did you expect to see?
I am using the Java Bigtable client which sets up a gRPC connection to the Bigtable service. In GAE Java 11, the application default credentials are an instance of ComputeEngineCredentials, which talk to the project's metadata server to obtain auth tokens. This works fine for many client libraries, however the Bigtable client uses DirectPath since version 1.17.0 by default. This code path includes the usage of gRPC's ComputeEngineChannelBuilder. I would expect this to work on App Engine.
What did you see instead?
As the file /sys/class/dmi/id/product_name is not available on App Engine Standard instances, an internal error will be produced resulting in an exception when making gRPC calls.
Steps to reproduce the bug
Use the Bigtable Java client with version >= 1.17.0. Create a client and read an example row:
This results in the following stack trace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7605
Alternative to GRPC_XDS_BOOSTRAP env variable · Issue #7605 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Goal
I’m looking into creating a utility function that can dynamically create and assign the xDS bootstrap.
This could be hooked into the application startup so that xDS can be configured across different environments (IDE, GCE, GKE) without the need of startup shell scripts etc.
While almost every programming language supports dynamically setting environment variables, Java does not.
Would it be possible to have an alternative way in java to provide the location of the bootstrap file?
Possible solution
One possible solution that doesn’t break the existing API and gRPC spec would be to also try reading e.g. a java system property
In the case that the GRPC_XDS_BOOSTRAP environment variable isn’t found.
Maybe something as simple as:
Alternative solutions would most likely require larger changes to the existing classes in order to pass the config down.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7607
grpc Client-Streaming Java Client gets io.grpc.StatusRuntimeException: UNAVAILABLE: HTTP status code 503 · Issue #7607 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a grpc Nodejs server behind a HAproxy and client-streaming rpc java maven.
When i run the java client it return an error:
No server is available to handle this request.
I already test a rpc client streaming with Nodejs and it worked.
My java client code:
Can this problem occurs by different implementations of different libraries of language in GRPC?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7608
io.netty.channel.epoll.Native.epollWait0 Takes up most of the CPU · Issue #7608 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I send 15000 tps from clients in my loader testing,then I found my server's cpu up to 95%
top:
jstack info for the top threads :
is it normal that this native method take up most of the cpu?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7612
grpc-alts 1.33.1 using old version of google-auth-library-oauth2-http, bringing vulnerable apache httpclient · Issue #7612 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
(Currently the latest) 1.33.1
What is your environment?
Problem is system independent
What did you expect to see?
I would like to see that the latest apache httpclient 4.5.13 is being used when I do a "mvn dependency:tree" in a maven based project using the (latest) java gprc library. This latest 4.5.13 version of apache httpclient is currently the only version which is not vulnerable (see e.g. https the first link I found when I searched it). I did not try to assess the severity of this vulnerability, just saw a security vulerability scan tool (Anchore) reporting apache httpclient 4.5.10 (version used by the grpc library currently, see below) as vulnerable.
What did you see instead?
In a maven based project I executed "mvn dependency:tree" and this is what I found:
So in short: using even the latest grpc library will bring the vulnerable apache httpclient as a transitive dependency.
Probably this could be fixed easily: let grpc-alts use the latest com.google.auth:google-auth-library-oauth2-http 0.22.0, then it would use the google http client 1.37.0 .
Steps to reproduce the bug
Again, take a look at the dependency tree above and you can see that the grpc library 1.33.1 uses the vulnerable org.apache.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7614
Authentication SSL/TLS; Custom CA root certificates for Android · Issue #7614 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to connect to a server over SSL / TLS and am using OkHttpChannelBuilder.
I have this error
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7616
Protocol can't generate the service greeting on win10. · Issue #7616 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to generate a new gRPC in a new maven project. But when I compile the helloworld.proto file, it is only generate the model of message. I can't get service greeting. So what should I do?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7619
io.grpc.StatusRuntimeException: UNAVAILABLE · Issue #7619 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Good afternoon. I ran your example on android but got the error.
Everything works on java, but not on android
Please tell me why I might get this error
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7621
ServerCredentials is experimental · Issue #7621 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This includes TlsServerCredentials, InsecureServerCredentials, Grpc.newServerBuilderForPort, and many more.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7622
ALTS can leak handshake RPCs · Issue #7622 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The OnHandshake RPCs start too early. They are started before the TCP connection is even established (when the stub is created, which is part of newHandshaker). If the connection is never established (e.g., the server can't be reached), the TsiHandshakeHandler won't be added to the Channel and so the RPC cleanup will never fire. Before the timeout added in #7589, this would be very bad.
We need to fix the bug, and evaluate how exposed our existing clients are. The v1.34 release is semi-okay, since it has a timeout in place so these busted RPCs won't live forever. But in the case that all backend connections are failing, it might still produce ugly results.
CC @veblush, @apolcyn
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7623
Why no response after more than 24 hours and no error? · Issue #7623 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No activity with more than 24 hours. Client request freeze after Contexts.interceptCall(context, call, headers, next). Request did not pass to service method, without any error. But connection still there, service method not execute.
Is there any changes about timeout(long time no activity) recently?
Update grpc from 1.29.0 to 1.32.2;
I add a log before try and in PS.getConnection(). I will test again after 24 hours.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7625
NPE when getting remote address · Issue #7625 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I have implemented a metric in grpc server to track incoming connections using transportFilter API.
It works good on local machine, but having deployed my app into openshift I faced strange warn messages with NPE.
The code which throws exception:
Any idea why it can happen?
I attached the log.
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7637
Getting "javadoc: error - invalid flag: -html4" when trying to build · Issue #7637 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
I am on master branch. git status gives this
On branch master
Your branch is up to date with 'origin/master'.
What is your environment?
I am using  ubuntu 18.04
What did you expect to see?
I was following steps in building grpc-java, with all prerequisites (including protobuf) and expected a successful build using gradle.
What did you see instead?
Steps to reproduce the bug
How did I fix it
I know this is not the ideal way to do this. Can anyone provide more information on this? Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7639
del · Issue #7639 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7643
ALTS: GRPCLB LoadBalancer had an error  · Issue #7643 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running GCS benchmark over DirectPath with gRPC 1.34.0-SNAPSHOT, it failed with the error below. It has been working with gRPC 1.33.1.
What version of gRPC-Java are you using?
What is your environment?
Linux Debian/10
What did you expect to see?
Connecting to the backend using ALTS.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7650
Confusing about ManagedChannelBuilder.forAddress  · Issue #7650 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have two grpc client.
this is ok
It's  very confusing for ManagedChannel.forAddress. The behavior will be changed by register NameResolverProvider.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7651
Full method name should be consistent with that from Protobuf · Issue #7651 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given method Greet:
The com.google.protobuf.Descriptors.MethodDescriptor.getFullName returns com.example.GreetingService.Greet, but io.grpc.MethodDescriptor.generateFullMethodName returns com.example.GreetingService/Greet. This is super confusing, and also error prone when making calls using low level ClientCalls API. For example, the gRPC CLI expects method name as com.example.GreetingService.Greet.
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
The full name should be consistent with that from Protobuf.
What did you see instead?
They don't match.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7652
LoadBalancer open too many connection · Issue #7652 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Latest
What is your environment?
Linux
What did you expect to see?
LoadBalancer keeps limited number open connections.
What did you see instead?
On each address that return NameResolver to RoundRobinLoadBalancer opened by connection. It's difficult to scale when
NameResolver return more then hundred hosts.
The result of call one request on ManagedChannel that has NameResolver with 1k+ hosts:
Steps to reproduce the bug
I have a NameResolver that by special endpoint resolve a list of hosts that can be use to execute queries. On some endpoint, this NameResolver can return 2k+ hosts, user can send request to any of them. When NameResolver return a lots of code I faced with a problem, that RoundRobinLoadBalancer try connect to all of hosts, instead of create connect only when it requested(limited active pool). I happens in code
Is it valid use NameResolver + LoadBalancer on ManagedChannel? Or it should be other channel on top of ManagedChannel that implements load balancing and resolving himself?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7655
direct memory leak detected via ResourceLeakDetector · Issue #7655 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi ,I use biStream model to send messages to client from server. then I detect memory leak via use ResourceLeakDetector
Recent access records:
Cound any one give me some instruction? It is a bug or not ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7656
Grpc transfers a large amount of data files, which takes up a lot of memory  buff/cache · Issue #7656 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7667
Support custom KeyManager with TlsChannelCredentials · Issue #7667 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am working on adding mtls feature to Google gax-java library PR. We need to add ssl context to ManagedChannelBuilder. The code in my PR looks like this:
In the code I cast the builder type from ManagedChannelBuilder to NettyChannelBuilder, and add the ssl context. This code is for grpc so the cast works.
Our concern is that NettyChannelBuilder is from io.grpc.netty.shaded.io.grpc.netty. It is supposed to be private to grpc-java I guess.
My question is: is this OK? If not, how can I pass the ssl context to the ManagedChannelBuilder. We must use ManagedChannelBuilder to build the channel (because we provide the user a callback to configure ManagedChannelBuilder), otherwise this will be a major breaking change for all googleapis client libraries.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7684
scope of dependency com.google.protobuf:protobuf-java-util become runtime from compile · Issue #7684 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Compare the following two pom:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7690
protoc-gen-grpc-java not available on apple m1 · Issue #7690 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.34.0
What is your environment?
What did you expect to see?
build success
What did you see instead?
Steps to reproduce the bug
mvn protobuf:compile
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7691
thread hangs and cannot exit · Issue #7691 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you see instead?
Thread is hanging.
Steps to reproduce the bug
I've read some issues(#7362, #7579, #5286, #7635), but cannot figure out the reason. It's very difficult to reproduce it.
In my env, it seems because of unexpected channel.shutdown:
Thread1 and Thread2 hold the same channel. Thread1 shutdown channel unexpectedly. Is it possobile that Thread2 will hang?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7692
gRPC + netty throw exception and long stack trace when receiving HTTP/1.1 request · Issue #7692 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux RHEL7
What did you expect to see?
Less noisy failure when receiving an HTTP/1.1 GET request
What did you see instead?
Steps to reproduce the bug
Note: ideally this would be addressed with #3458 so that we can define what to return for load balancers/VIPs/outside services that like to check liveness of a service using the only way they know how, which is an HTTP/1.1 request.
But in the interim, it would be nice not to have this type of stacktrace appearing in our logs every 5 seconds (interval for the HTTP/1.1 checks).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7695
can't compile java_grpc_library · Issue #7695 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Define a java_grpc_library rule and use it
What did you see instead?
When I define a java_grpc_library rule, I get this error with 1.33 and 1.34:
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7697
Modify the way of get env param in example module. · Issue #7697 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
on master head
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7699
Refactor getHedgingServiceConfig in io.grpc.examples.hedging.HedgingHelloWorldClient · Issue #7699 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7703
xds: Need test verifying generated code isn't leaking protobufs · Issue #7703 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#7702 fixes a problem where protos using the udpa.annotation and envoy.annotation java packages were failing to be relocated. It existed since 1.28, the first release to include grpc-xds. It seems clear we need an automated check to make sure this sort of thing is caught, as the manual checking didn't work.
It may be easiest to do this in Gradle, with a task that depends on shadowJar and adds itself as a dependency of test. It would look through the contents of the jar and make sure everything is in the io.grpc.xds package. Care should be taken to support up-to-date checks properly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7711
Access HTTP2 headers in Client/Server interceptors · Issue #7711 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
In the interceptors we would like to capture HTTP2 headers - authority, method, scheme and path. However this are not propagated from the transport (e.g. netty) to the interceptors. Is there any supported way to access these headers in gRPC interceptors?
Currently our implementation uses hacks and it instruments io.grpc.netty.Utils#convertHeaders. The instrumentation adds HTTP2 headers into gRPC Metadata object. This works well for the server side, although we don't like that we store additional data to Metadata. For the client it does not work and we had to instrument io.grpc.netty.Utils#convertClientHeaders and put the HTTP2 headers directly to span object - accessed via thread local - this does not work for the first request when DelayedStream is used see hypertrace/javaagent#109 (comment).
Any hits are appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7715
Grpc does not send information after a period of time, and does not return when sending again · Issue #7715 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HELP
Grpc does not send information after a period of time, and does not return when sending again
Who has ever met this situation？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7716
Is there a better way to add multiple Services to GRPC-Server? · Issue #7716 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Every time we add a new Service to the GRPC-Java Server we have to add another .addService(new MyServiceX).
Something like this:
And we need to add a lot of services to our GRPC server.
Is there a better way to add all the services in one go?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7719
Expose SecurityLevel on server-side · Issue #7719 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is an out-shoot of #7711. Basically, there is not a generic way of determining the level of security offered by the transport for RPCs on server-side. This can be approximated by looking for the SSLSession, but that doesn't work for ALTS and maybe some future TLS approaches.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7721
gRPCLB fails RPCs if gRPCLB server unavailable · Issue #7721 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is split out of #7643 (comment):
The initial RPCs seem to fail because the picker is immediately failed when lb RPC fails and there are no backends. Changing the logic to try fallback backends first should be possible, but it also seems it will be a hard to define/implement all the edge cases.
@apolcyn, does it seem wrong that initial RPCs fail if gRPCLB server is unavailable, when fallback is available but hasn't been tried yet? It appears later RPCs would succeeded as the picker would be replaced to buffer further RPCs and eventually the fallback would come online. It seems like we may need to change this error behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7725
io.grpc.SerializingExecutor swallows RuntimeExceptions thrown by gRPC services · Issue #7725 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Users can call ServerBuilder#executor() to arrange for gRPC service callbacks like onNext(), onError() and onCancelHandler to be dispatched on a custom Executor. However, when one of those callbacks throws a RuntimeException (due to bug / programming error in the service) that Executor and/or its Thread's UncaughtExceptionHandler never sees it. Instead, io.grpc.SerializingExecutor catches the RuntimeException, logs it and just keeps going.
This might be enough in the datacenter where server logs are typically retained for later debugging, but for mobile "on-device" gRPC servers, the java.util.logging output isn't typically seen by anyone. In that environment, it's more common to handle unexpected Exceptions programmatically and gRPC should somehow make this possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7727
GRPC Stream Server message deliver slows donw if rate of dataproduced is  below 30 m/s  · Issue #7727 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my usecase i use server side stream and used async stub when i produced data ie call onNext per 30m/s or slow the lag is increased to reach the data to client ?
What will be the reason for this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7729
Netty Version Combinations table update · Issue #7729 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was wondering whether the version combination table here is still being updated. As it stands, I am maintaining a project which uses both grpc-netty and netty-tcnative-boringssl-static, which both have seen recent releases with versions above the last mentioned.
For clarity, the table currently shares the match between 1.32.x- of grpc-netty to 2.0.31.Final of netty-tcnative-boringssl-static, whereas the most recent release of grpc-netty is 1.34.1.
Should I simply be patient and wait for upgrading, or has the table not been updated for some time?
Thanks in advance for any advice on this topic!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7731
AndroidChannelBuilderTest is incompatible with Robolectric 4.4 · Issue #7731 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I tried to upgrade to robolectric 4.4, compilation failed:
It's not obvious to me what is going on, but I'm not familiar with shadowOf()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7732
Migrate to new OpenCensus APIs for OpenTelemetry migration · Issue #7732 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
census-instrumentation/opencensus-java#2059 added some new APIs to be able to use the gRPC context or the OpenTelemetry context. That change breaks gRPC (census-instrumentation/opencensus-java#2069). Ignoring the breakage, we still want to figure out what changes we should make on our side and whether we can adopt the new API. We should also investigate what their migration looks like in the context of gRPC and its users.
Gribkoff, assigning to you for initial investigation, since this may influence your work. But I assume that before any larger changes we'd coordinate and determine who is appropriate.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7734
Fix lint issues in Android projects · Issue #7734 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems we aren't targeting the a recent Android version. Many of the CheckResult failures appear to be expected behavior, so it will need to be silenced in some way. There's some warnings about old versions and some UI goo. Quite a mixed bag. I'm fine if we resolve a substantial portion of them with this issue and open separate issues for the remaining items.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7736
Migrate from digital.wup.android-maven-publish · Issue #7736 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Android Gradle plugin 3.6+ provides native support for Maven Publish plugin. I don't know anything will break if we use 3.6 along with the existing digital.wup plugin, but we should consider migrating to the built-in support during/after upgrading to 3.6.
When upgrading to 3.6 we should definitely confirm that the pom output looks correct.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7741
Can modify the code generator plugin, remove static import code in the auto generate code? · Issue #7741 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the XxxGrpc generated by plugin. Exist such import codes:
As a learner for grpc-java, I think use
will be better, it's more readable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7752
xDS channel shutdown problem · Issue #7752 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Environment: Windows, openjdk-11.0.4
With the simple demo code below:
Output:
Hello world
Then I look into the source code, concentrating in two classes: io.grpc.xds.SharedXdsClientPoolProvider and io.grpc.xds.AbstractXdsClient.
And then AbstractXdsClient will shutdown its underlying ManagedChannel, which is used to communicate with xDS server:
But acording to SharedXdsClientPoolProvider:69, the ManagedChannel is shared among all XdsClients.
One XdsClient's channel shuts down, all XdsClients' channel shuts down.
And look at SharedXdsClientPoolProviderTest, it seems that the case shown above is not covered by the unit test.
So shouldn't I invoke xds-targeted channel's shutdown()? Or it's a bug?
If I should never invoke shutdown() of xds-targeted channel, how can I manage the channel's cleanup? I need create, cache, shutdown, and re-create channels of many different "xds://xxx" targets in my code. Do increasing un-shutdown channels lead to resource leaks?
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7757
libstdc++-static missing on RHEL8  · Issue #7757 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to build grpc-java on powerpc ppc64le under RHEL8, however since RHEL8 doesn't contain the libstdc++-static packages the following error is seen:
any ideas on how we can work around this ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7760
avoid split big data frame by WeightedFairQueueByteDistributor.allocationQuantum · Issue #7760 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
When we send big data frame(100K) to server(concurrent stream in one connection), gRPC java client will split data frame to multiple data frames. In some case(reduce latency time), we don't want to split the data frame. After test, we found allocationQuantum of WeightedFairQueueByteDistributor will affect, but gRPC java client just set 16K to this parameter, and we can't change it through config.
Describe the solution you'd like
We can change WeightedFairQueueByteDistributor allocationQuantum through config.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7765
Investigate TLSv1.3 with Conscrypt · Issue #7765 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For some reason Conscrypt is incompatible with TLSv1.3 in ways that I wouldn't expect. It is known incompatible with the default TrustManager on older JDKs because those don't support TLSv1.3. But I explicitly constructed a TrustManagerFactory with the Conscrypt provider and passed it to sslContextBuilder.trustManager(TrustManagerFactory) and it still failed (the stack trace makes it seem like it didn't use the TrustManager I provided):
But there's incompatibilities with JDK 8u275, which supports TLSv1.3, which is super-unfortunate:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7767
MessageIOException occurs when building grcp-core:test · Issue #7767 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An MessageIOException occurred when I download the source code of grpc-java to build it. More details are as follows:
Operating System: Windows 10
JDK: openjdk 1.8.0_265
What I did:
using cmd to run gradlew build
I still couldn't find the solution after visited stackoverflow and docs.gradle.org
Could someone help me?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7768
Ask to access onMessage to parse message to get key json ( example try to get code code : 400, code 600) · Issue #7768 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My response likes
I want to get the code value, so I try to parse it from message, but it nothing can help me excepting i cast it to my model GetFollowingResponse. I have many getAPi with model response so it is not correct
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7774
TLS example fails with ClosedChannelException when using ed25519 certificates · Issue #7774 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
OS: Linux (Debian testing x86_64)
JDK: OpenJDK 11
What did you expect to see?
Client RPC completes successfully (greets localhost). Note that EdDSA using ed25519 is part of the TLS 1.3 standard as described in RFC 8446.
What did you see instead?
Steps to reproduce the bug
Modify HelloWorldServerTls#getSslContextBuilder() to call SslContextBuilder#forServer(PrivateKey, X509Certificate...), using BouncyCastleProvider to support the EdDSA algorithm with java.security.KeyFactory in addition to the existing EC, RSA, and DSA algorithms.
Verify that the example still works with the provided certificates/keys for server TLS.
Generate new certificates following the instructions at testing/src/main/resources/certs/README, but with the ed25519 algorithm (equivalents of ca, client, and server1). Note that the command lists the wrong extension section for server1-openssl.cnf, and it should be v3_req instead of req_ext.
Rebuild and run the example using the ed25519 certificates.
I'm happy to share my modifications and certificates/keys if it helps.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7775
Unable to build grpc-java in v1.34.1 · Issue #7775 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Unable to build in examples folder
What did you see instead?
Task :generateProto FAILED
FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':generateProto'.
Steps to reproduce the bug
Seems like issue with url " "
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7776
LEAK: ByteBuf.release() was not called before it's garbage-collected. · Issue #7776 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
no leak
What did you see instead?
Recent access records:
Steps to reproduce the bug
not occur very often.
code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7794
NettyServerTest failed · Issue #7794 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
I hope all test cases run successfully
What did you see instead?
An exception of TestTimedOutException occurred
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7795
message of client can't send to server. · Issue #7795 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Grpc as a client at android, client will send  message to service, but some message loss
What did you see instead?
I have debug the code,  I find that  message will cached before DNS resolve,  for example client cached two message, when DNS resloved, only one message to send.
Steps to reproduce the bug
Client send two message before DNS reslove,   this issue happen 1/10. The messages using different ManagedChannel. one channel is http , another is https, the two channel have same host
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7797
NettyClientTransport shutdown race: throws RejectedExecutionException  · Issue #7797 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Discovered when investigating Metadata Applier behaviour with #6283
NettyClientTransport creates newStream() when the channel is already closed. The exception is thrown when submit to eventloop at writeQueue. Transport was closed too early before the accepted RPC is finished.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7802
CPU utilisation is not 100% · Issue #7802 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have written a basic grpc server,
While load testing CPU utilisation is never 100%, current maximum I could take is 25%.
Any ideas how to get 100% usage for maximum throughput?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7819
Unit testing gRPC client/server with xDS? · Issue #7819 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PR #7620 (issue #7605)  introduced the io.grpc.xds.bootstrap property as an alternative to the GRPC_XDS_BOOTSTRAP env var. This makes it possible to programmatically provide the xDS config (i.e. via System.setProperty). However, it by no means make it simple to unit test client/servers using xDS.
I see a need for unit tests with a transient xDS server running as part of the test (i.e. io.envoyproxy.controlplane:java-control-plane or similar) to allow clients to discover a server via xDS, all within a unit test.
While this works in single test isolation having multiple such tests running in parallell seems problematic given that these test then either need to use the same bootstrap config and thus the same host:port for xDS across all tests or risk concurrency issues when multiple tests want to use their own bootstrap config and point to it using System.setProperty.
Does my reasoning make sense or am I coming at this the wrong way? Is there an approach on how to unit test gRPC with xDS that I simply missed?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7820
java interop to prod interop tests are failing on master · Issue #7820 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
unning test large_unary
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7821
I found a bug when I use the plugin(protobuf-maven-plugin:0.5.1) · Issue #7821 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Codes of server are Python, and codes of client are JAVA. I hava an arg named "sentences" whose type is String[]. So I use setSentences() to build a Request. It's in the file QueryRequest.java :
The sentences_'s type is List.  I met a error of 'java.lang.IndexOutOfBoundsException' because its size is 0 at the beginning.
Then I change the codes of setSentences() (though IDEA tell me I should not)
Finally it works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7824
How to set connection timeout by OkHttpChannelBuilder? · Issue #7824 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How to set connection timeout by OkHttpChannelBuilder in a java client?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7828
OpenCensus 0.28.0 broke Java 7 compatibility · Issue #7828 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We're not ready to remove Java 7 support yet. We should revert this to 0.24.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7830
io.grpc.netty.NettyClientTransportTest  fails on ARM64 Linux · Issue #7830 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running ./gradlew build -PskipAndroid=true -PskipCodegen=true consistently results in a failure
What did you expect to see?
tests pass
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7839
Different message size leads to different performance · Issue #7839 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The attach code is for repetition
My question is , when i assign  different size for the byte array ,i meet big difference in performance，for Example
The core code as below
When the byte array size is set to 1024 * 70, the receiveBytesPerSecond as below，just 100M+
It is so unstable，but i want a stable performance no matter how large the size is，because i can‘t control the data received
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7844
How do you get the certchain when it is under 'resources'?  · Issue #7844 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to get a 'secure' server running and am having some simple issues, totally due to me lack of understanding but still. :)   I can get a plain-text version of my grpc server running and I can get a 'secure' version running as well if I use a java configuration like this ...
But when trying to do it using configuration properties I keep getting the exception
Caused by: java.lang.IllegalArgumentException: certificateChain path cannot be null or blank
I get the plaintext server running then change the following properties in application properties
I have tried several combination of changing the 'file' and 'classpath' protocol and the '/' or not in front of the file name.
grpc.server.security.certificateChain=file:/vbp-grpc/localhost/server.crt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7845
runtime depdencies in grpc · Issue #7845 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when switching to GRPC version 1.34 i suddenly noticed that some of it's dependencies were missing (i.e perfmark, animal sniffer,andoid annotations, gson) it causes classpath issues as we copy dependencies only in compile scope, what was the reason for it? naturally i'd rather not copy all  depdencies marked as runtimes well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7846
one grpc server for both unary and bidi stream with netty · Issue #7846 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a requirement to implement a grpc server in java which is capable of handling both grpc unary and bidirectional streaming.It is possible for the service that uses grpc bidi-streaming to send a large number of messages per second.(maybe 2000 messages per second or more)I have two implementations in mind and kind of confused which one suits my requirement most.
When using this approach , since both grpc unary and bidi stream uses the same port, one boss thread will be allocated for both unary and bidi stream. So i'm not sure how well it performs in case of bidi streams receiving large number of messages per second. (I mean whether the boss thread will get busy for bidi streams and become unavailable for the unary)
2 Use two servers one for grpc unary and one for grpc bidi streaming.
Here the previously mentioned issue is not there since we allocate 2 boss threads one for each grpc unary and bidi stream. But for the services I'm using an executor which uses java ThreadPoolExecutor and my question is should I use 2 threadpools for the two services that use grpc unary and bidi streaming ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7850
why the non-shaded netty  has no UnixChannelOption · Issue #7850 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
why the non-shaded netty  has no UnixChannelOption
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7851
Encountering UNAVAILABLE: Network closed for unknown reason after making successful requests · Issue #7851 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.24.1 (I can reproduce the issue with 1.35.0 though)
What is your environment?
What did you expect to see?
Ideally I would like my outgoing requests to work. Realistically it would be helpful if the exception thrown by the gRPC layer was more actionable/debuggable. All I have to work with is UNAVAILABLE: Network closed for unknown reason.
What did you see instead?
We have a service which runs and periodically makes requests to other services to ensure they are working correctly. When the service boots up it generates a bunch of gRPC channels and GRPC client wrapper objects. During the initial test run the gRPC requests work completely normally. After roughly 15 minutes the second run begins and we start to see issues on some of the gRPC channels which are using mTLS and going through an AWS NLB.
With debug logging enabled I see every attempted request write OUTBOUND HEADERS followed by OUTBOUND DATA. Immediately afterwards the request throws an UNAVAILABLE gRPC status runtime exception with no additional cause. It seems that requests continue with the same streamId and exhibit the same failing behavior.
We see the following exception which is not very helpful.
After enabling DEBUG level logging I discovered that I only see outgoing outbound traffic and the code almost immediately throws an exception.
10 minutes later the second run starts after successfully receiving data...
Outgoing data continues to be sent for other requests and exceptions continue for each respective request
Steps to reproduce the bug
It is not immediately obvious how to reproduce the bug. The issue started happening to us recently.
From my observations the issue only occurs with mTLS connections and they must be idle or alive for a certain amount of time before they start exhibiting issues. We have non mTLS, TLS connections where this issue does not occur at all. I simply find it very frustrating to debug this issue given the exception is thrown from grpc-java.
Thank you for your time!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7855
how to use bazel to build protoc-gen-grpc-java · Issue #7855 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Question: I want to build protoc-gen-grpc-java with bazel
Operating System: Debian buster
ARCH: mips64el
Description: When I type bazel build ... in compiler directory,it said
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7864
AltsContext is experimental · Issue #7864 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7866
package 'com.google.protobuf...' does not exist · Issue #7866 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to implement gRPC to my project and when I do everythig as you did in your Hello World example, I keep getting 'package com.google.protobuf. ...' does not exist and 'can not find symbol ...'
I added this line to my project gradle:
classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.14"
And to my app gradle I added:
apply plugin: 'com.google.protobuf'
And in dependencies:
Can someone tell me if I did something wrong or the issue is on your side?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7867
./run-test-server.sh and ./run-test-client.sh don't work (Therefore `Basics tutorial` is also broken) · Issue #7867 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was only following this guide
It looks like its outdated as the paths in the guide are already wrong. I found the relevant files/ directories and built the library and also the Android app. It turns out even the 2 basic test scripts don't work.
What version of gRPC-Java are you using?
gRPC-Java: Master branch (f0cf435b85a851ed8b2fa5ddcf8b2d1bc06f2984) and also tried 1.35.0 (remotes/origin/v1.35.0)
JDK: openjdk64-11.0.9.1 and also tried separately with openJDK@8 (installed via homebrew)
I am using jenv though
What is your environment?
What did you expect to see?
The intro scripts work. I start server script, then client script:
What did you see instead?
When running client script for Java 1.8/ JDK8 version"
Running test empty_unary
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7868
Ability to get callExecutor in ClientInterceptor implementation · Issue #7868 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Various interceptor implementations need to invoke listener callbacks such as in scenarios:
However, those listener callbacks maybe called in a wrong thread that its user or the channel provider does not intend to use. I believe many interceptor implementations have been doing this. The callbacks should be running in application thread (executed by callExecutor).
CallOptions provides getExecutor(), but this may return null, and in that case the callExecutor should fallback to the channel executor.
In some cases this would not be a big problem, but not in the case of delay, retry, or there are other interceptors switching application thread/running async tasks involved. The problem could be even more difficult to resolve if an interceptor implementation is to be used as a library for others.
Possible solutions:
Add a getExecutor() method for Channel class. Then Interceptor can call nextChannel.getExecutor() as a fallback of callOptions.getExecutor().
Problems to some solutions:
Executor lifecycle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7869
Should it be documented that xds always uses the grpc-netty-shaded transport? · Issue #7869 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
While examining the dependency graph of one of our projects, I realized that while the rest of the gRPC libraries are transport-agnostic (choices being grpc-netty grpc-netty-shaded okhttp and in-process), the xds module has a runtime dependency on grpc-netty-shaded.
My guess is that this is because xds itself uses gRPC.
I suppose this means that effectively when using xds, the only sane choice is to use grpc-netty-shaded as transport in the application itself (we use grpc-netty now). Is this correct? Should it be documented?
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7873
option java_multiple_files doesn't generate multiple files. · Issue #7873 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Using the snippet code from the README.md file for maven.
What is your environment?
What did you expect to see?
After using the command mvn clean compile,
I should expect to see several java files generated as my .proto file does have option java_multiple_files = true; in it.
What did you see instead?
After using the command mvn clean compile,
I end up with a single java file containing several subclasses.
Steps to reproduce the bug
Generate a new maven project
Type the command mvn compile or mvn clean compile
Inspect the target/generated-sources/protobuf/grpc-java folder, you should have your package name and only one java class like this.
It's worth noting that we can still use the generated files for extending the services, but I would rather use separate java files if I can.
The grpc.io website doesn't mention this option in the documentation and I can't find it with some research. Is it an experimental feature ?
The original website I used as a guideline:
Beside the outdated pom.xml that doesn't contain a fix for java 8+ annotations (you can use the pom.xml from the README.md that is correct), the rest of the tutorial is nearly accurate if we don't mind using HelloServiceGrpc.HelloServiceImplBase instead of HelloServiceImplBase in our code.
The fact that the tutorial use HelloServiceImplBase without the single class seems to indicate this is a regression bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7874
Add the ability to have a separate thread pool/executor for each endpoint · Issue #7874 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
a grpc server can have requests of varying priorities.
since a grpc server uses a single executor for all incoming requests, a load of low-priority requests can affect the ability to handle higher priority requests.
The naive approach for this problem would be to have a separate executor for each end-point, but that solution will be a bit limited. In order to have full flexibility, it would be better to have a way to assign an executor based on both the end-point, and the metadata of the request. for example, in our use case, the metadata holds the type of the calling server, and we want to be able to have a dedicated executors for high priority callers.
The solution approach I thought about was adding a new method to the ServerBuilder, that accepts a GrpcExecutorFactory, which is a functional interface with a method that receives (String methodName, Metadata headers), and returns an Executor.
Then, if the GrpcExecutorFactory was set, construct the SerializingExecutor in the ServerImpl with the returned executor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7875
services · Issue #7875 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7889
Add Channel Interface · Issue #7889 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there an interface for a Channel?
Is your feature request related to a problem?
I'm always frustrated when need implement multiples channels in a project, and don't have how create a instance in DI of Channel
Describe the solution you'd like
Create a interface to Channel and add reference in ManagedChannel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7898
Netty 4.1.59 fixing temp file vulnerability (CVE-2021-21290) · Issue #7898 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Netty 4.1.59 has been released that fixes a local information disclosure vulnerability in Netty on Unix-like systems due temporary files:
Please update the dependencies to Netty 41.59 and TcNative 2.0.36,
and update the table listing the known to work version combinations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7901
PooledByteBufAllocator has type mismatch due to updated dependency · Issue #7901 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.35.0
What is your environment?
This points to io.netty.buffer#PooledByteBufAllocator
It looks like this used to be an int, but they've changed it to a boolean. In the short term you can probably backrev your
dependency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7907
Do GRPC netty works with OpenJSSE · Issue #7907 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are facing a classCastException issue while using grpc java (which use Netty handlers for SSL communication) along with OpenJSSE.
Here is the issue—running the gRPC client and server throws:
Is there any way to use OpenJsse along with Grpc java?
Raised the question in StackOverFlow as well but not received any response to raising here.
If this issue is not related to grpc java please provide us the proper details with which team do we have to sync up.
Bapi
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7911
How to ensure the retries are working · Issue #7911 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have some confusion in the implementation of retry methods
I have a grpc service jar and I am trying 3 parallel request to the service as mentioned in the example above with the retry config created and attached (provided 5 max retries). How does the retry mechanism works
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7917
Do not allow NameResolverProvider to choose which is default; make it application-explicit · Issue #7917 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I find ordering of NameResolverProviders loaded by GRPC is up to the priority and classname. Comments in NameResolverRegistry indicate that GRPC needs to make the ordering stable because it relies on the first one as default.
But, I wonder why does it take use of classname for ordering? The classname of NameResolverProvider from third-party library is out of control of developers and it will cause some problem.
Moreover, comments in ManagedChannelImpl indicate that it expects to use DnsNameResolverProvider as default for compatibility with some googleapis endpoint like "foo". But in fact it use the first NameResolverProvider as default.
If some third-party library offers a NameResolverProvider with a package name greater than "io.grpc", which uses the same priority as DnsNameResolverProvider and also supports the same format like "foo.googleapis.com:8080", this hard-coded compatibility in ManagedChannelImpl will be broken. And it's hard for developers to solve this by doing some config thing.
Here's an example:
We use google-cloud-firestore library to integrate firestore service. The hard-coded endpoint is "firestore.googleapis.com:443", which seems to be the case handled by the compatibility of ManagedChannelImpl.
We also use another opensource library to extend grpc functionalities. This library offers a StaticNameResolverProvider with priortiy=5, same as DnsNameResolverProvider, and the package name is greater than "io.grpc". It also supports URI in format like "firestore.googleapis.com:443".
When grpc wants to find a NameResolverProvider for firestore endpoint, it will find StaticNameResolverProvider instead of DnsNameResolverProvider.
Since grpc is kind of basis library and offers extension functionality for NameResolverProvider, I think it should make both of URI format and ordering of NameResolverProviders more clear. Besides, GRPC should also offer a more specific way to set the default NameResolverProvider.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7921
ClientCall.cancel and ClientCallListener.onClose can be called multiple times causing RejectedExecutionException · Issue #7921 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example stacktrace
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7925
Tracking issue for SeverBuilder.addServices() being experimental · Issue #7925 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7927
io.grpc.Server#SERVER_CONTEXT_KEY for transcoding · Issue #7927 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Quote from comment on that field:
Key for accessing the Server instance inside server RPC Context. It's unclear to us what users would need. If you think you need to use this, please file an issue for us to discuss a public API.
Now I'm reaching out to ask for help:
actually not interested in Server itself at all, but the io.grpc.Server#getImmutableServices. Is there any other way to get it ONLY in knowing "I'm on the Server side"?
Context:
Working on a simplistic http-grpc-spring-web transcoder at https: and needs the list of ServerMethodDefinitions to setup the pipes properly.
Any general suggestions are also appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7929
Tracking issue for AdminInterface being experimental · Issue #7929 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Admin Interface API gRFC: grpc/proposal#218
A convenient API for automatically determine relevant admin services that expose the overall state of gRPC activities in a given binary.
Currently it only includes Channelz and CSDS with limited needs, and they are hardcoded. It can be made to be more powerful as we need it to.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7935
gRPC-LB without fallback addresses can hang · Issue #7935 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There's been hangs when using gRPC-LB with round_robin and I think I tracked the source down.
gRPC-LB has a timer in case communicating with gRPC-LB takes "too long," to avoid hanging. If it takes too long it swaps to fallback addresses. But the code that handles empty addresses doesn't cause an error if there are no addresses and usingFallbackBackends == true.
It'd make sense for this bug to lurk, as I believe all previously deployed usages of gRPC-LB have fallback addresses.
Note that pick-first could suffer a similar issue, but it is a separate code path and so will need to be checked/fixed independently.
I think the fix for round_robin will be an easy one-line change.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7940
io.grpc.netty.shaded.io.grpc.netty.NettyServerTransport.connections - Transport failed · Issue #7940 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1、Go call grpc of Java
2、Go version: google.golang.org/grpc v1.36.0
3、grpc-java version: net.devh     grpc-server-spring-boot-starter     2.4.0.RELEASE
4、Complete the call and report an error: An existing connection was forcibly closed by the remote host
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7942
Needs investigation: channel panic upon shutdown after xds call completes · Issue #7942 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7946
Buggy documentation · Issue #7946 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Both ServerInterceptors.intercept and  ServerInterceptors.interceptForward have the same description.
One of them should state last, not first
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7947
Does enableRetry enable transparent retries and how to disable it? · Issue #7947 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When building a channel, if I call disableRetry or  don't call enableRetry, does transparent retries will be disabled?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7948
Bad constant name in InternalCheckGcpEnvironment.java · Issue #7948 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This one cost some time tracking down a bug. The constant did not help improve the clarity of the code, It actively obscured it.
This constant is NOT the DMI product name. It is a path to a file that contains the DMI product name, and the difference matters. At the least, the constant should be renamed. Better yet, it should be inlined. We don't need a constant here. The literal string is better than the constant.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7949
Compiling and testing the codegen raspberry 4 · Issue #7949 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to compile gRPC Java Codegen Plugin for Protobuf Compiler in PI4
I run:
So I change the line 63 in the chech-artifact.sh to assertEq "$format" "elf64-littleaarch64" $LINENO (Is this problem?)
and the build is successful
How can I confirm that the codegen is installed to Maven local repository to use it from an other application?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7952
xds: improve debug logs at xds lb, e.g. WeightedTargetLoadbalancer. · Issue #7952 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AAD, I want to improve debug logs at xds lb, e.g. WeightedTargetLoadbalancer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7953
UnsupportedOperationException after Netty 4.1.60 update · Issue #7953 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
macOS, jdk11
What did you expect to see?
Server can process a request which contains content-length header.
What did you see instead?
A change in Netty 4.1.60 introduces usage of the Http2Headers#setLong(..) method, but grpc-java's custom header implementations do not implement this method (e.g. throw UnsupportedOperationException).
Steps to reproduce the bug
upgrade netty dependency to 4.1.60.Final
send a request with content-length header
server should fail to process the request with the exception above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7956
grpc-netty-shaded doesn't use TCP_USER_TIMEOUT on ARMv8 · Issue #7956 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I had been running w/ the native transport and noticed it had unexpectedly switched back to NIO at some point.  After some investigation I realized the switch happened when I moved to running on ARM.  Looks like grpc-netty-shaded doesn't include the ARM artifacts.
When I switched to depending on grpc-netty rather than grpc-netty-shaded, that didn't work either at first.  When looking at profiles I found it was still using grpc-netty-shaded classes.   I found the shaded package was being brought into my dependency closure from some other dependencies I have.  I think what's happening is when I use ServerBuilder, it's discovering two NettyServerProviders on the classpath: one from grpc-netty and another from grpc-netty-shaded.   They're both the same priority and the shaded version ends up being chosen (which in turn won't work with ARM).
To summarize IIUC there's two issues: grpc-netty-shaded doesn't included ARM, and there doesn't seem to be a way to avoid using the shaded classes as long as anything brings in the shaded dependency.   I'm going to workaround the latter by directly using NettyServerBuilder rather than ServerBuilder.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7958
abnormal delay，version 1.32.1 · Issue #7958 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My RPC service has an abnormal delay problem. From the monitoring point of view, there is irregular jitter. And the delay presents a bimodal pattern. From the perspective of network packet capture, there are abnormal TCP packets. As shown in the figure, there is an abnormal time interval between the head and data of the same grpc http2, and the same TCP packet contains multiple http2 packets. Please help me solve this problem. Thank you very much.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7973
How to define a client interceptor ?  · Issue #7973 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a spring-boot app and I'm trying to define a client interceptor for my grpc service, so that I can set some custom headers in the response (which will be transcoded to html)
My interceptor definition looks like this:
No matter what I've tried, the response doesn't want o go through that code.
Just note that I also have a ServerInterceptor define in my code, and that logic works fine.
while my grpc implementation looks like this:
Any idea what could be wrong ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7974
Support for ppc64le · Issue #7974 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem? yes
When we try to build the project on ppc64le platform, we get errors.
Describe the solution you'd like
We get error saying "platform not supported". "architecture not supported" etc.. I think we need to modify compiler/check-artifact.sh to include support for ppc64le also. Similarly one of the test files testing/src/main/java/io/grpc/internal/testing/TestUtils.java also doing arch specific checks. I think that also needs modification
Describe alternatives you've considered
None
Additional context
While trying to build and test the project IBM's power linux(ppc64le) I got into these issues
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7975
how to force trigger refresh dns list? · Issue #7975 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version: 1.32.0
Error：
1.When only one centos_1 cpu is hight_load, but not dead > 30min;
2.grpc server at centos_1 has many instance, these grpc server connection is not closed;
3.These grpc server instance all request were over dead_line,  can't service >30min, ;
3.But at this time, nslookup is excluded centos_1 grpc server instance;
by the way
How can I force trigger refresh dns list at client side?
Or What can I do in this exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7977
ClientXdsClient throws away exception information · Issue #7977 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While ClientXdsClient commonly uses approach like StructOrError to avoid creating exceptions, there are still exceptions that need to be caught. This is most frequently InvalidProtocolBufferException, but can also entail IllegalArgumentException, PatternSyntaxException, and maybe others.
Unfortunately, the fully causal chain and stack trace is being completely thrown away for these exceptions. At the very least they should be logged at FINE or lower level. In cases that produce a Status, the cause would ideally be included as the Status cause. However, XdsLogger's API currently doesn't allow logging exceptions and StructOrError only supports simple strings.
CC @voidzcy, @dapengzhang0, @sergiitk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7984
How to check isCanceled when using grpc stremming? · Issue #7984 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I implemented model back-perssure, but I have the following problem: before I write message to the stream, I check isCanceled() and it returns true. I see the document that "isCanceled" is true when the peer closed the stream. So, I check the client and it does not close the stream.
So, I think that the server or the client is set keepAliveTimeout which is a small value. I increased the value of this config, but the isCanceled() is still true.
How should I handle it to avoid making such a mistake?
Thanks all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7988
Wrong buffer size · Issue #7988 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My program is bound to have this bug.I don't know why.
Buffer size should not be 14113.Can someone help me with this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7990
jcenter is going away · Issue #7990 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Used in about nine places:
These should all be replaced with maven()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7996
ClusterResolverLoadBalancer's "UNAVAILABLE: No usable endpoint" not very useful · Issue #7996 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In b/183205647 a tester saw the error "UNAVAILABLE: No usable endpoint". That is an extremely unhelpful error, except that it has a unique string that can be looked up in the code. It isn't even obvious it is an xDS error. We should improve the error message, at least to something like "UNAVAILABLE: No EDS resources exist for clusters: c1, c2, c3" (or something more appropriate).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7997
grpclb: Improve error information for "Unable to fallback, no fallback addresses found" · Issue #7997 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
#7960 fixed a case for grpclb that would cause it to hang if there were no fallback addresses. Now in that case instead of hanging it produces the error "UNAVAILABLE: Unable to fallback, no fallback addresses found", which is much better than hanging. However, it doesn't give any information to actually debug what's happening.
I'm thinking something along the lines of:
If there are fallback addresses, use one of their subchannel's error (ideally we'd round-robin over them or some such, but baby steps)
If we have no primary addresses (RPC to gRPCLB has never been successful), we should include the gRPC-LB contact error information (the information from the failing RPC, or create a message describing the RPC hasn't returned yet)
Otherwise, there are primary addresses and we should use one of their subchannel's error (ideally we'd round-robin over them or some such, but baby steps)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8001
OCSP Stapling support and guidance on use of JDK Provider · Issue #8001 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current security guidance on use of TLS Provider emphasises BoringSSL. Based on testing BoringSSL does not support OCSP Stapling so connections suffer performance issue if certificate revocation checking is a requirement.
Is the Security.md guidance still up to date now that JDK 11 (whether from Oracle or AdoptOpenJDK) support OCSP Stapling and other required protocols (APLN)? Is JDK still considered suboptimal for grpc-java use?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8002
Is there advisable to use okhttp instead netty? · Issue #8002 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I had recently raised one issue #7907 where it is mentioned the issue along with of usage of OpenJSSE and the same is raised in OpenJSSE community as openjsse/openjsse#22. I am not sure by when we can expect any fix for this, so we are trying one more alternative but need your advice on the same.
I can see okhttp library has by default openjsse support but it is advisable to use only for android clients. If I change netty channel to okhttp for our grpc communication which is not android though, will it have any impact in terms of performance or any other aspect? Will okhttp library will be able to handle high load transactions? So in one line is it advisable to use okhttp in place of netty for grpc communication?
Thanks, Bapi
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8003
RPCs should fail with UNAUTHENTICATED if fetching auth token returns HttpResponseException · Issue #8003 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This caused issue: googleapis/gax-java#965
Description
The following is what happens.
If refresh token is invalid, then auth lib will throw an HttpResponseException like the following
Note that HttpResponseException is subclass of IOException, but we shouldn't retry on HttpResponseException. So the correct implementation would be:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8004
Okio 2.x incompatibilities · Issue #8004 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux and macOS, built with Bazel from sources using the tools provided in this repo, rather than through a Maven dependency. The same repo contains an Android app using OkHttp3 (4.9.1), which depends on Okio 2.8+.
What did you expect to see?
What did you see instead?
buffer.readByte() now throws an exception, which causes a compilation error as it's not caught or thrown by readUnsignedByte(). This points to incompatibilities between Okio 1.x and 2.x, and makes adopting gRPC-Java in any repo using "recent" versions of OkHttp an issue. OkHttp3 has been depending on Okio 2.x since its 4.0.0 release.
Steps to reproduce the bug
Depend on both OkHttp3 4.x and gRPC-Java at the same time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8009
XdsNameResolver does not handle resource revoked and then recovered correctly · Issue #8009 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If LDS resource is revoked, the xds lbs will be shutdown and switch to empty service config and pick_first, but when exactly the same resource is recovered after revocation, shouldUpdateResult is always false, and therefore updateResolutionResult() is never called and new service config is never generated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8014
grpc.ServerCall.isReady() never becomes fails even if the client doesn't request any value. · Issue #8014 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
linux open jdk 1.8
What did you expect to see?
isReady becomes false in case of back pressure.
This would stop the stream from sending new messages on the server side.
What did you see instead?
isReady never becomes false.
Steps to reproduce the bug
I made a simple serverCall handler (which is used in a bigger project where automatic codegen happens)
This handler sends messages until isReady() is false. But after adding some logging i noticed that the call.isReady never becomes false.
At the client side for the testing purpose i only call call.request(1) once and never call it again.
Here is a blocking example of what i've implemented in my code generator runtime.
I know that grpc uses a netty buffer (32kb) so i made sure that i use big messages to try to make it backpressure.
Hence i send messages with 10000 ints and send 20000 of them with a array of value 10000000 to avoid variableint to kick in.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8016
Tracking issue for io.grpc.xds.CsdsService being experimental · Issue #8016 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8022
Binderchannel (io.grpc.binder.*) is experimental. · Issue #8022 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BinderChannel, as specified in gRFC L73, and implemented in the io.grpc.binder package, is experimental.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8024
Tracking issue for AdvancedTls-related API being experimental · Issue #8024 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This includes:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8025
How many clients can supported to a single Server? Something goes wrong in my stress testing. · Issue #8025 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Each Client build a ManagedChannel and create a newFutureStub & biStreamStub on this channel.
When my clients count is below about 23K , everything  goes well， cpu is 1， load is 0.5
But when I add more clients , server does not accept more clients, and the load rise to 5 ，cpu rise to 15%。
According to log, I found many abnormal log of ServerTransportFilter.
And the time bettween a connection ready &terminated is very close.
It seems that the load is cost at connection build & close.
Could anyone give some instructions? It bothers me for a long time.
Thank you very much.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8026
RoundRobinLoadBalancerFactory$Picker  index  start from 0 · Issue #8026 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use grpc in production,  and choice rr lb(RoundRobinLoadBalancerFactory$RoundRobinLoadBalancer),
because server release is a continuous process，when server nodes is releasing,  the Constructor  RoundRobinLoadBalancerFactory$Picker(Picker(List<Subchannel> list, @Nullable Status status)  will be called every time.
due to the index is alaways start from 0 ,  the qps sent to different nodes is unbalanced,  Cause fluctuations in availability when the server nodes is releasing.
Any comments are welcome.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8027
Using gprc with gradle 6.8.x gives deprecation warning for gradle 8 · Issue #8027 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
MacOs, Linux.
What did you expect to see?
No warnings about deprecation.
What did you see instead?
Steps to reproduce the bug
Not much to say, simply run with current gradle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8033
Service unavailable error after server start() was called · Issue #8033 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
MacOS BigSur 11.2.3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8034
An illegal reflective access operation has occurred · Issue #8034 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Windows 10, jdk-1.8
What did you expect to see?
grpc server up and running with no warnings
What did you see instead?
Steps to reproduce the bug
Implement a grpc service
Run the service and when the server accepts the grpc request from client, it responds with above warnings
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8037
grpc-auth's unit test fails with google-auth-library 0.25.X · Issue #8037 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Background: I'm surveying library compatibility across Google Java libraries.
I haven't figured out whether this is a bug in grpc-auth or google-auth-library.
What version of gRPC-Java are you using?
What is your environment?
Mac
What did you expect to see?
All tests pass
What did you see instead?
It seems the problem started after google-auth-library 0.25.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8049
Does not build on FreeBSD · Issue #8049 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
freshly cloned
What is your environment?
openjdk version "1.8.0_282"
OpenJDK Runtime Environment (build 1.8.0_282-b08)
OpenJDK 64-Bit Server VM (build 25.282-b08, mixed mode)
What did you expect to see?
build the library
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8050
Is it ok to use the gRPC-level proxying example? · Issue #8050 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I noticed there is an example for gRPC level proxying* that was never merged and was wondering if it is ok to use as a reference?
Thanks!
David
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8053
FutureStub cancelled in server call · Issue #8053 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.34.1
What is your environment?
Windows8 jdk1.8.0_202
I have two server ,and they both have same two grpc method(sayOne,sayTwo) ,
when server1 call the server2's sayOne method with FutureStub,
and in server2's sayOne method,it call server1's sayTwo method with FutureStub,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8057
rpc failure - java.lang.NoSuchMethodError: io.netty.buffer.PooledByteBufAllocator · Issue #8057 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
openjdk 11.0.5 2019-10-15 LTS
What did you expect to see?
Successful rpcs.
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8058
Off-heap memory grows without bound using streaming api · Issue #8058 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
My grpc-java server off-heap memory grows without bound.
Other information
Server-side streaming RPC for chat service.
Connection over SSL, SSL offload is processed on load balancer.
Load is not so high
I didn't apply flow-control.
Total client count is limited; it doesn't really differs that much between the time span.
Server keepalive configurations
Every 3:00 at night I perform onComplete() against all the StreamObservers on the server; Chat service is not served this moment.
Client randomly gets INTERNAL: RST_STREAM closed stream. HTTP/2 error code: INTERNAL_ERROR from LB, so I guess there'll be some broken connections left on server side.
I know this load balancer issue is unusual; It's under inspection.
Mobile clients abruptly disconnect from server for various reasons and reconnect to server; I guess there'll be some broken connections left on server side here, too.
Possibly weird connection misuse on clients might exist; i.e. unexpected multiple connections with streams
I get io.grpc.netty.shaded.io.netty.util.internal.OutOfDirectMemoryError once memory reaches limit. Memory is configured with below:
Some observations
Couldn't find memory leak with option below
Once the memory is grown it doesn't drop even after the 3:00 onComplete() event; I expect connection related resources will be freed after the connection being idle.
There was one moment memory dropped, with below error; And I guess this triggered the memory release.
As I've tested,
After getting connected and the stream got open from the server-side, calling onComplete() after the keepalive period server sends OUTBOUND GO_AWAY.
However when I open the connection and stream then kill the process abruptly, server never sends OUTBOUND GOAWAY.
Here're my questions:
Is it sane not sending OUTBOUND GO_AWAY after abruptly killing the process? Do the resources get freed after the keepalive period or any other period of time?
What should be the reason memory getting not freed even the service is not in use and StreamObservers all onCompleted()?
If it's all about unfreed broken connection resources, will maxConnectionAge with maxConnectionAgeGrace help this situation? With these options, I see GO_AWAY with normal connections however don't see any log with abruptly disconnected connections.
I expect unreferenced StreamObserver objects and related resources in direct memory to be garbage collected. Should I explicitly call onCompleted() or onError() for resource release?; I've actually calling onError() and onCompleted() on all StreamObservers for termination however asking just in case.
Is there any chance this is caused from client's grpc library?
Figure: Chat service was active between 4/3 12:00 and 16:30 and memory never freed. Chat service resumed at 4/4 16:00. Memory growth trend looks like exponential.
I'm sorry not providing any source code here, if you need a reproducible source I'll get it ready; the original source is on production so I can't provide it this moment.
Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8070
How to catch the threadpool RejectedException in the grpc server side · Issue #8070 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How to catch the threadpool RejectedException in the grpc server side? Reference issue: #636
For example, I have below setting for the grpc server executor: corePoolSize=2, maxPoolSize=4, queueCapacity=2. When the client has more than 6 requests, the server executor theadpool may throw TaskRejectedException, like:
I have tried
but both does't work.
Can someone please suggest where can I catch this kind of exception? Thanks a lot in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8071
suspect memory leak in off-heap · Issue #8071 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
My grpc-java client off-heap memory grows.
server: grpc-java 1.28.0
My application is processing image data. For example, ocr, resize, and other image model processor. Use grpc corresponding to service.
I catch this case. JVM heap is normal. But native memory leaks with time.
USE JVM NMT setting, I see Internal memory grows higher.
Suspect native memory leak.
In addition, USE linux method, SMAPS all memory. I can find many (2-15M) memory.
Finally, dump suspect memory, find many grpc request and response info(contain image data).
Can you help me? Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8076
How to transform nullvalues as java pojo fields with protobuffer? · Issue #8076 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is this library supports null as default value, right? but google protobuffer dosen't, you know.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8077
Upgrade grpc netty due to security risks · Issue #8077 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
In grpc 1.37.0 it seems like there is a security issue as below.
file entries are added to the 'DeleteOnExitHook' object but not properly removed when processing POST requests that are 16 kB. This may allow a remote attacker
to exhaust available memory resources, potentially resulting in a denial of service."
Do you have any plan for upgrade grpc-netty (or grpc-netty-shaded) to a new version for netty-codec-http:4.1.53.Final?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8080
[Help wanted] io.grpc.okhttp.OkHttpClientTransportTest fails in Mac and GitHub Actions · Issue #8080 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In master, I cannot build :grpc-okhttp module because OkHttpClientTransportTest fails in my Mac (Mac OS 11.2.3) and GitHub Actions (link).
Therefore I think I'll need to setup something for the failing environment to make the test pass.
While I continue to dig further, I appreciate if anyone know the prerequisite for OkHttpClientTransportTest.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8083
How to send big packagge through gRPC. · Issue #8083 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I call API from other service by gRPC, sometimes the return data is very big, suppose to be 200-300K, I found it may cause the service disconnected and my client application will get error when next time call the API. in this case How can I improve.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8086
Generated annotation Java11 · Issue #8086 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
MacBook m1 Jdk 11
What did you expect to see?
Generated annotation from javax.annotation.processing.Generated
What did you see instead?
that's my build file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8088
Migrate to explicitly refresh name resolution by load balancer · Issue #8088 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently each subchannel implicitly refreshes the name resolution when its connection is broken. That is, this feature is built into subchannel's internal implementation. Although it eliminates the burden of having LoadBalancer implementations refresh the name resolution when connections to backends are broken, this is gives LoadBalancer no chance to disable or override this refresh.
We'd want to let LoadBalancer manage refreshes explicitly. The API has already been there for a long time: LoadBalancer.Helper.refreshNameResolution(). During the transition, SubchannelImpl will check if Helper.refreshNameResolution() is called when its connection is broken. If not, it will still refresh the resolution and log a warning. This will be removed in the future and LoadBalancers are completely responsible for triggering the refresh.
As a side effect of this check, LoadBalancers that intentionally do not want the refresh (e.g., xDS) will cause the warning. So we are adding a temporary LoadBalancer.Helper API, ignoreRefreshNameResolutionCheck() to help the transition. It's been marked as deprecated, xDS should be the only LoadBalancer implementation that uses it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8092
ServerWrapperForXdsTest.delegateStartError_shutdown is flaky · Issue #8092 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServerWrapperForXdsTest.delegateStartError_shutdown
value of: getCurrentServingState()
As confirmed by @sanjaypujare
It's quite possible a flake - there is
Either I should increase the sleep time or find another way to make it less flaky and deterministic
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8094
Runtime exception when execute ManagedChannelBuilder.forAddress() · Issue #8094 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have some problems when i create grpc ManagedChannel.
when i run jar file, I keep getting the following error..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8097
More accurate Status description when at MAX_CONCURRENT_STREAMS limit and GOAWAY has been received  · Issue #8097 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As described in #8020 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8118
:grpc-xds:test is flaky on ARM64 Linux · Issue #8118 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A bunch of test cases is highly flaky (almost always fails) when run on arm64 linux (both under real machine or emulator)
run buildscripts/run_arm64_tests_in_docker.sh to reproduce under an emulator.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8120
Inconsistent server-side error in ServerStreamTracer vs ServerInterceptor · Issue #8120 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux, OpenJDK 1.8
What did you expect to see?
In a bidirectional streaming service, I'm observing different a status passed to ServerCall.close(Status, Metadata) versus the status passed to ServerStreamTracer.streamClosed(Status) when a misbehaving client is abruptly terminating the connection (without sending any sort of cancel or reset).
What did you see instead?
The server has a logging interceptor which intercepts the ServerCall.close(Status, Metadata) method and logs the status. The status seen here is Status{code=CANCELLED, description=Cancelling request because of error from client., cause=null}. We also have a ServerStreamTracer installed on the server, but the Status passed to ServerStreamTracer.streamClosed(Status) is Status{code=UNAVAILABLE, description=connection terminated for unknown reason, cause=null}.
Steps to reproduce the bug
I have a minimal reproducer with some instructions here.
If the client is terminating the connection then I suppose there really is no true status (either from the server or from the client). So I could be convinced that either of these Status codes would be valid. What really threw off our metrics and sent a couple of engineers down a debugging rabbit hole is that we couldn't correlate any request logs on the server (being logged from the ServerInterceptor) with the status metrics being emitted from the ServerStreamTracer. So I think regardless of what Status is ultimately reported for a abruptly closed connection, it should at least be consistent between these two sources.
This may also be related to #7558 .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8122
Request received RST when nginx reload · Issue #8122 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.35.0
What is your environment?
What did you expect to see?
When continuously requests a grpc server (tensorflow serving) behind nginx with for loop, the nginx is reloading. nginx fork new sub process to handle new request, the prior sub process exit util the current request finish, then client stub will create a new channel/connection to process remain requests.
For example, When python client sends a request to the grpc server, nginx will produce a FIN/PSH/ACK flag packet before sub process exited. Then the client will send FIN/ACK to nginx and close the request. Finally, python grpc client will reconnect to nginx to handle the remaining requests.
What did you see instead?
When nginx reloaded, the prior sub process log 200 OK to nginx access_log, while the grpc-java client threw an exception below:
nginx sent RST flag packet to java client and has no FIN flag packet when use wireshark captured the tcp packet.
Steps to reproduce the bug
use for loop to request a grpc server continuously (like tensorflow serving) behind nginx
reloading nginx at the same time
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8124
about grpc client call server overtime question · Issue #8124 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
first use grpc
how set the grpc client call server overtime
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8125
ServerCall attributes for security accounting · Issue #8125 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For implementing server-side access control, we retrieve the Authentication information using a ServerInterceptor.
In addition to the client credentials (retrieved from the headers Metadata), we need the client's address.
The 'remote-addr' Attribute is provided using the ServerCall's getAttributes.
However, this API is marked experimental, and the presence of the 'remote-addr' attribute is nowhere guaranteed.
Is there a reliable way to determine the client's remote address, as it is an important information for security control and accounting ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8135
Aarch64 tests are flaky due to being slow · Issue #8135 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
StressTestClientTest timeout:
There was also one tool failure, but I'm guessing that was a kokoro issue so let's ignore it for now:
There have been 6 runs, so that puts failure rate at 2 out of 5 so far. We've had plenty of "tests execute excruciatingly slow" issues in the past that took a long time to resolve. I'm concerned this may just be the tip of the iceburg.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8136
Retry in bidirectional streaming · Issue #8136 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am utilize gRPC Java to wrap a leagcy system. There is one use case is the payload size for request / response could be 1~2 gigabyte. One proposal is chunk request / response into small binary blocks and transport them by bidirectional streaming.  We would like the client could retry certain message if any expeption happens on server side.
I found some questions are similar to the problem we have.
The "How to get the failed message to retry," is the exact question I have. which method should I
Way to implement a fail-over client (especially for bidistream call) #5822
In this question
"In gRPC the entire RPC/stream is what would tend to be retried/failed-over, not individual messages. If some of the messages of a stream may fail while others are fine, then 1) it may be an inappropriate use of streaming or 2) you need to handle this at the application-level and need support from the streaming RPC schema. There is no generic metadata mechanism per-message in a stream." commented by ejona86, it looks like reasonable, but our request / response payload size is exceed maximum gRPC payload limitation (2^32, right?).
How could I make gRPC rety works on message level? or trigger gRPC build in retry (request level) when client StreamObserver.onError?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8142
Unexpected GOAWAY · Issue #8142 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am experiencing some strange behaviour when reading >100 streams sequentially and issuing cancel when done with a single stream.
If I do this on <100 streams things are fine, if I do it on >100 I get:
Something tells me that it has to do with MAX_CONCURRENT_STREAMS or some sort of race condition, because if I enable DEBUG log level then I suddenly hit that error when reading ~185 streams.
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
No failure
What did you see instead?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8143
Load balancing with ManagedChannel and name resolver · Issue #8143 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have been using the LinkerD proxy in a kubernetes cluster to do gRPC load balancing over a cluster IP replica set of pods.  And am seeing that we already have the ManagedChannel class has the functionality to load balance provided the same cluster IP host name.  Are there APIs usable on the ManagedChannel class to indicate more advanced tweaking around using round robin or weight based load balancing not only for the connection management but for request level load balancing as well?  I was trying to explore if possible to do away with using LinkerD and use the Managed Channel by itself. Thanks for feedback.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8158
Add class-retention @GrpcGenerated annotation to generated types · Issue #8158 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Static analyzers (e.g. lint checks and proguard) would like to reliably detect that code has been generated by gRPC in order exclude it from some types of validation. Currently, gRPC-generated types are annotated with the @Generated annotation, but this only has SOURCE retention and is unavailable to these analyzers.
Describe the solution you'd like
Additionally add an @GrpcGenerated annotation with CLASS retention to generated types.
Describe alternatives you've considered
Currently we inspect generated code for anticipated naming schemes and structure (e.g. endsWith("Grpc") & contains X fields) in order to determine if it is grpc-generated. Obviously this is fragile and relies on implementation details that it shouldn't.
Additional context
There is prior art for this kind of annotation in Dagger and AutoFactory (coming soon).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8164
INTERNAL: error in frame handler in Android · Issue #8164 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Configuration:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8174
grpc-default-executor threads stop processing tasks: how can we troubleshoot in such situation? · Issue #8174 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Do you know a good way to troubleshoot "grpc-default-executor" threads' status?
In apache/beam#14768 (comment), when I tried to upgrade Beam's vendored (shaded) gRPC dependency to 1.37.0 (or 1.36) from gRPC 1.26.0, I observed that some tests (GrpcLoggingServiceTest or BeamFnLoggingServiceTest randomly) do not finish. Borrowing Kenn's words, BeamFnLoggingServiceTest does the followings:
start a logging service
set up some stub clients, each with onError wired up to release a countdown latch
send error responses to all three of them (actually it sends the error in the same task it creates the stub)
each task waits on the latch
(GrpcLoggingServiceTest has similar structure)
Unfortunately it occurs only in Beam's CI Jenkins environment (which takes ~1 hour to finish). I cannot reproduce the problem locally.
From the observation of the trace log and the previous thread dump, it seems that grpc-default-executor threads stop processing tasks (the thread dump showed no "grpc-default-executor" threads in the JVM when the test was waiting for the them to count down a CountDownLatch) and one of the latches are not counted down. This results in the test threads waiting forever for the remaining latch. I cannot tell why the "grpc-default-executor" threads stop working (disappear?).
Do you know how to troubleshot such situation?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8177
How to restart bi-directional stream after network disconnection android · Issue #8177 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using AndroidChannelBuilder to build ManagedChannel and subscribe on android network changes. My rpc function works well after network reconnection, but on my bi-directional stream it dies forever both when I'm using CoroutineStub and StreamObserver. How can I restart bi-directional stream after network reconnection?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8182
SdsX509TrustManager throws when encountering unknown SAN type · Issue #8182 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This puts far too strict of restrictions on the SAN, as it prevents using any other types. Instead, unknown types should be ignored.
The method signature of verifyOneSanInList() already returns boolean, so it seems this will be easy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8186
Questions about error handling when Server crash · Issue #8186 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have gRPC bi-directional stream service using client side customized name resolver and load balancer. There is 10% possibilities the servers from cluster will crash after server get the request. I have to make the client retry the call iteratively
to the next server until I get the successful response.
The gRPC build in retry and my customized retry all work when server return corresponding status code like "UNAVAILABLE", however, the retry is not working for client time out with "DEADLINE_EXCEEDED" error.
Because I have to return a CompletableFuture, I could not resolve it by adding call into a loop (suggested from here: #8177 (comment))
I found retry could work if I put some code into onError, it looks naive.
How could I retry the call gracefully?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8187
Client Interceptor close not be triggered if call is successful · Issue #8187 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I create a client interceptor try to do some clean up task in onClose(Status status, Metadata trailers) method once the bi-directional call complete.
What I observed is, onClose(Status status, Metadata trailers) will be trigged when call failed (server return an error), but it will not be triggered if call is successful. It looks like ClientStreamListener.close not be invoked.
Is there any way I could have opportunity to know bi-directional call complete regardless successful or failed.
Here is my Interceptor:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8188
android: Disabled background data causes errors · Issue #8188 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, we have an app, that implements a widget that gets data using a GRPC stream on an update. However we have many instances where the widget fails to update where we are receiving:
I am assuming, when the app goes the background (due to the user's OS setting restricting background data) that the main grpc channel gets broken and needs time to restart, so when the widget wakes up to update, the call fails.
What is the best way to address this issue where we need block till the channel is ready to ensure the stream is successful?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8190
grpc hang due to the ELG thread placement of NameResolver refresh method · Issue #8190 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC are you using?
What operating system (Linux, Windows, …) and version?
Both Linux and Windows
What did you do?
Implement a customized NameResolver which extends NameResolver, let's call it "CustomizedNameResolver".  In the override refresh() method, it makes a grpc call to service discovery agent to retrieve a list of service instances and then resolve them.
What did you expect to see?
Expect the customized namer resolver works whenever being called and not hang in the existing grpc call.
What did you see instead?
grpc calls hang in the customized name resolver, particularly on the grpc calling inside overridden refresh() method.
We did a thread dump analysis, the problem is the grpc call inside overridden refresh() method is placed in gRPC ELG thread instead of worker thread, which in turns blocks all gRPC traffic causing grpc call hang indefinitely.
According to comment on refresh() method, the document does not clearly states that you must delegate a grpc call to a worker/background thread to not block other grpc calls.
First, is the placement of grpc call inside overridden refresh() method on the grpc ELG thread an expected behavior? Why cannot we delegate it to worker thread by default?
Second, some guides and explanations could be added to the document on NameResolver to further clarify.
Attach a thread dump on ELG for your reference. Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8191
Support for `s390x` (`s390_64`) machine architecture · Issue #8191 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
The protobuf compiler protoc supports a few non-x86 machine architectures such as aarch64, ppcle, and s390x which are not supported by the gRPC plugin protoc-gen-grpc-java:
Describe the solution you'd like
It would be great if gRPC-Java supported the same machine architectures as Protocol Buffers out of the box.
With aarch64 there's already a non-x86 architecture supported by gRPC-Java and maybe support for the other machine architectures could be implemented in the same way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8192
binder: BinderTransport doesn't communicate deadlines to the server. · Issue #8192 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should implement this in BinderTransport, likely by including the deadline in the call's prefix data.
Context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8195
Support for SocketAddress with ChannelCredentials in NettyChannelBuilder · Issue #8195 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
ChannelCredentials is nice. I'm creating channels via SocketAddress and would like to be able to use it.
Describe the solution you'd like
Support for SocketAddress with ChannelCredentials in NettyChannelBuilder. Have made pull request #8194
Describe alternatives you've considered
Not opening pull request #8194
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8196
How to call server by InputStream of MethodDescriptor in Grpc? · Issue #8196 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to call grpc server by InputStream of MethodDescriptor in client, but, I'm not success. This is my code:
the version of grpc-all dependency is:
In Server , My EchoServiceImpl extends EchoServiceGrpc.EchoServiceImplBase, override echo rpc method . I export inputstream service before build server.
In client, I create InputStream MethodDescriptor, and the RequestMarshaller is the inputstram ,but I'm not success util now. who can supply some advice ? thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8197
How to enabled Netty ChannelHandlers that provide JDK Flight Recorder events · Issue #8197 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In netty/netty#9777, I've been working on JDR Flight Recorder (JFR) events for Netty, mainly be creating a new channel handler.
What would be a good way to easily enable this for users of gRPC?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8199
Can't get hello-world-client to connect · Issue #8199 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just cloned the project according to the docs in the official quick start guide. I can start the hello-world-server just fine
Listening for transport dt_socket at address: 5005
I then open a second terminal window on my mac and execute the command to start the client. As you can see I get an Address already in use message. Any idea what I'm doing wrong? I have tried turning off my firewall also, just in case. Same results.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8203
GRPC Interceptor · Issue #8203 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there an example of a GRPC Interceptor to uniformly handle things like exceptions and so on
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8204
Improve BinderTransport's handling of compression. · Issue #8204 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BinderTransport currently ignores the compression setting.
Context: #8031 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8207
tsan, xds: AAD, I want to remove dead code in xds certificate provider · Issue #8207 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TSAN failure:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8208
UNAVAILABLE: GOAWAY closed buffered stream. HTTP/2 error code: NO_ERROR · Issue #8208 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Amazon ECS. With amazoncorretto:11 (jdk) as build and run image.
What did you expect to see?
Normal inter-service communication with no errors on client and server.
What did you see instead?
Errors with message UNAVAILABLE: GOAWAY closed buffered stream. HTTP/2 error code: NO_ERROR after every fixed interval in gRPC client.
Steps to reproduce the bug
Additional info:
Don't see these errors when the stub method is not doing much processing and just returning some dummy data.
The error rate is increased in following scenarios:
When we increase the rpm or concurrent calls to server
When the rpc method starts taking more time to process
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8213
Xds interop client hiccups with invalid EDS + "XdsUpdateClientConfigureService.Configure" · Issue #8213 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
PSM K8s framework
What did you expect to see?
The xDS client constantly sends RPC with or without XdsUpdateClientConfigureService.Configure.
What did you see instead?
After received XdsUpdateClientConfigureService.Configure, the client seems stopped sending any traffic, and there isn't any error log.
This behavior only occur when TD sends several empty EDS update and EDS update without IP before sending valid EDS. If the TD resources exist for longer period of time, there won't be any problem.
Steps to reproduce the bug
Create new set of TD resources;
Wait for the xDS config to populate, and a client channel become READY;
According to client logs, the RPCs status are OK;
Invoke LoadBalancerStatsService.GetClientStats to get an RPC distribution;
All RPCs in the LoadBalancerStatsResponse appears to be failed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8217
grpc-java 1.33.0 Futures.addCallback(responseFuture, ResponseCallback) delayed for 60seconds · Issue #8217 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue is in production environment.
grpc-java futureStub client sends request  grpc-cpp server. (futureStub is set withDeadlineAfter())
Futures.addCallback is used to wait for ResponseCallback. (sample code part)
Intermittently (not always, not easy to reproduce), ResponseCallback call is delayed ~60seconds.
client host is not in high load, threads are all alive.
is there any possible racing issue, or any magic wait for that 60 seconds, or my usage error?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8220
Can gRPC ensure client receive at most one response for each request in simple RPC ? · Issue #8220 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As I mentioned above. If I disable auto retry in client, can gRPC ensure client receive at most one response for each request in simple RPC ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8222
java.lang.IllegalStateException · May only be called before start while using enable Retry · Issue #8222 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
io.grpc:grpc-android:1.37.0'
What is your environment?
What did you expect to see?
I expect the the stream call to be retried if the call to start the stream fails.
What did you see instead?
A small percentage of our users are cashing with the following stack trace:
Our service calls are stream calls that are built like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8223
Endless empty message were sent by Netty server and caused OOM.   · Issue #8223 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version: 1.11.0
Dose it a bug or wrong usage ?
What happened ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8226
Bandwidth-Delay Product algorithm for OkHttp? · Issue #8226 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I have seen that Netty has a BDP feature - any plans to implement the same for OkHttp?
Apologies if this is not the best place to ask.
Many thanks in advance for your support!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8232
Grpc delay in sending response after onNext is called · Issue #8232 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used APM to trace my grpc request. In each of trace the requests I could see the time taken by actual computation and the overhead of the grpc was the same. Concretely, my application is taking 1-1.5ms for computation, while the grpc's overhead  seems to be 2-3 ms
I am trying to figure out the reason for the same. I enabled the debug logs and found this error
I don't think I am doing anything in the code so that such an error may appear. I do some computation and then call the onNext method. How can I debug the reason further?
2.For the server I am adding the following to my server -
Is there a documentation around how each might affect the times before and after rpc call execution.
If I am doing some heavy computational work before onNext, is there any different strategy that I can use. Currently, just doing the work and then calling onNext with response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8246
why the protoc-gen-grpc-java  pre-compiled binaries all in the format of exe？ · Issue #8246 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i need a protoc-gen-grpc-java pre-compiled binaries for mac os，i see osx but it is in the format of exe？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8249
Failed to start bean 'shadedNettyGrpcServerLifecycle' while spring boot application startup in a kubernetes pod with openjdk 8 alpine base image · Issue #8249 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Following exception is coming during the startup of spring boot application:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8252
Dealing with MAX_CONCURRENT_STREAMS limitations · Issue #8252 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
A few days ago, we ran into some issues when implementing a system that needs to open a few hundred long lived (~15 mins) bidirectional streaming RPCs. We noticed that most of these RPCs seemed to be intermittently frozen for long durations without any indication of why.
After some digging it turned out that we were hitting the MAX_CONCURRENT_STREAMS = 100 limit advertised by the server.
It seems like the behavior of grpc-java and netty in this case is to silently queue/buffer the RPCs until new HTTP2 streams are available.
I think this is happening in netty here.
From what I can tell, there doesn't currently seem to be any way of either accessing the limit sent by the server or surfacing the fact that we are hitting this limit on the channel.
Any ideas or options of how we could surface this information?
To work around the limit, I also think our only option right now is to create multiple channels. Since we probably don't want to open one channel per stream, I think we might need to do something similar to this ChannelPool.java (which unfortunately is package-private).
Is there anything in grpc-java that might help us here or is this approach our best bet right now?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8256
Requests with too many nested levels fail · Issue #8256 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running in to
Caused by: com.google.protobuf.InvalidProtocolBufferException: Protocol message had too many levels of nesting.  May be malicious.  Use CodedInputStream.setRecursionLimit() to increase the depth limit.
when parsing a request message that happens to have a very deep, nested structure. The marshaller ProtoLiteUtils.java seems to use the default of 100.
100 is of course a lot in most cases, but not when e.g. sending over serialized expressions of 30-ish deep function calls, which doesn't seem too unlikely (I ran in to it implementing the expression language CEL for example).
Is it possible to raise this limit a bit, or make it configurable?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8260
BDP PINGs are sent much more frequently than necessary · Issue #8260 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Client does not flood server with PING frames when autoTuneFlowControl is enabled (default)
What did you see instead?
Steps to reproduce the bug
Client makes request-response calls continuously such that there is constant number of outstanding requests.
Server is 3rd party GRPC implementation based on Netty.
It only acks received PING frames, and does not send own PING frames(ack=false).
Acked frames content is 1234.
Client and server are on the same host.
There is workaround NettyChannelBuilder.flowControlWindow(int) which happens to disable autoTuneFlowControl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8264
Unsupported class file major version 59 for android · Issue #8264 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried upgrading the version of io.grpc:grpc-all  from 1.34 to 1.35 or higher, I consistently get an error message :  Unsupported class file major version 59. With io.grpc:grpc-all:1.34.1 my android application run fine. From io.grpc:grpc-all:1.34.1, it isn't.
Who can help me please ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8269
Allow infinite transparent retries for buffered RPCs · Issue #8269 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Transparent retries are limited to only once per RPC. However, if the RPC was never made it to the wire we should consider allowing an unlimited number of transparent retries as a solution for our eager assignment of RPCs to transports and the impact of MAX_CONCURRENT_STREAMS.
This is actually a cross-language concern and shouldn't be done before it is agreed cross-language, but it seems highly likely and this can serve as a place for people to watch that are interested in the progress.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8272
The principle of GPRC explained · Issue #8272 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8274
Tracking issue for ServerCallExecutorSupplier API being experimental · Issue #8274 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Allows for defining an executor per-service or per-method. Discussed in #7874.
This does not replace ServerBuilder.execute(), which is a the default executor to run tasks before the point when executorSupplier can be called, or as a fallback executor when executorSupplier returns nothing.
If ServerBuilder.executorSupplier() is provided, ServerBuilder.directExecutor() is automatically disabled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8288
WithWaitForReady: Set retry timeout? · Issue #8288 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am using withWaitForReady to ensure calls will be done only once the channel is ready. What I noticed is, when starting my client some time before starting the server (for example around 30 seconds), it takes a while for the client to connect (e.g. around 10 seconds, sometimes a bit less/more) - and this seems to be exponential to the waiting time on the client side.
What I found in the gRPC documentation is this: http
But I am not sure how to tell gRPC that I want the retry timeout to be more constant/shorter - can you help? Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8300
Validation prevents integer value in service config · Issue #8300 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Parsing a service config like in this example, and passing it to defaultServiceConfig() on a NettyChannelBuilder (method is implemented on AbstractManagedChannelImplBuilder) should work.
What did you see instead?
Parsing a service config like in this example, and passing it to defaultServiceConfig() on a NettyChannelBuilder results in an IllegalArgumentException, saying the Integer type is not supported, from this validation code. If I pass a double, e.g. I put "5.0" instead of "5" in the json file, then it works as expected; however, the retry proposal specifies that maxAttempts must be an integer.
Steps to reproduce the bug
Pass a Map for a service config that contains an Integer value for maxAttempts to NettyChannelBuilder's defaultServiceConfig() method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8307
java.lang.IllegalArgumentException: Failed to load any of the given libraries: Issue #8307 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to run google translate API which depends on netty-shaded, but getting this exception:
I have seen some of the articles related to this couldn't find the proper asnwer. netty-shaded is available in class path
I'm using Java 8
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8309
Ensuring resource cleanup before class loader is closed · Issue #8309 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I use grpc-java (version 1.32.1) inside a Flink application. AFAIK, Flink dynamically loads user jars with different class loaders and attempts to release them once the job finishes. My job only uses clients with a ManagedChannel built like this:
which is closed at the end:
Leaving resources running can cause problems with metaspace memory in Flink's JVM if the cluster is used multiple times, so I'd like to know if I should perform additional steps to ensure all netty resources are stopped.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8310
UNAVAILABLE: HTTP/2 error code: NO_ERROR Received Goaway · Issue #8310 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
java version "1.8.0_91"
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
The java grpc client connects to the go grpc service (service grpc version 1.27.1). The above exception occurs. The service uses container deployment and nginx for load balancing. There is a high probability of this abnormal situation.
Of course, we are also working hard to find a solution, but there is no progress. Hope to get your guidance and help.
I will be very grateful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8311
BufferedReader in CertificateUtils.java (~line 68) not in try-with-resources block to ensure controlled release · Issue #8311 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
This was detected by a third-party scanning tool and flagged as a CWE-404 - Improper Resource Shutdown or Release
What did you see instead?
Proper release of the BufferReader
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8313
maxInboundMessageSize is not applied when app code has newer gRPC version than used in library · Issue #8313 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Library compiled with gRPC 1.26.0 (cannot be recompiled on demand)
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Run compiled Client with gRPC 1.39.0 in the classpath.
The program will print 4194304 but value 100 expected.
It seems this behavior was caused by fixing issue #7552
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8320
Server streaming flow controlling · Issue #8320 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Questions in brief:
Can I apply manual flow control in server streaming scenario?
Can setOnReadyHandler() be used in server streaming scenario?
I'm trying to implement server streaming flow control refering to manual flow control example. And upon description of ServerCallStreamObserver.disableAutoRequest() it is said:
Swaps to manual flow control where no message will be delivered to StreamObserver.onNext(Object) unless it is request() ed.
However as I understand, disableAutoRequest() shouldn't be used for server streaming as mentioned in doc:
... this method will have no effect. This is true for: ... MethodDescriptor.MethodType.SERVER_STREAMING operations.
so that upon my understanding neither disableAutoRequest() nor request() shouldn't be used in server streaming scenario. And if my understanding is correct, this means I can't use manual flow control in server streaming scenario.
So I read couple of github issues more and found that there was a guide:
If you avoid calling disableAutoInboundFlowControl(), then you won't need to call request() either. The main piece is setOnReadyHandler() and isReady().
So I was thinking to implement setOnReadyHandler(), however ServerCallStreamObserver.setOnReadyHandler() has a description:
On server-side it may only be called during the initial call to the application, before the service returns its StreamObserver.
which I understand this method should be used in bidi-streaming or client streaming scenario only; as server streaming doesn't returns its StreamObserver.
Do I have correct understanding? If not can you provide a short snippet for server streaming flow control?
So far, I've just applied isReady() like below:
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8321
gRPC Java Server Same StreamId for two different TCP Connections · Issue #8321 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Testing Use Case Java
I have attached the pcap file screen shot No.201 data packet from client1 and No.209 from client2 are using the same streamId=3 on the gRPC java server
Is there any option in nettyBuilder to have different streamId for connection from different clients?
I am thinking due to this some of the client(example: client1)stale TCP connection is not getting closed as client2 is active on streamID=3. Please suggest.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8322
Common interface for generated async stub and ServiceImplBase · Issue #8322 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
My server has multiple gRPC services running on the same VM. I would like to reuse the same client logic I have build on top of the stubs (higher level methods, error handling, retries, ...) for using in inter-service calls in the server side (within the same VM).
Describe the solution you'd like
If the generated gRPC classes for the async stub (client-side) and ServiceImplBase (server-side) would implement the same interface, it would be easier/cleaner for me to create a ServiceLoader for my client code, returning the appropiate implementation depending on the case (client-side based on async stub, server-side based on ServiceImplBase).
I would be happy to contribute to this.
Describe alternatives you've considered
Using server-side the regular stubs pointing to localhost, but I don't like the unnecessary marshalling and transport involved in it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8324
Support reactive-grpc · Issue #8324 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Reactive gRPC builds on top of gRPC's back-pressure support, to deliver end-to-end back-pressure-based flow control in line with Reactive Streams back-pressure model.
Describe the solution you'd like
Describe alternatives you've considered
Additional context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8329
AbstractClientStream - Received data on closed stream · Issue #8329 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux alpine image on a pod.
JDK 11
What did you expect to see?
no log messages
What did you see instead?
many log messages with message : AbstractClientStream - Received data on closed stream
Steps to reproduce the bug
I don't know how exactly to reproduce but with me, it is a persistent behavior when I pull async huge amount of messages 2-3 Million with 2-3Kb size from pubSub subscribtion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8330
ERROR i.g.n.s.i.n.u.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. · Issue #8330 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux alpine image on a pod.
JDK 11
What did you expect to see?
no errors
What did you see instead?
error message
Steps to reproduce the bug
I don't know how exactly to reproduce but with me, it is a persistent behavior when I pull async huge amount of messages 2-3 Million with 2-3Kb size from pubSub subscription.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8332
dependencies conflicts · Issue #8332 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The dependencies of protobuf-java and error_prone_annotations are conflicted as below:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8334
RPC seems to hang indefinitely · Issue #8334 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey! I'm hoping you might have some insights into what could be going on here, or any tips for debugging it better. We have a grpc client on version 1.36.2 and it seems like after some amount of time, threads that issued RPCs hang indefinitely. The calls are being issued with a blocking stub, and in this particular instance they are being wrapped in kotlin coroutines. Here's two traces:
Somewhat ironically, they both have the same elapsed time which seems to mean something happened to cause the whole client to stop processing RPCs. The above are colocated in the logs with GOAWAYs like such
Some added background notes as well:
A deadline of 60s is on all of these RPCs which doesn't help in this particular instance.
Datadog APM is attached so they are dynamically injecting some interceptors.
We have a jwt client interceptor which will make a blocking RPC call for authentication. I've always thought this wasn't the best thing to do, but I've tried to inject faults with it and can't reproduce this blocking behavior.
Any thoughts or debugging help would be much appreciated!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8335
context time out · Issue #8335 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm creating a blocking stub :
and then I start calling method in a loop:
but i got DEADLINE_EXCEEDED: context timed out When the timeout period has not expired
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8337
Use exact maven versions · Issue #8337 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Maven
What did you expect to see?
Developers and DevOps people that build CI/CD pipelines expect builds to be reproducible and deterministic. If we build a project today or next year (assuming the same exact commit id), we expect the same binary to be built. That is not the case with the grpc maven artifacts.
For example, snapshots are discouraged from being used in production builds because they can be overwritten with newer code or completely deleted; either changing application behavior or breaking the build.
What did you see instead?
When building the project using maven it will reach out across the network to check for a newer version of grpc to build with. This opens the project to builds that are not deterministic.
Steps to reproduce the bug
I have a maven project that uses grpc-okhttp, and I execute mvn clean install. Observe the output contains
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8338
message of client can't send to server · Issue #8338 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
android TV
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8348
Does grpc support adding more compression algorithms · Issue #8348 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In this issue #1704 discusses the issue of data compression. It seems that grpc does not intend to continue to do more work on data compression, but Compressor is used in MessageFramer.writeCompressed(), does grpc java encourage or allow the addition of more compression algorithms, such as brotli and zstd to improve compression performance, or continue to maintain the current compression algorithm without intending to do more work? thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8349
awaitTermination() should throw an exception when start() is not be called · Issue #8349 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Windows10 X64 OracleJDK8
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8353
Failed to resolve com_google_protobuf_javalite · Issue #8353 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
A successful resolution of com_google_protobuf_javalite
What did you see instead?
Steps to reproduce the bug
When resolving the internal deps, the above issue occurs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8357
Pin Netty versions for maven_install? · Issue #8357 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For the normal Maven Central releases we have netty-codec-http2 version-pinned:
This feels like an oversight on my part, but it also might be appropriate given the difficulty in overriding the dependency. maven_install doesn't have a built-in way to exclude transitive deps from particular dependencies; it only has a way to exclude an (unversioned) dep from all dependencies. I think that means the main solution for a user needing to override the version pin would be to remove it from the artifacts list:
That's not impossible for users, but is ugly. A macro would help though. It is nice that remove() fails the build if the entry is not present in the list and that the entry must include the version number.
That said, version pinning does nothing for Gradle users and we haven't seen many users reporting issues. That is probably strongly influenced by the heavy use of grpc-netty-shaded, but Bazel users don't see any shading and so would need to resolve any version conflict.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8364
xds: reuse load balancer instances across priorities · Issue #8364 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
We are currently experimenting with overriding round_robin with a custom leaf/child load balancer when using xDS (since neither grpc nor the control plane supports custom LB policies yet).
Our custom load balancer keeps track of additional state about each subchannel and tends to work better with more captured state.
While overriding round_robin seems to work, I've noticed an issue where our load balancer instances get periodically recreated (and thus loosing important state).
I've read through the code and my understanding is that the current implementation works something like this:
PriorityLoadBalancer creates a WeightedTargetLoadBalancer for every priority in the EDS response and partitions the groups of endpoints to each WeightedTargetLoadBalancer accordingly.
The WeightedTargetLoadBalancer looks at the target locality of each endpoint group and creates a child LB (like round_robin) for every such target if it doesn't already exist in this WeightedTargetLoadBalancer instance.
After that, the WeightedTargetLoadBalancer will remove all child LBs that target endpoint groups that are no longer present to it.
When the child LBs are removed in this case, all subchannels and underlying TCP connections get torn down and removed as well.
Since the control plane we use will move endpoint groups (targets) up and down in priority level during normal operation, this means that we also loose all load balancer state for those groups when this happens.
I've noticed a TODO comment here which would address the immediate issue by caching child LBs instead of removing them.
While I think this type of caching would help us a lot, I think there is an edge case where you'll have multiple load balancer instances targeting the same thing but from different WeightedTargetLoadBalancer instances.
This means that if fallback to a higher priority ever occurs, the load balancer wont have the state captured by load balancers in lower/higher priorities. Also, it could lead to redundant TCP connections since load balancers in lower/higher priorities already might have active and ready connections to the endpoints in some group.
So I think a more optimal solution is to only create and cache one Load balancer instance for every target and then reuse them across multiple priority levels. This would reduce overhead and help us persist important load balancer state both when priorities change but also if we ever need to fallback to another priority.
As to how exactly that would look I'm not entirely sure and it still might make sense to implement caching in WeightedTargetLoadBalancer as a first step regardless.
For this I might be able to help as well since this is fairly high priority for us.
We could probably implement some shared cache in our custom load balancer provider but it seems like it would make more sense to instead help with implementing some caching logic here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8373
xds: NPE on server-side when bootstrap lacking server_listener_resource_name_template · Issue #8373 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used an old bootstrap generator, so it didn't have xds_v3 as well and there was no log message.
CC @YifeiZhuang
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8380
The problem caused by "For a server that crashed and then recovered, the result of gRPC sending a request is always DEADLINE_EXCEEDED" · Issue #8380 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Environment
Our team is using gRPC to send requests from the client to the server.
I am testing whether the gRPC connection from the client to the server is still available after the server crashes and then recovers.
We did this test because we once found that after the server crashed for a while, even if it recovered, the request sent by the client via gRPC still kept returning DEADLINE_EXCEEDED.
In our client, unless the ManagedChannel is interrupted or closed, we will not re-create the ManagedChannel every time we request it. We will create one after the client is started and hold it forever. But every time we request, we will create a new stub from ManagedChannel to complete the request.
In the test, the  time of server crash is not short or long (I used the iptables command to simulate the server crash/recovery: iptables -A INPUT -s server-ip -j DROP / iptables -D INPUT -s server-ip -j DROP), for example, after the server was abnormal, I sent 20 requests and got the DEADLINE result, I immediately resumed the server, the situation mentioned above Appeared. But if I send only one request after the server is abnormal, and the server is restored immediately after getting the DEADLINE result, the above problem does not occur, and the server can return the result normally.
What's even stranger is that there is a thread in our client that detects the health status of the server. What this thread actually does is to create a new gRPC ManagedChannel to send a simple request to the server. At that time, after the server resumes, the result returned by this thread is normal.
I guessed that there was a problem with ManagedChannel, and then I used a tricky method. In the listener of the request result, if the request fails and the status code is DEADLINE_EXCEEDED, etc., I call ManagedChannel.enterIdle(). Then the problem of always returning to DEADLINE_EXCEEDED is solved.
However, our team believes that gRPC should have considered the recovery of client connections after server crashes. Then we focus on the gRPC retry we have been using.
Our retry configuration:
Could you please tell me why gRPC cannot restore the connection with the server ？
The retry function does not seem to be effective, or is it not applicable to the server crash situation described above?
I used the method of enterIdle to solve the problem by tricks, but what should I do correctly?
I saw the issue about getting retry logs, but I don’t know how to use the following APIs:
Can you give me the simplest call example? Please
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8383
RPCs start to fail as commands are no longer written to the wire after receiving 503.  · Issue #8383 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
I am using 1.23.0, however I can reproduce the issue on 1.39.1.
What is your environment?
What did you expect to see?
I would expect new RPCs to function normally and send messages to the wire.
What did you see instead?
We have a service which acts as a gRPC client and makes requests to several gRPC servers. Our client uses a single underlying channel and makes a combination of streaming and unary requests. The unary requests happen on a regular 5 second interval. It appears that once our client makes a certain amount of requests, the server gets unhappy and sends us an HTTP 503 / gRPC UNAVAILABLE (likely due to rate limiting). After we receive this 503 it appears that any following RPCs will fail since commands/messages are no longer being written to the wire.
These are the last messages that we see on the HTTP2 frame logger
When our code proceeds to make the next unary requests on the 5 second interval the HTTP2 frame logger is silent (with the exception of messages written on a totally different channel/target).
Originally we had no deadlines on these requests so these RPCs were hanging indefinitely (if I add deadlines the deadlines do work which is different from #8334). It appeared as if all of our threads executing gRPC requests were in a deadlock so I attached a debugger and took a thread dump. Every single one of the threads using the shared gRPC channel was parked in a WAITING state inside of waitAndDrain.
It took me a while to grok the code but I realized that these threads were essentially waiting for some Netty thread to parse the response from the server and enqueue some callback code for our blocking threads to execute. What was troubling to me is that the client was never even writing any requests onto the wire so surely  it would never receive any response and these threads would sit here indefinitely (unless a deadline was configured).
I continued tracing the code paths and debugging the code. I discovered that the new RPCs were getting legitimate stream implementations, ie. NettyClientStream and not NoopClientStream. I discovered that writes to a stream were enqueued onto a channel's WriteQueue. I verified that the WriteQueue was periodically flushing messages to the Netty channel.
For example, here is a create stream command that is being flushed. And it will not be loged by the HTTP frame logger.
In order to double check that the HTTP frame logger wasn't malfunctioning I decided to take a packet capture and noticed a void of packets (after the initial 503 failures) when there should have at least been packets sent every 5 seconds. Capture ends when I kill the JVM. Note: Packet capture was taken at a different time than above screenshot so port numbers aren't the same because its a different TCP connection.
I haven't gone through debugging the Netty pipeline yet but I figured I should post here before I go even further down the rabbit hole.
Steps to reproduce the bug
See above. Only able to reproduce with this particular target service which sends us 503s at certain request rates. Luckily it is extremely reproducible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8384
It is strongly recommended to reduce some internal classes. The code looks too chaotic · Issue #8384 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is strongly recommended to reduce some internal classes. The code looks too chaotic,
for example
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8385
Method grpc.health.v1.Health/Watch is unimplemented · Issue #8385 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
why grpc.health.v1.Health/Watch is unimplemented ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8389
large file transfer with gRPC · Issue #8389 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have C++ gRPC client and Java gRPC server.
Is gRPC right choice to transfer large files (>50 megabytes) with client side streaming ?
Why I am asking this is because gRPC is meant for small message transfer between microservices, right ?
Do we have any comparison between HTTP/1.1 multipart upload vs gRPC streaming in terms of performance and RTT ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8391
ServerSecurityPolicyTest is flaky · Issue #8391 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The test has been flaky since I added binder to the android CI in #8365.
Looks like the test would flake if some other test that uses SecurityPolicies runs before ServerSecurityPolicyTest, as SecurityPolicies.MY_UID would then get loaded to the "wrong" UID and ShadowProcess.setUid(MY_UID) within the test wouldn't impact the class. This isn't too surprising of a test bug since many test runs in Bazel run in separate JVMs.
We have StaticTestingClassLoader from context's test which could maybe help. But I don't know how compatible it is with Robolectric and there's enough tests that it'd seem annoying to use.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8394
Transparent retry may not always be triggered · Issue #8394 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If when NettyClientTransport starts to call newStream(), we have server send GOAWAY, then the client should transparently retry. However, sometimes the client is running at, and because it's the old  3-arg transportReportStatus method, the client would not transparently retry.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8396
Error: Could not resolve all files for configuration `:compileProtoPath` · Issue #8396 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi everyone;
How to use and quick start grpc-java?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8397
io.grpc.xds.SharedCallCounterMap.cleanQueue() NullPointerException · Issue #8397 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: v1.38.1
It happened to grpc client with xds enabled:
I failed to find the exact steps to reproduce this exception. But it almost always happens in my long-running server application.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8404
There are a large number of internal classes in grpc java source code. It is strongly recommended to move to a separate java file · Issue #8404 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are a large number of internal classes in grpc java source code. It is strongly recommended to move to a separate java file.  A large number of internal classes make the code look very messy
for example:
There are many more,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8409
there should be 1 source of truth regarding whether a call is cancelled · Issue #8409 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
openJdk-11, ubuntu
What did you expect to see?
StatusRuntimeException should be thrown consistently by responseObserver.onNext(...) if responseObserver.isCancelled() == true
What did you see instead?
unless a server dispatches work to other threads, an exception is not thrown by responseObserver.onNext(...) regardless of responseObserver.isCancelled() == true.
This is due to the fact that there are 2 competing sources on whether a call was cancelled:
responseObserver has its own additional cancelled flag  that is checked by onNext(...). This flag is set by listener.onCancel() and as listener can be called by at most 1 thread concurrently, the flag is not set until a user method exits.
It seems that observer's additional cancelled flag does not bring any value and is completely redundant: I think it should be removed and instead responseObserver.onNext() should be checking cancellation status directly by call.isCancelled() the same way responseObserver.isCancelled() does.
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8413
gRPC Application project with grpc-java plugin version:1.37.0 and higher does not build on Windows · Issue #8413 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Micronaut Version 2.5.12
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8414
Update Cronet to 92.4515.131 · Issue #8414 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
cronet-embedded is being updated again. 92.4515.131 was published recently:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8416
Update netty to 4.1.67 · Issue #8416 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
NexusIQ shows a vulnerability in netty-codec.
The version 4.1.66.Final and later has none.
Fix part of Netty 4.1.66.Final: netty/netty#11429
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8419
How do I specify a specific IP address for the GRPC server · Issue #8419 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
example：add ip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8421
Upgrade Android plugins to 4.x · Issue #8421 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Apparently the new versions require using a gradle.properties with specifically set values, for all practical purposes. This will cause trouble because gradle.properties is generally reserved (at least by us) for local options specific to that developer. But now it needs to contain:
I don't know what to do about that; add gradle.properties to the repository and accept it will probably be accidentally changed or require devs to create it themselves. The CI can probably just pass -P on the command line to gradle if need be.
And then there are these further changes:
This warning, other than being completely incomprehensible, appears to be benign. It seems likely to be an upstream issue, and looks similar to android/android-test#573
But after that there are compilation failures due to missing classes so we'll need to migrate our code or figure out new dependencies. And when doing that we need to make sure it is compatible with androidx migration internally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8423
add a flag to ServerCallStreamObserver to make onCompleted() throw StatusRuntimeException if the call was cancelled · Issue #8423 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
It is currently a bit cumbersome If a gRPC method needs to attempt to roll back effects of a call when the client cancels and work is not dispatched to other threads:
responseObserver.onNext(...) will not throw an exception neither in unary methods (they don't throw on cancel by design) nor in server-streaming (due to  issue #8409 ). Furthermore responseObserver.onNext() may never be called by some server-streaming methods that return a stream of length 0 but need to attempt to roll back side-effects of processing client's request nevertheless.
onCancelHandler cannot be used as it will be called only after the method exits, due to listener's "called by at most 1 thread at a time" contract.
Describe the solution you'd like
If the general idea of this feature request is accepted, I will be happy to prepare a proper PR myself starting from the above draft.
Describe alternatives you've considered
Currently in cases like this, the easiest solution is to keep checking responseObserver.isCancelled() before responseObserver.onCompleted() (and in case of server-streaming calls possibly additionally before each responseObserver.onNext() if it's desirable to interrupt processing ASAP). This however is kinda C-style: client cancelling is an exceptional situation, so I think it's cleaner to handle it in a catch block rather and keep the main positive code-path clean.
Context.addListener() can probably be also used, but as the listener will be called by another thread, it will have to set a specially designated volatile/synchronized flag, which the code of the main positive case will need to examine before responseObserver.onCompleted(). Therefore it's not better than the above solution using responseObserver.isCancelled().
Additional context
Even for methods that do dispatch work to other threads, using exception rather than onCancelHandler is a cleaner solution in some cases: as cancellation may occur in the middle of a call, onCancelHandler similarly as a listener set by Context.addListener() described above, often needs to set a specially designated volatile/synchronized flag to stop further processing, that again needs to be checked by the code of the main positive case, while an exception interrupts the main positive code-path with much less hassle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8424
how to set the value of method "setSampledToLocalTracing" when code generated · Issue #8424 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How to configure the value of dynamically generated code setSampledToLocalTracing(false) to be false
here is my proto file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8428
Grpc netty tls information · Issue #8428 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Team,
We want to understand the tls usage for grpc-netty, netty-handler, boringssl. Grpc java uses these library for secure tls communication if I am not wrong.
I want the informations like
Does this implement SYMMETRIC algorithms and key lengths greater than 56 bits?
Where and for what purpose is this crypto being used
What is the crypto algorithm is used for TLS communication
I know the questions are not an usual ones but we want these information to ensure the security concerns.
Hope to hear from the experts :-)
Thanks, Bapi
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8431
Received DATA frame for an unknown stream in bi stream · Issue #8431 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a grpc bistream in my application. In the happy path, the server will call onCompleted() of the response stream and then the client will call onCompleted() of the request stream.
Most of the times things work fine, but every once in a while I am getting a big scary stack trace like
What does this mean, is it not appropriate for me to call onCompleted() of the request stream after onCompleted() of the response stream? When I remove the onCompleted() call in the request stream the error does not occur.
In my testing, it seems as though it is acceptable to have the requestStream closed but the responseStream open, i.e. the client call onComplete but the server continue to call onNext, in that these messages are received by the client. But the reverse is not acceptable, i.e. the server calling onComplete and then the client calling onNext in that these messages are not received by the server. So that in grpc the stream can only be half closed in one way? Is this correct and where is this documented?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8432
Add ConnectivityState.TERMINATED or change SHUTDOWN to notify after gRPC threads end. · Issue #8432 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
We shutdown ManagedChannel asynchronously so need an asynchronous callback for determining when a channel has been completely cleaned up. This can be important for when libraries are dynamically unloaded / loaded at runtime as the order matters. Currently there is only ConnectivityState.SHUTDOWN, which means no new RPCs will be serviced, but the connection may still be operating. Notably, there is almost always a GOAWAY frame sent after this connectivity state is reached.
Describe the solution you'd like
Add ConnectivityState.TERMINATED to notify after connections have been completely closed. This would be sent after all gRPC threads have been ended.
Describe alternatives you've considered
ConnectivityState.SHUTDOWN could possibly be changed to report after gRPC threads have ended - it's unclear to me what the use case is of being notified of shutdown before this has happened but there may be a use case, in which case a new enum is needed instead. That being said, because it's only a timing issue, it would be rare to break applications by changing the behavior this way too and could be viable.
Additional context
We use gRPC in a library and have user reports of issues due to not being able to know when the gRPC library has finished shutting down.
open-telemetry/opentelemetry-java#3521
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8434
API to eagerly send headers from a service · Issue #8434 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'd like to conditionally send headers from my server to a client at the beginning of a call. I have constructed an interceptor that will invoke ServerCall.sendHeaders(), and the client does receive those headers. My confusion is that after sending the headers the call will always immediately fail when the server tries to send a message, since ServerCallStreamObserverImpl always tries to send headers again in its implementation of onNext():
Is this the recommended practice or is there a way to indicate that gRPC should not proceed to attempt to send back empty headers?
I also realize that I'll have to consolidate any future interceptors that want to send back metadata as well since obviously any downstream attempts to send metadata will fail with or without this no-op - either the call will terminate or I'll be dropping it.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8451
Channel panic if receives CDS update with RING_HASH lb policy · Issue #8451 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since v1.37.0, the client channel would panic if receives CDS update with RING_HASH lb policy.
The right behavior should be still NACK the CDS update if RING_HASH is not supported. But the NACK logic was removed since v1.37.0.
The panic issue is fixed by #8438 in master and backported in v1.40.x, v1.39.x, v1.38.x, and fixed by #8440 in v1.37.x. The fix was fallback to round_robin if RING_HASH is not supported.
However, we should still fix the behavior by NACKing the response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8453
HTTP/2 error code: COMPRESSION_ERROR · Issue #8453 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I run the basic example on our k8s cluster, I'm getting the following error:
Client stacktrace
and after code runs, successCount is 10 and failedCount is 10. When I run the client call, it works fine and server returns data fine, but when I run it again, it fails and sends this error.
When I try code agains local server, it works fine without any problem, it happens when I deploy the service to k8s.
Is there any bug around this? Or am I doing something very wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8454
AdvancedTlsTest.onFileReloadingKeyManagerTrustManagerTest is flaky · Issue #8454 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8455
Panic! This is a bug! · Issue #8455 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Red Hat 4.8.5-28  jdk1.8
this project deploy in k8s
What did you expect to see?
What did you see instead?
Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs).
Steps to reproduce the bug
Only twice in recent months, in addition 。I can not reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8460
gRPC exporting TLS keys -supported version combos · Issue #8460 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Im following the following guide to export TLS keys for my gRPC traffic:
But when adding the newWireSharkSslMasterKeyHandler(), the TLS connection fails with a key length error, so adding the  newWireSharkSslMasterKeyHandler()  is causing a corruption of the initial key exchange.
The first question is: what are the actual supported combination versions listed here that support the above guide?:
Im using the following combo:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8463
RETRY_DELAY_PER_CALL is not recorded correctly if deadline exceeded while call is in backoff · Issue #8463 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current CensusStatsModule is not able to correctly record the delay caused by an ongoing backoff if/when deadline exceeded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8467
Tracking Issue for setOnCloseHandler being Experimental · Issue #8467 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To resolve issue #5895 PR #8452 has been created that adds new ServerCallStreamObserver.setOnFinishHandler(...) method.
The handler is called by Listener.onComplete when the call is finished correctly from the server's point of view: either onCompleted() or onError(Throwable) has been called, all the messages and trailing metadata have been put on the wire and the stream has been closed.
Several names were proposed for the handler:
onCompleteHandler : derives name from Listener's method but causes confusion with StreamObserver.onCompleted()
onSuccessHandler : my initial idea, yet also confusing as it can be called also after StreamObserver.onError(...)
onFinishHandler : current approach, matches well the verb from method's javadoc
onFinalizeHandler : would also probably do well
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8470
Encounter io.grpc.StatusRuntimeException frequently · Issue #8470 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Client:
OpenJDK Runtime Environment Corretto-8.292.10.1 (build 1.8.0_292-b10)
Server:
Use Golang to build the grpc server.
What did you expect to see?
The grpc connection is stable.
What did you see instead?
I encountered StatusRuntimeException frequently during the client receives data from the server, And the stacktrace is the following:
If I tried again after this error occurred, then there was anthor error:
Steps to reproduce the bug
I encountered the error frequently, with no special reproduction steps.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8473
Cross compiling the codegen plugin for linux · Issue #8473 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a old fork of grpc-java and are now updating it to a (relatively) newer version.
There used to be a Dockerfile in compiler/ where we could build a grpc-java-deploy image. Here's the old readme that talks about this process.
I can compile the mac binary locally but not very familiar with cross compiling for linux. Would appreciate any help or pointers!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8476
it should be documented that calling `requestObserver.onError(...)` on the client side cancels the call instead of transferring error status · Issue #8476 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
openJdk-11 on ubuntu
What did you expect to see?
in case of bi-di methods (and probably also streaming-client-unary-server), when a client calls for example requestObserver.onError(Status.INTERNAL.withDescription("desc").asException()); the  server should receive all messages scheduled for transfer by the client (with requestObserver.onNext(...)) prior to the call to requestObserver.onError(...). After that the server should receive a call to onError(...) with a Status(Runtime)Exception with identical status code (INTERNAL) and description ("desc") .
What did you see instead?
results of clients calling requestObserver.onError(...) are the same as if the call was cancelled: most recent request messages don't get transferred to the server and whatever status and description the client sets, the server always receives Status.CANCELLED and "client cancelled" description.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8481
Log gRPC request payload as soon as the server receives it · Issue #8481 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My objective is to log the gRPC request payload as soon as the server receives it before doing anything else.
This is how I write my ServerInterceptor implementation in an attempt to log the request payload.
In the normal occasion, when everything is good, both the logging in the body of interceptCall and the onMessage method gets triggered. However, in the unexpected circumstances, e.g. the DB that the gRPC server communicates to, is down, the onMessage method does not get triggered. The request goes into the val serverCallListener = next.startCall(call, headers) and results in an exception and finally, returns a response to the caller.
Now, you can see that I only have access to the request payload (or message) inside the onMessage method. How can I access the request payload before that, i.e. in the body of interceptCall?
Library versions
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8495
Netty server loses exception during handshake · Issue #8495 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Recently when debugging a server-caused handshake failure, we enabled logs and saw:
But there was no earlier failure. This seems to be a problem introduced by the client/server protocol negotiator unification and WriteBufferingAndExceptionHandler. On client-side we issue a fake write (that gets thrown away by NettyClientHandler) and use it for detecting errors during handshake:
We don't have anything similar on server-side, but WriteBufferingAndExceptionHandler is expecting to communicate a failure via a failed write.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8499
CallStreamObserver stabilization · Issue #8499 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The resolution of #1788 made (Client|Server)CallStreamObserver stable but left the parent class, CallStreamObserver, experimental.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8501
Overload the equals method of Key · Issue #8501 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
Master branch
What is your environment?
windows
What did you expect to see?
when call Key.equals, it compare the debugString of Key, but not the memory address.
What did you see instead?
override the equals method of Key
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8508
Assemble error while using latest gRPC plugin on Android -> Input is shadowed in the --proto_path (Gradle 7.0.1) · Issue #8508 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to update an Android project to use the latest gradle plugin (7.0.1), from the current 3.6.4 that it is using. In order to do this, considering the project is using protobuf, I need to update the protobuf and gRPC dependencies, as the current ones are not compatible with the latest plugin.
The gradle sync succeeds while using those, the problem is when I try to assemble the project, I get the following error:
Execution failed for task ':App:generateDebugProto'.
From what I understand while reading the error, the problem is that the proto files are generated now in both extracted-protos and extracted-include-protos build files, and the latter shadows the first one. I have checked, in the previous version, the files were generated solely in the extracted-protos build files.
By removing the profobuf dependency, as some articles suggested:
protobuf "com.google.protobuf:protobuf-java:3.17.3"
There is another assemble error present:
Can someone please shed some light on this? Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8512
Could not find TLS ALPN provider  · Issue #8512 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using grpc-netty 1.38.1 , netty-handler 4.1.52.Final , netty-tcnative-boringssl-static 2.0.34.Final , and I am getting the below error -
Should I use different versions of the libraries ?
This is in Jdk 1.8 specifically zulujdk_8_21_0_2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8513
feature request: ring_hash as a general load balancer · Issue #8513 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ring_hash load balancer was designed in gRFC-A42 for xDS session affinity. Some users want to use ring_hash as general load balancer without being part of xDS. This might need a cross-language design (gRFC) on the general purpose ring_hash lb policy first.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8515
Getting below error on local machine after every few min. · Issue #8515 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.grpc.netty.shaded.io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
java.net.SocketException: Connection reset
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8523
Cannot find a symbol GrpcGenerated after upgrade to 1.40.x · Issue #8523 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Compilation success
What did you see instead?
I'm using the following plugin to generate classes, but when I upgrade to the mentioned version, the error occurs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8535
Heap pollution by HpackEncoder$HeaderEntry · Issue #8535 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have multiple(500k) long living(1h+) server streaming. I see in head dump, that dominant resource its HpackEncoder$HeaderEntry that was send to server. After send to server they stay in heap until streaming not end. Is is really necessary keep in memory headers by HpackEncoder after encoded and send them?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8536
BinderChannel flow control can get stuck under load · Issue #8536 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
head
What is your environment?
Steps to reproduce the bug
We're launching a unary "GetTile" gRPC interaction between two Android processes. Response message can be ~100kb and clients request several tiles one after the other. Telemetry from the field shows that after a while some clients start experiencing DEADLINE_EXCEEDED errors even though other calls to the same server process over different Channels continue to succeed.
By lowering BinderTransport#TRANSACTION_BYTES_WINDOW and requesting tiles in a loop I can reproduce similar symptoms locally. Using the debugger I can see the server's BinderTransport#transmitWindowFull becomes stuck true even though all bytes have been acknowledged by the client. The server is generating response messages but isn't able to put them on the wire. I believe the problem is that BinderTransport#sendTransaction() updates transmitWindowFull based on an unsynchronized read of acknowledgedOutgoingBytes, which may not include concurrent updates by #handleAcknowledgedBytes() on another thread.
What did you expect to see?
Binder transactions should pause when flow control kicks in then resume when enough outstanding bytes are acknowledged.
What did you see instead?
Outstanding bytes are acknowledged but transmitWindowFull remains true in a way that's inconsistent with acknowledgedOutgoingBytes and numOutgoingBytes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8542
gRPC clients always send grpc-accept-encoding header as Gzip · Issue #8542 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that the gRPC Java clients always send grpc-accept-encoding=gzip whether I enabled Gzip compression or not. Is this the intended behaviour?.
AFAIU, the reason for this behaviour is DEFAULT_INSTANCE of the CompressorRegistry is using Gzip as the first parameter.
I couldn’t find such a statement in the gRPC compression spec. Moreover, the gRPC Go language clients don't do such a thing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8543
Be more strict in the NameResolver.Factory javadocs  · Issue #8543 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
It's related to a problem/change of behavior of the NameResolverRegistry introduced in #8323
Due to that change the NameResolvers will only be invoked if their getDefaultScheme() matches the specified scheme.
I previously watched for/used both the "default" scheme and an alias.
Describe the solution you'd like
Please change the javadocs to contain a hint, that the scheme used in the newNameResolver must be the same and only as the default scheme (or at least that no other schemes will be checked).
Describe alternatives you've considered
Add a new method that assumes that the check has already been done, with the newNameResolver being implemented to do the checks and then invoke the new method. Later that method should be marked as final to disallow invalid behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8549
performance test, client and server cpu utilisation did not exceed 70%, qps did not exceed 7K · Issue #8549 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
jdk version: 1.8.0_192-b12
grpc version: 1.40.0
i use porotc and grpc plugin to generated pb file to get req\res\grpc-service definition java file .
in my project, grpc client base on spring cloud gateway, grpc server base on spring-boot-server.
two server process  deploy on 8 core vm, client deploy on 4 core 8G docker and docker deploy on vm.
grpc server just use @GrpcServer on myclass that extend grpc.bindableservice ,  and set grpc port in spring.yaml , and there no other config.
grpc client like that build channel ； for the same target server , diff thread use the same one client and channle build future stub.
performance test with wrk result like below，wrk initiate request by http mode to my grpc client , and grpc client transfer request to grpc server and get response to wrk.
client cpu utilisation did not exceed 70%, qps did not exceed 7K,  two server cpu both about 50%.
ping latency client vm bettew server client about 0.2ms
1、how to set client or server config to improve my project performance;
2、what's different  between use @GrpcServer and nettyserverbuild.xxxx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8555
Since last two versions very frequent occurrence of io.grpc.StatusRuntimeException: CANCELLED: io.grpc.Context was cancelled without error · Issue #8555 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.40.1 and 1.41.0.
What is your environment?
Linux, latest OpenJDK 11 builds
What did you see instead?
Very frequent occurrence of io.grpc.StatusRuntimeException: CANCELLED: io.grpc.Context was cancelled without error  in code that worked without such issues before latest couple of versions of grpc-java.
Steps to reproduce the bug
Unfortunately i don't have a reproducible code I can share, but we see this happening across all our services which are using grpc calls.
If we change the code to fork Context before sending the outgoing API call using grpc, the issue goes away.
It's not a matter of timeouts, all tests are in a local environment.
Error appears immediately after executing the API call and seems request does not arrive to remove service.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8557
Best practise for logging · Issue #8557 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We adopted gRPC java for a critical app and we are struggling on the best approach to log the important information in a single line:
Most of our API doesn't have to deal with streams, so for these queries we just use the ServerInterceptor with ServerCall for logging. When we look at the documentation for the close:
If you wish to know when the call is actually completed/closed, you have to use Listener#onComplete or Listener#onCancel instead.
Question #1. If we look at the documentation, we are advised to rely on onCancel & onComplete to calculate the response time, but these methods are not providing the status as a parameter, so we cannot log that information?
As a workaround, we were thinking to extract the status from the close and keep it until onComplete or onCancel is invoked, but if I understand correctly, there are 3 different possible scenarios:
(1) close (2) onComplete
(1) close (2) onCancel
(1) onCancel (2) Optional: close
So even if we would like to extract the status from the close and keep it until the onComplete or onCancel is invoked, the fact that onCancel could be invoked before break that workaround.
Question #2. Currently, we use the close method to do the logging, but we also noticed that when a client lately was unstable and very slow to accept the response, it impacted our response time, so it's not clear to us how to calculate the response time once the response is ready on our side, no matter if the client is available to consume it or not?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8565
Data race in RetriableStream.onReady() · Issue #8565 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As shown in the following stack trace, RetriableStream.onReady() is calling isReady() on transport thread, whereas isReady() is calling frame().isClosed(), but framer.closed is not thread-safe.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8567
I can't build my project by click green run button in Android studio. · Issue #8567 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Environment：
Mac big Sur 11.6
when I run my project by click the green button ,
I get this problem.
Execution failed for task ':protocol:generateDebugProto'.
Could not resolve all files for configuration ':protocol:protobufToolsLocator_grpc'.
Could not find protoc-gen-grpc-java-1.0.0-osx-aarch_64.exe (io.grpc:protoc-gen-grpc-java:1.0.0).
Searched in the following locations:
what's is the  protoc-gen-grpc-java-1.0.0-osx-aarch_64.exe??
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8569
Cancel a blocking call BEFORE deadline? · Issue #8569 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
I know that I can set a deadline for a blocking call with something like
How do I proactively cancel this call BEFORE the deadline?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8574
DNS cache not updated after unsuccessful reconnects · Issue #8574 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I use grpc-java as part of jetcd to connect to an etcd cluster within kubernetes.
When scaling down and up again all etcd endpoints, I would expect the grpc client to reconnect.
Restarting the etcd endpoints means new pod IPs, and the k8s internal DNS updates the headless service DNS pretty fast.
Based on ticket #1463 I think the grpc client should refresh the DNS names
after trying all configured endpoints.
In the provided logs I see that all three endpoints are tried in a loop, but always the old pod IPs.
Also interesting: The "No route to host" log is only seen for the first endpoint etcd-0, but the message "Started transport NettyClientTransport" is seen as round robin over all endpoints.
The JVM is already configured to networkaddress.cache.ttl=10
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
After trying to connect to all endpoints, grpc should refresh DNS and get the new pod IPs
What did you see instead?
grpc is keeping the old pod-names/IPs
Steps to reproduce the bug
Shutdown all server endpoints, start them again (with new IPs) and wait for client to reconnect
grpc.log
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8576
RBAC should fail with PERMISSION_DENIED · Issue #8576 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is currently failing with UNAUTHENTICATED. UNAUTHENTICATED means the user was unable to prove their identity. PERMISSION_DENIED is for authz failures.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8577
health.proto Should be in a Proto Jar on Maven Central · Issue #8577 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All of the health check instructions I can find indicate that the http should be copy & pasted into a project. I'd rather pull it in as a dependency but I can't find it in any of the published proto jars on Maven Central.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8586
Packaged GRPC service JAR doesn't support deprecated valueOf method for enums · Issue #8586 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The simple GET API works in local machine but not in the cloud when deployed as an app because the valueOf method does not exist in the generated java classes for enums generated from proto for the service request.
In cloud, we use the native binary out of the packaged jar. Is there a way to include the deprecated method into the exported jar?
stack trace as below.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8587
As a user, I wish that ManagedChannel implements AutoCloseable interface · Issue #8587 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
When I'm building io.grpc.ManagedChannel directly in the code (in integration tests) it could be useful if that already implemented java.lang.AutoCloseable interface. So instead of this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8590
GRPC code generator creates deprecated code · Issue #8590 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.41.0
What is your environment?
Mac, Java 16
What did you expect to see?
No Warnings
What did you see instead?
com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner in com.google.protobuf.Descriptors.FileDescriptor has been deprecated
Steps to reproduce the bug
Build any GRPC application with -Xlint:deprecated. The code generator is creating code that uses a deprecated API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8591
Java-client costs 5-6s for the first request · Issue #8591 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
3.17.2
What is your environment?
client in java to server in go
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Generate go server. It does not matter what implementation the server logic is. Because the duration is my focus, which is between the last call  to grpc api in client and sending to server. Start server just for client works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8592
gRPC xDS client returned an unusable name resolver error with xDS server · Issue #8592 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried a gRPC xDS client implementation with a go-control-plane implementation. Go clients that I implemented works without an issue, however, the Java client returned the following error.
Note that, I've correctly imported the relevant xDS libraries as in this documentation.
Then, I tried it with a java-control-plane, but I encountered  the same issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8605
TLS handshake error when bumping netty to 4.1.69.Final and tcnative to 2.0.44.Final · Issue #8605 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8606
Maven Build Issue from Setting `Class-Path` in the jar manifest for grpc-netty-shaded · Issue #8606 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
JDK 16, Maven version 3.8.1, MacOS Catalina 10.15.7
What did you expect to see?
a clean build of my project
What did you see instead?
This issue has happened with other projects that we take a dependency on, see here. Taking a look at the MANIFEST.MF of the grpc-netty-shaded jar, the Class-Path attribute is set which seems to be causing the bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8610
Support of Cipher Suite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 · Issue #8610 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Grpc-java does not support Cipher Suite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256. So far grpc-java is maintaining its own optimized version of okhttp, thus it is not possible to switch to a new okhttp version that supports newer cipher suites.
Describe the solution you'd like
Add Cipher Suite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 to the grpc-java forked version of okhttp or introduce a newer version of okhttp.
Describe alternatives you've considered
So for I don’t see any alternative.
Additional context
TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 is a hard requirement in my project. If this cipher suite is not supported I have to switch from grpc to a REST API which I really don’t like.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8611
sometimes build fails with "Execution failed for task ':grpc-core:compileJava'. > assert i != -1" · Issue #8611 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
incremental build from 0376de1 to 1f90e0e but happened before also
What is your environment?
ubuntu-18.04, openJDK-11
What did you expect to see?
build should succeed cleanly
What did you see instead?
very hard to reproduce reliably: happened to me like 2 times across about 30 builds during last 2 months. As far as I remember the previous time it also happened during an incremental build, but not 100% sure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8617
Need  compatible  versions for Netty 4.1.68+ , GRPC server and netty-tcnative-boringssl-static · Issue #8617 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We need to upgrade Netty version to 4.1.68+. Please let us know the compatible versions for gRPC server and netty-tcnative-boringssl-static. The versions  table in  https does not include this netty version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8624
does grpc-java have the 'UnknownServiceHandler in go' implementation? · Issue #8624 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,
I would like to create a grpc reverse proxy in java, and only googled some go solutions like below codes, do we have the same mechanism in java?
thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8626
AnonymousInProcessSocketAddress is experimental. · Issue #8626 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AnonymousInProcessSocketAddress, added in #8589 is an experimental API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8627
IPv6 connection is unavailable in South Korea due to ISP issue. · Issue #8627 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Yesterday, KT(one of the biggest ISP companies in Korea) had a connection issue for whole regions in South Korea.
After they resolved the problem, Google's Firestore service is not working properly. (Only in Android apps)
While I'm investigating the issue, I noticed Firestore Android SDK uses gRPC library for network connection.
This issue can be resolved if you connect by only using IPv4.
But since we can't inform to whole users to change their connection to IPv4 from their Android setting, it should be done with client app level.
We found this java -Djava.net.preferIPv4Stack=true command is not working for gRPC client.
I actually have no many knowledges about gRPC, so I aplogize if my question is not proper.
Is there any way to force whole connection to use IPv4 while using this library?
This problem is happening whole services which uses Firestore in South Korea.
I hope someone can give me a tip.
Thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8628
Replace the String field CdsUpdate.lrsServerName with a ServerInfo field to support federation · Issue #8628 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
go/grpc-xds-federation#heading=h.gh3gjftay27x
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8629
Migrate away deprecated field in CSDS response message · Issue #8629 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
go/grpc-xds-federation?disco=AAAAQ4-QtfU
Deprecated xds_config field in
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8631
udpa to xds proto migration · Issue #8631 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Migration plan:
We should start using the ORCA protos from the new location.
We should change our code that handles the udpa.type.v1.TypedStruct type URL to also accept xds.type.v3.TypedStruct in the same place.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8636
FakeNameResolverProvider is experimental. · Issue #8636 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This class, added in #8633, is useful for testing usage of forTarget() in some channel builders.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8640
ManagedChannel never terminates with shutdown/shutdownNow · Issue #8640 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
As a Kubernetes pod running /linux
openjdk version "1.8.0_302"
OpenJDK Runtime Environment (build 1.8.0_302-b08)
OpenJDK 64-Bit Server VM (build 25.302-b08, mixed mode)
What did you expect to see?
Waits for the channel to become terminated, giving up if the timeout is reached.
What did you see instead?
ManagedChannel.isTerminated() always return true after 100 or more tries shutdown()/shutdownNow()
Steps to reproduce the bug
The issue gets reproduced intermediate and when observed the thread hangs. The channel stop is called using the following snippets.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8642
CsdsService not properly synchronized with XdsClient · Issue #8642 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider this code from CsdsService:
The initial issue is that getSubscribedResourcesMetadata() and getCurrentVersion() have no synchronization:
That is bad. However, the xdsClient API itself is insufficient for CSDS because those two method calls need to be atomic; even if each of those methods were thread-safe the version needs to match the resources returned.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8643
xds: Improve error message for XdsServer listener not found · Issue #8643 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running on master and using TD, if I get the endpoint-selector wrong (or it doesn't exist), I get:
That's not helpful in the least. From a grpc-developer standpoint I can make sense of that after some assumptions, but for a user it is pretty useless except for Googling and hoping there's something on SO.
I do think this is a difficult message though, because the client doesn't actually know what's going on. Maybe there is a port mismatch. Maybe there is a metadata mismatch. Maybe they didn't include metadata in the bootstrap. Maybe the endpoint policy was matching SIDECAR_PROXY instead of GRPC_SERVER. Or maybe it just hasn't propagated through the control plane yet. So there's little hope of including everything the user needs to look at to resolve this.
So I think the best thing to do is just include the context of the error. "Failed to find listening configuration for address '0.0.0.0:50051': Requested entity was not found." Or similarly "Failed to find listening configuration 'grpc/server?xds.resource.listening_address=0.0.0.0:50051': Requested entity was not found." (of which I'm preferring the latter) We might also suggest "check your bootstrap" but... dunno.
CC @sanjaypujare @YifeiZhuang
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8644
gRPC server instantly resets stream for requests，then the erlang client receive eof response · Issue #8644 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi, i use the grpc server using java, the client uses erlang; We encountered a very strange problem, the server side reported an error:
then erlang client receive eof immediately。
same problem like：##7563.   but the message size is less than 4 MB, so we can't reslove the problem by increasing the maximum message size
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8657
xds: NACK causes resource to be considered non-existing · Issue #8657 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm dealing with a server returning broken configuration. There's three breakages.
The first is that the resource is considered not to exist. That is not right. The watcher should have been delivered an error and the resource wait timer cancelled. I'll note that in this case we had previously gotten a lot of UNAVAILABLE: Credentials failed to obtain metadata failures, and this is the first response to arrive (not included because that log was painful to copy).
Even assuming that the resource is properly determined to not exist, it shouldn't cause start() to fail. From A36 xDS for Servers:
XdsServer's start must not fail due to transient xDS issues, like missing xDS configuration from the xDS server.
And then there's a bug in XdsTestServer if start() throws, since server was never assigned.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8659
what is the best way to expose http rest api from grpc server · Issue #8659 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,
for some reasons I need to expose some http rest apis from an existing gRPC server, and an external reverse proxy like envy is not an option. so I tried these implementations with SpringBoot and AbstractProcessor, receive an http request, convert request to protobuf, init Context,  call gRPC, convert observer protobuf to response, send it back, etc.
My question is which one is better, if the first one, how to share Context; if the second, is directExecutor() still fine in this use case? and  how about the performance lose?
thanks a lot
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8672
Client Side Streaming OutOfDirectMemoryError: failed to allocate direct memory · Issue #8672 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
java version "1.8.0_271"
Java(TM) SE Runtime Environment (build 1.8.0_271-b09)
Java HotSpot(TM) 64-Bit Server VM (build 25.271-b09, mixed mode)
What did you expect to see?
Running upload logic without any error。
What did you see instead?
Client side occurred OutOfDirectMemoryError: failed to allocate direct memory.
Steps to reproduce the bug
It's actually a mock to test how would gRPC do when endpoint process speed is in huge imbalance.
I use gRPC Client Side Streaming to implement Upload Business in my project lately. Well this issue would not happend when I do uploading things by HTTP 1.1 using Serverlet, which put data in http request payload, in java back end, retrive payload data steaming using api like javax.servlet.http.HttpServletRequest#getInputStream()
First of all, client and server configuration are:
My question is, am I configured gRPC in a wrong way? If is, what's the correct way to do?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8673
Crash in OkHttpClientTransport · Issue #8673 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
android
What did you expect to see?
The library should instantiate
What did you see instead?
The library crashes with the following stack-trace:
Steps to reproduce the bug
Not fully reproducible but happening on Android 10/11 and mostly on Xiaomi/Realme
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8674
Server not accepting requests after update from 1.41.0 to 1.42.0 · Issue #8674 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After upgrading from 1.41.0 to 1.42.0, our services stopped receiving requests, and logging following INFO message:
We think that it could be caused by the following changes:
As we are running our workload also in a legacy environment where proxies don't handle HTTP/2 100% correctly, the issue is probably in the Connection header.
Is your feature request related to a problem?
Connections with the Connection header are refused.
Describe the solution you'd like
Make this validation configurable, so have a new method in ServerBuilder class
Describe alternatives you've considered
Remove this validation completely.
Additional context
Unfortunately, this is a critical issue for us that blocks us from updating gRPC libraries
My guess why netty doesn't reject the connection with the Connection header is that there are still too many legacy workloads that could be broken by this change.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8678
GRPC induces NoSuchFieldError with build() on unused message in proto file · Issue #8678 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Windows, Azul OpenJDK 13,
What did you expect to see?
no exceptions; builder returns a normal instance
A custom error "this message type has been removed at runtime for the optimization CODE_SIZE; please rerun with SPEED"
What did you see instead?
Steps to reproduce the bug
write some code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8679
How to add a new mechanisms in java? · Issue #8679 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
it seems we are able to add a customer authentication mechanisms for grpc.
May I know how to do the same for java?
Following the sample in links above, how should I add the customer authentication mechanisms as reading data from header?
and another question, any limitation for customer authentication mechanisms ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8682
DEADLINE_EXCEEDED when using sleep · Issue #8682 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current configuration:
Issue:
I have gRPC server running. Using a java client to connect to it, and send requests. The following code for the client:
This is the output of this executing:
Now if I add in a sleep. I see unexpected DEADLINE_EXECEEDED exceptions after the initial request.
I then see the following during execution:
Notice that it still executes the initial request and then the second request (which all happen before the sleeps). But then the sleep causes the deadline to be exceeded.
What did you expect to see?
I don't expect a deadline exceeded exception
What did you see instead?
There is a deadline exceeded execption
Steps to reproduce the bug
Run the described code above against a simple server.
Is this expected? It appears to be a bug, and I want to ensure that this library will not block if other threads are busy doing work.
If this isn't a bug. How can I ensure that other work does not cause DEADLINE_EXCEEDED exceptions in the above code?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8684
status code for unclean connection termination · Issue #8684 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the TCP connection underlying a netty server connection is abruptly closed by the client, grpc-java goes through all active call streams and closes them as UNAVAILABLE:
A problem we've seen with this arrangement is that there is no way for to distinguish UNAVAILABLE call failures due to "real" server unavailability and due to the client uncleanly closing their connections (probably due to abrupt process death). What do you think about changing the status in this situation to CANCELLED?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


8687
Migrate from JSR305's javax.annotation.CheckReturnValue to ErrorProne's com.google.errorprone.annotations.CheckReturnValue · Issue #8687 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Initiated by cl/408694635
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


8705
Should the java compiler version be unified as 1.8 or newer · Issue #8705 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is two java compiler version in master branch，1.7 and 1.8.
Should we upgarde it to 1.8 or newer. For the following reasons:
Java8 and 11 is most popular Java version。Few applications  still use Java7。 See 2020-java-technology-report.
Java8 new features, like lambda、stream，can improve development efficiency， make code implementation cleaner。
Please think about it. Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8707
reflection.proto v1 is ready now，v1alpha can be update · Issue #8707 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc-services contains deprecated v1alpha/reflection.proto。Few hours ago, grpc/grpc project accept PR #27957 , add v1/reflection.proto.
So I think we can update this file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8708
It is hoped that the Java code generated by grpc can provide an ``interface`` · Issue #8708 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is hoped that the Java code generated by grpc can provide an interface for developers to implement concrete logic rather than an abstract class, because ide can help check whether developers have implemented the interface, but can not check the abstract class
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8712
InProcess: client streaming memory leak when retry enabled  · Issue #8712 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux 5.15.2
openjdk version "11.0.13" 2021-10-19
What did you expect to see?
No java heap space exception.
What did you see instead?
java.lang.OutOfMemoryError: Java heap space
Steps to reproduce the bug
We've recently updated our grpc dependency from 1.39.0 to 1.42.0 which now causes an out of memory error in one of our tests.
I've attached a test project that can reproduce the problem.
grpcheap.zip
Please be aware that the test is run with limited heap size (see pom.xml): -Xmx64M
The general idea of the test is this:
What happens when I run the test with grpc >1.40 is that I get an OOM when it has sent ~60mb worth of chunks, which obviously is near the -Xmx limit. However, what I would expect is that the heap usage would never rise to that level, as after each 1mb chunk has been sent that chunk can be gc'ed. I've also attached a screenshot of visualvm where you can see the heap graph of the test using grpc 1.39.0 vs 1.42.0:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8714
Race condition in idleTimer & ManagedChannel#enterIdle - refactor needed · Issue #8714 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Edit (2021/12/15): The following bug is fixed with a hot patch #8746. However, the logic of idleTimer in ManagedChannel is complex, delicate, and bug-prone. Refactoring is needed to make it more robust and easy to understand.
What version of gRPC-Java are you using?
1.41.0, current master: 8382bd8
What is your environment?
Java 11/16, MacOS. Original user report is probably from a Linux  server.
What did you expect to see?
We trigger ManagedChannel#enterIdle API periodically while also keeping ManagedChannelImpl#idleTimer with default settings. We expect ManagedChannelImpl to work properly and not to end up in panic.
What did you see instead?
The channel is broken after it.
Steps to reproduce the bug
Apply the change to io.grpc.testing.integration.XdsTestClient:
Relevant report
The original user report in Temporal JavaSDK: temporalio/sdk-java#863
According to the report, the issue happened after a long period of channel inactivity (> idleTimer period).
My best guess is that our periodic #enterIdle shuts down the nameResolver while still-scheduled (cancel(permanent=false)) idleTimer sees a stale enabled=true and performs the action. But I don't see how this can happen.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8717
If I want to implement my own monitoring and control refreshing grpc connections, such as server address changes and client monitoring  and refresh in real time. Do you have any good opinions? · Issue #8717 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8718
AppScan vulnerabilities reported from 'grpc' code · Issue #8718 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Can you please review below AppScan vulnerabilities reported in GRPC code and let us know if any plan to fix these or if these are false positives.
Thank you,
Preeti.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8719
In the aws environment, the grpc client requests the server to hang and there is no response for a long time. · Issue #8719 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
grpc.version: 1.39.0
netty.version:4.1.65Final
background:
We have two services a and b, both a and b provide both http interface and grpc interface;
Among them, a depends on the grpc interface of b.
When I access the http interface of a, everything is normal. And many visits are normal.
When I access the grpc interface of a, the grpc interface of a accessing b hangs, and there is no return for a long time, and the withDeadlineAfter(5 seconds) setting is also invalid, and the access will not be interrupted.
Go to the b service to check the log. The log at the interface entrance is not printed. Therefore, it is suspected that the grpc request of the a service is not sent.
To add, the http interface and grpc interface of service a are the same piece of code that is finally accessed through the adapter, that is to say, no matter whether you access the http interface or grpc interface of a, you will use the grpc client to access the grpc interface of service b.
Test the above scenario on the mac development computer, everything is normal
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8720
Round Robin Load Balancer Retry Logic · Issue #8720 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I was playing around with the client side round robin load balancing in Kubernetes. I was making grpc calls to a headless service that had 2 backing pods and I noticed that
if one pod goes down, ensuing requests are automatically routed to the surviving pod
if a new pod comes back up, it won't be added to the pool and requests won't make it back to that pod
if all existing pods go down, and new pods come up, requests are automatically routed to them
This leads me to believe that the round robin load balancer only issues a name resolution request for the ip addresses when it runs out of existing functioning ips. Is this expected behavior or is there something else I need to configure in order to get new pods automatically added to an existing pool?
We are using
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8721
Huh. I don't know how that fixed it. But since it seems you found a solution, closing the issue. · Issue #8721 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Huh. I don't know how that fixed it. But since it seems you found a solution, closing the issue.
Originally posted by @ejona86 in #4263 (comment)
Because the protobuf-java has descriptor.proto but  protobuf-lite doesn't have ,How I resolved it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8723
Hopeless SSL failures not reported to client implementation · Issue #8723 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi folks,
I'm writing an application that relies on a long-lived bi-directional stream of messages, with the client-server channel running over mTLS, and hitting a bit of a problem.
On startup the client begins a bidirectionally streaming RPC to the server, constructing a stream and sending a "register" message over it. The server does not send a "register acknowledge" message, and I'm unfortunately not in a position to modify the protocol here, only my implementation. This bidirectionally streaming RPC is kept running for the lifetime of the application (until either client or server crashes, which ideally happens rarely).
The certificates used on the client side expire and are re-issued frequently (as fast as every 5 minutes if a customer running this application decides that's required), and we've written our client to re-build the underlying channel the RPC is being made over should the RPC end (e.g. if the server crashes and the clients StreamObserver::onError is called).
We're finding that, if the following occurs, our client is getting hung forever attempting to connect to the server with a set of certificates the server will never accept:
Server crashes, client is disconnected and re-builds channel, taking in newly-issued set of certificates (cert-set A)
Server remains offline while another new set of certificates is issued (cert-set B, cert-set A now expired)
Server comes online, beings processing connection requests
Client now in a state where it believes the initial register message has been processed, but actually the underlying connection is faulty and the channel is stuck in a retry loop forever.
Obviously using something like a deadline isn't an option here, due to the protocol design.
It seems like ideally it should be possible to detect this kind of "hopeless" situation (at a base level, the client certificate is expired, so the noAfter will evaluate to a time in the past, which should be enough to be able to say the handshake will never succeed), but I understand it's tricky - perhaps an SSLException or IOException passed to onError would be appropriate, but I'm not sure.
I've included a reproducing case below, with the caveat that rather than creating a client certificate and having it expire, the reproducing case simply has the server require client certificates and then has the client not send any - a similarly "hopeless" case, but without any tricky timing shenanigans. To reproduce:
Run "genSecurityContext.sh" to generate a certificate authority and a server cert/key pair signed by that authority
Modify the constant "SEC_MATERIAL" to point to wherever you ran "genSecurityContext.sh"
Run the application via Main::main(), and note the client is never notified of the permanently broken netty channel
The case is packaged as a maven project, for the sake of convenience, but if you're (understandably) leery about unzipping random
files, the bulk of the logic is:
Thanks,
Oliver
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8724
Bump Protobuf to 3.19.1 which is is Mac M1 osx-aarch_64 compatible. · Issue #8724 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Release 1.42.1 generates osx-aarch_64 compatible artifacts.
However the protobuf version used is 3.17.2 which does not have a compatible osx-aarch_64.
I seems that this release will work correctly with arm64 macs. Probably I understood it wrongly.
What I expect is that using the latest grpc-java arm64 mac compatible and using the latest protoc 3.19.1 which is "compatible" with arm64 mac, I can generate valid code.
What did you see instead?
As I was using a newer compiler, for arm64 compatibility reasons, It was generating code that depends on methods that are not available in the current grpc-java used protobuf 3.17.2 version.
Steps to reproduce the bug
If you try to compile the well know helloworld.proto bundled in protoc, you will get the error mentioned previously.
I am using the current suggested protobuf-maven-pluginto generate code. However I need to dump up the protocArtifact to 3.19.1 to use a aarm64 mac compatible artifact.
Use protoc 3.17.3 which does include osx-aarch_64 based maven artifacts
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8726
BinderClientTransport instance retained post-termination if the destination AndroidComponentAddress doesn't exist · Issue #8726 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
latest
What is your environment?
Android/Linux
Steps to reproduce the bug
Call BinderChannelBuilder.forAddress() on a directAddress whose package or Service class name doesn't exist.
Send a request over the new Channel to activate it.
Observe the request fail with UNIMPLEMENTED as expected.
shutdown() the Channel and awaitTermination()
What did you expect to see?
No remaining Java references to Channel related resources.
What did you see instead?
Heap dump shows a strong reference to the ServiceBinding in android.app.LoadedApk#mServices (as a ServiceConnection) even after termination.
The problem is that ServiceBinding fails to call Context#unbindService() when bindService() returns false. (See b/37092557 for discussion / longstanding confusion on when to call unbindService())
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8732
Support okhttp3 in the public interface of grpc-okhttp · Issue #8732 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Describe the solution you'd like
Add support for okhttp3 to the public api e.g. OkHttpChannelBuilder to make it easier to use with okhttp3 compatible versions
Describe alternatives you've considered
Stick to the old version of okhttp 2
Additional context
Support both okhttp and okhttp3 in the public interface.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8737
Server-side streaming and client process callback synchronization · Issue #8737 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I am testing gRPC server-side streaming with a client async stub and got a question about how client process callbacks
From the documentation it's stated that no onNext can be sent after onComplete signal is sent from the server, but I am not sure does client wait for all remaining onNext callbacks to finish before executing/processing the onComplete callback.
Or simply stated, can onComplete callback execution happens on client async stub while the client is still processing the final onNext callback?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8738
Can we use gRPC to pass a file descriptor between server and client? · Issue #8738 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As title says,  Can we use gRPC to pass a file descriptor between server and client?  I have known it can be done by using Netty EpollDomainSocketChannel, but i don't whether gRPC has implemented it or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8740
How can the server proactively disconnect the client? · Issue #8740 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In some cases, the server needs to close unauthorized client connections. However, I did not find a way for the server to actively disconnect the client. How do I disable the TCP connection of the grpc on the server?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8741
java.lang.NoClassDefFoundError: io/grpc/BindableService · Issue #8741 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used grpc for helloworld , but when I run grpc server  ,error occured :
and how can i study grpc  , I first use this framework !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8743
libssl.so.1.0.0 cannot open shared when upgrading netty to 4.1.69.Final and tcnative to 2.0.44.Final · Issue #8743 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Good Day!
We just upgrade our netty version to 4.1.69.FInal, the upgrade tcnative to 2.0.44.Final..
After this, we are encountering the following issue... Any thoughts what could I been missing?
Thanks...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8751
JVM crash with grpc-java 1.42.x and alpine docker image · Issue #8751 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An attempt to upgrade from grpc-java 1.41.1 to 1.42.x ends with JVM crash.
Maybe also affected by the fact that openjdk:X-alpine images are not maintained anymore, hence have no new JDK updates.
The first version of grpc-java with the problem is 1.42.0, the versions before work fine.
It may be related to grpc/grpc#27995
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8753
How to close keepalive watchdog？ · Issue #8753 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got an error in client like :
after that, when the client try to send req to server, I just got :
and I sniffered the packet，notice the client didn't send req to server any more, that was not what i hope
so can I just close the watchdog， or is there any way to let the clinet keep send req (even the server is in DEADLINE_EXCEEDED)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8755
Pseudo header :protocol support · Issue #8755 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am implementing websocket-over-http/2, and I use envoy proxy to send http/2 request to server using grpc-java.
Referring here, when envoy sends an http/2 request, it bootstraps the websocket connection to http/2 using the header :protocol, which seems to be due to rfc8441.
I wonder if the netty handler of grpc java handles the :protocol pseudo header (in my case, of course, an illegal error occurred), and I wonder how I can control this pseudo header without an error.
If pseudo header :protocol is not supported, I wonder if it will be added
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8756
Ring hash should be named `ring_hash_experimental` · Issue #8756 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Ring hash can only be used from within xds currently, because that's the only way to get a hash assigned to RPCs which is required for it to function. So it should be using the _experimental suffix like the other only-used-from-xds policies. The gRFC uses both names for the policy, but one is more vernacular and the other is the precise name as seen in the LB registry. I confirmed with @markdroth that _experimental is intended.
We would be interested in figuring out a way to use it outside of xds, but there's currently no work happening on that front.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8770
How to graceful shutdown client or server when connection still have active streams · Issue #8770 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I create a bidirectional streaming RPC.
In server side, I call onNext of responseStreamObserver continuous, then I try to invoke server.shutdown.
But server will never shutdown for there is active stream.
Only the active stream send end frame will trigger stream close and then trigger the connection close and server shutdown.
Also, when I try to shutdown subChannel in client side, connection will never close for there is active stream.
Both side will send a GO_AWAY frame, but in gRPC layer, requestStream can not receive this status, so stream can not stop by send onComplete.
Why not notify requestStream when receive a GO_AWAY frame? And then stream will know it's time to do onComplete.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8771
How to get header in ClientInterceptor from response with ListenableFuture-style stub? · Issue #8771 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The server responsed header,but in ListenableFuture-style stub,the ClientInterceptor runs in grpc ThreadpoolExecutor;
How can I get the header in current Thread? thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8772
Capability to configure both default `CallCredentials` and custom `SslContext` on netty `ManagedChannel` · Issue #8772 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The problem
I would like to create a netty ManagedChannel which has both a default CallCredentials and a custom SslContext.
I can do the former with
and I can do the latter with
but I can't see a way to do both at once.
Solution ideas
I can see two possible API additions which would achieve this.
Make it possible to configure an SslContext on a ChannelCredentials instance. I guess this couldn't be done on TlsChannelCredentials since that's in core and can't depend on the netty SslContext, so it would have to be a netty-specific ChannelCredentials implementation. Then I could do something like
Make it possible to configure a default CallCredentials on a NettyChannelBuilder without a ChannelCredentials. Then I could do something like
From what I've seen of the source code, 2. would probably be the easier change to make, but might fit in less well with the direction you want to take the API in.
My current workaround
The workaround we're intending to use right now is to create a channel which has the correct SslContext but no default CallCredentials, and instead configure the CallCredentials directly on every stub I create. To make this easier, we'll wrap the ManagedChannel and the CallCredentials together into an object of our own so that we can pass them around together. Something like
where GrpcChannelWithCallCredentials is our wrapper class. This is a bit ugly, and involves a change in every bit of code where we create a stub, rather than being able to do it once where we create the channel.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8778
Connection closed while performing protocol negotiation for  · Issue #8778 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when build grpc client use h2c protocol.
NettyChannelBuilder.forTarget().negotiationType(NegotiationType.PLAINTEXT_UPGRADE).build();
and build grpc server like following:
NettyServerBuilder.forPort().addService(xxx).build().start();
and then client request server , I got  grpc RuntimeException:
I know it's seem like unreasonable: why use H2C instead of H2. I only  have to say it's business needs.
So, i want to know server-side how to support PLAINTEXT_UPGRADE.
I note NettyServerbuilder has .protocolNegotiator() api, but I not found how to get the param of protocolNegotiator()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8781
Update netty to 4.1.72.Final · Issue #8781 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Ubuntu 20.04.3 (Azure pipelines)
PaloAltoNetworks' Prisma Cloud Scan shows some vulnerabilities in netty-codec.
The version 4.1.68.Final and later has not any high severity issues. And the 4.1.71.Final and later has none.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8791
NameResolver Fallback · Issue #8791 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We encountered an issue where our DNS doesn't properly propagate to certain ISP/mobile provider in some parts of the world and the and the default  DNSNameResolver returns:
io.grpc.StatusRuntimeException: UNAVAILABLE: Unable to resolve host
As a work around, I tried to implement a name resolver with cloudflare DOH, but I only want it as a back up if the default resolver fails.
To test the fallback mechanism, I set my DohNameResolver to priority 6 but deliberately return an empty list of EquivalentAddressGroup. I expect GRPC to fall back to the default NameResolver if my current resolver returns empty list of addresses, but instead it just keeps trying to use my DohNameResolver.
Is there a way to set a nameresolver fallback policy?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8792
How to selectively require Client Certificate for a few services but not require it for other services? · Issue #8792 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In TLS mutual authentication, I am aware that ClientAuth has three modes:
But say I have two grpc service definitions. For the first one I do not want any authentication and for the next one I do want to have the strict require authentication.How to do this?
Should the server then be configured for 'Optional' mode and then an interceptor would be required to validate the client certificate based on the service being access by the client? If yes, then this does seem comparatively heavier, and also leaves more risk for error.
(Perhaps the previous paragraph make me sound like a lazy person and as outsourcing my security work to be done by someone else :p , but I am just trying to find out the best possible way to achieve this functionality and re-use existing frameworks instead of re-doing it)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8793
grpc forward · Issue #8793 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can grpc  forward similar to http. Now I want to control the path of the interface call based on the information in the metadata.
such as I request /greet/hello
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8796
Retry policy doesn't work with coroutines · Issue #8796 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
MacOS, Java 11
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Here you can find a detailed explanation. I have exactly the same problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8797
io.grpc.StatusRuntimeException: INTERNAL: No value received for unary call · Issue #8797 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.grpc.StatusRuntimeException: INTERNAL: No value received for unary call
I'm getting this Exception message from my grpc unary call  while running my signed apk  .
I get this RunTime Exception Only when I Get a Release Version and not on debug mode please help me out I'm really getting frustrate
thanks for your help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8799
Android lint error when upgrade to Android plugin 4.x · Issue #8799 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to upgrade Android plugin to 4.x as described in #8421 (comment) with some minor workarounds, the build failed with a lint error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8803
When to upgrade Netty to 4.1.72  ？ · Issue #8803 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
New CVE vulnerability
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8824
FIx the android-interop-testing/src/main/res/layout/activity_tester.xml file to get rid of linter messages · Issue #8824 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PR #8821 addresses the android linter issue (seen internally in Google3 builds) by adding the tools:ignore="OnClick" property to the elements. However this might not be correct and the issue could be the line 5
This may need to be changed in order to run properly in Google3 as suggested by @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8826
rpc method name to  java.lang.Method name mapping · Issue #8826 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
Describe the solution you'd like
Either provide API to  map from/to rpc method name to/from   java.lang.Method name or annotate the generated method with something like
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8827
When the relase include Netty 4.1.68+ · Issue #8827 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi gRPC team,
I saw #8617 been closed.
In the latest 1.43.2, the netty version still is 4.1.63.Final (it is 4.1.72.Final in master branch).
May I know when will have a release to include the 4.1.68+ version of netty?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8829
Fix RLS config child lb config validation · Issue #8829 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As per the spec go/grpc-rls-lb-policy-design
At config-validation time, we must construct and validate the config for the child policy, but we don't yet know the target name to use for it.  The config for the child policy will be constructed by starting with the static config from the childPolicy field, adding the field name specified in childPolicyConfigTargetFieldName, and setting the value of that field to some dummy string.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8831
Some question about UNKNOWN StatusRuntimeException · Issue #8831 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
stack info.
Hi, I used grpc to communicate between server and server. But I found that exception 'UNKNOWN' occur when server qps is largest.
So I traced that why this error happen.
I found that the status from trailers is Status.UNKNOWN. The io.grpc.Metadata namesAndValues showed that
I want to know the cause of the problem And how to solve it.
@ejona86  eric, could you give some advice?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8834
BinderTransport flow control starves unlucky streams · Issue #8834 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
head
What is your environment?
Android/Linux
Steps to reproduce the bug
Create a gRPC client that maintains 10 concurrently active unary RPCs to a service that immediately responds with a payload of 1MB, for 60 seconds.
What did you expect to see?
No errors and a normal distribution of response latencies.
What did you see instead?
I believe the long tail latency / timeouts is caused by some call ids always hashing to the end of BinderTransport's ongoingCalls container. Every time space in the flow control window opens up, call ids that appear early in the iteration order gobble it all up. By the time we get to the end of ongoingCalls, flowController.isTransmitWindowFull() is returning true again and Outbound.send() just returns without making any progress.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8838
How can the gRPC client create socket connect When create stub or channel · Issue #8838 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want create socket connectoin when create stub or channel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8848
INVALID_ARGUMENT: Maximum Append Size of 1048576 Exceeded · Issue #8848 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Greetings,
This could also be a feature request if there is a way to increase that limit already.
What version of gRPC-Java are you using?
1.31.1
What is your environment?
All supported OSes. I tested it on Java 8 and 11 only.
What did you expect to see?
I would expect my request to go through, considering the java gRPC implementation is the only one where I experienced that issue so far.
What did you see instead?
Steps to reproduce the bug
I have an opened PR in our library on trying to fix this: EventStore/EventStoreDB-Client-Java#129.
The test showing that exception is very related to our library. However, here's how I try to fix it when building a Managed channel:
At the stub level, I also tried to increase the inbound and outbound message sizes but with no success so far:
StreamsGrpc.newStub(channel).withMaxOutboundMessageSize(16 * 1024 * 1024).withMaxInboundMessageSize(16 * 1024 * 1024)
Thanks for your time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8850
AndroidChannel fails to reconnect after block · Issue #8850 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having issues with Firestore (which uses gRPC) not connecting after a device is locked and was able to track it down to here.
It seems that the network callback needs to override the onBlockedStatusChanged() function and reconnect when the blocked parameter is false.
I'm seeing onAvailable() only called when my app initially starts but onBlockedStatusChanged() is called with true when it has been idle for a while and false when it comes back up. This was tested on Android 12.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8856
io.grpc.StatusRuntimeException: INTERNAL: RST_STREAM closed stream. HTTP/2 error code: INTERNAL_ERROR · Issue #8856 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Above channel is used to create Asynchronous/non-blocking stubs to interact with the gRPC server.
Communication RPC is Server-side Streaming
Would appreciate any help on the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8860
UNAVAILABLE: Unable to resolve host  · Issue #8860 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have used ManagedChannel for grpc call in android:
I'm getting unable to resolve host in android when I'm opening the app from the background in some time.  My network connection is good also HTTP requests are working by retrofit. The only problem is in the grpc call. After reopening the app everything is working fine as expected.
Is there any way to handle the above issue??
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8866
Half-closed without a request  · Issue #8866 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A client and server communicating over localhost.
I have a simple client and server that does nothing beside responding to an incoming RPC:
The client sends 100 RPCs with a 100ms deadline in parallel over a single channel that is in a READY state and shutdowns after all RPCs has been sent.
After the JVM has started we get a bunch of RPC with status: INTERNAL, desc: Half-closed without a request server side, client report the expected DEADLINE_EXCEEDED . So before any JIT or lazy class loading.
Re-running the client (keeping the server running) doesn't not produce those error and we can see that only onCancel gets called when the client cancel an RPC. Instead of close(Status.INTERNAL) -> onHalfClose -> onCancel that we saw before.
I guess that gRPC can't do much about the slow JVM startup but is the INTERNAL, desc: Half-closed without a request expected in those cases?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8868
Interceptors skipped when the client aborts · Issue #8868 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using io.grpc 1.43.2 on a Kubernetes Cluster with Linux, OpenJDK 11.0.13 64 bit, using Spring Boot framework. To generate Java code I used the Maven plugin org.xolstice.maven.plugins/protobuf-maven-plugin with io.grpc:protoc-gen-grpc-java 1.4.0 and com.google.protobuf:protoc:3.3.0.
My issue is that my GRPC service functions are sometimes called without executing the related interceptors first.
I created a GRPC service inside a Spring Boot application that needs some interceptors:
All 4 classes (grpcService, grpcTokenInterceptor, headerInterceptor, grpcRequestContextInterceptor) output a debug message before doing any work. Normally I can see proper order of calls in the log:
When my grpcTokenInterceptor produces an exception due to bad input, then I can see a nice stack trace which shows the interceptors:
When my grpcService produces an exception, I get this stack trace which shows how the service function gets called:
Everything is fine until here. The interceptoprs and the service are called in the expected order.
But during load-tests, my grpcService is sometimes called without interceptors. Then my class aborts with an exception due to missing data from the interceptors that have not been called. In these few cases, the log shows that the interceptors have not been executed:
This is the first message of the affected thread (after program start).
I repeated the load test several times and it seems that the issue happens only 1x on the first message per thread. But not always, only sometimes. Some threads produce the error 1x while other threads work fine at the same time.
My guess: Maybe the trigger of that issue is that the network connection got reset by the client, before the message got processed by the server. See attached screenshot of a network trace which we created on the server:
Now I'm stuck here. I'm not sure if this is a bug on server side, or client side or a misunderstanding of myself.
How can I find out why my interceptors have not been executed? Is there any condition that must be fulfilled?
I tried to find the answer in the source code but failed.
It would be great if you can help me to analyze this issue further. My biggest problem is that it happens only seldom and only during load tests. I did not find a way to trigger the issue manually.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8869
grpc Observability is experimental · Issue #8869 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8874
`Class-Path` entries in the jar manifest of grpc-netty-shaded leads to unexistent file scan · Issue #8874 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
grpc-netty-shaded-1.41.0.jar
What is your environment?
Windows 10
openjdk version "11" 2018-09-25
OpenJDK Runtime Environment 18.9 (build 11+28)
OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)
Problem
Library grpc-netty-shaded-1.41.0.jar has a MANIFEST.MF with bunch of Class-path entries. This caused a problem during Tomcat's TLD scan using local maven or gradle cache.  Here is my investigation of what is the cause of it:
The problem occur in Spring Boot application running within Eclipse IDE. It is about transitive dependency of the io.honeycomb and classpath available for IDE. Not sure about IDEA, but in Eclipse all dependency classes are included to classpath.
Honeycomb adds a bunch of dependencies among which is also grpc-netty-shaded-1.41.0.jar:
Project have also implicit embedded tomcat dependency via spring-boot-starter-web, as well as explicit dependency of tomcat-embed-jasper-9.0.56.jar. Since we have tomcat-embed-jasper dependency a org.apache.jasper.servlet.TldScanner will be used to scan for Tag Library Descriptors during org.apache.jasper.servlet.JasperInitializer.onStartup(Set<Class<?>>, ServletContext) call.
Scanner will load available classpath entries resolving each of them. Library grpc-netty-shaded-1.41.0.jar is found successfully in local gradle cache:
Since it is a JAR file, an additional processing applied to check JAR file's MANIFEST.MF. It will extract all the entries of Class-Path of the manifest. Here is a list of all classpath entries of grpc-netty-shaded-1.41.0.jar:
Based on each of the entry an additional candidate will be added to the scan list. URL of the candidate is build in following way:
As a result it will create a list of additional entries similar to following:
Files above doesn't exists in a context of grpc-netty-shaded, they are all resided in their own contexts within the gradle cache. As a result I've got a lot of errors:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8876
A significant percentage of Client calls fail randomly. · Issue #8876 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Majority of the calls from client to server work just fine. However, a significant percentage of the client calls are failing on the client side with the following exception:
Both my client and server are running on the same machine with the same set of dependencies(both use grpc-java 1.43.1 , same jdk 17 etc.)
This is how the workflows looks like:
Client makes a unary request and server responds in a stream.
The request is split into multiple sub-tasks on the server. Each sub-task is actually a class implementing Callable interface. The thread on which the RPC request from client landed, invokes these list of sub-tasks classes using a ThreadPoolExecutor :
Future future = dispatchController.execute(Context.current().wrap(taskImpl));
As is evident, I have also wrapped the taskImpl(implements Callable interface) with Context method. (Based on the point 5, I trust doing this is right?)
The taskImpl(implementing Callable interface) is designed to notify the "main" thread after it finishes it's workflow, as follows:
The taskImpl also sends messages/responses to the client from the executor thread using onNext(...) method of StreamObserver.
My suspicion based on my observations is that, the requests which fail are due to this.
The point to note here is that, on the server side, there are no exceptions or errors. The error or exception is seen solely on the client side(unless I have missed something on the server side logs).
To test it further, I added the client call in a loop of 100 runs, to see how many succeed and how many fail. I would get results like this:
Either this is a bug, or I am missing something.
Any pointers on how to proceed would help.
Before raising this issue, I have also checked on the following answers by @ejona86 and @carl-mastrangelo
What version of gRPC-Java are you using?
I assume it is 1.43.1 based on the following:
What is your environment?
openjdk version "17.0.2" 2022-01-18 LTS
OpenJDK Runtime Environment Zulu17.32+13-CA (build 17.0.2+8-LTS)
OpenJDK 64-Bit Server VM Zulu17.32+13-CA (build 17.0.2+8-LTS, mixed mode, sharing)
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Don't have one right now. I hope the problem description with the workflow should be a good start?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8877
Benchmark client doesn't support taking xds:///custom-target-string as server target · Issue #8877 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
We are trying to use java benchmark workers in proxyless service mesh (PSM) tests. PSM tests supports is developed on top of gRPC OSS benchmark framework as an additional feature.
In non-proxied PSM tests, the server target passed to client becomes a string: xds:///custome-target-string,  instead of the actual server's ip address and port in the regular benchmark. Once starting, the benchmark client running non-proxied PSM tests should communicate with a fake control plane to figure out the address of the test server.
Building java benchmark workers include xds jar is successful, but when testing, the logs from benchmark client shows that the benchmark client is expecting the server target to be in the form of socket address, it throws exceptions when given a xds:///target-string as an server target.
Describe the solution you'd like
It would be great if the benchmark client is able to take string server target, such as xds:///custom-target-string.
Describe alternatives you've considered
Additional context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8880
gRPC "StatusRuntimeException: UNKNOWN" and underlying netty throws NullPointerException · Issue #8880 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC and what language are you using?
What runtime / compiler are you using (e.g. python version or version of gcc)
Java version
What did you do?
We don't know how to reproduce this issue, but it starts showing up in several production servers. The gRPC calls one component make to other components using those BlockingStub will fail, and we see the NullPointerException below every time. If we restart the component (pod), it starts working again. Usually it work fine for some time (maybe several days or weeks?), then starts failing. Once it starts failing, it will fail forever. And we don't know how long it will take to fail again.
What did you expect to see?
What did you see instead?
Anything else we should know about your project / environment?
We tried to look at DefaultHttp2ConnectionDecoder.java, line 339, it's weird this line will throw NPE, since connection is used before and java final, how could it throw NPE?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8883
JsonUtil.getObject() etc behaves differently between explicit null value and absence of the key · Issue #8883 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(Noticed by @sergiitk in #8871 (comment)) The current implementation of JsonUtil.getObject() will throw ClassCastException if the input contains the key with an explicit null value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8884
xds: support istio grpc-agent · Issue #8884 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to use xDS with istio grpc-agent. But it doesn't work well.
Is your feature request related to a problem?
xDS doesn't work with istio grpc-agent because not supported NameResolver of unix:///
Describe the solution you'd like
Enable xDS to handle unix domain socket with istio grpc-agent like grpc-go.
Additional context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8885
xds: 'Unsupported configurations in UpstreamTlsContext!' error on creating a channel · Issue #8885 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
I create a channel using the following function and then use it for communication with a gRPC service as a client.
What did you see instead?
I got an exception:
Steps to reproduce the bug
We have a golang service which uses gRPC and xDS. It creates an upstream context for a cluster as follows:
Go clients work well with this service. I've just started trying to call this service from Java using grpc-xds protocol.
When I got this error I made some research and found that before creating the SslContextProvider for the channel from the UpstreamContext, the context is checked for the presence of some fields:
So, the UpstreamContext is checked for:
ValidationContextCertificateProviderInstance has value.
None of these fields is in my  UpstreamContext. But after that, some other fields are used for creating the SslContextProvider: CertificateValidationContext.CaCertificatedProviderInstance and TlsCertificateProviderInstance, which are in my context.  So, I would be able to create the SslContextProvider if I passed the previous check.
I also noticed that all those fields are @deprecated in the proto and generated stubs, so I assumed that it could be a bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8886
xDS ADS reconnection should not spam logs · Issue #8886 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As recently seen:
I'm surprised that log statement exists as a WARNING. Seems it was introduced in the large ManagedChannelImpl2 rewrite (#2530).
Before resolution has ever succeeded. There's no need for logging because the error will be communicated to RPCs. This is unlikely the case here just because "Closed by server" is probably the cycling of long-lived RPCs for load balancing
After initial resolution. This might deserve logs at some points because RPCs probably won't fail (gRPC will continue using previous data). In this case, xds client should probably squelch this "error" as it is quite normal. There could be some debate here as to whether the watchers would be notified, or whether it matters if they are notified, but overall this is quite ordinary. Any error here should be logged if re-creating the ADS stream fails (which is probably dependent on whether the stream received responses).
So that means we should make two changes (one to ManagedChannelImpl, one to xds).
I'd hope we'd never log WARNINGs like this, but it is a bit hard of a situation and I don't want us to let perfect be the enemy of good. At least for xDS, we should be able to avoid logging except when ADS stream creation fails.
I've seen #8773, but it looks incomplete, as it'd need to handle the "never received a response" case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8887
Revert API change in {ManageChannel, Server}Provider API · Issue #8887 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Although ManageChannelProvider and ServerProvider are @Internal, because they are not apparently internal with Internal prefix in name the API change in 881f747 and bd156f9 may still impact existing users.
cc @sanjaypujare  @ejona86
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8890
xds: "NameResolver returned no usable address" if Listener/VirtualHost does not exist · Issue #8890 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
XdsNameResolver uses cleanUpRoutes() in several cases which clears the service config and passes zero addresses:
That replaces the LB with pick first, which doesn't support zero addresses, and produces a less-than-helpful error message. We may be swapping the LB on purpose to generate an error, but that is probably no longer necessary since the addition of ConfigSelector. Even if we are swapping to cause an error, we should deliver an error down to the new LB instead of the unhelpful "no usable address".
CC @dapengzhang0,  @sergiitk, @YifeiZhuang
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8893
How  to enable PerfMark in grpc-java? · Issue #8893 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using grpc-java to do my project, and some perfmance jittery occur in my project. I see PerfMark is one useful tool to debug performance problem. However I did not find how to enable and ouput html report.
Could someone help explain  this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8897
Request 'gRPC-Java to support HTTP/3' · Issue #8897 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
By gRPC-Java supporting HTTP/3 the following primary goals will be achieved:
Elimination of head-of-line issue.
Seamless switching between underlying IP infrastructure, such as Cellular and Wi-Fi media.
Support of zero round-trip connection reestablishment.
Proposed Solution
Alternatives Considered
None
Additional Context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8899
Official support for Retry policy · Issue #8899 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
I'm struggling to find an official documentation of Retry policy on gRPC calls, in particular, to know if is still experimental, or if is something official and supported to be used.
My current version 1.30, but I would upgrade to the latest version if is required to have this feature.
I found this repo, but it seems is just a proposal https
Can you share a documentation and point from which version we can use it, in case is supported?
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8908
io.grpc.xds.XdsServerWrapperTest.shutdown_inflight is flaky · Issue #8908 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
had a surprising failure. This run was for the 1.43.x branch, but the test looks the same as master, thus filing.
Seems like the "This exception might occur in wrongly written multi-threaded tests." explanation is most likely.
If this remains the only flake we see, then we shouldn't spend too much time on it. But it is probably worth a glance and then we can close the issue. We can reopen this issue if it happens more often.
CC @sanjaypujare
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8911
Dynamically apply metadata headers in dependency client calls · Issue #8911 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi team!
I'm working on authentication between multiple service, basically the logic is:
Both Service C and Service D are GRPC services.
I'm the owner of Service C. I got the auth Context of user A as input parameter from Service B, and I need to verify the permission of User A in service D and act correspondingly (we have a service D client in Service C). The strategy we want to use is to get the credential we want from the auth Context parameter and dynamically assign the credential as a header of request to Service D. For some reason we cannot get this auth Context from Metadata so we're not able to use ClientInterceptor to do this and dynamically apply this header in every client call to Service D is the only way.
Could you help on how we can make it work?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8912
netty: Writes can starve reads, causing DEADLINE_EXCEEDED · Issue #8912 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.44.0
What is your environment?
A client and server communicating over localhost.
Operating system: Mac OSX
JDK: 11.0.9
What did you expect to see?
Client in this branch not failing the majority of RPCs with DEADLINE_EXCEEDED when using Netty for transport.
What did you see instead?
The majority of call fails with DEADLINE_EXCEEDED using Netty whereas using OkHttp doesn't .
Steps to reproduce the bug
This (hacky) reproducible might indicate a potential problem where the periodic flushing of the WriteQueue doesn't happen frequently enough. This causes latency leading to DEADLINE_EXCEEDED during startup. Switching to ÒkHttp for this particular case does not cause any RPCs to fail.
On the wire with Netty multiple RPCs are batched and sent togheter whereas with ÒkHttp they are immediately dispatched.
Here is a screenshot from Perfmark using Netty:
is this a known issue or am I doing something fundamentally wrong in the reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8914
binder: Deadlock due to unexpected re-entrancy of transactions on process-local Binder · Issue #8914 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BinderTransport locking was written under the assumption that calls to IBinder#transact() enqueued the Parcel for delivery to the peer and returned immediately. However, Android guarantees the unique object identity of IBinder instances within a process. And so when a client creates a Channel to a Server/Service within its own process, BinderClientTransport.outgoingBinder == BinderServerTransport.outgoingBinder. android.os.Binder#transact() on that object is implemented not as a system call to the binder driver but as a direct call to its own onTransact() method.
This is a problem because BinderTransport#handleTransaction() holds its 'this' lock while calling outgoingBinder.transact() in multiple places. If two peer instances of BinderClientTransport and BinderServerTransport are running handleTransaction() on different threads at the same time, they can each end up holding their own lock while waiting (forever) for the other's.
Steps to reproduce one instance of this bug
Use BinderChannelBuilder to create a Channel to an android.app.Service hosted by the same process
Have both the client and server repeatedly send messages to each other around the same time from different threads
What did you expect to see?
No deadlock
What did you see instead?
Example deadlock, via sendAcknowledgeBytes():
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8916
GRPC client blocking vs async stub recommendation · Issue #8916 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are currently implementing a high throughput spring boot application using grpc-starter package https, this is a client server based application. We are migrating our legacy REST end points CRUD operations to GRPC. For having best design for this service, we need help with following questions:
If a single immutable GRPC blocking stub client instance is accessed by multiple  threads, will this be a blocking call i.e. only one RPC call is executed at any given time.
As per the google GRPC IO docs it is recommended not to use blocking stub to parallelize RPC call. Is this highlighting the case of multiple RPC call on same client object. https
Will the blocking stub use new TCP connection for every call or same TCP connection is reused.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8917
GrpcCleanupRule errors out  when retrying tests · Issue #8917 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When GrpcCleanupRule is used as a class rule and surefire/failsafe maven plugins are configured to retry failing tests, the rule throws an exception on the second run of the test with the following stacktrace:
What version of gRPC-Java are you using?
What is your environment?
Linux/Java 8
What did you expect to see?
Expectation is for the rule not to throw when applied multiple times
What did you see instead?
An exception unrelated to the test is being thrown
Steps to reproduce the bug
Create a small maven project with a flakey test class, and enable surefire retry feature (see the attached project)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8919
io.netty.handler.codec.http2.Http2Exception: Header size exceeded max allowed size (10240) using NettyChannelBuilder · Issue #8919 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What did you expect to see?
As discussed in a previously closed issue #4284:
The HTTP/2 spec Settings section says:
What did you see instead?
While #4284 and netty/netty#7825 addressed the default limit enforced by HpackEncoder, there is one more place in gRPC-java that specifies the header limit:
which leads to the value 10240 as a maximum allowed size.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8925
servlet: UndertowTransportTest.clientCancelFromWithinMessageRead is flaky · Issue #8925 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8927
Exception while executing runnable io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed · Issue #8927 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Linux in Docker
What did you expect to see?
What did you see instead?
(No further stack trace to indicate the cause)
Steps to reproduce the bug
I've been using GRPC for a while now, I saw this error when I started to do "streaming".  The weird part is the messages are successfully received and processed on both ends, but this error comes up on the client and no error indicated on the server.
I built a channel like this (I tried to the point where there is no interceptor code so I got the error you see above) but I do use
I'm tried to see if I can create a small test scenario for this in https  which I have a test for but it is not manifesting
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8928
ManagedChannelImpl pendingClientCall rejectedExecutionException · Issue #8928 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8930
UNAVAILABLE: Connection closed after GOAWAY. HTTP/2 error code: NO_ERROR · Issue #8930 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
Client: Java 8 running on 64bit Amazon Linux/2.6.6
Server: AWS Fargate 1.4.0, JVM version: 1.8.0_322
Load Balancer for Fargate Server: AWS ALB HTTP/2 enabled
What did you expect to see?
No GOAWAY errors
What did you see instead?
We were seeing a lot more GOAWAY errors before we put the retry policy in place, but are still seeing enough errors to be concerned.
Are there any other things we can try to suppress this issue?
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8931
binder: Cross-process calls against a shutdown() Server do not fail fast as required by AbstractTransportTest · Issue #8931 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
master
What is your environment?
Android/Linux
Steps to reproduce the bug
Declare an Android Service hosting an BinderServerBuilder-built Server in process A
In a second process B, create an BinderChannelBuilder-built Channel to that Server and send a call that completes successfully. This causes the Service to be bound and a Server to be created.
Invoke Server#shutdown() in A
In a process other than A, create a second BinderChannelBuilder-built Channel to the Server and send a call with no deadline.
What did you expect to see?
According to AbstractTransportTest#serverNotListening(), a ManagedClientTransport start()ed after its Server is shutdown() should report transportShutdown(UNAVAILABLE) within 5 seconds. Based on this, I expect that a new call to a shutdown()-but-otherwise-healthy Server would fail quickly.
What did you see instead?
The second call hangs forever.
Discussion
The second BinderClientTransport's call to bindService() succeeds, returning Android's cached copy of "hostServiceBinder" without any interaction with process A.  Because client and server are in different processes, the second BinderClientTransport's call to transact(SETUP_TRANSPORT, ... FLAG_ONEWAY) is dispatched asynchronously -- it returns true immediately but, later on the server, LeakSafeOneWayBinder#onTransact() returns without processing the transaction because it has been detach()ed by shutdown(). The second BinderClientTransport is stuck waiting for a SETUP_TRANSPORT reply that will never come.
AbstractTransportTest#serverNotListening() only passes today because client and server are in the same unit test process, making the client's LeakSafeOneWayBinder#onTransact's call synchronous and giving the client immediate feedback about its failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8935
Netty Shaded high cpu utilization · Issue #8935 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
In one of the service while using the netty-shaded (ManagedChannel)  to build the channel we have observed a high cpu utilisation.
While running the jprofiler on the service we have found that epollEventLoop(epollWaitNoTimerChange) is consuming most of the cpu (in seconds).
The problem was resolved when we moved to netty library (NettyChannelBuilder) instead of netty-shaded (ManagedChannelBuilder).
Netty shaded version used that caused high cpu: 1.39.0
implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
netty (we use this to replace netty shaded)
implementation "io.grpc:grpc-netty:${grpcVersion}"
JVM version : openjdk:8u141-jre
Can anyone please help in clarifying this issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8936
grpc-bom should manage protoc-gen-grpc-java artifacts? · Issue #8936 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
1.44.1
What is your environment?
What did you expect to see?
The grpc-bom managing the protoc-gen-grpc-java artifacts with exe type and os classifier.
What did you see instead?
The grpc-bom managing protoc-gen-grpc-java with pom type. Is there a use case for this? It is effectively empty: https
Steps to reproduce the bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8937
Who's Using grpc-java? · Issue #8937 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8945
Measuring gRPC-side queueing time · Issue #8945 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to measure the queuing time inside gRPC to disambiguate between a slow service, a slow network, and a slow client.
We're setting server-side max concurrent calls per stream to some value (that we think is appropriate given the machine size and work), but we sometimes have more outgoing requests on the client than that. In that case, gRPC has to wait for an HTTP2 stream to become available, which it does by internally queuing the calls. We'd like to detect / measure that so we have more visibility into where the latency is introduced.
From reading the code and running some experiments, I've not been able to do that with current gRPC (we're on release 1.41.0). I used a simple echo client-server test, where I artificially restricted the server to a single call per stream, the client to a single channel, and also added a server-side delay of 1 second. This clearly shows client-side queueing of calls, where the call is started immediately, but only executed once the previous call completes. This all works as expected.
I then investigated whether there's any way to observe when the outgoing message is actually sent.
In principle, it looks like the onReady handler could cover this case - when an HTTP2 stream becomes available, it gets assigned to the NettyClientStream, which in turn triggers an onReady signal. However, this doesn't make it through the RetriableStream - release 1.41.0 mentions #7089, which seems to have changed at HEAD; I didn't track it down but disabled retries for my tests. However, the onReady signal is also suppressed for calls that only have a single client message in ClientStreamListenerImpl. This is consistent with the isReady documentation, which explicitly says that a single-message call may always return false for isReady.
It seems like onReady might work for client-streaming calls, but we need this for unary calls.
There's also the StreamTracer interface, but the methods aren't called at the right time. In particular, the outboundMessageSent method - despite what the name seems to imply - is called before the message is actually sent on the network. In fact, it's called before we even have an HTTP2 stream available.
Any suggestions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8947
Istio pod cannot connect to another pod by gRPC · Issue #8947 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I´m having problems to understand why my istio pod service is not able to connect by gRPC to another pod.
I can see the communication from pod A y able to reach envoy sidecar proxy of B, but this one never route the request to the service container.
Here the log from the envoy sidecar of B
I tried to make a curl form the service A to service B and I´m able to pass through the envoy sidecar of B, but when I try by gRPC I got stuck in proxy sidecar.
Any idea what to look?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8949
Add support for HAProxy Protocol ("proxy protocol") · Issue #8949 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a way to add a CustomHandler to ChannelPipeline using NettyServerBuilder ?
I initialize my GrpcNettyServer by below:
All I want is to get the channel from the server and add a custom handler to the channel pipeline.
Does NettyServerBuilder supports that option ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8950
XdsNameResolver blindly propagates XdsClient errors · Issue #8950 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a watch in XdsClient fails, XdsNameResolver will propagate the error directly to the channel without adding context and without setting a proper status.
And accompanying RPC failures:
That RPC failure is very bad, because it isn't clear it is from XdsNR and should be UNAVAILABLE.
As seen in b/221844501.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8952
Priority policy should delay picker updates while updating children · Issue #8952 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To allow localities moving priorities within xDS atomically, when processing a config update, the priority policy should inhibit upward picker updates of its own until it has provided the configs to all of its children. Children update their picker synchronously when receiving the config update, so after passing down the new configuration to all children the priority policy will have updated pickers for each and should at that point propagate its own picker update upward. This was decided in the cross-language TL discussion on 2022-02-11.
We need to audit the code to ensure existing LBs update their picker synchronously, and tweak the docs. I expect all LBs are already doing this, but it is worth the check.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8954
"jaxrs-resteasy-eap" with "withXml" not generating annotations for XML · Issue #8954 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
we have an API which supports both xml and json - however only the json annotations are added.
Maybe our configuration is wrong? I wasn't able to find a related issue.
Kind regards
Timo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8957
grpc compiler can't compatible with MAC M1 · Issue #8957 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8981
Netty 4.1.75.Final HTTP/2 connection closures · Issue #8981 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
macOS
What did you expect to see?
After bumping Netty from 4.1.72.Final to 4.1.75.Final I'd expect tests to pass.
What did you see instead?
Broken tests:
GrpcHttp2RequestHeaders most probably contains incorrect implementation and unnecessary guards against accessing pseudo headers, which are not specified by Netty and are in fact used by the contains method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8983
Examples fail with MinGW due to lack of "use_default_shell_env = True" · Issue #8983 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
master
What is your environment?
Windows 10 with MinGW via MSYS2
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Similar to rules-proto-grpc/rules_proto_grpc#181, issue is resolved by passing use_default_shell_env = True to the ctx.actions.run that runs protoc in java_rpc_library, so that PATH can be inherited from the host and libstdc++-6.dll can be found in C:\msys64\mingw64\bin.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8985
Add a class for method metadata · Issue #8985 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is your feature request related to a problem?
The problem we have is that it is useful for us to pass around information on essentially the metadata of a method type, but don't have a class that is quite correctly scoped. For example, we have metrics that are emitted with information on what methods are being called and we want to tag them with .e.g. the service name and the method name. While this information is available from the method descriptor, it does involve some amount of manipulation to pull out the separate parts.
Describe the solution you'd like
It would be good to have a 'metadata' class for methods, something like:
Describe alternatives you've considered
I think the alternative is to either implement such a class ourselves, or implement the functionality of the methods in-line when needed.
WDYT? Is this a class you would be willing to accept? I am happy to contribute it (to the API module?).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8988
Thanks for clarifying! If a single version is desired, then a bracket isn't necessary. Your builds will work exactly the same irrespective of API stability issues if you remove the brackets. · Issue #8988 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Thanks for clarifying! If a single version is desired, then a bracket isn't necessary. Your builds will work exactly the same irrespective of API stability issues if you remove the brackets.
Nope. They are treated differently by Maven. I made the change on purpose. 90db93b
A bare version suggests a version, but upgrading and downgrading are allowed. It is essentially unrestricted. A []-encoded version pins a version.
To demonstrate, take a look at this pom:
If you try to build, you'll get an error because of the version ranges. Without the version ranges this would have compiled (but may have behaved strange at runtime):
Or consider this pom (grpc-core instead of grpc-netty as before):
The normal version resolution order would have chosen grpc-core 1.39.0, since that is the first in the breadth-first search. But maven is selecting 1.38.1 because it has to select a version in the "range":
All that said, I did that before BOMs were really a thing. The behavior is different with BOMs.
Originally posted by @ejona86 in #8337 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8990
onClose in SimpleForwardingClientCallListener is not called even once for grpc stream method · Issue #8990 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
When ForwardingClientCallListener.SimpleForwardingClientCallListener used in impl of ClientInterceptor, method onClose should be called at least once for streaming server method at the end (Or not?). onClose is correctly called once for unary calls.
If I have to use any other ClientCall.Listener tell me which one please and close this issue.
What did you see instead?
onClose is not called even once for grpc stream method
Steps to reproduce the bug
Method like rpc SayHelloStream (HelloRequest) returns (stream HelloReply) {}
ClientInterceptor impl with ForwardingClientCall.SimpleForwardingClientCall and ForwardingClientCallListener.SimpleForwardingClientCallListener with breakpoint somewhere in onClose
Any grpc server logic that work properly with method from 1.
Any client config with active interceptor from 2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8991
ServerBuilder should expose keepalive methods from NettyServerBuilder · Issue #8991 · grpc/grpc-java · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
We've been encountering issues with connections getting closed. Eric Anderson recommended adjusting keep-alive settings on the server and client (here). However, when I went to configure these settings, I couldn't find any documentation on it or examples on the grpc kotlin side. Could you help point me to how we can configure the server-side options mentioned in the keep alive docs?
We've also asked this in grpc-kotlin here and thought that it would be helpful to ask on the java side as grpc-kotlin has the same API for server building as grpc-java. You can find further context in that issue as well.
@ejona86 mentioned that this might be related to
Looks like the keepalive API is only on NettyServerBuilder, not ServerBuilder.
Please let us know if you need any further information and we'll get that to you ASAP!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
