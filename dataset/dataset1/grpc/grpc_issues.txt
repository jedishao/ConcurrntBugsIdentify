5
Adopt token-based flow control from reactive-streams

No description provided.


6
Implement outbound flow control

Should be token-based a la reactive streams. Although it also seems that maybe we will only ever have at most 1 token passed to the application.
Currently we provide no method of pushback to the application and buffer infinitely as the application sends.


7
Investigate excessive flushing in Netty

Determine ways to reduce number of flushes we perform. For example, if the header frame is being sent, flushing afterward is generally a waste since a DATA frame typically follows. We want methods that allow smart semi-automatic flushing or using knowledge from application layer.


8
Optimize buffer usage in MessageFramer

We currently allocate a large non-direct buffer per stream due to MessageFramer, only to copy immediately out of it. We should instead write directly to the transport-native buffer, which will cause us to have a WriteableBuffer or some such like our current Buffer class that is ready-only.


9
Choose benchmark framework: JMH vs Caliper

No description provided.


10
Unary requests always send an empty DATA frame with EOS=true to close stream

This is a performance issue. We should be able to set EOS=true on the DATA frame with the request payload rather than having to always write N+1 DATA frames. Likely fix is in frame interfaces.


16
Do we need both gradle and maven?

Keeping dependencies and other details in pom.xml and build.gradle will become a tedious overhead.  Any reason to support two build systems?


17
Race for Netty between cancel and stream creation ·

AbstractClientStream.cancel won't cancel the stream on the wire if it appears the stream has not yet been allocated, as is described by the comment:
// Only send a cancellation to remote side if we have actually been allocated
// a stream id and we are not already closed. i.e. the server side is aware of the stream.
However, what happens if this is the case, is that the transport is not notified of the stream destruction, and the stream will still eventually be created by the transport and not be cancelled. This issue does not seem a problem with the OkHttp transport, since it allocates the stream id before returning any newly created stream. However, Netty delays id allocation until just before the stream headers are sent, which 1) is always done asynchronously and 2) may be strongly delayed due to MAX_CONCURRENT_STREAMS.
It appears that the optimization in AbstractClientStream should be removed outright and sendCancel's doc be updated to specify the expectation to handle such cases (as opposed to directly cause RST_STREAM). Both OkHttp and Netty seem to be handling such cases already. More importantly, the optimization seems highly prone for races given that id allocation is occurring in the transport thread whereas AbstractClientStream.cancel is happening on some application thread; using the normal synchronization between application and transport threads seems more than efficient enough and simpler.


18
Decompression occurring in Transport thread

Apparently we are decompressing in the transport thread just so that we are able to provide the correct byte length to messageRead(). It seems we should remove the length argument to messageRead(), use Buffers.openStream(nextFrame, true), pass that stream to messageRead() (instead of calling toByteArray), and then set nextFrame = null.


19
Change base package name to io.grpc

Lots of renames, but not really hard.


21
Remove Guava's Service from our immediate API

Service doesn't gain us anything and is just painful for our users. We should remove it and just make our own API (start and stop, plus health-checking API).
This has already been done for Channel. It still needs to be done for Server, but I'm already working on that.


22
TLS support for OkHttp when not running on Android

OkHttp transport current accepts a SSLSocketFactory which when on Android is provided by the OS. For testing when not running on Android we don't have a way to do TLS/ALPN. We need one.


23
Figure out what names we want for Client Foos vs Server Foos

We have Call on both Client and Server. When adding the server, we chose ServerCall as the name of the server-side Call, and discussed renaming the client-side to ClientCall. ClientInterceptor was named based on this idea. However, the rename hasn't happened yet and now some have suggested having the Client names simply lack "Client" (so it would remain "Call"). It seems it has simply been too long since the original discussion for us to remember what was decided.
We need to decide to either prefix Client with Client and Server with Server or only prefix Server with Server. After the decision, whatever needs fixing needs to be fixed.
Note that in the transport we must have ClientStream prefixed with Client, since Stream is a shared interface between Client and Server.


24
Add unit tests to AbstractServerStream

Some unit tests from NettyServerStream are probably appropriate to move.


25
Add unit tests for AbstractClientStream

Some unit tests from NettyClientStream are probably appropriate to move.


26
Add tests for convert non-200 HTTP status codes to GRPC codes

The GRPC runtime should handle receiving HTTP2 responses with :status set to something other than 200. The runtime will need to map this to a GRPC status


27
Add unit tests for ChannelImpl ·

No description provided.


28
Channel-state API

At this moment, creating TCP connections are created lazily on first call of a Channel, and if the TCP connection goes down it isn't reconnected until a subsequent call. However, some users will want the TCP connection to be created and maintained during the lifetime of the Channel.
This "constant connection" behavior does not make as much sense when accessing a third party service, as the service may purposefully be disconnecting idle clients, but is very reasonable in low-latency, intra-datacenter communication.
We need an API to choose between those behaviors and to export failure information about the Channel. All of this is bundled together for the moment under the name "health-checking API," but we can split it apart as it makes sense.
They are tied together for the moment because certain operations like "wait until Channel is healthy" assume that the channel will actively try to connect.
Some notes from @louiscryan:
Do we want to canonicalize transport failure modes into an enum or are we
happy with a boolean indicating transient vs. durable. What failure modes
will we have
wire incompatability which can occur at any time and while is in theory
transient you may not want your application to continue working
unreachable
internal implementation error
redirection. the addressed service has moved elsewhere


30
Netty HTTP/2 negotiation fails silently if ALPN/NPN in classpath, but jetty_alpn not in bootclasspath·

If you properly have ALPN/NPN in your classpath, but lack jetty_alpn in your bootclasspath, then we just hang after sending a SETTINGS frame. ALPN never happens, but "unsupported" isn't even called because that is normally called by jetty_alpn.
This makes it hard for users to determine what is wrong with their setup.
The only idea I have for a fix is to set a boolean when our ClientProvider is called and detect if it isn't set.


35
Remove Guava's Service from transport API

For similar reasons as #21, but more for ourselves instead of our users.
This will allow us to be much more precise and have nuances explicitly like how a connection can GOAWAY for new streams but keep the old streams processing.


36
Idea config breaks clean gradle build

FAILURE: Build failed with an exception.
A problem occurred evaluating project ':stubby-integration-testing'.
Commenting out line 31 works around the problem, but obviously doesn't solve it:


43
Add compiler and examples to the build

There is already a build.gradle file, but we need to be using protoc built from HEAD.


44
Add examples module into the build

It's already there, we just need to add a build.gradle file for it and add it to settings.gradle.


57
Implement timeout/deadline in Channel

No description provided.


58
Implement timeout/deadline in Server

No description provided.


60
OkHttp transport has high latency

For some unknown reason, OkHttp transport regressed in performance dramatically, considering it used to be beating Netty. Unfortunately we don't know when. We need to do some profiling and figure out where the latency is coming from.


61
"No cached instance found" exception in integration test

The exception does not cause any problem other than noise, but we should still figure out what is going wrong.


64
Channel interface needs shutdown/close

With the elimination of Service the Channel interface is now insufficient for normal use.
While ChannelImpl has a shutdown Channel does not and intercepting a ChannelImpl immediately converts it into Channel.
Closeable/AutoCloseable would be fine too


65
Consider making Channel/Server abstract classes

They were interfaces previously because of the bane of Service and the need to extend Abstract*Service in ChannelImpl/ServerImpl. Now that Service is gone from those APIs, we could swap to using abstract classes to give us greater ability to add to the APIs in the future.


67
Perform hostname checking on :authority before issuing call

We allow users to override the authority per-call, but we currently don't do any verification that that authority would be permitted for the current server. We should verify the provided authority against the TLS cert of the connection and fail in some way if the cert is not good for the requested authority. We would cache these verifications for the connection in a simple hash map.
It is the Java equivalent of grpc/grpc#471


70
Create CONTRIBUTING file

No description provided.


71
Figure out how our users will use the protoc plugin

Whether it should be installed to /usr/local or similar for protoc to find, or we do some gradle dependency magic (which seems like it is likely difficult).


72
Add getPort() or similar to ServerImpl

I noticed that there doesn't seem to be a way to programatically retrieve a way to get the port a ServerImpl is listening on. Could we add a method that provides this information?
I would argue it's useful for when one wants to bind to port 0 i.e.


73
Naming inconsistency in NettyServerBuilder

I noticed that NettyServerBuilder has the methods userBossEventLoopGroup and workerEventLoopGroup.
Why the user prefix in userBossEventLoopGroup, why not simply bossEventLoopGroup?


80
Daemon Threads in grpc

We have to decide how to deal with daemon threads. Grpc uses non-daemon threads by default and so the pattern
works fine.
However, if one was to provide a custom executor that uses daemon threads the above would terminate immediately. It's quite likely that people will unknowingly provide daemon threads to grpc by passing in custom Netty EventLoopGroup.
Netty's EventLoops use a ForkJoinPool executor by default, which uses daemon threads.
The same issue exists on the client.
OkHttp uses non-daemon threads by default as @ejona86 pointed out to me.
One solution would be to add an infinite awaitTermination() method that does what the name suggests. Another solution would be to create a dummy non-daemon thread on startup and thus ensure that the JVM doesn't exit prematurely.
@nmittler @louiscryan


82
netty: Use DEFAULT_WORKER_EVENT_LOOP_GROUP for both client and server

We have separate thread pool for client workers vs server workers. We would be better suited by using a single worker thread pool for client and server (still likely having a separate boss thread pool on server). It would use fewer threads and reduce thrashing on a server that was also a busy client.


83
Add timing to QPS Client.

Currently the Java and C++ versions of the QPS Client allow one to perform a fixed number of calls. When using them for benchmarking I think it would make much more sense if we could tell the client to hit the server for some period of time (i.e. 30 minutes) i.e. 1 million calls just mean something completely different on GCE, Prod and your local workstation.
WDYT @vjpai . If you agree, I could also come up with a PR for the C++ version.


87
Get protoc plugin compiling on Windows

No description provided.


88
Create new example for route_guide.proto

After we have the new example, we can probably remove the old ones.


90
Missing Copyright Headers in gradle build files and protos

Do we need those?


93
Fix inbound flow control for Calls.blockingServerStreamingCall

We need to explicitly call request(). Ideally, buffer would be removed and we only request a single message at a time; when returning a message with next(), we also call request(1). We would need a request(1) during init.


99
Replace use of InputStream in transport APIs

The current use of InputStream has a few problems:
it is non-idiomatic to split the responsibility for opening and closing a stream; it also prevents features such as try-with-resources
it essentially forces extra byte copying in order to consume the data
I haven't looked at the implementation, but since the comments say that the InputStream is non-blocking, I assume that it is used instead of byte[] simply to prevent modifications of the data when it is passed to multiple listeners (a reasonable concern).
Since there already appears to be a Guava dependency, the obvious alternative would be to pass a (inherently read-only) ByteSource instead.
(ByteString from protobuf would be another option, but for various reasons ByteSource is probably a better choice)


104
Plugin is not building following current instructions

Final gradle install is giving me:
Could not resolve all dependencies for configuration ':grpc-netty:compile'.
Could not find io.netty:netty-codec-http2:5.0.0.Alpha2-SNAPSHOT.
Searched in the following locations:


109
Tidy up Javadoc

Need to ensure that Javadoc in the major interfaces and exposed types is of high quality and properly makes of referencing annotations.
Suggest we divide and conquer as follows...
Builders  @nmittler


110
Create architectural doc with diagram

No description provided.


111
Enforce coding conventions

We have a checkstyle.xml here: https
This was borrowed from the googleapis java client library (I believe).  We should expand this as needed and enforce the conventions when building.


116
Buffer Messages until TLS Handshake and HTTP2 Negotiation complete

When grpc uses Netty as the client transport all RPC calls (aka HTTP2 Streams) block until the TLS Handshake and the HTTP2 negotiation is complete.
This blocking implementation (in grpc) is currently required as Netty's SslHandler doesn't buffer messages until the Handshake is complete ("You must make sure not to write a message while the handshake is in progress unless you are renegotiating."), and there is nothing to stop the user from starting to make RPC calls immediately.
This behavior comes with two problems:
With RPC calls blocking until the TLS Handshake is complete, every call launched before the TLS Handshake and HTTP2 Negotiation are done will block its thread from which one would expect async behavior though.
In cases when a DirectExecutor is being used it might lead to the EventLoop blocking forever (deadlock effectively). There is several scenarios how a deadlock could happen. One such scenario is when you are writing a server in Netty and within that server you want to connect to a grpc service to fetch some data. If you now use a DirectExecutor and reuse the EventLoop of the server with the grpc client, the TLS handshake would block the server's EventLoop, which is also the very EventLoop responsible for completing the TLS HandShake. That way neither the server nor the client would ever make progress again.
@nmittler , @ejona86 and I talked about this problem earlier today and we agreed to get rid of the blocking behavior by adding an additional ChannelHandler to the end of the pipeline (tail) that will buffer any data until TLS & HTTP2 are working. After that it will send the buffered messages through the pipeline and remove itself from the pipeline.
@nmittler @ejona86 @louiscryan


118
Buffer RPC Calls for when the MAX_CONCURRENT_STREAMS limit is hit.

The number of concurrent RPC calls we can do is limited by HTTP2's MAX_CONCURRENT_STREAMS setting. Currently when using Netty as the client transport, each call made after this limit is reached blocks its calling thread until the number of active streams goes below the maximum again. The blocking is necessary as otherwise Netty would simply reject the stream with a PROTOCOL_ERROR, thus we want to buffer those calls and only pass them to Netty once there is room for new streams again.
Similar to #116 a user would again expect asynchronous behavior here.
The proposed solution to this problem is to remove the before mentioned buffering / blocking from grpc-java and let Netty handle it instead. To do this we will add a new Http2ConnectionEncoder implementation to Netty that acts as a decorator to the DefaultHttp2ConnectionEncoder. It will intercept calls to writeHeaders, writeData and writeRstStream and buffer all frames of streams that have been created after the maximum streams limit was reached and pass through the others. The encoder will also add a listener to the connection so that when an active stream is closed the next stream from the buffer can be created. A call to writeRstStream will cause the buffered stream to be deleted from the buffer. Frames other than HEADERS, DATA and RST_STREAM will be passed directly to the DefaultHttp2ConnectionEncoder.
We propose to contribute this change back to Netty as it will likely also be useful for other people using Netty's HTTP2 codec.


120
Remove blocking parts from NettyClientTransport

NettyClientTransport#newStream is currently a blocking operation. It blocks until the HEADERS frame has been written on the wire. This is behavior is not what people who use our asynchronous API would come to expect.
The blocking also is the cause for severe performance issues in the QPS Client as it results in more or less in as many threads being created as there are concurrent calls going on (We have seen ~850 Threads for 1000 concurrent calls, resulting in OOM).
The blocking may also lead to deadlocking the EventLoop in cases where a DirectExecutor is used. One scenario where a deadlock might happen is when the EventLoop is not able to completely flush the HEADERS frame on the wire because then Netty would internally create a task to flush the remaining bytes and put this task in its task queue. This task can never be completed though as the EventLoop Thread is blocked by our very own newStream method waiting for the task to be completed ...
This issue depends on #116 and #118 to be resolved first.


124
Update route guide gradle file with task that just generates gRPC code

Currently there are two tasks in the gradle file, one of which builds and runs the server, one of which builds and runs the client.
In the tutorial, I'd like the users to just generate the gRPC code with protoc without running anything, it'd be useful if the gradle file offered an option to do this


125
Update route guide gradle file with task that just generates gRPC code

Currently there are two tasks in the gradle file, one of which builds and runs the server, one of which builds and runs the client.
In the tutorial, I'd like the users to just generate the gRPC code with protoc without running anything, it'd be useful if the gradle file offered an option to do this


126
Can't build grpc-java

Following the installation instructions on a new Ubiquity instance. Installed Maven 3.2, using Java 8 (Google's JDK).
All works fine until I try the final build, then get:
What went wrong:
Could not resolve all dependencies for configuration ':grpc-core:compile'.
Could not find com.google.protobuf:protobuf-java:3.0.0-pre.
Searched in the following locations:


135
Messages.proto has reference to stubby.

package stubby.testing;
Should this be removed?


142
Code for auth readme pending maven artifact for google auth library

The maven artifact for https
hasn't shown up in maven central yet. Pull request with supporting code is pending that


144
Add MAX_CONCURRENT_STREAMS option to NettyServerBuilder

No description provided.


145
Integration tests failing

Occasionally the integration tests AbstractTransportTest#largeUnary and AbstractTransportTest#serverStreaming are failing on the server side with lots of  Exceptions of the like.
We have traced it down to a bug in the HTTP2 Flow Control in Netty, where frames that are pending due to a not yet received WINDOW_UPDATE frame get canceled. For this bug to trigger the server endpoint has to be in the state HALF_CLOSE_REMOTE with no Flow Control Window left.
I have discussed the problem with @nmittler and @ejona86 and I am currently working on a PR for Netty.


146
Support Unix Domain Socket

Should be straightforward enough now that Netty supports it


150
Add CallOptions parameter to newCall()

We need robust per-call configuration. For example, if we were to add configuration for specifying whether to retry, where would it go? Such configuration would need to be per-call, so it must go in Channel.newCall() somewhere. MethodDescriptor is where timeout is now, but putting more in MethodDescriptor seems like a long-term disaster. Metadata.Headers is where authority and path are now, but putting retry configuration there would be very odd.
A CallOptions class would be a natural place for per-call configuration, and would actually be a good home for timeout, authority, and path. Removal of timeout from MethodDescriptor would make it so that nobody ever needs to modify the object, which would allow us to greatly simplify the generated code. Authority and path don't really relate to Metadata; they relate to HTTP headers but not GRPC Metadata. Removal of them from Headers means we would remove the Headers/Trailers distinction and just have Metadata. That would also fix the issue where Headers doesn't make sense to send from ServerCall since authority and path are meaningless for response headers.
The main breakage would be with Interceptors, as it would be adding a new parameter.
I'm also uncertain as to whether CallOptions should be final or not. I think we want final, since we don't want that part of the API to be transport-specific, but it could be useful to have transport-specific options such as inbound flow control window.
@louiscryan and @zhangkun83, what do you think?


152
The Future interface doesn't implement cancellation

Currently Future returned by the future interface is a SettableFuture and it doesn't implement the RPC cancellation. It should be as easy as implementing AbstractFuture.interruptTask().


154
Tests fail with latest Netty version

When running gradle clean build on master, I get the following unit test failures.
Example Stacktrace


163
GO_AWAY can result in cryptic error messages

In NettyClientHandler, we don't always store the original cause of the GO_AWAY and instead rely on a connection error.  This results in cryptic errors like this:


164
Switch to Netty 4.1 branch

Since HTTP/2 support has been back-ported to the 4.1 branch, we should start basing our work on it since it will get us closer to an official release of Netty.


167
Import latest Netty changes

FYI, this seems to break unit tests.


168
Remove AbstractStub.StubConfigBuilder

Forked from #150
Now we are doing this to reconfigure a stub:
Why not just:
This could make per-call configuration more concise. Instead of:
we could have:


169
Installation fails due to Javadoc errors

Installing the library as described in the main README.md fails in the last step, because javadoc finds two errors and exits with status 1 (which makes ./gradlew install sad).


171
Integrate with more data format

I don't know whether it is possible to use other data format, not just protobuf, for example avro.


172
Push Java libraries to Maven central

As the majority of Java Developer, I am using Maven and not Gradle...
After compiling my self the protoc tool for Mac, and creating the Route sample Maven project, I am still block with the fact that the
are nowhere in Maven...
My Current pom is like this, and the protoc generates correct code:


173
Please test with broken stream IDs

Hi there,
We recently got hit in C with a crash that happened when HTTP/2 stream IDs went unexpected (violating the invariant of increase on a connection) and also aren't prepared for the situation where we approach or cross max stream id (0x7fffffffu). Please check that this case works in Java. If you need some client code to test that, I can let you use the client code that was sent to me.
This is related to C issues: grpc/grpc#946 and grpc/grpc#957
Thanks!
Vijay


174
Access to controller (for connection metadata)

I would like to get the remote client's IP and TLS client-certificate from within a GRPC service. And I guess cancellation information as well.
Protobuf services had the controller argument.  Is there an equivalent in GRPC?


175
could grpc-java generate jars by modifying gradle files? how?

I want to package these java files generated by grpc. How could I modify gradle files?


176
IllegalReferenceCountException for DATA frame with EOS ·

If a DATA frame is received with EOS set, an attempt is made to read the Netty ByteBuf after it has been closed.
The problem is this line:
Since the buffer was already added to the deframer and the user callback notified, they will then attempt to read from the buffer which has already been closed.  This causes the IllegalReferenceCountException to mask the actual problem with is that a DATA frame was received with EOS set.


180
Swap to Netty's NPN/ALPN handling

This should simplify our code and would allow us to support tcnative for OpenSSL support. Other than being faster, tcnative does not depend on the JRE version and does not need bootclasspath specified, which would help new users trying to use gRPC for the first time.
This is API breaking as it will change how we use SslContexts provided by the user. We will require them to be properly configured with ALPN protocols. Since SslContext does not allow any form of partial configuration or reconfiguration (no way that two parties can work together to configure one), we will probably need a helper class that duplicates almost all the factory methods but without the parameters we want to specify (like ALPN protocols).


181
Observe MAX_CONCURRENT_STREAMS in OkHttp client

We ignore it. We shouldn't.


182
Vendorize our usages of OkHttp internal classes

Using the normal OkHttp API didn't quite seem to work for us. The blocking style made it seem like we would need a thread per stream, flow control wasn't exposed enough (although this may no longer be an issue due to how we are now using flow control, other than blocking), RST_STREAM, and other similar advanced HTTP/2 features didn't have quite as much support as we needed. Oh, and trailers...
So that led us to use internals of OkHttp that we shouldn't be, because it will be brittle. Instead, we should propose/upstream an API that supports advanced usage and can be stable.


190
Stream fairness

Investigate how we stand on stream fairness.
Last I checked, Netty is splitting the available window between all the streams with data queued. That seems like it would waste bandwidth as it degrades into sending many 1-byte frames, but each frame has a 9 byte overhead.
Ideally we would decrease latency on "small" streams by preferring them over "large" streams.


192
Enable Travis-CI

Most annoying part is likely building protobuf.


201
Provide Code Style definition file

Would it be possible to provide the code style definition file you're using with Intellij?
Along these lines: https
This would make it easier to contribute to grpc!


203
The `-f` flag for readlink is not available on OSX

readlink -f, as used in run-test-client.sh and run-test-server.sh is not available on OSX.


204
Need docs on how to run integration test suite

It seems that this is the way:
Tab/window/screen 1:
Tab/window/screen 2:
Is that correct?
And is there a way to avoid paying the Groovy/Gradle tax for every test?


205
Use CreateStartScripts for integration-tests

This would make the binaries more portable and wouldn't require running Gradle before every execution.


206
Is there any way to handle cookie in headers?

We usually auth user by cookie/token.Should I use ClientInterceptor to set cookie or store cookie?


209
HttpUtilTest missing package

@ejona86


211
Fix checkstyle warnings for examples

Making example methods private would be easiest, but them being public seemed to be useful in http
getFeature() is also overloaded, and doesn't look like it should be, given that the two methods have different semantics.


215
OkHttpClientStream.window is only written never read

@ejona86
Should be removed


219
method not found for method name automatically changed

I use grpc ruby client and java server, the ruby client prompts that method not found, so I choose to debug the grpc java proto code, I got very confused.
the following code which generated by grpc java defines the SearchForum method:
and the following code register the SearchForum method:
bug when I debug into the createMethodDefinition method:
it shows that the method.getName returns "searchForum".
that is the reason why ruby client cannot find the method SearchForum. but I totally don't understand why method name SearchForum has been renamed to searchForum, the data flow shows that nothing has done to the METHOD_SEARCH_FORUM method name.
I think this is a bug.


223
OkHttp tests flaky

Change to shutdown of okhttp has caused tests to become flaky.
This is the location of the most common failure for me:
Full examples of such failures:


231
Data corruption when receiving payloads larger than 2048 bytes

Here, OkHttpReadableBuffer is calling Buffer#read only once, even though the contract for Buffer#read is that it reads up to byteCount bytes and returns the number of bytes actually read.
Because Buffer uses a linked list of segments where each segment is at most 2048 bytes, Buffer#read will read only up to 2048 bytes at a time. This will result in corruption of any received payload larger than 2048 bytes (and on some smaller payloads as well, depending on the position in the buffer). In my case, it manifested as a series of '\0' bytes where data should have been.
Instead, we should call read in a loop until we have read all the bytes we need to. And we should also have some unit tests for OkHttpReadableBuffer...
I'm working on a pull request.


235
Gradle's testing should show more info on Travis

A flaky build on Travis doesn't provide enough information to diagnose what went wrong, because Gradle generally expects you to view the reports in the build directiory.


238
Race in Server handler initialization

When initializing an incoming client connection, we call startAsync() on the transport, which registers the handler on a separate thread. This is obviously a race, and it would have probably been fixed if I had finished Service removal in #35.
Symptom:
The quickest fix would be to call awaitRunning() from initChannel(). That reduces the rate new connections can connect, but is probably the most expedient solution, until #35 is finished.
@nmittler, thoughts?


239
Lacking preconditions for start() in ChannelImpl.CallImpl

For instance, calling request() before start() has been called results in a NullPointerException.


240
ClientAuthInterceptor.start() skips super.start() when there is an error, causing subsequent use of the top-level Call to throw IllegalStateException

onClose does not log any exception or status, as it is commonly used in cases where there wasn't a server error but instead a client issue. Thus, in the IOException handling of ClientAuthInterceptior, if an exception is thrown it is thrown away, the caller doesn't notice, and will get some odd exception on whatever the next call is (NullPointerException in request() was what led me to this discovery). We discussed that the "proper" exception handling isn't very obvious, but certainly swallowing the exception is worse than the alternatives.


243
Make connection/stream windows configurable for Netty server

This has already been done for the client. Default connection window should be 1MiB.


245
AbstractTransportTest.streamingOutputShouldBeFlowControlled doesn't test flow control

It is actually very difficult to test inbound flow control using our API without long sleeps. streamingOutputShouldBeFlowControlled does long sleeps, but doesn't actually assert the number of requests that should have been requested. That makes it the slowest test (4s, x3 transports) without actually verifying anything additional to the other tests.
We should either fix the test or remove it.


246
ClientAuthInterceptor synchronizes on wrong object

The "this" in synchronized (this), is not the correct object to synchronize on:
It should be ClientAuthInterceptor.this instead. As the code stands, there is no synchronization between threads so you can see NullPointerExceptions as lastMetadata is set but not cached.


253
Add clearer message when receiving GOAWAY from the server.

No description provided.


254
Document transport layers (netty vs okhttp)

Hi, am I right that there are currently two implementations of the transport layer? Netty and okhttp? I was curious if there are any situations in which one might be preferable to the other as I'm not quite sure why there are two implementations.


257
OkHttp may be missing flush after sending headers

It looks like we aren't flushing after headers. This works okay because we don't have any tests that don't send data. We should add such a test to AbstractTransportTests and add the flush as appropriate.
On Friday I was playing with a change that allows removing the flush() on headers for unary and server streaming RPCs. We may be more interested in it now.


260
"An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting."

I happened to send an invalid setting id (0x0) to a java server and saw the connection shutdown. The expected behavior as in http2 spec is
An endpoint that receives a SETTINGS frame with any unknown or unsupported identifier MUST ignore that setting.
instead of connection error.
Here is the stack trace:


262
Context API

Ideally it would not be grpc-specific. It would help with things like #174, but could also maybe provide cancellation support to the async stub and deadline propagation.


263
ServerCalls delays handler calling for unary streams for outdated reason

We delay calling method.invoke() until onHalfClose(), because application may call
close(OK) inside invoke(), while close(OK) is not allowed before onHalfClose().
The restriction of halfClose before OK is no longer present, having been removed before open sourcing. We should update the comment at the very least. We may choose to change how it works.


273
how to generate Grpc class with gradle?

grpc example use gradle-plugin-protobuf to generate Grpc class with the following config:
but this doesn't succeed when I build with gradle, it prompts:
Could not determine the dependencies of task ':generateProto'.
how to reference grpc complier if I create a stand alone java project with gradle?


276
Rename java_plugin to protoc-gen-grpc-java

This follows a naming convention that allows just placing it in PATH and having protoc discover it.


279
Clean up stream after AbstractClientStream.inboundTransportError()

Otherwise the stream object will still be held in the stream map of OkHttpClientTransport.


281
Calls.asyncServerStreamingCall requests only one response

The method Calls.asyncServerStreamingCall requests only 1 response from the underlying call. The documentation for request(N) states that a call will not deliver more than N responses, so if Call implementations would implement this contract, the resulting server stream would never contain more than one element.


289
AbstractTransportTest is flaky.

I've seen several failures of Http2OkHttpTest.pingPong() on Travis, like this one: http
But I couldn't reproduce the same failure in ~30 runs in my local repository.


290
Improve documentation of contract of io.grpc.Call

This class seems to be underspecified. A couple of issues which can't be easily derived:
Can request(N) be called multiple times before the next payload is received, and is it accumulating.
If not accumulating, what does it mean if request(0) is called after request(N) but before payload is received. Does it suppress the already scheduled output? How strong is the contract that there are never more than N responses?
Can there be race conditions for request() calls and onPayload() calls on the listener.
Is request() always be called before sendPayload() or can it be also called afterwards.
What happens if any of the Call methods is called after halfClose, cancel, or onClose.
if cancel is called, should it eventually report onClose(Status.CANCELLED) on the listener.
There might be more. Ideally we would specify the allowed sequences and interferences between call and listener.
I may follow up with a suggestion for the spec later.


293
OkHttp only connects to "h2" ALPN protocol

Values "h2-14", "h2-15", and "h2-16" result in Protocol throwing an error from OkHttpTlsUpgrader.
We should support all those options, as we still are seeing them being used since the final HTTP/2 spec hasn't been published.


296
Gradle build points to https with self signed certificate

In installation step for grpc-java
Exception in thread "main" javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No subject alternative DNS name matching services.gradle.org found.
Work around is to modify gradle/wrapper/gradle-wrapper.properties to change to http.
Should change it permanently?


299
platform issue

I run a grpc java server on Mac OS, it is ok to test it with java client, but error happened on a linux server,and the error is as follows:


300
Reset stream if receive server's halfClose before client sends halfClose.

This was exposed by the discussion on #279.


305
Reduce number of flushes

Each flush causes its own TCP frame to be written because we Nagle is disabled. Reducing the number of flushes would greatly reduce the number of TCP frames and number of syscalls. Even if performance benchmarks don't show a benefit by reduced flushing, if we are able to see improvements to goodput that would be enough for such an optimization.
Reduce number of flushes, in gRPC and maybe Netty.
May need a batch write API. We have the ability internally already, it is deciding a way to expose it.
Allow hint to delay headers until first data write (could maybe be part of batch API).


307
Revisit Lifecycle API

The current shutdown/shutdownNow/isShutdown/awaitShutdown/isTerminated/awaitTerminated API of ChannelImpl and ServerImpl was chosen when we had time constraints in removing Service from our API. During its addition in #33, @adriancole and @nmittler expressed concern for the API, but the API was left in-place and the decision delayed as part of #28. The Health-checking API is coming, but the current Lifecycle API continues to be contentious in the mean time as it is part of both channel layer and transport layer.
We need to agree on an API.


309
Build seems broken on OS/X

Commit da3c3f8 (Solution for GRPC codegen deployment) seems to have broken the compiler build for me on OS/X. The previous commit builds fine.


312
MessageFramer produces too small message chunks

MessageFramer uses
bufferAllocator.allocate(maxFrameSize)
to produce chunks that the transport can write. Currently these chunks are always 4096 bytes regardless of transport or payload size.
Transports cannot coalesce these chunks and typically end up writing each one in a syscall. For large payloads this really hurts performance. Instead we should delegate to the buffer allocator and ask it to produce a chunk up to the payload size. E.g.
bufferAllocator.allocate(len)
Experimentation with HBase has shown that for a 51k payload this reduces syscalls on write by 3x.


317
Integration test largeUnary failing

We recently ran into an issue with one of our services where sending large responses results in transport errors being logged as well as eventual transport failure. I managed to reproduce this behavior in integration test largeUnary as well. When running a single iteration of largeUnary the test passes although connection errors are logged:
However, running largeUnary in a simple loop causes transport failure after a few iterations. This happens with both netty and okhttp client variants, as well as with netty local channel.
Other details:
David


318
Remove String allocation in MutableHandlerRegistryImpl.lookupMethod(String).

In QPS benchmarks we spend roughly 1% of the total allocations on allocating String objects when doing a substring on the method name.


319
CodedInputStream and CodedOutputStream always allocate a fixed 4KB byte array.

Protobuf's CodedInputStream and CodedOutputStream always allocate 4KB sized byte arrays in their constructor. For small messages this is overkill and we should investigate if we can reduce this. On QPS benchmarks our heap consists for roughly 30% of those byte arrays. So this can have a big impact for memory usage.


320
CompositeReadableBuffer and SerializingExecutor allocate a 16 entry ArrayDeque.

The CompositeReadableBuffer and the SerializingExecutor always allocate a 16 entry ArrayDeque. We should investigate if we can get away with a smaller default size in order to save memory. In benchmarks just over 2% of total allocations are the Object[] that back the ArrayDeque.
A 16 element Object[] uses roughly 80 byte of memory (12 byte obj header + 4 byte length + 4 byte per entry with compressed oops). Initializing it to a more reasonable default value like 4, could save ~50%, but we should figure out how many entries we are likely to actually need.


321
Set initial size for ArrayList in TransportFrameUtil.toHttp2Headers

In QPS benchmarks roughly 0.5% of the total heap is spend on growing the ArrayList in TransportFrameUtil.toHttp2Headers(). It seems like we roughly know the size in advance and so we should initialize it to this.


322
Improve synchronization of SerializingExecutor.

We are seeing some contention in ChannelImpl.obtainActiveTransport() and SerializingExecutor.


325
Determine upper-bound for Netty buffer sizes used in frame

As a follow on to
#312
we need benchmarks to determine whether we should be placing an upper-bound on the buffers allocated to the MessageFramer from Netty. We are already setting a lower-bound to page-size (default is 8k) to facilitate buffer object caching within Netty as well as allowing for follow-on writes.
Setting an upper-bound should probably be done by benchmark (unless one already exists)
Above the Netty arena size (currently 16MB) Netty will allocate an Unpooled buffer. Above 32k Netty takes an arena lock to allocate a buffer out of the arena (i.e. it will not cache the buffer itself)
for the scheme Netty follows


329
Support setting the HTTP/2 flow control window in grpc.

It would be nice if we could set the HTTP/2 flow control window from grpc in order to be able to do meaningful throughput tests in different environments e.g. two of my cloud VMs have a bandwidth delay product of 485KByte/s (high latency and high bandwidth). So with the default flow control window of 64KB we can theoretically only ever reach 13% of the possible throughput on that network.
Would be nice to also add this as a command line flag to the QPS benchmarks.
@ejona86 @louiscryan @nmittler


330
OkHttpClientTransport.onGoAway() races with startPendingStreams()

onGoAway has two phases: do things necessary under lock and final cleanup. In the first phase it collects the streams to terminate in the second and sets goAway.
startPendingStreams() does not observe goAway and also creates new streams that should be failed due to the goAway. From an initial look, it seems it would be best to remove failPendingStreams() and simply integrate its two phases into onGoAway()'s two phases; that is, when holding the lock in onGoAway, replace pendingStreams with an empty list, and then when not holding the lock call transportReportStatus


331
Throughput: AbstractServerStream does unnecessary flushes

@ejona86 @nmittler
AbstractServerStream.writeMessage if no headers have been sent will immediately flush an empty header to the transport, by triggering internalSendFrame(flush = true)
In the case of a unary response we don't delay the flush of the framed message to allow the trailers to be flushed at the same time.
Will work on a PR


332
Throughput: NettyClientTransport does unnecessary flush

In the case of Unary & Server-streaming calls the immediate flush of request headers is unnecessary as a single payload must immediately follow for a valid call


336
Memoryleak in Netty Server

When pushing the server hard I am getting
SEVERE: LEAK: ByteBuf.release() was not called before it's garbage-collected. See http for more information.
Recent access records: 0
and OOM with a 30GB heap after a few minutes. I guess we have a memory leak :-). Working on it.


339
Add code generation for the advanced server interface

I asked on the mailing list (https:) whether a callback existed to notify the server that a client had disconnected so it could perform some cleanup actions. Here's the answer I received from Eric Anderson:
Because it is a unary request, there isn't a callback that notifies you of client cancellation (any error is considered a cancellation to the server). The next time you call onValue though, an exception will be thrown notifying you of the cancellation. That is enough in some scenarios.
The "advanced" interface provides such notification though. It has onHalfClose (which is when onComplete is normally called), onComplete (when the RPC gracefully completed), and onCancel (if there was an error or if the client cancelled). We don't have code generation for the advanced interface though, so you would need to implement ServerCallHandler for each method in the service, create ServerMethodDefinitions and add them to a ServerServiceDefinition, which is what you pass to the ServerBuilder's addService. That would be verbose and annoying, but simple code. It would probably make sense for you to create an issue for us to add codegen for the advanced interface.


340
Buffer writes until flush, before sending to transport thread/lock

This design could benefit both okhttp, as it reduces synchronization overhead. It also would also improve flush behavior and make flushes predictable when MAX_CONCURRENT_STREAMS is exceeded.


341
OkHttp does not observe SETTINGS_INITIAL_WINDOW_SIZE

It only observes MAX_CONCURRENT_STREAMS.


346
Cannot compile C++ code on WIndows (VisualCpp)

Hi,
I'm trying to build project under Windows. To do this I added tool chain with visualCpp(VisualCpp) (compiler/build.gradle):
Sadly VisualCpp plugin does not support target and I get error:


350
MessageFramer close on error can recurse

MessageFramer.close is not safe for re-entrancy.
A stream write error, triggers an error reported to the stream, which triggers framer.close, which triggers a write, which ....


352
Recursion in NettyClientHandler during shutdown caused by channelInactive

@nmittler @ejona86
Connection termination can trigger recursion in active stream shutdown
channelnactive -> close active streams -> send pending frames -> write headers (fail) -> connection error -> send go_away -> close active streams -> ...


356
OkHttpClientTransportTest.pendingStreamFailedByIdExhausted is flaky

As seen in the Travis logs:
The commit was restarted, and succeeded.
Another example of apparent flakiness: https. The commit before and after were green. The tested commit only changed Netty code.


357
Try to allow building java without having to build codegen

It may be possible to use the last released codegen binary.


359
Http2ClientStream overwrites error message

Http2ClientStream.transportHeadersReceived() is calling withDescription instead of augmentDescription. This hinders debugging what went wrong.
@yang-g, since he is interested in when this is resolved.


360
Check response content type on client

It seems we aren't checking the content type of responses on the client. The flag was originally put in place because some implementations were sending the wrong content type, but it seems we should enable it again.


363
c++ server and java client communications issue

Hello.
I try write gRPC communication with java client and c++ server on linux.
But i have exception (below) in client when it runs RPC procedure.
Logs shows that server processed request, sended answer and continues its work.
For test i wrote same client on c++ and same server on java. All communication versions works. And only client(java) with server(c++) failed.
I hope you can help me. Thanks.
Caused by: io.grpc.Status$OperationRuntimeException: INTERNAL:


368
Don't use SerializingExecutor when running with a direct executor.

I wanted to know what the impact of the SerializingExecutor is when running with a direct executor.
So I did 3 benchmarks, choosing the best out of 3 runs.
Direct Executor + Serializing (current master)
Direct Executor + Serializing Executor without synchronized blocks.
Direct Executor only, no Serializing Executor
So it seems to me that the potential improvement is significant enough to make some changes and not use a SerializingExecutor when using direct i.e. by adding an option to the Server / Channel Builders.
WDYT @nmittler @louiscryan @ejona86 ?


371
okhttp: Implement outbound flow control

#6 implemented the outbound flow control API for client and server, as well as support for it in Netty, but it did not implement support for it in OkHttp. We need outbound support in OkHttp, or at least dummy support (that implements the API, but doesn't provide push-back) for the near future.
Dummy support could be implemented on the client-side by calling notifyIfReady on stream creation (similar to in Netty). It seems server-side may work as-is. In either case, this would rely on AbstractStream.isReady() always returning true.
But we should really implement the full feature on OkHttp.


375
OkHttp: "Platform.getSelectedProtocol() == null" check is problematic

May 04, 2015 9:48:24 PM com.squareup.okhttp.internal.Platform$JdkWithJettyBootPlatform getSelectedProtocol
INFO: ALPN callback dropped: SPDY and HTTP/2 are disabled. Is alpn-boot on the boot class path?
I used "Platform.getSelectedProtocol() == null" prior to our TLS hand shake to check whether user has already done the handshake, if they haven't, this log would show up while we are about to do the handshake.


382
Unsupported TLS version exception on server side is not handled.

May 05, 2015 11:01:26 AM io.netty.channel.DefaultChannelPipeline$TailContext exceptionCaught
WARNING: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
The corresponding client exception is:
It's hard to understand what was wrong from such limited info.
We should let the client knows its TLS version is problematic.


385
No ciphers available.

With using Http2SecurityUtil.CIPHERS, we are encountering this cipher suites issue, the previous workaround is running with JDK8.
But now this issue is biting Android integration test.


389
Integration test fails on HEAD

I am on HEAD (commit 111f6dd)
./gradlew :grpc-integration-testing:test keeps failing on both Mac and Linux with:


394
Examples should use CreateStartScripts

We are using CreateStartScripts in benchmark and integration-testing, and it seems nice. We should do the same for the examples (so similar changes to 00a7192).
Documentation will need to be updated.


404
Proto files are not recompiled if codegen has been changed

Since we have checked in the generated code, we must re-generate them if 1) the proto files are changed, or 2) the codegen is changed, or 3) the version of protoc is changed.
The generateProto task uses the proto files as input, and I have confirmed that 1) works, but 2) and 3) don't.


408
Bad transport may be used for starting stream.

Currently we reference activeTransport to the newly created transport before the new transport is started , so if the new transport failed starting with an exception, the subsequent stream still try to use the bad activeTransport.


411
OkHttp connection window does not reclaim outstanding connection window of closed stream

Netty will return any unprocessed stream window to the connection window on stream closure, OkHttp does not currently do this.
See onStreamClosed in Nettys DefaultHttp2LocalFlowController.
This will surface if a stream is cancelled and there is a partial message in the Deframer as the Deframer intentionally does not return bytes if there are no pending requests.


412
routeGuideClient hangs

As reported by Martin, (I assume @magx2). @magx2, what git commit were you running at?
Terminal1-server:
Stopping client with CTRL+C results in error in server:


420
can not compile with genetor code

java version "1.8.0_40"
Mac OS X 10.10.3
gradle version 2.4
protobuf version 3.0
I can use gradle compile when skipCodegen=true,but I can not compile when I want code gen.
First,It show me 'google/protobuf/compiler/java/java_names.h' file not found,then I copy the cpp file from protobuf/share to compiler/src/java_plugin/cpp.It show me unknown type name 'Atomic32'.
How can I do it? Thanks.


426
Add documentation saying that transport has weaker API guarantees

No description provided.


427
Make it more obvious that JDK 8 is necessary for TLS

No description provided.


428
Client-side Load Balancing

For the moment, all things client-side load balancing. Designs, requirements, etc. Can be split into separate issues as appropriate.
There is an internal load balancing design that needs to be made public. This is on @a11r's plate.
There is want to support ZooKeeper. It may need a different Channel implementation than the one necessary for the doc @a11r will share.
@louiscryan
@jhump
@mzhaom


429
Update docs to reflect current status of ALPN on older versions of Android

No description provided.


433
Requesting more messages from the Deframer causes unnecessary context-switching

In the case of a incoming stream of messages the flow-control window may accommodate more than one message. If the deframer has several messages in its currently held buffer we end up doing a lot of context switching to request more messages out as we end up with a sequence like


436
ServerCalls binding utilities are too general

Generated server bindings use only two methods in ServerCalls to adapt a service. The lack of differentiation between the different modes of streaming causes too many calls to 'request' more messages from flow control in scenarios where no more messages are available.



440
OkHttp does not return connection flow control for DATA of unknown stream

It returns early.
It seems like we can just move the windowUpdate handling before the return.


441
WINDOW_UPDATE for unknown streams causes exception 41

As discovered by @madongfly. It is very easy to get a WINDOW_UPDATE for an unknown stream. For instance, if we sent RST_STREAM and there is a WINDOW_UPDATE en route from the server already.
It seems we should just ignore such WINDOW_UPDATES instead.


448
Implement shutdownNow

For both ChannelImpl and ServerImpl


449
Consider delaying terminated state until application no longer processing

In ServerImpl and ChannelImpl, we proceed to terminated as soon as all the transports have terminated. However, we should probably wait for all the SerializingExecutors to drain, since that is more of what the application would expect and it is useful to know that all the workers are done.


452
Netty streams should reduce the capacity of pooled buffers passed to sendFrame

When a small write and flush is passed through the framer we hold the full 4k of the buffer until the write completes. By reducing the capacity of a pool direct buffer to the readably byte limit we immediately release the unwritten portion of the buffer back to the pool.
This may or may not have an impact on performance and utility should be evaluated by bencmarking. It may improve performance by making more bytes available to thread-local allocation. The most likely benchmarks to be impacted would be streaming ones that write and flush many messages in a tight loop as it would alleviate buffer-arena locks.


453
Investigate performance implications of hard-coded outbound flow-control buffer

The outbound flow-controller assumes as 32k memory buffer as the ideal pending write limit to determine if a stream is available for further writes (as indicated by AbstractStream.isReady).
This may be sub-optimal,  for example in the single stream case it would limit a flow-control aware message producer for exhausting the connection window.
An alternate solution is to allow each stream to accept messages if
(a) The pending writes for a stream are less than the connection window size
(b) A configured memory allocator indicates that more buffers are available in the allocator pool.


454
Consider implementing pull / batch write to optimize flushing for streams

For streaming calls that can produce a batch of messages as a unit consider adding an interface that allows for a single flush to propagate through the framer to the transport.
In the case of outbound flow-controlled streams it should be possible for a producer to generate a sequence of messages that produce a single flush in response to the onReady (and onPayload) callbacks where the sequence of writes terminates when isReady becomes false.


455
Implement compute_engine_creds interop test

No description provided.


456
Implement service_account_creds interop test

No description provided.


457
Implement jwt_token_creds interop test 57




458
Interop tests and servers should all use the same flow control window

Right now we are generally using 1 MB as the connection window size and 64 KB as the stream flow control window. However, the tests were written assuming we were using the defaults of 64 KB for both. Also, it seems in the future we will be changing the flow control windows more. Java for instance is considering upping the window to 1 MB after putting in better memory handling. Java is also expecting to auto-tune the flow control window size based on the bandwidth-delay product.
We should specify that interop clients and servers should hard-code a fixed connection and stream window size. Given that we want to find bugs with the interop tests, I suggest 64 KB for both, but I'm open to alternatives.


459
AbstractTransportTest.veryLarge{Request,Response} very slow with TLS

I recently noticed that building grpc-java took an additional 30s. I tracked it down to OkHttp enabling TLS for its Http2OkHttpTest. Each test consumes ~12 seconds when using TLS, but is < 200 ms without TLS. It shouldn't take 12s to send 10 MB... The problem exists with Netty as well.
Since each test is run twice (once for OkHttp, once for Netty), that means the tests are ~50 seconds on the critical path of our ~1.5 minute build time.
I don't have many ideas as to why it could be so slow. It could be that the ciphers are really slow, but that is really, really slow. It is important to me that it impacts Netty and OkHttp equally.


460
Support messages with unknown length in framer

We will need some tagging interface or similar in order to detect when available() (or some other method) knows the message length.
This does not mean we would make sure that available() in the inbound direction (because compression makes that hard).


461
Remove thread-hop required for blocking stub

Once #150 CallOptions is supported, we can use a per-call direct executor for blocking stubs.


462
Decide whether gRPC will use options in proto for methods

It would be possible to attach options, such as compression and default timeout, to methods. @a11r was thinking that we wouldn't have such options, but @louiscryan had been thinking we would. It doesn't seem we feel too strongly one way or the other, but we just need to get consensus and move forward.


467
Using SSLCertificateSocketFactory for TLS handshake doesn't work externally for Android older than 5.0

Currently, internal Android projects are using SSLCertificateSocketFactory for TLS handshake, but since ALPN only works well with Android 5.0 or newer, they use NPN for Android 4.4 and older.
It works just because internal OKHttp has been hacked to support NPN.
With the external OKHttp, it will failed as:


473
./gradlew fails 73

When I run ./gradlew build or ./gradlew install, it fails with:
FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':grpc-benchmarks:compileJava'.
Compilation failed; see the compiler error output for details.
Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.
BUILD FAILED


477
Revert swapping to the "canonical HTTP mapping"

Commit 4332c2f swapped to the status-suggested HTTP mappings, but these are really broken for gRPC. I had actually thought I had already reverted the commit, so I was shocked to see it was still in-place.
grpc/grpc@5b53e35 describes examples of specific issues with the mapping.
I want to revert this change immediately, but I don't want to do it just before a release, so I'll delay until after 0.7.0 is cut.


479
Improve synchronization in obtainActiveTransport()

Split out of #322


486
accidental complication error happend problem

I compile my grpc project, sometimes it is ok but sometimes it has the following compilation error:

XXXXGrpc.java:22: error: package io.grpc.protobuf does not exi
io.grpc.protobuf.ProtoUtils.marshaller(com.engzo.search.protoc.SuggestResponse.PARSER));

sometimes ok sometimes not. very weird.



487
Handle IOException thrown by FrameReader.nextFrame() as PROTOCOL_ERROR.

In current implementation, we treat the IOException thrown by FrameReader.nextFrame() as the "IO" issue, so we just close the connection and don't send anymore.
But actually, it may throw IOException for protocol errors like: invalid frame size, RST_STREAM with stream id 0, invalid values in SETTINGS etc, in such cases, we should send a GOAWAY before closing the connection.


490
Upgrade to OkHttp 2.4

Just released. The API changes are known to break us. Let's look at what it'll take to upgrade.


492
Let people use compression

It's been implemented for a while, but no way to turn it on.
We don't have a way to determine if the remote supports compression; that may need to be considered. We should also make sure we interop with C, which is doing compression soon.


493
Add User-Agent

No description provided.


494
Simplify configuration of flow control windows ·

Stream window should really always be the same as the connection window.  We should just expose a single lever for this ... default to 1MB.


496
DeferredInputStream has unused generic parameter

No description provided.


502
Allow for batching writes to the framer

Need to allow applications to perform a sequence of writes that cause a single flush in the framer to improve throughput.
The typical example for this would be an application thats wants to write messages until isReady() is false and to do more writes when onReady() is called. Even if the application is not flow-control aware (i.e is not using isReady) it would still be useful to allow write batching for bursty streams
One simple option for doing this would be to delay the outbound framer flush while executing  onPayload/isReady callbacks though this would only help cases where sends are done inside these callbacks by the same thread. A more thorough API change is probably warranted.
To give some performance context the change described above allows the FlowControlledMessagesPerSecondBenchmark to go from ~700kqps to ~4Mqps on my box


503
Instructions to run the examples fail ·

Steps:
BUILD FAILED


504
Netty throws exception when creating > 1 TLS transport.

When attempting to create multiple TLS transports from the same builder, Netty throws an exception:


506
Move BufferingHttp2ConnectionEncoder upstream to Netty

BufferingHttp2ConnectionEncoder is solving a relatively generic use case.  I would like to explore the possibility of this class being extracted out of gRPC and contributed upstream to Netty.


507
Blocking stub don't throw StatusRuntimeException

Instead, it throws RuntimeExecutionException with a StatusRuntimeException as a cause. Is that what we want?


510
Introduce support for calls as composable objects

Let's suppose we call it "Callable" (actual name may differ), and it is related to Call as is f.i. Iterable to Iterator, or Observable to Observer in the Rx pattern.
The basic contract would be:
Additional scenarios which might be supported by callables or related means:
Resource modification (Read-Modify-Write cycle), with conditions
Conversion to/from Rx and to/from Java 8 streams (no need to reinvent the wheel here. If someone wants to do processing of responses or produce requests, those frameworks should have everything)


511
Consolidate Method descriptor classes

Now we have three classes for representing a method: MethodDescriptor, ServerMethodDefinition, Method. They all have the method name and marshallers. We list their differences below:
MethodDescriptor is used on client when making a call. It has options and MethodType (unary, streaming etc)
Method passes information from IDL to the runtime. It has MethodType.
ServerMethodDefinition is used on server for a registered method. It has the ServerCallHandler.
Their content overlap a lot. They should be consolidated. Here is the plan:
Make it clear that MethodDescriptor is a static representation of the method definition from IDL. It will be used on both client-side and server-side.
Change ServerMethodDefinition to contain a MethodDescriptor
Delete Method. Use MethodDescriptor to pass information from IDL.


515
Support for custom status codes

io.grpc.Status seems to be restricted to the built-in status codes provided, although javadoc suggests that new status codes can be used as long as they are not conflicting. Adding a factory method such as "Status.forCode" should be possible although this would require that the status code type be changed from an enum to integer constant. This may be a small price to pay for the added flexibility.


516
Excessive logging of Status{Runtime}Exception in server

If a service throws Status{Runtime}Exception it gets logged regardless of error class. There should probably be a distinction between "client" errors such as NOT_FOUND, INVALID_ARGUMENT which should not be logged (or at least not as FATAL) and other server errors (INTERNAL, UNKNOWN, etc) similar to how HTTP errors are categorized.


517
"WARN java.lang.IllegalStateException: Refcount has already reached zero" during shutdown

We are frequently seeing this exception during server shutdown but not in all cases. I did a little digging and it looks like the SharedResourceHolder on DEFAULT_EXECUTOR is being called twice in ServerImpl.java: once when transportClosed() is called and again in serverShutdown(). Looks like serverShutdown() first shuts down all transports, so perhaps this is what is triggering the call to transportClosed() before it attempts to release the holder again for a second time.
Thanks,
David


518
In-Process Transport

It would be useful to have a light-weight, low-overhead, in-process transport. It could be used in testing, using gRPC to an endpoint that may be in the same process, and bridging from other protocols (like REST or SOAP).
Today, we recommend using Netty's in-process transport for testing. This has the same benefit of using fakes, in that it tests more of the system's actual behavior. This still seems preferred for testing, but it does cause messages to be serialized and de-serialized.
For the design, I propose we implement an in-memory client/server transport (not a Channel/Server). Implementing a transport instead of Channel/Server lets Channel/Server continue to handle the listener threading model and would keep more behavior in sync (especially error handling). In order to prevent serializing messages, the InputStream passed to the transport would be the same InputStream passed out of the transport. Marshaller.parse() could then do an instanceof check and avoid serialization.
For example, for proto we would add something like the following to parse() in ProtoUtils, since messages are immutable:
The transport itself would not create any threads and do all its work in the caller's thread. I think it wouldn't even need to use locks for thread safety, as Stream is not thread-safe. If the application uses directExecutor for Channel and Server, then no threads would be created.
@jhump


520
Add ALPN setting path for Android older than 5.0

OkHttp only support setting ALPN on Android 5.0+ since 2.3


522
Netty Client does not detect when ALPN was not used

When I tried to reproduce the APLN silence failure, I expected the following change fails our tests, but not, all tests still passed.
The problem itself is not a big deal, but investigating it may expose some hidden bugs.


523
Allow specification of open-loop vs closed-loop test in qpstest.proto ·

Hi there,
As we move toward interoperable QPS testing, please allow the ClientConfig in qpstest.proto specify the type of load to deliver. I would suggest that you support variable open-loop request arrival processes as in https, but ultimately Poisson process is the most important.


524
Allow specification of open-loop vs closed-loop test in qpstest.proto ·

Hi there,
As we move toward interoperable QPS testing, please allow the ClientConfig in qpstest.proto specify the type of load to deliver. I would suggest that you support variable open-loop request arrival processes as in https, but ultimately Poisson process is the most important.


525
Support NPN with Netty

It isn't useful for jetty_alpn, but when using OpenSsl, using ALPN_AND_NPN in the netty application negotiation config allows us to support more platforms without needing users to install OpenSSL.


526
Support NPN on Android when Play Services Security Provider (PSSP) not available

Attempts and their fallbacks:
If installed, use PSSP with ALPN and NPN
If on Android 5.0 or later, use ALPN and NPN
If on Android 4.1 or later, use NPN
Fail or let the application author install some alternative security provider (e.g., build and ship Conscrypt themselves)


527
Verify Protocol Negotiation completed

It seems if neither ALPN nor NPN occur/available we just happily continue connecting and think that negotiation occurred. We should instead check that the protocol negotiated and fail if it didn't.


529
Cleanup io.grpc package

Rename DeferredInputStream as it doesn't necessarily have to be deferred.  Consider making it an interface.


531
ClientAuthInterceptor's ctor requires an Executor, but never use it.

No description provided.


536
Investigate Netty stream closure handling logic

In the Netty handlers, we seem to have various ways that we can detect stream and handle stream closure. We should try to simplify this logic so that it's less error prone.


537
Error When Compiling grpc-java

When I try to compile grpc-java I get the following error:
1 error generated.


538
Add ClientInterceptors "inside" ChannelImpl

This is an alternative to #64.
It could be useful to have a set of interceptors "inside" ChannelImpl. These interceptors would always be used. The could be immutable and added via a AbstractChannelBuilder.addInterceptor() or maybe mutated added after creation on ChannelImpl. Today, adding after creation doesn't cause issues since only interceptCall is part of ClientInterceptor. However, if any other methods were added to the interface it could easily cause problems.
There are two main use cases:
Simple users who don't want to maintain as many object references. Adding to the inside of ChannelImpl means they don't need to maintain both a ChannelImpl reference and the topmost Channel reference, as they could be the same object. These are simpler scenarios that only have one chain of interceptors.
Auth construction factory. Authentication commonly needs a combination of transport and Metadata configuration. For example, using TLS (optionally with client certificates) and then OAuth. The auth mechanism can change in the environment, for example, by not using TLS if the server is on the same trusted network. Having a single Auth-aware factory would be easier to use, as is the design of google-auth-library-java.
The feature would have the downfall of having multiple ways of doing what appears to be the same thing (via ClientInterceptors and via the AbstractChannelBuilder). It would increase user code's (unnecessary) dependency on ChannelImpl, because they wouldn't be forced to use Channel. It might also encourage a few users to create multiple ChannelImpls to keep things "simple."


540
Rename OkHttpChannelBuilder.setConnectionSpec to connectionSpec

We aren't prefixing any of the other builder methods with set.


541
Move DEFAULT_CONNECTION_SPEC to OkHttpChannelBuilder and make OkHttpClientTransport package-private

There is little reason for OkHttpClientTransport to be public. DEFAULT_CONNECTION_SPEC should just be the initial value of connectionSpec in the OkHttpChannelBuilder (instead of the current null).


545
Make Channel hierarchy more meaningful

@nmittler wrote on issue 64:
I think the problem here is that the term "channel" ~= "transport", but "interceptor" != "transport". I think it would be better to provide a more abstract interface that is responsible for creating calls and then all of these "things" would implement/extend that. Something like this:
Discussion continued further. This issue is for these class renames/additions.


547
Recommend tcnative instead of jetty-alpn-boot

We need to make sure there are builds of tcnative for Debian-compatible OpenSSL, first though.


548
Have different abstract base types for each stub type; use it instead of Calls

Currently, channel (and soon, callOptions) are defined in AbstractStub, but the generated code uses them. It could be a good idea to have abstract base types for each stub type that uses channel so that the generated code doesn't.
This also moves the call of Channel.newCall into non-generated code. In all, this should have the generate code hard-code fewer things.


557
Migrate Windows Jenkins-based testing to grpc-testing

The Jenkins host we set things up on is going away. We should migrate the setup to the grpc-testing project.


558
Using grpc with TLS

Hello,
I'm working on grpc in android, and I want to use a self signed certificate.
But when I want to send request, a exception of type io.grpc.StatusRuntimeException is throw.
It's the good way to initialise TLS in grpc?


560
Rename getSslSocketFactoryForCertainCert to be more clear what cert is provided

It isn't clear that the File should point to a CA certificate. It should be renamed to be clear.
createSslSocketFactoryWithCa or newSslSocketFactoryForCa or similar.


565
Ignore initial HEADERS with a 1xx :status

Headers with a 1xx status code in HTTP/1.1 are supposed to be ignored. In HTTP/2, there is a clear example of their usage.
I don't think 1xx status codes are all that important/common, but we should follow the spec.


568
ChannelImpl's constructor shouldn't be public

ChannelImpl is really expected to be constructed from AbstractChannelBuilder. Using the builder allows us to more easily change the arguments as time goes on.


569
Stop using intrinsic locks in ChannelImpl/ServerImpl

I originally used intrinsic locks for expediency. We were still designing quite a bit and we were still using Service. It seems swapping away from intrinsic locks makes sense, as we have no want/need to allow users to compose method calls into higher-order atomic calls.


570
Are Interceptors are executed in an unintuitive order?

It seems the first interceptor listed should most likely be the interceptor nearest the library. If there was a single mutable interceptor list then the current behavior would make more sense.
Note that on server-side the application and library are reversed, so reversing the order would make the first interceptor nearest the application.


572
ServerServiceDefinition.getMethods should return a Collection

Right now it has a return type of ImmutableList, which 1) requires a specific Guava implementation and 2) there is no need for order of the methods. For instance, in the current implementation we could use methodLookup.values().
Note that having "Collection" as the return type but actually returning an ImmutableList is fine though.
I could be convinced that returning a List or Set is appropriate, but if we return Collection now we could actually change to using a List or Set in the future and remain API compatible (since the class is final).


573
The generated Service.methods() should return a Collection

For similar reasoning to #572. Just limiting our API surface.


575
Maven plugin instructions are incomplete

The build instructions do not seem to work.  The maven-protoc-plugin is neither in Maven Central nor does it appear to be in the Sonatype snapshot repository.  Which repository should we use?


577
Android interop test should create channel in background thread.

When the host is not an ip address, addressing resolving will cause NetworkOnMainThreadException.


578
OkHttpClientTransport.start should be async

Connecting should be run in an executor. The main problem is that we currently can't create the frameWriter (an AsyncFrameWriter) until we have connected. The frameReader doesn't seem to be as big of an issue as we can just delay executing clientFrameHandler.
We could try to use the same SerializingExecutor that is used inside AsyncFrameWriter. We would need to lazily initialize some things used on that thread, but we would be able to guarantee that the connection is started before real writes occur and they would be automatically queued.
This would fix the true problem that is causing #577.


581
Error zero_copy_stream.h file not found during ./gradlew installDists

When running ./gradlew installDists I receive the following error message:
In file included from /Users/me/projects/grpc-java/compiler/src/java_plugin/cpp/java_generator.cpp:1:
Am I missing something? I am just trying to get the example server up and running via run-test-server.sh.


583
OkHttp's cancellation is not properly synchronized

OkHttpClientStream.sendCancel() calls finishStream() from an application thread. But finishStream() calls transportReportStatus() without any lock held. That is not synchronized correctly, as transportReportStatus() may only be called from the transport thread (i.e., while lock is held).
It seems that all usages of streams is done while lock is held except for within finishStream() and data(). data() can actually race with finishStream() and end up sending DATA frames after the RST_STREAM. It seems it would be best to just have stream protected by lock, because it having its own synchronization isn't providing much benefit and isn't leading to correct code.


594
benchmark/ has two README.md's ·

The readme at "benchmarks/src/jmh/java/io/grpc/benchmarks/netty/README.md" is in the java source directory, which seems a poor place for a readme. It should be integrated into the README.md at "benchmarks/README.md"


598
Memory leaking when using ALPN

We're experiencing a slow memory leak with 0.7.1 when using ALPN and TLS. The server is built and started with this code :
This is the alpn version that we're using.
Running a heap dump, we're seeing a huge amount of SSLEngineImpl objects stored in a concurrent hash map :
The server is running behind a Amazon ELB. This might be related since the Amazon load balancer would open connections every once in a while to the server and to ping and make sure the server is live. Unfortunately it takes a long time to replicate, the server would run out of memory after 36 hours or so, but it doesn't seem like the number of requests


602
Error message when connecting with TLS to closed port unhelpful

When I connect to a random port that is not open, the error message is not helpful.


605
BufferingHttp2ConnectionEncoder does not shutdown properly on channelInactive

@nmittler
There is a nasty race condition during the handling of channelInactive in NettyClientHandler which goes a bit like this....
This reproduces for NettyClientTransportTest.bufferedStreamsShouldBeClosedWhenTransportTerminates with 5.0beta5.
Having streams being created as a side-effect of channel inactivation is undesirable. Potential fixes include
Reorder teardown in Http2ConnectionHandler.BaseDecoder.channelInactive so encoders are closed() before streams are closed.
Make BufferedHttp2ConnectionEncoder check channel.isActive() when trying to create streams.


608
Make sure error status codes are consistent with other implementations

No description provided.


609
Implement proper reconnection

Implies exponential backoff, etc.


614
go-java interop test fails in large_unary and client_streaming

The breakage started somewhere between 2015-07-07 and 2015-07-09. Commit efbb655 is likely the trigger. The bug is only in TLS test cases.
To reproduce:
Start Java server:
Start the go client in docker.
The client fails with
The server prints out this error:
WARNING: Stream Error
@ejona86 @nmittler


615
May need to tweak ordering of `complete()` and `close()`·

We shouldn't be getting the "successful complete() without close()" exception. It seems it is caused by another exception and us not cleaning up the stream well.
It isn't the point of this issue to fix the "flow control window exceeded" exception. That is being investigated elsewhere.


616
During shutdown, Netty should gracefully wait for RPCs to complete before terminating the connection

Currently it is just calling "channel.close();" which brings down the TCP connection and cleans up all the RPCs.


617
Recommended IntelliJ code style settings are out of date

I downloaded and imported the GoogleStyle code style settings xml, as recommended in Contributing.md. It doesn't seem like this project and its checkstyle are actually conforming to those style settings (which is fine, I like the prevailing gRPC style better!) A few things in particular keep coming up:
Method argument wrapping: GoogleStyle has method call arguments and declaration parameters on the next line aligned to the opening paren. This is configured in Code Style > Java > Wrapping and Braces > Method declaration parameters > Align when multiline, as well as the same option under Method call arguments.


620
OkHttp should use SSLSocketFactory.getDefault() by default

We should default to using TLS. Right now setting sslSocketFactory enables TLS. We should have a separate option for enabling/disabling TLS. It could easily be a boolean, but we might choose a enum to expand it later; either way.


622
AbstractStream should enforce calling thread

In AbstractStream, there are several javadoc comments that read:
"This must be called from the transport thread, since a listener may be called back directly."
While this is informative, it would be even better if it was enforced.  It would be a good idea to call Thread.currentThread().getId(), or some similar check to make sure that the transport thread is actually the one making the call.  In cases where holding a lock is tantamount to being threadsafe, checking Thread.holdsLock() would also be possible.  Ideally these cases could be wrapped up in some sort of assertTransportThread() method.


626
OkHttpClientTransport.newCall should be async

Our API is async, and so doing blocking for MAX_CONCURRENT_STREAMS is breaking that. We should go fully async.


627
Redundant/different default window size used in okhttp

DEFAULT_INITIAL_WINDOW_SIZE and DEFAULT_WINDOW_SIZE


634
Use shared scheduler for ServerImpl deadline support

#576 was merged slightly before #619, so we are able to use a single thread for deadlines on server-side and client-side. That isn't super-important, since we don't expect more than one server generally, but could is still maybe a nice-to-have. At the very least, the TODO could be removed if we decided not to bother.


635
Consider renaming DUPLEX_STREAMING to BIDI_STREAMING

I thought a while back it was decided to use "bidi" or "bidirectional" streaming to describe a call that has both server and client streaming. I appers C, C++, Node.js, Ruby, and PHP use "bidi." It appears C# uses "duplex." It appears Go did not define the concept. I couldn't find what Obj-C and Python use.
We would need to change it in ClientCalls, ServerCalls, and MethodDescriptor.MethodType.


636
Catch exceptions thrown by Executor.execute

direct executor lets RuntimeExceptions pass through the call stack. We need to defend against that in places we would permit direct executor. Even without direct executor, execute can throw with rejected exception, so it is really a case we should handle.


637
Rename "payload" to "message"

Call has onPayload and sendPayload. Such things should use "message" instead; little sense in having different names for the entity.
We should try to maintain backward compatibility for a bit for this. We can simply make the new "message" versions of the methods and have the new versions call the old versions. When we remove the old version we make the methods abstract on Call.


639
ServerCall.onCancel should not be called for server-initiated close(CANCELLED)

For reasons possibly lost to history, we decided to notify the server's onCompleted after the server completed with non-OK status codes, except for CANCELLED which notifies onCancel.
For whatever reason CANCELLED triggers onCancel, DEADLINE_EXCEEDED probably should as well. However, it might be good to re-discover the reason for the behavior, and maybe only call onCanel if there was an error.
I don't believe we are following the documentation today. It seems AbstractStream only triggers onCancel when an error occurs.


641
Are GRPC support server sends messages to the client driving?

Hello everyone,sometimes I want to send something from server to client directly,not response by client call request,whether GRPC supports such operations currently?


645
Cannot find symbol makeImmutable() and isMutable() at compile time

Hi,
I tried to compile my proto with Maven using the configuration reported in the how-to:
However I managed to get it work only changing to alpha-2


646
Fix flaky OkHttp test

We're seeing an OkHttp test fail randomly, with the output below.


647
implement health checking service

defined in "gRPC Health Checking Protocol"


649
Replace Metadata.Trailers and Metadata.Headers with just Metada

In Headers, path can be removed (just use a different MethodDescriptor; if we really need it it the future, it can be added to CallOptions) and authority can move to CallOptions. At that point, there isn't a distinction between headers and trailers and we can just have "Metadata".


650
Implement oauth2_auth_token

I don't know if any API additions need to be done to make this use case easy.


651
 Server reflection service

No description provided.


653
Q: How to declare rpc method without input and returns messages?

is it possible to define rpc method without input and returns messages?


658
Allow using in-process transport without the registry

It would be nice to avoid the registry when you are able to pass objects around. That prevents the need to have to determine a unique name. The most obvious case is in tests, but it is actually just generally useful.
#640 had some discussion about options for doing it.


661
Change AbstractTransportTest to propagate server delay in request

Commit 3e26b99#diff-cf14d5396f1bd6ab4bcf9c37e7756356R143 introduced the use of an AtomicLong to manage server delay and also created a server delay interceptor.  Neither of these are needed since the integration test request messages support propagating server delay.


664
Java warnings in Context API

In lookup method: found raw type: io.grpc.Context.Key
missing type arguments for generic class io.grpc.Context.Key


668
Invert User-Agent order so application-provided string comes first

RFC 7231§5.5.3 says:
By convention, the product identifiers are listed in decreasing order of their significance for identifying the user agent software.
Combined with the example, it seems that we should put the application-provided string first.


681
Attaching Metadata to error Status responses...

I'm not sure what the "best practice" is for returning application-level error information (would be very useful to understand Google's own internal practice for guidance), but certainly one approach is to attach trailing headers with application error information to error responses. Setting additional headers via thread-local using a server interceptor seems easy enough, but for client-side it seems particularly awkward capturing metadata on a per-call basis using an interceptor. I see examples in MetadataUtils for capturing "last set headers" on a stub or channel but this is only useful for testing and cannot capture on a per-call basis. Other option would be to use the async stub and a thread-local to pass the metadata information along to StreamObserver.onError() but this loses the convenience of using the blocking and future stubs. I'm not sure if the same approach works for a blocking or future stub since the listener may be invoked in a different thread.
Will the context api once fully integrated make this easy, or would it make sense to have a way to "attach" metadata to a Status object (perhaps this would be desirable anyway for convenience)?


687
Fix UNKNOWN status without description

We should basically always provide a description, so that users have a hope of distinguishing whether an error is local or remote. The NettyClientHandler should be converting the HTTP/2 error code to a status.


689
Switch ALPN/NPN to advertise only h2

No description provided.


693
android-interop-testing fails to build due to lint failures

The installDebug task works, but the build task does not. It seems like some of the warnings could be ignored (like literal strings), but some other ones need to be properly dealt with ("NewApi: Calling new methods on older versions").


694
Double-closure of call during interop tests

I find it in the stderr of the test report of Netty, Netty local channel, and OkHttp. I see it printed out to my console once, so I think that may be from the InProcess test.
This exception very likely means we have a bug and are double-closing.


696
In-process transport deadlock during shutdown

Simultaneously shutting down both server and client sharing the same in-process transport can lead to a deadlock. During server shutdown, the transport lock is held while calling transportShutdown on the channel listener, which attempts to lock the channel. At the same time, channel.shutdownNow() holds the channel lock while also trying to lock the transport which leads to a deadlock:
Found one Java-level deadlock:
Found 1 deadlock.


700
Pass URI to Credentials.getRequestMetadata

ServiceAccountJwtAccessCredentials needs the URI, or requires the user to specify it ahead of time. Specifying it ahead of time is a pain and hard to know which strings are needed.
We will need to add a way to get the scheme and authority from ClientCall or Channel.
@anthmgoogle, FYI. @louiscryan and I agreed on this and have a gRPC-integration solution in mind. That means we will soon always be specifying the URI and passing the defaultAudience would no longer be necessary for our usage.


702
compute_engine_creds and service_account_creds failing

They were added in 926a2c1 and ac4952c, but since 131ba5d the tests look like they have been failing.
@madongfly, do you want to fix it?


704
Implement per_rpc_creds




705
Implement timeout_on_sleeping_server ·




706
Implement unimplemented_method




713
ServerEssentials needs more Javadoc

No description provided.


714
Core gRPC package needs documention·

The default javadoc generated is missing package level documentation


715
AbstractChannelBuilder should be renamed AbstractChannelImplBuilder

This is to match ChannelImpl.  If ChannelImpl gets renamed in #680, it should be updated accordingly.


716
Create a grpc.internal package

Some classes that should not be part of the public API should be moved to an internal package.  Additionally, grpc.transport should also be moved to grpc.internal.transport
This shouldn't be api breaking.


717
Change the javadoc in MutableHandlerRegistry to not say Impl

There is already a MutableHandlerRegistryImpl, the javadoc on MutableHandlerRegistry is somewhat confusing.


718
Remove All Deprecated Classes before Beta

There are a number of classes in core that are Deprecated.  Since it will likely be impossible to remove them later without breakage, they should be removed now.


722
Marshaller should use "deserializing" rather than parsing

Javadoc verbiage in the Marshaller should use appropriate negative and positive words.
Questions raised:
Are parse() and stream() inverses of each other?  (group says yes)
Are serialize and stream inverses of each other?
Should Marshaller use marshal() and unmarshal()?


723
Add javadoc to Context.CancellationListener

No description provided.


724
NanoProtoInputStream should be package private

No description provided.


725
Enforce character restriction for AsciiMarshaller

AsciiMarshaller is used for HTTP2 Headers.  Since HTTP2 is more restrictive about what ascii characters can be used, AM should either be more clear about what characters are accepted, or enforce such restrictions.


726
ServerCall Handler should take a method descriptor rathe than a string

No description provided.


727
Move Authority from Headers to ServerCall

This was a maybe thing to do, but creating an issue for it anyways.


728
Review the generics on ServerCallHandler

Maybe add a super and extends.   The context for this issue was how would a proxy be implemented.


729
ServerInterceptor.interceptCall should take a method descriptor

Currently it takes the name of the method.


730
SharedResourceHolder should be moved to the internal package

No description provided.


731
Add "set" and "add" method prefixes to AbstractChannelBuilder (e.g. addInterceptor)

Our API is currently not consistent between how builders are implemented.  Considering the pervasiveness of the set, get, add, with, and other prefixed methods of Proto and the existing stubby implementations, consistency should be swing towards these style methods.
Also, AbstractServerBuilder should be changed likewise


732
AbstractChannelBuilder.buildEssentials should have a javadoc

No description provided.


733
Delete ChannelEssentials

Since ChannelEssentials only affects transports, it should likely be deleted.


734
Deprecated Channel.newCall should be deleted

Clients should use the non deprecated sibling newCall.


735
ChannelImpl.awaitTerminated should be renamed awaitTermination

This makes it make the spelling of ExecutorService shutdown methods.


736
ChannelImpl.TIMEOUT_KEY should be private

Possibly moved to the internal package.


737
Remove ChannelImpl.ping (or possible mark it experimental

It isn't clear that ping will be part of the long term gRPC interface (and is easy to add back in later if needed).  Either remove it or mark it experimental.


738
Deprecated inner classes of ClientInterceptor should be removed

No description provided.


739
CheckedForwardingClientCall should cancel delegate on failure

It should also document whether it cancels or not, even if we end up not cancelling the delegate.
@ejona86 do you remember if there were reasons to not do this?  If so, are they stronger than the reason that cancelling should still be done?


740
Add @Experimental to Context

Or add some other way to denote that Context is still being tried out, and may change.


741
Consider shortening generic names (BuilderT, RequestT, MethodDescriptor<>, ServerCall<>, ServerCall.Listener, ServerMethodDefinition etc.)

There are a lot of places where the generic parameters are kind of long, and could be made more concise without surrendering readability. The classes listed in the title are some but not all of classes that could benefit from this.


742
Metadata.Key.asciiName should be private

Because the returned value is mutable, it should be limited to being modified by our own code.


743
Remove second MethodDescriptor.create method

currently there are two methods, one that takes the fully qualified name and one that takes the service and method name.  Since the rest of core is using the fully qualified name, the second create method doesn't need to be part of our API.  (and can be easily added back if there is demand).


744
SerializingExecutor should be moved to be internal

No description provided.


745
Maybe remove Server and rename ServerImpl ·

It may be worth keeping Server as a base to ServerImpl (in order to add methods later on like getServerAddress)
This was a contentious issue, but needs to be resolved before going beta.


746
ServerImpl.awaitTerminated should be renamed awaitTermination ·

This is the same as the change in #735


747
Make ServerCall.Listener methods no ops

Some Listeners may not care about implementing every method.  Thus, ServerCall.Listener methods should provide No-op default methods.  This has the downside that users of this class may not override correctly, or miss understanding how to listen.  However, since this is an advanced api, it may be reasonable to ask clients to understand how this class works.


748
Make ClientCall.Listener methods no ops

Same issues raised in #747


749
Make ServerServiceDefinition.getMethod private ·

This method was only intended for internal use.  ServerServiceDefinition.getMethods should be used instead.


750
Remove  Status.OperationRuntimeException and Status.OperationException

These are deprecated in favor of StatusException and StatusRuntimeException


751
Add javadoc to clarify equality on Status

Are Statuses equal based on code, code and message, or even as far as the throwable?  The javadoc for equals should clarify this.


752
Fix javadoc on Status.asException

@ejona86 I believe you asked for this, but I am now fuzzy on the details of why. Assigning to you.


759
okhttp: using pending stream to queue writings before the connection is connected.

Currently we use the serializing executor to implicitly queue writings before the connection is connected.
As we've added an obvious queue inside pending stream, using it to queue writings during connecting makes more sense.


760
okhttp: pending stream should be cancellable.

Current implementation will throw a NPE


765
Flake: Cannot transition phase from STATUS to MESSAGE ·

As seen in https:
Not much to go on. This can just track occasions that we see it.


770
Set up and host gRPC API docs for beta in gh-pages branch0

No description provided.


779
how to get the connect channel  on the server side9

on the server side ,how to get the netty connect channel?I want to hold all the connected channels in my service. because
1: I want broadcast message to client
2: use username/password authentication by my server only once when the client connects for the first time.


782
okhttp: startPendingStreams() does not check goAway == true2

This can cause us to create new streams after we have received GOAWAY


785
Promote OAuth2 service account to Jwt Access credentials5

Application Default Credentials can return Oauth2 service account credentials. gRPC can use more efficient JwtAccess credentials in place of this if no scopes have been specified. This tracks logic to detect this case and "promote" the credentials to JwtAccess form with the same identity properties if the OAuth2 form is passed in for use by gRPC.


786
okhttp: pending stream is broken due to stream id check.6

OkHttpClientTransport.mayHaveCreatedStream() checks the stream id less than the nextStreamId, but the nextStreamId is not increased yet when the pending stream is being started.
And OkHttpClientTransport.mayHaveCreatedStream() is wrong when the stream id greater than Integer.MAX_VALUE - 2.


789
Simplify Netty pipeline using Buffering handler9

The current pipeline configurations using one of the buffering handlers (tls, plaintext, etc.) are rather complicated and it's not always clear which handlers will handle exceptions in various cases.
We currently add the buffering handler and the HTTP/2 handler at startup. The buffering handler holds any writes until the startup handshake (e.g. SSL/TLS) completes, at which point it directs all buffered writes to the HTTP/2 handler. While those writes are occuring, the buffering handler stays in the pipeline (this is due to threading behavior of Netty WRT writes occuring outside of the event loop). If any problems occur while those writes are taking place, exception handling could occur in either the buffering handler or the HTTP/2 handler.  It would be desirable to guarantee that exception handling can occur in only a single place at any point in time.
Proposed change:
Part 1): Add a ChannelHandlerAdapter as the last handler in the pipeline. Netty has a race condition when writes occur from outside of the event loop.  The last ChannelHandlerContext is extracted in this thread and then the write is called. If however, the pipeline is changed between when the context is obtained and the write occurs ... badness ensues. As a workaround, there is some hacky code in the buffering handler to account for this race. A better solution to this problem would be to simply enforce the existence of a handler at the tail of the pipeline which never changes.  This will just be a pass-through, but must implement the write method (this is to avoid another Netty gotcha, where it will skip handlers if it has determined that they are uninterested in the event).
Part 2): With the handler from Part 1 in place, the installation of the buffering and HTTP/2 handlers can be modified to a replace.  Initially, only the buffering handler is installed (not the HTTP/2 handler). When the startup handshake completes successfully, the buffering handler will replace itself with the HTTP/2 handler, and then empty it's queued writes to the HTTP/2 handler.
In this way we guarantee that only one of these handlers exists in the pipeline at a time.  Failures due to the initial handshake will be handled by the buffering handler. Failures due to writes will always be handled by the HTTP/2 handler.
@ejona86 FYI


797
Unable to compile gRPC codegen plugin7

Hi,
I encounter the following error when I tried to do a gradle build from windows command line.
*** Skipping the build of codegen and compilation of proto files because skipCodegen=true
FAILURE: Build failed with an exception.
Where:
Build file 'D:\grpc-java-master\compiler\build.gradle' line: 12
What went wrong:
A problem occurred evaluating root project 'compiler'.
Could not find property 'libraries' on org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler_Decorated@5e746d37.
Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output
BUILD FAILED
Total time: 4.01 secs
Do I need to explicitly set the classpath in order for Gradle to understand property 'libraries'?


798
Implement Connection Backoff Interop Test8




799
Discuss StreamObserver9

abstract class?
rename to Observer/do we are how closely it matches RxJava?
onValue -> onNext?
just depend on RxJava for stub?


802
Skip io.grpc.internal in javadocs2

This would reduce the noise of the JavaDoc and discourages people from using APIs they shouldn't.


805
Latest build seems to require Java 85

When building the latest from master, I see an error in the stacktrace indicating that it's looking for Java 8 classes:


806
Release instructions should specify minimum docker version6

The default docker in the apt repos for Ubuntu 14.04 includes 1.0.1, which has some bugs that prevent releasing.  A known working version is 1.7.1, so we can probably just specify that one.


814
HelloWorld example referencing to io.grpc.stub.Calls.asyncUnaryCall4

Hi,
I tried to create a new project to include the HelloWorld example provided in the git,
All else is fine, except that GreeterGrpc is referencing to:
I am referencing to the following libraries which I have built using the grpc-java and protobuf-3.0.0-alpha-3.1:
I did a search and understand that the missing classes are existent in grpc-all-0.7.1.jar.
How can I overcome this problem? I want to be able to generate classes from .proto files that are compatible with the above libraries.
Appreciate any advice or help.


817
android-interop-testing doesn't build

With the renames to packages, it is now broken. I expect that the generated code needs to be regenerated as well (for other reasons).
We should backport the fix to the 0.8.x branch.


821
Make interceptors an abstract class?

They are an interface today. We can add other interfaces later, but would need instanceof checking in ClientInterceptors/ServerInterceptors to enable features.


824
Prevent using metadata with invalid keys

We should restrict the characters that are permitted in keys, as we have no way to send many characters (like colon, unicode, etc).


829
Call ClientTransport.Listener.transportReady() in a more appropriate time.

Currently we call it after the TCP connection is connected, we should call it after receiving the settings frame, so that we know for sure that the server accepted the connection.


831
StatusRuntimeException: INTERNAL: Invalid protobuf byte sequence

A user of Cloud Bigtable reported a bug on a really large streaming response: googleapis/java-bigtable-hbase#407.  Any advice on how to address the stack trace below?


832
Provide a way to set client side proto size limit.

Cloud Bigtable has server size proto message limit of > 64MB. The current size limit on the client size is 64MB (default) in CodedInputStream.java. CodedInputStream.setSizeLimit() can be used to override the default value. Cloud Bigtable would like a way to set the proto message limit on the client side so that users can work with larger data set.
Related reported issue: googleapis/java-bigtable-hbase#407


838
Mark Compression API @Experimental

Some pieces of compression are already checked in to master. There is a question if they will be api-stable in time for beta. We need to do something with what is checked in to release. Determining whether that is revert the changes or mark the API as @Experimental is the point of this issue.


839
Add a "comment" attribute to ExperimentalApi

We can attach link to the issue, doc or issue in there.


842
gRPC SSL Examples

Hi,
Please advise on where I can find  java examples on client-server authentication for SSL?
Thank you.


848
Reconnect interop test is broken.

Starting test:
Test failed!


849
Travis fails due to un-run codegen

no changes added to commit (use "git add" and/or "git commit -a")
Error Working directory is not clean. Forget to commit generated files?
The issue seems caused by an incomplete rebase with #826. The modified code-generated file just needs to be committed.


853
Grpc client not invoking gRPC call after establishing SSL handshake (Using ALPN)

Hi,
It seems that the SSL handshake is successful when the client try to establish a connection to the server. The log ends with the following at server-side:
while the client side log ends with:
However, after some tracing, the RPC methods that were invoked by the client, seemed to be stucked at  getUnchecked(Future future) in io.grpc.stub.Calls at this line where it does return future.get();
The client code to call the server is as follows:
I also amended the implementation of TestUtils loadCert method to the following:
Is there something that I might have missed out?


854
{Channel,Server}.awaitTerminated should wait for application to complete processing

As we discussed, we were going to have awaitTerminated() wait until all application notifications execute. We can achieve that by tracking number of unclosed calls (clientcall or servercall): when creating a new call register it, and after the application listener's close is called de-register it. In awaitTerminated it would wait for the registrations to become empty/zero.


857
MessageDeframer stalled logic needs review

Currently there is a bug that results in the MessageDeframer not being stalled when stream is being closed (in error scenarios), resulting in the stream listener not being called immediately.  Specific lines of review include:
return unprocessed.readableBytes() > 0 || (nextFrame != null && nextFrame.readableBytes() > 0);
And a proposed change (WIP):


859
:grpc-protobuf:test fails frequently on Travis.

No description provided.


870
GrpcSslContext bug for mutual authentication

Hi,
My 1-way SSL authentication is working with the codes below, however, it doesn't seem to work for 2-way. I understand that by declaring the appropriate SslContext, we should be able to enable mutual authentication. I have already invoked the appropriate keyManager/trustManager, any idea why the mutual authentication did not take place?
I followed the steps to set up jetty ALPN at
Upon inspection of the SSL debug logs, I noticed that the CertificateRequest message (as stated in http), was never sent to the client to initiate the Client Authentication.
An excerpt of my server log is as follows:
Am I missing out something? Or is it an inherent bug in gRPC?
Appreciate any advice on this problem.


871
Determine API stability story for Android

For Android, we are considering alternative transport implementations, for example, Cronet. That would imply we may not support OkHttp in the future. We need to be able to communicate the API stability of OkHttp's presence.
One possibility is that we have an Android-specific class that is able to choose the "correct" transport to use on Android. We would have to communicate that using OkHttp directly would not be API stable.


873
Jmh Benchmarks don't work

gradle :grpc-benchmarks:jmh
Trying to run that results in a bunch of errors printed out to the screen.


874
Design Auth to combine normal credentials with TLS creds

There is a want to guarantee that credentials are treated as a whole to guarantee invariants. For example, it is not appropriate to send a JWT over an unencrypted connection.
There may be other constraints that are missing, but it is not fully clear yet. I'll update the issue as more is known.


875
InProcessTransport doesn't call onReady

The in-process transport supports flow control and supports isReady(), but it never calls onReady(). It seems to be just an oversight/bug. Since the in-process transport connects immediately, onReady() should probably be called on the client immediately in newStream().
Locking will be a little interesting since for a single request() both client and server listeners may need to be called (because numMessages can be > 1). It looks like {client,server}Requested() could maybe return a boolean for whether {client,server}Requested > 0 && {client,server}Requested <= numMessages, which would imply onReady() should be called.


879
Set Minimum Guava version to 18.0

Google internally was stuck using Guava 14.0 for legacy reasons, but it appears that the restriction has been lifted.  We should set the minimum supported guava version to 18 since the older one had bugs and  performance issues.


887
OkHttp: race between sendCancel and sendFrame.

If sendCancel is called (by timeout for example) before the stream is started, a following sendFrame will cause a NPE:


895
Mark generated MethodDescriptors @ExperimentalAPI

For Android, we may want to lazy-create MethodDescriptors in order to prevent cascading of static initializations of all dependent protos for all methods. That would mean making accessor methods instead of static fields.


896
Upgrade to protobuf3-b1

It's released. It's on Maven Central. It's required for beta.


897
Trash HandlerRegistry.Method

We only need the ServerMethodDefinition. ServerServiceDefinition requires a list of all contained methods, which would make it painful for proxies. So lookup should just return the method definition.


898
Add authority to HandlerRegistry.lookupMethod

It should be possible to do virtual hosting; that requires authority. It would just be an additional string to lookupMethod (presumably as the first parameter).


899
Move io.grpc.stub.StreamRecorder to testing package

It really is only used in testing. I'm not wild about the class in general, but reducing its usage to tests addresses the primary concerns.


900
Remove the hack that generates nano package names.

We should use a helper function from protobuf, which is more reliable, but not there yet (protocolbuffers/protobuf/issues/778)


909
ClientAuthInterceptor should signal callers on 401s

If clients are signaled of 401s, they can do clean up by, for example, invalidating Credentials by calling GoogleAuthUtil.clearToken(Context, String);


913
Build failed with exception "Failed to apply plugin [id 'com.google.protobuf']"

I compile protobuf and grpc "by hand" for my system. protobuf is version 3.0.0-beta-1. protoc is in the PATH, and the lib, include and pkgconfig directories are set in CFLAGS, CPPFLAGS, LDFLAGS, LD_LIBRARY_PATH, and PKG_CONFIG_PATH, respectively. The compile of grpc-java worked with 0.7.1 and 0.7.2, but fails with 0.8.0. Here the grpc-java build


917
Hit the frame size limit of 100MB. Any way to increase this limit?




922
Issues when generating server/client stubs from .proto files.

I've generated and ran client and server stubs painlessly for python using
I've been trying t generate client stubs for android using
they seem to be classes inside the outer class? What am I missing here?


924
Require content-type in Headers or Trailers-only

By the Spec:
Implementations should expect broken deployments to send non-200 HTTP status codes in responses as well as a variety of non-GRPC content-types and to omit Status & Status-Message. Implementations must synthesize a Status & Status-Message to propagate to the application layer when this occurs.
It appears that unsupported Content Types (such as "text/html; charset=UTF-8") can be returned with error information from some servers, which would be useful to propagate.


925
Create stable builders that use Netty, like is being done for Android

"Default" ChannelBuilder is the current proposed name. This would need to be in its own artifact because it would depend on Netty. It's unclear what its artifact and package name should be.
This is necessary because we are marking Netty's builders as @ExperimentalApi; we need a stable API for client and servers to use.


926
NettyServer prematurely releases worker event loop

777e928 causes flaky server shutdown, as the individual transports out-live the server.


927
ReferenceCounted is useless

777e928 introduced reference counting for channel builders, but nothing ever does a retain(), making it useless.
I thought the original reason to propose having reference counting was so that transports would retain() their factory and then ChannelImpl would release() the factory immediately on shutdown(). As the transports shutdown they would each release() and any shared resources would naturally be released.
@nmittler, FYI


933
Tracking Issue for Handler Registry being experimental.

We're currently marking all of the HandlerRegistries as ExperimentalAPI. We should decide on the appropriate interface and move toward making them public.


935
Random Http2NettyTest.deadlineExceeded() failure.

Saw this failure at https, may wroth taking a look.


936
Avoid using Parser in Proto

Swap to passing in MessageLite instead of Parser in ProtoUtils. This would allow optimizing startup time to avoid creating the parser (today we would create the parser, but in the future we wouldn't need to).
(less obvious, but may still be a good idea) Rename Parser to MessageNanoFactory (with newInstance() method). Similiar reasoning to above, but would need nano changes to make possible (but there are several options for nano changes that we could use)
1 should be for beta. If we want to do 2, it should be for beta, but if it slips, we'll just deal with it and not do it.


937
Replace use of ExecutorService with Executor in builders

@ejona86
We don't depend on ExecutorService so we can downgrade the requirement here.


946
Support SSL mutual authentication

Reported by @megapowers
Hi all,
I am currently using gRPC 8.0 with ALPN and I am trying to implement a 2-way SSL authentication between a client and server.
However, upon inspection of the SSL debug logs, I noticed that the CertificateRequest message (as stated in https), was never sent to the client to initiate the Client Authentication.
An excerpt of my server log is as follows:
The code I am using at server is as follows:
Am I missing out something? Or is it an inherent bug in gRPC?


950
When tcnative is enabled, OkHttp tests timeout

It fails like https: . #949 reverted the change. It is unclear what the issue is.


952
okhttp: Skip trash data for finished stream.

Otherwise the remaining data would pollute the next read.


955
Travis OOM

May be due to addition of Android build. It doesn't yet consistently fail, but we can use this for tracking.


959
Cannot compile Android targets

When trying to do a gradle build from a clean client, I get the following error:


965
Support using client and server with existing FDs

This is the Java equivalent of grpc/grpc#3250.
I think this may just be Netty work; we could possibly enhance the epoll transport to have an address time that allows specifying the fd int directly.


967
Update examples in light of daemon threads

At the very least, the hello world server example is broken, because it exits immediately. It needs a call to server.awaitTerminated(). This was caused by the swapping to daemon threads in 07a7279.
As reported on StackOverflow.


968
java.lang.NoClassDefFoundError: com.squareup.okhttp.internal.spdy.Http2

when launch to the following line[ HelloReply reply = stub.sayHello(message) ] , runtime exception occurs,java.lang.NoClassDefFoundError: com.squareup.okhttp.internal.spdy.Http2
Following the the MainActivity:


973
Running ./gradlew build leaves behind a javadoc/ directory

This makes it difficult to do a "git add ." command after running tests.


974
Error during servers-side TLS negotiation leads to erroneous stacktrace

Due to the fact that we always register the HTTP/2 handler on the server side, if a TLS error causes forced shutdown of the connection, the HTTP/2 handler also dumps a stacktrace which is not helpful and could be confusing to the user:
The first stacktrace is correct, but the second one is thrown by the HTTP/2 handler's deactivated logic.
We might consider waiting until the TLS negotiation succeeds before registering the HTTP/2 handler.  This should be safe since the server will not be sending anything until it begins receiving data.


975
Mark ServerCalls, MethodDescriptor.create, MethodDescriptor.Marshaller and a few others ExperimentalApi

These are generally used by the generated code. There are some plans for doing Android-driven performance work on the generated code, and there are some options being discussed that would impact these APIs.
For beta, we've agreed that it is fine for generated code to depend on ExperimentalApi. For GA, that will not be allowed to be the case.


976
Use service provider for server-side

This is effectively #961 for getting a ServerBuilder. It would only use Netty today.
Whether we extend the current ManagedChannelProvider to allow creating server builders or make a parallel path is up for discussion, but honestly we should just flip a coin and go with one.


981
VC++ building info seems out of date

The Visual C++ Protobuf link in ./COMPILING.md seems broken. The following Visual C++ section also needs some update with the default include and lib paths.


985
StreamObserver.onError(Throwable t) hard to use or unintuitive

For client calls with streaming responses, when could the error be a Throwable and not a Status?
It seems more fitting that onError(..) would take a Status instead.


986
StreamObserver used also for unary calls

StreamObserver is used for all responses, even when the response is not a stream. To easier understand the generated API it'd be better if unary responses would be treated as such and have a different Observer that suggests that there will only be one response.


989
PARSER has private access

I am using protoc-3.0.0-beta-1-win32 and protoc-gen-grpc-java-0.7.2-windows-x86_64.exe to generate code from a proto file. But the Grpc file has this line "io.grpc.protobuf.ProtoUtils.marshaller(grpc.grpcsvc.Grpcsvc.HelloRequest.PARSER)". Then java compiler complains because PARSER has private access in another generated file. Am I using the wrong protoc or plugin?


991
Http2OkHttpTest.receivedDataForFinishedStream is flaky

As seen in: https


994
Implement cork/uncork in client and server calls

By adding a cork/uncork to defer flushing messages we can significantly improve throughput for streaming operations when messages sizes are significantly smaller than the flow-control window


999
Possible race condition ServerImpl between start() and shutdown()

I believe it may be possible if start and stop are called concurrently that the shared executor may not get released.  I'm not sure if this is an actual problem, but it does go against the @ ThreadSafe annotation.


1000
Support starting a Server with basic TLS configuration0

It should be able to start a secure server using just stable APIs. There should be some way to specify the cert chain and private key.


1001
Swap examples over to stable builders for channel/server0

No description provided.


1010
Simplify upgrade path for stubs toward using flow control1

We currently do not expose flow control semantics directly in the stub. Inbound flow control implicitly "consumes" bytes upon returning from onNext.  Outbound is simply not exposed at all. As it stands, developers needing flow control would either have to rewrite their client to use the Channel API directly, or perform some tricks using interceptors (or handler registries on the server-side).
We need an easy way to allow developers who begin by using the stub API to upgrade their code to interact with flow control directly.
/cc @louiscryan @ejona86 @Scottmitch


1012
C++ Server Response Content Type null1

Unary call for a blocking stub fails on Android at:
with:
Works fine after commenting out the check.
Skimming through the c++ server code shows content-type is not being set on the response?
Not sure where is the right place to raise this.


1014
request() need to be documented as thread-safe1

For both server and client


1017
The run-test-server.sh exits immediately1

After changing to using daemon threads by default, this script stopped working.  We need to update the server to keep alive until cancelled (e.g. ctrl+c).


1021
C++ doesn't send content-type2

Although C++ should be sending a content-type, it currently isn't. We'll need to figure out our interop story for Java.


1031
Update tcnative version3

Even though it doesn't directly impact our users, we should update the tcnative version used by our interop tests, etc.


1032
Fix Android example.3

No description provided.


1038
Put Grpc codegen in nano package3

We should probably follow suit and append a "nano" package to our generated class unless the nano option is specified that disables the new protoc behavior.
@zhangkun83, WDYT? Since this requires regenerating the code, I'm fine with doing this post-Beta.


1046
Releases can be uploaded without signing being successful4

We configure signing to be required, but it isn't working for some reason.


1047
Netty has many classes not marked @Internal4

No description provided.


1052
Remove examples/protos?5

I'm not sure if anything are using them. They are confusing to people because it makes people think they need them in that location for their own project.


1053
netty: IOException should map to UNAVAILABLE5

NIO can throw java.io.IOException: Connection reset by peer. In general, it seems that IOException would be UNAVALIABLE, although there are certainly outliers given the heavy overloading/abuse of IOException in Java.


1054
Address key protobuf performance issues5

This is something of a coverall issue and should be factored out into separate issues for each individual piece of work. Listed here are a number of areas for improving the interaction between protobuf and GRPC to improve overall performance and reduce memory pressure on the system.
In rough order of priority....

Implement some basic protobuf benchmarks independent of GRPC (scrape the web or extract Googles) as a framework for experimenting with optimizations
Provide the ability to have a 0-copy approach for writing out large binary sequences (byte buf, file region etc) to the transport without copying
Provide the ability to read protobufs so that they can be written out again with 0-copy for large sequences. This includes writes to transport and to files
Document a pattern for transferring a large binary sequence as chunks and utility functions to chunk & dechunk those to application code. File transfer is a common use-case here
Consider supporting deserialized protobuf backed by pooled buffers (speculative). Would require the notion of a releasable protobuf

@nmittler @ejona86 - Feel free to pile on / cc folks


1056
Is grpc-java stable enough to use in production environment?5

Hi, i notice that there were 5 releases for grpc-java, and Is grpc-java stable enough to use in production environment?
Thanks & Best Regards!


1059
Send a single SETTINGS frame from Netty5

We have an old TODO to update Netty once we upgrade to 4.1.0.Beta6 (which we have done):


1060
Use Netty's buffering encoder6

We currently use a copy of Netty's buffering encoder, we should switch to using theirs and deleting the grpc version.


1061
grpc-java does not work with grpc-cpp anymore?6

It used to work to run greeter_client.cc from grpc-cpp with HelloWorldServer from grpc-java, but this seems not to work anymore with grpc-0_11_0 release and latest protobuf anymore. There are multiple problems: first, to get HelloWorldServer compiled with the proto example file, I needed to fiddle with the java "package" in several places. After the compile worked, the client connects to the server but nothing happens. The remote method sayHello() seems never to return. Only when killing the server the client will finally return an (unsuccessful) response.


1062
Issues with proto class naming, and service naming, in grpc-java6

I have two problems (or difficulties) when using the helloworld.proto from grpc examples.
(1) The proto-file is named helloworld (lowercase) and contains "package helloworld;" (also lowercase). But the derived grpc java class file is called "Helloworld.java" (first letter uppercase). This breaks my build instructions. In grpc-cpp the file stays lowercase. Why is grpc-java changing the name?
(2) The bigger problem comes from the name of the service rpc method. helloworld.proto advertises the service "rpc SayHello (HelloRequest) returns (HelloReply) {}", note the camel-case! In grpc-cpp the method consistently has the same name. But in grpc-java in HelloWorldServer.java, the method suddenly changes its name to sayHello (note the lowercase first letter). This is quite inconsistent and confusing. Could this be changed? Why is grpc-java meddeling with the casing?
To generate the java code, I'm using latest protobuf 3.0.0-beta-1:
/thirdparty/bin/protoc -I="/tmp/Proto" --java_out="/tmp/ProtoGenJava" --java_plugin_out="/tmp/ProtoGenJava" --plugin="protoc-gen-java_plugin=/thirdparty/bin/protoc-gen-grpc-java" "/tmp/Proto/helloworld.proto"


1074
Add at least one example of how to use TLS 7

The example directories don't show how to properly set up a TLS connection.  Since this is likely the first place people look for how to set up a server, at least one of the examples (new or existing) should show how.


1076
Remove setDecompressor() from ClientStream7

Method calls on ClientStream are supposed to be initiated by the channel layer or the application. setDecompressor(), however, is called from within the stream implementation when receiving headers from the server. It shouldn't be on the ClientStream public interface. It may make sense to only have it in an abstract implementation.
However, it may stay on ServerStream, because it's called outside of the stream implementation, when the server creates the stream.
@carl-mastrangelo


1080
Add protection against attacks using malicious protobuf messages.8

It'd be good to to be able to specify the maximum message size on wire that the server tries to parse in order to protect from OOM errors.


1081
Investigate if Application protocols should be required8

FYI: This is more of a collection of thoughts that an actual issue.  The existing behavior might actually be correct.
When doing HTTP2 over TLS, the spec says that the next protocol "h2" can be used when negotiating using ALPN/NPN.  Currently today, the netty server accepts any next protocol, as long as there is one.  Specifically, sending a next protocol of "gibberish" does not cause the server to fail the connection.  This is controlled by SelectedListenerFailureBehavior.ACCEPT in our GrpcSslContexts class.
Intuitively, it seems like if the wrong protocol is specified by a client, the connection should fail.  If no protocol is specified, it seems like the server should entertain the possibility that the client wants to speak HTTP2, and not fail the connection.
The spec indicates a limited set of TLS requirements, of which application protocol negotiation doesn't appear to be on the list.


1087
Eventually Support HTTP/1.1 Upgrade 8

In the spirit of playing nicely with an ecosystem of other HTTP clients, we should support a bare minimum upgrade path from an HTTP/1.1 client.
This is pretty low priority, but is part of the HTTP/2 spec.


1088
Many Netty public classes missing @Internal/@ExperimentalApi8

No description provided.


1089
testNoDeadlockOnShutdown flaky since DelayedStream8

As seen in https(rebuild fixed)


1091
Use OpenSSL 1.0.2 on Travis9

We need 1.0.2 to have ALPN to test OkHttp against Netty.


1092
Enable tcnative for unit tests in interop-testing; OkHttp should Assume ALPN available9

That will disable OkHttp tests if you don't have a new enough OpenSSL installed, but Travis will still correctly do the testing.
Depends on #1091


1094
transportFailsOnStart flaky9

Seen in http (logs lost)



1097
Exception not caught with Netty before plaintext handshake completes9

As reported on grpc-io mailing list, a user saw this error. It seems the client was immediately disconnecting, but that is likely a separate issue. The server should handle it better though.



1099
implement timeout_on_sleeping_server interop test9




1102
Redundant logging when connection failed.0

And SEVERE is too heavy for it.
It should be fixed in Netty, but create this issue for gRpc users tracking it.
Oct 05, 2015 2:00:16 PM io.netty.handler.codec.http2.Http2ConnectionHandler processGoAwayWriteResult
SEVERE: Sending GOAWAY failed: lastStreamId '3', errorCode '0', debugData ''. Forcing shutdown of the connection.
javax.net.ssl.SSLException: SSLEngine closed already


1103
Headers are a major source of slowness0

Currently the metadata handling has a number of inefficiencies that materially affect performance.
Netty

We convert MethodDescriptor into Http2Headers for every call. Could be cached
We have no way of storing a validation result or derived value with a header cached by HPACK. E.g validating that the content-type is correct is done on the string value even though the value is effectively constant when emitted by HPACK.

Performance benchmark UnaryCallQpsBenchmark shows that header handling is ~10% of total CPU cost.


1104
Android studio fails to compile 0

on Android Studio 1.4, add grpc-java to gradle of android project, and there is no other lib in dependencies


1108
OkHttpClientTransport.shutdown() not safe to call if never started.0

If a OkHttpClientTransport is created, and then shutdown without starting, it throws an NPE.  This is surprising behavior because other shutdown methods (such as on ServerImpl) are safe to call shutdown on at any time.


1109
OkHttpClientTransportTest is overly strict in mock verification0

In the process of adding a test for OkHttpClientTransport, I found that mocked behavior is checked for on every test.  I attempted to add the first test that did not use mocks, but caused the test to fail.  This is because the @ After  annotation in the test does verifications on mocks regardless of the test.
This is a misuse of @ After annotations.  They are not part of the test, but a means to clean up state.  Even if every test does the same verification, it is still not appropriate to put verification code here, because it puts stress on every other test added later on.  Making it hard to add tests is something we do not want.


1111
transportShutdown() should be called before calling transportTerminated().1

With the changes of TransportSet, transportShutdown() must be called before calling transportTerminated().


1113
empty_stream interop tests fails against Go server1




1114
Support NPN for OkHttp non-Android path.1

This code path may never have a real user, but it will gain some convenience for running our tests against a server that only supports NPN.


1115
Sync the Android example back to internal1

No description provided.


1116
Integrate cronet as a grpc Java transport1

No description provided.


1122
Supporty unary retry2

It seems to be a pretty common use-case.  We should support this.


1125
Investigate using jdk8 Base64 encoder2

The Guava base64 Coder we are currently using has possible performance issues, and may not be present in some android situations that can't use Guava.  Investigate if the jdk8 speed up is enough to justify using it, or the android native coder.  There appears to be a Guava release that could address these coming up, but we may need a fix sooner.


1132
Pass transportFuture to DelayedStream3

Currently, when DelayedStream is created it ends up calling clientTransportProvider a second time. However, we already have a transportFuture available, we should just use it instead.
This was the second half of what was causing the #1131 flake.


1137
Implement gRPC LB client as GrpclbLoadBalancer.3

No description provided.


1138
Propagate absent port from NameResolver to ManagedChannelImpl3

When a target URI doesn't contain a port, NameResolver should propagate this absence to ManagedChannelImpl, who can based on encryption is in use or not, select 443 or 80 as the actual port.


1139
Publicize ClientTransport3

ClientTransport, which is currently internal API, is exposed via the LoadBalancer interface, which is public. ClientTransport needs to be public, and ClientStream also needs to be public because GrpcLoadBalancer will need to make RPC calls and decorate ClientTransport/ClientStream to attach LB tokens.


1140
Support alternative DNS servers in DnsNameResolver.4

No description provided.


1141
Implement round-robin in SimpleLoadBalancer.4

No description provided.


1142
Decide how to select a NameResolver for a URI.4

We have two options. Currently it's try-and-fail. The other option is keep a map that maps schemes to NameResolvers.
Quote from @ejona86 in #1134
My concern about this is that order matters and you won't notice if a scheme is double-registered. It also has no avenues for optimization because the registry is basically knowledge-less.
We can leave it as-is for now, but we'd need to decide on things before it goes stable.


1144
Make the total headers size limit configurable.4

We may want to have our own limit, but before we decide the number, should just remove the current limit.


1146
ContextTest.innerDeadlineCompletesBeforeOuter flaky4




1147
OkHttpClientTransportTest.windowUpdateWithInboundFlowControl flaky4




1148
OkHttpClientTransportTest.receiveDataWithoutHeaderAndTrailer flaky4




1149
OkHttpClientTransportTest.cancelStreamForDeadlineExceeded flaky4




1151
Scala support5

Would a codegen plugin that generates canonical Scala stubs on top of the Java runtime be an appropriate addition to this repo?
Is there work on official gRPC Scala support being done elsewhere?


1157
Make test cover ClientCallImpl.DelayedStream5

DelayedStream is mostly uncovered by tests.


1160
The wrong class name gets generated by Gradle task in an Android project6

I am using grpc for one of my Android project. I create proto folder. Added the classpath for protobuf plugin. and this task in build.gradle.
When I built the project - the contents of the proto folder were:
But ServiceGrpc.java was refering to ServiceOuterClass somehow. When I manually renamed ServiceOuterClass with Service, everything seems to be working fine.


1164
Http2NettyLocalChannelTest.deadlineExceeded flaky6




1168
OkHttpClientTransportTest > windowUpdateWithInboundFlowControl is flaky6




1173
Idea: Expose Metadata from Status7

The Status object is almost always created from Metadata; it would be logical to expose the Metadata from status.  This would make it possible to get access to the Trailers from a call without resorting to using Context or an Interceptor.


1175
Connection window should auto-refill7

Consider an application with 2 streams, A and B. A receives a stream of messages and the application pops off one message at a time and makes a request on stream B. However, if receiving of data on A has caused the connection window to collapse, B will not be able to receive any data and the application will deadlock. The only way (currently) to get around this is to use multiple connections for the streams, which would needlessly complicate the application code.
The C implementation already solves the problem by auto-refilling the connection window, so Java and the other languages should just follow suit here.
Created PR netty/netty#4423 in Netty to support configuring the local flow controller to auto-refill.  Until that's in, we should probably just set the connection window to MAX_INT for now.
@louiscryan @ejona86 @ctiller @a11r


1181
netty: IOException during connecting should map to UNAVAILABLE8

We've seen an UNKNOWN status with cause of io.netty.channel.ConnectTimeoutException: connection timed out. This should be UNAVAILABLE.


1188
Any transport future in ClientCallImpl should be cancelled if the call is cancelled8

Before the NameResolver returns any resolved address, the LoadBalancer issues blank transport futures to the channel, keeps track of them and will fulfill them when NameResolver returns something.
If the NameResolver takes too long or even forever to return something, the calls may exceed their deadlines, then be cancelled and may be retried. Today cancelling the call won't cancel the transport future it holds, this will become a leak in the LoadBalancer who keeps track of the blank transports. We will need to:

Change TransportSet.obtainActiveTransport() to return a new future each time. Today it returns the same future for all requests. Sometimes the future is passed directly to the call, and a call cancelling a future will unintentionally fail other calls.
Change ClientCallImpl to cancel the transport future when the call is cancelled, including deadline-exceeded.
Make sure the LoadBalancers remove cancelled blank futures from the tracking list.


1189
Can not build grpc-java in Linux Centos 78

Hi, I need to build grpc-java in Linux Centos 7 but had a problem, please help


1190
Implement Happy Eyeballs9

With the addition of load balancing, the interaction with OkHttp connection handling has gotten a bit strange. OkHttp is currently ignoring the resolved address of the DnsNameResolver. In order to use the IP address returned by DnsNameResolver we would need to implement Happy Eyeballs. We will want to use Happy Eyeballs with Netty as well.


1191
Implement idle channel state or swap back to lazy TCP creation9

With the addition of load balancing we are now actively reconnecting. If no RPCs are occurring on the channel we really want to drop all TCP connections, especially on mobile. Since GFE and other servers are likely to shut down idle connections, swapping back to lazy connection creation should be "good enough" for now, in case that is easier than implementing idle detection.


1192
Improve usability of multi-valued ASCII keys9

For keys like Grpc-Accept-Encoding ["gzip", "deflate"] is semantically equivalent to ["gzip,deflate"]. We should have a utility or tweak our API to make encourage applications to handle multi-valued metadata correctly.
A separate but related issue is that users of Keys have to be aware of whether the key is for ascii or binary, since you are likely to use the get() methods differently between the two. It might be good to have some "meta" key that could behave identically between the two.
For example, we could have something like:
Which could be used as a special key:
The key would always act as if there was only one value, and would typically be used with Metadata.get().
I'm not 100% sold on the example solution, because it seems we keep adding more and more layers.


1196
Java to Java RPC calls, without the proto IDL files and Proxy apart from stub.9

In Java, the builtin RPC mechanism "RMI" and serialization mechanism is very old, and has many severe issues with timeouts, soft versioning, etc. So, with distributed java to java services which happens naturally when the services are evolved over time, the following kind of API is preferred which is a Java Proxy based instead of stub.
For Java-to-Java calls, Building stubs and IDL files are unintuitive and extra efforts, better to make use of marking the interfaces with annotations.  I searched and found a similarly implemented library called  Swift for Thrift . It would be great if grpc supports annotation based one,
I feel it is easier and simple, with Java proxy apart from stub. We will be able to always generate the proto IDL files from the java source for RPC with other languages.


1205
Context deadline propagation should cascade0

When a server receives an RPC with a deadline, does work and issues RPCs as part of the contract of fulfilling that outer RPC then those inner RPCs should carry the outer deadline to the downstream servers.
Deadlines should be propagated explicitly in metadata for logging purposes as well as being propagated by cascading cancellation via Context.
Relatedly it should be simple for servers to opt out of deadline propagation when use-cases demand it.


1206
Resolve whether context cancellation propagates depth-first or breadth-first0

Current context cancellation order is unspecified.
Suggested algorithm is breadth-first so that higher level work is cancelled before lower-level work. The primary reason for this is that if higher-level work is cleanly cancelled then it can cleanly handle / ignore errors bubbling up from the cancellation of lower-level work. In depth-first it would be hard for higher-level work to distinguish between the failure modes bubbling up from lower-level work.
@lukesandberg
@adriancole
@ejona86


1211
Target name processing doesn't handle IPv6 well1

80 would appear to be a valid target name, but doesn't work with our current naming. would work though. We need to define what should happen with IPv6 addresses and make any necessary changes.


1212
How should basic LB interact with reconnect1

If a server is available on both IPv4 and IPv6, then it will have two addresses and we will perform reconnects on the two independently. That doesn't seem too bad. Although if one of them works and the other doesn't some RPCs may occasionally (say, because we got a GOAWAY on the good connection) be routed to the bad IP's transport where it might get "stuck" for a while before erring. This could probably be solved by waiting until transports are healthy before assigning RPCs.
Some hosts have many more IPs, such as google.com which has 11 IPv4 and one 1 IPv6. Having 12 TransportSets each trying to connect with independent backoff seems "not great." It's unclear what the behavior should be though. Maybe combine the backoff between all the IPv4 addresses and pick the next for each attempt?
Note also that there is interaction with #1191, since any TransportSet used once will effectively forever continue trying to connect, even if we have other transports to the same host that are healthy.


1215
Okhttp transport should use resolved address.1

Currently, OkHttp transport resolves the host name by itself, the underlying implementation tries all the resolved address one by one, until one connected successfully.
We should only connect with the passed-in resolved address, and shutdown the transport if it can not connect, let the load balance channel layer creates a new transport with a new address.


1216
grpc OOME and NPE in simple JMH benchmark1

First I post here and put all things in this gist.
The problem is the memory goes very high, sooner or later will cause OOME, and there is a strange NPE


1221
Consider allowing clients to provide cancellation details2

When designing Context we decided that cancel(Throwable) could be useful for debugging where a cancellation came from. In general, I'm not a fan of using that information for changing behavior, but it is very helpful for debugging.
Currently ClientCall.cancel() does not accept any arguments, because there is no way for the client to inform the server of any reasoning (and aren't too interested in that scenario, because servers can't really trust clients too much). When reviewing #1203, I saw that Context auto-propagation can make it quite opaque why a call was cancelled. We could have ClientCall.cancel(String desc, Throwable t) which will end up notifying the application onClose() with a Status.CANCELLED.withDescription(desc).withCause(t).
That would allow us to propagate a Context's failure exception as well.


1224
Implement QpsWorker for Java2

go/grpc-performance-testing-setup


1225
NPE in ProtoInputStream.drainTo2

It looks like if you call drainTo() twice then it will NPE. Calling drainTo() twice is sort of strange, so I wouldn't expect this to be critical, but we should still not NPE.


1226
A failing test deletes Messages.java2

When running ./gradlew build, if a test fails part way through protobuf-nano/src/generated/test/javanano/io/grpc/protobuf/nano/Messages.java  is deleted.  This causes noise when running git status or other git commands.


1228
OkHttpClientStream should coalesce pending flushes2

In OkHttpClientStream.start(), there may be pending data to write.  If multiple of the writes ask to flush, they should  be coalesced into a single flush at the end.


1237
ScheduledExecutorService won't log the exception if the task throws3

Unlike Executor.execute(), which lets the thread's default exception handler to log anything thrown from the task, ScheduledExecutorService.schedule() expects you to get the exceptions from the returned ScheduledFuture, and will not log the exceptions.
As we want to log everything thrown from inside the executors, and don't want to check the ScheduledFuture each time we use ScheduledExecutorService, we probably need to create our own ScheduledExecutorService that logs the exceptions and avoid using the vanilla version.


1238
hello-world-server example fails with Java 7 and long hostname3

The failures seems to be this old JDK bug:
I couldn't figure out where getLocalHostName() was getting invoked from within the gRPC code, however. It would be nice to be able to work around this somehow. Possibly by registering some kind of custom resolver?


1239
Add integration test for disabled GCM3

Disabling GCM is common when using Jetty ALPN+JDK7 (not available) or JDK8 (for performance reasons). We should add a test to verify that non-GCM connection succeed, similar to the existing NPN tests.
With tcnative, there is little reason to use GCM, but not everyone has swapped from Jetty ALPN yet. This seems Netty-specific, since Android should be making use of the security provider which doesn't have the same issue as normal Java.


1240
Custom Serialization [question]4

Hello guys,
Do you think that it is feasible using the current codebase, to avoid using protocol buffers and switch to another serialization mechanism? If so, can you point me to the places where one should do it ?
Regards, B.


1241
Connections handling4

Hello! Is it possible to handle connections(their statuses) on the server side?


1242
Grpc fails to build from clean on Windows x64 4

I suspect that the fix for this is simple, but it's still bad experience to have gradle.bat build fail on the first run.  I included the log file from trying to build.  The error happens in integration tests with "Received close_notify during handshake"


1251
Netty Server does not observe channelInactive5

If the TCP connection goes down, gRPC isn't noticing because nothing is observing the channelInactive() notification on the channel pipeline. I confirmed that channelInactive() is called, but saw that an outstanding streaming RPC was not cancelled.
This likely applies to both client-side and server-side; I only verified it broken on server-side.


1253
ClientCallImpl operations race with Context cancellation.5

With be60086, we don't create the stream when the Context is cancelled, so the following request(), sendMessage(), halfClose() will encounter an IllegalStateException like:
@louiscryan, FYI, I'll send you a PR to fix it soon.


1256
Should ClientCall.cancel be thread-safe5

If it were thread-safe, we would no longer throw IllegalStateException for other methods when closed.
Internally cancel is already thread-safe. The main question is whether it is more useful for applications to cancel calls without synchronization or to notice bugs where they write to closed calls. There is also a question of whether having cancel be thread-safe causes undue burden to interceptors.
This is technically an API change, but mostly just relaxes the API. Interceptors are the only things that may not necessarily support the new semantics, but most should simply delegate.


1265
use maven plugin can not generate service code6

I use maven plugin(maven-protoc-plugin) for generating grpc code,but i only can generate message.please help me,thx~


1267
Fine-tune pick-first logic to honor address order6

Naming systems may sort the addresses so that an address that appears earlier has higher priority, which means being closer and/or faster. We may want to take this into consideration when reconnecting.
Today, if a connection was made successfully and later disconnected, we try reconnecting starting from the next address, and if that succeeds we will stick with it while it may be inferior to the first addresses that may also be working.
A better approach could be starting from the first address if we just disconnected from an address that have been working. However, we should be careful of servers that can be connected and even go through TLS handshake, but have trouble serving actual RPCs. We don't want be trapped in such pitfalls. A safe logic may be: start at the beginning of the list only if the previous address has served a reasonable amount of RPC traffic.


1268
Avoid unnecessary reconnect due to addresses being reshuffled in EquivalentAddressGroup6

Today if the addresses in an EquivalentAddressGroup are reshuffled (which DNS might do), ManagedChannelImpl will see it as a different EquivalentAddressGroup, and creates a new TransportSet for it, which is wasteful. We need to find a way to update the address list in and reuse the original TransportSet.


1272
Don't use thread context's class loader for Android.7

As http: says, if users use android:sharedUserId or android:process, the thread context's class loader will be replaced with a dummy implementation.
And calling Thread.currentThread().setContextClassLoader() before whenever the ManagedChannelBuilder is created is silly.
After discussed with @ejona86, we agreed to use this.getClass().getClassLoader() for Android case.


1276
Implement Channel IDLEness7

We are currently lazy-initializing transports in order to allow the Channel to reach a state similar to IDLE. However, we should actively disconnect the TCP connection after inactivity in order to not rely on server idle checks and to comply with the gRPC IDLE semantics.


1277
Resource leak in v0.9.0 and v0.12.07

After running GRPC for a while I get the following error (with io.netty.leakDetection.level=advanced):
LEAK: ByteBuf.release() was not called before it's garbage-collected. See http: for more information.
This looks similar to #336 but not quite identical. This happens on a 64-bit Linux machine running Oracle Java 1.8.0. I'm happy to provide more information if required.


1278
Don't compress empty messages.7

If given a zero byte message, compression should not be enabled. Decompression is fair game.


1280
Provide client service definition for frameworks to avoid reflection8

An API similar to the existing ServerServiceDefnition would be great for the client side. Such an API would remove the necessity of reflection


1290
Propagate RuntimeException's back to caller9

When using ManagedChannelImpl, if a method of ClientCall.Listener (possibly also of ClientCall itself) throws a RuntimeException, the exception propagates up into SerializingExecutor. The executor will log it under SEVERE but cannot take corrective action. The thread initiating ClientCalls.blockingUnaryCall or its cousins will block forever waiting for a response.
Ideally, the exception should be thrown back in the thread that called blockingUnaryCall.


1291
GrpclbLoadBalancerTest is flaky9

Depending on how fast the balancing() test method is run, it can sometimes mix up the results of the transports.  I have disabled the test in the mean time, with a todo to re enable it.


1295
Java - Write sample code for setting and reading error details9

Java issue for grpc/grpc#4543.


1296
Use a List in BlankFutureProvider instead of LinkedHashSet9

Objects added to blankFutures are created just before being added, so it is guaranteed there won't be duplicates. The only operations for supporting the API are add() and iterate(). Thus, ArrayList and LinkedList are both strictly better than LinkedHashSet.
Previously, a ConcurrentHashMap was used which allowed greater concurrency, but since #1292 added guaranteed completion order full synchronization is necessary.


1299
Add interfaces to generated rpc service classes9

Currently, service stub classes (not sure if it's the best name to call it) generated by gRPC don't implement any interfaces (). It makes it impossible to dynamically build server composed of service classes provided in users's app via annotations for example.
I propose we create a GrpcServiceStub interface defining at least bindService (but we should probably add newStub, newBlockingStub and newFutureStub to it as well) so that we can easily cast Class objects to GrpcServiceStub and dynamically build server.
Also, it would be nice to add marker interface (``GrpcService`) to the service interfaces () for the same reasons.
What do you think?
cc @jh


1300
missing io/netty/util/ByteString0

Hi
I am trying to made a simple Grpc client and a server for it.
And this is the code for the client
And I get a error every time I run it.
And this is it
The server had the same problem when I was using grpc-all-0.9.0, and turned back to normal when switch to grpc-all-0.9.0-2.jar. But client still fails. I also update netty to 4.1.0 to fix the problem.
I really needs your help. Thanks!


1303
Status.augmentDescription violates spec0

From Justin Rudd on mailing list...
Status.augmentDescription adds a '\n' (byte value 10) to the description of a Status which ends up in the header "grpc-message". But the value of "grpc-message" is dropped because of the method isSpecCompliantAscii in TransportFrameUtil.
I've worked around it by just not using augmentDescription. But I thought you'd like to know.
Also, it would be awesome if Status allowed for adding custom headers.
Thanks!


1304
Time for the first time a rpc service is used is way longer than that of the following usage.  0

Hi
I would first paste my snippet here
And what I got from the output is:
It seems that the grpc channel is opened right at the first time it is used.
Is there any way I can get the real connection before I use it to get feedback from server.
Thanks!


1306
OkHttp Client stream and transport are tightly coupled0

The interaction between the client stream and transport for OkHttp stream starting is tightly coupled.  As brought up in #1294, we should take a look at how these two classes interact and make some clear boundaries (or possibly merge them).


1307
ScheduledFutureTask cancellation does not guarantee queue removal0

GRPC users using timeout may observe a memory leak when using long RPC timeouts with calls that complete quickly.
In ClientCallImpl we add a Runnable to trigger the timeout to a ScheduledExecutorService and retain a ScheduledFuture to that we can cancel the timeout if the call completes before that time.
The issue is that calling ScheduleFuture.cancel is not guaranteed to remove the task from the executors queue and so a leak of ClientCallImpl and its retained objects can occur.
We use ScheduledThreadPoolExecutor as the default and can call setRemoveOnCancelPolicy(true) to cause the task to be correctly removed from the queue. We would need a strong guarantee that a ScheduledExecutorService with this behavior is being used to rely on it.


1310
how can i use protocol buffer's message toString() method for utf81

I want to print protocol buffer's message log in console ,but i use toString() method and get below info.how can i use toString for utf8,thx.result is:


1311
Exception when configuring SSL: "Jetty ALPN/NPN has not been properly configured." (and possible solution)1

I am unable to configure an SSL gRPC.
Causes this exception:
This method is restricting the search to the boot classloader, which I don't think is correct. i.e. in the following code, the first line executes fine, but the second line throws CNFE (despite the class being loaded), causing isJettyAlpnConfigured() to return false:
I suspect the Class.forName(String) variant should be used instead (which doesn't throw CNFE), but maybe there was some good rationale for restricting to the boot classpath?


1312
none




1313
Support utf-8 percent encoded grpc.message1

See grpc/grpc#4672


1319
BufferingHttp2ConnectionEncoder forgets GO_AWAY received1

The BufferingHttp2ConnectionEncoder needs to remember that a GO_AWAY was received and immediately reject incoming requests.


1325
GRPC with TLS mutual authentication: Server accepts untrusted client certificate2

A Java GRPC server configured to require client authentication appears to accept client certificates issued by CAs that the server does not trust. If so, this is a dangerous security vulnerability.
Here is a minimal project that reproduces the problem.  Curiously, pretty much exactly the same code works correctly when part of the grpc-java repository's test suites; see the tests added in this pull request.
Perhaps I'm simply missing something; perhaps there is a genuine bug; or perhaps there is some subtle interaction of JARs or whatnot that causes this code to work in some environments but to be silently dangerous in others.


1330
Receiving ClosedChannelException instead of actual error3

We aren't reporting a helpful error in very simple connectivity cases, like the server port is closed. Here is what it looks like when using the interop client against a non-existent server:
It seems the problem may also impact other, much harder to diagnose, issues like client certificate validation (like in #1327).


1333
Error in java grpc files generated by compiler3

I am generating protocol buffer code with the following command:
I get the following error in Intellij.
The dependencies I use are:


1335
Investigate whether tcnative is being enabled on Jenkins Windows build3

Context: #1334 (comment)


1342
memory leak in io.grpc.internal.TransportSet4

We experienced an issue where our grpc-java clients filled up their heaps and the entire cluster went down. The cause appears to be a list of futures in io.grpc.internal.TransportSet. 5 of these sets would consume 47% of a 30GB heap. The cluster was running without issue for a month.
Context: Our clients each make about 10,000 requests/s to a cluster of 80 servers. The problem began when the cluster of servers was restarted. The clients filled their heaps and effectively died. A restart of the clients resolved the immediate issue, but we want to fix the root cause.
The clients each maintain a single blocking stub for each of the 80 servers. We enforce a 10ms timeout using withDeadlineAfter(). All calling threads reuse the same blocking stub.
We did manage to get a heap dump of an offending client. We noticed that about 5 blocking stubs account for 47% of the retained heap on the machine. 1kb size. I'm attaching a screenshot of the Dominator Tree report from Eclipse Memory Analyzer showing the problem. The labels on the columns are "shallow heap", "retained heap" and "retained heap %". This shows that a single io.grpc.internal.TransportSet has references to effectively a linked-list of RunnableExecutorPair objects each containing a Future. This linked list is 1.6 GB in size, where each element is about 1.5kb.
Any thoughts? What can I do to help debug this?
We are running grpc-java master as of Dec 9. v0.9 has a bug that makes it unusable for us.


1343
Deadline can fire before stream started4

In ClientCallImpl the deadline is scheduled before stream.start(). However, if the deadline has already elapsed the runnable will be executed immediately and race with the start. I've only looked into how OkHttp may be impacted.
I believe a NullPointerException would be thrown when trying to notify the stream listener due to the cancellation. However, due to #1237 the exception won't be logged. Thus, this will result in a hung stream that never completes with no logging as to what went wrong.
This was discovered due to timeout_on_sleeping_server on android being flaky, because it uses a very small timeout. The test would fail at awaitCompletion.
@carl-mastrangelo, FYI


1344
can put the service instances on different ports?4

i want to  create  gRPC server in python with client in java , and start up multiple service instances on different ports, can  it work ? and the client how to support  different ports ?


1345
grpc 0.12.0 with protobuf-3.0.0-beta-2 ?4

I've compiled grpc 0.12.0 with protobuf-3.0.0-beta-2 as suggested in a recent git issue, and as in grpc/grpc@f4c74fa. Now grpc-java 0.12.0 does not compile anymore as it seems to require explicitly protobuf-3.0.0-beta-1?
*** Building codegen requires Protobuf version 3.0.0-beta-1
*** Please refer to https

FAILURE: Build failed with an exception.


1346
../gradlew java_pluginExecutable fatal error4

hi,
environment:
I have configured  'export CXXFLAGS="-I/usr/local/protobuf-3.0.0-beta-2/include" LDFLAGS="-L/usr/local/protobuf-3.0.0-beta-2/lib"'  in the ~/.bash_profile file:
fatal error info:


1355
GOAWAY with OK maps to INTERNAL5

HTTP/2 graceful shutdown starts with a GOAWAY with code OK.  We currently map that to a INTERNAL, which would not imply that clients should attempt a retry.  We should change this to UNAVAILABLE.


1358
Overload ProtocolNegotiator.newHandler to accept an authority.5

In the case of a load balanced channel, there is a need to provide a possibly different authority to the backend than the load balancer.  It looks like  ProtocolNegotiator.newHandler would be a good place to add this functionality.


1359
Netty should call transportShutdown on GOAWAY5

This will cause TransportSet to divert new traffic away from the transport which would prevent many failed RPCs.


1360
POM missing for protoc-gen-grpc-java6

For 0.12.0 it was manually deleted (because it was causing errors; probably because it is wrong), but it was missing already for 0.9.1. It may be because we upgraded from gradle 2.3 to gradle 2.8.


1367
Update to Netty 4.1.0CR16

No description provided.


1370
Failing to build java interop image7

Seems like some of the in-process interop tests are executed during the java build and they are failing.


1378
Audit which APIs should stay experimental7

A lot of methods have been marked Experimental API.  We should go over what methods should become standard before doing our GA release.


1380
Add header logging to calls8

To make debugging easier, there should be some way to log metadata that comes with Client Calls, and possibly Server calls.


1381
hello_world.proto in Java differs from copy in main repo8

In the grpc repo it is at examples/protos/helloworld.proto . Most importantly the response is HelloReply in one and HelloResponse in the other.


1398
Update to netty-4.1.0.CR2 for SNI fix9

We want this:
netty/netty@e220c56
We are hitting the SNI problem (netty/netty#4746) with tests on GCE.


1399
Interop's deadlineExceeded test is flaky9

As seen on OS X Travis (since rebuilt):


1400
DNS: use Netty's asynchronous DNS resolver0

The current Netty-based transport doesn't use Netty's asynchronous DNS resolver, which means the client hangs if hostnames cannot be resolved. This is really bad if you are reusing an eventloop from other parts of a program and this eventloop is not supposed to block. gRPC should at least expose the necessary APIs to be able to override the default DNS resolver.


1401
ProtocolNegotiators leaks ByteBufs on failure0

As reported by @trask in #1277 with repro repo at https. The key distinguishing feature is BufferUntilChannelActiveHandler in the log here:
SEVERE: LEAK: ByteBuf.release() was not called before it's garbage-collected. See http for more information.
Recent access records: 2
When looking at the code, it is obvious it doesn't release when it fails the promise. This leak only happens when failing to establish a connection to the server.


1403
Access unparsed data in interceptor?0

I'd like to make a caching interceptor that uses the raw binary of the message as a key, and the raw binary of a response as the value so that I can avoid any ser/der costs on the server.  Is it possible to get access to the InputStream that goes through the Listener before it calls "call.method.parse(inputStream)" ?
Maybe there's a different/better way to do this and avoid serialization costs?  I suppose I could use a header approach and have a server interceptor look for a "CacheKey" header and use that for lookup.  It requires a bit more cooperation from the client though which I'd like to avoid if possible.
Thanks for any pointers!


1407
Name resolution failures can cause the call to hang.0

If an exception is thrown from NameResolver.Listener.onUpdate(), the call hangs indefinitely and is never closed.  This is a problem if the actual name resolution succeeds, but is not successfully set.


1408
Potential risk of deadlock from calling listeners under locks0

Methods of ClientTransport.Listener and ServerTransportListener are usually called under a lock. The biggest reason for locking is to guarantee the ordering of multiple methods on the same listener.
However, these listeners usually call into channel layer code, and may in turn acquire locks from there, which forms a transport lock -> channel lock lock order. On the other hand, when channel layer calls into transport layer, it's possible to form a channel lock -> transport lock lock order, which makes deadlock possible.
It's unlikely an issue today because there is an implicit rule today that channel layer will not hold any lock while calling into transport. However, as the code base grows, it will become harder to keep track of such requirement.
A possible solution is to always schedule listener calls on a serialized executor, with the cost of a thread, so that listener order can be guaranteed without the need of locking. There may be better options.


1411
Usages of OkHttpClientTransport.toGrpcStatus should add status details about the source of the code1

Right now you can get a status of INTERNAL: Internal error which isn't very useful. If it had RST_STREAM in the description though then it would be much more useful.


1413
Generator assumes packed=true on repeated scalars1

Please see this report for context grpc/grpc#5174
The long story short however is that it seems my server implementation was emitting a packed=true representation of a repeated int32 field, and NodeJS could not parse it.  Once I added packed=true to the proto definition, Node could begin to read the values returned from my Java server.


1414
add pom.xml to examples/1

Currently there is only gradle build.gralde file.  Add pom.xml please!


1419
move maven-protoc-plugin to maven central1

any reason why some of the components, like maven-protoc-plugin, are in bintray? can this be moved to maven central instead?


1420
gprc-all is published without sources2




1421
different grpc components depends on the same dependencies but of different versions2

This looks quite unsafe.
Dependency convergence error for com.google.code.findbugs:jsr305:3.0.0 paths to dependency are:


1425
Context forwarding between client and server?2

The comments on the Context object aren't completely clear to me what it forwards and does.  For example, here
I've seen the tests for deadline propagation added recently, but I'm working on a tracing context interceptor, and it isn't clear to me if I should expect the information in the context to automatically forward downstream, or if I should be pulling that information out of the context and sending it along in a header?  I've looked at the Client and Server Impls for example, and while things like deadlines propagate and cascade downstream, it not clear to me if/how the arbitrary value objects are supposed to


1426
Sporadic NullPointerException2

I'm getting this sporadically on slow travis-ci machines.  Haven't seen it on other machines.  My guess is that the listener is being executed before the channel field assignment occurs so channel is null.


1438
Check for null Channel when creating stub3

if (channel == null) {
  throw new NullPointerException();
}


1439
Annoying logging while running an app3

TABLE
This is in our Quickstart app, it would be really nice if it went away.


1440
Use new protoc maven plugin from Maven Central4

License issue on maven-protoc-plugin has been resolved, and it's now pushed to maven central - yay!
Should update documentation and/or examples to use the the maven central plugin:


1446
Remove references to io.grpc.internal from io.grpc4

io.grpc is very close to having no references to io.grpc.internal. It would be useful to be able to depend on the API but not the implementation to not pull in unnecessary dependencies and provide cleaner builds that don't accidentally depend on the implementation. For instance, a library could have optional gRPC support, but depend on grpc-api even when grpc was not selected.


1447
Create a grpc-api artifact4

After #1446 we could make a grpc-api artifact that does not include io.grpc.internal. From the other issue:
It would be useful to be able to depend on the API but not the implementation to not pull in unnecessary dependencies and provide cleaner builds that don't accidentally depend on the implementation. For instance, a library could have optional gRPC support, but depend on grpc-api even when grpc was not selected.


1455
Losing messages in 0.13.05

I've posted a repro to https.  Just clone and run mvn test.
The repro sends 1000 messages to the server, but the server only ever sees around 30 of them (I'm running locally on windows, though I also see this issue on travis-ci linux).
I don't see this issue in 0.12.0.


1459
Artifacts should depend on particular version of grpc-core5

grpc-core contains internal, unstable APIs. To prevent accidentally mis-matching artifact versions (say grpc-netty-0.12.0 coming from one source of dependencies and grpc-core-0.13.0 coming from another), any artifacts that depend on grpc-core should use syntax instead of $VERSION to cause an error (because grpc-netty-0.12.0 can only use grpc-core-0.12.0; core shouldn't be silently upgraded) instead of runtime failure. Note that #1447 improves things, since something like grpc-stub and grpc-protobuf could depend just on grpc-api instead of a version-fixed grpc-core.
The syntax seems to be supported by Maven, maybe Gradle, and Ivy, but we may need to do some verification and additional investigation, since it isn't commonly used.
Other resources:


1460
Consider avoiding the copy in BINARY_BYTE_MARSHALLER6

In the initial version of the PR to add BINARY_BYTE_MARSHALLER it did not do a copy. However, I suggested that we do a copy to prevent trouble with Metadata's caching of serialized encodings.
I may have been misguided though. It seems that even with the copy in place, mutating the byte[] would cause trouble for Metadata. It may be better to not copy, because it doesn't improve the situation, and update the documentation to simply say, "don't modify the byte[]s".


1463
DNS resolution expiration6

It looks like the channel is somehow caching the IP resolved through DNS but never refreshing it. We are using grpc in AWS and since ELB's IPs change over time, we've run into issues and found out grpc clients are trying to connect to an old IP.
Code snippet:
Is our assumption correct? Is there any issue in how are we using the client library? Would it be a bad practice (performance-wise at least) to create a new channel in each request?
Thanks in advance


1469
Codegen base class for services to extend6

We should allow adding new methods to a service without breaking existing service implementations. The best way to do that seems to have service implementations extend a base class that responds with UNIMPLEMENTED for all methods. The class would also make creating fake/mock services during tests easier.
A similar problem can happen for stubs in tests. We may need something there as well.
See also grpc/grpc#5371
Edit: IOW, remove all interfaces from the generated code, since adding a method will break existing implementations of that interface.


1470
*Interceptor interceptForward methods?7

Would you be open to a pull request which allows users to pass in interceptors in forward order?  Meaning, if I pass in ServerInterceptors.interceptForward(svc, new A(), new B(), new C()) that I'll end up with interceptors being called in the order A -> B -> C rather than C -> B -> A?


1474
Improve unary server stub7

The Java unary stub is taking the form of an async service, where a single result is expected to return from a StreamObserver.
This can be error prone:
You can't tell from the stub whether it's unary or streaming multiple results
The code can easily call onNext one too many times, or not call onComplete
Unary gRPC stubs for several other stubs expects a single return value from the method. Java should follow the same convention:


1475
Improve client stream server side stub7

Looking at this:
This is super weird to have the "request input", Points, as a return value of a method, and the response RouteSummary, to be the input parameter of a method. I took a look at this for a while to figure out what's going on. I see it is forcing the implementation of StreamObserver interface to process the incoming Points, and thus requiring it to be a return value. I wonder if there is a better way of doing this.
Every other language stubs seems to generate sensible stubs where the input steam is in fact the parameter and not a return value, and they actually returns the actual RouteSummary as the return value of the method.


1476
TransportSet should reset current index on transportReady7

If we successfully make a connection to an address, then that should mean the address is good. If it later is disconnected due to GOAWAY or transient failure we should start at the top of the list instead of trying less-desirable IPs.
This can cause errors, but any errors can already be gotten other ways, so it shouldn't be considered a major bug.


1477
Only link delayed transport AFTER real transport has called transportReady()7

There is no benefit of creating streams on a transport that has not called transportReady(), because they will be buffered anyway. Besides, transport connection may turn out to be a failure, which will fail the pending streams on it, spamming transient errors to the callers. Those streams, however, if created on a transport that has called transportReady(), would have a higher chance of success.
Proposed change: TransportSet calls setTransport on delayed transport in the transportReady() callback of the real transport.


1479
Add flow control sample documentation7

flow control mechanism is a little bit hard to understand. can you guys add some test to demonstrate its usage?


1481
The asynchronous Channel is uncompleted,but I have never used asynchronous Channel8

The server print the logs as follows,and never stop until the server is shut down:


1484
Rename interop's "AbstractTransportTest" to "AbstractInteropTest"8

grpc-testing now has an AbstractTransportTest which is a much more appropriate name for it than for interop's test class.


1485
why DEFAULT_FLOW_CONTROL_WINDOW in NettyServerBuilder set to 1048576?8

in http2 doc, the max value of flow control window would be 2^31-1


1486
is server push feature used in anywhere in Grpc-java?8

my rpc framework need this feature, so I'd like to reference the implementation of it in Grpc-java, but fail to find it in code.
can anyone help on this please?


1492
CI should build examples/android and android-interop-testing9

No description provided.


1493
Bump grpc version used by examples/android9

We should also update the RELEASING doc so that the versions are updated as part of our process.


1495
How does deadline work?9

I'm creating a blocking stub with deadline:
and then I start calling method in a loop:
first 8 calls are handled correctly but others end with DEADLINE_EXCEEDED exception.
Looking at my gRPC server logs I can see that the 8th call (last succeeded call) is ~3 seconds after the 1st one, so I assume that the deadline I set is for all my calls.
How to set up a deadline per call ?


1497
GRPC tests fail and hang with JDK 1.8.0_739

Making the following change in build.gradle gets everything working again:
However, doing so would probably break the build for developers using an old JDK and for Travis.
Should the current logic for choosing the ALPN version accommodate more than one version of Java 8, or is the current approach intentional?


1500
There is no warning that ManagedChannel.shutdownNow is not implemented0

It seems the important part of the comment was not copied in b687bdc


1510
DelayedClientTransport and InProcessTransport means deadlock1

There is a chance of deadlock when DelayedClientTransport is linked with an InProcessTransport. See /pull/1503.


1513
TlsTest flakiness1

Found on Travis linux when testing for #1508


1514
Add assertCodeEquals to TestUtils and swap code to use it1

assertCodeEquals() (also here) is really helpful for debugging test failures from CI environments because it provides more information about the Status versus assertEquals(Code, Code). Issues like #1513 would have enough information to better understand what went wrong.


1519
Simplify using richer APIs in service implementations1

While it is possible for service implementors to interact with richer features like inbound & outbound flow-control today by creating their own io.grpc.ServerCallHandler this is quite cumbersome to do. You would need to completely rewrite how your server was build and could not simply implement the generated service definition any more. In cases where only one of the methods in the service needs more control over flow-control this is quite messy
One proposal is to allow implementers to cast the StreamObserver they receive from the runtime to a richer type that allows for interaction with advanced features. This works for all generated service calls including unary calls.


1522
IOExceptions are INTERNAL because they are getting wrapped in Http2Exceptions2

Utils.statusFromThrowable will need to check the Http2Exception.cause() to see if it is an IOException (by recursively calling statusFromThrowable?).
I saw this with java.io.IOException: Broken pipe, which should be UNAVAILABLE.


1528
Doc Fixit: Java is missing from website Auth doc2

Java is missing from this doc: http


1531
Use stream.cancel() instead of cancel() in ClientCallImpl3

Some error handling in ClientCallImpl is calling ClientCall.cancel() instead of stream.cancel(). For example, in sendMessage(). This causes incorrect throwing of IllegalStateException to later callers.


1532
Examples of serving HTTP 1 request with servers running GRPC?3

Hi,
Is there a example of using grpc/underlay netty to serve HTTP1/1 on the same port?
Cheers.


1533
Simulate latency and GRPC thread safety gurantees3

We wrote an interceptor to simulate adding latency and injecting failures into client requests.  In doing so we may be violating thread safety guarantees in GRPC.  I was hoping someone could look this over and let me know if this implementation makes sense or if we should be doing something different.
First, some details about the implementation and expected behavior,
Failure behavior is provided by an injected FitContext.
Failure can be a delay, an error, or a combination of both.
Simulated errors are implemented as request cancellation.
The implementation is leveraging backpressure to avoid having to queue up requests and responses.  The request() call is delayed to simulate latency.
The solution works for request-response as well as streaming scenarios


1534
TransportSet creates lots of transports3

Logs indicate that it is possible with a single Channel to get multiple transports for the same ip:port.


1536
Remove allowance of ClientStream.sendCancel() before start()3

It looks like it will trigger a NullPointerException. This could maybe be handled in AbstractClientStream, but I'm unsure if that's the best place.


1537
DelayedStream.setStream() should cancel the provided stream if not using it3

If cancel() or setStream() was previously called then setStream() throws away the stream argument. It should cancel() the stream to make sure resources are freed, although I think only DelayedClientTransport benefits.
This should not be done until after #1536. I don't know if OkHttp suffers a similar problem. If so, we may want to revisit whether it makes sense to allow streams to be cancelled before start().


1539
How to connect to unix socket?3

I'm using this code snippet to connect to gRPC server though a unix socket:
but I'm getting this exception: java.lang.IllegalArgumentException: cannot find a NameResolver for unix:/tmp/imageresizer.socket


1540
It seems that CallOptions.withDeadlineAfter does not provide a fully functional timeout4

CallOptions.withDeadlineAfter works when client and server are connected or can be connected but the server can not respond in time. When it comes to network partition, a CallOptions.blockingUnaryCall will wait about 30s to throw an exception despite the deadline.
I can walk around this by giving timeout parameters to the future.get() inside CallOptions.getUnchecked(Future future) like this
But I believe there should be a better way @ejona86


1546
If DNS resolution fails, the Channel is permanently failed4

We should probably update DnsNameResolver to continue retrying the DNS query until shutdown, at maybe a fixed rate of 1 minute or such. Overall, it's not a superb solution, but it fixes a lot of the problem and is expedient to implement.


1549
Simplify implementation of back-pressure in StreamObserver-based stub4

Pending API changes can allow reactive/async pattern for interacting with flow control and applying back pressure: https
In many cases, automatic back-pressure in generated stubs could be very useful -- e.g. having calls to StreamObserve#onNext(T) block instead of queueing.
It's been pointed out that this could cause deadlock for bidi-streaming operations, so perhaps we can just not expose this functionality for bidi-streaming calls?
It may also be worth pointing out that most other runtimes (wrapped languages and Go) already expose streams via blocking operations and already require that apps be aware of and work-around possible deadlock issues resulting therefrom. So maybe providing similar mechanisms in Java is fine, with said caveats.
Another possible alternative could possibly be done in an extension/add-on instead of in GRPC. For example, wrapping streaming requests and responses with RxJava Observables may further simplify the async case enough to make the synchronous (and possibly-deadlock-prone) case unnecessary.


1551
Example of LoadBalancer implementation? 5

Hi,
Is there a example we can see how to createa and use an LoadBalancer? It should be able to deal with usual error and some health checking/retry etc.
Thanks.


1552
Unchecked exceptions can't be captured from a ServerInterceptor5

I'm attempting to add instrumentation to our gRPC service implementations using a ServerInterceptor, namely failure rates on a per-method basis. To do this, I'm using a SimpleForwardingServerCall, overriding the close method and then checking the status to see if the call succeeded.
When an unchecked exception is thrown from a service implementation:
the close method is never called, so there isn't an opportunity to log the failure.
The exception seems to bubble up to the Executor instead:
I've also tried returning a ForwardingServerCallListener from interceptCall and the onComplete callback is invoked, but it doesn't have enough information for me to determine if the call was a failure.
Is there another API I can take a look at that will allow me to capture these failures?


1555
Use FastThreadLocalThread's in shared channel executor.5

While working on netty/netty@b88a980 I noticed that when using the blocking stub and the netty transport, we allocate in Netty's allocator from within the shared executor threads. Netty's allocator employs thread local caches that perform the majority of allocations. These caches are accessed via Netty's own threadlocal implementation FastThreadLocal, which is only "fast" when used in the context of a FastThreadLocalThread.
We should provide our own thread factory to the cached thread pool in order to create FastThreadLocalThreads. Additionally, we should override the Thread's run() method to do
This will release all memory from a thread's cache when it is shutdown. That should happen quite frequently, with the pool sizing threads dynamically.
However, I don't know how to best implement this. The shared channel executor should be shared by all transport, client, server combinations running in a JVM. Also, I assume we can't rely on the Netty dependency to be there on Android?


1556
Change the way we pass SSLSession5

Right now, we're using Netty's channel attributes to pass SSLSession object from one place to another. It was a quick win when adding ServerCall#attributes() support.
We want to plumb it through as an argument.


1558
Evaluate Netty's new `SelectStrategy` for lower latency writes into the eventloop.5

Once netty/netty#4955 is merged we should test and think about implementing our own SelectStrategy or even allow a user to provide its own (?) for faster writes from outside of Netty's event loop.


1562
Move utilities from GrpcUtil from internal package6

We've collected a bunch of utilities in GrpcUtil most of which are used publicly in apps (metadata keys, marshallers) and since GrpcUtil is part of internal package, we want to either move GrpcUtil completely out of it, or split, leaving some of the esoteric stuff like SHARED_CHANNEL_EXECUTOR or TIMER_SERVICE in internal package and exposing metadata key fields etc. in class from public package.


1565
Please generate OSGi headers for jar files6

It would make using gRPC in an OSGi container easier if the jar files would contain the required OSGi headers. This can be as easy as using the maven-bundle-plugin.
Unfortunately, I am not versed in gradle, so I am unable to provide a patch right now.
Is this something you can consider for addition?


1567
Can I get Request MetaData From Context in 0.13.26

How Can I get Request MetaData From Context in 0.13.2,Please Help me,Thank you.


1569
okhttp: race between receiving data and closing deframer6

As reported on SO:
When receiving a DATA frame, it seems there is a race between getStream() and calling transportDataReceived(). Although I wouldn't expect to trigger that race often.


1571
Create protobuf-lite project7

The current protobuf project can be used with lite, but only by excluding the protobuf dependency and adding your own dependency on lite (which is not yet available on Maven Central). That is weak, but also doesn't work in some compilation environments. We should create a separate protobuf-lite project, which protobuf can depend on, for LITE_RUNTIME users.



1576
Overload ServerBuilder.addService to take a Supplier of the service definition7

In general, servers want to instantiate a new method handler for each call to avoid polluted state. We'd like this to be handled by the framework, rather than asking application developers to remember it. The current API essentially pushes the responsibility to the application:
The Server is a singleton since it has a long-lived lifecycle
ServerBuilder.addService(ServerServiceDefinition service) requires that the service be instantiated at startup
FooServiceGrpc.bindService(FooService serviceImpl) also requires that the serviceImpl be instantiated. Thus, the FooService has to be a singleton with respect to the server lifecycle. That is, your implementation of the generated service stub has to be a singleton. So the app developer has to worry about the scope of the dependency chain from there down.
I propose overloading the generated code to take a Supplier of some sort: FooServiceGrpc.bindService(Supplier<FooService> serviceImplSupplier). This would let me pass a Guice Provider::get to the bindService method and get whatever Guice scoping I want on method calls. This lets me handle proper scoping in my own framework code rather than in every implementation of a stub.
Almost as good would be pushing the thunk-ness back a layer to ServerBuilder.addService(Supplier<ServerServiceDefinition> serviceSupplier), but I suspect that is harder to implement.


1577
Solve logging7

We used to have some INFO logs, but they were considered spam by some users (#1439), so they were reduced to FINE (#1449). In general, open source libraries don't log unless something is going wrong, and these log statements didn't imply something was wrong.
However, in #1538 INFO-level logs were added back (in a different place, but same effective event). These could be a lower level, but it seems difficult for users to enable a higher logging level.
We do know applications can do something like this to squelch what is logged:
More than one project has been annoyed with the logging-by-default, but the number of Java developers who can handle logging.properties seems limited.
On Android, things are even worse because most phones almost always return false from Log.isLoggable() for lower log levels. Developer phones (like debug builds of Android) will return true, but few develop on such phones. This means that even when you configure java.util.logging to log lower levels, they won't actually be logged. You can run a command like adb shell setprop log.tag.<MAGICTAG> VERBOSE for each class you want to log, where the MAGICTAG can be found from DalvikLogging.loggerNameToTag(), but this is so painful it isn't close to practical.
Note that most Android applications don't notice any problem with Log.isLoggable() because while it may return false, if you call the log anyway (say, via Log.v())apparently it will be logged.
One developer suggested we use slf4j because it is "java best practices." I think in some part of the Java world it is, but it is unclear whether grpc exists in that part of the world. The number of developers that can configure java.util.logging, log4j, logback, or slf4j is certainly higher than just java.util.logging, but it will also become harder to direct users in how to enable logging when we need it for a report. It also has the deficiency that "If no binding is found on the class path, then SLF4J will default to a no-operation implementation" which is pretty bad for our WARNING statements.


1578
io.netty.handler.codec.http2.Http2Exception$StreamException: Stream closed before write could take place7

We are using latest GRPC java release, what could possbily be the reason?
Thanks


1579
Error message built with Status exception builder is not serialized properly7

creates an exception with detailedMessage containing '\n' character. In TransportFrameUtil this character fails the validation rule isSpecCompliantAscii, which results in grpc-message header being silently discarded.


1581
Update Netty to 4.1.0-CR48

No description provided.


1582
okhttp integration tests fail with latest oracle jdk on OSX8

After updating to the latest Oracle JDK8u73 on OS X , the okhttp integration tests fail.
Running ./gradlew clean build on latest master (65d3847) gives me the below output and hangs there indefinitely.
The issue is always reproducable.


1584
Create a stress test client for Java 8

The specification for the stress test client is at : https


1589
Provide description to Status used in ClientCallImpl.cancel8

Right now it is just Status.CANCELLED. We should give it a description so that it is more obvious it was generated locally (such as "Client cancelled call"). This is trivial, except plenty of tests fail, so they need to be updated to just check the Code.


1590
Retries as a first-class feature9

Easy-to-enable, first-class API for having automatic retry any type of call. It would be good if this API supported hedging, where you preemptively issue a second RPC if the first is taking a while. Supporting hedging means that hedging would not need additional buffering.
This is larger in scope than #1122, which is only unary. This is related to #1570 and #1586, but more concerned with the API to expose to applications and the cross-language feature set. I've not yet looked at the policy in those PRs, so this says nothing about how I feel about the policy presented there. We can end up copying some of the policy in the PRs into this discussion.


1597
Stop using grpc-all9

grpc-all appears convenient, but it sort of makes a mess because it repackages. We could remove the repackaging logic and have it just pull in other dependencies, but it seems maybe better to have users just depend on the pieces they need.
Related: netty/netty#4671


1599
Only events from NameResolver-produced address should trigger resolution refresh9

Currently a failure on any TransportSet will trigger name resolution. However, the addresses of a TransportSet may also originate from an external load-balancing service, e.g., in GrpclbLoadBalancer. A failure on such TransportSet shouldn't trigger name resolution.


1600
Round-robin LB should be aware of and skip bad servers0

The round-robin logic in GrpclbLoadBalancer should listen to transport life-cycle events (handleTransportReady() and handleTransportShutdown()) to learn what servers are not usable, so that it can skip them. The round-robin logic will also be shared with the simple round-robin LoadBalancer (which is yet to be implemented).


1601
Trigger name resolution also when a live connection closed0

#1591 doesn't cover the case where some addresses have changed in the name system while some are still there and usable. This may end up trying to connect old addresses each time we reconnect. The solution is to also trigger a name resolution after a live connection has been closed.


1605
Ensure that gRPC Java implementation conforms to standard status codes in gRPC0

Error code specification - http


1606
Message serialization occurs on transport thread0

TransportSet is calling setTransport() from the transportReady notification. setTransport() eventually ends up serializing messages. This means we are 1) running application-provided code on the transport thread and 2) performing expensive operations on the transport thread. We need to figure out a way to avoid serializing on the transport thread.
One type of option is to use an executor for setTransport(). Another type of option would be to actually serialize the message within DelayedStream.


1607
testConfigureDeadlineNanoTime is flaky0

As seen for https (rerun, so log no longer visible):


1609
Codegen should observe lite=true flag instead of LITE_RUNTIME0

The LITE_RUNTIME option is to go away in protobuf because it makes using the same proto on server-side and client-side problematic. Instead, an option is going to be passed to protoc to enable Lite. We should do the same for gRPC. We can use lite=true for now; we can watch protoc to see what flag they end up using.


1612
Codegen should include proto-defined service/method comments in JavaDoc 1

No description provided.


1614
android-interop-testing fails to ProGuard1

It may just be my machine, but android-interop-testing is failing to build. It may have appeared to work before because I wasn't doing "gradle install" of grpc first, however that doesn't seem like a full explanation given some other things I've been doing. In some ways I hope I've just hosed something on my machine.


1616
CallOptionsTest.testToString is flaky1

As seen at https, since rebuilt (so logs lost):


1617
DeadlineTest.shortDeadlineEventuallyExpires is flaky1

As seen at https


1621
Add an ability to run protobuf server as a Servlet 42

Pls add an ability to run a protobuf v3 server as a Servlet 4 on any server with the Servlet 4 support.


1622
Anyone use gRPC in prod evn? please share your practice2

As title, please leave your product name, experience, anything you want to share
thanks


1625
javaPluginPath in gradle build does not work for me

I'm building protobuf, grpc and grpc-java all from scratch, but without heavy customization. This mostly works, however grpc-java does only compile and work for me if I patch the gradle build:
I don't know why I seem to need a change in javaPluginPath? Is this due to my custom build of protobuf? I did not make any (intentional) changes to protobuf that would ring a bell...


1626
Context.fork shouldn't return a CancellableContext2

Just because someone wants to fork a Context, doesn't mean they want that Context to be cancellable. In addition, it requires the caller to close the CancellableContext when they are done. Since it is trivial for the caller to also call withCancellation(), it seems best to return a plain Context.
@louiscryan, thoughts?


1628
Support OkHttp3?2

It's been a while since stable OkHttp3 has been released and libraries depending on OkHttp started to support OkHttp3 as well. Is there any plan to support OkHttp3?


1629
io.grpc.StatusRuntimeException: INTERNAL: Failed to frame message2

The above runtime exception is thrown when a field of type []byte is set to null and one tries to use it as service argument.
The code is executed on Android. I use protobuf-nano.
Default value for []byte is com.google.protobuf.nano.WireFormatNano.EMPTY_BYTES
The error is hard to spot. Is this stated in a documentation? Maybe it should be treated as a default value? Not sure.


1632
deadlineExceeded interop test is flaky3

intervalUs is used for consecutive responses. We cannot use it for the only response and expect a delay from server sending the response.


1636
Do I need to use common-pools to wrap ManagedChannel3

Hi,
Do we need to implement a pool of ManagedChannel on the client side?
We are currently sharing a single ManagedChannel to a single target on whole application, but we are seeing some pretty weird behavior that channel went into permanent DEADLINE_EXCEEDED mode.
We havn't been able to replicated it locally and we are trying anything we can..
Thanks


1645
CallOptionsTest.withDeadlineNanoTime is flaky4

As seen (may have been restarted):


1646
StubConfigTest.testConfigureDeadlineNanoTime is flaky4

As seen in (may have been restarted):


1648
Add KeepAlive support4

With our sue of gRPC Java across Google Compute Engine (GCE) L3 Load Balancers (Network Load Balancers), we seem to be hitting similar issues we had with gRPC in Go:
Basically Google L3 load balancers silently drop long-lasting TCP connections after 600 seconds.
While we were able to work around the issue by specifying a custom Dialer in Go:
There seems to be no way of overriding the KeepAlive peridods for NettyClientTransport. We know it's possible to set the keep alive period in the kernel of the machines, but that's a bit of a stretch to expect the user-code programmers to know about it.
Can we either:
have the ability to specify the TCP keep alive period on create of channel
documentation around it, especially how it can cause hard-to-debug problems on GCE?
cc @ejona86 since he seems to have had opinions about it in #737


1652
Exceptions thrown in StreamObserver.onNext() may be swallowed5

For unary calls it appears the exception is basically guaranteed to be swallowed.
See #1638 for some discussion. Basically we try to fail the call with a Status, but if the call already completed successfully (which is especially likely for unary calls) the exception is thrown away.


1653
Conventions and style5

I've recently become an active contributor to the project and managed to have few of my PRs merged. My PRs received a lot of great feedback and good comments but also A LOT of convention/code style related ones. Everytime I receive one I feel really bad that I've wasted both mine and reviewer's time and only made whole review process longer by result. I tried really hard to improve in this area and conform to the coding standards but still noticeably failing at it and making nontrivial number of errors.
I really think that having conventions and pointing out inconsistencies in PRs is the right thing to do - please continue doing this - but I want to point out that we have two problems: tooling and style inconsistencies in existing code.
Regarding former, together with @ejona86 we tried to fix in google/styleguide#115. Latter is more tricky and partially fixable by former by having cohesive conventions. I don't think we should  create a massive "Fix style" type commit fixing all whitespaces and formatting because it'll only obfuscate git history but we need to agree which is the right convention with which we want to move forward and format every new code using it (case in point: indentation after line break in method definition is different between two methods in the same file )
One more time it'd like to emphasize that I'm not moaning about nitpicking but rather raising an issue which after solving will make lives better for both maintainers and contributors.


1655
Android example fails to build5

This is basically the equivalent to #1614


1657
OutOfBounds exception with NameResolvers and TransportSet5

Long story short, it appears there's an explicit array.get(0) that happens on the first outbound call, but if the NameResolver hasn't found any servers yet, this causes an exception.  Stack trace can be found below(SpectatorInterceptor is a proprietary metrics component, and the EurekaNameResolver simply uses Eureka to resolve a set of IP + port that can then be used to load balance).  In the case below, the list of servers the EurekaNameResolver passes to onUpdate is empty.


1660
Add an API on Channel for getting Channel security configuration6

As required by #874, auth interceptors needs to know whether the channel is using secure transport, something like
The features are not necessarily orthogonal. For example, AUTHENTICATION is only useful when INTEGRITY is there, so we may want to make AUTHENTICATION automatically imply INTEGRITY. The enum may also be expanded when necessary.


1663
Need to remove usages of Guava's Throwables.getCausalChain6

It is marked @Beta, so isn't appropriate in a library.


1664
Solve formatting problems once and for all6

by submitting to our benevolent autonomous overlords.  The Google standard formatter would solve all formatting debates, and could be pulled in as part of our tests:


1665
ServerInterceptor close trigger MessageDeframer is already closed6

I want implements ServerInterceptor for intercepting incoming calls to check valid authentication credentials.
Here is my java env and code snippet.
question is:
invoke serverCall.close and return null trigger NPE
Note: this exception is not appear at first time, should invoke client/stub again, the server side exception show up
so. is the bug? or what is the best practices doing this.
Thanks.


1669
GrpcUtil.getGrpcUserAgent creates a lot of garbage6

GrpcUtil.getGrpcUserAgent creates a lot of garbage based on profiling, showing up in the top 20.  It appears that this call was designed to mostly static and not change per call.
We should find a way to initialize this at channel creation time to make this not so messy.


1670
DefaultHttp2HeadersEncoder.encodeHeaders are slow7

After GC and syscalls, io.netty.handler.codec.http2.DefaultHttp2HeadersEncoder.encodeHeaders takes the most CPU on a simple ping pong stress test. It accounts for about 3.3% of total program time.  The offending line is:
I am not sure why this is so slow, but we should probably investigate it.  My test does nothing special with  headers.


1674
Rapidly cancelling a Call can overwhelm transport7

Doing something like
rapidly in a loop causes memory to not get reclaimed.  Somehow netty is holding on to commands sent to it from the ClientCallImpl.


1675
MessageFramer allocates 1 byte array7

Each RPC creates a message framer which has a ref to a BufferChainOutputStream, which always allocates a single byte array.  At a high number of concurrent RPCs, this accounts for a non trivial number of 1 byte arrays (like millions).
This should be easy to remove, and make the GC have an easier time.


1676
Reduce default max message size7

Currently DEFAULT_MAX_MESSAGE_SIZE is 100 MB. That's laughably high. We should reduce it down to at least 10 MB, but 1 MB would make me feel much better.
This needs to be done cross-language.


1678
Maybe add overload of providing ExtensionRegistryLite to Marhsallers7

Somehow, some way, extension registries need to be passable to the grpc unmarshalling code.  Right now there isn't a good way to do so, due to marshalling being directly referenced by the stub, rather than the server/channel.  This means any code that is using proto2 extensions won't work with grpc.  Some ideas:
Make the stub code accept an extension registry if the proto syntax that generated the file is proto2
Allow a way for the extension registry to be passed to the client or server
Something else.


1682
Cancelling a call results in onClose never being invoked. 8

Consider the following code:
onClose will not be invoked, so it becomes impossible to know when the call is actually done.  This seems wrong.  If the call is cancelled from outside of the listener, onClose is invoked.


1683
protoc-gen-grpc-java crashed on MaxOS8

I meet this problem when I was trying to generate code based on my .proto file, and the error stack trace is:
And my pom.xml content is:
mvn -version output is:
I have no idea how to fix this issue, and hope you guys can help me. Thanks~


1685
QpsWorker doesn't terminate after it has run a client and QuitWorker has been invoked.8

I was able to successfully run a benchmarking scenario using Java QPS woker, and the worker that was running the server terminates fine, but the worker that acted as a client doesn't terminate.
after printing "Terminated" the process never finishes.


1693
Android - Not referencing the Request and Response file9

I have imported the project and referring to the android code in examples , below is the build.gradle file I am using .
Thanks in Advance ,
Praveen Pandey


1695
StressTestClientTest.gaugesShouldBeExported is flaky9

As seen at https (since rebuilt):
Also seen at https (since rebuilt)


1698
Android - nano folder not being referenced from the generated folder9

Hi ,
Please help.


1699
Bad ssl setup leads to requests never returning9

I've shoot myself in a foot by copy-pasting code snippet between client and server code which looked almost identical ;)
I've been trying to make a call from client which was set up as follows:
Such setup, as you may already noticed,  is obviously incorrect on the client and the correct way to do this is to use SslContextBuilder.forClient instead of SslContextBuilder.forServer like this:
This lead to client being broken and handing indefinitely, after making a call, during handshake without throwing any error or other indication or notice of horribly wrong setup. It would be great if we could prevent from making this mistake somehow.
As an aside, would be nice if netty could provide overloaded versions of forClient just like it does for forServer. I might be missing something because I haven't looked into this deepy, but it doesn't seem that there's anything preventing from that (?).


1700
Decide if io.grpc.Attributes should be marked experimental.0

No description provided.


1701
Tracking Issue for BindableService being Experimental.0

No description provided.


1702
Check CallOptions affinity, deadline and compression methods to see if they should still be experimental.0

No description provided.


1703
Tracking issue for messageCompression being experimental.0

No description provided.


1704
Tracking Issue for Codec, Compressor, CompressionRegistry being Experimental. 0

They may exist, even independent of turning off compression for public release.


1705
Tracking Issue for  Context being experimental0

#262 was closed as fixed (and linked to by the Context.java file), but we still need to determine if we should commit to the API for 1.0.


1706
Tracking Issue for Deadline being Experimental.0

No description provided.


1707
DnsNameResolverFactory should be checked if still Experimental0

No description provided.


1708
Check if EquivalentAddressGroup should still be experimental.0

No description provided.


1709
MutableHandlerRegistry and HandlerRegistry need to be checked to see if still Experimental. 0

These have been around a long time, maybe its time the graduate to stable?
+cc: @louiscryan


1710
Tracking Issue for Server Attributes being Experimental.1

Other languages propagate these via a context, maybe they should be done that way?  In any case, these should be looked at to see if they are part of 1.0.


1711
Tracking Issue for ServerInterceptor being Experimental.1

These have been around for a while, do we want to keep them?


1712
Check if ServerInterceptors.useInputStreamMessages and .useMarshalledMessages  should still be experimental1

These methods seem somewhat niche, should they be part of the API for the future?


1713
Consider removing ServerServiceDefinition, per the comment1

This class is experimental, and needs to be checked if it should be part of the stable API


1715
Document that Status's cause is not transmitted from server to client1

No description provided.


1716
Throw away Status cause in InProcess transport1

To act like a normal transport, InProcess transport should throw away everything in the status but the code and message. Otherwise it will be misleading during testing and general usage.


1717
maven plugin generates puzzling custom protobuf file on windows x641

Hi, I followed the Readme.md and used the maven plugin for protobuf-based codegen of proto files. After importing the maven plugin in project from pom.xml, I executed the command of protobuf:compile and protobuf:compile-custom and got the generated protobuf files.
But the generated custom grpc-java file of *Grpc.java is not compatible of java 8. The IDE of intellij idea told me that "@java.lang.Override is not allowed to when implementing interface method". I compared the generated *Grpc.java file with the *Grpc.java file in the io.grpc.examples in grpc-java repository. The file from github (for example, RouteGuideGrpc.java)  has abstract class AbstractRouteGuide, but using maven plugin can not generate the abstracte class.
Why the file generated by maven plugin is not compatible, and how can I generate the correct java file?
Thanks!


1720
Throw Status.UNAVAILABLE on connection refused2

I think we want to catch io.netty.channel.ChannelException and re-throw as Status.UNAVIALIBLE when endpoint is unreachable:



1722
API to convert from Status.Code to Status2

Status.fromCodeValue(code.value()) isn't too bad, but it does seem a bit strange not having something more like Status.fromCode(Code). Alternatively, we could make Status.Code.status() public, but that doesn't seem to match the rest of the API as well.
@lukaszx0, FYI


1732
Travis-CI caching is breaking OS X3

Caching now seems to be supported on OS X, but it is sharing the cache between OS X and Linux and the OS X build is accidentally trying to use Linux binaries. We need to split out the protobuf binaries between the two systems.


1734
Http2OkHttpTest.deadlineExceeded is flaky3




1736
Contexts missing private constructor3

Contexts should not be instantiated.


1737
Contexts.statusFromCancelled should be marked experimental3

I question if any of our users will actually use the method. It can be moved into io.grpc.internal or it can be marked Experimental. If there is a use case for it, it'd be good to know, since it didn't come up during review.


1745
setRemoveOnCancelPolicy is not called4

At least on OpenJDK, newSingleThreadScheduledExecutor() does not return a ScheduledThreadPoolExecutor. The documentation says:
Unlike the otherwise equivalent newScheduledThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads.
So maybe we should be using newScheduledThreadPool(int) instead. But since that still isn't required to be a ScheduledThreadPoolExecutor, maybe we should just construct a ScheduledThreadPoolExecutor directly.


1756
NettyTransportTest > newStream_duringShutdown FAILED flaky5

Seen here: https
Unsure how this can happen, given that we pick a free port https ... and we shouldn't be racing with other tests ... unless they are run in parallel?


1758
channel warm up per thread5

Hi, all. I'm doing an experiment with grpc and find out that the first usage of grpc in a thread costs much more time than the subsequent ones doing the same thing. I tested it on a 2-core laptop and 24-core machines, and the same phenomena occurred on all of them. So I'm wondering if I'm using grpc wrong or something in grpc-java could be improved to avoid such situation. Below is my code and part of  the report.


1759
Swap to 'fail fast' and 'ignore connectivity' behavior5

The other implementations are swapping to fail fast by default. We believe this is what users would typically assume our behavior to be and it behaves well with infinite deadlines, as well as being required by many latency-sensitive applications. These are not the same semantics as in Stubby, because gRPC will delay the RPC while in IDLE or CONNECTING until the state becomes READY or TRANSIENT_FAILURE.
Java today is doing neither 'fail fast' nor 'ignore connectivity', but instead something in-between because it delays while in TRANSIENT_FAILURE, but only one connection attempt.
This is a very important behavior change for users and must be done before GA.


1762
Add connection window debug information.6

This likely belongs in Netty somewhere, but I'm adding it here so I don't forget.  It would be super useful to be able to quickly look at the connection level window and stream window, likely as some sort of debug log output.


1764
Tracking Issue for Attributes being Experimental.6

In #1700 it was decided that Attributes is still experimental.  This issue is acts the the reference from the source code.


1766
Tracking Issue for affinity being Experimental.6




1767
Tracking Issue for authority being Experimental.6

In regards to #67.


1768
NettyServerTransport.notifyTransport() logs at SEVERE6

Logging at SEVERE is probably an overkill most of the time. There are rare cases that something higher would be useful, but I don't think we could easily distinguish between those cases. We should probably reduce the severity to something lower, although I'm sure what makes the most sense.


1769
Tracking Issue for DnsNameResolver being Experimental.6

In regards to #1707.


1770
Tracking Issue for NameResolution being Experimental.7





1771
Tracking Issue for Load Balancing being Experimental7

Specific usages:
LoadBalancer
ManagedChannelBuilder.loadBalancerFactory
PickFirstLoadBalancerFactory


1772
Tracking Issue for Plaintext being Experimental. 7

Specific usages:


1773
Tracking Issue for Target Specification being Experimental.7

Specific usages:


1774
Tracking Issue for Method Descriptor being Experimental.7

Specific usages:


1775
Tracking Issue for Idempotence being Experimental.7

Specific usages:


1777
Tracking Issue for Marshaller being Experimental.7

Specific usages:


1778
HelloJsonClient is not obviously advanced7

The helloworld example is supposed to be the first thing you see. The JSON client example is easily confused as being important for initial users. We need some way to distinguish it and avoid new users looking at it too early.


1779
Tracking Issue for ServerCall Attributes being Experimental and rename it getAttributes.7

Specific usages:


1780
Tracking Issue for Server.getPort being Experimental8

Specific usages:


1781
Tracking Issue for TransportManager being Experimental.8

Specific usages:


1782
Tracking Issue for GrpcLoadBalancer being Experimental.8

Specific usages:


1783
Tracking Issue for InProcessTransport being Experimental.8

There is no plan to make this API stable.
Specific usages:


1784
Tracking Issue for Netty being Experimental.8

Despite Netty being the default and recommended transport, we mark is as experimental, implying it is not stable.  Once the transport layer is stable, this should be promoted.
Either we should commit to supporting it, or commit to a subset of the methods exposed.
Specific usages:


1785
Tracking Issue for OkHttp being Experimental.8

There is no plan to make this API stable, given transport API instability.
Specific usages:


1786
Tracking Issue for JSON Marshalling being Experimental8

Specific usages:


1787
Tracking Issue for Extension Registry being Experimental.8

Specific usages:


1788
Tracking Issue for (Call|ServerCall)StreamObserver being Experimental.8

Specific usages:


1789
Tracking Issue for MetadataUtils being Experimental.8

Specific usages:


1790
Tracking Issue for ServerCalls being Experimental.9

Specific usages:


1791
Tracking Issue for Testing utilities being Experimental. 9

Specific usages;


1795
Unimplemented service causes MessageDeframer exceptions in the log9

I'm seeing exceptions running grpc-java 0.14.0 in production (same with 0.13.2). Reproducible on both linux and mac with oracle jdk 1.8.0_66.
I've found the following code reproduces the exceptions (the number of rounds required may vary as it doesn't happen for all requests):
If you replace Netty with InProcess, you can get the following exception (the number of rounds must be increased a lot, though):


1797
Differences in generating GreeterGrpc.java from github example using maven9

Hello,
I've been playing with the examples and I cannot figure out why the GreeterGrpc.java file that I generate is different from the example shown here: https
In my GreeterGrpc.java, I am missing the abstract class that I need to extend to make everything work. Here's what I see:
I did notice that the examples published used might use a newer version of the compiler, but I'm not sure how this translates to maven from gradle. As a reference, here's my mvn file as well:
I use maven as my build system and this is the contents of my maven file:
Thanks!


1798
BUG: Attributes broken in 0.14.09

Due to a recent change in how attributes are stored it is no longer possible to look up attributes in an incoming request.  There's a fix for this in #1763.


1800
ClientInterceptor per call parameters0

Our generated clients come pre-configured with a set of approximately 10 interceptors covering functionality from response caching to metrics reporting.  We'd like our users to be able to customize these interceptors per call.  What is the recommended mechanism to pass per call parameters to a client already configured with ClientInterceptors?
Here's an example for setting up a client
When using the client we'd like our users to do something like,
Any other recommendations on how this could be accomplished?


1802
Netty server -> client messages apparently dropped in 0.13.2+0

I am observing some strange behavior on grpc 0.13.2 and above, on my Macbook Pro. Diagnostic information at the bottom of this issue.
Essentially what seems to happen is that the call is correctly handled by the server, all the way through onComplete, but the client never receives any of the inbound frames. This happens for, say, 5% of calls.
I've attached an example log snippet, including annotations indicating where the various callbacks are invoked, as determined by our logging interceptors.
This doesn't reproduce on 0.13.1, but is consistently reproducible on 0.13.2. Unfortunately I was unable to come up with a minimal reproduction.
Any help is greatly appreciated! Thanks!


1804
Verify server sends grpc-accept-encoding appropriately0

If the client sends a gzip-encoded request and the server responds with headers (endStream=false) that does not include grpc-accept-encoding gzip, then the client should warn. This is misbehavior on the server-side and would ideally be detected.
Although I said "warn" above, we're actually aware of servers failing to do this properly today. So initially we can use FINE and eventually swap it to warn.


1805
grpc-all-0.14.0.jar on Maven Central is truncated (only 361 bytes)0

grpc-all-0.14.0.jar on Maven Central is truncated and appears corrupted. Note that the "Download the JAR" link on the grpc-java front page points at this corrupt file as well.


1808
use maven plugin generate grpc code ,why only XXXGrpc.java been generated.0

hi,
i used  maven plugn to compile example helloworld.proto, and i  specialed the ${basedir}/src/main/java, the generated code only contain the GreeterGrpc.java,how can i ,generate
AddressBookProtos.java HelloReply.java HelloReplyOrBuilder.java HelloRequest.java HelloRequestOrBuilder.java
at same time.
thank you .
The exception "UNAVAILABLE: Stream IDs have been exhausted" is thrown, making the current RPC fail.
A new transport is only created once all RPCs are complete, which is a problem for slow RPC and long lived streams, as there's no upper bound for how long a stream can live.
The implication here is that a channel can become unavailable for a unbounded amount of time. Here's a couple of possible improvements:
Forcefully cancel active RPCs so that the transport can shutdown quickly and completely so that a new transport can be opened. This is somewhat consistent with the current behavior where RPCs fail due to Stream ID exhaustion, but is still suboptimal with the same set of problems the current implementation has with failing RPCs. Given that a client already has to deal with various error situations, this could be a good enough solution.
Start new transport without waiting for the current transpot to shut down. This has a worst case scenario of creating a transport per long lived stream per ~1 billion requests, which is perhaps rarely enough given that a few thousands requests per second should last a few days.


1812
Stress test failures in Java client1

Steps to repro:


1814
Add ability to MethodDescriptor to return classes of request and response.1

Hi,
MethodDescriptor is parametrized by <RequestT, ResponseT> but programmatically it's not possible to get this classes. What do you think about adding 2 getters to MethodDescriptor and populating it in generated classes:
Thanks.


1815
NPE from OkHttpChannelBuilder with ConnectionSpec.CLEARTEXT1

I'm getting a NPE when I use OkHttpChannelBuilder with ConnectionSpec.CLEARTEXT.  I might be misusing the API, but I think it's actually an issue.
The problem is that Utils.convertSpec is calling spec.tlsVersions:
But tlsVersions is always null (and enforced to be so) if not using TLS.
If this isn't me doing something wrong, I'm happy to send a patch.  I guess the patch should be to check whether TLS is enabled before calling tlsVersions, in Utils.


1819
netty: Stream ID exhaustion takes too long to swap transports1

This is split out of #1809.
A new transport is only created once all RPCs are complete, which is a problem for slow RPC and long lived streams, as there's no upper bound for how long a stream can live.
This is because the transport does not call transportShutdown() immediately, but only once all the streams on that transport have completed.


1824
ServerCallStreamObserverImpl should record where cancellation came from2

Currently a single boolean "cancelled" is set which loses where the observer was cancelled from.


1829
push to client2

It seems not support push. Am right?


1833
Automate builds3

It would be great if we could automate point releases by spinning up the appropriate VMs, building our protoc plugin on each, and uploading to maven central.


1837
Status.fromThrowable loses description3

cause ends up being an exception other than Status{,Runtime}Exception, only the cause is added.  When converting the status back to trailers, it is ignored, which makes it hard to debug "UNKNOWN".


1840
Implement Round Robin logic in SimpleLoadBalancerFactory4

Round robin logic is not yet implemented. Is there any timeline for this?
Thanks,


1848
Tracking Issue for Health Service APIs being Experimental4

HealthStatusManager


1849
Deadlines relative to call start4

Right now, it's not possible to set a deadline across all calls on a stub, doing something like stub.withDeadline(1, TimeUnit.SECONDS) starts counting right at this point, so when a single stub is injected and shared throughout the application, the deadline is quickly triggered :)
It would be nice to have something like stub.withDeadlineAfterStart(1, TimeUnit.SECONDS) that doesn't trigger until the newCall or start methods are called potentially.  This would allow me to configure my gRPC client with a deadline that is usable by default on all calls and also "correct" for my usage in how it counts down.  Is this something you'd be open to?


1850
Mistake in gRPC Basics: Java tutorial5

says that we should declare service as:
private static class RouteGuideService implements RouteGuideGrpc.RouteGuide
but example file declares service implementation as:
private static class RouteGuideService extends RouteGuideGrpc.AbstractRouteGuide
if class implements RouteGuideGrpc.RouteGuide then the server cannot be created as the next tutorial section says:
server = serverBuilder.addService(new RouteGuideService(features)).build();
because our service doesn't extend AbstractRouteGuide and thus doesn't implement BindableService interface.
A tiny problem but causes gRPC first timers like me some headache.


1852
CascadingTest.testCascadingCancellationViaMethodTimeout is flaky5

I think I've seen it flake on my own machine as well.


1860
How to get socket address in an Interceptor6

Is there a mechanism for getting the address of the load balancer resolved server's socket address in a client interceptor?  And on the server, get the address of the calling client?  Our use case is that we'd like to log this information in addition to other metadata that is associated with this address.


1861
Metadata trailers are not passed to Status*Exception when using BlockingResponseStream6

Hi @nmittler,
thanks for improving the error handling via #1811 and solving #681.
When using blockingStubs on the client the metadata trailers are not passed into the Status*Exception. Your changeset adds this ability to 2 of 3 onClose methods of stub/ClientCalls.java.
Did you just miss to add the trailer handling to the BlockingResponseStream class in
Regards,
Björn


1863
Fail-fast mode6

According to https, fail-fast mode is enabled by default. But it didn't say how to disable it.
I couldn't find much resource for fail-fast mode other than the file. Can anyone link me to related example/code/documentation? Thanks!


1869
Tracking Issue for Custom CallOptions being Experimental.6

Specific usages:


1871
Okhttp Headers performance improvements.7

OkHttp performance has been lackluster for a while, likely due to it not being easy to benchmark.  (especially on android!).  It does some extra validation we don't need (since Metadata) already does it.  We should audit the okhttp path and add some benchmarks in order to measure improvement.


1872
Lots of garbage created by Netty's HPACK encoder7

Netty takes great pains to not copy data unnecessarily, so it was surprising to find lots of garbage being created in the Hpack encoder.  Specifically, most of it comes from https
Which creates a new string for most (all?) headers.  We should fix this!


1873
Maybe make a custom Http2HeaderEncoder7

Currently the default Netty Http2HeaderEncoder grabs an iterator from an Http2Headers objects and iterates over the values, adding them to the table and serializing them to a ByteBuf.  We could save on a lot of allocations and cputime if we could pass an array directly in and skip Iterator.  We don't even have to deal with the hpack portions of this since we can reuse that API independent of the Http2HeaderEncoder interface.


1874
grpc tls7

We created a server and a client with tls in nodejs. This works. Below is the snippet.
server code
client code
We want to create a client in java that can communicate with the server in nodejs. But this does work. Below is the code for java client
The error message server side is
Below is the command to generate our server.key and server.crt
We tried to generate the key and the certificate following this link
But these commandes don't work, we couldn't follow.
Could you help us, please?


1877
{Netty,OkHttp}TransportTest.serverNotListening is flaky7




1878
Stack Overflow when running AsyncClient7




1879
ConcurrencyTest.serverStreamingTest is flaky7

Build failed at ConcurrencyTest


1881
More flexible SSL configuration API8

Today ServerBuilder.useTransportSecurity takes two files as parameter. However, sometimes only InputStreams for the key and cert files are available. Can we add an API to take two input streams?


1883
java.lang.IllegalArgumentException when try to use ipv68

I guess this is caused by the scopeId:


1885
Cache results of DecompressorRegistry's known message encodings8

Profiling shows a sizeable chunk of ClientCalls is spent in generating the grpc-accept-encoding headers.  This class was designed with a more dynamic use case in mind, but that is no longer the case.  Approximately 1.25% of all time spent in a call is from generating these headers.
This should be fixed by altering the class to be more expensive to create, but extremely fast to read.


1886
Allow specifying maximum number of connections on Server8

This will probably be implemented as part of a larger piece of work to control resources on server-side.
Note that slightly different metrics (like maximum number of streams across the server) may be better; I'm not trying to dictate the exact metric, just the need for this sort of control.


1899
added android:shareUserId then io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact9

added android:shareUserId then io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact
help...


1901
Stabilize generated MethodDescriptor API0

Today, the generated method descriptors are available as fields. This should probably be changed to be behind a method of some sort so that they can be generated lazily (to reduce static class loading time for Android).


1905
Errors with concurrent server push0

Hi, I'm getting errors when making concurrent server pushes to the same client connection.
You can see simplified repro here https:
Just clone and run mvn test to see repro.
It is supposed to send 100 messages, but generally the client does not receive 100, and there are errors logged in the process, e.g.


1906
Question on Android Requirements0

I have a grpc server written in go which serves through a valid https certificate,
and an Android client like the examples but without the usePlaintext(true) part.
The RPC services work fine for Android devices with sdk-version >= 21, but they fail for older devices with this exception:
Using this mechanism I was able to perform the rpc call on an older device, but the suitable Google Play Services version isn't installed on more than half of the devices in my target population. Is there another way to make grpc work on theses devices? Like switching to Netty-based transport? Is there any sample of an android app usig Netty-based transport?
Thanks in advance


1907
protobuf beta 30

Hi! It seems we can update to protobuf beta 3, I think it would go here?


1909
Improve debugging of tcnative loading0

If tcnative fails to load, it is painful to figure out why. We should include OpenSsl.unavailabilityCause() (or similar) when we fail to find any ALPN providers.


1913
StatusException and StatusRuntimeException not serializable1

StatusException and StatusRuntimeException are not serializable due to containing a Status object (which makes no attempt to be serializable) with no special handling.
Here's a snippet from the exception that arises:
Our use case is an RMI-like API to make calls to a server process which is then making gRPC calls. In this case an operation failed and then things go really wrong because we can't see the root problem since the real exception can't be serialized.
I think to be a "good citizen" the Status*Exceptions should be serializable so it would seem that either:
Status should also be
The status should be pulled apart and the pieces stored in the exception classes
Special serialization routines should be put in place to pull the Status apart on write and put them back together on read
If you know which approach you'd like to take, I'd be happy to implement it.


1914
Make CallCredentials non-experimental1

This is a tracking issue for removing @ExperimentalApi from CallCredentials-related API.


1915
Tracking Issue for CallOptions.withWaitForReady being Experimental.1

The opposite to 'fail fast' is documented as 'ignore connectivity' and in C. However, in Java we prefer to use 'wait for ready'.
Still some debates on naming the methods as pointed out in comments in #1912.
Let's mark it with @experimentalapi since the name of "non fail fast" is still a bit up for debate.
Do we want withFailFast(void) and withWaitForReady(void), or do we think the boolean withNonFailFast(true) is nicer?


1926
Stop creating a CancellableContext for ClientCall2

As seen in #1878, it is pretty easy to accidentally create long chains of Contexts when we create a new Context for each ClientCall. Thinking about it more, it seems creating a Context was a misstep. The RPC doesn't really mean "a unit of work" in the same way as it does for server-side, and it is unlikely that any result processing should be killed when the RPC completes (successfully or unsuccessfully). Also, only async stub sees the context, which seems like further evidence that there is nothing inherent that should cause us to create the Context.


1927
Get conscrypt working with Netty2

Related to: netty/netty-tcnative#114


1929
IllegalStateException still happening for io.grpc.internal.TransportSet$TransportListener.transportTerminated on 0.15.SNAPSHOT 2

After pulling in 13fe13b still getting this exception happening in some clients.


1930
Swap Android docs to Protobuf Lite3

Protobuf lite is a much nicer API than nano and is very similar API-wise to normal protobuf. We should swap the example to lite instead of nano.
The README should also be swapped to encouraging protobuf-lite for Android instead of protobuf-nano.


1932
ClientCallsTest.inprocessTransportOutboundFlowControl is flaky3




1936
directExecutor on Server is broken if handler not found3

When directExecutor is used, failure to find a handler will call close() before setListener is called. This is effectively a manifestation of the concern presented in NettyServerHandler.


1940
Revert #1515 after 0.15 release.4

From the discussion in #1330. Just so I don't forget.


1943
Implement connection attempt exponential timeout4

This is not for exponential backoff, but for exponential timeout. Currently the timeouts involved aren't tuned at all between attempts. We want to have a single timeout applying to all parts of the connection attempt, as defined in the connection backoff spec. This generally prevents the need for users to specify connect timeouts.


1944
Implement per-stream compression4

This is to replace our current per-message compression for greater compression ratios. I don't think there is a public spec yet.


1945
Include QuickStart example in documentation4

Hello,
I wonder if the documentation can be impoved by pulling in quickstart examples from grcp.io? It took me about half an hour to even start experimenting after reading the GitHub documentation - then somebody showed me grpc.io example and it was SO much easier to start learning and experimenting using those examples.
Thank you!


1946
gRPC server does not exit on OutOfMemoryError4

Hello,
I did a simple test as throwing java.lang.OutOfMemoryError in my service code. It seems that the error is caught in io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener.halfClosed() and its not re-thrown.
Therefore the server will continue running.
The version of the gRPC is 0.15.0-SNAPSHOT
Is this expected behavior or it is a bug in the code?
Thanks,
Rado


1947
ServerCallImpl's use of metadata in sendHeaders is thread-unsafe4

ServerCallImpl uses metadata to determine compression settings in sendHeaders. However, that Metadata has already been passed to the application which is free to modify it. The acceptEncodings should just be saved as a field during the constructor instead.


1949
Service implementation running in a different thread than "ServerCall<RespT>.request()"?4

I've implemented a simple ServerInterceptor whose intent is to grab the value of an header (a "trace ID") and place it in the MDC upon receiving a request (and to do the reverse when request handling finishes).
However I've noticed that the service implementation itself and the interceptor's close method are being run in a thread different than the one that originally runs the interceptor's request method. This causes contextual (MDC) information to be lost. These are my service's logs (the UUIDs are the "trace IDs"):
My interceptor's implementation is roughly the following:
Is this an expected behaviour that I should be prepared for, or am I facing some kind of issue on gRPC's side?


1951
protoc-gen-grpc-java snapshot doesn't have a mac build published5

Hi guys, we have tried to switch to the latest snapshot, but unfortunately only our
linux users were successful. Do you have plans to publish the mac snapshots to sonatype
or we should build on our own ?


1968
Android Build Failed with an exception. Could not resolve all dependencies for configuration ':app:protobufToolsLocator_grpc'.6

Could not resolve all dependencies for configuration ':app:protobufToolsLocator_grpc'.
Could not find io.grpc:protoc-gen-grpc-java:0.15.0-SNAPSHOT.
Searched in the following locations:


1972
Keepalive in OkHttp7

This is splitting out the okhttp portion from #1648, since we are wanting to get it done before Keep-Alive in general is completed.


1973
Default value for message is null?7

From this doc, default value for message field is null, while from the generated code, it seems the DEFAULT_INSTANCE of the message is returned, which is not null.
Is the doc wrong?


1975
Tracking Issue for Contexts.statusFromCancelled being experimental 7

Forked from #1705


1981
Executor usage in `ClientCallImpl` races with channel shutdown and termination.8

ManagedChannelImpl clear scheduledExecutor in shutdown(), and releases (which potentially closes) executor in maybeTerminateChannel().
Neither newCall() nor ClientCallImpl checks the shutdown state of the channel. ClientCallImpl relies on FailingClientTransport for the expected behavior. However, ClientCallImpl uses the passed in executors anyway, for scheduling the deadline timer and invoking the call listener.
If ClientCallImpl tries to schedule a deadline timer after the channel is shut down, it will get a NPE. If it runs the call listener after the shared executor has been closed, which is 1 second (SharedResourceHolder.DESTROY_DELAY_SECONDS) after all references are gone, e.g., the application calls Call.start() that late, it will get a RejectedExecutionException. Our current tests are not testing for the two cases.
This doesn't seem to be a serious issue. It only affect people who try to use Calls after the channel has been shutdown. I am yet to figure out a solution.
Anyway, it seems executor should be cleared after being returned to the shared pool, like scheduledExecutor.


1982
cannot find a NameResolver exception for revision fc5197fbf4ca51bd76484b28e155beb52c0c0a908

@ejona86 @carl-mastrangelo
I check out the most recent commit, and find out that there is something wrong with channel initialisation.
What I get is:
And the same exception for netty transport too. Replacing 127..0.0.1 with localhost doesn't work. It happens on all the IPv4 addresses I try.


1993
Implement status_code_and_message interop test in Java9

There is a spec, and implementations in some languages, but none in Java yet.


2005
ManagedChannels and Servers should nag when not shutdown properly0

Idea: add a finalizer to ManagedChannels and Servers, to make sure they are shutdown properly.  In the event that a user loses a reference to the object, the finalizer can check to see if it was shutdown properly and loudly nag about how it should be done correctly.  It may or may not decide to actually do the shutdown in addition.  It is not guaranteed to run, but would help point out where they are being lost.


2014
Race on NettyServer shutdown.1

Even with 2292cbf it seems there is still a race with shutdown.  Initial guess is that the shutdown and close are happening in the Boss Event loop and the normal event loop.  Conflicting reads and writes:


2015
Race on NettyClientTransport.start1

Bootstrap.connect seems to add a listener to a ChannelFuture that is concurrently modified by the NioEventLoop and the client provided executor in ConcurrencyTest
Conflicting accesses:


2016
Custom HostnameVerifier for NettyChannelBuilder 1

Would it be possible to provide a customizable javax.net.ssl.HostnameVerifier on he client side?
The most http clients provide this feature in order to deal with "generic selfsigned certificates".
Currently I use netty's InsecureTrustManagerFactory, which trusts all certificates not just mine.
val sslContext = GrpcSslContexts.forClient()
    .trustManager(InsecureTrustManagerFactory.INSTANCE)


2018
Issue compiling proto files using protobuf lite within android studio1

Hi
I followed android example to compile few existing proto files that we have in android studio. However i get following errors
Following is how my module build.gradle looks like, Am i missing some config??
Thanks


2020
Is 0.15.0 out?2

I see it in the release tab from a couple days ago, but it isn't in maven central, are you waiting to pull in more before publishing it?


2022
Make ManagedChannelBuilder.idleTimeout() non-experimental2

No description provided.


2024
Consider doing header processing on Application thread2

Profiling shows that about 10% of time on the network thread on a spinning benchmark is spent converting from Netty Headers to gRPC Metadata.  This has been optimized recently, and the profiling doesn't include recent Netty changes, but most of the time is actually in the gRPC code!
An idea to fix this would be to punt the conversion of Transport Headers to gRPC Headers onto an application thread, freeing up the network thread.  I don't imagine this would have big CPU savings, but could have a latency spike.
cc @buchgr  thoughts?


2027
netty: Improve flusing behaviour in WriteQueue.2

The discussion is in PR #1989 ... More investigation is needed.


2029
Stop infinite loop2

Hello,
I'm try to do some streaming service. I do something like this:
But if client is goes away or (somehow) isCancelled() not changed either StreamObserver not started throwing.


2031
grpc-netty on maven central depends on netty 4.1.2 but code assumes 4.1.13

I noticed that the grpc-netty v0.15 package on Maven Central suggests using netty-4.1.2Final. However, we get the following exception when we use it. The cause appears to be that the code uses a DefaultHttp2HeadersDecoder constructor that takes 3 parameters, as supplied by netty 4.1.1, but netty 4.1.2 added a 4th parameter, hence the NoSuchMethodError.
Everything appears to work fine for me with netty 4.1.1Final.


2034
ServerImpl may use executor after it is released3

Since 777e928, ServerImpl may reference executor and may schedule Runnables on executor after executor is released. The executor should be released on termination, not shutdown.


2036
Metadata trailers are not passed to Status*Exception when using ClientCalls.blockingUnaryCall.3

Trying to write a sample for #1295, but when calling unary rpc method on blocking stub, the trailers are not passed during ClientCalls.getUnchecked which is called from ClientCalls.blockingUnaryCall.
Is this by design or bug ?
Sample code is here, the blockingCall() fails but others are good.


2037
Optimize NameResolverProvider,ManagedChannelBuilder for Android3

Class.getResource() is very expensive on Android, so we need to find an alternative for our Provider classes.
Since Android has little need for alternative name resolvers and the number of transport implementations is very limited, we're planning on swapping to a hard-coded list of well-known providers when we detect we are on Android.
We will most likely hard-code the string in call to check for the class, Class.forName("io.grpc.internal.DnsNameResolverProvider"), to also allow ProGuard to notice the reference.
Internal tracking: b/30158670


2038
Absorb new Java import style3

The rest of the changes are Java 8-specific.


2041
Specify ThreadGroup to Netty4

Depending on the specifics of how netty/netty#5533 ends, it may break our users using ThreadGroups. We would need to re-apply the workaround removed in 2d7347f or add a workaround that specifies the ThreadGroup to Netty's DefaultThreadFactory.


2042
Improve thread safety docs for fields in ServerImpl4

Split out of #2032 (comment). usingSharedExecutor and executor aren't using GuardedBy semantics. It isn't clear to @carl-mastrangelo that the current code is valid. Improve the docs/code to correct/make the correctness more clear.


2050
ClientCall.cancel is not required to be implemented5

This is an oversight based on how we changed the arguments. We should remove the default implementation for 1.0


2051
Consider adding UnimplementedChannel to testing project5

An UnimplementedChannel is convenient over using a InProcessServer without any services since it does not need to be shut down. It seems reasonable to make it easier to create a stub that shouldn't be used.


2054
Log a warning in ClientCall.cancel if it has neither a message nor exception5




2057
Service is still running when client is killed.5

My service queries lot of data by jdbc and sends to client using grpc stream. If I killed the client, the service cant catch a exception, and it still running the circle to query from jdbc and write to stream. I cant find a method to receive a notify that grpc completed. What should I do, please?


2058
Remove usages of Guava's BaseEncoding and ByteStreams5

Both are @Beta in Guava, and thus are not appropriate for use in a library. Usages within tests are fine.


2062
Benchmarks OOM6

Running FlowControlledMessagePerSecond benchmark with 4 forks creates out of memory exceptions.


2063
Deprecated method warning when upgrading to 0.15.06

I got following warning messages in generated code.


2066
[Question] BlockingResponseStream.hasNext blocks forever6

I run into an issue that BlockingResponseStream.hasNext occasionally blocks forever while sending response for a streaming RPC. I haven't found any reliable way to reproduce this issue, but following code and comment in ClientCalls.java caught my attention:
I am not vary familiar with GRPC codebase. Could someone tell me when is this call going to block and which thread usually unblocks it? What could cause the call being blocked forever?
It seems GRPC does not timeout by default. Should I specify RPC timeout (BTW is timeout the same thing as deadline)?


2068
TLS communication error between grpc-java client to golang server 6

I get the following error when establishing a connection between a grpc-java client and a golang grpc server.


2074
How to use load balancer in client side7

FYI. I am writing a client for a service, since this service has multiple instances, so I can get more than one addresses, and I just want to configure those addresses when I construct client. But after scan all the examples, I can't find such example. All examples use ManagedChannelBuilder.forAddress() like way to get a ChannelBuilder, I did notice that channel builder has a loadBalancerFactory method, but I am wondering how to implement a custom load balancer factory and where I can configure those addresses?


2086
Update to protobuf-3.0.08

Upgrading to Protobuf-3.0.0-beta-4 breaks Lite, since there are no pre-compiled binaries for Lite at that version. GA will have pre-compiled libraries.


2088
HandlerRegistryBenchmark always fails8

HandlerRegistryBenchmark always fails to run because MethodDescriptor expects a non-null request marshaller:
Probably easy enough to fix by adding one.


2091
Error zero_copy_stream.h file not found during  ../gradlew java_pluginExecutable9




2098
Android has version "0.0" in user agent9

It should have the actual version.


2099
Can we please call the thrift module & artifacts 'grift'9

@chedeti
@ejona86
Pretty please!


2109
DNS+SRV NameResolver0

I see that there is currently a dns name resolver and I'm wondering if a dns+srv resolver would make sense for the project:
So you would be able to resolve a target like:


2112
Server-side cancellation does not promptly inform server1

Both context.isCancelled() and call.isCancelled() only begin returning true after ServerCallListener.onCancel() (in ServerCallImpl.ServerStreamListenerImpl, but that is already on application callback thread via ServerImpl.JumpToApplicationThreadServerStreamListener). That means callers must return from a listener event before the values can change and they will have already seen onCancel(), which makes them broken for the very case they are there to solve.
If !status.isOk(), both the context and the call should return true as soon as the transport notifies the server. How to do that seems it will be a bit awkward with the current code organization.


2116
build fails with exception v0.15.x :grpc-protobuf-lite:compileJava cannot find symbol1

Hi, All;
I am forced to work on a Mac OS system and I am simply trying to build the grpc-java examples.
I keep getting a build failure with exception.
Here is the relevant output:
Any advice would be welcome.
Thanks,
Jo3


2118
Excess contention in ExecutorService1

When profiling a client with 200K active RPCs, there is a point of contention on the Executor.  Each RPC gets its own SerializingExecutor, which executes work on an underlying executor.  Currently, that executor is ThreadPoolExecutor in almost all cases, which itself has a BlockingQueue.  That queue is heavily contended  showing up at minutes of wasted time:
An idea to fix this is to have some sort of striping executor in order to prevent this contention from happening.


2119
Excess contention in ManagedChannelImpl.exitIdleMode1

Each RPC needs a transport, and thus calls ManagedChannelImpl's transport provider.  This tries to make the transport wake up, but does so under a lock.  Profiling reveals a high amount of contention on this lock.  If possible we should look at eliding the lock and using a volatile read to get the loadbalancer out of it.
cc @zhangkun83


2120
Excess contention in ManagedChannelImpl getTransport2

This is major blocker for running at high qps


2121
Excess contention in DummyLoadBalancer.pickTransport2




2122
Contention in SerializingExecutor$TaskRunner.run2

Not sure why there is much contention here, but there does appear to be some.  This is very tiny compared to the rest of the other contention points.


2123
Reduce Thread count in default Event Loop Group2

By default, ELGs use 2x the number of threads as the number of processors.  This appears to be for applications that do a lot of work on their net threads, which gRPC does not.  Consider reducing ELG threads down to the number of processors.


2132
Filter mechanism for server transport creation and deletion3

To support a per-connection throttling mechanism used inside google, gRPC needs to allow user to add filters to the server that:
Gets called when a server transport is created and handshake-completed, and has access to transport-specific attributes such as client address and identity.
Adds per-transport attributes to ServerCall attributes.
Gets called when a server transport is terminated.
I discussed a few options with @ejona86:
ServerInterceptor
The filter returns a ServerInterceptor when transport is created. The interceptor is transport-scoped, unlike ordinary interceptors that are service-scoped.
Doesn't touch transport API (ServerTransport, ServerStream) which are internal.
Re-uses ServerInterceptor for purposes that ServerInterceptor is designed for (modifying ServerCall attributes etc).
Changes the scope of ServerInterceptor. @ejona86 thinks bonding ServerInterceptor to a transport is seemingly generic but actually an ad-hoc solution for a particular problem. I don't necessarily agree though.
Decorating transport
The filter returns a decorated ServerListener at registration. Through a few more layers of wrapping, the filter would be able to decorate ServerListener.transportCreated(),ServerTransportListener.transportTerminated() and ServerStream.attributes().
Heavily coupled with transport API which is internal.
Duplicates the existing interceptor mechanism, but on ServerStream instead of ServerCall. It would be ideal to just decorate ServerCall, which is what ServerInterceptor does. ServerInterceptor currently is per-service, but our use case need it to be per-connection.
Even more layers of decoration than the interceptors. The filter can be annoying to write.
Ad-hoc
Just for our original requirements, the filter would return per-transport attributes that are to be merged into ServerCall attributes.
It probably won't work in this form, because the attributes such as peer security identity may not be available immediately after the transport is created, if the security handshake has not completed yet. On the other hand, the first two options can work around this situation by reading the attributes only when the first stream is created.


2139
Zero-copy* write combining3

I propose to defer the serialization of protobuf, thrift, ... from the MessageFramer to the WriteCombiningHandler.
PR #1996 shows that combining small buffers into one large buffer can substantially improve throughput. However, it's very hard to come up with a one-size-fits all algorithm that decides on when to combine buffers. It's probably safe to assume that all buffers (HTTP/2 frames) except for DATA frames are small enough to be combined (copied) without much overhead. HEADERS could be large, but probably aren't. Say we would expect headers to be in the 100 - 300 byte range.
For example, a RPC response will typically write 3 HTTP/2 frames
In Netty's HTTP/2 codec that would typically translate to the following buffers being written
When using write combining as proposed in #1996, then depending on the size of the DATA(Payload) buffer, we would either pass one buffer or 3 buffers to write/writev. As mentioned before, coming up with a "magic" number N bytes that for all machines and workloads tells us when to combine buffers is hard. It would be much easier if we would simply always combine all writes until flush, and I believe we can.
If we change the MessageFramer internals and the WritableBuffer API, so that instead of always copying the InputStream into a buffer, it's up to the WritableBuffer implementation of when that copy happens. We could then create a simple, internal ByteBuf implementation that effectively just wraps an InputStream. The copying into a "real" ByteBuf could then be done in the WriteCombiningHandler. So we would still only do one copy, but instead of copying in the MessageFramer we do it in the WriteCombiningHandler.
The logic of the WriteCombiningHandler would become very streamlined. It simply stores a list of ByteBufs and Promises, and on flush it allocates a large buffer with exactly the number of bytes it needs, copies all buffers from the list into the large buffer, and does a ctx.writeAndFlush(largeBuffer, combinedPromise).
A nice sideeffect of this change would be that buffering / piggy-backing messages would no longer be a concern of the MessageFramer, but be a responsibility of the transport only.
Some questions:
This moves the protobuf serialization from the application thread to the Netty thread, is this a problem?
Right now the InputStream is immediately consumed when passed to the MessageFramer. With this change it would be consumed at some later point in time on the Netty thread. Could that be a problem in terms of leaks or so?
Thoughts @louiscryan @ejona86 @nmittler @carl-mastrangelo


2142
withWaitForReady is missing from AbstractStub4

It's added to CallOptions but we don't have a convenience on the AbstractStub. We expect it to be called pretty frequently in normal usage, so the convenience seems very appropriate.


2143
Consider adding AbstractStub.withCallOptions()4

It would fully overwrite the current CallOptions. That could be considered "bad" because you don't know what you are overwriting, but it seems there are fine times to do so. Maybe it would be better to have a new generated method newStub(channel, callOptions) instead?


2145
How to implement  logging in ClientInterceptor?4

I want to logging the content of request and response each call. As documentation saying :
Interface for intercepting outgoing calls before they are dispatched by a Channel.Implementers use this mechanism to add cross-cutting behavior to Channel and stub implementations. 
But I don`t know how to get the request and response content  from method  or some other object .
Does anyone know the answer,thanks !


2149
No NameResolverProviders found via ServiceLoader, including for DNS4

I'm trying to execute a grpc client from Mathworks Matlab. Matlab should be able to execute Java code mostly unmodified. The client works well from plain Java, but fails from Matlab with error:
I'm unable to find the error. My code fails here:
I'm not using ProGuard. The same code used to work with grpc-java-0.14.0. This might be related to issue 1982 ?


2151
Slowness with large payloads5

When reading a proto off the wire, Netty Passes the chunks of data read up to the message deframer, which stores them in a composite byte buffer.  It passes this composite as an InputStream to CodedInputStream for decoding, which itself makes many copies.
It seems like it would be more efficient to pre allocate a buffer of the appropriate size (since we know the message length) and concat to it each chunk that netty passes up.  This would be a copy, but it would make it so that CIS doesn't have to copy in its inefficient manner.
This would also free up the buffers Netty uses to read chunks of data off of the wire more quickly.
Discovered when trying to max out a very high speed network link.


2152
Deadlock found in TransportSet5

When running benchmarks where the client started up faster than the server, The first few calls failed as unavailable.  Our internal deadlock detector seems to think there is a deadlock around here:
Deadlock(s) found:


2153
Null pointer exception while setting a deadline on a stub5

I posted this on the grpc mailing list too, reposting here because I'm not sure what the right forum is.
I followed directions in this issue to add deadlines to a RPC. But I get a null pointer error.
My code is
Can the callOptions here be null by any chance?
I'm using the code generated by the protobuf java plugin and the constructor initializes callOptions to CallOptions.DEFAULT, so I'm not sure what's wrong here. Anyone else faced this issue? I'm using protobuf-gradle-plugin:0.7.6.


2155
Support unary Future and Blocking service implementations5

Since we are now requiring all implementations to extend our base classes we can add streaming options later without breaking anyone (with the interfaces it would have). Even though we have server-streaming for blocking we may want to not support it yet on server-side.
This has a benefit for testing since blocking/future is much easier to mock with mocking frameworks than the async interface.


2157
Flaky CompressionTest5




2160
Stub classes shouldn't be final to allow mocking6

#2077 Seems to have made stub classes final. As stubs do remote calls, it's usually important for them to be mockable to write unit tests, but mockito can't mock final classes. Previously users could use the interface I guess. While I understand the reasoning of dropping the interface for service classes in #1469, to allow stub upgrades without breaking service implementation code compile, does this apply to client stubs too?  It'd be nice for the stub classes to either be non-final or have interfaces to allow mocking.


2161
Could not initialize class io.grpc.netty.Utils6

Hi, All;
I have made it through the grpc-java build process (thanks for all the help!).
Now, when I run my application from a "fat jar" or uberjar, it succeeds.  However, when I incorporate that jar in another application, it get this error: Could not initialize class io.grpc.netty.Utils
I do not seem to be able to get any further details on the error because it does not occur when I run the code directly from the uberjar.
Where should I look to see why Netty Utils is failing?
Thanks,
Jo3


2162
Servers should send RST_STREAM(NO_ERROR) after trailers if client is not half-closed6

The HTTP/2 spec calls out this case specifically saying that servers MAY send the RST_STREAM. For gRPC, we are going to consider it more of a SHOULD, although clients still have to assume it is a MAY because intermediaries may in be play.


2163
Clients should RST_STREAM(NO_ERROR) if not half-closed when receiving trailers6

This is the client-side version of #2162, to handle the case when intermediaries are in play. Note that the RST_STREAM can be elided if the server sent a RST_STREAM after the EOS=true. But the client can't assume the server will send such a RST_STREAM.


2164
point to correct 1.0 proto reference in readme6

Our current maven and gradle techniques point to beta3. Change to 1.0?


2166
Excess garbage in Metadata 6

Metadata today is a Hashmap of ArrayLists, and each arraylist has an object array.  This creates a lot of garbage since Metadata objects are short lived.
Some ideas on how to improve the situation:
Recycle the objects
Store headers as a flat array of an initial size, and swap to using a full map if slow.  (and avoid Strings when possible)


2167
Extra array copy in Metadata6

In Metadata.storeAdd(), the code optimistically tries to allocate a single element array under the premise that most headers will only have a single value.
In DecompressorRegistry, it tries too to cache the "grpc-accept-encoding" header and builds it ahead of time.  In theory, there should only be one such header.
Sadly, ClientCallImpl.prepareHeaders() always adds the "identity" codec before adding the raw, cached  encodings, which makes the Arraylist in Meta data be too small, and have to reallocate larger, which copies the tiny array.  This happens on every single RPC and was noticed during profiling.


2168
cycle dependencies between grpc-core and other projects.6

when use eclipse to import this project but get many warning:
"A cycle was detected in the build path of project 'grpc-core'. The cycle consists of projects {grpc-core, grpc-testing, grpc-stub} grpc-core       Build path  Build Path Problem" .
why and how to resove? thanks!


2169
Provide hook for network availability notification on Android6

I new a stub with a multiplexed channel like this:
ServiceGrpc.ServiceBlockingStub stub = ServiceGrpc.newBlockingStub(getChannel());
Launch the application when the network is close , then open the network . Invoking method of stub that is built with a multiplex  don`t work immediately. While invoking method of stub that built with new channel  can get response from server immediately . It will happen also when the network was unavailable long time .and then network turn available .
How does channel judge network state ?How to reconnect immediately with multiplexed channel ?
application is running in Android 5.1.1 and 6.0.1
Thanks !


2170
grift is experimental7

Tracking issue for tasks necessary before considering grift (thrift marshalling over grpc) API stable.
 hear about some usage, to make sure it is satisfactory to users familiar with thrift marshalling
 codegen'd method signatures should have multiple arguments instead of the single wrapping message (this is probably cross-language)


2174
CodedInputStream should have aliasing enabled.7

Premise: Most Protobuf messages are either big (space) or complex (lots of different fields set), but not  usually both.  The expected use case for the first is sending raw data through, with large ByteStrings  dominating the majority of the encoded payload.  The expected use case for the second is a complicated message with lots of fields, some of which may be used and retained by the program after the request is complete.
In the wake of c47d948, it became clear that Proto is copying way more than it should, and meekly provides some methods to avoid copying too much.  In the specific case of byte strings (and no other type), it is possible to avoid copying from the input buffer when extracting a byte string field.  Instead, if the buffer is immutable, and "aliasing" is enabled, Proto will return a ByteString field which points into the interior of the buffer and avoids the copy.
The downside of this approach is that it keeps a reference to the entire outer buffer, even if the remaining data inside is not needed.  This means that if a large message was received, and a single ByteString is referenced but the outer proto not, the encoded data will remain in memory.  This is a garbage collection risk, since the buffer cannot be GC'd.
I feel that this is not a significant risk due to the premise of this issue.  Either the message is dominated by a single byte string, in which case retaining the whole buffer is not an issue.  On the other hand, the message could be large, but it is unlikely that the program would have a ByteString that would be retained for a long time after the rest of the message could be reclaimed.
The upside is removing yet another copy in the first use case.  A quick benchmark of enabling immutability and aliasing adds around 10-20 MB/s round trip throughput.  (so maybe a could hundred megabits)
Strings, repeated fields, and byte arrays are not affected.


2176
io.grpc.testing.integration.ProxyTest.smallLatency is flaky7




2188
Occasional IllegalStateException during shutdown after upgrading to 1.0.08

Hi, after upgrading from 0.15.0 to 1.0.0, I'm seeing occasional IllegalStateException during shutdown (makes my tests fail which is why I notice).  I had not seen this previously with 0.15.0.
I was able to capture under a debugger and the existing backoffStatus was
Let me know if there's additional info I can provide to help diagnose.
Thanks,
Trask


2189
metadata is lost when server sends StatusRuntimeException8

I would like to send a StatusRuntimeException to the client with some information saved in metadata. like this:
But when I caught the exception in the client, I found that the metadata in the exception didn't contain this information. I checked the code and found that in class Server.JumpToApplicationThreadServerStreamListener:
In this method, Status.fromThrowable(e) will convert this exception into Status instance, but it won't reuse the metadata saved in the exception. Instead, it create a new empty Metadata.
So in this way, all the data saved in the metadata of StatusRuntimeException is lost.
Yet in class Status I found there is a new method Metadata trailersFromThrowable(Throwable t) and it is used in class ServerCalls:
I think this is the correct way to handle and pass metadata.
Please help to confirm it. If so, I would like to pull a request to fix it.
Thank you !


2193
Support forward proxies with CONNECT9

Is there a way to specify a proxy connection when specifying the host and port with the NettyChannelBuilder?


2194
DeadlineTest.defaultTickerIsSystemTicker is flaky9

trying to build grpc-java
following these instructions ...


2195
gRPC code generator needs to handle reserved words in method names9

When defining an RPC like:
The method Import gets translated to a java keyword.    When should adjust it by adding an underscore (prepended?)  to allow it to compile.


2196
Server should compressed responses if the client sent a compressed request9

Currently the ServerCallImpl never implicitly turns on compression, and instead compression has to be enabled via an interceptor, e.g.:
In theory, somewhere around here:
If the client sent a compressed request, the server could default it's compressor to the same compression codec, and return a compressed response.


2197
Consider replacing java.util.logging with SLF4J. Or a custom logger.9

Very few libraries use java.util.logging these days because of all the problems. Netty uses their own logging facade into which you can plug your own implementation. It's not a bad approach, but it's easier to just use slf4j directly.


2198
Failed to load any of the given libraries: [netty-tcnative-linux-aarch_64, netty-tcnative-linux-aarch_64-fedora, netty-tcnative]9

trying to build grpc-java on a 64 bit arm architecture.
ultimate goal is to run tensorflow in this nvidia device, but we need to be grpc-java as a part of the tensorflow installation process.
using the latest version of the source code ...
here is the error that I am getting ...
FAILURE: Build failed with an exception.



2202
Invalid NativePlatform: linux_aarch640

I am trying to build on an arm 64 bit platform.
Following these instructions .
I have successfully built grpc-java
but only by adding skipCodegen=true to gradle.properties.
I have succesfully build protobuf on the platform as well
by following the instructions on the same page.
however, after building protobuf, when I go back I try to build grpc-java without the gradle properties file, I get this error ...
It appears that this code generation plugin is a necessary component to tensorflow.
I need to get tensorflow installed on this machine [nvidia jetson tk1], so I need to find a way to build this plugin.
Any suggestions?


2204
Add server-side example for compression0

We have a client-side example but no server. That's probably the best form of documentation for users to figure out how to use it.


2207
Android HelloWorld example release build is broken0

When trying to send the RPC it crashes with:
After fixing the NPE (caused by calling shutdown() on a null ManagedChannel), then it gracefully fails with:
io.grpc.p: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact
CC @zsurocking


2209
LoadBalancer should not fail wait-for-ready requests when there is an errror0

Currently LoadBalancer would just call TransportManager.InterimTransport.closeWithError(), which fails all requests. We should instead add another method like enterTransientFailure(), which is reversible by exitTrasientFailure() and only kills current and further fail-fast requests.
closeWithError() shall be kept for shutdown, or be renamed to closeWithShutdown().


2211
Improve LoadBalancer API1

Implementing LoadBalancer API at the moment is kinda hard and requires a lot of boiler plate to get you going. I proposed some changes in #2199 to improve this situation and we eventually come to the conclusion that this would you some reworking in core rather than simple wrappers and utility classes.
I'm coping @zhangkun83's and @ejona86 comments from the PR and let's continue design discussion here.
@zhangkun83's comment:
The problems SimpleLoadBalancer is set to solve are:
The handling of interim transports is repeated among all LoadBalancers
The error handling is repeated among most LoadBalancers.
What I would like to see, is a new LoadBalancer interface that solves those problems, instead of fragmenting the API. The idea is to move those common logic into ManagedChannelImpl.
The most important part is LoadBalancerListener, which is implemented by ManagedChannelImpl. It technically defines three states in the LoadBalancer:
Caveat: in the case of sharded load-balancing, the LoadBalancer may be able to serve some requests, but have to fail or hold other requests, because for example, some shards may be unavailable temporarily, but come back online shortly. We either keep createInterimTransport() on TransportManager to let LoadBalancer handle this manually, or tweak the API somehow to make it as nice as the non-sharded case.
I look forward to landing with a new LoadBalancer API after a few iterations with you, before we do any implementation work. Comments and ideas are welcome :)
@ejona86's comment:
I'd just add that PENDING, READY, and ERROR, are analogous to CONNECTING, READY, and TRANSIENT_FAILURE, respectively, in the Channel connectivity semantics (and I might prefer we use those names, but I don't care much). This new LB API also makes the Channel state API (#28) much easier to design since the LB wouldn't need to directly participate (with caveat for the sharded LB case, but I think we punt on that for now).


2212
Will java grpc server close the idle connection in sometime later?1

When client don't send any request over and established connection to server, will server close the connection in sometime later? How to configure java grpc server to enable this behavior? thank you very much!!!


2213
Will java grpc server close the idle connection in sometime later?1

When client don't send any request over and established connection to server, will server close the connection in sometime later? How to configure java grpc server to enable this behavior? thank you very much!!!


2216
Add testing helpers for ClientCall, ServerCall1

With DoNotMock being a thing, we should add some helper classes to the testing package to make them easier to use.


2217
Use a custom Http2HeadersDecoder to avoid copying1

In the meeting today @carl-mastrangelo mentioned that reading headers from the wire and converting between metadata is a major contributor to our allocation profile.
Can't we just use our own Http2HeadersDecoder that instead of DefaultHttp2Headers uses our own Http2Headers implementation, which would just be an adapter for Metadata (wrap around Metadata)? We could thereby avoid copying between Metadata and Http2Headers, but HPACK would directly store to Metadata.
Am I missing something?


2220
Delete deprecated attributes in ServerCall2

No description provided.


2222
Stabilize reflection APIs2

This is jumping the gun a little bit, because we don't yet have reflection APIs, but such APIs can use this issue as they are introduced.


2224
Update to netty 4.1.5.final2

Long story short, there was a bug until 4.1.5.final that would cause issues when running inside Tomcat.


2227
Running grpc server on Android2

Is there an example or implementation of GRPC server (Java/C++) running on Android?
I am following grpc java server example to implement the server i
I keep getting the error io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional server found. Try adding a dependency on the grpc-netty artifact
on executing new GrpcServerTask().execute();
Thanks


2228
Support for server plaintext upgrade2

Looks like this is one of the supported protocol negotiators for clients but not for servers.
I've been trying to set up plaintext GRPC endpoints behind Amazon's new ALB (Application Load Balancer) and it looks like they require an upgradable connection on the backend (sadly, there is no way to configured ALB to assume HTTP/2).
I can try implementing a ProtocolNegotiator myself using Http2ServerUpgradeCodec but wanted to make sure this was feasible first.


2229
https dependencies issue2

When i'm working with grpc-1.0.0 i get the following error:
The type io.netty.handler.ssl.SslContextBuilder cannot be resolved. It is indirectly referenced from required .class files
This problem did not occure when i used grpc-0.15.0
Any solutions ?


2230
Jetty ALPN/NPN has not been properly configured with grpc-1.0.0 on windows only3

I've upgraded grpc java from version 0.15.0 to 1.0.0. now my integration tests - connect real client and server - on windows complain with
Jetty ALPN/NPN has not been properly configured
It works properly on Linux (fedora) but not on Windows.
With version 0.15.0 I was able to run client and server on Windows as well as on Linux and cross connect between Linux and Windows and vice versa.
My Gradle dependencies are:
I start the server like so:
Is there something else I need to consider for this migration?


2232
OOM after a bunch of "thread-local buffers freed"3

I occasionally observe Java runs out of heap space after a sequence of log lines looks like
I think the server is under heavy load when this happens.
It seems like the grpc-default-executor created thousands of threads. Is it normal?
Does anyone know what is going on?


2234
Tracking Issue for NoopClientCall and NoopServerCall being Experimental3

No description provided.


2237
Possible bug in Status code parser3

It seems that a codeValue of 17 would not be greater than the list size of 17, and would explode.


2241
sequential reading is guarantee? when is using client stream service. 4

Server reads list of ProfileDataRequest, it's the same sequence of server and client? When client use only one thread to send ProfileDataRequest.


2243
Detect zero-message response to unary request on server-side4

It appears that a server can respond OK to a unary RPC without any detection on the server-side. It'd be nice to throw an exception if close(OK) is called without first sending a message for a UNARY response, although that may be against our API stability. At the very least, we should convert the OK into a Status saying the server is broken.
As reported in grpc/grpc#8010.


2246
Deadlock with TransportSet4

Hello,
I was testing Grpc with RoundRobinLB and a custom NameResolver when this deadlock happened:
Found one Java-level deadlock:
I don't know if it may relate to my own code or if the issue is on grpc side.


2247
OutOfDirectMemoryError4

Copied from the C based grpc repository
grpc/grpc#7938
Basically it seems that grpc will throw OutOfDirectMemoryError if you send enough messages over  a single stream. I am probably just using it wrong or it was not meant for such use case. If anyone could explain this, that'd be great.
The code to reproduce the error: https
To execute, run GameServer and then GameClient, when the client connects the server attemps to send 3M messages, but eventually crashes.


2254
Ping implementation in Netty doesn't handle all error cases.5

The field NettyClientHandler.ping is used to determine whether a PING acknowledgement is outstanding, as we only allow one PING at a time.
The logic to reset NettyClientHandler.ping handles the case where the write of the frame fails, we receive a PING ack or the channel gets closed.
We need to additionally handle the case in which the write of the PING frame succeeds, the channel remains active and we don't get any valid PING acknowledgement back. This error case may happen for example due to a buggy implementation of the remote endpoint or even packet corruption.  I think we should ensure users that the PingCallback is called eventually.
A possible solution may be an automatic re-send of PINGs that don't receive a matching PING ack within some timeout period.


2256
compile grpc-java is terrible, can you release a binary zip?5

No description provided.


2257
Cache higher order objects in HPACK's dynamic table.5

In #2217, @carl-mastrangelo had the idea to cache high order objects in HPACK's dynamic table. Carl mentioned the example of instead of parsing a jwt token on every request, we could cache an object that already contains the parsed representation, reducing garbage creation and parsing overhead.
Additionally, since Metadata uses String for names, we could for header names cache the String representation.
This would mostly require changes to Netty's HPACK implementation. We need some way to attach additional headers. I suggested to modify the StaticTable, Decoder and HuffmanDecoder to take a HeaderLiteralFactory as an optional ctor argument.
Netty's default implementation would simply return AsciiString objects. The gRPC implementation, could use String objects for keys. For values, we could special case certain header names and return holder objects e.g.
Risks
The decoder has no power over what gets cached and what doesn't - it's up to the encoder. We might introduce overhead for headers that don't get cached. Also, a (name, value) is treated as one header entry in HPACK's dynamic table. Say if a users use custom headers, with lots of different values, then caching in the dynamic table might not be very effective, as entries might get evicted before they can be reused (if ever).


2260
Many tcp ports opened by client and by server on Windows6

Starting my grpc-server or grpc-client on Windows causes netstat to show lots of established tcp connections. Both endpoints of those connections are in the same process. This is true for the server and for the client.
I've created an isolated grpc echo client/server program which doesn't do anything else than send an echo request/response via grpc-java. It behaves the same. The effected versions are
There seems to be no difference between TLS or insecure mode.
I see this behavior only on Windows (version: Server 2008 R2 Standard). On Linux everything is ok.
I use the same distribution on both platforms built by gradle.
Is Grpc though fully functional or does this cause any harm?
The integration test suite passes successfully but I'm uncertain if this would cause any trouble.
Is there some way to avoid this behavior?


2263
Update examples to use Executor6

Our hello world examples don't show the right way to create a server.   Fix them


2264
Implement HTTP→gRPC status code mapping6

As defined in grpc/grpc#4955. Please wait until PR is in before merging the code changes, although the PR has received general agreement ("but it's not official until it's official").
This is important to return useful gRPC status codes when proxies generate errors.


2266
Error opening zip file or JAR manifest missing when using qps_client / openloop_client6

Steps to reproduce:
agent library failed to init: instrument
Basically I think you should just comment the DEFAULT_JVM_OPTS.


2267
An exception occurred when I use maven plugin, Why?6

maven logs:


2268
When I use grpc 1.0.0, why javax/annotation package is in my jar?6

And my jar in target directory has package javax/annotation? Why is this happending?
I provides my pom.xml and jar as attach files for you.
And as my pom define, I relocation io.netty, io.goole, io.grpc. Is this OK? Will Grpc works?


2270
OutOfMemoryError getting swallowed by SerializingExecutor7

My application throws OutOfMemoryError and got swallowed by following code,
I hope to handle OutOfMemoryError in my default uncaught exception handler, but it is not happening.
Is this a bug?


2273
Investigate if Netty can be used as a server on Android 7

Warning: Running a server on android is not officially supported on Android by the gRPC Java team!
It may be possible to run a gRPC Java server on android in a limited sense, but we don't do anything to restrict the possibility.  There appears to be a small number of users who do want to run a server for reasons that may be valid.  This issue is to track both interest from the community, as well as possibly being a list of known issues.
Netty has not been optimized for Android.  gRPC has not been optimized to be a server on android.


2276
TransportSet garbage collection7

Today we only have logic for creating TransportSets. A TransportSet may be no longer used if NameResolver or LoadBalancer has decided to switch away from that address, and ManagedChannelImpl should clean it up.
Probably TransportSet should just shutdown and move itself to ManagedChannelImpl.decommissionedTransports when it's IDLE.


2278
QPS client using much more memory than server.7

I did some benchmarking using the qps_client and qps_server. Zero bytes payload. I enabled verbose:gc.
When running with 8 channels and 250 concurrent RPCs. On the client, after a young GC our live heap is ~290MiB. The GC logs have a very low volatility +/- 1MiB.
Doubling the concurrent streams to 500, on the client, the live heap more than doubles to 560MiB.
On the server it increases to ~140MiB. Doubling the concurrent streams to 1000, on the client, the live heap again doubles to ~1.1GB and on the server it increases to ~170MB.
I then thought it might be due to the client having to keep stream state  around much longer (until the server responds) and so I enabled streaming rpcs (with 8 channels, 1000 concurrent). Live heap on the client stays the same, on the server it drops to ~30MiB. The used heap on the client is about 2.3GiB before the GC, and 1.1GiB after. The used heap on the server is about 1.3GB before the GC and 30MiB after. So it seems like we keep an additional GiB of data around on the client (or 130KiB per stream).
That data seems to be allocated at the beginning. The first 3 GCs and the last GC on the client
The increased memory usage on the client is not due to histograms, cause I commented out the line recording latencies.
I wonder why that is? Is it possibly a small memory leak per RPC? Is that specific to the QPS client or gRPC? Any ideas?


2279
Http2ChannelClosedException instead of actual failure7

This is similar to #1330, but for when the stream was never actually sent because of MAX_CONCURRENT_STREAMS.
In this case, we do know more information: the stream was never sent, so it is safe to retry. While that information is useful internally, the user probably would like to know the cause of connection closure. (In this case, I think it was a TCP timeout, because the network was flaky.) We should probably just swap out the exception in the same way we do with ClosedChannelException. At the very least, it should be UNAVAILABLE instead of INTERNAL.
This was seen in grpc-java v1.0.0:
CC @buchgr, any thoughts?


2280
Per request logging params in GRPC server8

We use a logging framework that uses thread local map to store parameters for logging templates like request id, client ip etc.
Params are usually set and reset in some request filter (interceptor), with the assumption that the same thread is going to be used to handle the request.
From what I observe, GRPC server thread that handles request might be different from the thread that runs interceptor.
Is there any way to implement per-request logging parameter in GRPC server?


2281
Add injection points to generated code8

Protobuf has a concept of injection points that make it possible to extend generated classes with additional methods, implements interfaces, and others.  This has been useful for example to generate setters which take an Optional Java 8 in addition to the standard methods generated when a user uses google.protobuf.StringValue or Int64Value.
A similar feature would be very useful in the generated gRPC code to allow for extension to add interaction models for clients and servers which are not appropriate in core.  For example, I would like to generate RxJava interfaces for client and server, and I'd like them to live in the same area as the other clients.
An example of the type of line in protoc generated files now that allows for this is
It would be helpful if there was a class scope insertion point for adding additional client and server interactions models.


2282
client set RoundRobinLoadBalancer fail8

that  RoundRobinLoadBalancerFactory is fail .
debug the  code, discover  class TransportSet method obtainActiveTransport have a problem
the savedTransport frist is null , the second time  is not null, no execute find activeTransport.


2283
Can´t build HelloWorld Android project8

After installing java-gRPC as ReadMe states, I tried to build the android project HelloWord but the build fails:
FAILURE: Build failed with an exception.


2284
Census stats recording with InProcessTransport8

Message sizes are counted in MessageFramer and MessageDeframer, which InProcessTransport doesn't use. Right now we simply do not record metrics for InProcessTransport at all. This may turn out to be needed, so I use this issue to track this missing feature.


2285
Stats for UNIMPLEMENTED methods8

The way that gRPC uses Census to collect metrics, is that each RPC creates a record, which is tagged with the method name and the Status.
If Census keeps an in-memory store that maps (Method, Status) to metrics (counts, message sizes etc), which is useful for on-line querying, the key space on the server could be blown up by misbehaving (or malicious) clients that sends a lot of distinct unimplemented method names to the server.
If this is a valid concern, we should probably treat UNIMPLEMENTED status in a special way.
cc @dinooliva


2289
Grpc server uses more memory than -Xmx8

Sometimes Grpc server can use (couple of Gb) more memory than JVM max heap size. Does anyone know how could that happen? What is the recommended Jvm heap size configuration for Grpc servers?


2292
Implement channel-state API in ManagedChannelImpl9

The API is added by #2286, but is implemented (will throw exception) in ManagedChannelImpl.


2296
Client side NPE when sending large number of concurrent requests9

Both server and client use GRPC 1.0.
Client log:
Server log:


2297
NettyFlowControlTest is flaky9

Happened few times for me, in CI as well as locally:


2298
grpc-all on Maven repository does not contain anything9

Since version 0.14 the grpc-all JAR on Maven.org only contains a Manifest but no actual code. 0.13.2 is the last version still OK.


2299
More logs in channel9

We have insufficient logging in the channel layer. In particular:
Name resolution success and failures. Although failures are plumbed to application when it makes a call.
ManagedChannelImpl goes into and out of idleness
Whether they should be INFO or FINE are not clear, but at least they should start as FINE.


2300
Generated OuterClass has a lot of incompatibilities !0

Hi , I am new to gRPC / protobuf , and facing a first step problem...
This is my first .proto file :
It is simple , but the generated EchoServiceOuterClass.java has a lot of incompatibilities :
For example :
This is my [ partial ] pom.xml
The grpc-netty , grpc-protobuf , grpc-stub are all of version of 1.0.0
Where goes wrong here ?
Thanks.
I am new to gRPC / protobuf , sorry I don't know whether the problem is related to grpc-java project or not.


2301
Define the API for LoadBalancer to add headers0

GRPCLB needs this to add the per-client LB token to every RPC.
Metadata injection is usually done in interceptors, but LoadBalancer cannot use interceptor, because it returns transports, not channels. Since LoadBalancer doesn't need the full power of interceptor anyway, we may just figure out an API that allows LoadBalancer to change headers.


2302
LoasdBalancer: the affinity keys are not used when completing the delayed (interim) transports0




2305
Exception thrown from `OnReadyHandler` sometimes does not close stream0

It seems like there should be a try-catch block around this line:


2307
ManagedChannelBuilder doesn't have maxMessageSize0

This makes it more annoying to override the maxMessageSize, because you have to know which implementation you are using.
Note that if you specify the actual implementation, this is easy, but the problem is needing to specify the implementation.


2313
Guarantees around using responseObserver in multiple threads1

I was writing a service which takes a stream of Events, and returns a stream of Acks.  In doing so, the Acks can trigger from multiple threads after I've done work and published them to downstream systems.  After sending a bit of load I would get errors that sendHeaders had already been called, and I realized that ServerCalls here httpsis performing a check to see if headers are sent that is not thread safe.
I wanted to get a bit more insight into the expectations for a service which is sending back responses on multiple threads.  Should I just do
or should there be more synchronization in the ServerCalls code?  I suspect this was a deliberate choice not to support multi-threaded usage since cancelled is volatile while sentHeaders isn't.
Thanks!


2316
Bump protobuf to 3.1.01




2317
Tracking Issue for FakeClock APIs being Experimental1

FakeClock


2320
Client certificate not sent2

Hi,
I'm trying to use gRPC from Java (as a client) to communicate with a gRPC Node.js server.
I am trying to get TLS mutual auth between the two, but I can't seem to get the Java client to send its client cert. I've verified via packet capture that the Node server is requesting a client cert.
mcb.overrideAuthority("localhost");
I am dynamically generating CA certs and leaf certs under them to bind the communication.
Due to this, I'm using the keyManager(PrivateKey,X509Certificate...) overload, and the private key is generated from a KeyPairGenerator.getInstance("RSA") object. I'm currently generating two chains (one for the server's cert, and one for the client cert) and verification of the server cert works fine (connections work when I disable the client cert requirement on the Node server).
The + currently resolves to 1.1.33.Fork23. I've found that the 1.1.33.Fork19 version specified in the documentation results in an exception on Linux (and OS X) caused by:
Any ideas on what might be causing this behavior or what I'm doing wrong?


2321
SO_BACKLOG 128 enough?2

In NettyServer there is a hardcode
SO_BACKLOG = 128 is enough for every situation?


2323
ErrorProne compile failure on v1.0.12

This is for tag v1.0.1 -- it may or may not be fixed @Head


2324
parseDelimitedFrom behavior has changed between 2.5 and 3.12

parseDelimitedFrom didn't check limit in 2.5. In 3.1 it does throwing InvalidProtocolBufferException if we exceed the hard-coded max of 64MB.
This is issue is a bit like "Remove proto size restriction when parsing protos. #836" but parseDelimitedFrom only takes InputStream so we can't set max size.
64MB is large but previous there was no limit. There is a sort of a workaround by doing parsePartialFrom and creating a CodedInputStream probably set to this method but means creating a new object every time (or reading to see if > 64MB and then making new CIS...)
Let us know how you think best to address and we can put up a patch.
Thanks.


2326
Build grpc-java from a new arch---mips64el2

I want to build bazel, which has dependencies protoc and protoc-gen-grpc-java. So, I need to build grpc-java. I got grpc-java from github and the reference README.md run the following command.
My error as follows, Any one can tell me how to work around? I will port to a new platform --mips64el
Detecting the operating system and CPU architecture
What went wrong:
A problem occurred evaluating root project 'grpc'.
Try:
Run with --stacktrace option to get the stack trace. Run with --debug option to get more log output.


2327
Error on run example step "./gradlew installDist"2

Due to documentation  http
step number 2 does not work for me, get a compile errors about illegal characters... like RouteGuideServer.java line 299 this line has greece characters.
to resolve this issue I had to add set DEFAULT_JVM_OPTS="-Dfile.encoding=utf-8"
into gradlew.bat file and execute command ./gradlew installDist againe. Can it be resolve in git?


2328
io.grpc.okhttp.OkHttpTransportTest > newStream_duringShutdown is flaky2

We are working on  s390x platform and facing below test failure while building gRPC-java master.
We are using protoc v3.0.2 and v3.0.0-javalite.


2335
AbstractTransportTest.openStreamPreventsTermination is flaky on Windows3

Seen in https:


2337
Client-streaming call is hanging if service impl throws unexpected runtime exception3

Client-streaming call is hanging if service implementation for the requestStreamObserver#onNext callback throws an unexpected runtime exception.


2338
Grpc-Java best practices3

Developers may run into similar issues when started using Grpc. Solutions to most of the issue are  scattered around the mailing list and github issues, like custom server executor, stream rcp flow control, server/client request intercepting, error handling, ssl, testing, etc.
I think it would be valuable to document the best practices for Grpc-Java.


2341
GrpcHttp2RequestHeaders and GrpcHttp2OutboundHeaders don't support toString4

This causes a regression in debugging. Instead of seeing headers when enabling the Http2 logging in Netty, you get something like:
It looks like Itr has toString, but not the headers itself. The wrong class probably got the toString method.


2344
io.grpc.okhttp.OkHttpTransportTest > serverNotListening FAILED4

Seen at https


2345
ManagedChannelBuilder and URI path routing4

This may be a silly question but I'm having a hard time figuring out what's going on. I have a couple of gRPC servers sitting behind a load balancer and I have rules set up to route requests based on the path. i.e. myloadbalancerIPaddress:8000/service/serviceA would route to a particular backend server. And on the client side this is what I'm doing:
It seems like the request is always made against ipaddress:8000 without the specified path. Am I doing something wrong here?


2346
issue with progaurd minifyEnabled4

Hello,
First of all, thank you guys for awesome work. Currently, I am using grpc on my android app and it crashes with below trace when minifyEnabled is true in gradle configuration. Is there any specific progaurd rule/ config for this ?


2348
add support Stetho's interceptor for OkHttp4

No description provided.


2350
Include SETTINGS_MAX_HEADER_LIST_SIZE in initial SETTINGS.5

We currently don't send SETTINGS_MAX_HEADER_LIST_SIZE as part of the initial SETTINGS frame, although we enforce it on the decoder. This is valid as of the H2 spec
For any given request, a lower limit than what is advertised MAY be enforced. The initial value of this setting is unlimited.
However, we would argue that we should still include it in the initial SETTINGS frame, cause why not? If both endpoints are gRPC Java, it would also give us better error messages, as then the local encoder would enforce the remote decode limit [1]. However, we can't currently do that cause it seems like a bug in Netty that the encoder throws a connection error and not a stream error [1], bringing down the whole connection, while only the stream should fail. I ll open a issue/PR in Netty.


2352
How to generate .java files from .proto files in command line using protoc.5

Hi,
Here is my problem, I'm trying to compile my .proto files into .java files to implement it into some android projects. I don't want to compile it using gradle or maven because I don't want to compile my .proto file with my whole projects. I just want to compile it using protoc like how I'm doing for objective-c or nodeJS, but I didn't find the Javalite plugin for grpc.
Do you know any ways to do it ?
Thank you.


2354
generated java stub is not mockable 5

when we upgrade to grpc 1.0.0, the generated java stub is a static final class without implement any interface. as a result it's impossible to use mockito to mock the stub in unit test to verify the business logic without communicating with the real grpc server.


2357
ServiceDescriptor lacks validation5

ServerServiceDefinition has validation, but it seems that should actually be in ServiceDescriptor (moved or copied). The method names should match the service name, and there shouldn't be two methods with the same name.


2358
ServerBuilder defaults affected by Netty memory leak5

GRPC 1.0.0 and 1.0.1 are both based on Netty 4.1.3.Final. This version of Netty is affected by a memory leak bug referenced and fixed in the following commit:
The vanilla GRPC ServerBuilder uses a Executors.newCachedThreadPool() executor that expands and contracts based on the load. Any thread that is cleaned up leaks a whole lot of Netty cached data. The workaround is to specify your own Executor that reuses the threads and doesn't recycle them, something like:


2359
The type io.grpc.Deadline cannot be resolved. It is indirectly referenced from required .class files5

grpc-all-1.0.0 and grpc-all-1.0.1 are build as blank jars hence it could not resolve to its reference.
Any pointers how to resolve this?


2361
bindService and cglib6

aService is a cglib proxy class, then I add the service:
serverBuilder.addService(aService.bindService()).
aService.bindService(),the returned ServerServiceDefinition is not what I want because of "this"
what should I do?


2363
Handle java.lang.IllegalStateException properly6

I'm currently using gRPC on Android, and it crashes due to the following exceptions:
Case 2:
Is there any way to handle these exceptions before crashing?
Thanks in advance.


2364
NettyTransportTest.frameAfterRstStreamShouldNotBreakClientChannel flaky6

Failed on Travis-CI for OS X (https):


2370
Provide channel pooling7

The client libraries generated by https: currently create a new channel for every API wrapper object, which is expensive and wasteful. For the benefit of users, we need channel pooling support so that startup time and resource usage is minimized, regardless of how many API wrapper objects are created. The alternatives require more work for users (which is undesirable) or implementing pooling support in the API wrapper layer, which doesn't make sense if grpc is a better place to implement it.


2371
How to use load balancer in gRPC V1.0?7

I see on the gRPC home page said, V 1.0 already has load balancing capabilities,but did not find any relevant examples.Will be in gRPC V1.0 of how to use load balancing?
Where are the loac balancing examples?
Thanks!


2372
Java QpsWorker produces many exceptions7

We've recently enabled printing output from QPS workers in the benchmark suite, but the logs are 93MB big, which makes them completely useless.
It seems that it's mostly because java worker is super chatty (tons of exceptions get printed to the console)


2373
How can I config timeout7

How can I config to let server timeout when a  invoked take a long time, just like HTTP 504?


2375
Use provider's class loader instead of context class loader7

In a multi classloader application it may easily turn out Thread#contextClassloader contains something unrelated to a classloader that indeed loads grpc classes.
It's better to check current classloader for ServerProvider.class too.
I use JRE 1.8.0_66, macos 10.12


2377
Census Race7

Read of size 4 at 0x7f00465dfbcc by thread T123:
cc: @adriancole @zhangkun83


2379
OutOfDirectMemoryError in fast stream objects generation7

I send a message to a bidi-stream method from a server to a client.
Each message contains 1kb of bytes + several fields.
Server implementation sends 2GB of such messages from a loop without delay
Client consumes messages without delay too.
Currently it fails on the server with a netty error
Quickly checked the code. Not sure if it is able to limit sending buffer by blocking a StreamObserver#onNext calls once sending buffer is full.


2387
client can not connect to server when server has more than 61000 connections.8

I want to test grpc performance, and I have 4 centos6.5, and update configure to allow 2000000 tcp connections.
And i use example of "route_guide" to test, just change logic of "func (s *routeGuideServer) ListFeatures" make it not return and send message to stream each 10 seconds on server side.
It's works well when connect 60000 clients, and all clients can receive message from server.
But i got error like: "2016/10/28 10:50:08 &{0xc8648f4b40}.ListFeatures(_) = _, rpc error: code = 14 desc = grpc: the connection is unavailable".
and some of others client got error like: "2016/10/28 10:50:08 grpc: addrConn.resetTransport failed to create client transport: connection error: desc = "transport: dial tcp 10.204.10.36:10000: getsockopt: connection timed out"; Reconnecting to {10.204.10.36:10000 }"
I want to know is this a system configure problem or just a bug?


2388
New deadlock in TransportSet and GrpcTimer8

Hi,
I have encountered a new deadlock in TransportSet. I'm running under v1.0 with #2258 cherry-picked.


2389
switch to a logging library from JUL8

Currently JUL logger is used. It cannot be controlled well in multi-classloader applications. For example Servlet API containers.
From a web application point of view it's a hacky to configure JUL explicitly from there. The best way to configure logging in that case is to isolate if from container logging (and possible other applications).
Isolation is implemented as easy as including logger libraries into application package. This makes a container to load logger classes along with the app, and thus all logger configuration that is done on application level is not shared to the whole JVM.
This trick does not work well with java.util.logging (JUL). It is a part of JVM, so one cannot load those classes on application-level classloader. So any attempt to configure JUL from application will make this visible to the whole JVM and vice versa.
Switching to any Logging library (which in not a part of JRE) will solve the issue and adds more flexibility for library users. Moreover, it's likely such library is already in classpath of most apps.
For example, slf4j-api is the minimalistic logging library that allows to use any logging backend


2390
Does gRPC-java supports http2-stream-priority?9

If yes, How to use it? Is there an example?


2391
Service account to JWT token upgrade fails when no scopes provided9

Apologies for the poor wording - I don't know enough about the details to term this properly.
Here's a small piece of code using the Monitoring library at https
This is due to the scopes not being configured in the generated code - we're fixing that side of things, but we gather that gRPC design should allow service accounts to work without scopes being configured, as part of using JWT tokens.
The same failure occurs in C#, which is obviously a separate implementation - I'll be filing a separate bug for that.


2393
Create issue template9

It should probably ask for version, JVM, stack trace, error details, etc. It can probably just move part of CONTRIBUTING into it.
To avoid polluting root folder even more, probably want to use the .github/ISSUE_TEMPLATE variety.


2394
Error on gradlew build9

I am getting the attached error on building the examples. I have gradle.properties file in grpc-java\examples folder that has one property , which is skipCodegen=true


2395
Avoiding unbalanced backends with server-side load balancing9

One of our use cases is a server-side application which must connect to a pool of backends through a layer 4 load balancer.  By default grpc-java opens only a single, long-lived channel to the backend.  So if we have 4 clients with 4 backends, the best distribution is a single connection from each client to each backend.
There are two problems with this: 1) each client directly determines the load placed on its backend, and 2) during rolling backend deployments, the connections are redistributed to all backends except the last one deployed.
To work around these issues, I attempted to add client-side load balancing with a list of identical backend endpoints.  After a lot of poking (and finally understanding the existing DnsNameResolver, etc), I realized this wasn't going to work.  Finally I settled on a custom pool of client channels that I use in a round-robin fashion.
Unfortunately even this is imperfect because I need must limit the lifetime of a channel to avoid backends becoming unbalanced for extended periods after backend re-deployment.  Is an interceptor the best (only?) way to achieve a maximum channel lifetime?
@zhangkun83  (I mentioned this issue briefly on IRC a couple of months ago).


2397
Error converting bytecode to dex: Cause: Dex cannot parse version 52 byte code.9

When I'm trying to build an APK for my project, I encountered the following error.
This is caused by library dependencies that have been compiled using Java 8 or above.
If you are using the 'java' gradle plugin in a library submodule add
to that submodule's build.gradle file.
Seems that some of the libraries are getting compiled into Java 8 bytecode, which won't be compatible with current javac. I had to use jack with the new bytecode which takes minutes on a debug build and it is very annoying.
My app/build.gradle is set up according to the one in protobuf-gradle-plugin:


2398
Re-introduce service interfaces9

Stub interfaces were generated prior to gRPC 1.0. It was since removed and now we are forced to extend a base class.
Interface is the contract for the service - it'd be great to generate the interface as well. If keeping the base abstract class, the base abstract class should implement the interface as well.


2400
Run a grpc application not working0

According to link http, I must follow the below steps to execute a hello world sample client and server.
From the examples directory:
I am using Windows machine , so gradlew installDist command works for me. But after that, there is no build/install/examples/bin folder structure to execute hello-world-server.
There is a hello-world-server in examples\build\tmp folder, but that too gives following error
Error: Could not find or load main class io.grpc.examples.helloworld.HelloWorldServer
Please help


2406
benchmarks spend lots of time parking and unparking0

Running the benchmarks with profiling turned on shows that ForkJoinPool is spending a lot of time parking and unparking itself.


2408
Jetty ALPN/NPN has not been properly configured0

when I start server on windows,it prints "Jetty ALPN/NPN has not been properly configured",But it works properly on Linux and MacOs.


2409
BlockingStub returns iterator that cannot be closed0

I use a blocking sub for a method that returns a stream of messages. The return type of it is Iterator<T>. It turns out I cannot make grpc client to end the request (e.g. because of client failure). There are a number of cases where an open connection may stuck in client because of that
The implementation uses
call, which in turn uses BlockingResponseStream. There is no way to reach the io.grpc.ClientCall#cancel method form the Iterator. Could be nice to wrap an Iterator or make it implement an interface in the similar way as done with ServerStreamObserver/ClientStreamObserver
The other approach could be to implement AutoCloseable from Java with this iterator
There is also a comment on the Iterator implementation class


2411
how to use serverIntercepter1

how to use serverIntercepter,I want to intercept some of the methods of a service


2412
Does gRPC support push notifications from the server to the client1

Does gRPC support push notifications from the server to the client? Client to establish a connection, registration, if the server has to trigger events to the client, through the channel to find the client to send the connection, and then push the message to the specified client.
the example of a stream response: StreamObserver, if I do not call onCompleted method, whether this link can continue to push the message? How to get the designated client channel?


2414
OkHttpChannelBuilder doesn't work 1

in android high level platform ,OkHttpChannelBuilder works fine, but in android level 17 platform , it logs out :
is the everyone meet the same problem ? if you know that, please tell me , thank you guys !


2415
using java.util.logging.Logger may cause ClassNotFound in javaagent for JBoss1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?
I am developing a javaagent project, as a instrument of JBoss 8.0 .
I use protobuf 3.0.0, the manifest info is following:
As we known, LogManager is necessary for java.util.logging.* . The static block of LogManager is using System.getProperty("java.util.logging.manager") to init.
In JBOSS, it will set java.util.logging.manager to a JBOSS class. So, when I run code in premain, I can't access to the LogManager, it trigger ClassNotFound.
I recommend not to use java.util.logging directly. I think the better way to create a LogResolver in grpc-java. LogResolver will only choose java.util.logging as default logger, and provide api to set other implements.
And the most important, LogResolver should not trigger ClassLoader to load java.util.logging.
Does this seem good to you?
If you are agree with me, I want to send a pull request to fix this problem. And we discuss further in that rp?


2418
error: incompatible types: ServiceDescriptor cannot be converted to String1




2423
Provide access to Method options in ServerInterceptor2

I'd like to be able to see the options on the method being called in a ServerInterceptor interceptCall method.
Is this currently possible, or are there plans to provide this?
Currently, a io.grpc.MethodDescriptor is available from the ServerCall.  This doesn't have the option data though.  I need a com.google.protobuf.Descriptors.MethodDescriptor, which I can't seem to easily access.
My use case:  I am writing an interceptor that provides user authentication.  I would like to add a custom option to the rpc methods in the proto files to indicate if a method requires authentication or not.


2424
gRPC stream client OutOfDirectMemoryError, when send ton of data2

This single thread code send ton of data to server,  casue OutOfDirectMemoryError. more discussion detail, see the ref issue #2247


2425
Android examples don't obey Min API level2

Either the min level needs to be raised, or the usage removed.


2428
Problem with interceptor2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
openjdk version "1.8.0_111"
What did you do?
If possible, provide a recipe for reproducing the error.
Adding an interceptor on the server side of the app gives me:
java.lang.NoClassDefFoundError: io/netty/handler/codec/Headers
If I add the dependency: io.netty:nett-codec:4.1.3-Final to my app, then this happens on the client side after the remote procedure is called:


2429
Proper handling of server stubs that throw?2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
throw new RuntimeException() in any server implementation of an rpc defined in your proto
What did you expect to see?
client gets UNKNOWN, close or cancel to eventually be called in the interceptor chain on the server
What did you see instead?
client gets UNKNOWN, and my interceptor chain stops executing in the halfClose (for Unary requests/responses).
I'm wondering, if some interceptors want/need to do cleanup to do things like emit metrics, modify logging MDC in thread locals and such, what should I expect here and be doing?  Is it reasonable to have an exception mapping interceptor that is the last one called right before the actual implementation and if it catches any exception translate it into a close(Status.UNKNOWN, new Metadata()) ?  Should I instead have every interceptor catch exceptions in onHalfClose and onMessage and then bubble it after they do their personal cleanup?  We had up to this point kept our cleanup logic isolated to close(...) and onCancel().


2432
a better way to convert to a Plain Ordinary Java Object3

it is a little boring,is there any better way.


2436
error:  UNAVAILABLE  StatusRuntimeException3

Hi,
I add grpc to my android project , But I meet some UNAVAILABLE problems.  I got some Message from the Excepiton  :   statusCode=14  , and  msg : "Channel shutdownNow invoked"  or  "End of stream or IOException".  It is  a bug  or  something would cause this  problem ? This Exception  is  not alway happen.  Looking forward to your reply. Thank you.


2437
ServerServiceDefinition.addMethod fails incorrectly 3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
java version "1.8.0_91"
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
This works without problem, the server starts up
What did you see instead?
An error that says the following:
The reason for this is rather interesting, here is the code that generates this in addMethod:
The problem is that what your outputting as the comparison is not what is actually being compared.  The "extractFullServiceName" method performs the following operation:
Which normalizes in some weird way the method name, but this only happens in the above code to the MethodDescriptor, but not to the serviceName, this leads to a mismatch, and then you print out a wrong mismatch as well.  This is broken.  The other problem, is that even if you passed in just "mypage" for both values, the noramalization results in an empty string while the other one has a full string, and thus the test fails again.


2440
Remove RoundRobinLoadBalancerFactory access to RoundRobinServerList4

io.grpc has been removing references to io.grpc.internal for some time now.  The last of these appears to be RoundRobinLoadBalancerFactory which imports from io.grpc.internal.RoundRobinServerList
This makes it hard to separate internal details from public interface.  We should remove it.
cc: @zhangkun83


2444
Non-determinism when using InProcessTransport with direct executors4

What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8.0_101
What did you do?
I am attempting to write unit tests for RPC systems without mocking stubs, which would be lovely if it worked. Recent discussions (e.g. here, 1.0.1 release notes, this example) suggest this is the new done thing and is supposed to work. To this end I am running an InProcessServer and calling it over an InProcessChannel with both ends using a DirectExecutor.
What did you expect to see?
The 1.0.1 release notes imply that this is now deterministic (after the removal of the grpc-ready thread pool, which was causing issues for me before), so I expected to see determinism in my unit test, and for the server handler to be called on the same thread that made the stub method call. The RPC method is a client-side streaming RPC, but I don't know if that is relevant.
What did you see instead?
The unit test is not deterministic, since the service handler seems to end up being called on a grpc-timer thread provided by the ScheduledExecutorService created by GrpcUtil.TIMER_SERVICE. The task that causes the call is  the NameResolverStartTask in ManagedChannelImpl, and there appears to be no way to provide an alternative timer service.
See ManagedChannelImpl.java line 307.
Am I doing something wrong? Is there a workaround? It seems like doing the name resolution work on the ManagedChannelImpl's user-provided executor rather than its scheduledExecutor might fix it, but I don't know if there's some reason it's not done that way.


2445
A memory leak of Recycler$WeakOrderQueue4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0 and 1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
A huge data send from client, use gprc-java async service. Service define is like this:
What did you expect to see?
run and send with high performance.
What did you see instead?
A memory leak of Recycler$WeakOrderQueue
@ejona86, a memory leak occurs in my app, a memory analysis is following:
The leak point is very obvious. At the same time, I found too many grpc-default-executors is running, thousands of it.
And I have found #2358 seems to match my issue. But the solution is not very useful, you said should update netty to 4.1.6 and the release is in grpc 1.1 or next 1.0.x , which is not available now.
Is their any solutions? Or can you release hotfix version for 1.0.1, such as 1.0.1.1?
It's a very urgent and mortal issue in my product env.


2446
Generate interface for every service action4

The generated service stubs evolved quite a lot in past few months and I've noticed that we removed service interface in favor of having just an abstract base class, it was indeed redundant and probably not very useful (I don't know if it was solve factor that led to removing it, if not please correct me).
While the per-service interface in the presence of equivalent abstract class might not provide a lot of value (in the context of generated services) I'd like to propose generating per-action interfaces which would be implemented by the base abstract service.
The value of per-action interfaces is that it would allow users to easily build custom service definitions which then would allow custom integrations for frameworks where single action is represented by class (as opposed to one class implementing all actions). This approach is used in many custom frameworks which relay heavily on dependency injection and the main benefit it provides is that in order to test single action, you don't need to provide dependencies for every action of a given service.
I'm open to work on implementation if we reach consensus. The change will be additive and won't break any existing APIs or implementations.


2453
Threading of StatsTraceContext5

StatsTraceContext assumes non-thread-safety, which is fine as long as the RPC is closed by the application through the ClientCall/ServerCall interface, which are also not thread-safe.
However, if the RPC is not closed by the application, but either cancelled by the other side, or closed by transport due to errors, which will call callEnded() from the transport thread which is not synchronized with  the application thread. As the application may not be notified about the closure in time, it may still trying to send messages, resulting in wireBytesSent() etc being called after callEnded(), which would trigger a check failure. There is also a data race on the counter fields as wireBytesSent() etc write them and callEnded() reads them from different threads without synchronization.
We will remove the preconditions checks from writeBytesSent() etc. For the data race, some kind of synchronization would be required, maybe atomics? @ejona86


2457
Http2NettyTest.exchangeMetadataStreamingCall is flaky5




2458
Build with Bazel5

Would be great to be able to build grpc-java with Bazel.  It looks like there may some ongoing internal efforts to do this.  Any comment on the scope/challenge of this?  Any help needed from the community?


2462
Context.Storage is experimental6

This is the tracking issue that will be closed once Context.Storage API exits experimental status.


2463
How can I use OpenTracing api in grpc?6

I am a member of OpenTracing org. I have known gRPC has supported OT spec.
Where is the doc, provide how I can set tracer to gRPC, or other ways?


2465
Netty  proxy request grpc service error6

Use  netty  proxy request grpc service  , there  is  error
why?


2470
reverse proxy7

imagine there are 10k grpc-clients, they established 10k http2 connections(TCP-connections) with the http2 reverse proxy; then http2 reverse proxy create 10k http2 connections(TCP-connections) to the origin(backend) server.
Is it possible to reduce the 10k connections between proxy and origin(backend) server?
for example, can a connection pool be used in reverse proxy to reduce connections with backend server?


2471
What is the correct way to confirm send is complete? 7

onCompleted means server have proccessed, correct?
My stub is like this
this.spanStorageStub = SpanStorageServiceGrpc.newStub(channel);
Will onError be called when network unconnected? And when unconnected occurs, wil stub reconnect?
I can not found this demo call to show these features for GRPC.
Can anyone confirm for me?


2472
Add toString to descriptors7

MethodDescriptor, specifically, but it could be helpful for others as well, like ServiceDescriptor.


2474
when will gRPC server create a new stream to client?7

when will gRPC server create a new stream to client?


2478
error: UNAVAILABLE StatusRuntimeException:"End of stream or IOException"7

No description provided.


2480
Proto reflection service: Optimize handling of dynamic services8

The initial proto reflection service (#2386) reloads all proto file descriptors for every request. This was done to avoid checking for any service changes within a mutable fallback registry, but should be optimized to avoid re-processing unchanged services.
This likely requires a minor modification in core to enable the reflection service to distinguish between dynamic and static services.


2483
Flaky OkHttpTransportTest8




2484
Listen to channel state changes on Android8

It's more of a question than an issue. I can't find any methods to listen to connection state changes. Is there any way to do this on the client side? I'm using protobuf-lite on Android. It'd be nice to listen to channel state changes, e.g. if the Internet connection is lost, the channel should signal the error. I have a persistent connection (full-duplex) to the server with a StreamObserver, but neither the onError(...) nor onCompleted() gets called if I just turn off the WiFi to test it.


2487
Building grpc-java on POWER88

Please answer these questions before submitting your issue.
What version of gRPC are you using?
v0.15.0
What JVM are you using (java -version)?
What did you do?
Install protoc to /opt/share
If possible, provide a recipe for reproducing the error.
git checkout v3.1.0
What did you expect to see?
Build Successful
What did you see instead?


2488
GrpcServerRule is Experimental8

This is a tracking issue that will be closed once GrpcServerRule exits experimental status.


2490
Migrate example unit tests to GrpcServerRule9

GrpcServerRule from #2456 simplifies the boilerplate necessary to unit test gRPC clients and services. We should update the example unit tests to make use of it (as appropriate).


2492
Export Javadocs for 1.0.29

http: is still on 1.0.1


2497
StatusRuntimeException with client9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you do?
I am creating a PredictClient to make a gRPC call to an inception model of Tenserflow serving. I am providing url and port of our environment, where it's being hosted.
What did you expect to see?
I expect to see PredictResponse output for the image I am sending.
What did you see instead?


2499
How to determine different streams are based on the same channel9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc-java-1.0.2
What JVM are you using (java -version)?
java version "1.7.0_79"
What did you do?
If possible, provide a recipe for reproducing the error.
I have a persistent connection (full-duplex) to the server with a StreamObserver (for login and push notification). And I have various unary calls based on the other streams. So if there is a api to judge whether these unary streams and the full-duplex stream are based on the same channel ?
Purpose: refuse unary calls if the full-duplex stream dose not exists.


2507
Remove maxMessageSize on NettyChannelBuilder0

Since #2382 has been committed, there is no longer a valid use for NettyChannelBuilder.maxMessageSize.   It has been marked as deprecated and should be removed for the 1.1 release.


2510
google flatbuffer java support feature request1

While it has been discussed, I don't think there is an explicit feature request for grpc-java support of google flatbuffers, maintained by @gwvo, as a replacement for protobuf messages, initially integrated into the grpc c at grpc/grpc#5438 and google/flatbuffers@48f37f9.
Use cases in grpc-java have also been mentioned in #2139 and #1403.


2511
No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
e app, the error is coming: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact


2512
Caused by: java.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: UNAVAILABLE1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
Caused by: java.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: UNAVAILABLE
What did you expect to see?
What did you see instead?


2514
Periodical refresh of DnsNameResolver1

Please answer these questions before submitting your issue.
Original discussion:
Currently DnsNameResolver soles relies on refresh() being called to re-resolve. refresh() currently is called only when there is a connection failure, but there are cases where refreshing is needed without connection failure, e.g., rolling deploys, or simply adding a server.  We could introduce periodic refresh to DnsNameResolver.


2515
Deadlock in grpc due to recursive grpc call1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Turned on FINE logging
Used the Logging client in google-cloud-java
What did you expect to see?
Not what I saw below...
What did you see instead?
Deadlock.
Found one Java-level deadlock:
Java stack information for the threads listed above:
Background: I have been trying various strategies to resolve googleapis/google-cloud-java#1386 , where using the Logging service at level FINE results in grpc logging to the Logging service in a recursive way. I tried using a ThreadLocal to prevent this, but this doesn't work with grpc because the actual call is executed on a worker thread. Essentially I think I need some way to bail out of the LoggingHandler.publish call if I can detect that this is in the scope of a grpc worker thread sending a request to the Logging service.


2516
netty-tcnative-boringssl-static and version 1.1.33.Fork19 need which glibc verson1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
netty-tcnative-boringssl-static and version 1.1.33.Fork19 need which glibc verson?
What JVM are you using (java -version)?
JDK1.7
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?


2517
How to cause Invalid protobuf byte sequence?1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
io.grpc is renamed by me. How does this exception happen? It happen in only one environment, but I can't tell the diff between this one and others.
Can you give me some tips? How to know, what cause this?


2518
Review experimental annotations for 1.11

We should check all experimental tags, and see if we feel comfortable graduating them to the supported status.


2520
What does setting  GRPC  once request  read  time out ? 2

In a production environment ,we should setting once request   time,avoid  cascading failures,so  what does setting  GRPC  once request  read  time out ?


2521
Some javadocs in DelayedClientTransport2 are obsolete2

Here {@link #setTransport} and {@link #setTransportSupplier} are no longer valid.
Please answer these questions before submitting your issue.
What version of gRPC are you using?
master head
What JVM are you using (java -version)?
N/A
What did you do?
If possible, provide a recipe for reproducing the error.
N/A
What did you expect to see?
N/A
What did you see instead?
N/A


2525
ManagedChannelImpl leaves grpc theads unreleased after shudown or shutdownNow2

Using grpc-1.0.2 & netty-4.1.6-Final with
When using shutdown or shutdownNow on the client channel ManagedChannelImpl grpc threads are not released. This is in my production system as well as in the minimal example I've stripped down, see below. The server is not available and no actual call is done. The code is invoked from scala-2.11.8 but this should not matter.
If I do the code in a loop more and more threads pile up without going away after some time.


2531
Make Deadline test-friendly3

In its current form, io.grpc.Deadline is not suitable for testing.  It is not possible to create a deadline with an absolute offset, making it impossible to reliably create two relative deadlines.  The only public constructor is after() which is actually a timeout!


2533
Acess services from Server3

I would like to access all registered services from a build server, in my case the name is enough.
Therefore I need access to the handlerRegistry of the Server here and also an added entry in the interface.
Do you think that is a good idea?
I am currently writing an etcd service discovery on top of grpc and want to register all services from a server, so I need to access the services.
It would also be a good approach for me if I could add an interceptor/listener to the server that will be called when the server started where I can access those information.


2534
CompositeChannelCredentials for OkHttpChannelBuilder channel3

C++ has composite credentials for the channel, as well as CallCredentials for individual stubs.
Does grpc-java have something similar?
So far all i've managed to find is the call credentials that can be applied to each stub, but that means I have to manually add it each time I create a stub, rather than just letting the channel handle it.
Is there a better way to do this?
Will something similar to CompositeChannelCredentials  be added to OkHttpChannelBuilder?


2535
Context Key not set in gRPC worker thread3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.01
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Turned on FINE logging
Used the Logging client in google-cloud-java
Used the code recommended in #2515 to set a Context Key in my main thread
What did you expect to see?
I expected to see the Context Key set in the gRPC worker thread.
What did you see instead?
The key was not set.
Here are the stack traces where I expected it to be set, but it wasn't:


2541
Network is unreachable: pubsub.googleapis.com/2607:f8b0:4001:c02:0:0:0:5f:4434

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Tried to connect to the gRPC Pub/Sub service.
What did you expect to see?
A successful connection.
What did you see instead?
Caused by: java.net.SocketException: Network is unreachable: pubsub.googleapis.com/2607:f8b0:4001:c02:0:0:0:5f:443
Other info:
Running in a docker image in Google Compute Engine
From what I understand, GCE does not support IPv6. But, when using gRPC (through Netty), for some reason it's trying to use IPv6 instead of IPv4.


2548
The version of okhttp is not up-to-date4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc-1.0.2
What JVM are you using (java -version)?
1.8.0_51
What did you do?
If possible, provide a recipe for reproducing the error.
We also need the latest okhttp of our application
but now okhttp is 2.5.0
What did you expect to see?
Use the latest okhttp
What did you see instead?
okhttp 3.5


2549
 The version of okhttp is not up-to-date4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8.0_51
What did you do?
If possible, provide a recipe for reproducing the error.
grpc used the old version of okhttp 2.5.0
What did you expect to see?
Update the version of okhttp to the latest version
What did you see instead?


2552
bindService() should be final5

We just found out a method in the generated code
The method is "bindService()" on the generated server interface is supposed to be "final", but is currently not.
For example
Why is it an issue
The non-final bindService() adds difficulty for users who want to mock the server interface in their tests. Mockito by default overrides all non-final methods with its no-op and null-returning impl. When a Mockito user creates a mock for RouteGuideImplBase, it can't be correctly registered to the server. It can be worked around by explicitly telling Mockito to use the original bindService(), but it's still a friction in the user experience.
What should we do
bindService() should have been defined as "final" in the first place. It was an oversight that we didn't make it so.  This should be considered as a bug and be fixed.
We will make the change in master, which will be in 1.1.0.
Risk
This is technically an incompatible API change. Anyone overrides bindService() on the generated interface will be broken. However, I don't find anyone doing so in google3, or any legitimate reason for it in general. The chance of breaking anyone is very low.


2554
large memory usage in io.grpc.netty.NettyClientTransport$25

As reported in googleapis/google-cloud-java#1449 , io.grpc.netty.NettyClientTransport$2 (I don't know which anonymous class it is) consumes a large amount of memory. Detailed memory analysis is contained in the linked issue. (This is blocking google-cloud-logging GA).


2555
SECURITY.md mutual TLS code snippet out of date5

FYI the code snippet in the mutual TLS section seems out of date, the method signature of the given ServerInterceptor still references MethodDescriptor


2556
Can a name resolver handle multiple schemes?5

I have a name resolver which itself is backed by a gRPC service which accepts the full URI string and allows for a handful of schemes(think something like.  getDefaultScheme can only return a single string, but the new NameResolver call is capable of returning a name resolver for multiple schemes.  What is the proper way to go about doing this?  Should I make two different factories so they each return the defaultScheme appropriately, or can I have a single Factory that returns the insecure or secure scheme only?


2558
errors when doing bench-marking5

What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
bench-mark client is:
bench-mark server is:


2559
nginx proxy5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
i want to using nginx to proxy grpc server, but it got error
What did you expect to see?
is it possible using nginx proxy for grpc?
if can, what i should do ?


2561
Which version of android sdk/ios sdk support gRPC.6

Hi, which version of android/ios sdk support gRPC, I am sorry I can't find any information in the website.


2562
Race between pick and transport shutdown6

Right now they are done in two steps:
A transport that is in READY state is selected
newStream() is called on the selected transport.
If transport is shutdown (by LoadBalancer or channel idle mode) between the two steps, Step 2 will fail spuriously. Currently we work around this by adding a delay between stopping selecting a subchannel (which owns the transport) and shutting it down. As long as the delay is longer than the time between Step 1 and Step 2, the race won't happen.
This is not ideal because it relies on timing to work correctly, and will still fail in extreme cases where the time between the two steps are longer than the pre-set delay.
It would be a better solution to differentiate the racy shutdown and the intended shutdown (Channel is shutdown for good). In response to racy shutdown, transport selection will be retried. The clientTransportProvider in ManagedChannelImpl is in the best position to do this, because it knows whether the Channel has shutdown. clientTransportProvider would have to call newStream() and start the stream, and return the started stream to ClientCallImpl instead of a transport.


2563
Tracking Issue for maxInboundMessageSize being Experimental6

No description provided.


2574
grpc-testing maven package broken7

What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8.0_77
What did you do?
I want to use the GrpcServerRule in my junit tests.
What did you expect to see?
When I include testCompile "io.grpc:grpc-testing:1.0.3" in my dependencies, I can use GrpcServerRule and all other classes currently available in the main github repo.
What did you see instead?
When I include testCompile "io.grpc:grpc-testing:1.0.3" in my dependencies, the GrpcServerRule and other classes are not there.
The grpc-testing-1.0.3-sources.jar file on bintray indeed does not contain those classes.


2575
What's the default value of TCP_NODELAY7

What's the default value of TCP_NODELAY in gRPC-java and is there's a way to set this option?
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
open jdk 1.8


2577
ServerTransportFilter is experimental7

Added in #2132


2578
com.google.protobuf:protoc:3.1.0 generates unusable stubs7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_112-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)
What did you do?
Create a new gRPC project latest instruction from gRPC 1.0.3 from master branch https://github.com/grpc/grpc-java
Create a .proto file with a message field map<string, string>
Generate the stubs
What did you expect to see?
Expected to see successful stub generating
What did you see instead?
location: class com.google.protobuf.GeneratedMessageV3
More Information
After much troubleshooting, the README in 1.0.3 tag seem to have the correct combination of protoc version (3.0.2) and gRPC version (1.0.3)
However, the master branch has the incorrect combination of protoc version (3.1.0) and gRPC version (1.0.3).  protoc 3.1.0 would generate the incorrect stub source.


2579
Distinct status for client channel shutdown7

I've a long running server availability monitoring rpc method implemented. The server just sends status messages if it is still alive. This is wrapped into an rxObservable so I can reconnect from client under the hood. But I should do so only if the client (channel) wasn't shutdown.
Unfortunately I get the same status (UNAVAILABLE) - as StatusRuntimeException - in the monitoring stream observer for server is unavailable and for client channel shutdown. The difference is only the description where I get a message like:
"channel shutdownnow invoked"
Currently I test the status description if it contains 'channel' && 'shutdown' in order to decide for reconnect or not.
Is there a better way to decide whether the channel is shutdown or the server is just unavailable? Or is there an distinct status planned for both events?


2582
Investigate Appengine Thread Partitioning8

Currently, using gRPC on AppEngine requires a new channel to be created for each request.  Sharing channels across requests would have substantial performance benefit, but would require per-request threading.


2586
Clarify best practices for sending credentials in ClientAuthInterceptor8

The replacement for ClientAuthInterceptor, a deprecated but useful class, is GoogleAuthLibraryCallCredentials.  ClientAuthInterceptor has much wider usage, presumably because GoogleAuthLibraryCallCredentials is difficult to use, with no clear examples.
Some better Javadoc needs to be added to GoogleAuthLibraryCallCredentials, as well, as some extremely easy to read example code.  It should make a convincing argument for why it should be used over ClientAuthInterceptor.
ClientAuthInterceptor has been deprecated in 1.0.x, and is subject to removal.


2590
Any ETA on 1.1.0 Release?9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.0-SNAPSHOT
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
N/A
What did you expect to see?
N/A
What did you see instead?
N/A
Question
Is there any ETA for 1.1.0 gprc-java release?
Thanks
Tim


2592
Tracking Issue for MethodDescriptor.getRequestMarshaller being Experimental9

No description provided.


2595
Maybe add a builder to MethodDescriptor9

After talking about this briefly, it seems that a Builder for MD might be a good idea.  One complication comes up: MD is generic, but the Builder may not be.  If the marshaller is not the first this passed to the the builder the types will be wrong.


2596
the benchmark example gives a 2 times better QPS result after add spring-boot to dependency9

What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8
What did you do?
I use the bench mark code from https
I download the code and convert it to a maven project, then run the bench mark with command:
then I add the spring-boot-starter-web dependency to the benchmark project, and re-run the bench mark:
sudo java -jar benchmark-client-with-springboot.jar --address=10.200.10.17:1024 --duration=10 --channels=10 --outstanding_rpcs=40
the benchmark result is:
What did you expect to see?
the  QPS results of two benchmarking should be same.
What did you see instead?
after add spring-boot dependency, it gives a 2 times better QPS result.


2599
Don't hang RPC when netty-tcnative .so fails to load due to (musl) linking errors9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
openjdk version "1.8.0_102"
OpenJDK Runtime Environment (build 1.8.0_102)
OpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Then deploy to a GCE instance and run it.
What did you expect to see?
An exception indicating that the netty dependency was unsatisfied
What did you see instead?
After the call times out, DEADLINE_EXCEEDED
Notes
If a user has a high timeout, it can take a long time for them to discover something is wrong. Then when they receive DEADLINE_EXCEEDED, they have no idea why - it doesn't guide them to the problem with the dependency. They have to know to turn on FINE logging and go log spelunking to fine the root cause. Example user-filed issue: googleapis/google-cloud-java#1430


2600
Tracking issue for TestMethodDescriptors being Experimental0

No description provided.


2601
Java GRPC Client (1.0.3) not able to send requests with metadata larger than ~500KB.0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Java: 1.0.3
Python: 1.0.4
What JVM are you using (java -version)?
java version "1.8.0_112"
Java(TM) SE Runtime Environment (build 1.8.0_112-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Start a Python Greeter server.
Modify the Python Greeter client to have the following run() method:
Run the python client. With the standard package for grpc 1.0.4 for python, the metadata is larger than the default metadata size (16K) and we get (as expected):
Now patch this line on the python grpc server init code (we don't yet have the ability to set options :/) with:
Rerun the server and client:
Greeter client received: Hello, you!
Keep the python server running and run the Java client:
Modify the Java client to add metadata:
INFO: [ManagedChannelImpl@96532d6] Terminated
does not change the outcome (kind of expected, since apparently those options are only for receiving metadata, which is quite confusing).
What did you expect to see?
I expected the Java client to be able to send  as much metadata as the server supports. The python client seems to do it just fine.
What did you see instead?
Starting at around 500KB the Java GRPC client is not able to send the request and the connection errors with WARNING: RPC failed: Status{code=INTERNAL, description=Connection closed with unknown cause, cause=null}.
I'm guessing this behavior is not expected? Are there any workarounds?
Thanks!


2602
BUILD FAILED0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?


2604
GRPC is logging NOT_FOUND errors as SEVERE and spamming the logs0

gRPC = 1.0.3
We are using NOT FOUND to indicate that a resource is missing on the server. This is an ok response. However, this is getting logged as a SEVERE error on the client side and we can't find a way to control how to turn off logging for this particular error or reduce its severity to INFO.
Can someone help fix this/explain why NOT_FOUND is severe?
cc: @jacob-tock


2607
Tracking Issue for ClientCall getAttributes being Experimental.0

Specific usages:
ClientCall.getAttributes()


2608
Limit Cipher Suites Available0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_60-b27)
What did you do?
n/a
What did you expect to see?
n/a
What did you see instead?
n/a
I'm using  statically linked tcnative via "netty-tcnative-boringssl-static" in my dependencies.  With ServerBuilder as below....
How would I limit the cipher suites available to the TLS negotiation to a very specific subset?.  I know I can provide an SSL context to NettyChannelBuilder and NettyServerBuilder but i'm not sure I can limit the available ciphers in there (or if openSSL would even care)


2609
the JVM never exit after added sleep(2000)0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
code is from: https
I added  sleep(2000) in the finally block of main:
What did you expect to see?
the JVM should terminate after client.shutdown();
What did you see instead?
the JVM never terminate


2610
does one streamId(>=3) represents one RPC call in the same TCP connection?1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.1
What JVM are you using (java -version)?
1.8
What did you do?
Does one streamId(>=3) represents one RPC call in the same TCP connection? I mean:
one streamId only can be used for 1 time RPC call
OR
one streamId could be used for multiple times RPC calls?


2613
Put server address in ClientCall#attributes()1

It would be very helpful to put the target address into ClientCall#attributes(). One of the use cases is the ability to access it in interceptors.
Without first class support for retries, we're using RetryingInterceptor. We want to be able to write LB logic which in the case of failed attempt, would pick different backed on next call. There's currently no way to achieve that and ability to get information about which address is targeted in given call would solve it (the RetryingInterceptor would then append target address to BACKENDS_TRIED key in affinity attributes, on every attempt).
/cc @dapengzhang0 @zhangkun83  @kkaneda


2624
Client Error: io.grpc.StatusRuntimeException: UNKNOWN2

What version of gRPC are you using?
1.0.2
What JVM are you using (java -version)?
1.8
What did you do?
I am running a gRPC-java server with multiple grpc services defined.
When running multiple stubs and their multiple rpc calls simultaneously I am seeing this exception below thrown.
This happens only when I have multiple stubs with their own channel defined and the occurrence of the exception seems to be more frequent when increasing the number of stubs/rpc calls. This looks to me like some sort of resource issue either client or server side. I have increased the thread count and seen no measurable improvements. Not sure where to go from here?
My Client setup:
What did you expect to see?
I expect to get back the response object.
What did you see instead?
Instead I received a io.grpc.StatusRuntimeException: UNKNOWN


2626
AbstractInteropTest.maxInboundSize_exact is too picky of the precise protobuf encoding2

If the client encodes protos ever-so-slightly differently than the server, the size the server sends won't match the computed size the client generates. If the server uses a more verbose encoding, it results in an error like:


2631
ClientCalls drops cause3

ClientCalls.toStatusRuntimeException drops the original cause of the Status when converting a Throwable to an SRE.  This results in somewhat useless stack traces, as the original stack trace is lost.  (or at least not printed).  This also happens in BlockingResponseStream.hasNext


2633
Do not pass ClassLoader to Class.forName, for Android3

See #2207. An easy workaround for #2207 was to specify -keep in ProGuard configuration. However, everyone would be happier if such configuration was unnecessary. Using forName() without passing ClassLoader should remove the need for configuration, as originally intended.


2636
ServiceDescriptor constructor is error prone3

The ServiceDescriptor(String, Collection<MethodDescriptor<?, ?>) constructor is error prone.  Getting the generics slightly wrong results in ServiceDescriptor(String, Object, MethodDescriptor<?, ? ...) being invoked instead.  This can happen if the second arg is List<MethodDescriptor<Void, Void>> for example.


2638
Unable to build 3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
I am facing a similar issue described in
I am unable to build.
Build log  says
linking protoc-gen-grpc-java failed.
collect2: error: ld returned 1 exit status
I am using Cent OS 7
I have libStd packages installed
And
protoc version is "libprotoc 3.1.0"
Please help.


2641
Tracking Issue for MethodDescriptor.Builder being experimental4

No description provided.


2643
Add Since javadoc annotations4

It would be nice if we could quickly tell when methods / APIs were added.  Javadoc has the @since annotation for this purpose.


2646
Provide Attribute for i.n.c.unix.PeerCredentials when using EpollDomainSocketChannel4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc 1.0.3
What JVM are you using (java -version)?
java version "1.8.0_111"
Feature Request
We'd like to get access to the EpollDomainSocketChannel to access method peerCredentials() (new in Netty release 4.1.7) from within a gRPC server's BindableService call.
We're using gRPC with Unix Domain Sockets (Netty's EpollServerDomainSocketChannel) on a server to manage a hardware resource.  We allow a single user (but multiple processes) to open the resource more than once, but we need to reserve the resource while that user has it open and not allow any other users access to the device.  Our server needs to be resilient and detect that the client program has potentially crashed and allow the resource to be cleaned up and made available for another user.
We can add a ServerInterceptor but still I haven't figured out to get the Channel.
Can we get access from a ServerCall object to the Channel (understanding that it may be null for an Inprocess server)?  Or other alternatives?


2647
why my grpc-java client on version 1.0.3 threw io.netty.util.internal.OutOfDirectMemoryError4

I'm testing the latest version of grpc-java which version is 1.0.3. The client always throws io.netty.util.internal.OutOfDirectMemoryError. why....


2649
NameResolver can be NotThreadSafe4

With ManagedChannelImpl2, NameResolver is always called from Channel Executor, except for getAuthority(). After ManagedChannelImpl2 is promoted, NameResolver can get rid of @ThreadSafe.


2650
Decide whether LBv2 should be kept in 1.15

If we do, we could provide a better (non-atomic) migration path for people (implementors) implementing LoadBalancer.
During 1.1, we keep the old API intact, and include the v2 API as LoadBalancer2. Implementors re-write their LBs with the v2 API, and migrate their customers to their v2 LB. The two versions of LB impls can coexist.
In 1.2, we replace LoadBalancer with LoadBalancer2, and keep LoadBalancer2 as an alias to LoadBalancer by extending it. The old LB impls stop working. Before switching to 1.2, the implementors must have switched all their customers to the v2 API. During 1.2, they can migrate their customers to the proper LoadBalancer name.
In 1.3, we delete LoadBalancer2.
The caveat is that it increases the size of Android packages in 1.1. It shouldn't be a significant amount compared with the existing code size. We should at least calculate the exact size and note it in release notes.
If we are going to do this, we should also change the @Internal annotations to @ExeprimentalApi on the v2 APIs.


2651
AbstractInteropTest should not depend on TestUtils5

PR #2634 accidentally added a dep from src/tests to another src/test directory, which is uncommon.  Shared test library code needs to be under a /testing/ directory in the src/java which can be reused by multiple test suites.


2653
Create GrpclbLoadBalancerFactory25

If #2650 is resolved by keeping LBv2 in 1.1, we should also add GrpclbLoadBalancerFactory2 for 1.1, otherwise GrpclbLoadBalancer2 will not be accessible to users.


2655
about Netty initChannel5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.7.0_80
What did you do?
If possible, provide a recipe for reproducing the error.
no error
What did you expect to see?
What did you see instead?
when netty client connect netty server,  exec initChannel, and new NettyServerTransport, and new NettyServerHandler...
so in server:
in mem, too many new new new ......
Do you understand what I mean?


2656
Switch to LBv25

LBv2 (design doc) consists of LoadBalancer2 and its supporting channel implementation ManagedChannelImpl2. Here we outline the transition path from the current LoadBalancer and ManagedChannelImpl (a.k.a LBv1) to LBv2.
The transition is transparent to users who only use the default or stock LoadBalancers that are shipped with gRPC. The following transition plan should only concern advanced users who implement or use custom LoadBalanacer(s).
Also note all changes happen on master first. The changes scheduled for gRPC 1.2 will happen on master soon after 1.1 is released.
During gRPC 1.1
LBv1 and LBv2 coexist. LBv1 is the default one. Both can be set to the channel builder, while LBv2 is used only if a LoadBalancer2 implementation is set to the channel builder.
During this period, implementors re-write their LBs with the v2 API, and migrate their customers to their v2 LBs.
For example, FooBalancerFactory is the current LB, while Foo2BalancerFactory is the new one that uses LBv2.
While the v1 version continues working:
Customers should be migrated to use the v2 version:
We replace LoadBalancer with LoadBalancer2, and keep LoadBalancer2 as an alias to LoadBalancer by extending it. LBv1 interfaces and codepath are deleted. All v1-based LBs stop working with gRPC.
Prior to switching to 1.2, the implementors must have switched all their customers to the v2-based LoadBalancer2. During 1.2, they should rebase their v2-based implementations to the proper LoadBalancer interface.
For example, this continues working because LoadBalancer2 extends LoadBalancer:
We delete the alias LoadBalancer2.


2666
Tracking issue for ServiceDescriptor.Builder being experimental6

No description provided.


2668
Catch Throwable instead Exception or RuntimeException&Error6

While debugging my code problems I spot several places in the library code that might lead to uncatched/unreported exceptions being thrown through catch blocks.
In SerializingExcutor.TaskRunner#run there is try { .. } catch (RuntimeException e) { .. } block. It could easily happen any other Exception or Error can be thrown. (since checked exceptions are not necessarily on bytecode level, an Exception types are also possible, no matter they are not declared in Java code).
In the ServerImpl I see slightly incorrect check, that catches RuntimeException and Error only. I suppose a bit correct is to catch Throwable there too.  In messageRead, streamCreated, halfClosed methods.
There are a few more places I found, e.g. in RouteGuideActivity, RouteGuideClient, AsyncFrameWriter.WriteRunnable#run, GRPCUtil#TIMER_SERVICE,  MessageFramer,
ManagedChannelProvider#isAndroid, ClientInterceptors.CheckedForwardingClientCall#start, NameResolverProvider#isAndroid,
In internal/Util it is not clear if Throwable should be checked


2677
gRPC 1.1.0 uses wrong Protoc7

For posterity:
Protobuf team released 3.1.0, which was accidentally built on a developer machine.  This caused the artifacts that were uploaded to Maven central to require glibc 2.14 or later.  This was not noticed at the time, and gRPC Java was changed to depend on 3.1.0.  Later it was found out  that this prevented users from using it since they use an older version of glibc.
Maven central prevents removing or modifying an artifact once released, so Protobuf team uploaded a new version, built from the protoc-artifacts/Dockerfile, which does have the correct dependencies.  This was uploaded as 3.1.0-build2.  Unfortunately, none of the other artifacts of (like the java libraries) were uploaded.
Meanwhile gRPC was unaware of this rename (it happened during the 1.1 release cycle), and was using 3.1.0 successfully since all gRPC developers machines are using a later glibc.  1.1 was cut, but now doesn't build using the docker image, since Protobufs own docker image doesn't contain the dependencies of the artifact.  There are a couple ways forward:
Revert v1.1.0, and rewrite the v1.1.x branch to use the proper protoc artifact.  This will break anyone who depended on the branch or tag in the brief window that it existed.    Once the correct protoc artifact is used, the branch will be rereleased and retagged.  This is probably okay, since the gRPC artifacts have not be released.  One downside is that the protoc and proto java libraries will not match, and will have an inconsistent  protobufVersion in the gradle file.
Like 1, it would be possible to just upgrade to 3.2.0.  3.2.0 hasn't been as well tested, but solves the protoc version not matching the proto libraries.  It would also have to be fixed in master
Don't rewrite history, dump the 1.1.0 tag, and move immediately to 1.1.1.  The errors of the past will be set in stone, and 1.1.0 will never exist as an artifact.
Some sort of hack to use the 3.1.0-build2 proto artifact when building the grpc plugin, but keeping the dependencies the same in the gradle file.  This lets us keep the version, but anyone using grpc plugin will be force to use a later glibc.  (2.14 came out in 2011).  This might be okay, assuming that 1.2 will be released soon anyways and have this fixed.
@ejona86 @zhangkun83 thoughts?


2680
The JWT cloud-to-prod auth interop test is failing8




2681
grpc-thrift 1.1.1 has not been published to maven repo8

What version of gRPC are you using?
1.1.1
What did you do?
Included grpc-all 1.1.1 as a dependency in a maven project
What did you expect to see?
grpc-all and all dependencies download from maven central
What did you see instead?
Could not find io.grpc:grpc-thrift:1.1.1.
Searched in the following locations:


2682
overrideAuthority does not impact authority for JWT in jwt_token_creds8




2684
Remove excessive logging in ManagedChannelImpl8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
master
What JVM are you using (java -version)?
Java8
What did you do?
If possible, provide a recipe for reproducing the error.
This was discovered in the internal stress test.
What did you expect to see?
What did you see instead?
Tons of


2687
Http2OkHttpTest.deadlineExceededServerStreaming is flaky8




2688
Would it be possible to shade guava?8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3 and 1.1.1
What JVM are you using (java -version)?
java version "1.8.0_92"
Java(TM) SE Runtime Environment (build 1.8.0_92-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.92-b14, mixed mode)
What did you do?
GRPC 1.1+ uses Guava 20.0.   We have a very large codebase that uses both internal and external libraries that depend on older version of guava.  These libraries are not compatible with Guava 20.0.  As a result we are unable to upgrade to GRPC 1.1.+.   From what I can tell the only Guava class exposed by GRPC is ListenableFutures, via ClientCalls in grpc-stub.  Would it be possible to shade all other uses of Guava in GRPC.
There would still be an issue with the GRPC code generator that does expose Guava's ListenableFuture.  For that use case would it be possible to make generating those stubs optional and perhaps even add an option to generate a CompletableFuture stub?
What did you expect to see?
Newer versions of GRPC to not break other libraries depending on older version of Guava.
What did you see instead?


2689
Reflection service can return inconsistent results8

The service currently calls serverReflectionIndex.updateMutableIndexIfNecessary() after receiving each request in the stream. This is not only needless processing, but actually against the point. The reflection API is streaming so that each stream can be independently consistent. This is normally important when a load balancer may direct each request to a different backend. However, in this case it could also handle the mutable nature of the services.
Although serverReflectionIndex is volatile, it is not assigned in a thread-unsafe way; it could be non-volatile. However, I would suggest making ServerReflectionIndex immutable and create a new/derivative each time the mutable index is detected to change (probably using locking instead of volatile). I would then suggest checking for updates to the mutable index at the beginning of each RPC (serverReflectionInfo()) and then copying the current ServerReflectionIndex reference to the ProtoReflectionStreamObserver.


2691
ManagedClientTransport.start should be better defined9

Calling  ManagedClientTransport.start returns a Runnable, but it isn't clear what to do with it, or when it should be called.  While the code is annotated @CheckReturnValue, the annotation doesn't get inherited across class boundaries, leading to places where the value is ignored.  NettyClientTransportTest contains several invocations of start, but ignores the return value due to NettyClientTransport currently returning null.
The difficulty of describing when and how the Runnable should be used feels indicative of shaky API.  It would be nice to modify InternalSubchannel to not need to acquire locks to alleviate the need to run code outside of locks.  This is not urgent.
@zhangkun83


2698
Memory allocation not decreasing as load decreases or moves to zero9

I started down this path because I found the memory leak in 1.0.1 (fixed in 1.0.3) through load testing, but I see something that doesn't appear to behave as it should in 1.0.3.  The memory footprint increases relative to the amount of concurrent requests, but it doesn't appear to ever decrease when load decreases or goes to zero.  This may be expected, but I thought I would bring it up here.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8.0_60-b27
What did you do?
If possible, provide a recipe for reproducing the error.
Many goroutines (hundreds, thousands) to create concurrent requests in a streaming server.
What did you expect to see?
Memory usage increases relative to the number of concurrent requests, and decreases (eventually)  as the load goes to zero, or is completely zero.
What did you see instead?
Memory usage goes up as expected when handling thousands of concurrent requests, but never decreases as load moves to zero.



2703
AssertionError in OkHttpClientTransport from older Android devices0

When using gRPC on HTC M7 (2013), a crash occurs (AssertionError) that seems to be from the protocol negotiation in OkHttp transport.
What version of gRPC are you using?
Not sure how gRPC behaves in this case but comments in the method seem to suggest that's a scenario that can be expected
Stock Web browser
Chrome browser


2710
gRPC memory leak? when send ton of data1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
java version "1.7.0_80"
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Client side just a simple for loop to invoke rpc method.
Server side , i also set the maxConcurrentCallsPerConnection to 5.
What did you expect to see?
send at least 1M message frequently.
What did you see instead?
There are two doubt I don't understand.
Within log file , i see lots of OutOfDirectMemoryError, show as following:
when I using linux Top command to see the java process. I found that the RES memory size is much bigger than the jvm heap size plus the off-heap size. see as following,
and java jvm configuration show as following,
and the max direct memory size is 243.25 MB which is figured out by using PlatformDependent.maxDirectMemory().
thank you, can you make any suggestion ?


2713
Protoc throws error=7, Argument list too long1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
1.8.0_66, vendor: Oracle Corporation
What did you do?
I tried to compile 1886 proto files using maven.
Getting the following exception


2714
Enable NettyChannelBuilder to set default call credentials1

I spoke with @ejona86 regarding this issue.  Currently, there's no straightforward way to set a default call credentials using io.grpc.netty.NettyChannelBuilder to allow all calls using this channel to have a default credential.  Right now one approach is to pass an interceptor, such as ClientAuthInterceptor, to ChannelBuilder. (here's an example: https:)
However, ClientAuthInterceptor is deprecated.  Therefore, it would be great if ChannelBuilder could provide a method, say "callCredentials",  such that one can do something like NettyChannelBuilder.forAddress(addr, port).callCredentials(creds).build()


2715
java.lang.NoSuchMethodError: com.google.common.util.concurrent.MoreExecutors.directExecutor()1

I've been grappling all day with java.lang.NoSuchMethodError issues, presumably due to Guava conflicts and some strange interaction with maven. I've also tried with different version of grpc-* and the protoc plugin, to no avail.
Relevant parts of my pom.xml:
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_101-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
I then followed the HelloWorld example to build a client and a server. In a Junit test case, the client simply invokes the rpc via a blockingStub.
What did you expect to see?
No errors.
What did you see instead?
With 1.1.2


2716
Unify usage of EAG and ResolvedServer1

@zhangkun83 wrote:
The equality of EquivalentAddressGroup, which only counts the addresses but not the attributes, was needed by the v1 ManagedChannelImpl for de-duplicating TransportSets. Even though ManagedChannelImpl2 doesn't forbid duplicating InternalSubchannel for the same EquivalentAddressGroup, the equality is still needed by most LoadBalancer2 implementors, e.g., Map<EquivalentAddressGroup, Subchannel> subchannels in the round-robin LB, to determine which InternalSubchannels to close and which to keep, when the NR result is updated.
I agree that there are too many address wrappers and it has become very confusing, sometimes even to myself. I prefer to keep the EquivalentAddressGroup name, because it indicates how these addresses are used by the channel. So instead of deleting EquivalentAddressGroup, I suggest deleting ResolvedServerInfo, and adding attributes to EquivalentAddressGroup. To address the equality requirement I mentioned earlier, we could add a withoutAttributes() method which can be used in cases where attributes should not be counted for equality.
ResolvedServerInfoGroup was intended to be the attribute-ful counter-part of EquivalentAddressGroup. Since you are proposing to replace EquivalentAddressGroup with ResolvedServerInfo, I would expect ResolvedServerInfoGroup to go away instead of building yet another level on top of ResolvedServerInfo.


2717
Keep track of transport latency1

@ejona86 wrote:
Long-term, I question if the transports should just keep track of their latency. They know the latency initially via SETTINGS ack and then later via flow control pinging.


2719
API Review1

Make sure that no new APIs were accidentally introduced (that is, APIs were made stable on purpose). Make sure we are happy with the APIs. Can consider removing ExperimentalApi from APIs, if we haven't already.


2720
TLS handshake failures on android2

What version of gRPC are you using?
grpc-java 1.1.2
grpc c++ build against OpenSSL 1.0.2k
What JVM are you using
Android
What did you do?
I'm creating a channel using the following code:
where context is generated by:
Where "resources/EC_CA.crt" is packaged with our application, and is successfully used successfully for our current internal library.
When the client performs the TLS handshake with the c++ server, it gets up to the point where it sends the TLS client key exchange/change cipher spec, then the server complains with the line:
Handshaking failed: {"created":"@1486967107.222496318","description":"Cannot check peer: missing selected ALPN property.","file":"src/core/lib/security/transport/security_connector.c","file_line":491}
Interestingly, this only occurs on android devices after running com.google.android.gms.security.ProviderInstaller.installIfNeeded(getApplicationContext());. If we don't use play services we see different behaviour depending on API version. Our level 19 and below devices fail out since they lack the devices. The level 21 and above devices successfully connect and communicate with the server, though.
The python grpc implementation does not cause the above issue.


2721
Issue while running helloworld example on ubuntu 14.042

I am getting the following error from here while running the HelloWorldServer.java on my local.
I am using openjdk version "1.8.0_91" on ubuntu 14.04.
My pom.xml looks like :


2724
How do I call grpc-java server from golang client2

I have generated the following method from the given proto file. As it is mentioned here it uses the combination of LowerCase of PackageName and ServiceName defined in the proto file.
to generate the full method name. Now the problem is the same file is being used to generate the client code in GoLang. Which take the package name as it is. And it throws the following exception while calling the same method from client :
So, how to generate the full method name as it is in grpc-java  as mentioned in proto file?


2726
NPE during NettyClientTransport.start() if keepAlive is enabled2

What version of gRPC are you using?
GRPC 1.1.2
What JVM are you using (java -version)?
1.8.0_112
What did you do?
i believe the field channel is never initialized right now, so NPE is throw by field call channel.eventLoop().


2727
grpc-core and grpc-context jars exporting the same package doesnt go well with OSGI2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
GRPC version 1.1.2
What JVM are you using (java -version)?
1.8
What did you do?
I am trying to add a GRPC Server into Karaf OSGI Container as a feature. To this library, grpc-core and grpc-context libraries are dependencies.
Because these jars are not OSGI bundles, the osgi wrap is performed. While running the application, we get an error that io.grpc.Context could not be found in bundle grpc-core.jar (NoClassDefFoundError)
For information please refer to the OSGI bundle definitions.
As you can notice, the problem seems to be because of the same export-packages defined in grpc-core and grpc-context which doesnt seem to go well with OSGI.
I reverted my GRPC version to 1.0.0 in which the jars were broken down to core and context and it worked well.
So the requests are as below:
a) A single jar which includes both core and context
b) If context is intended to be separate, i suggest different packages be used in context so that there wont be a collision on the export-packages.
Is there a plan to create a OSGI bundle for these jars?


2728
dev: Jetty ALPN/NPN has not been properly configured when running tests in IntelliJ2

Some of the tests depend on jetty alpn agent for TLS stuff which is loaded by gradle for whole test suite but not if you're running a single test in for example an IDE.
I figured out how to hack it:
Go to Edit Configurations for your test in IJ
onder if there's more sane and straightforward way to do this?


2731
What happen when received many reset frame from grpc server!3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
We developed a grpc proxy based on netty.  In grpc proxy, we adapt long connection for connect proxy to grpc server. After Gprc prxoy run some time, we received many reset frame(errorCode=8) from grpc server and have no date frame(endStream=true),  then the proxy dose no work any way.
What did you expect to see?
We expect to reveived header frame(endStream=false), data frame(endStream=false), header frame(endStream=true)
What did you see instead?
But we really reveived header frame(endStream=false), reset frame(errorCode=8)


2733
Stub are not generated3

What version of gRPC are you using?
1.1.2
What version of protoc are you using?
3.2.0
What JVM are you using (java -version)?
1.8.0_111
I don't get any stub generated.
Many thanks.


2737
Pass "args" object to LoadBalancer2.SubchannelPicker.pickSubchannel()3

Right now the method looks like:
public abstract PickResult pickSubchannel(Attributes affinity, Metadata headers);
Neither affinity nor headers feels inherent to the method. A bit "random." That is a symptom that we may need to add additional arguments in the future. For example, MethodDescriptor. To avoid overload troubles, we should probably just make it an object today. Say, something like:


2738
Use CallOptions.withOptions instead of withAffinity3

withAffinity is a full Attributes to be type-safe, but it will generally only have one entry and sometimes two. In more recent times we've added withOptions. This seems it could just use it instead. This would mean the LoadBalancer would be passed CallOptions instead of Attributes affinity, but that doesn't seem too bad.
Probably want to do #2737 at the same time as fixing this.


2742
gradle build failure in proxy environment4

Please answer these questions before submitting your issue.
What version of gRPC are you using? : 1.2.0-SNAPSHOT
What JVM are you using (java -version)? : java version "1.8.0_72"
Forked the master branch and then tried to build some example codes using instructions given in quick start guide. I am not sure whether I have to install protobuf or any other thing to the local machine.
I am using windows 7 machine under corporate proxy. Navigated to grpc-java\examples>
then
gradlew.bat installDist
Expected: Build success
Found: FAILURE: Build failed with an exception.
What went wrong:
Could not resolve all dependencies for configuration ':compile'.
Could not find io.grpc:grpc-netty:1.2.0-SNAPSHOT.
Searched in the following locations:
Could not find io.grpc:grpc-protobuf:1.2.0-SNAPSHOT.
Searched in the following locations:


2745
Steps for changing license4

Issue to track the following changes
change LICENSE file to Apache v2.
change license text in all source files.
change license type in BUILD files.
change copyright text from "Google Inc" to "gRPC Authors" in all files.
Add a AUTHORS file


2746
map types can't compile in Linux using gradle4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpcVersion = '1.0.3'
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
4 service, unary request/response
What did you expect to see?
I expected to compile
What did you see instead?
Note: /home/magg/Desktop/server/src/main/java/com/example/grpc/HelloRequest.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.


2756
Provide a java_grpc_library() Skylark extension5

Bazel users can now build protos using the built-in proto_library and {cc,java,javalite}_proto_library rules.
These rules do not include gRPC support intentionally; this FR is about providing a Skylark extension to allow users to build gRPC bindings.
@ejona86


2761
Failed to load any of the given libraries: [netty-tcnative-windows-x86_64, netty-tcnative]6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.2
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
Trying the SSL on server side
here is my pom.xml
What did you expect to see?
SSL should work fine
What did you see instead?


2762
NettyClientTransportTest.maxHeaderListSizeShouldBeEnforcedOnServer is flaky6

It looks like the problem is getRootCause() is over-eager and skips over the StatusException. So this is a bug in the test, which should be easy to fix.


2763
Need non-experimental way to raise maxInboundMessageSize6

As per googleapis/google-cloud-java#1499 , users of Pub/Sub see errors when their messages exceed 4MB, even though Pub/Sub's limit is 20 MB. Ideally we'd like to call maxInboundMessageSize to raise this maximum, but it turns out that maxInboundMessageSize is experimental. I don't see an open issue for making it non-experimental - when will this be done?


2770
Server does not send initial metadata on a stream with no messages7

The gRPC wire spec says:
Most responses are expected to have both headers and trailers but Trailers-Only is permitted for calls that produce an immediate error.
However, the only time that headers are sent by a Java server is in when onNext() is called (see ServerCalls.java#L282). This means that a stream where the server's behavior should be to send initial and trailing metadata (i.e., close the stream with no outbound messages), instead gRPC sends out a Trailers-Only response, skipping any initial metadata.
This popped up on the existing interop tests when PHP and Node were not setting the response_parameters field in the custom_metadata interop test. See grpc/grpc@ced8702. These tests are now passing since the test spec says to set the response_parameters field, and so the interop server calls onNext() to send the appropriate response(s).
But, if the wire spec's statement should be interpreted as Trailers-Only should only be sent for calls with an immediate error, this is a bug in Java's implementation. Even if Trailers-Only is a legal response even without errors, it seems like the Trailers-Only message should include any header metadata.
It seems to fix things to add the following check to ServerCalls$ServerCallStreamObserverImpl#onCompleted(), but I haven't tested this extensively enough to be sure this doesn't cause problems elsewhere:


2772
Tracking GrpclbLoadBalancerTest unit tests should be more unitary7

Some unit tests in GrpclbLoadBalancerTest are too long and testing multiple things in one test method.
It's hard to read and maintain. Better to split apart.


2775
SSL error, pls help7

What version of gRPC are you using?
Grpc version 1.0.1
What JVM are you using (java -version)?
JVM: Oracle Jdk jdk-8u121
What did you do?
In client,use jetty alpn
In server, use netty boringssl
What did you expect to see?
There is no error
What did you see instead?


2776
Tracking issue for Monitoring Service being Experimental7

No description provided.


2783
Test historic generated code8

We should check in generated code for each minor version of grpc, and at least makes sure it compiles. If it compiles, it is highly likely to work.
Ideally we'd run some simple sanity tests, although it is hard to force all the code to run. Maybe we create a noop-ImplBase service and call bindService(). That would at least load all the MethodDescriptors... I don't think a literal test is necessary before closing this. The compilation itself can count as a "test." But it should at least be briefly investigated before closing.


2784
Max concurrent global streams (on the server) so applications don't have to implement it:8

Request coming from Mixpanel team
Seems like C has a lot of it but Java doesnt.


2785
Inconsistent INTERNAL errors for message-less RPCs8

What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
java version "1.8.0_121"
What did you do?
Create a unary rpc, on the server have it immediately call responseObserver.onCompleted() with no previous onNext().  With a java gRPC client call this rpc with blocking and future stubs, they'll both throw an INTERNAL error from here. Using the async client stubs will work(no onNext, just onCompleted with trailers).
If I switched to a streaming response and called onComplete() on with no previous onNext() the future stub is no longer available(expected) and now the Iterable for the blocking stub returns false for hasNext() as expected, but doesn't break.  The async stub continues working as before.
What did you expect to see?
I guess I wanted the "defaultInstance" of the response type for the blocking and future based stubs rather than an exception.  That, or an onError to trigger on the async stub with the same INTERNAL status and message.
I have not checked what the c-core will do in this case, or if there is a spec for this behavior.


2789
Java benchmark driver spams logs8

Looking at a recent run: https
By lines of output, Java is causing 79% just with PrintFlagsFinal. It seems we should remove the argument or figure out a less spammy solution.


2797
CompletableFuture stubs9

Hello,
I'd like to start a discussion about adding a CompletableFuture-based stub implementations to gRPC. I understand that generated gRPC code must be backwards compatible with Java 6, so here are some alternative implementation strategies to consider.
Implement CompletableFuture-based stubs in a stand-alone class generated by a stand-alone protoc plugin. The CF stub class would reference the public MethodDescriptors of the stock generated client. This option is easiest to implement, but presents a fragmented programming model.
Implement CompletableFuture-based stubs inline with the existing generated stubs by adding @@protoc_insertion_points to the stock c++ generator. A protoc plugin would be used to populate the insertion points. This option has the benefit of presenting a homogenous programming model for this, and all future plugin-based stub extensions, but requires a coordinated one time change with the protoc project.
Extend the c++ generator with optional support for CompletableFuture. Use a protoc flag to turn it on and off. Not a great option, but possible.


2800
Run examples without console and dependencies0

Can i use gRPC without some grandle dependencies, and how?
I just want to see how work server and client from https but i can not do it, because i can not find some class-files (import io.grpc.stub.StreamObserver; - for example)
May be is there some description for run examples without consoles?


2801
Netty improperly delays sending SETTINGS ACK0

As seen in grpc/grpc#9956:
... it appears Java/Netty is doing the wrong thing. encoder.remoteSettings() is called before writeSettingsAck(). encoder.remoteSettings() calls flowController().initialWindowSize() which results in the flow controller writing pending bytes.
Two immediate changes should probably be made: 1) Send the settings ack immediately before processing the settings frame in the decoder. Any failure in processing would probably result in the connection being closed, so this doesn't seem dangerous. 2) Stop triggering writePendingBytes() in the flow controller and instead wait for the flush() like normal.


2802
Bump error-prone to v2.0.18 or later0

There's new checks, and we want to stay up-to-date.


2803
Bump gradle version to v3.4.1 or later0

3.4 has much nicer incremental rebuild, able to avoid recompilation when APIs don't change. It also has native library support, which would be nice. For this issue, we probably won't change to use the library support, but we can open a new issue once we are on 3.4.1+.


2804
Cache .m2 on Travis-CI0

maven verify performance varies widely on Travis, from 20 seconds to over 5 minutes. It seems this is primarily dictated by the download of artifacts. Caching .m2/repository would probably speed that up. We do need to make sure to avoid caching .m2/repository/io/grpc/ (probably by just deleting it before the cache is created).


2808
Inner class unit tests in GrpcServerRuleTest look so weird0

Should make the inner classes top level classes, and also add @RunWith(Junit4.class)


2813
It might be a mistake returning type of ManagedChannelBuilder<?>.1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.2
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
when I use grpc-java in scala,
for example
the method forAddress returns ManagedChannelBuilder<?>,
so I have to add asInstanceOf[].
otherwise, i can't call build of a object with Any type .
What did you expect to see?
I think that forAddress might return ManagedChannelBuilder<? extends ManagedChannelBuilder<?>>.
What did you see instead?


2814
How to terminate a service call in ServerInterceptor.interceptCall1

What is the correct way to terminate a call to a service's method once ServerInterceptor.interceptCall finds that the request is invalid (ex. the client's authentication fails) and wants to stop proceeding with executing the method and return an error to the client?
Should interceptCall return some special listener? or it should throw some sort of Exception indicating an Unauthenticated access?


2815
Capture more information on error for debugging1

When an error is propagated to the application, it would be useful to have things like server IP address[1], the timeout of the call (deadline - now), and whether the error was generated on the server.
There is other information that gRPC doesn't have direct knowledge of being useful, like tracing ids. Either Metadata would need to be included in full (doesn't sound great to me, since that could include auth tokens) or we could allow interceptors to cheaply supplement the data.
Note that retries/hedging make "address" a bit more interesting.


2827
ContextStorageOverride unnecessary stacktrace logging2

IMO the printStackTrace during init of io.grpc.Context when no ContextStorageOverride class is found is not really adding anything useful and could be removed. (moreover it jumpscares me each time i start my app in intellij :-)


2828
KeepAliveManager is not apply to ConnectionHandler in netty transport2

What version of gRPC are you using?
GRPC 1.2.0
What JVM are you using (java -version)?
1.8.0_112
What did you do?
I am try to make KeepAlive work with netty transport just now(grpc-java 1.2.0), and after some function test, i think the KeepAlive feature still not work functionally.
Debugging the code(io.grpc.netty.NettyClientTransport#start):
So, we known the KeepAliveManager only make effective in io.grpc.netty.NettyClientHandler instance. But the code showing the creation of io.grpc.netty.NettyClientHandler always receive a null keepAliveManager.
Probably because the keepAliveManager field is assigning in the end of io.grpc.netty.NettyClientTransport#start() call.
Associated commit: #2729: the commit resolve the problem of NPE(#2726)
cc @lukaszx0 @ejona86


2829
Define Context semantics on client-side2

Context's semantics is quite clear on the server-side. For each call:
ServerImpl creates the base Context.
ServerInterceptors can create new Contexts, which can be based on the base Context. The last created Context is what the server application sees.
Server application access the Context from thread-local. And if it initiates outgoing calls, by default they inherit the Context.
For the client-side, currently the Context semantics is:
The current Context when Channel.newCall() is called is the base Context.
ClientInterceptors create new Contexts, which can be based on the base Context. The last created Context is what ClientCallImpl uses
ClientCall.Listener is called under the ClientCallImpl's Context.
This is problematic. If a new call is made from the ClientCall.Listener, it will inherit the previous call's Context. If this chain of calls is unbounded, and every call goes through interceptor(s) that create Context based off the current Context, this will create an unbounded inheritance chain of Contexts. Because Context always keeps a reference to the parent Context, this will lead to memory leak.
Context is designed to work like a stack. The expectation is that a Context (except the background one) should eventually be popped out of the "stack". Infinite pushing without popping, like the case from previous paragraph, should not happen. IMO, this means Context should only be passed in one direction. On the client-side, the direction should be application -> interceptors -> gRPC core. Since ClientCall.Listener is the other direction, it should not be called under the top-most Context, but rather the Context that application sees, which is the pre-interceptors one. This will prevent the unbounded-Context-chain issue.


2832
Possibly infinite loop3

I have some grpc instance, after several days running, one cpu may running into full load at unperdicate time.
Usually one, and may be then grow to two or more.
What version of gRPC are you using?
1.0.3
What JVM are you using (java -version)?
java version "1.8.0_51"
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)
iteQueue.java:139)


2840
tcp connection do not close, ChannelOutboundBuffer and NettyServerHandler still hold memory 4

What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_112"
Java(TM) SE Runtime Environment (build 1.8.0_112-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)
What did you do?
I run stress test to hit grpc endpoint a lot and use VisualVM for memory leak detection.
debug message looks fine.
After a while I terminate the test and check tcp connection and memory usage.
What did you see instead?
After I terminate the stress test, I saw those class still hold memory(not releasing any memory after I terminate the test).
I also run the netstat to check the tcp connection.
I notice that even after I terminate the test, the number of tcp connection remained the same, the status are all ESTABLISHED.
What did you expect to see?
expect to see the tcp connection drop after test terminate.
expect to see io.grpc and io.netty class release memory.


2841
io.netty.handler.codec.http2.internal.hpack.Decoder removed in netty 4.1.9 Fina4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.1.2 / 1.2.0
What JVM are you using (java -version)?
java version "1.8.0_111"
What did you do?
If possible, provide a recipe for reproducing the error.
io.netty.handler.codec.http2.internal.hpack.Decoder been removed in the Netty 4.1.9 fina
What did you expect to see?
What did you see instead?


2843
Version 1.0.x and >= 1.1.0 are binary incompatible4

I tried using google-cloud-spanner which uses 1.0.3 in a project that uses 1.2.0. So gradle resolves this version conflict in favor of 1.2.0. Running the project then fails with a NoSuchMethodError.
Notice how it tries to call NettyChannelBuilder.build() with ManagedChannelImpl as a return type. However, in 1.1.0 the return type changed to ManagedChannel [1] and in Java Byte Code the return type is also part of the method signature.
I also opened an issue at Cloud Spanner googleapis/google-cloud-java#1776 (comment)
I understand that NettyChannelBuilder is marked experimental and thus it's technically fine to break this. Although I am not exactly sure if experimental also includes ABI compatibility.
@ejona86 @zhangkun83


2844
version compatibility: grpc java vs grpc go4

What's the compatibility of  grpc-java and  grpc-go in term of version?
Suppose that the our service is using grpc-go 1.0.4,  can we upgrade the client to use grpc-java 1.12 without any issue?


2847
Context in its own package?4

Although io.grpc.Context is shipped in its own artifact, and non-gRPC users can also depend on it, the package name still causes branding issue (census-instrumentation/opencensus-java/issues/162), and a practical issue with OSGI (#2727). We may consider moving it into its own package and splitting it completely from gRPC.
We have two questions to answer:
What should the new package name be? Probably something starting with com.google, but probably not com.google.common.context because it collides with a Google's proprietary context class.
How to bridge the old Context and Deadline to the new ones.


2848
Delete ResolvedServerInfoGroup and ResolvedServerInfo4

This should be done after the release that deprecates them.


2856
Incorrect ClassLoader (need ability to select/configure)5

In ManagedChannelProvider there is the function below to determine which classloader to use for loading the channel providers:
Because this is all setup in the static initializers, there is no ability to change the classloader used. When using custom classloading (URLClassLoader for example), I don't want the threads classloader -- I want the classloader that loaded this class (essentially I want the isAndroid() logic when not in an android app).
Not sure what the community's preferred solution would be, but a few options are: offer a configuration parameter to change the selected classloader, don't set the classloader in the static initializer section to allow overriding, expose the ClassLoader as a parameter of the builder so the correct ClassLoader can be passed in.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
1.8.0_51
What did you do?
The Thread's context classloader is always used (non-Android)
What did you expect to see?
Ability to override classloader used for providers
What did you see instead?
ClassLoader is pinned in the static initializers, preventing any override or configuration ability


2861
Tracking issue for StreamTracer APIs being experimental6

No description provided.


2862
Don't block for settings frame6

We are using gRPC 1.0.5. We server is implemented in Go and we use Java client. We are trying to use the wonderful https://github.com/soheilhy/cmux library to run both the grpc server and grpc gateway server on the same port. The issue is since Java gRPC client blocks until it receives a SETTINGS frame from the server, cmux has to do additional processing which results in very high cpu usage.
soheilhy/cmux#40 (comment)
My question is can Java clients can not block for SETTINGS frame and be more like go clients?
cc: @soheilhy, @sadlil


2865
Rare race condition in Client6

While more prominent when using compression, this race occurs without it as well.  The typical race looks something like:
Client starts and RPC
The transport to the server is not yet available, so a DelayedClientTransport is used.
The server handles the RPC and sends back headers and a compressed message.
The client sees there are headers, and begins executing the queued stream callbacks, on the channel executor threads instead of the transport thread
The client sees the Data frame, and tries to decompress it on the network thread.  *This fails since the headers from 4 have not yet been processed.
The stream has already failed, but the queued callback for onHeaders() is finally executed on the app thread.
This is the root cause of #2157.  As mentioned, this isn't just for compression.  ClientInterceptors will see headers after data has been received.   The solution (temporary?) seems to be to move OkHttp to used AbstractClientStream2 in #2821, and then move decompression from ClientCallImpl to the stream.  That will fix the decompression, but not interceptors.


2868
KeepAliveManagerTest should use FakeClock.ScheduledExecutorService6

Current tests in KeepAliveManagerTest are using mocked Future and run scheduled task manually, which is not a correct way to test.


2873
InternalSubChannel doesn't comply with the connectivity state spec7

When receiving a GOAWAY (transportShutdown() callback), InternalSubChannel unconditionally transitions to IDLE. However, the spec says
READY transitions to TRANSIENT_FAILURE on "any failure encountered while expecting successful communication on established channel."
"Channels that receive a GOAWAY when there are no active or pending RPCs should also switch to IDLE".
InternalSubchannel needs to look at the status passed to transportShutdown():
If it's not OK, according to Rule 1 above, the new state should be TRANSIENT_FAILURE
If it's OK, then it's a GOAWAY.
If the in-use state of the subchannel is false, according to Rule 2 above, the new state should be IDLE.
Otherwise, the spec doesn't say what the new state should be. Apparently it cannot stay in READY. It cannot go to TRANSIENT_FAILURE either because it's a GOAWAY, not an error. This part of the spec should be revisited.


2878
Reset connection by peer 7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0
What JVM are you using (java -version)?
1.8.0_40
What did you do?
If possible, provide a recipe for reproducing the error.
add log in my web application, and deploy it to production sever.
always get error message as below. we cannot know which/where method throw out.
after a lots of error message throwing out, we can get "out for memory" error message and server is down, need to restart to to recover it.
error message is
Transport failed
What did you expect to see?
What did you see instead?


2883
Unimplemented channel state API is not documented as such8

Until #2292 is resolved, getState() and notifyWhenStateChanged() always throw UnsupportedOperationException. The documentation should call out that it isn't implemented, especially since not even LoadBalancer is using the API at this point.
I had thought this was already done, but I couldn't find where.


2884
Dns rr balancing does not refresh after dns change8

grpc-all 1.2.0
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
Hi. I use grpc RoundRobinLoadBalancerFactory and DnsNameResolverProvider. As well I use docker swarm. When i do replica of my service, I see that dns has second entry of my service, but grpc client to this service does not see it and not balancing. I has networkaddress.cache.ttl=10 in jvm for this service and -Dsun.net.inetaddr.ttl=10. But if I kill all my instances and start it again with two nodes at the same time, then client will see 2 dns entry and rr well.


2885
Many TCPIP connectons in established state8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0 The latest I think.
What JVM are you using (java -version)?
java version "1.8.0_65"
Java(TM) SE Runtime Environment (build 1.8.0_65-b17)
Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode)
Linux Fedora 25 client.
Going to server in docker that is GOLANG
What did you do?
On the client I have 9 different types of connections. On 8 of them I reuse the respective  channel for all request (8 different ports/ 8 channels created) Never shutdown. One I do a shutdownNow on the channel after each request, create a new channel for the next request.  The code for the channelBuilder is identical for each except the forAddress/port part.  On all of these there are many requests.  If I stop my client before it terminates and using lsof MANY connections established with the 8 I reuse the channel on. I'm guessing there is one connections per each request.  The one where I shutdown there are none listed
What did you expect to see?
I expected to see 8 at most TCPIP connections established.  I waited for 10 minutes and not one of the connections were dropped.
What did you see instead?
From this link
As said, MANY connections  established  to the same endpoint
All the connections are working just fine sending and receiving back the data as expected.
So the issue here is just why all these connections ? When and how will they get reclaimed ? Do I need to shutdown the channel after each request and create a new one like the one that's not seeing this issue?


2888
Changing CXXFLAGS and LDFLAGS is ignored due to Gradle daemon8

Apologies for the length, I've tried to provide as much detail as possible.  I'm trying to natively compile this on an nVidia Jetson TX2 board (aarch64)
What version of gRPC are you using?
What JVM are you using (java -version)?
OpenJDK Runtime Environment (build 1.8.0_121-8u121-b13-0ubuntu1.16.04.2-b13)
OpenJDK 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
Total time: 43.251 secs
What did you expect to see?
Successful build
What did you see instead?
In short:
despite protobuf being compiled & installed and CXXFLAGS and LDFLAGS being set.
Also tried adding the 4 exports above at the end of my .bashrc file as it seemed to have helped in [this issue] (#1346)


2896
AbstractClientStream2.GetFramer doesn't use statsTraceCtx9

GetFramer doesn't use the normal MessageFramer, so it should probably call statsTraceCtx and report the request message size and similar.


2898
NettyServerHandlerTest maxConnectionAge tests are flaky9

As seen at https. Linux on Travis-CI didn't fail and a re-run on Jenkins passed fine.


2901
"StatusRuntimeException: INTERNAL: HTTP/2 error code: INTERNAL_ERROR" ,"StatusRuntimeException:UNKNOWN"0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0, 1.2.0
What JVM are you using (java -version)?
1.8
What did you do?
I am running a gRPC-java server with multiple grpc services defined.
When running multiple stubs which multiple threads share, so multiple rpc calls simultaneously, I am seeing this exception below, the exception is only occasionally appear.
What is benchmark scenario?
my benchmark is a distributed program: one  client to three servers
question:
why the exception is only occasionally appear? Concurrency is too big?
mutiple thread can call the same stub object at the same time?


2905
 First received frame was not SETTINGS. Hex dump for first 5 bytes0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
openjdk version "1.8.0_111"
OpenJDK Runtime Environment (build 1.8.0_111-8u111-b14-2~bpo8+1-b14)
OpenJDK 64-Bit Server VM (build 25.111-b14, mixed mode)
What did you do?
I ran a grpc server and client.
When do call I see an error
What did you expect to see?
successful call
What did you see instead?


2907
Audit/Fix graceful client shutdown in Netty0

Based on https and the code, it seems that channel.shutdown() when using Netty transport kills open streams.
gracefulClose() calls close() which waits for gracefulShutdownTimeoutMillis. It seems we should either set the grace time to infinity or delay calling close until after all the streams are closed.
We need to investigate why AbstractTransportTest.openStreamPreventsTermination() failed to notice this.


2924
ServerCall.getAuthority() is experimental2

No description provided.


2929
Remove census.proto from grpc-services2

Once google/instrumentation-proto has a release exposing its protos, or the protos are available via some other released instrumentation package, the copy of census.proto should be removed from this repository.
I've filed census-instrumentation/opencensus-proto#31 to track this on the instrumentation-proto repository.


2931
The Java performance tests are failing at master in Jenkins3

Looking at https, for example, the log has multiple instances of
followed by hundreds of megabytes of


2932
OkHTTP should stop using SSLCertificateSocketFactory3

The next version of Android will not work with setting ALPN protocols using SSLCertificateSocketFactory.  Instead, the recommended way is to reflectively find setAlpnProtocols on the created socket, and not directly reference SSLCertificateSocketFactory at all.
From my understanding, setting the protocols using this class currently will become an effective no-op, because the protocols will already be set.
@kruton


2935
cause=io.netty.handler.codec.http2.Http2Exception: Header size exceeded max allowed size (10240)3

Please answer these questions before submitting your issue.
grpc async call  There really isn't any special options set on the channelbuilder
except usePlaintext it does have that set to true but a the moment not sure why.
The scenario this is running on works for all systems I'v but on these vms.
Ubuntu vm 16.04.
Is there some way to increase that size.
I can't imagine that the packet size would be any different between these system .. it's running the same test.  Is there any other reason this exception might happen?


2936
upgrade netty.tcnative to 2.0.0.Final to overcome collisions3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0 ( in google-cloud-java )
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
included gcloud-java with rpc into an context that already uses tcnative - spring boot in this case
What did you expect to see?
the application should be able to find and use the native driver
What did you see instead?
An incarnation of the following issue -


2937
Use CodedInputStream.newInstance(ByteBuffer) for non-segmented messages3

This is to improve the decode performance of small messages (<16 KB) to avoid a message-sized allocation and copy.
Protobuf already has an optimized code path for decoding a direct ByteBuffer. We currently copy to a byte[], but that could be avoided because small messages will commonly be in a single ByteBuffer.
This will require adding a new interface for retrieving the ByteBuffer from the InputStream. I'm uncertain whether the interface should support returning multiple ByteBuffers.


2939
GrpcHttp2HeadersDecoder uses netty internal classes and fails with netty 4.1.103

Expected behavior
Due to an endianess bug in netty I have to use the fixed version netty 4.1.10
Unfortunatly GrpcHttp2HeadersDecoder references:
which is gone with netty 4.1.10
Actual behavior
Execution fails with:


2940
Unix Domain Socket: UnsatisfiedLinkError4

What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_111"
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
What did you do?
What did you expect to see?
Successful creation of a ManagedChannel on Unix Domain Socket.
What did you see instead?
Throwable is launched:
note: If I use TCP instead, it works:
My netty dependencies are (gradle project):
I'm shading io.netty to io.netty.shadednetty using shadow plugin as I have other netty dependencies in the project.


2942
CallOptions.Key should document that it uses instance equality4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_45-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Client code wants to add value in CallOptions during grpc call for customized load balancing, similar to:
but as the SubchannelPicker.pickSubchannel(PickSubchannelArgs args) wants to retrieve the value:, but get "defaultValue" instead.
What did you expect to see?
What did you see instead?
Cause
Problem is CallOptions.getOption:
the CallOptions.Key didn't implement hashCode and equals, so even two Key objects with exactly the same values won't match each other.


2951
io.grpc.testing.integration.ProxyTest.smallLatency is flaky5

This is a re-appearance of #2176, but that one is so old I feel bad with reopening it.


2953
Request streamObserver can still call onNext a million times after stream is closed without being aware of that5

For client streaming call, once the RPC is established, even server is shutdown, the client can still (mistakenly) keep calling requestStreamObserver.onNext() for a million times, and gRPC lib just silently ignores them.


2959
Verify binary header base64 encoding/decoding against grpc spec.5

The spec says:
Implementations MUST accept padded and un-padded values and should emit un-padded values.
There should be a unit test to verify that's the case.


2961
Maven dependency conversion issues6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
1.8.0_121
What did you do?
mvn compile
If possible, provide a recipe for reproducing the error.
Have the following dependencies in Maven:
Looks like artifact com.google.api.grpc:grpc-google-common-protos has a dependency
on grpc-all:1.0.1 which causes a convergence issue if you have the above dependencies and you use the dependency enforcer plugin in Maven.
The workaround is to add grpc-all as an exclusion for that dependency which is always a bit scary.
What did you expect to see?
No dependency conversion issues.
What did you see instead?
Dependency conversion failure in Maven.


2962
 Channel closed while performing protocol negotiation6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_131"
What did you do?
If possible, provide a recipe for reproducing the error.
If I do:
and then,
Gradle is no longer run automatically. Make sure to run
Running test empty_unary
Shutting down
What did you expect to see?
What did you see instead?
The error:
Gradle is no longer run automatically. Make sure to run
Running test empty_unary


2971
Why is java grpc so slow7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
latest java gRPC
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
I created a simple service which does oracle database query.  The client and server code is based on the HelloWorld example. I am running client and server on the same windows pc. The Oracle database is running on a server.
What did you expect to see?
On server side, the database query is 51ms, which is good.  On client side, I am getting execution time 400 ms.
What did you see instead?
The execution time from client side is very slow.


2972
Graceful shutdown gRPC in Tomcat7

My company uses WAR as the standard deployment mechanism so we use Tomcat deploying and undeploying application.
Since I provider gRPC server in Tomcat like below
@WebListener
and it occur Tomcat memory leak warnning
so what is right way to start and graceful shutdown gRPC in Tomcat ?


2976
FutureStub hangs when wrong netty version is used7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
netty4.version
What did you do?
If possible, provide a recipe for reproducing the error.
Accidentally use netty-codec-http2 4.1.9.Final in your pom
Create a future stub
Call stub.someOperation().get()
What did you expect to see?
The call should fail from the underlying ClassNotFoundException
What did you see instead?
A log message is printed to the console indicating the ClassNotFoundException
The call to .get() blocks indefinitely because the underlying future never returns
If a timeout is used when calling .get(), the request always times out
This problem was especially hard to diagnose because our logger is configured to exclude log messages from libraries (legacy code), so the ClassNotFoundException was never surfaced.
Findings
ChannelExecutor.drain() (line 89) eats all exceptions thrown when processing the outbound task queue when DelayedClientTransport switches from DelayedStream to NettyClientStream in DelayedClientTransport.newStream().
GrpcHttp2HeadersDecoder.<init> fails with a ClassNotFoundException when trying to load io.netty.handler.codec.http2.internal.hpack.Decoder.
Since the stream switch is itself is the task that fails, DelayedClientTransport buffers outbound tasks indefinitely, causing the request to hang.
Possible Mitigations
Propagate exceptions from ChannelExecutor.drain() in a "CompositeException" that aggregates all exceptions encountered. This will cause the client to explode, rather than logging and hoping someone is watching.
Fail conspicuously when starting gRPC with an incompatible netty version.


2977
Add package descriptions7

Multiple package descriptions are missing on http
Need to be filled up for release.


2981
grpc not compatible netty newer than 4.1.8.Final8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-b12)
What did you do?
If possible, provide a recipe for reproducing the error.
set gradle dependencis:
run the grpc service, and send a request to the server
What did you expect to see?
What did you see instead?
rpc calls successfully without the exception.


2982
Fail to to enable server-side keepAlive on 1.3.0 RELEASE8

What version of gRPC are you using?
GRPC 1.3.0
What JVM are you using (java -version)?
1.8.0_112
What did you do?
Try to enable server-side keepAlive(added in gprc-java 1.3) but the feature didn't work properly.
After setting server-side keepAlive to 180s and keepAliveTimeout to 30s. what i expect is the server will sending a keepAlive to client if the connection is idle(didn't sent any data during 180s). however. i did't see such ping packet on network.
Debugging the code(io.grpc.internal.KeepAliveManager), it seems the onTransportActive/onTransportIdle methods didn't be called by NettyServerHandler.  Unlike the NettyClientHandler, the keepAliveManager can't be triggered by stream's created/remove.
Only onDataReceived is called if data received by NettyServerHandler.
So, simply if the client didn't sent any data, the server wouldn't sent back any ping.
In this case, another way to enable server-side KeepAlive is set keepAliveDuringTransportIdle(permitKeepAliveWithoutCalls) to true, so when the io.grpc.internal.KeepAliveManager#onTransportStarted is called, it will schedule a ping future immediately.
However, the call of io.grpc.internal.KeepAliveManager#onTransportStarted didn't make effective too!
the only caller on server is io.grpc.netty.NettyServerHandler#handleProtocolNegotiationCompleted, which didn't invoke onTransportStarted because the keepAliveManager has not been initialized yet(the keepAliveManager always null during this method called).


2983
sending data using gRPC 8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
I tried sending data using gRPC via proxy.
I'm doing this inside a VPN and the proxy is the only way to send data to the outside world
What did you expect to see?
The message shouldn't reached the server side
What did you see instead?
A SSLHandshakeException during the protocol negotiation.
This was the error I got:
javax.net.ssl.SSLHandshakeException: error:10000410:SSL routines:OPENSSL_internal:SSLV3_ALERT_HANDSHAKE_FAILURE
It was caught in the ProtocolNegotiators class under method userEventTriggered method.
Thanks


2984
Scala: Context propagation and async interceptors8

I want to pass some values from interceptor to rpc handler. I've read that this can be done with contexts. But the problem is, that my interceptor is asynchronous, i.e. it "waits" for the future to resolve before calling next listener. The context is lost in this situation. My code is in Scala:
The problem is that BOTID_CONTEXT_KEY.get is null in RPC handler, even when the future was resolved and the not-null value was set.


2985
grpc-all brings in both protobuf-java and protobuf-lite8

grpc-protobuf depends on protobuf-java and grpc-protobuf-lite depends on protobuf-lite. Although grpc-protobuf depends on grpc-protobuf-lite and excludes the protobuf-lite dependency, that does nothing for grpc-all which depends directly on both.
We should probably remove the explicit dependency of grpc-protobuf-lite from grpc-all, or add in an exclusion for protobuf-lite.


2986
grpc-cli return Received an error when querying services endpoint.8


add ProtoReflectionService after my service
return
Received an error when querying services endpoint.
io.grpc.examples.helloworld.HelloWorldServer is the same problem too


2989
Cannot upgrade to Protobuf 3.3.08

As of protocolbuffers/protobuf@c2b3b3e Protobuf is depending on Guava 20, while gRPC is stuck at 19.0 for compatibility.
@xfxyjwf and @ejona86 fyi


2993
KeepAliveManager IllegalArgumentException scheduling ping9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0 Release
What JVM are you using (java -version)?
java version "1.8.0_45"
I'm trying out the client-based keepalives and KeepAliveManager attempts to schedule delayed pings in the past, resulting in an IllegalArgument: delay: -42540410 (expected: >= 0) on line 89.  This could be fixed with a Math.max(X,0) wrapped around the call, but I'm guessing there's something else going on.
FWIW, I've configure the client with an idle timeout of 30s and a keepalive of 90s. The server is set with a permitted keepalive time of 1m.  The RPC channel is basically idle, I'm using a long-running, streaming RPC call to await some notifications.


2994
[Question] How to disable some logs?9

What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
Hi,
How can I disable logging such as the following?
Many thanks,
Marc


2995
GrpcServerRule doesn't support interceptors9

What version of gRPC are you using?
1.2.0
We have interceptors which catch our internal exceptions and serialize them as GRPC trailers; these are then deserialized on the client and used as the cause on the Status.
There isn't anyway to add interceptors when using the GRPCServerRule and we can't see anyway to set the cause of the Status passed to onError by GRPC.


2996
Running gRPC with Tomcat is problematic9

I ran into this issue trying to use the Google Cloud PubSub API from a Spring Boot app, using Tomcat by default. The issue is explained here.
Jetty ALPN/NPN has not been properly configured
A workaround is basically to use Jetty instead of Tomcat. However, ideally this should work with Tomcat too.
After reading around a bit, I tried pulling in the netty-tcnative-boringssl-static dependency, and org.eclipse.jetty.npn.npn-api since the code appears to be checking for a org.eclipse.jetty.npn.NextProtoNego class in the classpath, to no avail.
What can be done to make this work with Tomcat as well?
What version of gRPC are you using?
What JVM are you using (java -version)?
1.8.0_121


2999
Any plan upgrade to OkHttp 3?9

As title.


3005
ConnectivityStateInfo never update when using RoundRobinLoadBalancerFactory0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
integrate grpc with spring-cloud-eureka
What did you expect to see?
I have done it with grpc 1.0.0 and spring-boot 1.5.2.RELEASE.
everything is ok.
What did you see instead?
But when I try to update grpc to 1.2.0. client can not connect to server.
Then I found the cause.  In class RoundRobinLoadBalancerFactory, subchannel is initialized as IDLE and never updated.
But when client try to connect server, method filterNonFailingSubchannels will retrieve channels of which state is READY.
How can I trigger the updating of subchannel's state?
to reproduce my issue.
install this project to integrate grpc and spring-cloud-eureka.
Thanks a lot.


3007
Netty caused "onStreamAllocated was not called, but it seems the stream is active"0

Reported by https
Seen in grpc 1.3.0


3010
java.lang.NoClassDefFoundError: io.grpc.ManagedChannelBuilder1

What version of gRPC are you using?
v1.3.0
What JVM are you using (java -version)?
1.8.0_45
What did you do?
I created a library project that sends data to server over GPRC. I tested it as a module dependency on a sample project and it is working fine. When I take the aar file and add it as a dependency on apps, the app is crashing.
What did you expect to see?
The app should run without crashing as it runs when I add it as a normal module dependency.
What did you see instead?
I get a crash with trace
My library project gradle file looks like below


3011
toString not include the field which type is map?1

in my java code, I had put map into mapValue,
but when i call toString(), the field mapValue is excluded.
And I print toString, stringValue return
these form is not human readable
Have one method can log all message in human readable form


3012
how to build grpc-java for mips64el 1

When i build bazel, it depends grpc-java-plugin. But i build grpd-java git source code get error,
Could you give me some ideas for building it?


3013
SECURITY.md references non-existing ServerCall.SSL_SESSION_KEY1

The Security.md file refers in Section "Mutual TLS" to ServerCall.SSL_SESSION_KEY to get a handle to the SSLSession in use.
This constant does neither exist in the current Master (commit 5dc8a12 at the time of writing), nor in
the 1.3.0 release.
To circumvent, I iterated over all keys and
does the trick, but having a proper constant would be nicer and stable. In addition,
in the very same session could / should be fixed to
with kind regards,
daniel heldt


3017
Duplicate headers causes c-core failure1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
1.8.0_121
What did you do?
If possible, provide a recipe for reproducing the error.
I made a server interceptor as follows:
What did you expect to see?
A caller of this service to get a response that has been proxied through to a different backend target.
What did you see instead?
This works in Java, but not in c-core from the client side.  As a result of forwarding the proxy target response headers, there ends up being 2 entries for "content-type"  Java clients are okay with this, c based clients are not.  I'm not sure who is "right" here as the spec is ambiguous as to the desired behavior if there are multiple headers for the same key(and in this case, their values are identical as well).  My fix for now is to simply send a new Metadata() rather than forwarding headers, but this might lose some custom headers from the proxy target.  I also considered doing a headers.removeAll(GrpcUtil.CONTENT_TYPE/ENCODING_TYPE/ETC) but since those are in the internal package I didn't.  I'm wondering what your thoughts are on how I'm doing this.  Maybe there's even a trick where I could pull this off at a pure bytestream level so my proxy isn't parsing the bytes at all?


3020
[Question] Catch exceptionCaught() event was fired, and it reached at the tail of the pipeline2

What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Connect to a Unix domain socket that is not existing anymore with the following:
Then those WARN will be produced in the output:
It usually means the last handler in the pipeline did not handle the exception.
How can we handle those exceptions or make them silent?
Many thanks!


3023
Excessive Logging?2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
Set a deadline in an interceptor higher than context deadline.
What did you expect to see?
The lower of the two enforced.
What did you see instead?
The lower of the two enforced, with a lot of logging :)
Is this intentional to log at INFO, and if so, should I just change my logging config to silence this class?


3025
Stop telling people Jetty ALPN has not been configured2

If both OpenSsl (tcnative) and Jetty ALPN are unavailable then we end up failing with "Jetty ALPN/NPN has not been properly configured". We should tell them to configure tcnative, and not encourage the use of Jetty ALPN.


3027
Grpc.Core.RpcException method is unimplemented with C# client and Java Server2

I am using grpc 1.3.0 on both Java(1.8) server and C# client.
I implemented a simple service using protobuf and grpc-gen. The C# client and Java Server both have the same .proto file. Using java client everything works fine but when using C# I get the following error:
Grpc.Core.RpcException Status(StatusCode=Unimplemented, Detail="Method tourism.RemoteService/Login is unimplemented")
Anyway the server receives the request, logs the information that was sent in the request but then throws an exception, probably because the client stopped running.
I've tried mulptiple projects and changed the service , .proto file, the port.


3032
OkHttp is incompatible with newer C-core binaries3

As reported by grpc/grpc#11258. This is caused by grpc/proposal#19 and a bug in the OkHttp transport that doesn't ignore unknown settings frames (as required by the HTTP/2 spec).
It's unclear how this wasn't caught in the integration tests.


3033
Too Many Logs 3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
Not sure.
What did you expect to see?
No logs.
What did you see instead.
Unfortunately, I have had no success. Has anyone else seen this issue or know of a solution?


3034
SerializingExecutorBenchmark fails to run3

It appears it was broken on the initial commit a4d698f. It's not quite obvious to me what executor was intended to be used.


3035
hbase-client-1.3.1is protobuf-2.5   conflict with  grpc-1.2.0 is protobuf-3.2  ,so how can  I use this two package in one procket3

my pom file:


3041
Netty does not support TLS on Android4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Currently i'm using gRPC 1.3.0
What JVM are you using (java -version)?
Using openjdk 1.8.0, Android version 25
What did you do?
If possible, provide a recipe for reproducing the error.
I'm trying to create a secured server on an android device. To do so i created the following method:
The thing is, when I compile the project it returns an error "java.lang.IllegalArgumentException: Jetty ALPN/NPN has not been properly configured."
I tried to insert a compile dependencie on gradle (  compile 'org.mortbay.jetty.alpn:alpn-boot:8.1.11.v20170118' ) but when I try to run the project it gives the error:
Error converting bytecode to dex: Cause: Dex cannot parse version 52 byte code. This is caused by library dependencies that have been compiled using Java 8 or above. If you are using the 'java' gradle plugin in a library submodule add targetCompatibility = '1.7' sourceCompatibility = '1.7' to that submodule's build.gradle file. ...while parsing org/eclipse/jetty/alpn/ALPN.class
What did you expect to see?
No error.
What did you see instead?
java.lang.IllegalArgumentException: Jetty ALPN/NPN has not been properly configured.


3046
OkHttp exception logging level too high?4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
1.8
What did you do?
If possible, provide a recipe for reproducing the error.
Normal usage
What did you expect to see?
No logs
What did you see instead?
It looks like the socket is already dead and the close call here throws as a result
It isn't clear to me that this needs to be a WARNING since the exception is coming from us trying to close a closed socket.  Maybe other failure modes here should be a warning, but should we maybe inspect the SocketException type specifically and log at FINE if the message is "Socket closed" ?


3049
mvn build problem4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
I use mvn to build my project and protobuf-mavne-plugin to generate code as the grpc-java/READMME.md guide. The config is shown below. I show all the pom files
in next comment.
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
I want to creat a new project in Opendaylight which will use gRPC/protobuf. I creat a project framework.
Becasue the proto file which I needed haven't finished, so I copy the example/helloworld.proto and HelloWorldClient.java to my project, and then I try to build. But, it failed.
What did you expect to see?
What's the problem below? How to solve?
What did you see instead?




3054
Status.withCause() is not effective5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_51"
Java(TM) SE Runtime Environment (build 1.8.0_51-b16)
Java HotSpot(TM) 64-Bit Server VM (build 25.51-b03, mixed mode)
What did you do?
In server interceptor, I close ServerCall and set a Status with Throwable instance:
In client, I use Status status = Status.fromThrowable(e); to get the Status returned from server.
status.getCode() and status.getDescription() can get the correct value , but status.getCause() is always null.
What did you expect to see?
In client, I can get the correct Throwable instance rather than null by status.getCause()
What did you see instead? staus.getCause() is always null


3056
grpc-netty:jar:1.3.0 is using a buggy netty package?5

why client is using http2 when i want it to use socket to connect unix domain?
The above is how I setup my client to connect to the rpc server based-on unix domain.
But I got the following exception.
I can I configure my client to connect to the unix domain?
Update 1
After some digging, I found that at this line:
which is in package:
There PriorityQueue is an interface which cannot be instantiated.
This might be a netty bug?
Update 2
it is io.grpc:grpc-netty:jar:1.3.0 that is using the buggy netty package.
Update 3
This bug is introduced in this commit:
and it was fixed in this commit:
which is supposed to be in 4.1.11.Final.
I donot know how to check whether that commit is in that release, it needs to confirm.


3057
what is the best practice to handle such kind of traffic?5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.0.0
What JVM are you using (java -version)?
JDK1.7.0_79
What did you do?
when I run top, I found about 100 thread are running(or waiting) in our GRPC server.
What did you expect to see?
I am not sure this is normal. Will this cause too much context switch?
What did you see instead?
As above.
More details about our application
We build a queue service with gRPC. A bout 1000 nodes(VM) are sending request to our gRPC server with "while(true)" and only several of them could get the real traffic.
We choose the default server, i.e. netty to serve that kind of traffic. So, what is the proper config or coding we should use?
Another question is that we shared the "ManagedChannel" object in about 200 nodes(they may use this object concurrently) and build the stub in each call. Is this the right way to use?


3059
ServerStreamListenerImpl closing ServerStream in unsafe way5

This is not an actual problem because of the way stubs are implemented today, but the code can potentially allow the below to happen:
ServerStreamListenerImpl is executing in the network thread (in the case of the direct executor) or in a application thread (via JumpToApplicationThreadServerStreamListener in the case of an application thread pool). ServerStreamListenerImpl.messageRead can detect an inconsistent gRPC protocol state, and close the ServerStream. This is a problem because the user application responsible for sending data (a different application thread from the JumpToApplicationThreadServerStreamListener) can be in the middle of working with the stream.
A possible fix is to treat this particular invalid gRPC protocol state as a special case, because for clientSendsOne methods, we can require the client to halfClose before we trigger the application code. This allows us to detect the problem in the stub before the application gets triggered, and we avoid any synchronization concerns. We should investigate further into other inconsistent states we want to detect, and make sure this strategy of moving it to the stub also works.


3061
OverrideAuthorityNameResolverFactory fails to forward NameResolver.refresh()6

It seems we should create a ForwardingNameResolver and use it in OverrideAuthorityNameResolverFactory. Let's keep the new forwarding class internal for now.


3077
grpc bundle7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
I use mvn to build my project and protobuf-mavne-plugin to generate code as the grpc-java/READMME.md guide. The config is shown below.
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?  (Sorry for my poor English.)
I want to creat a new project in Opendaylight which will use gRPC/protobuf. The environment is apache/karaf, but these dependencies(grpc-netty, grpc-protobuf, grpc-stub) are only ordinary jar packages, I write these dependencies in my bundle pom file, when running it will give a note "jar is not a bundle". So I try to wrap these jar packages in a bundle,.
I use maven-bundle-plugin according to the guide.
Unfortunately, when running, it always give an error as below. After I  add  dependency which is about this package, it will give the same error but with another package name. For example errorprone,instrumentation,bootstrap, protobuf-java-util, netty and etc. There are so many dependencies, perhaps infinity, I think when I add a new dependency named A in pom file,  A's denpendecy will also need to be added.
could not be resolved. Reason: Missing Constraint: Import-Package: io.netty.buffer; version="[4.1.0,5.0.0)"
What did you expect to see?
How to slove this problem?Who can help me? How use grpc/protobuf in apache karaf?
What did you see instead?


3080
Memory leak when using Jetty ALPN SSL provider8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-1-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
We have observed a memory leak when using the Jetty ALPN SSL provider. This occurs when using a name resolver that returns multiple results, one of which fails to connect (in practice this was because of faulty firewall rules, but for the sake of testing it can be reproduced by just using a bad port number). I believe the managed channel will keep trying to open up a subchannel, but the callbacks in the ALPN.objects map aren't getting cleared.
I've created a minimal reproducer for this here: https
When left running overnight, the size of the map grew to over 2300 objects (since there's only ever one actual connection in this test, that's pretty clearly an issue).
This may be a bug in the underlying netty channel rather than gRPC's managed channel where it's not properly cleaning up its ALPN callback when this type of error occurs, but I didn't dig deep enough into the issue to be able to tell.


3083
Add unit tests to verify reads and writes are ignored after ServerStream#close 8

After ServerStream#close is called, any attempts to read from or write to the server stream should be silently ignored. Add unit tests to AbstractTransportTest to enforce this behavior.
(See also #3068)


3084
Potential deadlock due to calling callbacks while holding a lock8

InProcessClientStream and InProcessServerStream are synchronized on their own. InProcessClientStream.serverStreamListener is called under synchronized (InProcessClientStream.this), and vice versa.
If the application tries to call methods on ClientCall or ServerCall from within the callbacks (assuming that it has already taken care of the thread-safety of the method calls on "Call" objects), a deadlock is possible when direct executor is used. For example:
Thread1
Thread2
As locks are acquired in reverse orders from two threads, a deadlock is possible.
The fundamental issue is that we should not call into application code while holding a lock, because we don't know what application code can do thus we can't control the order of subsequent locking.
OkHttp has the same issue, because OkHttpClientStream.transportDataReceived(), which will call into application code, is called under lock.
We could use ChannelExecutor (maybe renamed) to prevent calling into callbacks while holding a lock.


3085
Allow choosing the ManagedChannelProvider based on the NameResolver8

ManagedChannelBuilder.forTarget knows the scheme of the target, but doesn't pass it to the ManagedChannelProvider.  This makes it hard for the service loader to pick a proper Provider, because it may pick incorrectly.
Consider passing the scheme to the MCP, so that it can decide whether or not its available.


3090
DNS creates unbounded number of grpc-default-executor threads, and can't be overriden9

What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
1.8.0_101
What did you do?
I'm running about fifty processes that use grpc to communicate with each other. The workload involves events that trigger bursts of all-to-all messaging between the processes, and thereby moments of high load. After each instance of this event, I see 5-10 grpc-default-executor threads being created per process.
I have supplied FixedThreadPools through executor() for both the server and client channels.
Why are grpc-defaut-executor threads showing up despite overriding executor()? Is this expected behavior?


3095
How to cancel a GRPC Server streaming call9

I made a Call to server. The server streams. I want to cancel the call from client.
How to cancel? No Method to cancel a call.


3097
No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-0ubuntu1.16.04.2-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
I want to creat a gRPC client in my project, but it failed and throw an exception as below.
Status: Failure
Exception:
my grpc and netty version config is shown as below.
What did you expect to see?
Who can help me to solve this probelm?
What did you see instead?


3105
Remove internal-only methods from testing package0

As mentioned in comments in #3099, there are some issues and limitation to the current unit test tools:
It's hard to test a user-defined generic interceptor.
People are abusing NoopClientCall, using it as an alternative of mock(ClientCall.class), which is as bad as a mock.
TestMethodDescriptors.noopMarshaller does not gain much benefit. It violates the interface's contract, it's equivalent to a mock(Marshaller.class), and it does not work in InProcess transport or interop test.


3117
Tracking issue for ServerBuilder.intercept() being experimental1

No description provided.


3120
StatusRuntimeException: INTERNAL: Received headers twice2

What version of gRPC are you using?
io.grpc:grpc-netty:1.4.0
What JVM are you using (java -version)?
java version "1.8.0_66"
Java(TM) SE Runtime Environment (build 1.8.0_66-b17)
What did you do?
Setting up a simple streaming test POC using dummy data. With the following rpc definition.
What did you expect to see?
Expecting to stream back a list of responses. To my test client .
What did you see instead?
The server seems to respond fine however the client complains about duplicate headers. With the following stack trace when run without warming up. After several requests it eventually goes away.


3123
Is grpc-java still 1.6 Compatibility 2

I found out in https
But in GRPC quick-start website, http, it required for version 7 or higher
Which one is right? It is different because of runtime and compile-time?


3124
Update ClientCall and InProcessServer javadoc wrt mocking2

The @DoNotMock annotation should really refer to InProcessServerBuilder instead of InProcessTransport, and InProcessServer should have a good example in its javadoc.


3125
Add CI testing for Bazel2

In #2975 we got Bazel support. We should have continuous testing with Bazel (per-PR would be nice, but at least on master).
Kokoro initially seems the easiest place for this, but that will be hard for an external contributor to do, since Kokoro as-of-yet still requires a Googler to do some operations. If we can get Bazel working on Travis-CI without slowing it down insanely, that could be an alternative. Maybe only build it on Linux, or use build matrix in some way.


3126
Channel state incorrect when creating LB2

(I've not confirmed all this behavior; some of what I say here could be wrong.)
The time during which the LoadBalancer is waiting for the initial set of addresses from the NameResolver should be CONNECTING. Right now it's likely to be considered IDLE.
Also, once the LB receives the addresses, the Subchannels need to begin connecting immediately (unclear if this is LB's job of Subchannel's). This happens today because the LB changes its picker and we drain the DelayedClientTransport, but there is a moment when the Subchannel's state is IDLE and so the LB's state will likely be IDLE.
I'll also note that exitIdleMode() does not exit IDLE (it does exit idle mode, FWIW), since only the NameResolver and LoadBalancer to be created, but the InternalSubchannel will be IDLE because the picker was never called to get the transport and so obtainActiveTransport was not called and so there won't be connection.


3127
maven's grpc plugin is unable to resolve google.protobuf.Empty2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
java version "1.8.0_111"
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
protoc version
What did you do?
mvn clean compile
What did you expect to see?
BUILD SUCCESS
What did you see instead?
I'm I able to resolve it or I have to define my own Empty message ?
Note that the google.api.http type is resolved successfully.


3128
Can I exclude proto files under protobuf-java.jar when shading jar2

Can I exclude those file when shading jar?


3132
Can I create client Channel from java Socket?3

Is there a way to create the ManagedChannel from an existing Socket object instead of calling ManagedChannelBuilder.forAddress(host, port)?


3134
Exception occours if client sends reset frame while the server is sending headers3

when I use grpc-go as the client and use gprc-java as the server to build a project, if the client sents a reset frame to the server while the server is sending headers, exception will occours(netty version is 4.1.8.final),
when the server receives reset frame  it will remove the stream from the streamMap, but  it will create the stream when it writes headers if it finds the stream is null.
here the netty will check whether the streamId is even, but the streamId from upstream is always odd.So is there any method to resolve this problem?


3141
No functional channel service provider found after shading io.grpc 4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4
What JVM are you using (java -version)?
1.8
What did you do?
I have a code base that relies on Guava 14.0 and I would also like to use gRPC in my project.
gRPC needs Guava 19.0, which is not compatible with Guava 14.0.
Following some instructions online https:, I tried to shade/relocate gRPC library using the following pom.xml file.
I manually rename affected classed in the files that protobuf generates. The project builds fine, but when I ran it, I got the following error msg:
As shown in the pom.xml, those dependencies have been added.
If possible, provide a recipe for reproducing the error.
What did you expect to see?
expect it to run without exceptions
What did you see instead?
The project builds fine, but when I ran it, I got the following error msg:
As shown in the pom.xml, those dependencies have been added.


3142
Java performance benchmarks dirty shutdown4

In most of scenarios, the java qps_workers don't seem to shutdown cleanly:
The log also has occasional  [GC (Allocation Failure)] messages:


3148
using protoc 3.3.0 generate wrong parseMethod?4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
grpc 1.4.0
using protoc generate version 3.2.0
using protoc generate version 3.3.0


3149
proto message using map NoSuchMethodError4

it seems invoke  CodedOutputStream.class in grpc-protobuf-lite



3152
proto-google-common-protos is built with Java 1.75

Tracking issue to follow-up on https. gRPC's status proto, and soon/now the example directory's error details proto (#3151), come from com.google.api.grpc:proto-google-common-protos, which is built with Java 1.7. My understanding is that this is fine as long as the proto-google-common-protos jar is bytecode compatible with Java 1.6, but this should be investigated.


3162
GrpcServerRule with directExecutor creates extra thread during teardown6




3171
I try to connect to server gRPC with socket NIO but server not response.7

I try to connect to server gRPC with socket NIO but server not response.
When client gRPC request to socket like that;
I am not sure about it. Please help.


3173
Create @GrpcClass annotation processor hook for generated source files.7

To write an annotation processor that further augments the generated source from the grpc protoc plugin is a little difficult.
Currently, I process @Generated annotations and search for value.
As an external example, looking at the new grpc-dagger in 2.11 (), the additional dagger code generation is triggered off of an annotation applied to the implementing class. It would be nice to have all the code generation based off of the gprc classes.  Right now it feels like a two step process.  Add the proto, generate the grpc stub, implement the stub, add the processor annotation, compile again for the additional code.
WDYT?


3175
com_google_protobuf() and com_google_protobuf_java() are identical7

If this was intended, documentation should be added. Otherwise one of them should be removed.


3176
Enable Stetho for Android by exposing OkHttpClient7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
Android's Java
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
Can access the underlying OkHttpClient
What did you see instead?
Can't access the underlying OkHttpClient


3186
java.lang.ClassNotFoundException when rebuild my connector8

Hi. I make grpc libs for project like connector. It contains server and client realizations. When I rebuild my jar lib, and restart my service with new jar, but other service keep old jar I see:
I use java 1.8_131 and grpc 1.4.0


3195
Implement compression interop tests9

There are four compression interop tests defined in interop-test-descriptions.md but not implemented for Java:
These should be implemented and enabled in run_interop_tests.py.


3200
wired build error in a grpc and protobuf project and the build tool is Basel0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.2
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
bazel build failed after we used maxInboundMessageSize(max) used in our project.
What did you expect to see?
successfully built since this API was brought since 1.1.0
What did you see instead?
bazel build failed after we used maxInboundMessageSize(max) used in our project.


3201
ClientCall.isReady() is true after ClientCall.halfClose()0

I have code like this for a client streaming call:
I found call.halfClose() to be called more than once (and thus crash). I would have expected call.isReady() to be false after call.halfClose() was called since after half-closing, we certainly can't send any new messages.
Thoughts?
P.S: I am using this API, cause I need flow control and the CallStreamObserver is marked experimental.


3207
Data race in TestServiceImpl0




3240
ClientStreamTracer instances are threadsafe, but mocks of it aren't4

In AbstractInteropTest,  instances of ClientStreamTracer are created using spy.  These instances are not thread safe and cause the race detector to complain about it.
ClientStreamTracer and the other stream tracers should probably be marked DoNotMock because the mocks will not be able to fulfill the API.


3244
ChannelExecutor is not threadsafe4

Found with TSAN:


3245
"gradlew installDist" gives error No tool chain is available to build for platform 'x86_64':4

I'm following https
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
When I run $ ./gradlew installDist on my Windows 10 x64, it throws exception
FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':grpc-compiler:compileJava_pluginExecutableJava_pluginCpp'.
No tool chain is available to build for platform 'x86_64':
But I did install Visual Studio 2017 Preview.
How to fix the issue?


3246
Android ClientInterceptor not working to add metadata ?4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0 on android .
What JVM are you using (java -version)?
java 8
What did you do?
If possible, provide a recipe for reproducing the error.
I am trying to add a custom header to my grpc call using metadata inside ClientInterceptor. I am unable to send as explained here ,
What did you expect to see?
I am expecting server to recognize this parameter and send extra data items.
What did you see instead?
When I use okhttp3 alone and send this as header "Grpc-Match-Metadata", "match.items" with requestbody. i receive the extra data as I expect . But am unable to get any extra items  in grpc call .
I might be doing some thing wrong . I appreciate if some one could point to it


3248
Context: alternative data structure4

Right now Context uses a linked list of mutations for implementing its mapping structure. This is serving us reasonably well as it has low mutation cost and is simple to implement. However, it may be using a noticeable amount of CPU time[1] and it is fairly easy to accidentally create very long chains when using async APIs (as discussed in #1926). The main thing we'd want from an alternative data structure is to scale in terms of number of elements instead of number of mutations.
For fun, I investigated binary trees, b-trees, b+trees, and hash trees as possible alternative structures. An order 3 b+tree and HAMT both look pretty reasonable in terms of simplicity (~200 lines) and allocation size per mutation. I think I like the HAMT most as I found it to have fewer/easier cases to consider.
There's no urgency to this, or very much evidence that it is necessary. But we've been discussing it some, so wanted a place to discuss and report some alternatives.
It's unclear whether this is Context's fault. There was a user that was always adding 4 keys, even though only 1 was changed. The user was cleaned up, and while a rough view of the data would seem to imply this improved the performance, there's a lot of guesswork involved. We really need more data of typical Context chain lengths in order to produce a useful benchmark and to help determine per-call costs.


3253
Logging all messages using ClientInterceptor5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_91"
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)
What did you do?
I'm trying to use interceptor to log all messages sent and received from a client.
The implementation of the ClientInterceptor looks like this
The first RPC i request after creating the channel is SayHello from the following service definition:
What did you expect to see?
When executing the SayHello RPC, I expect to see two messages in the log, one with the request message sent and one with the response message received.
What did you see instead?
I only see the request message, it seems that the execution of the interceptor thread hangs and the response message is never logged/processed.


3256
Passing CallOptions to ClientStreamTracer.newClientStreamTracer5

Any thoughts on passing the CallOptions into ClientStreamTracer.newClientStreamTracer?  We have an interceptor chain with roughly 10 interceptors.  The first interceptor sets a MetricsContext and our internal implementation of ClientStreamTracer.Factory on the CallOptions.  Each subsequent interceptor may add tags to the MetricsContext.  MetricsContext is hierarchical so we can have sub contexts for things like retries and hedged requests.  We'd need access the MetricsContext from our ClientStreamTracer implementation.  The contract would look something like,
public abstract ClientStreamTracer newClientStreamTracer(CallOptions callOptions, Metadata headers);
Alternatively, we could track our MetricsContext as described above but only specify the ClientStreamTracer.Factory in the last interceptor.  I'm not sure this approach will work long term as it sounds like your guys are leaning towards setting the ClientStreamTracer.Factory on the channel as opposed to the CallOptions (which I like as it would be more consistent with how things are done on the server).


3258
Implement flush coalescing in OkHttp5

OkHttpClientTransport currently forces the connection to use TCP_NODELAY: https
For my use case (and, I would argue, other Android "next billion users" use cases) prioritizing low resource usage over performance seems to make more sense, so I would like to see this option to be configurable. I agree that enabling TCP_NODELAY seems the better default in general: #256
In my case I have a good number of low-throughput streaming RPCs that will stay open until the connection is closed. Speed and latency are secondary, low resource usage and reliability are important. Most of the streaming RPCs are primarily intended to let the server stream any changes in system state. For my Android "next billion users" use case I expect the connection to break fairly frequently, at which point the client will re-establish the streaming RPCs, so that it can catch up with the server, and the server can resume streaming any changes in system state. Consequently the first thing that will happen upon reconnect is all the streaming RPCs piping their header information down the new connection. With TCP_NODELAY enabled I expect this to mean several packets PER STREAMING RPC. Without that flag I would hope to see no more than a few packets TOTAL. Because the overall throughput of actual state data is low for this system and connections could break frequently, I think this could have a notable effect on total mobile data used.
I am still in the design phase for the system and identifying the potential bottlenecks from the perspective of a new gRPC & HTTP2 user, so please excuse and correct any false assumptions. I realize I could probably use just one streaming RPC to pipe data down to the client, but that kind of defeats the purpose of a protobuf-based RPC design, as I have different types of data to send. Being able to squeeze the connection initialization data into a few packets would make the overhead more negligible.


3264
Client does not detect a truncated message at the end of stream6

As discovered during the course of #3145. The server does detect and fail in the case of truncated message frame ("Encountered end-of-stream mid-frame"), but client doesn't have such logic.


3266
Connections cannot be re-established after network loss/recovery 6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Ran a grpc-java client program with netty that uses application-level pings to a grpc-java server. Ran the client in a loop, it will ping, sleep, ping, sleep. If I disconnect the network, I get deadline exceeded (good), but if I reconnect the network, I continue to get deadline exceeded messages.
If possible, provide a recipe for reproducing the error.
What did you expect to see?
For new connections work successfully after the network was restored.
FWIW, while debugging the issue, I paused the ClientCalls thread and poked around for awhile, e.g. ~5-10 minutes. I didn't really find anything, but when I hit "resume", I saw a broken pipe exception (which I don't usually see, usually it's just the deadline exceeded), and then the connection started working. E.g. I don't want to lead you astray, but it seems like until this pipe was broken, the connection was not fully getting restarted.
Understood this may not be a grpc-java issue, but some underlying netty or even inherent TCP issue that I just don't understand.


3267
UNAUTHORIZED if Auth Server is down?6

We are using GoogleAuthLibraryCredentials to authenticate our gRPC calls and we sometimes have the case where the authentication fails, because the auth server is not reachable and then the call fails with UNAUTHENTICATED status code.
Some people on my team argue that it should fail with UNAVAILABLE, I personally think UNAUTHENTICATED makes sense, so that a user can distinquish between a call and auth having gone wrong. However, arguably [1] is not clear about this.
The discussion arose, because of retries. In Bazel, we want to retry certain status codes i.e. UNAUTHENTICATED if the server could not be reached, but not if it failed due to wrong credentials. Any thoughts?
cc: @ejona86 @zhangkun83


3268
Channel creation best practice6

gRPC version?
1.4.0
JVM
java version "1.8.0_102"
Case:
If possible, provide a recipe for reproducing the error.
What is the best practice with regards to a channel, when using multiple (10+) grpc stream services stubs.
The channel I am using has tls enabled and generally when making the initial connection takes a few seconds to complete the full handshake.
Question:
Should the ManagedChannel by created in a singleton and used via that on all the grpc stubs or should the channel builder be used for every stub in order to create a new channel.
I don't wish to go through the handshake every time, however I get random cases of unknown channel state where I don't get a error in the streamObserver, however nothing gets received on the server side either.
Issue:
This is specifically with regards to network connectivity changing causing the connections to drop and in my case not reconnect and no implemented option to get the channel state yet.


3269
Why does not implement Comparable for ByteString?6

I am looking for a proper way to make ByteString being comparable. I got one in my mind but it is pretty ugly. It would be super nice if ByteString implements Comparable.


3271
Possible to use a web browser client ? (ie. gRPC-Web)7

What version of gRPC are you using?
1.4.0
What JVM are you using?
1.8.0_66
What did you do?
Tried to use a web client which follows the gRPC-Web api. Specifically, i use the grpc-web client part generated from Typescript here.
What did you expect to see?
Would like to see grpc-java talk successfully with a pure web/browser client.
Is it currently possible ?
Any example available ?
What did you see instead?
Error in the form of a Http2Exception$StreamException  when calling a grpc endpoint made with grpc-java.
Thanks a lot for any help.


3272
Request with deadline cause to many GC overhead7

What version of gRPC are you using?
1.4.0 Release
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What the problem?
When uses deadline on each client call, gRPC creates TimeouOutExcepton before real deadline
occurs https
it's very expensive operation that also allocate not necessary junk for GC. In screen above you can see
That during 60 second gRPC allocate 786mb memory on fillStackTrace.
What do you think about move creation exception to place when it's really necessary? Yes in this case stacktrace will be different in case when deadline already expired and when deadline occurs after some time, but is it really make sense?


3273
Use service.load(class) instead of service.load(class, classloader) for OSGi compat7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
1.8
What did you do?
I'm trying to wrap GRPC jar to OSGI bundle. There is a problem of making java.util.service works in OSGI environment. The reason is GRPC use service.load api with classloader parameter, such as:
I'm using Apache Aries spi-fly to transferring  java.util.service to OSGI service. But unfortunately this plugin does not support the api service.load(class, classloader) now, and there is no other way to figure this issue out. Actually assigning  classloader is conflicts with OSGI in my opinion.
What did you expect to see?
It seems no necessary to assign classloader parameter when use service.load(), could we just use service.load(class)?


3274
Pings being sent too often by KeepAliveManager7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8
What did you do?
Enabled keepAliveTime of 20 seconds on the client, permitKeepAlive of 10 seconds on the server
Start the server w/logging in KeepAliveEnforcer
Start the client w/logging in KeepAliveManager
After ~3 pings, KeepAliveManager sends a ping after < 10 seconds, which is marked invalid by KeepAliveEnforcer
This happens a few more times and then more calm is sent
What did you expect to see?
Pings sent only every 20 seconds
You can checkout github.com/stephenh/mirror, the latest master has the reproducible error.
Here is the output of some logging that I added to KeepAliveManager:
You can see the 3rd ping is sent only 6 seconds after the 2nd ping.
My guess is that KeepAliveManager is not handling sendPing being scheduled multiple times, and so should check nextKeepaliveTime instead of just the state.


3277
Android O java.lang.RuntimeException: protocol negotiation failed7

I am getting handshake failure on all gRPC requests when using Android 8.0, I am not sure if it is a gRPC library issue or Android O preview.
What version of gRPC are you using?
1.2.0
What JVM are you using (java -version)?
Android RunTime (ART)
What did you do?
It can be reproduced by trying to make gRPC request in Android O
What did you expect to see?
Request goes through and server responds back
What did you see instead?


3278
CompositeReadableBuffer and GC overhead7

What version of gRPC are you using?
master branch
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What the problem?
Small messages send and receive via gRPC lead to many memory allocation via CompositeReadableBuffer. It's top by allocation in benchmark that send 32 bytes request and receive 16 bytes response.
I think we can reduce allocation if change logic of this line https because in this place creates temp CompositeReadableBuffer that uncessary https instead of it we can write at once in target buffer.


3280
Remove Google credentials from the core gRPC libraries8

Taken from #1914 to avoid throwing that issue off-topic.
@saturnism wrote:
Would it be possible not to have Google credentials in the core gRPC libraries? gRPC as a core RPC framework probably don't need Google credentials.
@ejona86 wrote:
@saturnism, only grpc-auth depends on google-auth-library-credentials. Also, "Google credentials" isn't in google-auth-library-credentials, but in google-auth-library-oauth2-http. CallCredentials is in grpc-core, so there should be no unnecessary dependencies.
@saturnism wrote:
it seems grpc-auth is only dealing w/ google credentials. @garrettjonesgoogle do you actually need this from gcloud-java? It was a discussion point of dependency conflicts.
grpc-auth feels very much core, as the core auth supplement library; is there a plan to add additional auth providers to grpc-auth?
would it make sense to have submodule e.g. grpc-auth-google? The point is that... if you need auth in gRPC, you don't necessarily need Google credentials.


3281
OkHttp: Log HTTP/2 HEADER frames8

The verbose logging output using Netty helpfully includes the content of the incoming and outgoing headers. These details should be added to the OkHttp logging, as its generally useful for debugging.


3284
Lack of cache increases Kokoro flakiness8

This is a grab-bag for any time Kokoro fails during downloading resources or similar. We cache dependency downloads on our other CIs, so such problems should be more rare. This issue should only be for flakes where caches on Travis CI or Jenkins would have been able to circumvent the failure.


3286
tls handshake error details are not reported to client code8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0
What JVM are you using (java -version)?
java version "1.8.0_101"
Java(TM) SE Runtime Environment (build 1.8.0_101-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.101-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Here is the code for reproducing the issue (I do not attach the proto definitions, you can replace them with any):
What did you expect to see?
I expected to get a StatusException with an SSLException as a cause containing details of what has failed.
What did you see instead?
I get
But without debug logging there is no way to see this exception, and even now I cannot match the StatusException with CertificateException.
Looks like this code:
in SSLHandler causes termination of all pending write futures, including the result of channel.write(NettyClientHandler.NOOP_MESSAGE) in NettyClientTransport::start, with a default exception, without passing the actual error to them.


3290
Prevent Access to "grpc-" headers9

Headers that begin with "grpc-" are meant for use by gRPC and not by other clients.  Using this as a namespace allows the gRPC team to add new headers without fear of colliding with another users headers.
To this end, such headers should be locked down from reading and writing in the library.


3293
Go to "permanent error mode" if ChannelExecutor throws exception9

As mentioned in discussion in #3288, it's questionable only catching instead of throwing exceptions in ChannelExecutor. Should we throw regardless or should we only log in production and throw in test evn?


3296
Sending Grpc Request in Appengine Java 8 Standard Environment Could Fail9

What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
Google-cloud-java has received issues () regarding sending grpc reqeust in appengine (specifically, using google-cloud-java Pub/Sub client library).  When initiating grpc connection in appengine, grpc picks up currentRequestThreadFactory for its thread factory (https).  This could cause appengine runtime to throw NPE (see below for a typical stack trace). A hack to force defaultThreadFactory to be used by Grpc seems to resolve this issue.
Sending Grpc request within Appengine request thread seems to be a valid scenario. Grpc should support it.


3297
Channel shutdown without calling shutdown()?9

We are sometimes seeing StatusRuntimeException with Status.UNAVAILABLE and the message Channel requested transport to shut down.  However, our codebase does not contain a call to ManagedChannel.shutdown(Now)(). We never close the channel.
Does gRPC ever invoke shutdown() internally i.e. in error cases - I always thought it doesn't, but my knowledge of internals is out of date.


3298
Correct way to interrupt client call from ServerInterceptor?9

What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0_111
What did you do?
I've made an interceptor that checks call metadata, gets custom token from it and if it's correct - continues the call, otherwise - interrupts it with Status.PERMISSION_DENIED. The question is - what is correct way to interrupt call chain in that case?
my interceptor looks like:
as I understand it should be fine, and it seems so. But when I launched ab -c 50 -n 100000 through my proxy where every request contains wrong token, I can see 1 or 2 log entries from my service that says, that it enters onNext() method on server side. My grpc service is defined as:
Server constructing code:
ServerBuilder.forPort(port).addService(new ProductsService()).intercept(new AuthInterceptor()).build();
if it's might be a bug, and not just some simple mistake, I'll provide more reproducible codes etc


3299
grpc-protobuf-lite 1.4.0 not resolve some classes on android9

What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
java version "1.8.0_144"
I generated .proto file with libprotoc 3.3.2 and followed java README.md, where I found notation about using grpc-protobuf-lite or grpc-protobuf-nano instead of grpc-protobuf for android client.
But in fact it won't compile, there are no such classes as ExtensionRegistry, GeneratedMessageV3, Descriptors etc.
Grpc-protobuf dependency on the other hand works well.


3304
Network retries or time outs0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0 on Android
What JVM are you using (java -version)?
1.8
What did you do?
I am trying to add a retry policy. It seems grpc after network failure doesn't re-connect immidiately even when network is back.
If possible, provide a recipe for reproducing the error.
disable network n keep on aeroplane mode
try to run the app
enable back network
You will see grpc doesn't connect back even when you retry so many times. it takes for 25-30 secs to retry again.
What did you expect to see?
grpc should connect immediately on network availability. I like to know the right amount of time for waiting .
What did you see instead?
it never connects back
Is there a way to configure the retries ? or to get to know the retry connection time ?


3308
after network had closed over 30 seconds , client receive server stream problem  0

but  client-side didn't get any further exception messages  before network recover or after
and didn't receive server-side any stream messages


3309
Custom gRPC marshaller for one of the service method0

What version of gRPC are you using?
Latest snapshot 02cb718
What JVM are you using (java -version)?
java version "1.8.0_144"
What the problem?
I have a grpc service with 9 methods. One of the method very hot because contails many many repeatable objects inside protobuf, instead of deserialize it to proto on server side, I want put request in bynary form to off-head structure, and then process it as batch sequential read from off-head structure.
For resolve problem describe above I want to override unmarshaller only for one of 9 methods, but generated code not allow do it easy and require copy-past whole generated class(ServiceImplBase implements io.grpc.BindableService) as a result adding a new method to my grpc service will bring pain.
To allow easier override marshaller maybe need change signature for generated method


3310
NettyFlowControlTest is flaky1

:grpc-interop-testing:test FAILED


3318
InputStream from MethodDescriptor.Marshaller does not close1

What version of gRPC are you using?
1.5.0 Release
What JVM are you using (java -version)?
java version "1.8.0"
Java(TM) SE Runtime Environment (build 1.8.0-b132)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)
What the problem?
I have a gRPC method with custom marshaller, that deserialize protobuf request from off-heap ByteBuf.
Marshaller looks like
Use netty ByteBuf as request required release resources. And I expected that gRPC close InputStream after send request, but it's doesn't happens. As a result of memory leak my service
that use gRPC client failed with OOM.
Recent access records: 4
I also recheck it via implement empty InputStream that log close method. And it method was not execute.
I think for resolve this issue need resolve this todo https


3319
Creating a channel with a tls address cause NameResolver issue on Android1

What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
I try to establish connection to tls address (https) with
but NameResolver cannot recognize such address. I tried the same with localhost, where NameResolver is not used and it works good. Proguard is off.


3323
Infinite cycle during parse client request2

What version of gRPC are you using?
1.5.0 Release
What JVM are you using (java -version)?
java version "1.8.0"
Java(TM) SE Runtime Environment (build 1.8.0-b132)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)
What the problem?
After minor change my proto request all of my request start failed with deadline.
Thread-dumps from server side show that root cause of this deadlines in parsing code
This cycle never completed, because try read zero bytes from InputStream
InputSteam contract say that read method will always return zero if reads zero bytes.
If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b.


3326
NettyServerHandlerTest keepalive tests are flaky since netty 4.1.142




3328
Mismatch in naming with bazel maven jars2

I am trying to use grpc-java in an existing project which uses bazel, java, and a bunch of jars from maven. I added this to my WORKSPACE:
The problem is that I use the migration-tooling project to add maven jars, and its naming for external jars does not match yours. For example, you call it @com_google_guava[1] but that project uses @com_google_guava_guava[2]. So if I try to use the omits, I get:
And if I remove the omits, my project references two different versions of guava and I get runtime errors (since this project uses guava 19 and I want 21).
Is it possible to switch the naming of external maven jars to match bazel's tooling?
Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?


3332
<RequestT,ResponseT>create(...) in MethodDescriptor has been deprecated3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0_102
What did you do?
gradle clean && gradle build
What did you expect to see?
No deprecation warnings.
What did you see instead?


3336
Failed to load any of the given libraries:· Issue #333

Please answer these questions before submitting your issue.
I've tried to use grpc-java library to connect sever side with SSL successfully in one lab, but when I change another lab to test that it was failure. I don't know whether the lab need to be set some environment variables or installed some rpms.
What version of gRPC are you using?
What JVM are you using (java -version)?
openjdk version "1.8.0_111"
OpenJDK Runtime Environment (build 1.8.0_111-b15)
OpenJDK 64-Bit Server VM (build 25.111-b15, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Try to connection with SSL.
Here is my netty pom.xml
What did you expect to see?
Connection with SSL works fine.
What did you see instead?


3337
springboot startup with java.lang.ClassNotFoundException: com.google.instrumentation.trace.TraceComponentImpl3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.3.0 1.4.0 1.5.0
What JVM are you using (java -version)?
jdk6 jdk7 jdk8
What did you do?
If possible, provide a recipe for reproducing the error.
startup springboot with log debug level
What did you expect to see?
not output debug exception.
What did you see instead?
but not release


3345
Disable hostname verification for NettyChannelBuilder4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_73"
Java(TM) SE Runtime Environment (build 1.8.0_73-b02)
Java HotSpot(TM) 64-Bit Server VM (build 25.73-b02, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Using certificated with
What did you expect to see?
Need some mechanism to disable hostname verification during SSL handshake.
What did you see instead?
We are using certificates having generic CommonName which doesn't reflect the hostname. And hence the hostname verification fails.


3347
NullPointerException: trailers4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0
What did you do?
Running my grpc services on DC/OS... it works just fine but on the error log I sometimes see this NullPointerException.
What did you see instead?


3348
Unable to Publish Message to Pub/Sub due to error No functional channel service provider found4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
1.7
What did you do?
If possible, provide a recipe for reproducing the error.
No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact
What did you expect to see?
I am trying to publish a message from java to Google Pub/Sub
What did you see instead?
Ending up with error.
Maven Dependency tree


3353
Resource leak in netty tests5

I haven't tracked down the responsible, but I ran with leak detection and found this:


3355
GRPCLB: drop doesn't work with wait-for-ready RPCs5

GrpclbLoadBalancer may drop (fail immediately) certain RPCs in order to shed load for the servers. It is done by returning a PickResult.withError(). However, withError() only fail fail-fast (which is default) RPCs, and will buffer wait-for-ready RPCs, because it is meant to signal transient failures. "Dropped" RPCs should fail immediately regardless of wait-for-ready, and should not be conflated with transient failures.
Options considered:
Add createFailingSubchannel() to Helper to be used for dropped RPCs. This would work but feel awkward, because nearly all methods on Subchannel don't apply to the failing Subchannel.
Add a new type of PickResult in addition to withError(), and will fail the RPC regardless of its wait-for-ready option. This sounds like a better option.


3356
Running grpc server on Android Platform5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5
What JVM are you using (java -version)?
1.7
What did you do?
If possible, provide a recipe for reproducing the error.
Goal
Run the HelloWorldServer grpc-java example in a system app running on a Marshmallow Android platform.
Steps
Follow the grpc-java documentation for retrieving and buiding the examples.  The build environment is created by sourcing the AOSP file build/envsetup.sh, then running the lunch command for our platform.  I'm guessing that you could use an emulated lunch platform or a Nexus/Pixel lunch platorm to recreate this step.
Use the jar files built from step 1 and necessary HelloWorld java file in an AOSP system app project which will create the HelloWorld grpc server just like the grpc-java example.  In the Android.mk file, proguard is disabled so nothing should be removed.  Here is the list of jars from step 1 that are included in the project:
More details can be provided as needed.
What did you expect to see?
I expected the HelloWorld server to properly start.
What did you see instead?
When the system app executes, I see the following message in logcat:
io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional server found. Try adding a dependency on the grpc-netty artifact
Note: This issue is similar to the close issue #2227  but in my case, I'm trying to build and run a system app on an Android Platform which I control/own.


3358
gRPC throws `io.grpc.StatusRuntimeException: UNKNOWN` with netty-4.1.145

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
Depend on Netty 4.1.14 instead of 4.1.11
Sample project demonstrating the issue: https
What did you expect to see?
A more obvious success or error message
What did you see instead?
There is a rather large set of exceptions being raised on a 200 response from the server. The same project runs successfully if I downgrade netty to 4.1.13.
Full exception:


3359
Census: enable requestz sampling for generated methods 5

Census has an open-source requestz implementation that can show traces of live, sampled and error RPCs. In order to sample RPCs, gRPC needs to call SampledSpanStore.registerSpanNamesForCollection() with any known method name. This is fairly expensive, thus should not be called on a per-RPC basis. A few options:
In a static initializer in the generated code. If we don't want to call Census directly from the generated code, maybe call Census code in a helper function in ClientCalls and ServerCalls which is called from generated code.
In MethodDescriptor constructor. This will be called once per method, which might slow start-up speed. This would also all custom-created methods to be registered, @bogdandrutu is this desirable, or do you only expect generated methods to be registered?
Option 1 sounds like a better option. @ejona86 WDYT?


3363
Tracking ForwardingChannelBuilder being experimental6

No description provided.


3364
Seeing lots of "failed to mark a promise as failure because it has succeeded already" warnings6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.6.0-SNAPSHOT (master branch, 8d6ff4c)
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Only appears at high load (one node sending a unary RPC each to a ~1000 other nodes).
What did you see instead?
A lot of log spam with the following:


3365
grpc.ssl_target_name_override6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
how to set  ChannelOption  grpc.ssl_target_name_override in java
i konw c# like this new ChannelOption(ChannelOptions.SslTargetNameOverride,"name")


3366
How to use the healthcheck service?6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
jdk1.8.0
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
I want to get the server instantaneous status .
What did you see instead?
I have seen the health.proto and  HealthServiceImpl.java  in gRPC 1.5.0,but I don't know how to use it.
Is this part of the code complete? If complete, how the client to get the server healthy status, is there any examples? If not complete, Is it being perfected?


3367
Grpc android client giving : "Protocol negotiation failed" when using grpc server behind AWS ELB.6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.4.0
What JVM are you using (java -version)?
java version "1.8.0_101"
What did you do?
If possible, provide a recipe for reproducing the error.
Deploy a grpc C++ server inside  AWS EC2 instance.
Make a ELB with a certificate using  ACM.
Use android client to hit the ELB domain name.
What did you expect to see?
Excpected response from grpc server
What did you see instead?
Protocol negotiation failed


3370
Netty server poorly handles unknown content type7

If the content-type is missing or unknown, the Netty transport sends RST_STREAM with REFUSED_STREAM. That's bonkers on multiple levels.
We should probably respond with HTTP 415 instead.


3373
Client close the TCP conneting When the right end is not reached7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC1.5.0
What JVM are you using (java -version)?
JDK1.8.0
What did you do?
If possible, provide a recipe for reproducing the error.
I create gRPC client and gRPC server in different host, I  broken network  to make the Network from client to server inaccessible.
What did you expect to see?
I want to see the client  can quickly respond to the service unavailable as far as possible,
What did you see instead?
I  see that the NettyClientHandler will do the onConnectionError after about 20 seconds, what Throwable it catch is
Then ManagedChannelImpl will handle the handleSubchannelState, make the subchannel to IDLE and try to reconnect. But I don't understand What's the mechanism? How does the client feel disconnected from the server network.
And is there some  methods that the client is able to perceive the server unavailable state more quickly!


3376
Client try tothe TCP conneting When the right end is not reached7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?


3377
gRPC client try to reconnect subchannel about 20 Seconds after I make the gRPC server network unreachable7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC1.5.0
What JVM are you using (java -version)?
JDK1.8.0
What did you do?
If possible, provide a recipe for reproducing the error.
1、I create gRPC client and gRPC server in different host,
2、Send message to server interval of one second
3、Disable network  to make the network from client to server unreachable.(unplug the server's cable)
What did you expect to see?
I want to see the client can quickly respond to the service unavailable as far as possible, rather than wait for about 20 seconds to know that the server is unavailable.
What did you see instead?
I see that the NettyClientHandler will do the onConnectionError after about 20 seconds, what Throwable it catch is
Then ManagedChannelImpl will handle the handleSubchannelState, make the subchannel to IDLE and try to reconnect. But I don't understand What's the mechanism? How does the client feel disconnected from the server network.
And is there some methods that the client is able to perceive the server unavailable state more quickly!


3378
Socket leak in client when server sends GoAway7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0 (previously 1.0.2)
What JVM are you using (java -version)?
Various versions of 1.8, this one 1.8.0_66
What did you do?
If possible, provide a recipe for reproducing the error.
Golang gRPC server configured with MaxConnectionAge set to 30s. Simple java main client:
What did you expect to see?
Max age is set low to exacerbate the issue, but is also seen over a longer period of time when run in production with a larger value.
On GoAway, the streams should be drained and the connection closed once gracefully finished. I expect to see no growth in count of grpc-default-worker threads. On the server side I expect to see no growth in grpc http2_client goroutines.
What did you see instead?
Every time max age is triggered, sending a GoAway, streams seem to be drained and unary calls fail. On retry a new connection and thus grpc-default-worker thread is created. Those threads are never cleaned up, even over the course of many hours. When the loop restarts a new connection is created, which results in a new grpc-default-worker thread. Therefore we see growth over time.
On the server side, we see a growth in grpc http2_client goroutines. They are all stuck on readFrame, waiting to receive a ping or EOF from the client.
Setting the GRPCMaxConnectionAgeGrace mitigates this a little, in that the server will force close the connections. However, this is not acceptable because sometimes we do have long running streams which we want to allow to finish gracefully.


3383
Netty{Client/Server}Transport.shutdown() has 5 sec timeout, which does not agree with the spec of the interface8

The transport shutdown() API specifies that existing streams continue, but the AbstractNettyHandler sets a GRACEFUL_SHUTDOWN_TIMEOUT = SECONDS.toMillis(5), so when Netty{Client/Server}Transport.shutdown() is called, it actually will kill the existing streams in 5 seconds.


3396
Following gRPC tutorial: Error: Could not find or load main class org.gradle.wrapper.GradleWrapperMain9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I've been following the gRPC java tutorial, after modifying the server and client classes, I tried to compile again with gradlew installDist and I get the following error:
Could not find or load main class org.gradle.wrapper.GradleWrapperMain
What did you expect to see?
Success compilation
What did you see instead?
The following error:
Could not find or load main class org.gradle.wrapper.GradleWrapperMain


3397
 The recommented way to use the gRPC in highly concurrent environments.9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC-1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
1、create a gRPC server binding a port  the server side
2、create a gRPC client of singleton pattern
3、start multiple threads to send messages simultaneously using the same client(Using blockingStub)
What did you expect to see?
I hope that the gRPC able to cope with a certain amount of concurrent pressure
What did you see instead?
when I use a threads to send messages  using the client, one "send to return" takes about 40ms ;
when I increase to 20 threads to send messages simultaneously using the same client, what time one "send to return" take increase to about 200ms;
I don't think the 20 concurrent  threads would have so big impact .
Are there any other parameters that need to be configured to improve performance in a concurrent environment? or  recommend way to use gRPC in a concurrent environment better?
Hope for answers.


3399
Tracking issue for full-stream compression being experimental9

No description provided.




3406
Investigate usage of deprecated ApplicationProtocolNegotiator0

In #3390 we ignored the deprecation warning. We need to investigate whether we need the checks (and so tweak netty to keep the API semi-public) or whether we want to just delete them.


3408
TransportTest.serverNotListening flakiness possibly due to recent changes0

According to @ejona86 this is likely not the same root cause as #1877 and is instead likely due to: 6ca91c4
The recent occurances:


3410
google-common-protos are not included in extracted-include-protos1

What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_144"
I don't know either it is protobuf or grpc-lite problem:
using annotation.proto from proto commons throws error, though it is included in libraries folder.
Also, extracted-include-protos (or extracted-protos) build directory does not include anything related with it.


3412
Compiler warnings in bazel1

What version of gRPC are you using?
Master at 6164b7b (waiting for the bazel naming fixes to be released)
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
We have configued a custom java toolchain in bazel so we can catch java warnings:
But now if we include the grpc-java rules, we get errors.
WORKSPACE:
It seems like it's trying to compile protobuf_java using our java toolchain (instead of just pulling in precompiled jars?).
Is there a way to prevent the compilation from using our java_toolchain? Or some other way to leave our warnings on, but not fail on grpc/protobuf?


3413
Document CallStreamObserver.request() thread-safety1

What version of gRPC are you using?
The javadoc for CallStreamObserver.request() makes no statement about thread safety. I see that the applicable implementations call request() methods that are documented as thread-safe, and that CallStreamObserver.request() is called as if it were thread-safe. I assume that this is meant to be a contract, as otherwise usage would be oddly complicated.


3420
Trying to get a basic Google Cloud Endpoints gRPC project working with an OAuth2.0 auth provider2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
We are trying to get  a Google Cloud Endpoints project with gRPC working with an OAuth2.0 authentication provider using ServiceAccountJwtAccessCredentials.
Below is the relevant piece of my Client code :
A question concerning this issue has already been asked by me in the google groups here: (https
What did you expect to see?
Currently  the audience that  is set by  ServiceAccountJwtAccessCredentials is being overwritten by the above line:
So instead of the audience (SERVICE_CONFIGURATION_NAME) that we set, we are obtaining a string like : https
Did not expect the GoogleAuthLibraryCallCredentials.java to overwrite the audience we set.
We were wondering whether ServiceAccountJwtAccessCredentials class is compatible with CallCredentials class or if there is another wrapper available to pass the ServiceAccountJwtAccessCredentials.


3421
First received frame was not SETTINGS. Hex dump for first 5 bytes2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Inside a test I ran a grpc server and 5 clients that accessed the server concurrently (all from the same IP; everyone with its own channel). This is only happening sometimes, looks to me like some kind of race condition within grpc.
What did you expect to see?
Successful call
What did you see instead?


3422
Resource leak in grpc 1.5.0 + netty2

Backend configuration:
As you see, the number of executors were limited. At one point single request execution started to get too much time on the backend (seconds), that caused executor starvation and resulted in the following stacktrace:
After request execution time was fixed, no more leak records were seen.


3423
How to match versions of com_google_protobuf and com_google_protobuf_cc2

If you want to use grpc-java in the same workspace as compiling C++ protos, you need to make sure the protobuf versions match. If you get the version wrong, your C++ builds fail with "This file was generated by a newer version of protoc".
For example, our WORKSPACE currently contains:
I couldn't find anyone else who has reported the issue, so I'm hoping to discuss the best way to deal with this here. Options:
Manually keep them in sync (as above).
Use omit_com_google_protobuf_* flags to grpc_java_repositories() and define protobuf repos in the WORKSPACE.
Get Bazel to avoid relying on multiple com_google_protobuf* names for the same google/protobuf repo.
1 is tedious, 2 could break grpc-java and 3 is potential surprising. There is probably a good reason 4 hasn't been done.
Can you think of a better option for this?


3425
Feature: StatusException and StatusRuntimeException utility methods2

I'd like to propose adding additional static utility methods to the Status class to simplify common patterns for dealing with StatusException and StatusRuntimeException. Since SE and SRE are unrelated, working with them cannot be done with polymorphism.
I'd like to propose the following additional API for Status:
The above code can be written using the existing APIs, but requires multiple nested if statements and instanceof checks.


3427
grpc client sometimes stuck after connection reset2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
We run the services in kubernetes load balanced by a kubernetes. The servers are running grpc java server with TLS. Clients are also running grpc java. After we have changed a kubernetes setting of --conntrack-tcp-timeout-close-wait duration from default 1h0m0s to 60s and --conntrack-tcp-timeout-established duration from default 24h0m0s to 15m. We have started to see a lot of stuck clients where all calls timed out after seeing this exception:
What did you expect to see?
All our calls are unary calls. I expect them they will go through even after seeing the connection reset.
What did you see instead?
About 0.5% of clients are stuck (we have about 10k clients running). And inspecting the heap dump of a stuck client after the calls is made revealed the state 2 instances of InternalSubchannel and activeTransport and pendingTransport are null in them. Forcing the client call did not change the state of the InternalSubchannel, the client was stuck indefinitely until the process was killed and restarted. After restarting the process it became normal again.


3434
Cannot throw custome runtime exception inside clientinterceptor3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
So i was trying to use ClientInterceptor by overiding onMessage(RespT message).  So i'm trying to throw my custome runtime exception inside ForwaringClientCall.listener something like this
Field code;
What did you expect to see?
I excpect it will throw my custom exception
What did you see instead?
it always end inside inside this method catch (Throwable t) and it will end with statusruntimeexception cancel
Thank you for your attention


3435
grpc multiple instances of same service different ports within same jvm ubuntu3

What version of gRPC are you using? 1.3.0
What JVM are you using (java -version)? openjdk version "1.8.0_131"
What did you do?
I have a service EventServer with one method sendEvent.  I have created a unit test client for EventServerImpl1
My use case is there are 2 instances of EventServer running on different ports for this test case where one propagates the event to other and response vice versa
Example: EventTestClient invokes sendEvent to EventServerImpl1 and in sendEvent method of EventServerImpl1 it propagates to sendEvent method of EventServerImpl2.
Here 2 grpc servers EventServerImpl1(port 17123) and EventServerImpl2(port 17124) implements EventServer within same JVM for this.
Now in
EventTestClient: I have code as
Both are blocking stubs only
What did you expect to see?
I expect to see the request propagates to EventServerImpl2 as EventServerImpl1 being the client to it
What did you see instead?
When EventServerImpl1.sendEvent is triggered( stub2.sendEvent(request) ) the process hangs forever.
When I directly query EventServerImpl2(port 17124) from other java process during this hang over period it works fine. But within that same process its hung forever.
Again on Windows this is fine and test case runs well. But only on Ubuntu I see this issue
Please suggest if there is something I am missing here


3440
Move Static factory methods off the class they construct.4

The ManagedChannelBuilder and ServerBuilder classes both expose static factory methods as a means to construct instances of themselves.  These classes can be extended, which means that all subclasses inherit the static methods.
However, when these static methods are call on the subclasses, they often return a different type than expected (InProcessChannelBuilder returns based on the service loader, for instance. See #3438).  This leads to confusion, and forces every subclass to add static methods that match the signatures)


3442
Netty server doesn't send multiple GOAWAYs during graceful shutdown4

For full graceful shutdown, we should send one GOAWAY with last-steam-id=MAX_INT and a PING. When the PING ACK is received then we send another GOAWAY with the actual last-stream-id. We can choose to set a timer for if the PING ACK doesn't arrive back promptly.
It looks like we try to do shutdown gracefully with maxConnectionAge, but it seems like it may not actually function.


3444
Problem with ssl4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
What did you do?
If possible, provide a recipe for reproducing the error.
I was setting up ssl with grpc. I have a self signed certificate with private key and certificate. The server is running fine using;
The client fails on rpc request.
What did you expect to see?
client rpc connection should go through
What did you see instead?
client fails with following error. Request does not reach server.


3445
NettyChannelBuilder uses Java 1.7 APIs4

Intellij complains that NettyChannelBuilder's usage of InetSocketAddress.getHostString is Java 1.7


3447
Error of Tutorial example4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_111"
What did you do?
If possible, provide a recipe for reproducing the error.
Follow the example of Maven section. Try to run mvn verify.
What did you expect to see?
No ERROR for maven verifying.
What did you see instead?
I just start to learn gRPC, hope someone can give me some suggestions.
Thanks!


3449
Feature: Lifecycle events for service implementations4

I'd like my service implementations to be notified of server lifecycle events for server start and shutdown. These operations could be used to warm caches, persist data, or close files.
The least intrusive implementation would be an interface a service implementer would opt into for receiving these events. Ex:
My initial thought is that onStart() would block Server.start(), so that the server wouldn't be ready until all services had successfully started. onShutdown() is trickier. It needs to be called only after the server has drained all requests.


3455
Proposal: Move forwarders into io.grpc.util5

We have a couple classes in the top io.grpc. package that are "Forwarding"  classes.  These classes are generally useful on their own, and provide an interception mechanism for changing or monitoring the behavior of the forwardee.  While users could implement forwarders themselves, it would be better if we did it.  There are a couple reasons:
Forwarding is error prone.  As the classes we have evolve, we continually add methods that should have been abstract but cannot be due to backwards compatibility. ManagedChannel is one such class.  Because they are not abstract, they are easy to forget to override, as has happened in the past.  We are in a position to update the forwarding class as we modify the original class.  Additionally, we can take on the burden of testing that each method is forwarded more easily than users.
Forwarders act as good alternatives to mocks.  Often in tests we use mocks for ease of use.  This has proven to make our tests brittle and hard to understand.  It would be better to make dummy classes that are suitable for test use.   Forwarders act as a good base class for tests to extend.  It allows an inplace migration from mocks to not mocks.  Forwarders can delegate to a mock as the test is being updated.  Traditionally we haven't moved test helper classes to a shared spot, but this is due to inconvenience rather than it being  bad idea.
In #3105 the issue was raised that NoopClientCall and BaseClientCall were prone to abuse.  Their original intent was a stand in for mocks, as many callsites needed a nonnull instance.  However, because their default behavior was "do nothing", they were more easily abused.  I believe forwarding classes neatly solve both problems.  A forwarder can wrap a null instance to be used at call sites that expect a non null instance.  If any methods are called, they will fail with NPE preventing users from abusing the behavior.  They can define the methods they only need for their tests instead.
The reason I raise this is that there may be a lot of Forwarders if we adopt this pattern.  I think they are useful in both test code and in regular code, so the logical place to put them would be in a place accessible to both.  io.grpc.util seems appropriate, because they are supplemental to the core library.
As for the existing Forwarding classes, they will become shim classes, and their implementation will move to io.grpc.util.
As for which new Forwarders would live in the new location, the following have been on my wish list (with the first one being recently fulfilled by @dapengzhang0 )
Each of these would be useful to either users and/or ourselves.


3456
Https with grpc5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
I create a HTTPS with grpc use code as follow:
What did you see instead?
But i got this


3457
Attributes.Key equality by name5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I am using client certificates and trying to verify the name of the caller (e.g. whitelist certain callers of my grpc server). Here is the code I wanted to write in a ServerInterceptor:
And then I can use this SSLSession to extract info about the caller.
However, this does not work since Attributes.Key does not implement equals/hashCode. Instead, I think I have to write something like this:
Is this intentional behavior? I went to submit a pull request to implement these methods and then discovered there is a test explicitly asserting this behavior:
This seems related to #2942


3458
FR: Port sharing with traditional HTTP services5

As of v1.6.1, there appears to be no way, when using gRPC with Netty, to host traditional HTTP services side-by-side with gRPC on the same port. I am working with an existing framework that wants to support gRPC but only has one port available and expects to also serve HTTP.
At the moment, the workaround would involve rearchitecting several disparate systems to know about split fleets of services or multiple ports, followed by some careful rollouts to migrate traffic. I'd like to avoid this if at all possible.


3460
Tracking issue for deleting deprecated methods in StreamTracer6

outboundMessage() and inboundMessage() will be released as deprecated in 1.7.0, thus should be deleted in 1.8.0.


3466
Migrate OS X CI to Kokoro6

Travis works quickly. For Linux. But not OS X.
OS X tends to have a long build queue (right now it is at least 3 hours long). This could be fine, except if 5 OS X jobs are queued they starve out Linux builds. This has been a problem since OS X support was added to Travis, so waiting for things to get better doesn't seem a good strategy. Since the "Backlog macOS Builds for Open Source projects" tells a good story on https, we could notice when things have improved in the future.
In principle it'd be fine to only run on master (not per-PR), but I don't know of any option to do that for Travis. Kokoro shouldn't have any trouble handling our rate of PR builds.


3469
Could not add interceptor(s) to `ProtoReflectionService`· Issue #346

What did you do?
Add interceptor(s) to ProtoReflectionService.
What did you expect to see?
ProtoReflectionService works with interceptor(s).
What did you see instead?
Got a NullPointerException or compilation error.
Problem
I ask a question on Gitter.
and I have got a reply from @e.jona86.
I think it is not easy to fix. So I report an issue.
ProtoReflectionService needs a reference to Server via notifyOnBuild but it could not, because an intercepted service is an instance of ServerServiceDefinition.
I think it is consisting some problems (may not a bug or may not a problem) as below.
ServerInterceptors#intercept binds a service and returns ServerServiceDefinition.
ServerBuilder#addService doesn't add ServerServiceDefinition to notifyOnBuildList.
ServerServiceDefinition doesn't implement InternalNotifyOnBuild.
Therefore, I could not add interceptor(s) to ProtoReflectionService.


3470
The parameter usage of KeepAlive7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
create a client and a server in two different virtual machine (machine 1, machine2);
call one rpc request and server response success ,then unplug the cable of machine2 to make the network from machine 1 to machine 2 unreachable:
call another rpc request after one minute:
What did you expect to see?
I want to seen that the client quickly know that the server unreachable;
What did you see instead?
I seen that the client  throw exception after 10 seconds.
How to use The keepAlive and the keepAliveTimeout, why the second rpc need to wait another 10 seconds to sense the server unreachable.
What the keepAlive mechanism I understand is that the client send the ping after the keepAlive time,if the response don't back before the keepAliveTimeout, shuwdown the transport and make the channel
unavailable.


3473
Auto detection and use of epoll for ELG7

I know it's possible to pass in a custom ELG to the NettyServerBuilder, but it'd be great if by adding a dependency on the proper packages if the DefaultELGResource would just use reflection and use epoll instead. If I were to submit a PR, is this something that would be accepted?


3474
java.lang.NoSuchMethodError xxx.yyy$Builder.<init>(xxx.yyy$1;)V exception7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
not stable reprodce this issue.
What did you expect to see?
no exception
What did you see instead?
a lot of the same exceptions:
just one details:


3477
Remove Thrift7

It isn't supported or used.   Maybe some kind user will ask for it back, but until that happens, rm.


3481
Census contexts not propagated by in-process8

In-process transport currently disables Census altogether. However, we still need to propagate the Census StatsContext and tracing Span from the client to the server.


3482
StreamObserver stops receiving messages from server stream after 30 minutes of being silent8

What version of gRPC are you using?
What JVM are you using (java -version)?
Android
What did you do?
Android client application with gRPC and backend written on go.
Client starts receiving message from server stream. But if there was no messages during 30 minutes, stream stops receiving messages at all. No logs, errors or crashes was caught by onError() or onCompleted().
By watching logs at server side I can see, that these messages were sent to stream without any errors.
What did you expect to see?
I expect stream still receiving messages even it was inactive for some time.
What did you see instead?
No messages received.


3484
manual flow control enabled not worked effectively8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java 8
What did you do?
I have a server side stream api and on client side I have manual flow control enabled.
If I send multiple messages without pause between response.onNext(),
got exception:-


3489
Revisit the threading and ordering guarantees of StreamTracer8

Currently StreamTracer must be thread-safe, as gRPC doesn't guarantee synchronized invocation for it. While the entire class can't be marked as not-thread-safe, as inboundUncompressedSize() may be called from a different thread (app thread) from inboundMessage() (network thread), some methods are called sequentially, e.g., inboundMessage() and outboundMessage(). If a tracer implementation only cares about inboundMessage(), it may be totally safe to not to synchronize. We need to find a way to relax the thread-safety requirement to make it easier to implement.
We also need a better definition on the ordering of the methods, e.g., is it possible for inboundMessage() to happen after streamClosed()?


3491
Question: what is used as :path pseudo header9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_121"
Java(TM) SE Runtime Environment (build 1.8.0_121-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)
I am trying to load balance a grpc service using linkerd service mesh. They mention in the docs that they use the :path pseudo header to proxy the request. I wanted to understand what :path equates to with reference to a proto file definition? Is it {package}.{service}?


3492
Grpc Transport failed9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
openjdk:8-jdk
What did you do?
If possible, provide a recipe for reproducing the error


3493
Need to set keep-alive through ManagedChannelBuilder9

For Pub/Sub streaming pull, we need to set keep-alive to prevent connections from being dropped. Unfortunately, this seems to only be available on NettyChannelBuilder and not ManagedChannelBuilder. Can we get a way to set this through ManagedChannelBuilder?


3494
how to pass exception cause from server to client9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
server throw IndexOutOfBoundsException
client receive StatusRuntimeException but inside cause is null
What did you expect to see?
client receive IndexOutOfBoundsException
What did you see instead?
client receive StatusRuntimeException but inside cause is null


3502
Add CI for Bazel0

While users are good at noticing when Bazel breaks, I suspect they'd appreciate it to compile without their intervention.
This probably should be on Kokoro.


3503
CensusTracingModule is breaking Bazel build0




3505
Can not build maven project on Raspberry Pi 2 (Arm32)0

All maven projects were easily built on my macbook but now I can not get them to built on my Raspberry Pi (the culprit seems to be the ARM architecture?!)
What version of gRPC are you using?
Tried several, also tried to simply build the examples on commit hash "589da07" which seems to be using version 1.7.0. I was also using version 1.5.0.
What JVM are you using (java -version)?
Pre-installed one on Raspberry Pi:
java version "1.8.0_65"
Java(TM) SE Runtime Environment (build 1.8.0_65-b17)
Java HotSpot(TM) Client VM (build 25.65-b01, mixed mode)
What did you do?
I tried to build the examples on version 1.7.0, where it fails to resolve the dependencies:
Could not find artifact io.grpc:grpc-netty:jar:1.7.0-SNAPSHOT
I tried to build by own example based on earlier tutorials on version 1.5.0, with the plugin from github: com.github.os72:protoc-jar-maven-plugin which tells me that ARM is not supported
On version 1.5.0 I tried to use the "standard" maven plugin, which similarly doesn't seem to find the fitting architecture in protoc executables:
Are ARM architectures simply not supported for "Java protobuf compilers", or am I missing something?


3506
Utility class for automatically cancelling a context after an operation0

CancellableContext must always be cancelled at the end of the request. Let's add a utility that simplifies the common cases, for example:


3508
Unexpected RST_STREAM(CANCEL) and subsequent RPC-call cancelling0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0 on both sides
What JVM are you using (java -version)?
On both sides
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I have GRPC server(aka service) and GRPC client, both in java. Client is doing some frequent task. Earlier client was using only one rpc-call per task, but today I've add second subsequent rpc-call to task processing. Rpc-calls are different - goes to different Service.methods). After adding second call I started to catch  io.grpc.StatusRuntimeException: CANCELLED in second subsequent rpc-call on rpc client-side. Exception is not so frequent, it was only two times per day, but reason of cancelling is unknown.
One maybe important thing: thread in which rpc-client work - is a GRPC-server rpc processing thread(so client is also a GRPC-server but I think it should not be relevant).
There is no timeouts or cancellations in my code. Channel created as(this is kotlin, sorry):
This is how rpc-call is made:
In task processing code calls are going in this order(code is synchronous):
This is log of exception:
From this log we can see the time and stub - CANCEL was triggered for OnlineInfoService call.
But in GRPC logs I didn't find any call to this rpc(OnlineInfoService) with CANCEL, instead I've found call with RST_STREAM for previous call
Logs from client, stream with RST_STREAM:
What we can see here:
The call is base.rpc.profile.mm.MatchmakingInfoService/Info
RST_STREAM is sent after receiving response(reason?)
So, two questions:
Why is RST_STREAM(CANCEL) was triggered after response is received?
Why cancelled was next after RST_STREAM call?
This situation was under load like one task per minute(so no load at all).


3513
Identifying the type of Stub after an instance is created1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.6.1
What JVM are you using (java -version)?
1.8
Currently once a Stub is generated extending from AbstractStub, there is no way to identify whether is a BlockingStub, FutureStub or simple AsnycStub except from the name which is NOT ideal. Identification of Stub, will help enforce any application level checks such as enforcing deadlines for BlockingStub in the enviornment.


3522
gRPC Java is not usable from Java 9 modules2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9"
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
What did you do?
Java 9 allows users to depend on older, non-modularized versions of the libraries by "converting" them to automatic modules. For example, when Maven dependencies on grpc are configured correctly, Java 9 allows me to do the following:
This allowed me to use classes from the grpc-core within my Java 9 module, but unfortunately it wouldn't compile:
The issue is that Java 9 does not support split packages across modules and this is exactly what's happening here, as io.grpc package exists in both grpc-core and grpc-context, and to make things worse both grpc-core and grpc-stub have transitive dependency on grpc-context.
I've tried excluding grpc-context from both modules using Maven exclusions, which allowed me to compile successfully, as I don't have any direct dependencies on grpc-context. However, I was not able to run the test server, because of the missing Context class:
There are several possible solutions, some better than the others:
Merge classes from grpc-context into grpc-core and leave empty/dummy grpc-context module around for backwards compatibility (although most people probably do not depend on it directly).
Do the same as above, but get rid of unnecessary grpc-context module.
Rename the io.grpc package in grpc-context to io.grpc.context, which would eliminate split package issue, but would break existing code that uses classes from the current location.
In any case, I'm happy to help do the work, but someone will need to decide which approach to take.


3523
Provide Automatic-Module-Name entry in JAR manifests2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9"
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
What did you do?
Attempted to use gRPC from a Java 9 module.
What did you expect to see?
No compiler warnings or errors.
What did you see instead?
Maven complaining about the file-based automatic module name for gRPC and its dependencies:
This is happening because Java 9 uses JAR file names to calculate automatic module name, and this is very fragile.
The better approach would be to add Automatic-Module-Name entry to each JAR's manifest, specifying the reliable name consumers of gRPC libraries can use, even before the gRPC itself is fully modularized.


3525
GoogleAuthLibraryCallCredentials should not use ReflectiveOperationException2

GoogleAuthLibraryCallCredentials uses ReflectiveOperationException, which requires Android API level 19. It appears that the animal sniffer plugin does not detect exception types in try/catch blocks (mojohaus/animal-sniffer#41). According to the user who reported this bug, GoogleAuthLibraryCallCredentials works on emulators running API levels <= 18 but on physical devices the use of GoogleAuthLibraryCallCredentials causes the app to crash with a VerifyError (https).


3526
SSL offload best practice?2

What version of gRPC are you using?
What JVM are you using (java -version)?
I've developed a backend API for mobile and desktop application using gRPC, its now ready for online, but I can not find any documents about SSL offloading.
In traditional HTTP + JSON backend API, we often put a Nginx box between clients and application servers, client talks to Nginx with HTTPS, and Nginx talks to application servers using HTTP. But as this issue indicates, Nginx doesn't support sending http2 traffic to upstream servers yet, and we can't do the same thing we gRPC APIs.
I've searched a lot, and find nghttp2 and envoy, but I do not know whether its mature enough, I want to using something proven robust and stable like Nginx.
Any suggestions?


3532
ProtocolNegotiators.TlsNegotiator overwrites existing SSLParameters3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9"
Java(TM) SE Runtime Environment (build 9+181)
Java HotSpot(TM) 64-Bit Server VM (build 9+181, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
I'm using a Netty ManagedChannelBuilder and I set it to use an SslContext configured for h2. Netty's SslContextBuilder will configure the Java9SslEngineWrapper that calls the SSLParameters#setApplicationProtocols with the {h2} array value to enable the client to use the ALPN extension. The ALPN extension is not sent by the client because the SSLParameters is overwritten by  ProtocolNegotiators.TlsNegotiator and the existing SSLParameters are lost.
What did you expect to see?
I expect that the current SSLParameters to be preserved.
What did you see instead?
The client is not able to perform negotiate the h2 protocol during the TLS handshake.
I installed locally a version of io.grpc:grpc-netty with the following change to ProtocolNegotiators#TlsNegotiator and it worked fine:
This implementation is more conservative and modifies the current SSLParameters which preserve the application protocols for Java 9.


3534
ManagedChannelImplTest.orphanedChannelsAreLogged is flaky3

Insufficient attempt at a fix and some comments in #3490


3536
NettyServerBuilder difference between executor() and workerEventLoopGroup()3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
N/A
What did you expect to see?
More documentation
What did you see instead?
N/A
What is the difference between setting an executor(Threadpool) and setting a workerEventLoopGroup(EventLoopThreadPool) on NettyServerBuilder.
If I understand, all the IO operations (accept connexions, read/send packet...) are done by the boosEventLoopGroup thread.
But what about the RPC call themself ? Are they done by executor threadpool or workerEventLoop ?


3537
Add best-effort detection of queuing to ThreadlessExecutor after draining complete3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
During use of a specific client, netty begins to detect memory leaks, and my app eventually run out of direct memory.  My app eventually begins to receive OutOfDirectMemory errors which occur much later than the leaks are detected and manifest mostly as an immediate UNKNOWN status from the blocking stub.  The stack trace of what that looks like is below.
I'm using multiple gRPC and Netty clients, and even after leaks are detected and even after I see the stack trace above begin to be logged, it appears that these netty and grpc clients will continue to operate normally as long as their connections are maintained.  Upon attempting to create new connections, they fail, and the tcp estab errors are capable of being detected at the os layer and show up in metrics dashboards.
Here is the report from the leak detector:
Most interesting to me is io.grpc.netty.FixedHttp2ConnectionDecoder.decodeFrame(FixedHttp2ConnectionDecoder.java:119) in the netty report above, it looks like this method declares it can throw and maybe is and something gets into a weird spot?
The server implementation looks like approximately this:
I'm wondering if maybe the onCompleted() calls coming in behind an onError() call might race and cause an issue in the header frames getting flushed and then decoded?  I plan to move the onCompleted() up into the try block, and give this another attempt, but I'm pretty stumped as to what's happening here and would like some advice.
Thank you in advance.


3545
LoadBalancer gets handleSubchannelState calls after shutdown4

Subchannel State is SHUTDOWN


3546
Context/CancellableContext should provide a try-with-resources utility4

This will make user code cleaner in some cases.


3547
Interoptest failing in GAE4

Fails for both jdk7 and jdk8:


3548
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java 8
We are seeing a lot of warning messages from Netty shown below on gRPC server side. Could someone shed some light on why we are seeing these warnings?


3553
Make sure retry and hedging implementation handle balancer drop correctly5

As mentioned in #3355. RPCs dropped by LoadBalancer should never by retried. We should also decide how hedging implementation should deal with dropped RPCs. We should have unit tests to cover them.


3556
SSL Related Methods in  ManagedChannelBuilder 5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
We use NettyChannelBuilder for real world use and InprocessChannelBuilder for tests. The problem, if we have to use SSL, we need to typecast the ManagedChannelBuilder to NettyChannelBuilder and call sslContext. However in tests, this fails because InprocessChannelBuilder does not have the sslContext method. We need to do an instance check and then type cast.
Instead similar to how usePlainText has been added to MangedChannelBuilder, can we add the following methods to ManagedChannelBuilder
negotiationType(NegotiationType) - Currently there are two versions of NegotitationType enum defined, one in netty module and another in http. Is there a reason to have two? or can we combine them and add it to core?
'sslContext(SslContext)' - This would require adding netty-handler module to core as a dependency. In the AbstractManagedChannelImplBuilder we can just throw UnsupportedOperationException. NettyChannelBuilder will continue to have its current implementation and InProcessChannelBuilder will just return this.
sslSocketFactory(SSLSocketFactory factory). In the AbstractManagedChannelImplBuilder we can just throw UnsupportedOperationException. OkHttpChannelBuilder will continue to have its current implementation and InProcessChannelBuilder will just return this.
This way we do not have to check for the instance type and cast. Switching between the actual channel builder and InprocessChannelBuilder would be very seamless.
What do you think about this?


3557
ClientCalls.ThreadlessExecutor should reject Runnables after end of RPC5

As seen in #3537, the executor was being used for multiple RPCs which caused some Runnables to be queued but never run. We are in a position to know they will never execute though, so it'd be nice to have a (possibly unreliable) detection of rejected Runnables to notice issues like this earlier.
This could be accomplished with just a volatile shutdown boolean that is checked before execute() and a shutdown() method. That's racy, but we're just wanting it to detect bugs, not provide correctness.


3560
API report for gRPC Core6

Hi,
Here is the report on API changes and backward binary compatibility for the gRPC Core library: http
The report is generated by the https tool for jars at http: according to the article https:.
Hope it will be helpful for users and maintainers of the library to be aware of API changes.
Feel free to request other gRPC java modules to be included to the tracker if you are interested.
Also please let me know if the tool should not check some parts of the API (it checks all public API methods and classes by default).
Thank you.


3562
Many java cloud_to_cloud and cloud_to_prod interop tests failling: " No ServerStreamTracer found"6




3563
How can the server distinguish between "client cancelled" and "client timed out"?6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.5.0
What JVM are you using (java -version)?
1.8.0_65
What did you do?
I understand why this is the case - the client times out first & sends a cancellation, which the server processes prior to its own (apparently network-padded) Deadline expiring.
For our internal metrics, however, we want to track "the client cancelled the RPC early" as distinct from "the client timed out the RPC" (which, for our purposes, is the same as the timeout happening at the server side).
Is this possible?  I don't want to reverse the server's pad-deadline-because-network logic.
It seems like I need to hook into the server code that handles the client's "send cancellation upon timeout" signal, and hope that differs from the client's "send cancellation upon cancellation" signal.


3571
InProcessTest is flaky7

Also on: https


3575
On Windows, when doing a heartbeat check of a Grpc server using Socket, Grpc has very noisy logging7

What version of gRPC are you using?
Issue only reproduces on Windows operating systems.
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Open cmd prompt and run gradlew startServer
Open another cmd prompt and run gradlew runHeartbeat
Notice each time you do a heartbeat on Grpc's port you get this INFO stack trace:
What did you expect to see?
No log noise on a SocketHeartbeat that is gracefully closed on the client side.
What did you see instead?
Lots of log noise with the stacktrace on a SocketHeartbeat that is gracefully closed on the client side.


3578
Stress test client hangs7

@zhangkun83 I looked at the code in #3517 and didn't see any obvious cause for this issue. Do you have some insight into whether this is an error in our stress client, a problem in gRPC, or a bug within the Census library?


3582
Grpc fails to build with Windows 7 + MSys2 (with MinGW-W64) + Bazel8

What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
I was trying to compile a project that depends on grpc-java
To reproduce, simply write a bzl file that includes the five lines mentioned later.
Then build the project with Bazel
What did you expect to see?
I expect to see the project successfully built.
What did you see instead?
Manually modifying lines 32 to 36 in java_grpc_library.bzl solves the issue.


3585
Bazel java_grpc_library(flavor="lite") doesn't work out-of-the-box8

What version of gRPC are you using?
Git master (@8187f1e)
What JVM are you using (java -version)?
What did you do?
Configured a Bazel project with @grpc_java pointing at this codebase (and protobuf deps as per the Bazel native protobuf rules, pointing at latest protobuf code), added a java_grpc_library(..., flavor = "lite") rule.
What did you expect to see?
Successfully generated & compiled code from bazel build.
What did you see instead?
A number of different build problems, starting with no such package '@com_google_protobuf_java_lite//'. Details for working around them below.
I've managed to successfully build an Android client using a lite-proto java_grpc_library, but it involved doing the following changes:
Adjust deps added by the java_grpc_library macro

This removes @grpc_java//protobuf from being added unconditionally, as it was pulling in the non-lite protobuf runtime into the resulting APK. It's replaced by @grpc_java//protobuf-lite:protobuf_lite instead. It also renames the javalite remote repository from @com_google_protobuf_java_lite to @com_google_protobuf_javalite, because the latter name seems more "canonical", in the sense that it's what Bazel native java_lite_proto_library rules implicitly depend on.
Note that the protobuf issue 2762 referred in the TODO has been closed for a while now.
I'm not sure if //visibility:public is the right choice, but it matches the //protobuf:protobuf target. I've also changed the protobuf dependency from protobuf_java to protobuf_java_lite, as this was again pulling the non-lite runtime in the resulting APK. Ditto for the issue in the TODO.
Add missing indirect dependency to //stub
AbstractStub's @DoNotMock annotation was causing a "[strict] Using type com.google.errorprone.annotations.DoNotMock from an indirect dependency" build error.
If you think these are changes that should actually be made upstream, I'm happy to submit them as a PR (though they're pretty trivial).
Two caveats:
I still have a "DEBUG: Multiple values in 'deps' is deprecated" warning from my java_grpc_library rule, because I had to list the java_lite_proto_library targets of all the messages used by my service. It's possible I'm misconfiguring this. Should I instead put all the proto_librarys as deps of a single java_lite_proto_library? How would I share those with Java code that doesn't need gRPC?
I couldn't figure out how to make well-known protos to work. I think that's an instance of protobuf issue 1889.


3586
Random javax.net.ssl.SSLException: handshake timed out 8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
Call the server from client
File file = new File("ca-chain.cert.pem");
What did you expect to see?
No timeouts
What did you see instead?
This behavior happens randomly like 5% of the time, I tried calling the process using multiple threads(500) to reproduce the problem locally, no luck!, this happens in our Kubernetes environment
A way to set handshaketimeout
On Client side


3587
Open source the cronet unit tests8

Today, we only have the cronet production classes but no unit tests.


3593
netty SSL is wrong9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_131"
Java(TM) SE Runtime Environment (build 1.8.0_131-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
I  think do not need jetty alpn.
but:
netty has not load native library
In netty OpenSSL
the library name is:


3600
Metadata not being propagated between client adn server0

Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.3.0
What JVM are you using (java -version)?1.8
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see? Metadata being propagated
What did you see instead? No metadata available in server interceptor
I am trying to send a subscriber id from the client to the server, both in java.
On the client side
The value is null and I dont understand why. It is working when running in-memory tests but when deployed no luck.
I see that the header is added to the metadata in the client interceptor but is not available in the server interceptor when printing the keys there are 3 default keys from gRPC


3605
Tracking AbstractStub.withExecutor being experimental0

No description provided.


3612
running gradlew java_pluginExecutable fails with error1

What JVM are you using (java -version)?
openjdk version "1.8.0_131"
OpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-2ubuntu1.17.04.3-b11)
OpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)
What did you do?
Followed steps in readme in Compiler folder.
Specifically, ran $ ../gradlew java_pluginExecutable
What did you expect to see?
I dont know. I havent run this command before.
What did you see instead?
This happens on both master and v1.7.x branch.


3613
Tracking io.grpc.testing.DeadlineSubject being experimental1

No description provided.


3621
Need lots more examples2

This is intended to be a dumping ground for the moment.
waitForReady
channel state API to pre-connect
example NameResolver (with SPI) (both polling and non-polling)
channel/server.executor()
auth (custom client-side and server-side verification)


3622
Question:How can I get the a field name?2

For example, I want to get the field name "a", how to do?


3623
CensusStatsModule.ServerTracer.fullMethodName is initialized but not used anywhere2

No description provided.


3624
Make GrpcServerRule more customizable2

Currently it's not possible to customize the in-process server before it's built, e.g., adding ServerTransportFilter or ServerStreamTracer factory.


3630
OkHttpChannel ignores idleTimeout when reconnecting3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
OkHttpChannelBuilder.idleTimeout(60, TimeUnit.SECONDS)
Then initiate an RPC with Deadline, which fails after Deadline exceeded when GRPC server is unreachable. Give up and make no more RPC calls.
What did you expect to see?
Because there are no remaining RPCs, OkHttpChannel stops attempting to connect after idleTimeout and changes channel state to IDLE.
What did you see instead?


3632
quickstart example fails on step 1 with jdk 93

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "9.0.1"
Java(TM) SE Runtime Environment (build 9.0.1+11)
Java HotSpot(TM) 64-Bit Server VM (build 9.0.1+11, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
followed instructions here:
What did you expect to see?
step 1 to succeed
What did you see instead?
Upgrading to gradle 4.2.1 fixes this issue.


3633
Java 9: cannot find symbol javax.annotation.Generated3




3634
Ranged version in grpc-netty cause maven-metadata download every build.3

What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
I found following maven config in grpc-netty-1.7.0.pom:
Please don't use ranged version.


3635
android-interop-testing proguard fails mentioning DeadlineSubject3

We could ignore the warnings, but I don't understand why DeadlineSubject is being kept. I also don't know what caused this to break. It might be fair to do a bisect.


3636
Remove MethodDescriptor fields from codegen3

As of #3618 , method descriptor fields are deprecated, and the getter fields are now preferred.
We should remove any accesses to the static fields and then remove the fields from codegen.


3639
please provide a way to expose client host / ssl certificate information3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
(This assumes mutual authentication is enable)
In our production environment, we use the tls certificate's common name as the client (/server) identity.  Our servers need access to the the client identity in order to perform application specific ACLs.
What did you expect to see?
In go/python, the server automatically populates the client's host/cert info into the context, and the information are accessible via:
java should provide an equivalent interface for accessing these information.
What did you see instead?
The information are available within the netty grpc core (SSLEngine.getSession(), but afaik, are not exposed to the user in any way).


3643
testing should be a Bazel package4

Currently, much of the repo is usable as a Bazel external repo through the provided BUILD.bazel files. This allows Bazel users to express dependencies like @grpc_java//core.
testing should also have a BUILD.bazel file, so that Bazel users use things like GrpcServerRule. (Currently, Bazel users can use this by depending on the grpc-testing Maven jar, but depending on both Maven and Bazel versions of grpc-java seems like a bad idea in the long run.)


3644
Allow manual registration of Providers4

Some providers need configuration (e.g., Cronet needs Android Context, this Eureka resolver). We should consider having add/remove registration methods to manually register during app startup. This is probably a more common problem for name resolvers, and is easier to do with name resolvers, so they should probably be prioritized.


3648
Why is the message input stream not closed? Possible memory leak?4

I discovered this while sending a relatively high throughput of requests (about 500 messages per second). Which started causing undefined behavior in my application.
According to, https
each InputStream instance is never closed after putting it on the wire. When sending many messages at once, this can cause a possible memory leak?
Thanks in advance!


3650
Bazel: java_grpc_library rules can not be used from another repository (contains fix)5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
openjdk version "9-internal"
OpenJDK Runtime Environment (build 9-internal+0-2016-04-14-195246.buildd.src)
OpenJDK 64-Bit Server VM (build 9-internal+0-2016-04-14-195246.buildd.src, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Import Bazel rules in a proto repository from another proto repository
What did you expect to see?
The other repository should be useable with Bazel
What did you see instead?
Build errors
I traced this here:
The error disappeared after changing it from
The -I imports already define aliases, but whatever src.short_path produces is prefixed with ../ and the proto-repo workspace name. That directory is not available in the build directory of the importing repo.
After this change, it worked in both the proto repo and the repo importing it.
If required, I can work on a reproducer or provide additional details - @-mention me in that case.
I still hope the description is sufficient...


3660
Running examples on the master are failing6

Cloned the repo, tried to run the examples and it failed:


3664
Reconsider how method descriptor marshallers work6

Marshallers have a lot of small problems that need to be address in 2.0.  We should take a look at how to make this better
Marshallers lack a "marshal"  method, unlike most other "-er" types in java.
Marshallers are also unmarshallers.   Instead they should be split into distinct types
Reflection and default instances are hacked in as ReflectableMarshaller and PrototypeMarshaller.  Instead they should likely be tagging interfaces instead of extensions, or separated out entirely.
The probably shouldn't use InputStream.  It's an awkward class that has to be worked around using KnownLength.  The reading loop is annoying, and its hard to read it using helper libraries.  It isn't zero copy.


3666
Examples load with errors in Eclipse6

What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_144"
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
git clone git@github.com:grpc/grpc-java.git
Then load the Maven project in latest stable Eclipse (Oxygen.1) via:
Then run maven clean and maven generate-sources.
What did you expect to see?
The examples open in Eclipse with no problems whatsoever.
What did you see instead?
The project has 72 Java problems:
What operating system are you using?
in two terminals shows that the example code works as expected.
Perhaps this is an Eclipse/Java problem?
I searched through the issues but found nothing similar at a first glance.
Thanks in advance!


3671
Add @CheckReturnValue to CallOptions.withX() methods7

This would help prevent errors like the following toy example
This is incorrect


3676
GAE+jdk7 regression introduced by ProxyDetector7

RPCs will just hang because ProxyDetectorImpl tries to use ProxySelector, resulting in this error:
java.net.Authenticator also has security restrictions and will likely have this problem. The solution is probably to check with the java.security.AccessController before performing the action, and falling back to no proxy if we fail. Since app engine is a highly restricted environment, do we even need to come up with an alternate way to configure a proxy here? @ejona86


3684
WARNING: Received unexpected ping ack. No ping outstanding8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
If possible, provide a recipe for reproducing the error.
What did you expect to see?
What did you see instead?
I see lots of these lines:
Looks like just a warning, but I wanted to know if this could be some network issue.


3685
Use exponential backoff in DNS resolver8

In places like #3268, people are experiencing a long delay for DNS to resolve addresses after a failure. Since we're using exponential backoff for the connection retry, we should maybe also use it for initial DNS resolution instead of a hard-coded 60 seconds. This would reduce the need for users to plumb #2169. While #2169 is "a good thing," simply having better behavior by default is also "a good thing."
The problem we encounter today is if initial DNS resolution fails, it is retried every 60 seconds. (Note that exiting idle mode re-creates the DNS name resolver, so it should be considered "initial" resolution.) If later DNS resolutions fail, then we are fine because:
We will continue using the old addresses, and
Because after each connection attempt we'll call refresh().
But if the initial attempt fails then there won't be an InternalSubchannel and it won't fail periodically which won't trigger refresh().
So there's two ways to trigger the backoff:
implement the backoff in DnsNameResolver directly (so we don't block new connections), or
periodically trigger refresh() if the initial resolution fails (if the addresses are bad we will still do exponential backoff).
(1) is more straight-forward, but (2) would benefit all name resolvers. Since name resolvers notify the ChannelImpl on failure it should be possible to do (2) within ChannelImpl. It may also be possible to plumb things through the LB, such that failed name resolution still creates a subchannel but with zero addresses, and that subchannel could do backoff like normal and trigger refresh().
CC @ericgribkoff, @zhangkun83


3686
Access responseObserver within server interceptors?8

I want all my calls to my server to return back a response, even if some error occurred on the server.
Sample interceptor on my Server with onMessage that looks like:
Is it possible to call onNext from within an interceptor? Or is there any workaround to accomplish this?
Thanks in advance.


3688
Support smooth network changes8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
On Android, create channel with non-streaming and streaming calls. Change data network from cellular to WiFi. (standard mobile use case)
What did you expect to see?
New calls are started over WiFi. Existing calls receive an advisory notification, enabling them to finish up while the cellular network is still available and smoothly start a new call over WiFi, possibly concurrently to the existing call.
What did you see instead?
All call activity continues on cellular data network until the OS yanks it (30 seconds on Nexus 6, Nougat). Communication is disrupted until channel transport is reestablished over WiFi.


3689
Provide notification on call when transport is shut down8

This can apply on server-side when the server as a whole is shutting down and also when MAX_CONNECTION_AGE is triggered for a particular transport. It would just be a notification to allow the application to perform a graceful call closure.
It'd also be useful on client-side, especially on mobile (#3688), when connections are being migrated.
There may be concerns of both the client and server reacting at the same time. It should also be noted that in some cases only one side may receive the notification (i.e., when a L7 load balancer is involved).
I don't think any language provides this today. If it is deemed useful, this should be a cross-language feature.


3694
Integrate gRPC Cronet with build system9

We have open-sourced the gRPC Cronet transport, but it is not yet integrated into our build system. Cronet does not currently supply packages, just binaries on GCS, so we will have to be slightly creative here.


3700
some jars or java files are missing in examples module !!0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
when using examples,io.grpc.examples.helloworld.GreeterGrpc:io.grpc.examples.helloworld.HelloReply:
these classes are missing.
What did you expect to see?
no error
What did you see instead?
no dependencies(examples above)


3701
NullPointerException when create channel with hostname contains '_' underscore0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you do?
Create a channel with hostname contains underscore ('')
ManagedChannelBuilder.forTarget("host_1").usePlaintext(true).build();
It is due to the java.net.URI return null on getHost() when hostname contains ''.
We understand that '' is not align with standard, but many systems support '' nowadays, and is hard to avoid.
What did you see instead?


3702
java.lang.NoClassDefFoundError: io/grpc/BindableService for Java app.0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_151"
Java(TM) SE Runtime Environment (build 1.8.0_151-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)
What did you do?
If possible, provide a recipe for reproducing the error.
Since I don't really understand why this problem is occuring, I've been different methods to get the project working but it keeps throwing the same error. Things I have tried so far are, changing the grpc dependency versions. Setting option 'enable_deprecated=false' to true as well. Cleaning the project to regenerate the generated sources.
What did you expect to see?
The Java app to run on my Windows 10 computer using Android Studi 3.0 IDE. Android Studio is able to install Android app on an Android device (Nexus 7 in this case), but since there is no server, it doesn't have any thing to communicate with.
What did you see instead?
I got this error upon running the java app


3703
DnsNameResolver don't use provided executorPool0

What version of gRPC are you using?
What JVM are you using (java -version)?
java version "1.8.0_112"
Java(TM) SE Runtime Environment (build 1.8.0_112-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)
What did you do?
What did you expect to see?
Will not be created additional thread for rpc call expect configured before.
What did you see instead?
In my case grpc still use default CachedThreadPool and creates at least 32 thread.
It's occurs because DnsNameResolverProvider creates DnsNameResolver with default shared executor, instead of use provided for ManagedChannel: https


3706
Stabilize ServerBuilder.handshakeTimeout0

No description provided.


3707
Missing TransportTracer unit test for local flow control window0

Netty{Client,Server}Handler tests currently only check that the remote flow control window stat.


3712
Backport OpenCensus update (#3647) onto 1.8 release branch1

#3647 was merged after the release branch was created, so it needs to be cherry-picked.


3713
Stabilize useTransportSecurity API on ManagedChanneBuilder1

This allows the consumer of a builder to swap back from plaintext. ManagedChannelBuilder.useTransportSecurity()  is similar to ServerBuilder's method, but without args) method which will reverse the usePlaintext().
For Netty, useTransportSecurity() would be the equivalent of negotiationType(NegotiationType.TLS).


3721
Callbacks for analyzing the State of the Channel2

It's more of a question rather then an issue. I want to be notified about the channel state every time it changes. However I couldn't find any API for that. The only method that I could find was notifyWhenStateChanged(), however the problem is, this method only gets called once.
Ideally the callback of this method should be called every time the state changes from the current state the channel is in.
The really dirty workaround I have implemented to get notified about the connectivity status is to call
channel.getState(true) periodically after every X milliseconds. Then I return the state of the channel in my own callback.
Is there a way to figure out when:
The client gets disconnects from the server
The client is connected with the server
The client is able to send messages to the server & receive messages from the server.


3722
FRAME_SIZE_ERROR: 4740180 (Wifi only)2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Hi everyone,
I am reporting an issue that concerns more than 100 users in our production environment.
It seems to already have been reported on the issue #2436 but I am sure I am connecting to the right gRPC server.
Every web API call throws the same FRAME_SIZE_ERROR exception.
Users that reported the issue have different smartphones, Android versions and network provider.
If we ask them to switch from wifi to mobile data, everything works fine. Is there any chance that some wifi routers configuration or network provider cause this issue?
This issue seems to happen since we moved to gRPC from the version 1.2.0


3725
Maybe add Status.withCode2

Unlike other fields in Status, there is no with method to preserve the code.  This is surprising and makes it  harder to change a status code.
Would have been useful here: https


3734
Netty appears to stop accepting new connections after 2h when TLS is enabled3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)
What did you do?
Start a server with any service definition and TLS enabled and leave it idle for 2h
What did you expect to see?
Client calls succeeding
What did you see instead?
Client calls timing out
Just to clarify, this is independent of keep-alive issues with StreamObservers - totally fresh clients (new jvms) time out on simple unary calls that worked 2h earlier, only remedy is to restart the server.


3746
Make ServerImpl's internalClose thread-safe4

So we have this in ServerImpl.JumpToApplicationThreadServerStreamListener:
We should fix that. There's two ways to fix this
Allow truncated messages in our stream and deliver trailers. This would be nicest and would be helpful in other cases (like if too many requests are sent in a server call), as we can deliver a message to the client
Treat this as a cancel and send RST_STREAM. This would be similar to client-side cancellation, but we'd still need to verify it'd be safe on server-side.
In either case it'd probably be good if we made this trigger onCancel instead of onCompleted. That'd probably happen naturally for (2), but (1) would need special plumbing, but it's probably not too onerous.


3747
UNAVALIABLE status documentation4

In the documentation for Status.Code there is this (in FAILED_PRECONDITION comment):
A litmus test that may help a service implementor in deciding
From this, I had assumed that UNAVALIABLE could be used to inform the client that they could retry the call with no regard to possibly modified state.
However, from #1053, it looks like UNAVALIABLE may be sent by the gRPC client if there is a network error during the response, which means the client cannot blindly retry the call.
It would be nice if UNAVALIABLE did guarantee idempotency.  Otherwise, the documentation might be updated to avoid giving the wrong impression.


3756
io.grpc.StatusRuntimeException: INTERNAL: No value received for unary call5

thanks!


3762
ManagedChannel getState/notifyChanged API docs6

I'm using gRPC 1.7 (on Android) and notice the docs for ManagedChannel still say this functionality is unimplemented (and the base implementation throws as it should). However, the MannagedChannelImpl (which OkHttpChannelImpleBuilder uses) has this implemented. Is this an oversight or on purpose? It caused me to dive into the issues (culminating in #2292) to figure out if this was actually supported yet (I've determined it is). Should the docs be updated to something a little more helpful?


3763
ManagedChannel state/notify API6

I'd like to actually observe connectivity status on a gRPC channel so I can reflect the state in some other code (UI or whatever). Using the current API yields something like:
which is a little unwieldy (I haven't tested that either so might not be exactly that). Is there any interest in a nicer API? Or is that an exercise left to the user?


3777
largeUnary interop test flaky: wrong method name in stats check7

Seen here: https on PR #3776.
@zhangkun83 Any thoughts on this? My first thought was to blame my #3754 PR, but it looks like this is on the server side, and the server stream doesn't have to worry about multiple streams per call so it shouldn't be impacted even if there were a mistake in #3754.


3780
Can´t build HelloWorld Android project8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
v1.7.x
What did you expect to see?
want to activate instruction 'gradlew installDist'
i referenced and followed this page https: and https
but, it doesn't work on my cmd window
what is the problem!
What went wrong:
Could not resolve all files for configuration ':protobufToolsLocator_grpc'.
Could not find io.grpc:protoc-gen-grpc-java:1.7.1-SNAPSHOT.
Searched in the following locations:


3781
You don't have permission to use the application 'protoc-gen-grpc-java-1.7.0-osx-x86_64'8

What version of gRPC are you using?
What did you expect to see?
I am trying to build my application that uses protocol buffers. But I am getting the error shown in the screenshot attached.
Thanks.


3787
grpc-okhttp 1.8.0 pom file has error, prevents build8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
From grpc-okhttp-1.8.0.pom:
Instead I saw a version number enclosed in brackets, which causes the build to fail:
I checked the JCenter version at https
There may be 1.8.0 pom files from other grpc-java artifacts with the same problem.


3788
grpc mutual authentication issue8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
To enable ssl mutual authentication
Actual behavior
Using PKCS11 as keystore provider and loading certs from HSM.
Client fails during mutual authentication with following error and stacktrace
Steps to reproduce
Works with JKS store provider but while using PKCS11 it fails.
While debugging it finds 4 matching aliases but it is not able to respond to the server.
Minimal yet complete reproducer code (or URL to code)
Server Code:


3797
Cronet transport Received DATA frame for an unknown stream9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Bidi streaming in android works with okhttp transport, but fails with cronet
Every 10 seconds or so after the bidi stream is created and messages are streamed successfully I receive the following exception
@ericgribkoff Probably you will need a repo with a reproducible code, but I am not sure when I will be able to create it. Anyway, i will create this issue maybe it will help.


3800
gRPC subscription fails with UNAVAILABLE EOF Error0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
no failiure
1st I do a Login call using the same ManagedChannel, which works fine. But then the next subscription request always fails with similar error as following.
Following is the stack trace.


3802
SHA-1 failure for proto-google-common-protos-1.0.0.jar0

Platform: Ubuntu 14.04
Bazel version: 0.8.0
If I run the Bazel build with:
I get:
It can be fixed by updating the SHA-1 in repositories.bzl.


3807
Failed to mark a promise as failure because it has succeeded already0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.7
What did you expect to see?
We saw the following exception occasionally on the client side so that the server didn't receive the RPC:


3810
AbstractClientStream - Received data on closed stream1

Please answer these questions before submitting your issue.
gRPC version
grpc core 1.7.0
Synopsis
Using Google Pub/Sub GrpcSubscriberStub for batch pulling of messages per
I occasionally see the INFO logging message ...
AbstractClientStream - Received data on closed stream
My code is not experiencing any exceptions and everything appears to work as expected.
Looking at the code, there is also another INFO logging message ...
Resolution
The code / class AbstractClientStream should be configurable as to whether this INFO logger messages above are emitted.


3811
[python] Need more control on when the client side of the stream is closed1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Currently, on the client side, after the generator completes it sends a close for the client's send channel.  This is perfectly legal, however, it seems to cause some issues with with a gRPC server in Java, or perhaps it's how it's been implemented in this particular case.   In this case, the server assumes, when it receives a half close from the client,  that the client is done and no longer interested in receiving events from the server.
There seems to be no issues using go or node clients with this particular server.


3815
Why grpc-java instead of grpc+JNI1

Is there some background into why grpc-java ended up being created instead of attempting grpc C + JNI bindings? Was performance an issue? Maybe it didn't play well with the concurrency paradigm?
Thanks - this will be insightful.


3819
ServerCallImpl.internalClose triggers onComplete, not onCancel1

When we get an outbound error with ServerCallImpl, we call internalClose(Status). However, it calls stream.close() exactly as if the client closed the RPC.
So the transport thinks this was an application-requested failure and so will call onComplete(). It should call onCancel() instead.


3821
Upgrade version for com.google.api.grpc:proto-google-common-protos2

Currently the following targets:
The "1.x" version I think should be used in gRPC as well.


3822
Add Context.Key.create and createWithDefault2

We'd like to remove needless differences between Attributes.Key, CallOptions.Key, and Context.Key. The Context.key() and keyWithDefault() is actually a bit weird today, and not something we'd like to copy. But we'd like to add the create methods to Key for consistency.
We will leave the current key() and keyWithDefault() methods. Just add new methods.
Related: #1869, #1764.


3824
use ServerBootstrap to start then start grpc server with same port don't throw BindException: Address already in use2

What version of gRPC are you using?
What did you expect to see?
throw BindException: Address already in use


3825
after server shutdown client  trigger StreamObserver.onERROR(io.grpc.StatusRuntimeException: UNAVAILABLE: Network closed for unknown reason) , client can still be invoke onNext without throw any Exception ?2

after server shutdown client  trigger StreamObserver.onERROR(io.grpc.StatusRuntimeException: UNAVAILABLE: Network closed for unknown reason) , client can still be invoke onNext without throw any Exception ?


3826
server performance issues2

Hi grpc-java guys, I have wrote some programs to do the performance testing for grpc-java. The service is very simple, just echo the strings (about 400 bytes per request) received from clients. (Actually, I disabled servers' log.) Appears that it's is difficult for me to archive high requests-per-second and low response-time.
My environment and configurations are listed as follows.
Environment: 48 cores/128GB memory/10000Mbps net/CentOS Linux release 7.2.1511
According to the thread dump, many worker threads stick to SerializingExecutor.


3835
Android examples fail to build with minify enabled3

I ran into an issue with minify when testing out release builds of my project. So I built the android examples normally, which works, but when I change:
Same issue with my own project, but with a few more unresolved classes. (Note it's the Warning 21 unresolved references... that causes the build failure.)
I'm pretty sure I can just ignore these? Is there any formal direction on the preferred way to resolve this issue? I am not sure why there is a discrepancy between Google's minify and proguard. It would probably be good to have the examples work with minify now that it's the suggested option especially if you rely on multidex (which is the case for many Android apps now).


3836
Reflection service does not consult ExtensionRegistry3

It just notices extensions that are pulled in from the services themselves. That'll miss most extensions.
We'll probably need to add a getter to ProtoLiteUtils.
This may be a good time to add an extra getter/setter to ProtoUtils (that can call ProtoLiteUtils for now). It'd be an ExtensionRegistry instead of ExtensionRegistryLite. But at the same time ExtensionInfo doesn't provide much more info than a instanceof would provide, and it means going through the immutable/mutable weirdness in the API.


3841
Security support like Kerberos4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Still in the stage of investigation, not in production use.
What did you expect to see?
Is there any plan on supporting more security features, including authentication, authorization, and encryption. For example, I would like to specify that only certain users can execute certain services; I would like the data is encrypted on the fly by the RPC framework; I would like to use Kerberos for authentication and authorization in the production system which is required by certain industries like finance.


3842
Support Digest Authentication for Proxies4

I am trying to figure out if the BigTable HBase client supports digest authentication. The google bigtable team asked me to check here.
What version of gRPC are you using?
Whatever the latest bigtable hbase client is using.
What did you expect to see?
digest authentication.


3843
Race in io.grpc.internal.MessageFramer.commitToSink4

messagesBuffered seems to be updated on error and from the application thread.


3849
How are gRPC calls mapped to HTTP/2 streams4

Where can I find documentation on how gRPC calls are mapped to HTTP/2 streams? More specifically, what are the HTTP/2 setup in the client-streaming, server-streaming, and bidirectional-streaming cases. I tried to run the io.grpc.examples.routeguide example with WireShark attached. However, I wasn't able to find and HTTP/2 frames being exchange.
Thank you very much for you time.
What version of gRPC are you using?
What did you expect to see?


3854
io.grpc.StatusRuntimeException: UNAVAILABLE5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
can anybody give me some advice.
Thank you so much


3856
Netty Flow Control tests have data races5

The window size read from the testing thread should be executed on the event loop.  Since this test is flaky, and fixing this race would make the test more flaky (but less racy), the test is being marked @Ignored.
This issue tracks reenabling the flow control tests and fixing the data race.


3857
io.grpc.Attributes - reference vs. object equality5

This is more of a question around the expected behavior of Attributes#equals and the notion of "attribute equality" as opposed to a bug or an issue. For context, we have some tests internally that are failing in 1.8 as they were written with object equality in mind.
For example, the following fails in 1.8 but passes in prior versions, which upon immediate inspection wasn't intuitive, as InetSocketAddress#equals returns true when comparing the two different objects:
I'm interested in the motivation for the change in semantics (talking with @lukaszx0 in person, he recalls some talk about this previously). If reference equality was the intention, perhaps we could tighten up the javadoc a little to make it more explicit that this class now uses reference equality as opposed to object equality?
Or, perhaps this wasn't the original intention and it would be possible to revert to using a HashMap, although the benchmarks seem to indicate this would be slightly slower than the current impl.


3864
Freshly checked out code does not build in Intellij IDEA6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Also reproduced with 1.7.0 and 1.8.0 tagged versions, and the past three major releases of Intellij Idea.
Steps to reproduce
Check out the latest grpc-java code to a fresh directory
Open grpc-java with Idea
Attempt to build the project using the Build -> Build Project menu
The protobuf/test module does not compile, complaining about missing methods and type mismatches.
I was able to fix the protobuf/test module compilation by changing sourcesRoot to testSourcesRoot in protobuf-lite/build.gradle line 63.
I was able to manually fix io.grpc.netty.shaded.ShadingTest by explicitly adding the generated grpc-netty-shaded-1.9.0-SNAPSHOT.jar file to the grpc-netty-shaded_testShadow module using Intellij's Project Structure screen. This is sub-optimal. I was unable to find a solution using gradle.


3873
google/api/annotations.proto no longer available7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
It appears that with grpc 1.3.0 dependencies, we could transitively pick up com.google.api.grpc:proto-google-common-protos at 0.1.6 which published all the protos over here https however, newer versions no longer publish the protos, just the generated classes in the jar.  I found which appears quite old and is missing a number of types.  Unfortunately, the googleapis repo doesn't seem to allow the opening of issues and I'd found a related problem here #3410 where the same import was failing.
Is there an alternate location these protos should be sourced from for imports, or is there a place I can get in touch with the folks who own com.google.api.grpc:proto-google-common-protos to get them to publish proto files into the jar again?


3880
How to bypass hostname verification?8

There is an example of how to do this for grpc-go in here
And I'm looking for a similar solution for grpc-java.
I had been using overrideAuthority like this when the CN of the server certificate is known.
But I've come to a point where I can no longer keep doing this since the CN is not known beforehand. All I know is the IP address and port number in my use case.


3884
Throw StatusRuntimeException in gRPC Proxy8

What version of gRPC are you using?
What JVM are you using?
What did you do?
I would like to throw a StatusRunTimeException inside an interceptor, the relevant code piece is:
What did you expect to see?
I expected the same as if I use
within a gRPC stub, i.e. the client can catch the exception with status and description
What did you see instead?
Any recommendations how to tackle this?


3887
grpc android mutual tls, how to send client certificate and key to server8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I have done the server-side authentication, now I want to do client-side authentication, but I can not find a api to send my client certificate and key to the server, could you please give me some help?


3890
Can grpc-java share ports for other protocol services?9

like https but is go


3891
proto-google-common-protos-0.1.9.jar' in project 'LogiVisual_java' cannot be read or is not a valid ZIP file	9




3893
Gradle plugin does not clean before regenerating, causing compile failures9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The general contract for a gradle plugin is that execution causes the output to be valid with respect to the input. This is essential for gradle's performance and reliability. protoc-gen-grpc-java does not do this, because after a change to a .proto file, it leaves obsolete files lying around in the generated-sources directory. It should remove files which would no longer be generated (see the gradle Sync task), or at worst, delete all files in the target directory before regenerating.
At the very least, given that this task is somewhat difficult to configure and a doFirst block is not trivially obvious, add an example which uses a doFirst to delete generated files.


3906
java_grpc_library bazel rule has incorrect copy command0

I'm using the java_grpc_library bazel rule, and it fails due to "cp: missing destination file operand after ''.
If I change java_grpc_library.bzl (function _gensource_impl) in the following way, it builds properly:
Here's my WORKSPACE file:
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I expected to be able to use the java_grpc_library and have it build with Bazel without modifying the rule itself.


3907
How to get the ManagedChannel state?0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want to get state of the ManagedChannel, but this class does not implement the "getState" and "notifyWhenStateChanged" method,how to get the channel state?


3908
bazel: android rules cannot directly depend on grpc java rules0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Android rules to build properly when depending on java_grpc_library.
I'm getting this error:
in deps attribute of android_binary rule //android:android:
Dependencies on .jar artifacts are not allowed in Android binaries,
please use a java_import to depend on external/com_google_protobuf/libprotobuf_java.jar.
If this is an implicit dependency then the rule that introduces it
will need to be fixed to account for it correctly.


3909
Any easier way to add method metric for grpc appliction?0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want to add metric monitor to my application,
but i don't kown how and where to add my code is the best way.
is there any method I can hook method before execute and after execute done?
Any suggestion?


3910
Unable to execute quick start instructions with jave 1.8.0_121 1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
following the instructions I attempted to checkout 1.8.0 but got the HEAD instead. I thing that is 1.10.0-SNAPSHOT.
What went wrong:


3918
Add dependencies checking between bazel and gradle?1

grpc-java got Bazel support in #2975, but grpc-java has no dependencies checking between bazel and gradle, so it would break their version consistency.
But I have no ideas how to check their version consistency.


3919
compiler: clang: error: cannot specify -o when generating multiple output files1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Configure project :grpc-compiler
What went wrong:


3923
Question:compile problem2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
According to the guide, I add grpc-netty grpc-protobuf and grpc-stub to my pom.xml,  but I want to know  why not add grpc-core?
For protobuf-based codegen integrated with the Maven build system,
When using version 3.2 and 1.3, the compile result is ok.
My proto file: http


3926
Validation support2

What version of gRPC are you using?
NA
What did you expect to see?
A provision to validate input data in a meaningful way, preferably using bean validation 2.0 (JSR 380)
My assumption is that currently I have to do adhoc validation for every single request & it defeats the whole purpose of having a framework like bean validation.
Is there any plan to integrate this with bean validation?


3929
Create tool to detect accidental consumption of @ExperimentalApi and @Internal APIs2




3938
Bump Android targetApiVersion to 263

As will be required in Play store.


3954
Create BOM for grpc-java5

A BOM provides versions for multiple libraries to aid keeping the versions consistent.


3961
Drop support for Java 66

This would allow using (at least some) Java 7 language features and more of the Java 7 API. Android support for Java 7 has advanced. We need to figure out exactly what restrictions we'll need, but on the surface things seem far enough along to push forward with the drop of Java 6 support.
We'd still support the subset of Java 7 that is used by Android; we're not willing to reduce our API level support for this.


3964
server push6

Hello, grpc project team, I want to achieve when the client login system, the server records the client-related information, and then the server can push the message to the specified client at any time, push the message data structure is a variety of types, : Server should get the client connection, from the example you can see only the StreamObserver  responseObserver, but the T can only be a fixed type, is there any other way to achieve, please give a reference example, thank you!


3966
Support Conscrypt on Android6

This will allow OkHttp to use TLS1.2 even on Android API levels < 21. This was first brought up in #1906 and #3301, which exposed some issues with how gRPC OkHttp picks the security provider.


3968
Migrate the Android interop test app to protobuf lite6

Nano is no longer supported by protobuf team. See https


3982
Tracking retry APIs being experimental8

No description provided.


3985
Most of the functions in AbstractStub should be annotated with @CheckReturnValue8

These functions create new instances rather than changing the internal state, e.g.


3989
java.lang.NoSuchFieldError: SSL_MAX_RECORD_LENGTH8

When running grpc 1.9 withio.netty:netty-tcnative-boringssl-static:2.0.6.Final on linux, I got following stacktrace.
The error is gone when running with netty-tcnative-boringssl-static:2.0.7.Final.
According to maven, grpc-netty depends on netty-tcnative-boringssl-static:2.0.7.Final. However, I didn't see it in release note. I think dependencies session in 1.9 release note needs update.


3990
When grpc program is ran using intellij+gradle, will fail to `libnetty-tcnative` resulting in: "OpenSSL is not installed on the system."9

I have a grpc program that uses OpenSSL netty + netty-tcnative to implement TLS.
When I run it using the bundled product via command line, works fine.
When I try to run it within IntelliJ+Gradle... it fails to find the libnetty-tcnative-linux-x86_64.so leading to
What version of gRPC are you using?
What did you expect to see?
Expected it to be able to find that so and thus be able to run with openssl on the gradle/intellij build.


3991
When configuring TLS, getting vague error "Couldn't find the address for the requested channel" 9

I've got a TLS enabled grpc server that won't let me connect to it and I get a bland error: io.grpc.StatusRuntimeException: UNAVAILABLE: Channel closed while performing protocol negotiation
Issue happens on master branch.
OpenSSL version
OpenSSL 1.0.2g  1 Mar 2016
Reproducer
I am using the server certs from grpc-java/testing/src/main/resources/certs
Steps to reproduce


3996
Unexpected exceptions when server response or client request exceeds Max Message Size9

some unexpected exceptions are seen in the server log when a server response exceeds the max message size of the client channel or vice versa. Client log does show valid errors.
This issue is consistently reproducible with a hello world rpc example where request/response is a huge string with size greater than the default message size of 4MiB.
What version of gRPC are you using?
When server response exceeds max message size
Unexpected Exceptions in the server log:


4001
Protocol Buffer Stream testing gRPC for a million messages in java0

What version of gRPC are you using?
I am testing gRPC with a list of a million of items and sending this million of item by an stream.
But when I have sent a big amount of messages I have an exception for memory used, the single messages are short.
There is anyway to solve it?, In netty there are a way to send messages and flush the data. Did I have that opcion in gRPC?
I have this code on client:
using this code:
I have this exception


4002
Can't seem to use self-signed certificates with grpc?0

I need to figure out how to make a script that can generate self-signed certificates against a given host such as "localhost" for use with grpc TLS configuration.
Here is what I have so far:
I created a branch https to test this with. It includes the fix from #3997 that makes it so you can see SSL error messages in the logs for when the cert is not right.
I get the notorious sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
Can someone tell my why my ssl cert creation for self-signed isn't working? I thought because I have CN=localhost in the ssl cert generation, and I added my ca.pem to the trust manager that it would be able to certify "localhost"? Am I missing a step?
Full stack of error:


4004
Steps to configure Mutual TLS in grpc-java?0

I created a new HelloWorld with TLS enabled example here: #3992
So far I have only configured TLS. Not mutual TLS.
What would be the steps to enable Mutual Auth in this example?
The script added to https generates the cert files needed.
The grpc-java security.md says to do this:
OK no problem. But what does the client-side look like?


4006
Have LoadBalancers trigger NameResolver.refresh()0

Today we implicitly refresh the NameResolver when a transport disconnects. But we don't actually know if that disconnect is important. For example, with GRPCLB only the OOB connection to the GRPCLB server really impacts the addresses we use; GRPCLB will be telling us when a service backend should be removed from our list. Thus, the refresh is useless for all disconnections except from the OOB channel.
C today has the LB decide when to refresh. That seems pretty easy to implement in the normal cases and helpful in the complex cases. So we should consider doing the same thing.
Unfortunately, it does cause some problem for migrating existing LB implementations. Maybe if we see the LB manually call refresh() we disable the implicit refreshing we do today. Maybe something else.


4011
Document best practices for handling network connectivity changes on Android1

This should document how to handle network connectivity changes on Android. This will only apply to OkHttp users, as Cronet internally manages and responds to connectivity state changes outside of the gRPC stack.
This document should include any current limitations and be updated when the respective fixes/enhancements are checked in, such as:
When the network goes down and an RPC is attempted, the gRPC channel will enter a DNS resolution backoff state running on a fixed 60 second timer. When the connection comes back online, it may take up to 60 seconds before the channel successfully reconnects. #3580 adds a resetConnectBackoff() method on ManagedChannel that short-circuits this backoff. Android apps using gRPC OkHttp should monitor the network state and trigger this method when the device moves from offline to online. Further, #3685 tracks using exponential backoff in the DNS resolver which will help mitigate this issue even without resetConnectBackoff() when the network is down only briefly.
Supporting smooth network transitions: When the Android device moves from cell only to cell+wifi, the OS will issue a network notification indicating the the cell connection will be terminate soon (typically ~30 seconds). Currently new RPCs issued on a gRPC channel during this time will continue to use an established cell connection, meaning they will fail if still running when the OS terminates the cell network. #3688 tracks adding a notification method on the ManagedChannel to allow apps to continue any on-going RPCs on the cellular connection but force new RPCs to use wifi, reducing the disruption caused by the switch from cell to wifi. This functionality is in-review in #3904.


4016
1.9.0 has different error than 1.8.0 for revoked client cert1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We have a test which asserts that we get an error when trying to use a revoked client cert. On 1.8.0, we get a StatusRuntimeException on the call, and this exception has a cause with a nice message. Our test looks like this:
This works on 1.8.0, but now on 1.9.0, the e.getCause() returns null. So the request still fails, but we can't assert that it's failing for the right reasons.
Did something change around revoked certs or error handling in 1.9.0?
I didn't see any tests in grpc-java that seem to test an explicitly revoked client certificate. I did see this message for untrusted certs:


4017
Tracking issue for BinaryLog public API1

No description provided.


4019
"google.api.http" is useless while gen stub, is it possible to use it to gen restful client code?1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
use protoc and protoc-gen-grpc-java to gen java code.


4024
How to get the connection status with the client from the server?2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Is it feasible to get the connection status with the client from the server?


4025
netty 4.1.20 makes the RPC calls to fail2

I'm using the latest gRPC version (1.9.0), which comes with netty 4.1.17, but I have another dependency which requires netty 4.1.20. If I use the latter the RPC calls on the client side fail with the following exception:


4026
Maybe rename ClientInterceptor2

For consistency, in gRPC 2 we could rename ClientInterceptor to ChannelInterceptor


4028
DNS resolution failure on Android after connectivity changes2

What version of gRPC are you using?
What did you expect to see?
For the grpc channel to be able to handle Android connectivity changes (eg. from wifi to mobile data, or from no data connection to wifi).
For the resetConnectBackoff() call on a channel to successfully short-circuit the backoff timer and make it reconnect immediately when triggered from a connectivity change.
What did you do
Built a grpc channel using the OkHttpChannelBuilder. Registered an Android BroadcastReceiver against connectivity changes which calls the channels resetConnectBackoff()  (as recommended in #4011).
What did you see instead
The resetConnectBackoff()  being called from the broadcast receiver event (for android.net.conn.CONNECTIVITY_CHANGE) and failing to short-circuit the backoff timer. Had to wait approx 60 seconds before the channel became usable again. Reports a host name resolution failure until the 60 seconds passes.
A sleep (of a few seconds) between the connectivity change and the resetConnectBackoff() call seems to fix the issue.
Is there any way to decrease the default backoff time. It may be a useful feature in situations like this.


4029
Plumb proxy address through Name Resolver2

Netty can't handle unresolved addresses. To avoid things like #4027 and any concerns of ProxySelectors returning unresolved addresses, we should resolve the address while the NameResolver is running. We then should plumb that result through to the transport.
We should probably have a check on addresses coming from the Name Resolver that verifies the addresses are resolved.


4032
While starting managed channels on client we get error: `Channel for target was not shutdown properly!!!`3

What version of gRPC are you using?
Is this because a previous channel failed to be shut down correctly and now we are starting up another one?


4046
error: integer number too large4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Successful compilation


4050
Generalize NettyChannelBuilder.maxHeaderListSize to ManagedChannelBuilder5

This is necessary for Spanner in google-cloud-java.


4056
Tracking issue for Android connectivity management being experimental5

Including from ManagedChannel:


4063
First received frame was not SETTINGS. Hex dump for first 5 bytes: 15030100026

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What JVM are you using (java -version)?
Java(TM) SE Runtime Environment (build 1.8.0_144-b01)
Java HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)
What did you do?
I ran a grpc server (in Golang) and a client (in Java) that accessed this server.
The error occurred always when I tried to send request to server via a blockingStub
What did you expect to see?
What did you see instead?


4065
Http2Exception frame length exceeds maximum6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We noticed a sudden disconnection and the only log I could grab from is the following coming from the client side
How can I debug this better? Is this frame legth set somewhere? Who can control if it exceeds.


4067
HTTP1.x Support for grpc-java6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Since grpc server do not support http1 stream, I have to use a web server in my application, for health check and some debug method.
Will it be possible to support this feature? When


4077
Getting grpc exception `java.lang.NullPointerException: runnable is null` 7

What version of gRPC are you using?
1.8.0
What did you expect to see?
We have an app with dozens of bi-directional grpc streams.
When cancelling one of our jobs (but leaving the bi-directional streams open), we sometimes see:
We aren't sure what exactly is causing it.
Perhaps an executor service is getting shutdown without proper cleanup.
Or perhaps a channel's bidirectional activity is being interrupted due to our attempt to cancel the work being done.
Is it possible for grpc-java to handle this NPE better and provide a cause of issue?


4082
Getting warning Problem when calling halfClose - `call already closed`8

TYPE: Question
What version of gRPC are you using?
1.8.0
Question
I closed some channels and unload some classes from my classloader.
Is there a way to figure out why this error is happening? Any examples of how to avoid it? Can I ignore this warning?


4084
Swap to java-library gradle plugin8

It should speed builds and rebuilds, while also getting us closer to having a (clean) Java 9 module.


4085
Create Java 9 modules8

Java 9 modules solve many causes of version collision issues, which would greatly help users. Granted, it's not helpful unless people are actually on Java 9.
This is probably blocked by #3522. It'd probably be reasonable to wait for #4084 as well.


4086
option to keep stream open after an exception8

When an error condition happens, for example,
it closes the stream.. is there is a way to keep the grpc stream open ?
So application will be more resilient for errors like above.


4091
Unicode support in Python 2?9

A debug log from Apache Zeppelin python "interpreter" when code has an unicode character [1].
A wild, it seems grpc does't support unicode data in Python 2?
Related Zeppelin jira to investigate it on Zeppelin side -


4092
Performance degradation while sharing channel across multiple threads9

What version of gRPC are you using?
What did you expect to see?
According to previous answers to similar questions (i.e. #3268), the recommended way of handling gRPC channels is to have one channel and to share it across stubs. However, in multi-threaded application I see that this approach causes significant performance degradation. For example, if I share single ManagedChannel across 8 threads and run beenchmark test, I get a test duration of 326531 ms. In the same time, if I create ManagedChannels inside every thread, the result is completely different: 27748 ms. Modified files of the HelloWorld example are attached.
Am I doing something wrong? Would you please clarify how can I get the best performance while dealing with channels?


4095
Replace workspace("grpc_java") with workspace(com_github_grpc_grpc_java)9

... or something else more authoritative.
The workspace statement in the WORKSPACE file should match the name users are giving the external repositories that import this repo, e.g.
However, there's a convention to name a repository by reverse DNS, so something like com_github_grpc_grpc_java is more common.
Should we change the statement in the WORKSPACE file to com_github_grpc_grpc_java?


4097
Build reflection services using Bazel9

No description provided.


4099
GET_MEMOIZED_IS_INITIALIZED method in dynamicMethod unsupported operations9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
io.grpc:protoc-gen-grpc-java:1.10.0
What did you expect to see?


4102
Getting random "io.grpc.StatusRuntimeException: UNAVAILABLE: Channel shutdownNow invoked" when stress testing0

My team has the following setup, where we have multiple Client nodes connecting to Multiple Server nodes with a channel from client to server of each node, where each channel comprises of multiple persistent streams left open for the lifetime of the process:
When stress testing the system, we see a random sudden shutdown of all the bi-directional streams:
We then have to reconnect each channel + reestablish the streams in order to continue.
This only happens when stress testing. Does not appear to happen in typical lower load situations.
To our knowledge, we are not shutting down the channels at any point. they need to remain open for the program to live happily.
But something is shutting them down somehow.
What are common ways to troubleshoot this behavior?
Is there some sort of timeout that we are victim of causing these sudden shutdowns?


4103
Document grpc-netty-shaded in Troubleshooting guide0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Troubleshooting guide should also reference to grpc-netty-shaded for gRPC 1.9+
Also, add additional info re: #4163


4116
Hints on setup (gc and threadpool)1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm starting to build another grpc service that's supposed to handle something like 5k message per second (on commodity hardware) on average.
Messages weigh about 1k.
What's a good setup when it comes to:
Is there any recommended setup?
Thanks


4118
getAttributes() always empty if called from SimpleForwardingClientCall1

What version of gRPC are you using?
What did you expect to see?
Let's say we have the following client interceptor which is attached to our channel:
When calling the getAttributes() method I expected to see a set of attributes which contains at least the information about the server to which the client is going to make a request to. Unfortunately, getAttributes() method always empty.


4120
Windows CI is broken by GitHub HTTPS changes2

When trying to download protobuf:
iwr : The request was aborted: Could not create SSL/TLS secure channel.


4134
Support multiple ports in gRPC Java server3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Most recent
What did you expect to see?
Support multiple ports in gRPC Java server.


4135
Access the local address of a call from ServerCallHandler3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
After #4134, I'd like to know which port/address the current inbound request comes from.


4138
Unable to run grpc-java in Linux Ubuntu 16.04LTS3

Can someone please help me figure this out. I have been unsuccessful in debugging forward with this
I am trying to run the example java code for a grpc server client application
JVM version:
compilation terminated.
In file included from /home/shouryalala/grpc/grpc-java/compiler/src/java_plugin/cpp/java_generator.cpp:1:0:
compilation terminated.
In file included from /home/shouryalala/grpc/grpc-java/compiler/src/java_plugin/cpp/java_plugin.cpp:8:0:
compilation terminated.


4141
Provide FakeClock API in io.grpc.testing4

No description provided.


4148
Don't require forked tomcat native4

On reflection, it seems very strange that an allegedly interoperable network protocol for Java requires native code and therefore severely limits the platforms it runs on. This leaks into other software such as the API client libraries at google-cloud-java that have weird not-really-edge conditions such as not running on Android or on the Java 7 App Engine runtime.
Personal opinion here:
Performance be damned. Interoperability comes first. forked tomcat native should be optional at most. This library should be pure Java and fully functional in any standards-conformant VM.


4151
Tracking issue for ALTS API being experimental5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


4154
NetworkOnMainThread exception while resolving IP address.5

What version of gRPC are you using?
What did you expect to see?
When calling one of the stub's method I get a crash on Android, throwing NetworkOnMainThread exception with the following stacktrace.
My understanding is that the call io.grpc.internal.ProxyDetectorImpl.detectProxy(ProxyDetectorImpl.java:127) is happening in a grpc-default-executor-0, even though i've called .executor(Executors.newSingleThreadExecutor()) on the channel builder.
The grpc-default-executor-0 thread pool appears to contain the main thread, as Android triggers a NetworkOnMainThread exception if any networking is attempted to be done on it.
It seems related to #577, despite it being marked as closed.


4157
fix regression in v1.9.0 where using GRPC_PROXY_EXP with the Netty transport would cause an UnresolvedAddressException is not available in 1.10.05

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
However, i still face the same issue and fix seems not included in this 1.10.0 release.


4159
Tracking NameResolverProvider being experimental5

No description provided.


4163
Possibly misleading error "ALPN is not configured properly" when Java security manager is enabled6

I just spent a day on a wild goose chase trying to figure out what was causing this error:
ALPN is not configured properly. See https for more information.
Reading that page, and looking at my Maven dependency tree, I thought I had some kind of version conflict. I spent a day uselessly swapping out different library versions to try and fix this. In frustration I created a completely new project, with the same dependencies, and it worked. I turns out my app is using the Java Security Manager, and it was silently blocking tcnative from being loaded by netty-tcnative-boringssl-static.
Adding these three permissions fixed it:
I couldn't figure out how to whitelist only the tcnative library, as the Netty Native Library Loader appends a random number to the library name every time (ironically, probably for security reasons).


4170
channel.getState(true) will not reconnect7

The javadoc for ManagedChannel.getState:
Gets the current connectivity state. Note the result may soon become outdated.
Parameters:requestConnection if true, the channel will try to make a connection if it is currently IDLE
However, it attempts to connect only if there has not been an open connection already. After disconnect, channel.getState(true) will not attempt to reconnect (state is IDLE).
What version of gRPC are you using?
What did you expect to see?
channel.getState(true) should try to reconnect the channel if the state is idle.


4171
Make GrpcServerRule more reusable7

See #2160 for some context. All the linked examples assume one mocks the service that is tested, which sounds weird to me (see https)
My grpc service talks to other grpc services and I'd like to mock out those. My Dagger module injects those secondary grpc service stubs and hence in the Test dagger module I'll need to provide mocked stubs and this is when things seem to fall apart.
I understand the suggestion to mock the impl instead (again see #2160), but I am not sure how to actually make this work. I have this code:
bur of course the use of reflection is a terrible hack. It looks like I'll have to replicate most of what is in https, right? So maybe the code in GrpcServerRule can be made more resuable. E.g. Datastore has a LocalDatastoreHelper, where I can start()/stop() in my tests @BeforeClass/@afterclass helpers.


4175
Logging response body7

I'm trying to log the response body using the ServerInterceptor but can't figure out where the get this information. The close() in SimpleForwardingServerCall only has Status and Metadata.


4176
Bump to Guava 207

We downgraded to Guava 19 in #2751. A lot of time has passed. We really want to get on to the more stable Guava versions.
We want to bump to Guava 20, and if that goes well try to bump further. I think Guava 21 was built with JDK 8 (or some such), so we need to avoid, but the following fixed that.
After we get to Guava 20 we should open a new issue to track upgrading further.


4180
Suggestion to add keyOfProto method to ProtoLiteUtils8

Is there a reason for why protobuf-lite doesn't have the keyForProto method in the ProtoLiteUtils? I seem to be able to implement it as a helper method my self, the same way it is implemented in ProtoUtils.
What version of gRPC are you using?
What did you expect to see?
A keyOfProto method in PotoLiteUtils


4181
Change Bazel Workspace name to io_grpc_java8

io_grpc_java is what's returned by getName('io.grpc', 'grpc-java') as defined by https, as java_import_external is replacing maven_jar.
See also #4095.


4188
How to write code when network is unreachable? 8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I wirte a bi-directional rpc,  when the client try to connect to server,but the server is not ready, it will
After a few seconds, the server is ready, and the tcp connection is established finally.
When calling requestStreamObserver.onNext, there is no exception, but no data transfer, I want to know why? Do I need to get another


4198
ReadableBuffers.BufferInputStream does not release buffer on close()9

Netty Version used: 4.1.16.Final
Observed Netty leak detector complaining of bytebuf leaks on the gRPC server configured with Netty Epoll. This occurs more often, a few minutes after the service restarts on a prod machine. Here is the full trace of all 25 access for the bytebuf:
The most recent access to the leaked bytebuf occurs at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:273) but the bytebuf is actually released here.  Not sure what is causing the leak.


4202
Bidi calls never close, leaking memory client and server0

The following client/server leaves the bidi RPC call open, holding onto resources and ultimately going OOM if enough calls are made:
Replacing the client's ClientCall.Listener with one that calls .halfClose() upon completion works around the issue.


4206
Tracking issue for channelz being experimental0

No description provided.


4209
Tracking issue for binary log experimental API0

No description provided.


4212
How would one propagate credentials between multiple services1

What version of gRPC are you using?
What did you expect to see?
We're working on multiple services that call each other. For several reasons among which is auditing, we'd like to use the credentials from an incoming call to any call that is done as part of it. So if e.g. the user calls ServiceA.function1() and that in turn calls ServiceB.function2(), we'd like to pass the Metadata used in the call to ServiceA.function1() when making the calls to ServiceB.function2().
So far I've discovered and implemented a ServerInterceptor that would let me inspect the metadata passed when calling ServiceA.function1() and I tested .withCallCredentials(new CallCredentials()) which lets me set Metadata on outgoing calls to ServiceB.function2(). Now unfortunately those two mechanisms are not coupled. I am making the calls to ServiceB.function2() in my *ImplBase and all I get there is a StreamObserver, but no other context. So I don't see a solid way to store the Metadata in the Interceptor so that I can access this in the CallCredentails (or in the *ImplBase).
Did I miss anything? Any suggestions? Please don't hesitate to tell me that this is not how I am supposed to do this, if that is the case.


4214
Hints for a Custom Marshaller(KnownLength vs Drainable)1

Using gRPC version 1.7.0 with Netty Epoll transport.
I am using a custom marshaller for non-proto messages. For InputStream provided by Marshaller.stream(message), currently I don't have a way to provide length of the message without serializing it. So, I have these two options:
Support KnownLength by serializing the message to byte[] which would be helpful in reducing the number of ByteBuf allocations (in MessageFramer when draining the message to OutputStream) as length is known. But this approach loses the benefit of Drainable, where we would be copying the byte[] to OutputStream.
Don't support KnownLength and support only Drainable to avoid additional copy when draining  to OutputStream. But this may lead to lot more ByteBuf allocations as message length is not known. (Due to usingBufferChainOutputStream in MessageFramer).
Could you share your thoughts on which approach provides lower latency? (Especially if we have large messages of 10 MB or so.)


4218
Can not connect to Server after enabling TLS1

In my project using gRPC Java,I am using OpenSSL to make a secure connection between Client and Server through a revert proxy (HAProxy).
Since Client and Server interacting through a revert proxy, therefore I only config SSL for HAProxy, there's no need to do anything with the Server. So:
I managed to run the server successfully and configured SSL at HAProxy, I checked SSL configuration with https and everything is ok.
The documentation here mentions that the client code for a secure channel is this:
But the problem is I can't connect to the Server, no response and it doesn't throw any excetion or error at all.
But if I change usePlaintext from false to true (disable TLS) from client and Proxy is still having SSL, then I receive this exception:
This is dependencies at client:


4223
Can't run benchmark with --tls mode2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Server run success in tls mode
I run AsyncServer with option --tls=true but java throw error:


4225
Misleading 1.10.0 release notes2

The 1.10.0 change list http says that #4027 is included, but that doesn't actually seem to be the case. The only released version with this fix applied is 1.9.1 through a back port.
The commit seems to have been merged to master shortly after 1.10.0 was cut:
Would be great to update the release notes to reflect this. Would also love to get a 1.10.1 release with this fix included, but if that's too much work we can probably sit on 1.9.1 until 1.11.0 is out.


4232
Uncaught exception in server when client is killed3

What version of gRPC are you using?
What did you expect to see?
Client connection closing uncleanly is a common occurrence, so I expect it not to throw exceptions.
When I kill my client, I see uncaught exceptions in server side (not random). The exceptions does not seem to break anything (can't tell for sure though), but they are being caught in my thread pools uncaught exception handler. Client is doing streaming calls (server streaming and bidi streaming).


4239
GrpcServerRule should be a final class3

This was an oversight during initial review. It's experimental, so we can fix it. This came up in #4171.


4240
Flag to relax compression interop tests4

As discussed in #3195, since some implementations don't have access to the message compression flags, tests that rely on that cannot be exercised.
Would it be useful to add a flag that disables test steps that rely on this capability?
With such a flag, we could for example run client_compressed_unary against the Java server. The first call in that test would be skipped (as that requires the server to be able to inspect the message flags), but determining whether the subsequent calls succeed would still be useful.


4241
message Empty is defined twice in interop-testing sub-project4

Message Empty is once defined in the interop-testing sub-project itself:
And then again pulled in from protobuf-java
This becomes a problem when generating grpc classes using ScalaPB as it tries to place both under the same package and the same name.
I would expect interop-testing to not define Empty message and use the one from  protobuf-java instead. Would that be possible to change?


4242
grpc + springboot error java.lang.ClassNotFoundException: io.grpc.services.HealthStatusManager4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Disconnected from the target VM, address: '127.0.0.1:55304', transport: 'socket'


4251
Extracting all keys from CallOptions objects5

In gax-java, we would like to be able to merge two CallOptions objects together. We are able to partially implement this merging of CallOptions using the with<X> methods available on CallOptions, such as here: https
However, currently it is not possible to extract the full set of custom options from the CallOptions object, which means we are not able to create a merged set of custom options.
Is there any way to extract the full set of keys from a CallOptions object currently? If not, would grpc-java consider adding either (a) a merge() method on CallOptions, or (b) a way to extract the complete set of custom options, to allow us to implement merging?


4252
RetryPolicy from serviceConfig may not be populated to RetriableStream if name resolving is not finished5

No description provided.


4258
bazel rules_kotlin visibility issues.5

What version of gRPC are you using?
What did you expect to see?
Visibility resolution not causing a problem.
Problem
I am the maintainer of the Kotlin Bazel rules and I am working on porting some of our Grpc stuff  to Kotlin. The visibility of the internal targets is causing the Kotlin compiler problems. I have only hit this problem in Kotlin.  The Java rules don't have this problem. The only symbol I am using is the InProcessServerBuilder in my test class.
The Kotlin compiler is probably being too eager. I hope there is a work short term work around.
If there isn't a quick fix  would it be possible to open up the visibility ?


4259
Limit size of a message5

I am using gRPC version 1.7.0 and this is my Service:
If I want to reject all LogData if its size exceed my limit then how can I do this. How to limit max size of a request. This is how I'm doing but at this point, my server has already parsed the request and allocate resource for it:
Is there any possible way to reject a request even before parsing it?


4261
ok http read header error6

What version of gRPC are you using?
After some dig, I found okhttp failed to parse :status: and content-type header.


4263
Android Java: Duplicate Zip Entry in Gradle with another library using GRPC in com.google.protobuf6

What version of gRPC are you using?
I'm using GRPC version 1.10.0.
What did you expect to see?
I'm getting an issue with
while compiling release + signed versions as opposed to debug versions.
We are rolling our own GRPC end and we have another library using GRPC:
Here's the dependency tree following exclusion of group:
Normally an exclusion of the group would work for the com.google.protobuf, but it doesn't appear to be working.
If you need more snippets of my project, let me know.


4278
OkHttpChannelBuilder#overrideAuthority not compatible with IPv6 hostname7

What version of gRPC are you using?
What did you expect to see?
Background: I'm using mutual TLS with a LAN client that presents an IPv6 link-local address as an IP SAN in its X509 certificate.
I expected to call OkHttpChannelBuilder.overrideAuthority("FE80::FABB:BFFF:FE01:3A52") to allow hostname verification to pass.
If you agree this behavior should be changed I'm happy to submit a PR. Perhaps we'd modify GrpcUtil#checkAuthority to strip square brackets from a validated hostname?


4284
Caused by: io.netty.handler.codec.http2.Http2Exception$HeaderListSizeException: Header size exceeded max allowed size (8192)8

What version of gRPC are you using?
What did you expect to see?
This error occurs when a Java client attempts to send a header larger than 8192 bytes when connected to a server that did not explicitly specify a SETTINGS_MAX_HEADER_LIST_SIZE in its settings frame.  (Note this cannot be replicated using a grpc-java server because netty always specifies a SETTINGS_MAX_HEADER_LIST_SIZE.)
The expected result is no error - the client should send the large header to the server.
The HTTP/2 spec Settings section says:
These statements indicate that if the server does not specify any SETTINGS_MAX_HEADER_LIST_SIZE, then the client should place no limit on the sending header size. However, netty is enforcing a default max header size on both sent and received headers.  And to boot, there does not seem to be any way to specify or disable the client sender header limit through the grpc-java API.  NettyChannelBuilder has the maxHeaderListSize method, but this only specifies the SETTINGS_MAX_HEADER_LIST_SIZE for the receive path.
I think the proper fix would be for netty to not enforce any limit on client sent header size if the server has not specified a SETTINGS_MAX_HEADER_LIST_SIZE.
I am looking for a long-term fix for this issue and short-term workaround if anyone has an idea. Thanks!


4286
java.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: UNAVAILABLE: Channel closed while performing protocol negotiation8

Please answer these questions before submitting your issue.
I've tried to use grpc-java library to connect sever side with SSL,  but it was failure.
What version of gRPC are you using?
What JVM are you using (java -version)?
What did you expect to see?
Connection with SSL works fine.
What did you see instead?


4290
java.lang.IllegalArgumentException: Invalid host or port: http 500519

I am experiencing this exception because apparently ManagedChannelBuilder is not generating properly formatted url.
The generated url contains a whitespace instead of a colon and hence the exception is thrown
This is the where i am experiencing this
What can be the reason?


4291
AltsHandshakerStubTest.closeEarlyTest is flaky9




4296
How to implement username/password authentication. Python client, Java server.9

I'm trying to figure out how to authenticate with username/password when I create a connection and nothing found.
So, my questions:
How to create a server with username/password authentication on java server?
How should python client connect to it?


4299
NettyServerTest.channelzListenSocket is flaky9




4302
Determine final NameResolver to LoadBalancer communication0

Alluded to in #4137 (comment) . The biggest issue is probably how Java allows a list of lists of addresses. This is different than the other implementations. We need to come to a cross-language agreement about whether list of lists is necessary.
But we also need to design the final solution for how proxy information should be plumbed from the NameResolver through the LoadBalancer into Subchannel. That will remove PairSocketAddress or stabilize it (with a better name!).
CC @zhangkun83


4305
Generate deadline per call from single configuration0

What version of gRPC are you using?
What did you expect to see?
The ability to specify a desired timeout per stub and have a deadline generated from the specified timeout per RPC.
Unless I'm missing something, the only way to effectively specify a (relative) timeout is to use (absolute) deadlines repetitively as follows:
This means I need to write .withDeadlineAfter(100, TimeUnit.MICROSECONDS) or similar on every call site. It would be nice to be able to specify a timeout or deadline generation specification on the stub since I consider it a cross cutting concern.
MyServiceStub stub = newBlockingStub(channel).withDeadlineSpecification(100, TimeUnit.MICROSECONDS);
Where a Deadline equal to Deadline.after(100, TimeUnit.MICROSECONDS) has been set on the CallOptions before each call.
Is it otherwise possible to specify a relative cutoff?


4312
Provide more detailed information on OpenCensus spans1

I had made some modifications to gRPC that I'm running in a local fork which have been very useful for debugging network issues, performance etc.  I wanted to start a discussion of adding more useful tracing information into gRPC.
Currently the only information provided comes from the ClientCallTracer, which simple marks the start/end of a call, along with message send/recv events.
I've additionally instrumented the netty transport (via NettyClientStream) to annotate the send operation span with:
Specifically the frame queued and frame sent annotations are very helpful for debugging network congestion on the client end.  Would this kind of tracing be useful for others?  I can clean up my code and submit a pull request if so.


4317
Handle run-away netty buffer thread-local caches1

gRPC uses ByteBufs from many non-Netty threads for message serialization. When the application has many threads, the per-thread caches can get out of hand.
#1758 is related, as it seems allocating the per-thread cache has a noticeable cost. I thought there may be another related issue, but couldn't find it; maybe I'm thinking of that Netty one.
@jpitz had success just outright disabling caching for non-Netty threads. I'm slightly surprised that didn't cause a CPU increase, as that would seem to mean our direct buffers are no longer cached. If our benchmarks show similar behavior, then SGTM.
However, I also wonder if we should swap to heap buffers for message serialization and framing. Especially for small messages. That might hide most of the cost of removing the cache, since for larger messages the cost of direct buffer allocation is likely dwarfed by any copying.
CC @carl-mastrangelo


4319
Cannot assign a value to final variable 'features'1




4320
Variable 'features' might not have been initialized2




4327
Reconnect wait time? 2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Some way to configure a delay before a reconnect may happen.
We are currently running our applications in a kubernetes cluster and using services to point to the gRPC server:
When the server-pod is terminated, it sends a GO AWAY to the client and kubernetes spawns a new pod.
If in between the GO AWAY and the start of server-pod2 the client-pod tries to connect, the kubernetes service forwards the request to the old pod (IP: 192.168.0.10) and the client-pod has to wait for a socket timeout around 2min before it can reconnect.
Do you know of a way to configure the client to wait after a GO AWAY before trying to reconnect? The waiting time would be very short (like 5s).


4328
Use grpc-java Crash2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
crash, please see grpc-ecosystem/polyglot#99
Thanks!!!


4329
FR: AutoClosable AttachedContext2

Today, if you want to use io.grpc.Context.attach(), you have to provide your own try/finally block. In order to take advantage of try-with-resources, if there were a AttachedContext that implemented java.lang.AutoClosable, then you could have
and omit the finally block.


4332
Document generation for gRPC API3

Could you please help me out . How to generate document for gRPC API in JAVA env using maven


4333
Channels always logspam about service config3

There should be absolutely no service config processing today. It seems this code path should have been avoided with at least something resembling a null check in ManagedChannelImpl.


4344
Inprocess servers and channels should not show up in channelz4

At least not until they are fully supported. Today, they can be found but some data is mysteriously missing.


4348
Access to TLS client and server certificates4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I have a very specific problem. We want to build a GRPC service with mutual TLS. We don't care about (client or server) certificate validation. However, for both client and server we want to have the ability to fetch the others party certificate.
In other words:
a)  If I'm a server I want to learn about the certificate that the client is using when negotiating a TLS connection.
b) If I'm the client I want to learn about the certificate of the server.
We solved the problem from the server side with a ServerInterceptor (see example project https).
We are however struggling on the client side.
Questions
Does the grpc-java API allow to fetch the server certificate?
If it doesn't allow, how we would have to modify grpc-java to allow it? We are happy to contribute with a PR :) We just need a little help.
How can we disable the certificate verification? (We are using self-signed certificates on both sides)


4350
Build Failures5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Whenever i am building the grpc-java master, i am getting following error.
What went wrong:
I took trace of the build and gotten following info.
I was expecting google/protobuf artifacts to be included as part of the project.
Am i missing something in this? I am pretty new in this and googling the topic did not get any useful info.


4351
Async server stub relies on callback for cancellation detection5

There's an issue on server-side on how to notify the server of cancellation. That's been solved a couple different ways, but the first way was to throw in onNext() if the client had cancelled. However, it seems that's triggered by a callback, so it won't trigger if the application is consuming the callback thread.
We could check serverCall.isCancelled() instead, although we'd need to determine how much of an impact that'd have to existing servers. Alternatively, we could encourage more use of ServerCallStreamObserver.isCancelled()/Context.isCancelled() and similar ways of detecting cancellation.


4352
Service IP Address can be set 0.0.0.0 Allow External Network Access5

help me


4356
Add rest endpoint annotations for health.proto5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Using gRPC 1.9.0
What did you expect to see?
If it were possible to implement the health.proto service as REST interface too, it would minimize the duplication and generation of protofiles when using together with the repository of gRPC-gateway(https).


4357
Tracking issue for PairSocketAddress5

PairSocketAddress is used for us to express an EAG that has a proxy.


4359
Stabilize channel state API5

ManagedChannel.getState(), ManagedChannel.notifyWhenStateChanged(), and ConnectivityState.


4367
AbstractManagedChannelImplBuilder#executorPool set, but never used6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I specified a custom executor, but noticed no changes on the client. After starting to investigated, I noticed that the executor that is set with executor() is never used in the AbstractManagedChannelImplBuilder#build method. Instead, it grabs the shared pool and uses that instead.
Snippet from source:


4377
conflict with guava7

when i'm using grpc (1.10.1 and 1.11.0) with guava depedency version 24.1-jre it show:
UPDATE
after dowgrade guava to 20.0 it work again. Tks


4381
follow up changes of opencensus8

MonitoringService seems to be outdated because com.google.instrumentation was already changed to io.opencensus.instrumentation.
com.google.instrumentation is still defined at build.gradle so it was not failed on compilation time.
Was it not updated on this PR?


4382
ATTR_LB_ADDR_AUTHORITY not available for custom name resolvers8

I'm looking into implementing a name resolver, but I'm failing to support service config and gRPC LB server address due to the dependency on
core/src/main/java/io/grpc/internal/GrpcAttributes.java, which is not accessible outside the grpc-java package using bazel.
For example, NamesResolved.java has the following code:
Since attribute keys are identity based, I'm not able to see how I can support this in a custom name resolver without hacks or patches.


4385
RoundRobinLoadBalancer STATE_INFO attributes never set to READY8

In RoundRobinLoadBalancerFactory, we have
But getSubchannelStateInfoRef(subchannel).value.getState() == READY never happens because the attributes is never set to READY, it is always IDLE.


4390
the latest okhttp version is 3.10.0, why grpc still use okhttp 2.5.0?9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
okhttp in grpc should be the latest version ,which is 3.10.0.


4407
feature request: support grpc servers on android0

Running a grpc server on android in java is not supported. Running an HTTP server on android is well supported and has many legitimate use cases. The same should be true for running a grpc server on android.
This need has come up in many issues. And the general suggestion is to use c++. Such as in #3041 #2273 #2227 and others. See also questions from stack overflow.
The docs are also misleading. In https it is not clearly stated that the server is not running in android, and this is not supported.
If the choice to not support android servers in java is continued, then the docs need to be made clear of this fact.


4412
Retried RPCs have stale grpc-timeout metadata1

Today, grpc-timeout is set by ClientCallImpl based on the deadline. But RetriableStream doesn't re-set the grpc-timeout when issuing more RPCs.
It'd probably be good to move grpc-timeout handling down into the transport. We already have the problem that any RPCs queued by DelayedTransport will have more stale timeouts in their headers. It'd be better to calculate the timeout as late as possible.


4423
NoSuchMethodError when creating connection to the server2

I have a GRPC server running and I'm trying to establish connection to that. When the client tries to execute the below code,
it's throwing the below mentioned exception.
This was working fine for some time now. What am I doing wrong here? Below are the versions I'm using.


4438
Examples dont work when updating the example WORKSAPCE file to released versions3

I ran into this when building a simple bazel/grpc app but have verified that I run into the same issue in the provided examples.  If you update the WORKSPACE file in examples/ to use
you get errors like this
What is the proper way to reference grpc-java in our workspace file?
What version of gRPC are you using?
What did you expect to see?
This command to build the examples.


4441
Could not find io.grpc:grpc-protobuf:1.13.0-SNAPSHOT4

FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':compressingHelloWorldClient'.
Could not resolve all files for configuration ':runtime'.
Could not find io.grpc:grpc-alts:1.13.0-SNAPSHOT.


4443
Compile grpc-java using Bazel in another repo4

What version of gRPC are you using?
What did you expect to see?
A successful compilation :)
I ran bazel build //tools/local_server:local_server on the code in this Pull Request: google/startup-os#47
I had this issue:
I then switched to head, since I saw that you fixed relative to absolute paths for some dependencies (can't find that commit now). Head was at commit 46079ff when I tried. I got the following error:
I then added the following bindings to WORKSPACE:
I then got the following error:
General note:
My main goal here is to be able to compile and run a grpc java server, built with Bazel.
The code in the startup-os repo serves as a collection of examples for how to use different Google Open Source technologies together. Once this bug is solved, you can point people to that repo for a working example.
Thanks!


4451
ManagedChannelBuilder.maxInboundMessageSize(int max) is still ExperimentalApi.5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Currently, we used version 1.0.3
We have a plan to change version 1.10.0
What did you expect to see?
Depending on it (#2307), I tried to use NettyChannelBuilder to adjust maxMessageSize in version 1.0.3.
But NettyChannelBuilder.maxMessageSize is @experimentalapi.
So, I tried to use version 1.10.0 depending on #2382
In version 1.10.0, we can use ManagedChannelBuilder.maxInboundMessageSize(int max), but It also @experimentalapi.
It's really hard to use experimentalApi in real service.
So, Could you please confirm it?
I hope we can use ManagedChannelBuilder.maxInboundMessageSize as a non experimentalAPI ASAP.
Best regards,


4452
Update error-prone to 2.3.15




4456
grpc-java-api-checker complains about imports of @ExperimentalApi5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Don't flag imports of @ExperimentalApi types. I don't see a way to disable that kind of check:


4459
Attributes.equals disagrees with hashCode5

We need to calculate hashCode manually.


4460
Could not find any version that matches io.grpc:grpc-core:[1.12.0]6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
A successful build when switching from 1.11 to 1.12.
Using gradle 3.5.1 with the java-library plugin.
When switching from version 1.11 to to 1.12 build fails at the task "extractIncludeProto" with message
The library grpc-core does get pulled in but somehow not recognized. Adding an explicit implementation/dependency to grpc-core makes the build work again.


4465
Add Android example Bazel build support6

It looks like this would solve the dependency problems I experienced when I tried last:


4469
Provide a way for NameResolvers to dynamically provide authority6

Today, getServiceAuthority() must not do any I/O to determine the authority. That is, it must be computable from the target string.
It's come up before to allow the NameResolver to retrieve the authority from the name resolution system. However, in the past those systems couldn't securely retrieve the authority so it would allow MITM attacks. We've now come across a resolution system that can provide the necessary security guarantee, as it uses TLS to communicate with the resolution system.
Since this is a niche use-case, I think it is fair to leave getServiceAuthority() in place. Also, Channel.authority() is implemented via getServiceAuthority(), so the current restrictions are still probably appropriate. We'll just need to add documentation to Channel.authority() that it may be partially wrong (since each backend may have a different authority). CallCredentials shouldn't have an issue with dynamic authority, although that should be verified.
I think we can use an authority Attribute on the EquivalentAddressGroup or PairSocketAddress. This does require us to make a decision for #4302 since it's basically the same problem. The design decision has been made; we can safely use EAG here.


4471
Tracking issue for channel tracing experimental API7

No description provided.


4476
io.grpc.testing.integration.MoreInProcessTest asyncClientStreaming_serverResponsePriorToRequest is flaky7




4477
Add ProtoUtils.metadataMarshaller7

We have it in ProtoLiteUtils, but not ProtoUtils. For now it can just call ProtoLiteUtils. The method signature should accept a Message instead of MessageLite, however.


4482
Please support setting and enforcing maxInboundMessageSize on Server/ServerBuilder8




4495
Netty ObjectCleanerThread keeps high CPU9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?



4505
Illegal character in hostname error when using consul and docker0

I'm having microservices running in Docker containers and I use Consul as service discovery. Every now and then the GRPC calls between the services are failing and I get this exception:
io.grpc.internal.ProxyDetectorImpl.detectProxy Failed to construct URI for proxy lookup, proceeding without proxy
What version of gRPC are you using?
What did you expect to see?
I would expect that when the DNS name contains non-URI friendly characters, the GRPC call to continue to work and encode the URI properly.


4513
No functional server found with gRPC v1.11 and 1.12 on Android1

What version of gRPC are you using?
This work on Android with the following dependencies:
However, with gRPC version 1.11 and 1.12 of those libraries, the following exception is thrown when a gRPC server is started:
java.lang.RuntimeException: Unable to start service @c7238b7 with Intent { cmp= }: io.grpc.ManagedChannelProvider$ProviderNotFoundException: No functional server found. Try adding a dependency on the grpc-netty artifact
What did you expect to see?
I was expecting the server to start with latest version. The same build configuration and the same application code is used for each gRPC dependencies version. It only works when using version 1.10.1
Our application is running on Google Pixel device with Android 7.x and 8.x, We're using Java 8.


4515
examples/helloworldtls: SSLHandshakeException when using ClientAuth.REQUIRE with two hosts1

I am trying to configure TLS with required mutual authentication between two hosts in LAN without DNS-server using http
In my configuration server is accessed by IP so I've added subjectAltName to certificate generation script, see https:
What version of gRPC are you using?
What did you expect to see?
I expect that this is a valid configuration
What I get?


4516
unfair thread pool allocation for stream clients1

What version of gRPC are you using?
What did you expect to see?
Fair sharing of the server's thread pool among clients.
I have a service that can be modeled like this:
Each individual client uses a a single RPC to ping infinitely and process responses as they arrive. I was surprised to find that thread pool resources don't seem to be shared fairly among clients in this situation.
Here's the experiment I ran:
Send PingRequests as fast as possible without waiting for replies (flow control kicks in right away)
The first client gets a steady stream of responses (1 per second) and the 2nd client never gets a response.
Is that the expected behavior?
I explored this a bit further using a ServerInterceptor. I found that the first client dominates the executor's task queue with many more calls to onMessage() than I would expect given the docs for ServerCall.request:
Requests up to the given number of messages from the call to be delivered to ServerCall.Listener.onMessage(Object). Once numMessages have been delivered no further request messages will be delivered until more messages are requested by calling this method again.
That's not what I observe though. Instead I see two calls to ServerCall.Listener.onMessage for every one ServerCall.request(1).
If I delay the extra onMessage() in my interceptor such that only one onMessage() per ServerCall at a time is given to the executor, then I get the client behavior I originally expected: both clients see responses in a round-robin way.
I can use my ServerInterceptor to get the behavior I want but I'm nervous about deviating from the standard behavior. Also, maybe this a bug that needs to be reported?
Any advise or info is appreciated.


4518
Client-side h2c (insecure HTTP/1.1-to-h2) upgrade does not work1

When specifying NegotiationType.PLAINTEXT_UPGRADE, the client should connect over HTTP/1.1 with headers indicating that this request should be upgraded to (still insecure) h2.
There seems to be quite a bit of machinery in place to make this work, but currently the client does not start sending the request after performing the TCP handshake. A possible fix for this has been previously proposed in https(and when I tried this locally it did appear to help), but the code has evolved since.
Our use case for this feature is that while in production you'd use TLS and ALPN to serve both HTTP/1.1 and h2 requests on the same port, during development it can be convenient to run without TLS. NegotiationType.PLAINTEXT is available for non-TLS connections, but does not (really) support HTTP/1.1 and h2 coexisting on the same port.
What version of gRPC are you using?
Checked on 1.11.0, 1.12.0 and master.
What did you expect to see?
I expected the grpc-java Netty client to successfully connect to a h2c endpoint when configured with NegotiationType.PLAINTEXT_UPGRADE.


4520
Dynamically linked netty-tcnative is compiled against OpenSSL 1.0.12

On Ubuntu 16.04 LTS NettyChannelBuilder with dynamic netty-tcnative (linux-x86_64 classifier) throws
This is related to
Is there any workaround for this problem? Is it possible to disable hostname verification in grpc-java? (I know, this question has been asked before)


4528
Roll forward "auth: Require PRIVACY_AND_INTEGRITY for GoogleCredentials"2

It was rolled back in #4521 because of breaking internal users.


4543
Use property instead of static FQCN for ContextStorageOverride4

Is there a reason, why you don't use a property which can be set to identify the overriding class for Context.Storage? As it is one is required to create a class in package io.grpc.override in one's own package. This may even cause unresolvable collisions if multiple overrides were to be used.
Could this be something like (would be BC):
So I can do
Or am I missing something here?


4544
Receiving "INTERNAL: Panic! This is a bug!" messages4

We are experiencing TaskRejectedExceptions although the thread pool is not exhausted.
We are sending about one unary request every 1-2 seconds and the request is returned within less than 100 ms.
The message we see (on the client) is:
The call is done like this:
The executor which is set for the managed channel is configured as follows:
It seems to be weird that the queue is rejecting new entries although there are idle threads. Also, knowing that there is only one onNext() and one onCompleted() per request, why are there so many entries being scheduled on that executor? If I understand it correctly, the executor is used to process the on*() events, correct?
I am not sure if this is actually a gRPC issue or an Executor issue, but gRPC is the only place where we see this.
What version of gRPC are you using?
What did you expect to see?
No Panic


4546
Receive UNKNOWN: Exception was thrown by handler4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm using BI stream on Android.
But after get first bunch of values, I get UNKNOWN: Exception was thrown by handler
My ios colleagues have same problem. But they have solved it by using:
What am I doing wrong?


4547
ClientCall#cancel() implementations should be thread-safe4

Calling ListenableFuture.cancel(true) on the stub returned by ServiceNameGrpc.newFutureStub(Channel channel) calls through directly to the underlying ClientCall#cancel() method.  ListenableFuture#cancel() may be invoked from any thread.
ClientCall implementations (and in particular ClientCallImpl) should be fixed safely handle this, and the ClientCall docs updated.


4552
Grpc java interceptor5

Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.0.3
No way in grpc java to insert  custom logic before retry in case of  error from server.
Our grpc server can come in a random port.Lets say server go down our application infra should retry and before retry should open up channel on new server port.
As we have several client applications I need  to insert in common place rather than asking client to handle retry.


4558
StreamObservers.copyWithFlowControl calls StreamObserver.onComplete twice5

Client stream observer on ready handler is invoked after stream is half closed.
Following error is found:
payload is a string of  1 million char.
This error does not happen with small payload.
What version of gRPC are you using?
What did you expect to see?
onComplete() should only be called once for request stream.


4559
High latency establishing new connection and sending first request5

I'm seeing extremely high latency establishing new connection and sending in the first request (simple ping/pong). It's taking ~ 80 ms to just do the initial handshake,HTTP2 settings exchange etc.
Here's a Wireshark capture of the packets between a grpc client and server running on the same host and you can see the actual RPC request is made ~ 100ms.
Not sure If I have something misconfigured, just wanted to confirm if this is normal?
What version of gRPC are you using?


4562
Move internal.GrpcAttributes.NAME_RESOLVER_SERVICE_CONFIG to NameResolver6

With NAME_RESOLVER_SERVICE_CONFIG key internal, it's impossible for third party name resolver providers to toy with service config.


4563
ManagedChannelBuilder does not expose NettyChannelBuilder.maxHeaderListSize()6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
master
What did you expect to see?
Is there a reason that this method is not exposed? Or, if I want to restrict the MAX_HEADER_LIST_SIZE, is there a way to configure that through ManagedChannelBuilder or anywhere else?


4564
DnsNameResolver not work with Docker in user-defined bridge network6

Differences between user-defined bridges and the default bridge
So i can communicate each other with Container Name.
I confirm that B to communicate with A is ok.
Sorry, i don`t know whats the reason.


4566
Insanely cryptic AbstractMethodError thrown when making any kind of request to the gRPC server [v0.12, Scala]6

What version of gRPC are you using?
What did you expect to see?
So I'm trying to create an incredibly simple server in Scala:
And I have absolutely no idea what it could be. At first I thought my service class wasn't being initialized properly, but after removing the addService() call the issue persisted. It doesn't seem to be a service-level abstraction issue, but more so an abstraction issue when trying to open any kind of socket at all. I've based this implementation directly off of what I found in the docs, but perhaps I'm missing something. Any reason this could be happening? Is this a bug?


4567
OkHttp does not have MAX_HEADER_LIST_SIZE6

It seems it isn't imposing any limit now; I don't see any reference to DEFAULT_MAX_HEADER_LIST_SIZE within it. But it could also be hard-coded to something.
That makes it a bit weird to add, as it could impact existing users, but the limit is also there to protect the client and help encourage limited metadata for the benefit of proxies. This is also a behavior difference compared to the other implementations.


4572
ServiceConfig example missing7

Hi - Is there an example available for a sample service config with Hedging policy configured. I read https but wasn't sure what the actual values for methodConfig.name would look like.
Also are there any helper methods which take a json string and parses and returns Map<String,Object> which can be passed to attrs.set;


4573
How to count  number  of active connection  in grpc?7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want o be able to know in  my TServiceImpl  the number of  active  connection


4574
Abnormal asc files in v1.12.0 artifacts in maven central7

We noticed some anomaly of io.grpc v1.12.0 artifacts uploaded to maven repo
Some asc files like http were added in 2018-05-07, and they are in binary format instead of text.  (ASC files should normally be text files)
Some asc files in the '1.12.0' directory like https are in binary format. But in other version directories like https:, these files are in text format.
This might be the reason that io.grpc v1.13.0 artifacts were failed to be uploaded to maven central.


4576
upload_artifacts.sh is hard to manually test7

Currently it can only be run on Kokoro and only for tagged releases. @zpencer, has a kokoro job that lets him kick off a job against a private (fake) tagged release but this doesn't scale to more users and is slow as it requires building all dependent artifacts.
We need a way to be able to run the majority of the script from our workstations. This is generally not too hard with a little bit of reorganization, with the exception of gpg. While with gnupg 2.x we could leverage the gpg-agent to split kokoro-specific code out, there's not an easy way for gnupg 1.x. We either need to use something similar to the release key for testing or require gnupg 2.x. Since Kokoro is using Ubuntu 14.04 which has gnupg 1.x, we could use a docker container to get gnupg 2.x.


4581
java server:Stream 3 sent too many headers EOS: false8

What version of gRPC are you using?
What did you expect to see?
StreamObserver can send message at the same time in the threadPool


4583
Remove extraneous maven-metadata.xml*.asc files in maven repo8

We closed #4574, but in maven repo, there are still some maven-metadata.xml*.asc files, which are not in ascii format and should be removed.


4585
How support 20K connections in server PC8

I tested a 10K test connection, and then the server crashed. How does grpc-java set up to support more than 20K request connections on a PC
What version of gRPC are you using?
What did you expect to see?
How support 20K connections in server PC


4590
Plumb lb contextual info to transport creation9

For channels that use ALTS and grpclb, there are several connection types:
ALTS relies on the connection type to determine which type of negotiation to use. This info needs to be plumbed to the ProtocolNegotiator.
cc @jiangtaoli2016 @ejona86


4595
Question: Detecting server downtime on client9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am using a streaming response service rpc subscribe (SubscribeRequest) returns (stream Event).
This is an infinite stream which will never be completed by the server. On the client side I am using an async stub to connect to this service. I have observed that-
When server restarts, the onError interface is called on client and I am able to resubscribe using that.
When the connection is idle for sometime, and server restarts, the client does not receive any onError callback and just stalls, It does not receive any new Events on stream.
How can I reliably detect server disconnection and handle reconnect gracefully?


4598
Typo in round robin factory name const in AutoConfiguredLoadBalancerFactory9

An easy oversight. Just wanted to give a heads up.


4600
Proposal:  Remove mutable / immutable handler registry distinction0

I'd like to float the idea of removing the mutable / immutable service registry distinction on io.grpc.Server, as I feel it is an unnecessary distinction.  As far as I can tell, the sole purpose was a performance concern, but this shouldn't have bearing on the API surface.   The methods to get it are Experimental, and only seem to be used for reflection.  I believe reflection can still be efficient without knowing the difference.
This is not the same as the "fallback" registry, which is stable API, and IMO is a better distinction than mutable / immutable.
Thoughts @ejona86 ?


4602
Audit code path when GrpcLB is not in ClassPath0

We need to guarantee that if GRPCLB addresses are provided by the NameResolver, they won't make it to a LB instance other than GRPCLB, as other LB types will not properly ignore the GRPCLB addresses and try to route traffic to them and never realize all such RPCs will fail.
Today it seems AutoConfiguredLoadBalancerFactory will throw, which isn't probably appropriate because it will cause the channel to go into panic mode. Instead, it could choose a LB instance that fails all RPCs with a clear Status. Or it could consider stripping the LB addresses and continue like normal, passing the non-LB addresses to the PF/RR/etc. If there are no non-LB addresses, maybe it could still fail RPCs with a clear status saying gRPCLB is required for this target.
We should also add a comment to the GRPCLB Attribute Key noting that LB policies won't receive it.


4610
your REDME demo is error1

I want to try use this tools by MVN. So I use your REDME demo but my MVN can't find
I don't known which version  plugin match which version protobuf.
My protobuf version is 2.5


4614
AutoConfiguredLoadBalancerFactory throws in many cases1

When LBs throw, we go into panic mode and the channel is permanently broken. Instead of throwing, AutoConfiguredLoadBalancerFactory could go into some failure mode where it fails RPCs, but still keeps the channel alive in case things improve.
However, some times there are throws scare me a lot, in that they are failing the channel due to invalid service config. Different logic is probably necessary there. Related discussion: starting at grpc/grpc#15896 (comment)


4615
Basic setup doesn't work. make better documentation1

I used the autogenerated code from protoc. I tried to use the client to make a simple call and the dependencies are all messed up. This might not be the right location for this issue, but I'm not sure where else to post it. Also, seeing that you have over 300 issues, this will probably never be resolved. That being said, after having to figure out the correct gradle magic spell to pull in the correct library and version of tcnative, I finally got it to work (apparently it's different depending on the OS). Why doesn't grpc-java just pull in the correct version(s) of tcnative? or why don't the docs say anything about how/what/where to get the basic hello world example to work.
What version of gRPC are you using?
What did you expect to see?
something that builds without scouring the internet for days while wanting to blow my brains out


4618
Add LB.Helper.createOobChannel(List<EAG>)1

This would allow removing the flattening logic in GRPCLB. However, #4469 probably should be completed first to allow the EAGs to each have their own authority. This may also mean we want to change the "this is a GRPCLB server" attribute to something other than ATTR_LB_ADDR_AUTHORITY.


4620
upgrading vision past 1.33.0 gives IllegalArgumentException: SunJSSE selected, but Jetty NPN/ALPN unavailable2

I'm running a discord bot on a raspberry pi and using vision to perform OCR on mobile screenshots. It works fine with 1.33 and lower, but 1.34 and 1.35 throw IllegalArgumentException: SunJSSE selected, but Jetty NPN/ALPN unavailable.
I'm running a build of Java 10 from here (since the official openjdk binaries are 64 bit):
Relvant stack trace from 1.35:
Is this a bug, or intentional? Can I enable or disable something via config to update the client?


4624
ManagedChannel.getState() throwing a N2

Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.1.2
What did you expect to see? Expected ManagedChannel.shutdown() to execute without throwing a  java.lang.UnsupportedOperationException: Not implemented exception


4626
gae-interop jdk7 timeoutOnSleepingServer is flaky2

It looks like a bug may be hiding the real failure information.


4634
Conflig between netty-transport-native-epoll and netty-tcnative-boringssl-static3

Hi all,
I am doing service as connector using grpc 1.13.1 with the following roles:
Categorize requests, after that forwarding through other services (as client side).
Between the connector that calls the other services through the domain gateway, nginx uses ssl
The problem encountered conflict when:
How do I fix the error described above
Thanks


4640
getExtension can get values in android4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.13.1
What did you expect to see?
rspPacket.getExtension(RoomsvrCommmsg.cMDCREATEROOMRSP); the server had sent, but i can not get the values. can anyone help me? I use in android! (use golang as server)


4641
getExtension always get default values4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.13.1
What did you expect to see?
getExtension always get default values. can anyone give me some example ? how to use ?i use proto 2 in android . thanks!


4642
Does grpc/netty now support TLS on Android?4

A year ago, I opened an issue (#3041) regarding grpc in Android.
The purpose was to create a secured communication channel between server and client, both in Android.
I would like to know if in the recent updates grpc or netty were upgraded to feature this or do we still have to build the C++ server into the project?
Thank you and best regards.


4645
Tracking issue for ProxySocketAddress experimental API4

No description provided.


4648
Please update tests w.r.t new releases4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The tests are not up-to date.



4651
Received DATA frame for an unknown stream error5

Hi - We are seeing few sporadic "Received DATA frame for an unknown stream"  error on server side. On the client side we are making a unary call with deadline. Is this error expected on server side when the client deadline has been exceeded?
On the server side we do check if the context hasn't been cancelled via something like:
Here's the stack trace:


4654
Fix build issues for jdk105

After #4652, a build issue with jdk10 was discovered. We ended up disabling jdk10, but we should fix the underlying issue and re-enable jdk10.


4656
Abstract class missing in compiled .proto files5

Hello folks
Instead of using gradle or maven I would like to "manually" build my .proto files. I use the following command to do that:
protoc --proto_path=./ --java_out=./ ./helloworld.proto
When I look in the output files I'm not able to find the abstract class which I should extend in my Server like in the example described:
When I run the example step by step then everything works like expected. What I'm doing wrong?
What version of gRPC are you using?
What did you expect to see?
When I build manually the .proto files, there should be an abstract class included.
This is not the case.


4658
StreamTracer should be mockable5

#3305 put DoNotMock on StreamTracer saying that the mocks are not thread-safe. But mockito claims they are, except for stubbing and verify methods. We need to figure out where the discrepancy is and either file a bug against Mockito or let the StreamTracer be mocked.
I discovered this as part of removing DoNotMock for #4452. For my changes, I left things as-is, but I found the documentation I wrote to be questionable.


4671
Drop support for Java 77

#3961 (drop Java 6) is coming to a close. This issue is to track dropping support for Java 7. Or rather, using Java 8 language features. As discussed in #3961, Android has fine support for Java 8 language features. Java 7 isn't supported any longer and the Java community jumped on Java 8 pretty quickly. gRPC in particular would love to be able to use default methods on interfaces, and similar Java 8 features.
This issue is to track what needs to happen before we can drop Java 7. If that is "wait for X to happen," that's fine, but if we decide we can't drop Java 7 support yet we should have an idea of when it would be possible.


4677
NPE in ProxyDetectorImpl7

What version of gRPC are you using?
What did you expect to see?
A customer using google-cloud-java reported seeing NPEs around the time their RPCs time out. According to the customer, this happens even though they are not using a proxy.


4678
Netty for Header to deal with7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Problem solving
Hi,I am using GRPC with Netty. Now I want to process the Header passed by the client side, in the HeaderServerInterceptor. But this Header, which I also want to use in specific services, could you please tell me how to get it in specific services?


4680
Consider using Gradle's dependency locking8

Gradle 4.8 added support for dependency locking. It'd be nice to use it so that we could easily and periodically bump versions of our dependencies. Certain dependencies we may not want to bump, but the rest of them could use + syntax so we wouldn't have to manage them as manually.


4681
Consider swapping to Gradle's Maven Publish Plugin8

We're using the old maven plugin for generating artifacts. It doesn't support parallel build and has long been discouraged.  We had to use it previously to sign artifacts. But since we now sign artifacts with Kokoro and the Maven Publish Plugin supports signing there's no known limitations that would prevent migration. We should then remove the -Dorg.gradle.parallel=false scattered in our various scripts.


4683
Tracking issue for StatusRuntimeException8

No description provided.


4684
How to properly obtain a message hash to send as metadata?8

What version of gRPC are you using?
What did you expect to see?
Currently in a project that I am working I need to send a hash of the parámeters sent to the server as part of a JWT token that is sent as Metadata (in our current REST API is sent as a HTTP Header).
The problem I am facing is that in a standard ClientInterceptor, and in a ClientCall, the Metadata is sent before calling the sendMessage method, so I came up with this "solution" (I'm using spring):
So finally the sendMessage does all three steps, start, request and sendMessage, but I feel that this solution could break in a non blocking scenario (I am building some tests now).
Could anyone give me some advice if this solution is OK considering the API desing of grpc-java or should I look into something else?


4690
Issues with protoc and protobuf-gradle-plugin9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The code would compile without errors.
I have the following questions;
I have organised my proto-files separate instances and importing them from a single root document, this gives a very unpleasant experience with gradle, while using protoc manually does not result in these issues. google/protobuf-gradle-plugin#254
Is it expected that the example below would fail? If this is the case, why can this only be shown at compiling phase of the project, but not while issuing protoc to generate the faulty code?


4691
Tracking issue for Metadata.discardAll9

No description provided.


4692
Tracking issue for SecurityLevel9

No description provided.


4693
Tracking issue for ClientResponseObserver9

No description provided.


4694
Tracking issue for StreamObservers9

No description provided.


4695
Tracking issue for StatusProto9

No description provided.


4696
Tracking Issue for HealthStatusManager9

No description provided.


4698
How to close or not display gRPC internal logs?9

How to close or not display gRPC internal logs?


4700
Dependency upgrades0

In build.gradle
There may be others but these are the ones that are conflicting upstream (that is, other versions already being selected) in google-cloud-java


4712
Does ServerInterceptor ensure that all the logic in interceptor done even stream close from client side?1

hi,
I'm now implementing Server Interceptor for GRPC.
I have limited resources, and want to return this resources after stream close.
so I implement interceptor like this.
in above, there is getResource and returnResource.
my question is
Does interceptor ensure that returnResource must happen even stream close at A point?
I always appreciate for your answer :)


4713
[Question] "grpc-netty-shaded doesn't work with epoll"1

Hi
From https
When using grpc, you can use grpc-netty-shaded in order to avoid netty conflicts. Unfortunately, it doesn't work with epoll. This repo builds a shaded version of netty-transport-native-epoll with the packages relocated the same way that grpc-netty-shaded expects.
So if I use grpc-netty-shaded in linux machine that will hurt performance ?


4714
Upgrade appengine-plugins-core from 0.3.91

Somewhere in the build tree this happens:
Download https
I happened to notice this in the output of ./gradlew check
0.3.9 is very out of date
That library was never intended to be used outside a few very specific projects.
Need to figure out how this gets pulled in; and if it makes sense we need to upgrade it. I'm surprised 0.3.9 still works against App Engine server side, and if it does I doubt it will very much longer.


4715
compile broken by protos1

This happens on both Mac OS X and Linux with a clean checkout with .gradlew check:
In file included from /Users/elharo/grpc-java/compiler/src/java_plugin/cpp/java_generator.cpp:1:
1 error generated.


4717
Consider adding warning to 1.14 release notes about using epoll1

Netty 4.1.27.Final includes a nasty regression netty/netty#8159 which can result in an explosion in native mem usage when using epoll transport. This isn't a problem in 4.1.25.Final / grpc-java 1.13.x, and is fixed in yet-to-be-released 4.1.29.Final.


4721
Audit GrpcFuture cancellation2

GrpcFuture is currently using an interruptTask() override to cancel the RPC.  This doesn't appear to be correct, as it is only called when cancel(true) is invoked on the outer Future.  There are a few problems with this:
The Future's cancellation is not atomically set with the calls.  If any callbacks start while the future is still cancelling, they may see the call is not yet closed.
The call is only cancelled when true is set.  This appears to be an incorrect interpretation of mayInterruptIfRunning, which is intended for tasks on an ExecutorService.  This is also different than internal RPC implementations
interruptTask() is bordering on being deprecated, and may not be available in the future
Futures can be cancelled from any thread, but ClientCall.cancel is not thread safe.


4722
GKE: Support for a bazel rule to generate api_descriptor.pb2

Are there any plans on adding a rule to generate the api_descriptor.pb thats required to uses grpc on GKE Endpoints.
Its described in the "Configuring the protocol buffer" of endpoints/docs/grpc/configure-endpoints
If there is I have built one and can submit a PR but im not really sure where to put it.


4724
Consider adding @Nullable / @Nonnull annotations to generated services2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
It would be very helpful for those of us implementing *ImplBase classes in Kotlin if the parameters of generated rpc methods were annotated with @javax.annotation.Nonnull as it gives tooling a hint that the signature of an override should use the non-nullable form of the parameter types.
Minor, but would make implementing services in Kotlin that bit more seamless.


4725
java version "10.0.2" 2018-07-17 javax.annotation2

Error has been referenced before:
When using java version "10.0.2" 2018-07-17 and building Kotlin example, receive the same error:
Have added the following dependency to resolve:
Is that the recommended solution?
Here is the previous build.gradle currently in the example:
Here is an updated build.gradle that runs without the error:


4726
getFullMethodName return different value in Java and Go.2

I want to put a signature which contains method name in the headers, but I different value in Jva and Go.


4732
grpc-netty-shaded incompatible with netty-transport-native-epoll3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I expected to be able to specify EpollEventLoopGroup and EpollDomainSocketChannel as the eventLoopGroup and channelType when using grpc-netty-shaded.
Due to netty-shading rewriting the package path, grpc-netty-shaded isn't compatible with regular netty packages. This is generally fine because grpc-netty-shaded contains all classes necessary to use netty with grpc, but jars like netty-transport-native-epoll are missing, making it impossible (I think?) to use them with grpc-netty-shaded.
Thoughts on this? Should netty-transport-native-epoll/netty-transport-native-kqueue be shaded into grpc-netty-shaded?


4740
Attach channel state information to locally generated DEADLINE_EXCEEDED errors4

Additional information can be added to description to help debug DEADLINE_EXCEEDED errors.
Things to consider:
Current connectivity state
Latest events from channel trace
Last error from LoadBalancer (saved even after LoadBalancer got out of TRANSIENT_FAILURE state)


4745
DnsNameResolver should delay refresh if one has happened recently4

RR and other LBs may cause refresh() to be called very frequently. There is a need to avoid constantly issuing DNS requests, so the cross-language design (can't find it right now; it's probably on a random C issue/PR) was to delay (not ignore/squelch) queries if a query had recently been completed. This allows time to combine the refresh() with other refresh()es and reduce the total number of queries.
grpc-java today relies on Java caching DNS results. This works fine. However, the cache does not apply to queries performed with JNDI. As we begin querying SRV and TXT records, we will need to add the delay logic.
This could be implemented in ManagedChannelImpl.
This is a blocker for enabling gRPC-LB. Putting this in 1.15 milestone since it impacts automatic ALTS detection.


4747
Certificates pinning4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Hi! I couldn't find any documentation about certificate pinning. I found some thread about it  but I failed to have any progress further on that. Can you provide a link, please?


4748
Negotiate SocketAddress between NameResolver and ManagedChannelProvider4

This would provide the ability to introduce unix: and inproc: name resolvers. gRPC could then automatically choose a compatible transport.


4749
Add InProcess name resolver4

This would make it easier for code to use inprocess during testing, as only the target string would need to be varied.
This is blocked on #3085.


4750
Add unix domain socket name resolver for Netty5

This is likely blocked on #3085.


4755
ALTS: release handshaker service channel if it is not used.5

In current ALTS java implementation, we create a shared ALTS thread and a gRPC channel to the handshaker service when we build ALTS channel. The channel to the handshaker service will already be there until application exit. It is more efficient if we can ref count the channel and free this gRPC channel if nobody is using it.
Note that ALTS C++ code does the same resource management: creates a thread and a channel to the handshaker service and only destroys them during grpc shutdown. http


4756
Download Jars link is broken on main page5

Seen here:  http


4764
Travis-CI is flaky when downloading6

Worse, sometimes is just hangs, with something like this at the end:
From https(since rebuilt), which just hung:
Downloading from apache-snapshots: https

This has gotten pretty bad this week. I think we may need to cache the .m2 folder to help address this.


4767
io.grpc.StatusRuntimeException: CANCELLED: cancelled before receiving half close6

What version of gRPC are you using?
What did you expect to see?
I created 100 clients on the same machine, then the client calls the bi-directional stream RPC
just like the following pseudo-code.
It always gives a runtime exception on the server side after a period of time. I want to know what the problem is?


4771
Support DiscardUnknownFieldsParser7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We could disable generating unknownFields from proto messages. It will be great if we could specify the  setting by using gradle.


4772
Doc seems to be self-contradicting on CallStreamObserver.disableAutoInboundFlowControl7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
looking at master HEAD
What did you expect to see?
Given that last paragraph I'd expect to see SERVER_STREAMING (1 request to * responses) to be affected on the server and CLIENT_STREAMING (* requests to 1 response) on the client, since these are the ones that have one inbound message.
SERVER_STREAMING has multiple inbound messages from the client's perspective and the same is true for CLIENT_STREAMING from the server's point of view, so listing those in the <ul> contradicts the part above.


4776
ClientCallImpl.toString() could be more helpful7

ClientCall current only prints out the method descriptor, which is not so helpful.  It would be useful to include some more detail.  Here are some ideas:
The deadline
whether the call has been started, half closed, or cancelled
whether initial headers have been received, or trailers recieved
what was the context for the call
the channel id of the call
if the channel has a subchannel assigned, the subchannel id or remote host name
Security level (if available)
Wait for ready or not
These would be useful when printing out the call, or including the call details in error messages, or generally.


4783
Tracking issue for ReadableBufferList being experimental8

#2937 and #2151 call for a public API that exposes an InputStream's remaining data as a list of ByteBuffers.


4784
gae-interop jdk7 is flaky with "Each request cannot exceed 50 active threads."8




4789
can't connect to grpc server in docker dontainer8

I have grpc server in a docker container and run my docker container with below command:
run -p 127.0.0.1:8090:9091 --name test -v "storage":"/usr/storage/test/" test
When I want to connect to this container from grpc client on calling remote procedure I got network closed exception!
I'm using grpc v1.12.0
Thanks in advance


4792
grpc server executor is not populating java.lang.Error to logging framework9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Whenever any java.lang.Error occurs, e.g. NoSuchMethodError, it gets logged by logging framework at least.
Above executor only catches RuntimeException and logs it to underlying logger. However, when an error occurs, e.g. NoSuchMethodError due to some incompatible dependencies the service implementation uses, the error could not be caught and logged, thus causing
the loop break while runQueue might still have remaining elements
the Error could not be logged, and fallbacks to ThreadGroup's default uncaught behavior, which is  to print it to System.err
The first consequence might be debatable as the framework does handle the remaining in the end, it seems. Although I would say throwing Errors would be quite usual from user code, thus it might be also reasonable to not break the loop and just "Log it and keep going".
The second one IMHO is having a severe impact. People often look at the log output instead of std err for long-running service. Above code will throw the Error all the way up, very likely there will be no other catches, making the error only print to console, making this error miss in any logging files, or other error reporting system like Sentry. We recently encountered such a case, very difficult to locate the throwing errors without any logs.
So can we also catch Errors and recover from it? Or at least log the error and re-throw it maybe, if you think recovering the error does not make sense.


4796
Move Channelz to io.grpc9

io.grpc.internal.Channelz is used to coordinate between the transport and the channelz service. Since that's coordination across artifacts/components putting that in internal hides an important API. Generally internal is just a "util" of classes that could be shaded into each transport without major issues.
The moved class can be marked @Internal without bothering me at this point.


4798
Dynamic certificate rotation9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We use mTLS to perform the authentication between client and server. To make thing secure, we decide to roll over the certificate for both client and server very often. Is there a good mechanism to dynamically rotate the certificate without restarting either client or server?


4800
Netty 4.1.30.Final0

I'm sure this is on your guys' radar but would be great if it could be included in the next release!


4809
OkHttp: INTERNAL: Flow control error Rst Stream0

Our android-interop test failed: https
junit.framework.ComparisonFailure: very_large_request failed expected:<[Failed... : INTERNAL: Flow control error
Note that the "expected" and "actual" appear reversed in the code, so ignore that "problem" in the message:
"Flow control error" seems to be caused by a ErrorCode.FLOW_CONTROL_ERROR, via a RST_STREAM. That should never happen in proper operation. This seems highly likely a bug, somewhere.
@ericgribkoff, what server are we using in this test?


4811
Issue NoSuchMethodError: io.grpc.MethodDescriptor1

Please answer these questions:
get this problem when starting.
What version of gRPC are you using?
What did you expect to see?
If you konw how to solve this problem please tell me.


4814
Reset deadline timer / per message deadline1

What version of gRPC are you using?
I have a bidirectional stream rpc where the call times vary wildly. Previously I had a default deadline but this call may take longer.
As I know the number of messages which have to be transported before the call, I could use a calculation like messages * time to get a deadline which might or might not be appropriate, i.g much too long for short call durations.
In most cases I don't care about the total call time but I would like to set a deadline that cancels the call if there was no message sent in the last X minutes.
A per message (+response) deadline or a way to reset the deadline timer every time a message is sent.
Is there any way to achieve this?


4815
Context handling in Tracers1

In 1.10 and 1.11 the Context returned by ServerStreamTracer.filterContext was attached when streamClosed was invoked. As of 1.12 (and continuing through 1.14) this no longer seems to be the case. It appears this was undocumented behavior and relying on it was my mistake.
That said, I think it would be nice if ServerStreamTracer methods were guaranteed to be invoked with the filtered Context attached. Either way, it would be helpful to have the Javadoc for filterContext specify whether or not the filtered Context is attached when other ServerStreamTracer methods are invoked.


4817
findBugs will fail if we don't check the return value of Context.attach().1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Not forced to check the return value of Context.attach().
Upgrading to gRPC v1.14.0 broke our findBugs check, because in 1.14.0 Context.attach() is annotated with @CheckReturnValue. We have to use a work around to pass the findBugs check.


4818
Exception : call was cancelled1

I wanna cancel a call in case I wanna close a server stream, but when there is no network after cancelling a call, all the request I send using stub I get the exception.
So how can I avoid the exception?
What version of gRPC are you using?


4822
How to use grpc in osgi environment now?2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Is there any bundle version of gRPC now? or how to convert .


4823
Built-in support of grpc-web clients2

Supporting grpc-web clients is possible only through a reverse proxy like Envoy which might reduce the performance. Is it possible to add direct support as this wrapper for grpc-go?


4827
Broken pipe - Debug logging - Openshift2

gRPC version : 1.13.1
I forward to you this issue : LogNet/grpc-spring-boot-starter#92
I see lot of exceptions (log as debug level) when I deployed a gRPC server on openshift.
Any idea ?


4842
permit some services from custom authentication [need help]4

I need help with custom authentication
I know we can use metadata and inspectors to support custom authorizations like basic authentication but how we can exclude some services from being authenticated in inspectors.
is there something like @PermitAll in JAX-RS (jersey framework implementation) which we can use and check the destination endpoint has this annotation or not in provider?


4843
Channel not changed connectivity state on some Android phones4

We use grpc-java on Android with Kotlin as language. When I turn off network or wifi, or turn on airplane mode on phone - channel connectivity state does not changed!!! He always stay on READY state...
Sample code how i listen connectivity state:
Maybe I do something wrong?


4848
JAVA Client-Server grpc with SSL . Unable to communicate client server4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to
I am expecting to run Client-Server grpc with SSL.
Hi,
And its working properly. But when I try to use TLS, getting following response:
Kindly suggest.
Thanks!


4849
NullPointerException if method is missing leading '/'4

If a go client initiates a grpc.ClientConn.NewStream to a java server, but the method passed into NewStream is lacking the leading '/', then io.netty.handler.codec.http2.DefaultHttp2Connection.DefaultStream will have a null property in io.netty.handler.codec.http2.DefaultHttp2Connection.DefaultStream.PropertyMap, resulting in a null stream in io.grpc.netty.NettyServerHandler#onDataRead and a NullPointerException when stream.inboundDataReceived(data, endOfStream); is called.
and on the client side the request results in
Adding in the leading / on the go client's NewStream call fixes the issue
What version of gRPC are you using?
This is using netty-codec-http2 version 4.1.29.Final with grpc-netty version 1.15.0
What did you expect to see?
A more descriptive error that there was something wrong in the request. Neither the server logs nor the client error message is descriptive. It is possible the text/plain content might be helpful from the client side, but I couldn't find out where the exception for the content type was coming from in order to fix it.


4850
Exception in thread "main" java.lang.IllegalArgumentException: Jetty ALPN/NPN has not been properly configured.5

I am trying to use grpc Java to use a service.
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Successful connection via grpc
Full Error log:
at this line in my java grpc client code:
Gradle dependencies:
Here's my gradle dependency tree:
Tried the troubleshooting guide: Used the same combination of
But still getting the error. Any help would be appreciated.


4854
Use default java keystore , when running unit test from intellij5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I Expect the jvm trusted store to be used, when loaded with self-signed certificate.
load certificate with keytool
Loading a self-signed, certificate like this:
Then creating a default stub without ssl context:
       ManagedChannel channel = onChannelBuild(ManagedChannelBuilder.forAddress("my.host.nl", 443)) .build();
Running the unit test from Intellij.
loading an SSLcontext
From the example "HelloWorldClientTls", I load the certificate (After conversion to .pem), and then the test is executed properly without Exception.
Question
Is this expected behaviour and simply the fact that the unit test in IntelliJ is not using the jvm default keystore? If so, why do you provide an example to load an SSL context with a Netty builder?


4858
Allow custom NameResolvers to support CONNECT Proxies5

This requires ProxySocketAddress being public. It seems we'll also need to inject ProxyDetector to NameResolvers.


4859
Binary releases5

Would it be possible to create binary releases for Linux Max and Windows, so people pinning to a released version don't need to compile it?
See example:
Here's an example for how to build Linux and Mac on a Mac. Mac is built with Docker:
Thanks!


4860
Android OOM upon network disconnect6

With grpc-java 1.15.0 on Android I am seeing out of memory issues when network connectivity goes away. isReady() indicates unlimited readiness on the outbound stream for a bidi call until Java runs out of memory.
Here is the relevant code, the complete example is at https:
where channel is more persistently defined as
To trigger the issue I do one complete run of the RPC (50,000 messages upstream & 50,000 messages downstream) with the mobile data network on, then I turn mobile data off and do a second run on the same channel. The second run quickly runs out of memory as grpc-java buffers messages it can't send. The channel does not see a break in the connection when mobile data switches off.
I expected that isReady() would take care of this problem, but it did not. I have tried different variations, including one where writing to the stream is done from a separate, dedicated thread, with 1ms delays between each write, to not block anything and avoid races, but the outcome was the same.


4864
Catch `Exception` even if it isn't thrown, for Kotlin6

Kotlin does not observe checked exceptions. https. It sounds like that that means that even things like Runnable can throw checked exceptions.
Lots of code will be broken in such an environment, including lots of Guava. But for improved Kotlin handling we could consider making sure to handle Exception catching places we have RuntimeException catching if the application may have been called.
It's probably a good idea to confirm the behavior and discuss this problem with Guava folks and come to a unified agreement.


4865
grpc binlog should support headers only or messages only6

Right now specifying headers-only would make us log messages truncated to 0 bytes, and specifying messages-only would make us log headers truncated to 0 bytes. This is not compliant with the grfc.


4867
how to scan inputs for xss and other similar attacks (server side) [need help]6

I need an example of scanning sent data (with for example Jsoup) inside a server inspector and if there is any problem (I mean XSS and other possible attacks inside a string or data) clean it and send it for processing


4870
android-interop-test isn't compiled in CI for PRs7

#4853 broke android-interop-test:
However, if you look, the CI is completely green for it. It appears this is because android-interop-test is not compiled as part of android.sh, so it is only once things get merged to master we notice the breakage.
As another note, we discovered (and should remember for the future) that gradle build didn't notice the compilation failure. Apparently build does not include the test app.


4878
Segfault when  LoggingAppender is configured in logback.xml in google-cloud-java7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Netty starting and terminating correctly
A user reported an issue with a system crash in google-cloud-java when starting Netty with LoggingAppender configured:
After recreating the issue and looking into the logs, it's a Sigsegv in native code outside the VM (
See the log file attached).
We tried updating all of the dependencies to 1.15.0 but that didn't fix it, the stack trace suggests it's an error in native code, so we're pretty sure it's not an issue with any Java code but some kind of issue with the binding configuration in grpc.


4879
java.lang.IllegalStateException: Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available7

I am getting following error in MAC where as same java spring boot application(pub/sub,spanner) is running fine in windows for my other colleagues:
nested exception is java.lang.IllegalStateException: Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available
Ran the compatibility checker output is as below:


4882
Build fails on arm64 in ':grpc-protobuf-lite:protobufToolsLocator_javalite', ':grpc-compiler:compileJava_pluginExecutableJava_pluginCpp'8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Successful build on arm64
What I saw instead


4884
Avoid unnecessary flushes for unary responses8

We currently optimize flushes for unary requests on client-side, by delaying flushing until the end of the RPC. When looking at the code, I realized it doesn't appear we're doing that for server-side.
Using wireshare with the interop client/server with empty_unary, we can see a single packet for the request but three packets for the response:
We should optimize the response flow so that all three frames are sent with a single flush.


4887
grpclb-in-DNS clients fall back too early when the LB server ends the stream right after sending a server list8

One of the scenarios is as follows:
One load balancer
the load balancer ends the stream with an OK status immediately after sending the server list.
The client, when ran in this test scenario, is expected to contact the balancer, get the backend address, and complete the test RPC with the backend. The Java client, however, actually ends up attempting to fall back to the non-existant fallback server right away.
I looked into this a bit and I believe the problem is as follows:
the client receives the server list, and starts creating connections to backends
the client receives the "end-of-stream" from the balancer immediately afterwards and checks if it should fall back
when deciding whether or not to fall back, the newly created subchannels are still in connecting state, and so the client proceeds to fall back.
Because the fallback timer hasn't gone off yet, I believe the client should be waiting a bit longer to give the newly created subchannels more time to connect. I'd imagine that this balancer server behavior is OK and could be used e.g. when the balancer needs to shed load.
The test can be reproduced on a machine with docker installed, by checking out this PR, creating a ../grpc-go directory with this branch, and running:


4890
Server returns batches of `Half-closed without a request` responses to client9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We expect to see no error message, or at least a better explanation about what is occurring.
These errors seem to correlate with increased latency. We have a Finagle client that connects to Envoy, which forwards to requests to the gRPC service. I've dug through the code and don't really understand how this situation would arise.


4893
NettyServer awaitTermination() returns before the shared EventLoopGroups are released9

What version of gRPC are you using?
What did you expect to see?
Expected to not see the NoClassDefFoundErrors because of a closed classloader after the call to awaitTermination returned.
In our application we load jars using the URLClassloader that communicate using gRPC and the NettyServer. When the module needs to be unloaded we block on the awaitTermination before closing the URLClassLoader.
The logs are filled with NoClassDefFoundErrors on various classes after the classloader was closed.
This is caused by the NettyServer implementation calling eventLoopReferenceCounter.release() after the ServerListener has been notified through listener.serverShutdown() (which in turn causes awaitTermination to return) .
The NoClassDefFoundErrors do not cause any problems, but I would like to prevent them from piling up in the log files, making it harder to spot any real problems.
In short I would like to know if there is a way to determine I can close the classloader without causing the NoClassDefFoundErrors appearing in the log files.
Example of exceptions raised:


4896
Using proto_source_root in proto_library breaks java_grpc_library9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Say I have 2 proto files sitting in //some-package/
Then I compile the proto_library in //some-package/BUILD`, like the following:
The above works well because proto_source_root, which allows us to not have to import one proto file into another using the full path relative from WORKSPACE.
This also works fine. But finally, I compile java_grpc_library:
And here it breaks. java_grpc_library failes to compile with error:
So basically, A.proto cannot find B.proto. However, when I replace the import statement in A.proto with import some-package/B.proto and remove usage of proto_source_root in proto_library everything works, but we really don't want to do this for many reasons.
Does anyone know what could be the cause and how to work around this?


4898
Enable gRPC-LB SRV lookup by default9

It can currently be enabled via -Dio.grpc.internal.DnsNameResolverProvider.enable_grpclb=true.


4900
Need a way to specify source address when creating ManagedChannel as a client0

Is it possible to provide an option to specify source address to use when creating the ManagedChannel as a client. At the moment, the choice of source address appears to have been left to the operating system?
What version of gRPC are you using?
What did you expect to see?
An option to specify a source address to use on client side.


4901
CallCredentials interface, 2nd edition0

Security level and authority are parameters required to be passed to applyRequestMetadata(). We will wrap them, along with MethodDescriptor and the transport attributes, to a first-class object RequestInfo, which is more clear to the implementers than via Attributes.
ATTR_SECURITY_LEVEL will be moved to the internal GrpcAttributes and annotated as TransportAttr, because transports are required to set it, but no user is actually reading them from
ATTR_AUTHORITY should be removed, because no transport is overriding it.
This is an API-breaking change because CallCredentials is interface. It will be changed to abstract class, so that further API changes can be done in multiple steps without breaking implementations.
The CallCredentials name is stabilized, thus it must be the name of the new interface. We will take the following steps to finish the change.
Introduce CallCredentials2, which is the new API, which implements the old CallCredentials. Change all stock implementations to it. Deprecate the old CallCredentials.
Make a release, and ask all implementations (including FirestoreCallCredentials) to implement CallCredentials2 instead.
Replace CallCredentials with CallCredentials2, keeping CallCredentials2 as an alias.
Make a release, and ask all implementations (including FirestoreCallCredentials) to switch back to the name CallCredentials.
Delete the alias CallCredentials2
During the whole process, the name CallCredentials stays usable, and we require no change in code that passes CallCredentials objects along.


4905
Mutual TLS instructional code in Readme is wrong.0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Example code in the Readme should compile without errors?
What did you see?
Errors ranging from a simple missed semicolon, to a method that doesn't exist, and an undefined variable.
While trying to implement Mutual TLS and retrieve the client credentials serverside, I followed the Readme instructional example, which (amongst other things), suggests a ServerInterceptor, specifically:
This doesn't actually compile. Errors include:
There is no semicolon at the end of the first return line.
Proposed Fix
Perhaps the example code in the Readme can be changed to the following, which does compile:


4912
grpclb with TLS sends a malformed SNI host name to the balancer1

In grpc/grpc#16727, there are several scenarios in which there is a grpclb balancer using plain TLS creds. The client is expected to find the balancer, get a backend, and complete an RPC to the backend all over plain TLS. Go and C++ pass this test but Java doesn't.
It appears that the root cause is that grpc-java includes the trailing period in it's host name passed to SNI. I dumped the SSL handshake between the java client and the balancer, and the java client sends an initial ClientHello with an SNI extension having  a host name of balancer.test.google.fr. (note the trailing period). This is unlike C++ and Go, which don't include the trailing period in the SNI hostname. The balancer SSL handshaker responds by aborting the handshake with an ssl_unexpected_message alert. Since trailing periods are invalid by SNI spec, I think that the java client needs to strip any trailing periods of resolved balancer names in SRV records. For example, java passes the "grpclb with plain TLS" test with this hack


4917
Tracking issue for LocalSocketPicker being experimental1

No description provided.


4921
how to set default window size in okhttp?2

how to set default window size in okhttp?


4922
How to customize the jvm startup parameters in the gRPC-java startup script2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I want to add some JVM startup parameters to the gRPC-java startup script.
For example by customizing the CreateStartScripts Task or other methods.
Does anyone know how to do it?


4924
Configure repo to recognize Googlers as CLA approved2

Specifically, if a user is a member of google or GoogleCloudPlatform on Github, they should not need to sign a separate CLA.


4929
CallCredentials should respect the Deadline2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
An RPC should never outlast a deadline set in either CallOptions or `grpc.
What I actually saw?
CallCredentials does not respect deadlines, so a ClientCall cannot guarantee that the RPC will finish within a set deadline (for example if an OAuth token needs to be refreshed). Furthermore, the current CallCredential api makes it impossible for CallCredentials to access the deadline set in CallOptions.


4931
Provide a dedicated grpc-all.jar for downloading3

like I commented in netty/netty#4671.
I'm not opposed to produce empty netty-all.jar for maven repository, but a dedicated netty-all.jar is necessary for downloading at somewhere like github releases, some people or some projects manage dependence manually.


4932
Implement client-side health checking3




4933
Java 11 support3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I get following error on a simple grpc async communication.
underlying issue is with netty implementation, they look to have fixed it


4934
Why does grpc-all depend on protobuf-nano not protobuf-lite3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
As I understood, grpc-protobuf-lite should be preferred over grpc-protobuf-nano for Android. Also I understand that grpc-all is not recommended to depend on, instead of it's better to explicitly depend on necessary parts.
My question is why grpc-all depends on grpc-protobuf-nano not grpc-protobuf-lite. Is it because of backward compatibility?
Thanks.


4935
too many exec threads keep memory leak3

hi
i use grpc which version is 1.11.0
when i test the server's stablity ,make about 16000 connects ,there are too many exec threads to handle message ,moreover, the memory used  80%, it's very slowly ,and memory  keeps growth
could you give some solutions about this issue?
think you~


4938
Require using InternalNettyServerBuilder to specify a ProtocolNegotiator3

ProtocolNegotiator could then become package-private.
That then only leaves GrpcHttp2ConnectionHandler and ProtocolNegotiators as public-but-not-prefixed-with-@Internal in Netty. They should be cleaned up as well, but it can be a separate issue.


4942
Android has smaller DNS cache TTL than OpenJDK4

For #4745 we added a cache for SRV requests that mirrors that done in Java itself. We've seen a report that this changed the behavior on an Android app from needing 6-10 seconds after migrating networks to 30 seconds to be able to connect.
The issue seems to be that doing DNS requests while the network is still coming online can produce weird results, including replies with zero addresses (not UnknownHostException). This may be related to IPv4 vs IPv6, but it's a bit unclear.
In any case, it appears Android uses 2 seconds as its cache TTL:
We should probably detect Android and swap to 2 seconds on that platform.
This would be good to backport to 1.16.x and likely even 1.15.x.


4948
Revert DNS cache TTL (#4947)4

internally android has problem with #4947 (b/117630132).
it is already reverted from the master, revert the change from 1.16.x.
original issue #4745


4951
DnsNameResolver swallows UnknownHostException5

As pointed out to us by a Googler, when JNDI is not enabled (the default), this condition will never succeed since balancerAddressesException == null:
This causes DnsNameResolver to return an empty address list, which causes "UNAVAILABLE: NameResolver returned an empty list".
This seems related, in part, to #4948.


4962
Investigate why DNS cache doesn't work on Android6

On of the internal android user reported that when network switchover on Android
internally tracked bug b/117293120 (contains repro)
related issue #4951


4970
Issues with SpringSecurity - AOP final issue vs missing interface proxying7

What version of gRPC are you using?
I would like to use SpringSecurity to secure my grpc service.
(The authentication and exception handling is done via interceptors.)
However if I do that I get one of two issues.
First, the default way of Spring to apply the value is using an interface based proxy. This will cause
errors because the actual methods aren't present in any interface.
I can avoid that error by using an AOP based proxy, but if I do that, then I get a warning in the logs:
The error was introduced by: #2552 / #2553
Manually create an interface for that.
Remove final modifier from that method .
PS: I used Spring-Security as an example, but the same issues apply for any kind of annotation based runtime code injection. Such as method call parameter logging, timing/metrics...


4972
Tracking issue for Attributes annotations being experimental7

They were added in #4892. Although they are source-only, other people may start using them in their own code, so it's still public API.


4975
GrpclbLoadBalancer should go to TRANSIENT_FAILURE if received a DROP-only server list7

According to discussion with @markdroth, GrpclbLoadBalancer should return TRANSIENT_FAILURE state and drop all requests if received a server list that contains only DROP entries. The current code, while likely unintentionally, appears to use CONNECTING state instead. We need a unit test for this case.


4981
Failed to bind address already in use (shutdown not working properly?)8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
In my shutdown, I do the following:
This happens in the teardown of a unit test.
Intermittently, the next test that runs fails with an "Address already in use" cause which I have verified is because the previous test is still holding on to the port for some reason.
I expect my shutdown procedure to guarantee that the port will be free after shutdown.
Am I missing something in my shutdown procedure or could this be a bug?
Relevant bits of stack trace and thread dump at the point when the second test fails to start the server:


4982
Loading service providers from a hard-coded list only works with non-shaded netty version8

Isn't this missing the shaded package name?


4984
Tracking issue for io.grpc.SynchronizationContext being experimental8

No description provided.


4985
1.13.2 - 1.15.1: 0.18.0 Bazel build fails - OkHttpClientTransport access guard failure8

What version of gRPC are you using?
The problem occurs on version 1.13.2 through 1.15.1 of gRPC. Using bazel 0.18.0 on OpenJDK 10. The output of bazel info is at end of this issue.
What did you expect to see?
No build error in bazel. The workaround for now is to put 'build --javacopt="-XepDisableAllChecks"' in .bazelrc or on command line
This is the output of the build error that is seen:


4987
gRPC-LB should fallback immediately due to obvious errors contacting gRPC-LB server8

Today the client waits ~10 seconds until the fallback timer has expired. While the timer is useful to address the long tail, it shouldn't delay using the fallback in case of obvious errors, like the channel failing to connect or an UNIMPLEMENTED response.


4992
Allow non grpc services to report health/service existance9

What version of gRPC are you using?
Feature-Request
Not all applications are purely grpc based, so it would be nice if the HealthStatusManager could expose the health also to other beans. This is especially useful for most monitoring systems that still rely on plain http (html/text/json...).
It would be nice if a method like the following could be added:
Alternatives considered: Create my own beans and track the health status twice.
Might be related to #1848, #4356.
PS: If this feature gets accepted, I can create a PR for that.


4995
pubsub latest9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


4998
DnsNameResolverTest is flaky9




5002
CallCredentials in 1.16.00

This may be a non-issue but I wanted to verify the precise intention of the staged changes described in #4901.
The first steps imply a transition release which doesn't break existing code, presumably this is 1.16.0.
Introduce CallCredentials2, which is the new API, which implements the old CallCredentials. Change all stock implementations to it. Deprecate the old CallCredentials.
Make a release, and ask all implementations (including FirestoreCallCredentials) to implement CallCredentials2 instead.
But in its current form, the 1.16.0 CallCredentials breaks binary compatibility for implementations since CallCredentials.MetadataApplier has changed from an interface to an abstract class, and this is in a parameter of its only method applyRequestMetadata(). I guess maybe the answer is that because that method is an @ExperimentalApi then you are SOL. But since implementing libraries need to be rebuilt to work with this anyhow, why bother staging it at all?
And in the subsequent release, users of CallCredentials will suffer the same fate despite the interface itself being non-experimental. I am curious why this break needs to happen - couldn't it be kept as an interface with an abstract BaseCallCredentials implementation added that implementors can extend to be insulated from further API evolution?


5013
Fluter Plugin project cannot resolve grpc1

Hi,
I am developing a flutter plugin that uses grpc. Actually I need to do the java client
I am using version 1.15.1 of GRPC
When I try to use or to import io.grpc, it says that cannot resolve symbol grpc


5015
Revisit LoadBalancer API's threading model1

The LoadBalancer main interface is not thread-safe, and is guaranteed to be called from the SynchronizationContext. This has relieved implementors from worrying about synchronization.
As for the auxiliary interfaces, SubchannelPicker is intentionally thread-safe because it on the critical path. Helper and Subchannel are not on the critical path, we made them thread-safe because they are implemented by GRPC and we thought making them thread-safe would probably provide more convenience to their callers.
However, client-side health checking (#4932) and our (Google-internal) request routing work revealed two use cases where a LoadBalancer may wrap or delegate to another, while adding additional logic. Helper and Subchannel may also be wrapped in the process.
For example, HealthCheckingLoadBalancerFactory wraps Helper.createSubchannel() to initialize health checking on the created Subchannel, and we find it much easier to implement if createSubchannel() were always called from the SynchronizationContext, which is not the case right now since createSubchannel() is thread-safe. In fact, probably all LoadBalancers always call createSubchannel() from the SynchronizationContext, otherwise it may race with handleSubchannelState() and it's non-trivial to handle, and will cancel out the benefits of the threading guarantee on the main LoadBalancer interface.
Because of the apparent issue with createSubchannel(), we are going to suggest always calling it from the SynchronizationContext, and will log a warning if it's not the case.
We'd like to discuss whether it makes sense to make Helper and Subchannel non-thread-safe, and require them to be called from SynchronizationContext.
My argument for non-thread-safety: we made Helper and Subchannel thread-safe based on the mindset that they is only one implementation which is from GRPC. In fact, a 3rd-party developer may want to wrap them and add their own logic, and it now becomes their burden to make their added logic thread-safe too.
Possible argument for thread-safety: Subchannel.requestConnection() may be called from the critical path. However, since it doesn't guarantee any action for the caller, the caller can easily enqueue it to the SynchronizationContext.


5018
How to get client IP from HA Proxy 1.81

Hi all,
I'm using grpc to translate data between client and server. Client call server via HA Proxy (version 1.8 support live reload) but server side not get real client IP. How can I get real client IP via grpc code or any config from HA Proxy.
This is my code server
Thank so much,
What version of gRPC are you using?
What did you expect to see?
Get real client IP


5019
Any way to get the Channel target through the channel and stub?1

Is there any way to get the server name through the channel or stub or status
When service-a calls service-b , if service-b goes down, It will get such an error , status.getCause() is .
Connection refused: no further information: /127.0.0.1:9898
Through the status object, we can see the ip and port of server (127.0.0.1:9898).
The ip and port is obtained by resolve the Channel target name of service-b through NameResolver,
But I can't find any way to get the Channel target ManagedChannelImpl.java#L123  ( the target is my service-b instance name )  like channel.getTarget() or stub.getTarget() or status.getChannelTarget() etc..
Is there any way to get the Channel target?
What version of gRPC are you using?
What did you expect to see?
The instance name of the server can be obtained in the status or channel or stub.
If I get the channel target, I will customize the log like this
Connection refused: no further information: /127.0.0.1:9898 (service-b)


5025
Tracking issue for HealthCheckingLoadBalancerUtil being experimental2

No description provided.


5028
Shaded source jars do not contain any files2

The source jars that are associated with the gprc-netty-shaded packages do not contain any source files.  Seeing how the package names are rewritten when the jar is created this makes it extremely difficult to debug issues when using libraries that make use of the shaded jar.
What version of gRPC are you using?
Seems to apply to any version of shaded jars
What did you expect to see?
a jar file that contains the source code for the classes contained in the shaded jar, with the same package renaming that occurs in the classes jar


5029
Tracking issue for ChannelLogger being experimental2

No description provided.


5032
Using DNS Service Discovery returns UNAVAILABLE: NameResolver returned an empty list3

What version of gRPC are you using?
What did you expect to see?
One of the scenarios is as follows:
Using envoyproxy as Load balancer.
Using AWS Service Discovery as DNS Service Discovery
DNS Service Discovery server that serves as an A record pointing to that load balancer
One "backend", which the load balancer points to
Such a flow
The gRPC client server will return UNAVAILABLE: NameResolver returned an empty list when the ip of envoy is changed.
It seems that gRPC client server has done DNS cache and it is not updated to new ip.


5034
how to handle "DEADLINE_EXCEEDED"3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
sometime i will meet the exception when i try to request ; how to handle it ? thanks
io.grpc.StatusRuntimeException: DEADLINE_EXCEEDED: deadline exceeded after 9996417917ns ;


5038
MessageDeframerTest is flaky3

I observed this test failed on travis more than twice today.


5040
UINT32 data converion is taking the value as integer.4

What version of gRPC are you using?
What did you expect to see?
in proto file filed is mentioned as UINT32 and the value after  DynamicMessage.parseFrom(,); coming as integer and its wrong;


5041
Prevent sharing Context object between server and client thread4

What version of gRPC are you using?
The issue with sharing Context object between server and client calls.
I have a GRPC server that while handling bidirectional stream request (stream A) creates a client bidirectional stream to another GRPC server (stream B). The idea is that lifecycle of the streams A and B are different and it's not required to close stream B when stream A is cancelled.
But it doesn't work atm. As far as I understand the reason is that Context object attached to the thread handling Stream A is used by Stream B as well. Actually Stream B listens for cancellation event from the Context, that is undesirable.
The question is how to break this dependency of the Stream B from the original Context.
I have one option is to create the Stream B in a separate thread from a thread pool.
But would like to know whether this is correct or probably there are another options.


5045
Broken null check in MetadataUtils4

Should be


5046
"unknown enum constant" warnings when building with Bazel4

If I run bazel build //... in grpc-java at HEAD (or v1.16.1) I see many warnings like this:
This was discussed on bazelbuild/bazel#6414 and is due to a missing compile-time dependency of guava on j2objc.
What version of gRPC are you using?
What did you expect to see?
No warnings when building.


5048
Send serialized object over grpc4

I have a third party class which implements serializable,  i want to serialize that object and send it over grpc, how do i do that. Bytestring doesn't allow byte[] from serialized object.


5056
Separate usage of io.grpc.internal.TimeProvider for time stamp and backoff5

Now TimeProvider is used for both time stamp and backoff. Time stamp should reflect system clock changes (?) whereas backoff duration should be absolute amount of time of delay.
Related to #4883.


5060
Add auto-request to ClientCall/ServerCall6

One of the main downfalls of using ClientCall/ServerCall directly is that you then have to call request(1) after each message. It would be easy to add the auto-request behavior as an opt-in feature. We could then change the async stub to use this feature.


5061
Add option to disable cancellation causing exception on Server6

As mentioned some in #4351, if there is a cancellation on server-side we end up throwing an exception when sending from the async stub. That's very surprising and isn't great.
That used to be the only way of receiving cancellation notification with the async stub. However, we now have ways to let users add their own cancellation listeners. So we could either disable the throwing when using cancellation callback or have an option that will disable the throwing behavior.


5062
Android java GRPC: Error: INTERNAL: Missing HTTP status code 6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Correct response,
on android maven build I get the following error on response (note I see the correct response on the logs but the error stops it been returned correctly


5065
JVM fatal error on Google cloud logging logback6

JVM crush with:
A fatal error has been detected by the Java Runtime Environment:
JRE version: Java(TM) SE Runtime Environment (9.0+11) (build 9.0.4+11)
where aprMajorVersion is native method:
private static native int aprMajorVersion();
Related issue on Netty: netty/netty#8337
Somthing wrong with loading or calling.


5066
Tracking issue for grpc Servlet API being experimental6

No description provided.


5071
Handshake failed: when server request verify client's certificates7

What version of gRPC are you using?
What did you expect to see?
i have Node.js grpc server, when i want to set checkClientCertificate in server option my android client cant connect to server and show this error in logcat
and in server console show this error :
but all things work fine if set  checkClientCertificate  to false in server.
this code work for both Node.js client/server. whats need to add or implement in android ?


5075
Transparent retry should be per-hedge/retry7

Transparent retry is limited to 1 attempt. It seems like that one attempt should be per-hedge and per-(higher-level) retry. In the current implementation transparent retry is limited to 1 attempt per RPC.
We should discuss whether the "scope" of the "1 attempt" and see if we could maybe even change the retry spec.


5076
Remove Census dependency from grpc-core7

Census is an implicit dependency today and automatically enables itself if Census is included on the classpath. This was because that behavior was a "requirement."
I've since learned that other languages didn't implement that "requirement." If we kicked census out of grpc-core, it would be possible to add grpc-context back into grpc-core to resolve #2727 and #3522 and similar. (The general idea here is that internal could also be moved out of grpc-core, so Context-only users don't pull in as much code.)
Unfortunately that puts us in a bit of a bind for existing users, as they will probably expect that they can enable Census classloader-wide without code changes to each call site.
A possible solution to that is to provide a global interceptor API, where we allow exactly one call to a method that sets the global interceptors that are used for all Channels. The expectation is that this method would be called in main().
Another option is to add a grpc-census artifact that grpc-core looks for and uses if available via reflection. That would certainly be easier for users to update.


5078
Need a way to specify source address in GRPC C++ channel creation7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
An option to specify a source address during channel Creation( CreateChannel).


5080
Upgrade to netty 4.1.31.Final8

Source: yidongnan/grpc-spring-boot-starter#139
What version of gRPC are you using?
What did you see?
What did you expect to see?
Maybe a (debug) warning in the logs or nothing at all.
Possible solution
Manually updating to netty 4.1.31.Final fixed the issue


5082
Conflict with protobufJava8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


5083
Java Examples Version 1.18.0-SNAPSHOT fail to build8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Trying to use the grpc-java example with maven version 1.18.0-SNAPSHOT
What did you expect to see?
Running the command the documentation states it should work. Although the 1.18.0-SNAPSHOT version is nowhere to be found in public repositories.
Do I need to build GRPC from scratch myself in order to use it?
It simple doesn't work because the grpc version on public repositories is 1.16.1.
So my question is: Is there a repository address which I can use in the pom.xml file to download the dependencies version 1.18.0-SNAPSHOT or do I really need to build it from scratch?
I also tried downgrading the version of GRPC in the pom file to 1.16.1 with no avail, some classes are missing.
The main page of the github page states to use the version 1.16.1 but the examples simple don't work with it.


5084
package too big8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
compress the code ,discard the useless code
I am using grpc 1.10.0
however, guava is too big , which is 2.2M. I am consider whether can provide a small guava that can be use.


5085
duplicate class error in android8

I want to separate gRPC module from my app module in Android project.
clone version 1.6.x branch and used helloworld in android examples .
move configs and .proto file to grpc_module
added dependency of grpc_module to app
take  error or all classes: error: duplicate class: io.grpc.examples.helloworld....
This is some lines of this error:
You can see this project here and see the commit changes
Check it out please


5086
grpc-netty dependency version issue8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm getting this error
If I edit grpc-netty-1.16.1.pom in my local repository and remove the square brackets in the version (i.e. from <version>[1.16.1]</version> to <version>1.16.1</version>), it builds properly.
It looks like a maven issue, question though is, do we absolutely need to specify the dependency that way?


5091
java_grpc_library output for maven9

Hello,
I used java_grpc_library to generate a grpc library for a project. I can use it in a bazel based project. My question is If want to publish it into the maven central repository what should I publish? I published a .jar file with a suffix (do_not_reference) but it doesn't detect it.
Thanks,
Adib


5092
failure for proto-google-common-protos-1.0.0.pom.sha19

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
download "proto-google-common-protos-1.0.0.pom.sha1" failed when sync project with gradle;please help me ,thanks!
error:


5093
Add example using #transportExecutor to apply Android socket tagging9

What version of gRPC are you using?
On Android 8 (Oreo) devices the GRPC connections get closed when strict mode is enabled in the app.
The same issue is logged for OkHTTP but they have not found a real solution so far:
square/okhttp#3537
The workaround which they suggested does not apply to GRPC because for non-TLS sockets GRPC is not using a SocketFactory:


5094
UNAVAILBLE "End of stream or ioexception"9

I am getting "End of stream or ioexception" whenever i am trying to call any function from proto file


5096
IllegalStateException: There should be no outstanding pingFuture when setting keepAliveTime9

What version of gRPC are you using?
I tried to keep a channel open and send data periodically. I wanted the connection to stay open so I set setkeepAliveTime to 10 seconds and  keepAliveTimeout to 2 seconds.
In my Application I saw a lot of crashes when sending data because of an IllegalStateException: "There should be no outstanding pingFuture".
So I tried to reproduce it with the sample and saw the same error. I modified the HelloworldActivity to keep the Channel open and did set the keepAlive.
The Client crashes with the following error after waiting 10 seconds and trying to send new data:
The server shows a termination of the stream:
To reproduce, you can use the attached HelloworldActivity class with the sample server and send some data, wait over 10 seconds and try to send some more data.


5097
Can http.proxyHost/http.proxyPort be used or only https.proxyHost/https.proxyPort9

What version of gRPC are you using?
What did you expect to see?
I was testing a GRPC client over a plain transport (no TLS enabled), and I did expect this test https to work if using http.proxyHost and http.proxyPort instead of their secure counterparts (https.*).
but I got this error :
This line here makes me doubt this is even possible:
Thanks in advance


5100
How do I judge whether the grpc ManagedChannel is  available or not?0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


5101
alts client throws IllegalStateException: Cannot write frames while the TSI handshake is in progress0




5102
netty: Add test for h2c Upgrade0

As discussed in #4612, ProtocolNegotiatorsTest.httpProxy_completes may be a good template.


5103
When does grpc support okhttp 3.0 0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
grpc-okhttp of  grpc 1.6.1  contains okhttp 2.5.0 ,but I want to use okhttp 3.0 because I need use it for  andriod glide.
I can't compaile different  okhttp's version  for andriod 's app


5112
Reduce the number of copies of gradle wrapper binaries1

Seems only two or three copies of gradle wrapper are needed:


5113
Make proxy configuration channel specific1

We are using gRPC in a java agent that is attached to our customers JVMs. The agent communicates via gRPC to our server for sending app usage metrics.
The principal contract for our agent is to not adding any side effect into the instrumented application.
We have faced a customer environment, where the outgoing gRPC connection needs to go though a HTTPS proxy, in order to reach the internet. The customer application, on the other hand, establishes outgoing HTTP connections inside their local network that don't go though that proxy.
Given that gRPC proxy configuration is done via the standard system properties (https) that are system wide, we are unable to properly configure the gRPC client to use the proxy without adding the (terminal) side effect of forcing the other HTTP outgoing connections to go though that proxy.
This could be solved if the proxy configuration could be done specific to the gRPC channel.
Any idea if/on-how i can make this work right now?
Would you consider reducing the scope of the configuration to the channel instead using system wide configuration? If yes, i could work on it if you give me some guidance
Note: Proxy authenticator config is also system wide
What version of gRPC are you using?


5114
Unable to load LoadBalancerProvider in the runtime for Bazel apps1

What version of gRPC are you using?
Bazel apps if not having a (transitive) dependency for @io_grpc_grpc_java//core:util will fail with the following error in the runtime:
A temporary workaround is adding a runtime dependency in the BUILD file


5115
Could not find io.grpc:grpc-netty:1.18.0-SNAPSHOT.1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Latest HEAD
What did you expect to see?
build to succeed. Why are we using SNAPSHOT versions here?


5130
document for alts examples3

Because ALTS examples can only run in ALTS-enabled environments, might need a README to document the requirements.


5138
Kokoro fails with address already in use3

i've been observed this on many platform, on both netty and okhttp.


5139
Make ServerBuilder and ManagedChannelBuilder one time use3

Calling ServerBuilder.build() multiple times has unclear expected results.   We should document that builders are one-time use unless specifically called out.


5142
CallOptions#withOption() mutates original instance if existing key is overwritten4

CallOptions should be immutable. However, if CallOptions#withOption() is called with a key that is equivalent to an existing custom option, the original CallOptions instance has its option overwritten.
The following test case reproduces the issue:
This causes issues when combined with AbstractStub#withOption(), as the stub's option can be permanently overwritten by ClientInterceptors. See this example:


5156
Bazel 0.20.0 fetch fails on removed/deprecated native.http_archive rule 5

This issue is already solved on master with dd89dba - this issue is about fixing it on stable as well.
What version of gRPC are you using?
(not relevant, it's a Bazel rule issue)
What did you expect to see?
To not have compatibility with a stable version of Bazel with a stable version of grpc-java.


5160
NoClassDefFoundError: io/opencensus/trace/MessageEvent$Type6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
OpenJDK Runtime Environment AdoptOpenJDK (build 11+28)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11+28, mixed mode)
What did you expect to see?
Receive the following exception when sending a message:
However I can lookup and find the dependency for MessageEvent in: Maven: io.opencensus:opencensus-api:0.12.3


5165
Error: Program type already present: androidx.concurrent.futures.DirectExecutor6

Hi, does anyone face this issue while tried to running grpc implementation on android?
Error keep showing while im try to run my program
Error: Program type already present: androidx.concurrent.futures.DirectExecutor
Here is my build.gradle file content


5166
Downgrade Guava to 21.0?6

It would be helpful for downstream consumers of grpc-java if the Guava dependency could be downgraded to a prior release. We are using grpc-java and have been happy with how it has integrated in with existing codebases with minimal dependencies. Starting with the 1.16.x release however, Guava was upgraded from 19.0 to 26.0-android. This complicates integration with existing codebases, as going from 19.0 to 26.0-android has removed quite a few older APIs which are still used in open source and internal code. Additionally, for our use cases we'd prefer to use the -jre variant instead of the -android variant.
We are using Maven's requireUpperBoundDeps (https) in all of our projects to catch common dependency issues, which requires us to do one of two things:
Add exclusions to grpc-java dependencies or disable warnings on Guava to quiet the check. This isn't great because if grpc-java starts depending on new APIs introduced in Guava, we'll fail at runtime with MethodNotFound/ClassNotFound exceptions.
Update all third party and internal codebases to use Guava 26.0-android or later.
I've been able to successfully compile grpc-java with Guava 21.0. This is also the version in which no non-@Beta methods are removed going forward https:. Would the grpc-java maintainers consider moving to this release to make it easier to integrate into existing codebases?
What version of gRPC are you using?


5167
Client fails if server does not support ALPN ext6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The server to which I am attempting to connect does not support ALPN or NPN. When using other language bindings such as Go I can still connect to this server. With the Java language binding it reports a it cannot negotiate an application protocol. This seems to be because of a check in grpc-java/netty/src/main/java/io/grpc/netty/ProtocolNegotiators.userEventTriggered that does NEXT_PROTOCOL_VERSIONS.contains(handler.applicationProtocol().
Because the server does not support negotiation, handler.applicationProtocol() return null (i think) and thus the connection fails. If I comment out this check and then the connect succeeds and everything works; which is the behavior I am seeing in other language bindings.
I have attempted to configure the negotiator using ApplicationProtocolConfig.DISABLED and custom settings on an ApplicationProtocolConfig instance, but all changes seem to have no effect.
Is there a way to configure around this, of does the Java binding simply have a different behavior?


5176
INTERNAL: HTTP/2 error code: INTERNAL_ERROR Received Rst Stream (with error code 2)7

What version of gRPC and what language are you using?
java version "1.8.0_181"
What operating system (Linux, Windows, …) and version?
osx client, linux server
What did you expect to see?
Successful requests.
What did you see instead?
Anything else we should know about your project / environment?
I've started seeing problems after enabling the HTTPS load balancer.
The LB is connected over 443 to a pod running ESP and gRPC
Requests over REST work normally.
Here's a LB log
Note that the difference is sizes is likely just the JSON vs protobuf response
I get this both with non streaming and with bidirectional streams.
However on the bidirectional stream I get the streamed responses back and then get the error, which suggests a problem with how the stream is being closed.
gRPC: special handling of "trailer only" responses.
The gRPC protocol makes a distinction between HEADERS frame with the END_STREAM flag set, and a HEADERS frame followed by an empty DATA frame with the END_STREAM flag. The latter is not permitted, and results in errors not being propagated through nginx. Instead, gRPC clients complain that "server closed the stream without sending trailers" (seen in grpc-go) or "13: Received RST_STREAM with error code 2" (seen in grpc-c).
To fix this, nginx now returns HEADERS with the END_STREAM flag if the response length is known to be 0, and we are not expecting any trailer headers to be added. And the response length is explicitly set to 0 in the gRPC proxy if we see initial HEADERS frame with the END_STREAM flag set.
This was fixed in 1.13 according to the commit history
The problem is I can't see it in the official nginx change log (perhaps the change wasn't marked in CHANGES ?)


5178
1.17.1 not on JCenter7

1.17.1 is still absent from JCenter after 8 days. The symptoms look the same as #3787 which may have been closed & locked prematurely.


5181
OkHttpTransportTest earlyServerClose_serverFailure_withClientCancelOnListenerClosed is flaky8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
All tests should pass. Instead I see this failure more than once and it seems to be a flaky test:
build output:


5185
Non blocking server impl and recommended usage of Server.directExecutor()8

What version of gRPC are you using?
Ive been building a non blocking implementation for kotlin coroutines on top of grpc-java. Similar to the reactive-grpc project. (marcoferrer/kroto-plus#16 & Kotlin/kotlinx.coroutines#360)
Im having a hard time finding the preferred / best practices for configuring a non blocking server.
When configuring the executor for the server, some sources point to using a directExecutor while others recommend using aForkJoinPool. Based on related discussions, it seems the former has the possibility of being unsafe?
I ran a benchmark on a coroutine base port of the existing benchmark service.
The results were in favor of using directExecutor over a forkJoinPool, but if directExecutor is considered unsafe Id rather live with decreased QPS. Another reason why Im looking for clarification is because Id like be able to outline the recommended configurations in my projects documentation.


5188
"GOAWAY received","file":"src/core/ext/transport/chttp2/transport/chttp2_transport.cc","file_line":1083,"http2_error":11,"raw_bytes":"too_many_pings"8

We are running streaming grpc connection to transfer a lot of messages and data.
We constantly see that the gRPC server fails after sometime with "too_many_pings" errors.
The error is very consistent happening roughly at the same time and data volume.
Below are the relevant grpc debug logs. Please let me know if more logs are needed.
What version of gRPC are you using?
What did you expect to see?
Long running GRPC connection with no error.
Relevant log on server


5189
Tracking API ManagedChannelBuilder.defaultServiceConfig() being experimental8

Also the API ManageChannelBuilder.lookUpServiceConfig()


5192
readme.md missing documentation for Kotlin-DSL of Gradle 9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
This is in reference to the current readme.md
What did you expect to see?
Kotlin-DSL example of how to use the Gradle build extension, now that it is 1.0 with the 5.0 release of Gradle. For documentation:


5194
Clarify expectations on Stream Tracers9

It is specified that stream tracers run in the order they were added to the server.  This is ambiguous in the case of automatically added tracers, which is the reason for #5193 .   Talking to @ejona86 , it seems stream tracers should be independent, and the order in which they run should not affect the correctness of the run.  Tests for census which overwrite the span context break when the census tracers are added at the end of the list.


5199
copied .proto files in apk9

What version of gRPC are you using?
What did you expect to see?
I'm using grpc in a java module in in android application.
But when I build application all of .proto files copied in root of .apk file!
If .proto files converted to java classes by protoCompiler and compiled application do not using of them, why this happen?


5208
Cannot link to javadoc from jdk11's javadoc tool [issue originally filed at grpc/grpc.github.io#801]0

See the description at
We might need to generate a package-list.html page for javadoc. Related to #3522


5211
No such property: javaCompilerTask for class: com.android.build.gradle.internal.variant.TestVariantData.1

Please answer these questions before submitting your issue.
How can I solve this problem?


5213
Document expectations about NameResolver SocketAddresses1

Currently, a name resolver returns a collection of SocketAddress wrapped up in EquivalentAddressGroups. In the most common case InetSocketAddress will be used. Currently there are no expectations about the data in the address, but I believe we need to clarify this.
This came up in working with HTTP Proxies.  In case a Proxy is used, Netty can derive the the initial CONNECT message from the InetSocketAddress hostname.  This may be present or may not, but the behavior of this may change based on what the name resolver returns.
I don't know what to say here, other than it may be absent, but I wanted to open up a discussion because  it recently came up.


5214
Add support for Guava 27.0.11

What version of gRPC are you using?
What did you expect to see?
I tried to upgrade guava from 26.0-jre to 27.0.1-jre and I get compilation errors in my project (using bazel):
It seems like they pulled this out into the failureaccess library. If I add "@com_google_guava_failureaccess//jar", to the list of deps, it seems to work:


5215
Possible to use custom executor on server side?1

What version of gRPC are you using?
What did you expect to see?
A way to have an RPC run using a different executor on the server side.
For some background, we have gRPC services where some methods are known to return quickly and other methods are slow and inherently blocking. We have the server configured to use a fixed size thread pool, so there is a risk of these slow RPCs saturating the thread pool and starving the quicker RPCs. Our approach when implementing these slow RPCs has been to manually dump work into a separate thread pool to unblock the gRPC thread.
I was looking to make a custom proto method option to indicate that a method should use a dedicated thread pool, and then respect this option with an interceptor. However, I didn't see an easy way with the ServerInterceptor interface to move an RPC to a different executor (the way you can on the client side using CallOptions#withExecutor). I assume this is because handling the incoming RPC requires choosing an executor and must happen before the ServerInterceptor chain can run?
Does this use-case make sense? Any pointers? Thanks in advance


5218
DnsNameResolver uses Jndi and does not allow to use a different dns resolver1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
An easy way to configure a different DNS resource resolver like netty dns because of a bug in the JNDI dns resolver.
In code we want to use a different implementation for io.grpc.internal.DnsNameResolver.ResourceResolver
Background
The implementation of the DnsNameResolver uses JNDI to resolve additonial records (like SRV and TXT). Unfortunately the JNDI implementation has a bug so that FQDN have to be used (see. https).
In our kubernetes environment are multiple namespaces for different stages (e.g.: dev, test, pre, ...) and the bug in OpenJDK requires to use the FQDN for a grpclb address, e.g.: service-foo-grpclb.dev.svc.cluster.local instead of just service-foo-grpclb.
Problem
The current implementation has no way to change the resource resolver without reimplementing the io.grpc.internal.DnsNameResolverProvider and io.
In addition the DnsNameResolver contains logic for different cases (like grpc lb - which we need) and is much more than just a simple dns name resolver.


5222
ManagedChannelImpl should not call NameResolver.refresh() if it's not started2

This was discovered by internal user. ManagedChannelImpl calling refresh() on a not started NameResolver produced an exception and led the channel into panic mode.
This looks like a pre-existing issue, while made more visible (or rather, disruptive) by #5089 where refresh() started to be called from the sync context. Prior to that, the exception would be caught by the scheduled executor service, which would only end up in logs rather than panicking the channel. We should probably back port the fix to 1.18.x


5224
 Caused by: javax.net.ssl.SSLHandshakeException: Handshake failed2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Getting the following Error:


5225
java_grpc_library- import not found 2

Hello,
I have almost a similar problem that is discussed here:
But I didn't understand the final solution. I have a protobuf that defines services and also imports some other protobufs. I can generate the proto_library without any problem but when I use it in grpc_proto_library, it gives me the import not found or file not found. I use proto_source_root in my proto_library.


5228
Add client transport using JDK 11's HTTP/2 client2

Java 11 added support for TLS 1.3 and HTTP/2.


5238
How do I create a grpc over local socket (unix domain socket)3

I want to create a grpc server over local host - i guess using a local domain socket would be prefereable. I saw some places that say to do:


5239
How do I create a grpc over local socket (unix domain socket)3

I want to create a grpc server over local host - i guess using a local domain socket (unix domain socket) would be prefereable. I saw some places that say to do:
but couldn't figure out how to do it in the context of the io.grpc.netty
Also want to note, locally I'm developing on a Mac, in deployment will work on CentOS, perhaps I need to do some special config for this to work properly.


5240
Unable to execute Java GRPC TLS client with 1.17.1 or 1.19.0-SNAPSHOT4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Tried using 1.17.0 and 1.19.0-SNAPSHOT
What did you expect to see?
I have a GRPC server running successfully behind an envoy Load Balancer secured using X.509 based certs/keys.
I am facing a problem while creating the client for same.
Maven repository gives the option to use till 1.17.1 and the example shown on GRPC-JAVA Git suggest bumping to 1.17.3-SNAPSHOT or 1.19.0-SNAPSHOT.
I have tried using both the options i.e. 1.17.1 (maven) and 1.19.0-SNAPSHOT (MASTER branch checkout and local build/install)
Steps Performed for build/install 1.19.0-SNAPSHOT:
Checked out Master branch of grpc-java code
Assuming, this will install the required jars in my local maven repository, tried running my client as:
Error is:
Looks like the protoc-gen-grpc-java dependency is still not getting added.
Now, tried to use the 1.17.1, my pom is
Here, I am getting the error
Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.6.0:java (default-cli) on project grpc: An exception occured while executing the Java class. Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available
Any suggestions what I might be doing wrong here.
AJ


5243
gradle build meeting problem org.gradle.api.internal.tasks.DefaultTaskInputFilePropertySpec cannot be cast to org.gradle.api.tasks.TaskInputs4

Please answer these questions before submitting your issue.
What did you expect to see?


5249
Support for HTTP/2 non-indexed header fields4

What version of gRPC are you using?
What did you expect to see?
Ability to set header names outside of a-z, -
We are trying to send a signature value as gRPC metadata, the value changes with every message.
Metadata is translated to headers in HTTP/2 which in our case, due to HPACK, the client, server and reverse proxy store in the dynamic table for header compression.
As a result the dynamic table size will increase until its full (by default up to 4096 octets).
When it's entries are removed from the dynamic table in FIFO order to make space for the new entries.
This is undesirable because of the increase in memory use in our proxy and because after X requests all the headers are resent.
HTTP/2 supports non-indexed headers, which as far as I can gather from the docs, do not get stored in the dynamic table.
You signal a non-indexed header with the first four bytes of the header key being '0001' or '0000'.
However these are non-valid ASCII characters and thus do not get through the validity check.
I'm sure the validity check is there for a reason, and I very much realize we're in an edge case here.
Would it be possible at all to bypass the check or is this something that shouldn't be done for compatibility reasons?


5251
Javadoc is failing in Travis CI for java 115

javadoc: warning - You have specified the HTML version as HTML 4.01 by using the -html4 option.
The default is currently HTML5 and the support for HTML 4.01 will be removed
in a future release. To suppress this warning, please ensure that any HTML constructs
in your comments are valid in HTML5, and remove the -html4 option.


5253
Travis CI java 11 flaky timeout5

No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.


5254
Reset Stream accidentally sent for Connection5

I don't have an easy repro, but I got this exception either shortly before or after getting an unexpected GOAWAY:


5256
NullPointerExceptions: okio.Sink.write() and okio.Sink.close()5

What version of gRPC are you using?
I am seeing some exceptions in the client logs on Android when I try to connect to a server that's down. The exceptions show repeated attempts to write to a sink and close it, even though the sink does not exist. Maybe related to the recent buffering refactors? The channel state cycles between CONNECTING and TRANSIENT_FAILURE, and every time it gets to TRANSIENT_FAILURE this set of exceptions occurs. I don't see an impact on my process, so if it's not a real problem then those exceptions may need to be swallowed somewhere.


5258
java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.17.2, built jars, etc using gradle.  Java 1.8.0
What did you expect to see?
I am unable to create simple grpc objects, both in Matlab and another proprietary java application and get similar NoSuchMethodError errors.
Issue Description
So initially I am trying to get grpc-java to run in matlab, but when I tried 'o = io.grpc.ManagedChannelBuilder.forAddress('localhost', 5001)' I get the following error:
Java exception occurred:
What is interesting, I was able to get past that initial error by adding 'import io.grpc.Metadata', but still ended up with the following error:
Which didn't make any sense to me since I can build and run code on command line using same jars. So I submitted a ticket to Mathworks, and they are looking at it.
But what led me to open this ticket, is in parellel we are adding grpc-java support to another java product, that allows us to create our own plugins, and after adding grpc-java to our code, now on startup we now get the following similar error in this tool, so now I think this isn't a Matlab thing, but something else that is wrong either with something I am doing, or the code.  Any ideas?


5262
Expose ProtoReflectionService as Bazel target6

Doesn't seem like its accessible by anything but gradle currently. Would be nice to add a BUILD.bazel file which exposes it.


5263
Document multiple EquivalentAddressGroups vs multiple SocketAddresses in NameResolver6

Currently the javadocs don't state when to use multiple EquivalentAddressGroups or multiple SocketAddresses in a single EquivalentAddressGroup.
A group of SocketAddresses that are considered equivalent when channel makes connections.
Usually the addresses are addresses resolved from the same host name, and connecting to any of them is equally sufficient. They do have order. An address appears earlier on the list is likely to be tried earlier.
Handles updates on resolved addresses and attributes.
Implementations will not modify the given servers.
Parameters:
servers the resolved server addresses. An empty list will trigger onError
attributes extra information from naming system.
Do I use multiple SocketAddresses if there are multiple paths to one and the same server, such as 10.1.2.3 , 127.0.0.1 or ::1? (Would that ever happen?)
Or do I always create new EquivalentAddressGroups for each address? (But then why am I able to list more addresses?)
It is also unsure when (and for what) the attributes on the single EquivalentAddressGroup is used and when (and for what) the attributes from the onAddresses call is used, and finally whether they are merged somehow or not.


5270
large memory usage in io.grpc.netty.NettyServerStream$TransportState7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
we can't see any netty leak log.
we see the JVM Old Gens pace is full.


5271
why maxConcurrentStreams  in NettyClientHandler is set to 0?7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm confused why maxConcurrentStreams  in NettyClientHandler is set to 0?


5273
DnsNameResolver SRV and TXT doesn't observe search domains7

There's a JDK bug:. This was mentioned in #5218.
Since SRV and TXT are still basically experimental, it's unclear how much to prioritize this. It's also unclear how we could solve this. We could use Netty's DNS resolution, although that has its own complexities and risks.


5276
Android presubmit test failing due to key deletion7

The oauth_token.txt file was removed grpc/grpc#17746 - core isn't using it anymore, but it is (was) still in use in this repository for setting a PR status message, see here
@jtattermusch Our Android presubmit tests are now failing. Can the key temporarily be restored to GCS? If there's a preferred way of authentication that supersedes the auth token, I can follow up by migrating but it would be nice to have the presubmit working in the meantime.


5279
Tracking issue for ProxyDetector being experimental7

ProxyDetector, ProxyParameters, ManagedChannelBuilder.proxyDetector
These APIs were added for #5113


5280
Service Config DNS TXT record attribute does not match spec8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Based on the proposal, Service Config should be specified in the grpc_config attribute in the DNS TXT record. However, in grpc-java, it seems to be checking for _grpc_config instead, with a leading underscore.
This seems like a bug, and it should be checking grpc_config instead as stated in the proposal.


5286
gRPC appengine executor hangs on async call8

What version of gRPC are you using?
What did you expect to see?
I am using gRPC client in the appengine standard java8 runtime. I want to supply appengine thread factory for the async calls. But when I specify that gRPC call hangs. I created an appengine servlet which does this and the servlet never returns any response. AppEngine logs does not show this request either.
When I specify, a normal executor the async call works. I can see the request in the appengine logs. It seems like gRPC is doing some operation that is not allowed on the appengine thread which causes it to crash.
But when I specify an AppEngine specific thread factory, the gRPC call hangs.
In #3382 @ejona86 Mentioned that appengine executor can be specified to do appengine specific calls. But that does not work. Are there tests to cover this use case ?
I started this thread https on discussion group, but after spending more time, I believe the issue is caused by this bug.


5288
Tracking issue for xds API being experimental8

No description provided.


5291
Why does opencensus custom stats exporter not work in 1.18.09

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
statistics metric data through a custom opencensus stats exporter.
Glad to see that grpc 1.18.0 uses the latest opencensus. I wrote a simple stats exporter, expecting to see metric data log to json format.
But I can't see any log out, or see any data from zpage /stats and /rpcz.


5292
CompositeReadableBuffer: Failed executing read operation9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
gRPC version 1.13.1 - Java version 8
What did you expect to see?
According to the comment in CompositeReadableBuffer this assertion error should never happen.
When the error occurs there is no feedback to the client.


5298
Retry scheduler in RetriableStream is racy9

is racy.


5301
Remove  compileOnly libraries.truth0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
This is out of date. Truth 0.42 and HEAD are now both at 25.1-android.


5303
GoogleDefaultChannelBuilder does not support user-provided CallCredentials0

GoogleDefaultChannelBuilder overrides the CallCredentials on CallOptions. This means that the user can't supplement the credential. Other languages will perform the union of the CallCredentials in the CallOptions and the GoogleDefaultCreds.


5310
Bazel building is broken with protobuf<3.6.1.3 1

What version of gRPC are you using?
What did you expect to see?
Bazel build is working; currently it is broken since old protobuf versions uses the removed REPOSITORY_NAME and PACKAGE_NAME (see protocolbuffers/protobuf@af48106).
Solution
Bump protobuf to 3.6.1.3?


5313
Contributing guideline points to a dead/old link for google java style guide1

Issue Description
While going through  CONTRIBUTING.md file observed that clicking on style guide link returns 404
What version of gRPC are you using?
What did you expect to see?
Clink on Google Java Style Guide. should open the java style guide page.
Solution


5314
Why are multiple deps for java_grpc_library deprecated?1

I don't see any reason for this and actually I feel like its probably not advisable. In my scenario I have 2 java_proto_library instances, my service definition and my model objects that the service is composed of. I require the ability to define both as deps for this to work.
Reading the source, it looks like this list gets added to as well, so I really don't see why this limitation is here without any docs. I would propose we remove this check, WDYT?


5315
Grpc-Java : make sure to call shutdown()/shutdownNow() and wait until awaitTermination1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true.
I start a new channel by request. Is-it correct ?
shutdown not done efficiently ?


5319
Upgrade Mockito dependency to version 21

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
To use Mockito version 2.
Would you upgrade the dependency to mockito 2.24.0?
Mockito upgrade guilde from 1.10 to 2.X
Background
I'm trying to clean up grpc-related conflicting/outdated dependencies.


5326
End of stream or IOException in android Pie2

hi
i use grpc in my android app, when i test in android Pie i see this exception when call rpc.
this problem just happen when i use WIFI , and with mobile data work fine. in other device with android < 9 work fine in wifi and mobile data.
Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


5330
Set custom metadata with value from response body3

Question: How do I access headers.put() and responseBody at one place in interceptCall?
This is what I Intend to do:
This is how I tried:
I generated AWS s3 url (temporary) and tried sending 302 at that url. That was the general practise in HTTP server as well.
This is the Blocker:
No such concept as 302 redirect in grpc
This is the alternative I thought of:
I'll send my response with 200. But I'll set a custom metadata called location with the url present in response body. My Http proxy server could check when response metadata has location set, respond 302 REDIRECT with metadata value.
This is how I tried:
Created custom interceptor that implements ServerInterceptor
Overrode interceptCall and tried setting body to metadata
This is the Blocker:
I'm unable to get hold of setMetdata() and responseBody at one place together.
sendHeaders is the place where I'm able to set header as shown in HeaderServerInterceptor example.
onMessage is the place where I can access responseBody.
Can't find one place where I can do both!


5331
Provide JUnit 5 GrpcTestExtension3

What version of gRPC are you using?
What did you expect to see?
In order to be able to test with JUnit 5 I would like to have a comparable solution like GrpcCleanupRule but as JUnit 5 extension.
Example
In my PoC project mmichaelis/poc-grpc you may see an example, which is very similar to your GrpcCleanupRule (because that was my intention 😄): In module grpc-test you will find the class GrpcTestExtension and an example usage in HelloServiceImplTest.
Help wanted?
I may assist in adding this to the grpc-java project, but there are several questions:
First of all: Do you like the extension?
Where to place the JUnit 5 extension? Into testing module? Or an extra module?
And if it is an extra module: How to share code? My intention would be to refactor GrpcCleanupRule, so that GrpcTestExtension and the JUnit 4 rule share as much code as possible.


5332
Tracking issue for Server.getListenSockets() being experimental3

Usage:
Server.getListenSockets()


5334
Set context in executor when calling Credentials.getRequestMetadata3

What version of gRPC are you using?
What did you expect to see?
I've written a custom implementation of a com.google.auth.Credentials class which retrieves tokens from etcd (using their v3 gRPC api). I'm attempting to trace these method calls by using the Context to link work done on separate threads. I've discovered that the Context is not available in my Credentials class (specifically when getRequestMetadata is called using an executor).
I've been able to work around this temporarily by changing:
Is it expected that the Context be available for use in a custom Credentials implementation? By doing so, this might also help to close some other open issues (#4929) and also allow deadline propagation to work properly when authenticating against a gRPC api.


5335
Server cert hot reloading3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Server can reload new cert without restarting


5337
GRPCLB should keep drop index when new picker is created due to subchannel state change3

Currently in GrpclbState, subchannel state change produces a new RoundRobinPicker, which has dropIndex initially 0. This may cause the client to drop more or less percentage of requests than the percentage of drop entries in the list.
To fix the problem, the dropIndex of the previous picker should be passed to the new picker, if the new picker is due to subchannel state change. dropIndex should be a mutable integer (maybe AtomicInteger) shared by the previous and new pickers, so that the new picker doesn't take a premature snapshot of it.
In the case where the balancer sends a new drop list, dropIndex will keep starting from 0.


5340
OkHttpTransportTest.serverChecksInboundMetadataSize is flaky 4




5343
Java 11: cannot find symbol javax.annotation.Generated4

Related issue
These workaround for java 9 seems to be no longer working for java 11. Anyone faced this issue before?


5346
ServerBuilder and listening4

Currently, the standard way to listen on a socket is to call addPort(), but from recent requests, this API is too limited.    I would like to explore some ideas for expanding this functionality.  Specifically:
Make a standard way to add multiple ports to a single server.
Make it possible to listen on things other than ports, in particular SocketAddresses.
Make it possible to add more ports / sockets after a Server has been built.
This would effectively allow a server to add ports after start()
Maybe allow servers to gracefully close ports they started on.
Support having no listening ports on the builder.  This would mean adding a ServerBuilder ctor that has no ports at all.
This issue is more exploratory rather than mandatory.  Right now the request is just to listen on multiple ports, but we should be careful to not add overlapping APIs (such as on both Server and ServerBuilder).
cc: @ejona86


5348
Split java_lite_grpc_library from java_grpc_library Bazel rule4

As discussed in #5237. This is already the direction the rule was going.
Before making the change, I need to get some agreement internally that the benefit outweighs the churn to our users. Otherwise I wouldn't be able to migrate existing usages.
There will need to be a long period where the new rule exists and you can still specify "flavor" for the old behavior, to allow migration.


5349
Consider dropping 'srcs' from java_grpc_library Bazel rule4

This is to simplify java_grpc_library by only specifying the 'deps' pointing to the java_proto_library.
This has come up a few times internally as well as in #5237.
We'd need some cross-language agreement. In general we don't have many spare cycles to work on something like this cross-language right now, so there will probably be some push-back simply because what we have now "works."


5354
How to deploy java grpc applications in aws cloud?5

I am trying to deploy the grpc services in AWS but AWS is not supporting http/2 port. any other way to deploy in aws?


5359
bazel: migrate to deps of maven_install5

jvm_maven_import_external (and jvm_import_external) allow providing deps which will be added to the java_import in the generated workspace. You can refer to the target that includes deps via @com_google_guava_guava instead of @com_google_guava_guava//jar.
Unfortunately, if we use the non-//jar targets, they aren't available with maven_jar so it'd break users that haven't migrated from maven_jar to jvm_import_external/jvm_maven_import_external. See also #5214
We need to notify our users we will require the deps to be provided appropriately and give them some time to migrate. This includes dependent tools, like http.


5363
Test failure: serverChecksInboundMetadataSize FAILED6

Not sure why this would flake.


5366
configurable jitter in maxConnectionAge6

What version of gRPC are you using?
What did you expect to see?
We have a gRPC streaming service that supports long running streams. We want to have maxConnectionAge on them. The current issue we are facing is, NettyServerBuilder adds hardcoded +/- 10% jitter on the connection age passed. In our case, we would like have to more wider range as these are long running streams.
The proposal is to add a overloaded maxConnectionAge method with jitter% as additional argument.
Is this some thing that is acceptable?


5369
Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The jar should be running fine.
I am using java 8 to build an executable jar. Below is the java version:
After building, I am running the jar on an AIX7.2 machine as follows:
But I am getting the following error while running:
What is the problem here and how to solve this?


5370
BC BREAK on NettyChannelBuilder.newClientTransport after 1.137

What version of gRPC are affected?
What did you expect to see?
After 1.13, the signature of the method newClientTransport was modified. Since this is a public method, and not package private, this should be done only in MAJOR releases (2.x).
My dependency manager (Gradle) considers 1.16 as backwards compatible with 1.13  (which is correct and make sense), so as some of my dependencies is requesting 1.16, it installs that version. There is another library that depends on 1.13 and relies on the old signature of newClientTransport.
As per semver rules (), please release a new MINOR version (1.19) reverting back the signature to the old one, OR alternatively maintaining both and identifying the old one as DEPRECATED, so it can be removed in 2.x.
For anyone else facing the same issue, temporarily add the following to gradle:


5371
Allow GRPCLB_NAME_PREFIX to be configured per service in DnsNameResolver7

What version of gRPC are you using?
Feature Request
Some third party servers that I try to connect to don't expose their grpc service addresses with the grpclb prefix, so it would be nice if I could configure the service name lookup by providing a custom service prefix.
Example


5375
StreamObserver.onError not called on android when network switches to Roaming7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
StreamObserver.onError getting called when network type changes to Roaming
Actaul observation
On android, for bidirectional streaming, if the user has not acrtivated Connect to data services when roaming and if the network type is switched to roaming, StreamObserver.onError isn't called. As a fallback, I tried creating a new RPC stub on the existing ManagedChannel, but to no avail. Only when I created a brand new channel along with a new stub, did the StreamObserver.onError was called the next time.


5376
Running gRPC service in docker container7

I'm trying to run a few micro-services inside a docker container using docker-compose. One of this services is a gRPC-Java with auth credentials that will work as a server. When I'm creating the ManagedChannel I build it as follows:
ManagedChannelBuilder.forAddress(host, port).build();
But when running locally with docker-compose I need to use usePlaintext() because the server is not expecting any auth or I'll get:
What version of gRPC are you using?
What did you expect to see?
Successful communication without adding specific usePlaintext() for local run and removing it for other environment.
Is there a way to set a default ManagedChannel that would set the  usePlaintext() if necessary ?


5383
Bazel incompatible changes8

This repository doesn't build with Bazel future incompatible changes, and will break with future releases of Bazel.
In order to detect the issues in advance, you can try Bazelisk:
Some of the issues can be fixed automatically using Buildifier:


5385
bazel: export `:internal` from `:inprocess` 8

What version of gRPC are you using?
What did you expect to see?
examples's tests compiles.  Currently, it does not since a few supertypes of inprocess lives on the internal package which inprocess depends on but does not export it. The solution is simple:


5386
NettyServerBuilder protected stat setters?8

Wondering why these are protected and not public? Especially given this is a final class, who are those for? Should I be able to set those as a public user of the NettyServerBuilder?


5389
grpc-java latency seen more than 1-2ms for 0.6% txn(Total 2M txn)8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Hi,
I am running simple sync java "Hello" client & server and sending around 2M messages from client to server.
At start the latency is in milliseconds due to warmup & after sometime latency seen is 400-600 micro seconds.
But approx 0.6 % of the messages show latency of  more that 1-2 ms and this is seen through out the run not just at the startup.
Please help me why this happening and is this expected behavior,If yes,why?
If NO, then what is the possible way to debug this.


5392
proper publish-subscribe pattern using grpc9

Hello, i'm trying to implement pub sub pattern using grpc but i'm confusing a bit about how to do it properly.
my proto:
server service:
How to remove clients from global observers properly? How to received some sort of a signal when connection drops?
How to manage client-server reconnections? How to force client reconnect when connection drops?
Thanks in advance!


5393
Stop using //jar from jvm_maven_import_external targets9

As discussed in #5214, the current //jar usage (like @com_google_guava_guava//jar) is broken when it comes to cross-workspace transitive dependencies. But that's all that was possible with maven_jar. The proper fix to this is to use the deps feature of jvm_import_external/jvm_maven_import_external.


5394
Move publish exclusion logic from top level gradle.build to subproject9

Move publish exclusion logic from top level gradle.build to subproject (xds, gae-interops)


5399
Tracking issue for MalformedConfigException being experimental9

No description provided.


5400
tcp SEND-Q keep accumulating bytes0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm currently using two spring boot application, one for client, one for server, using grpc-lognet dependency in server side.
I created client side with ManagedChannelbuilder.
I use channel as a bean and injected in class. and use like this
is that okay to do this??
and it gives me unavailable io exception intermittently. (also I have no idea that it works in production level)
I checked my server status of tcp, and it shows some accumulated bytes in Send-Q. and sometimes this value goes up like over 2000. And the connection between server and client stopped.
like this
is that alright to use plaintext? or am I missing something?
plus, I've tried using withDeadlineAfter option on each grpc stub. It gives me an [error] deadline exceeded instead of [error] grpc unavailable io exception.


5404
MoreExecutors.platformThreadFactory() for java8 on app engine?0

I don't have good understanding about app engine restrictions, but a Bigtable customer recently ran into an issue because the Cloud Bigtable client did not use MoreExecutors.platformThreadFactory() for java8 on app engine (only for java7). It seems like grpc-java has a similar issue:
Should IS_RESTRICTED_APPENGINE be updated to include 1.8 for executor creation?


5412
(cd examples; bazel build //...) fails with bazel 0.23.0: conflicting actions1

What version of gRPC are you using?
Seeing this on v0.19.0 and master.
What did you expect to see?
Successful build.
This is what I'm seeing:


5414
How to close ServerCall in ServerCall.Listener?1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am writing a ServerInterceptor which will inspect one field of request message and determine whether current user can do this operation, If not, server will send Status.PERMISSION_DENIED to client and close. Now I almost approach it, below is reduced code
But this code will raise exception in server
I looked at some source codes, and found that seems like there is not a simple API exposed I can use to close ServerCall in ServerCall.Listener. And I don't sure how I can implement custom ServerCall.Listener, ServerCall or something else to achieve this. And how much work I need to do. If it is too much work to do, I think I have to put this permission check into every handlers in MyServiceImplBase.
Could someone give advices?


5422
Android lint InvalidPackage: javax.naming2

What version of gRPC are you using?
Sample project:
Running ./gradlew :app:lintDebug triggers errors:


5428
received message twice in provider side during performance testing?2

I am using Client-Side RoundRobinLoadBalancing, met an issue
invoke gRPC call once, but received same message in provider side twice during performance testing.
Had anyone met this before?
Or is this an known issue?
Thank you very much.


5433
Allow configuring onReady threshold3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
v1.17.1, though this hasn't changed in later versions
What did you expect to see?
Right now isReady applies backpressure once 32 KiB of data is buffered:
However, our use cases involve larger payloads (1-2 MiB/message), which means that sending any message immediately applies backpressure. We'd like to maximize throughput, so we're OK with more memory usage (to a point). We've also found in our own benchmarks that sending a couple messages beyond when isReady changes to false increases throughput reasonably (about ~50%).
While this is an okay workaround, it'd be more convenient to be able to set the threshold manually; also, then we can manage how much data is actually enqueued, instead of selectively ignoring the backpressure signal.
Would it be acceptable to make this setting not static final (or at least not final)? Or is there another way to adjust the backpressure threshold?


5435
grpclb: SubchannelPool should handle state updates for cached Subchannels3

GrpclbState tracks Subchannels' states as a mutable attribute in Subchannel.getAttributes(). However, GrpclbState only update this attribute for the Subchannels its managing.  For those cached in SubchannelPool, their state attributes are stale. When they are given back to GrpclbState, IDLE state is assumed, and will not be used for picking even if the actual state is READY.
To fix this, two changes are needed:
Expand SubchannelPool interface to handle Subchannel state updates, which GrpclbState will call. SubchannelPool should save the state separately, not in the existing attribute.
When SubchannelPool gives a cached Subchannel back to GrpclbState, it needs to schedule a call to handleSubchannelState() in the SynchronizationContext, so that GrpclbState will take the latest state as if it was just reported from the Channel.
Thanks to @menghanl for reporting this issue.


5436
grpclb: should use fallback addresses if no balancer address is given3

Currently it will just fail all RPCs. We should instead enter fallback mode immediately.


5439
InProcessChannel with optional stack trace3

What version of gRPC are you using?
What did you expect to see?
Error Stack trace.
In reference to this stack overflow question: here
Is it possible to have an option to show full stack trace for InProcessChannel, since I use this in integration tests and I need to see full reason of exception?


5450
Data race in NameResolve.Listener.onError5

NameResolve.Listener.onError can be called concurrently in different threads, so the following code in onError() impl may have data race.


5451
grpc-compiler artifact not found5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
is in the BOM. However there seems not to be any such artifact on Maven Central.


5457
When having multiple clients with their own stream request observers invoking a server grpc method , after one client receives onError , call is terminated for all other clients 5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I expected that only Client 2 will not receive any more messages , but client 1 will continue to .
How can we manage multiple threads/ clients in this scenario ?
Sorry if this is a very basic question, I did research a lot but could not find relevant solutions.
I have a code where there are multiple threads , executing the same rpc  method  ( server streaming) , within which a new channel/stub is constructed to the same gRPC server.
The clients keep receiving data through onNext of the request observer, until one of them throws an error and results in an onError() invocation.
StreamObserver documentation mentions that after OnError() further calls cannot be made, but in this case , there are multiple clients , each with their own streamobserver object.
What is the best way to handle this ?


5458
exception at runtime when trying to start the server5

getting this exception when running my application at startup. Not sure what is the root cause for it


5460
Please, extend support for the GraalVM native JVM target6

See some work done on
If this is backed in in the library, then all users would benefit.
See googleapis/google-cloud-java#4664 for more context.


5465
publishToMavenLocal failed in checkArtifacts6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
When I try to build master 1.20 on Mac, ./gradlew build -PskipCodegen=false succeeded while ./gradlew publishToMavenLocal failed at grpc-compiler:checkArtifacts.
Here is the error output:


5466
GRPCLB not conformant to LB policy selection spec.6

Per the documentation on ServiceConfig from
the presence of balancer address take precedence over the
deprecated LoadBalancingPolicy.  The current implementation
does the opposite, because it converts LoadBalancingPolicy to
the new LoadBalancingConfig which takes higher precedence.


5467
Enhancements to examples6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Latest
What did you expect to see?
each example should have a README file which a user can read to understand the example.
an extensible, consistent and logical directory hierarchy for the examples. I think the current directory structure can be enhanced to make it more user friendly
improved documentation: better content, links, fixed typos/grammar
dependency on released version: the current master (SNAPSHOT) version of examples depends on master (SNAPSHOT) version of the grpc library. Can we change it to depend on the latest released grpc version so the user who just wants to build examples doesn't need to build the grpc library?


5468
Server shutdown, client see different errors6

This is the issue I originally posted on grpc/grpc-go#2679
What version of gRPC are you using?
What version of Go are you using (go version)?
go version go1.11.4 linux/amd64
What operating system (Linux, Windows, …) and version?
Linux, 4.14.97-90.72.amzn2.x86_64
What did you do?
If possible, provide a recipe for reproducing the error.
It's bidi stream, and the client is do thing just like: (I open multiple stream inside the same go client).
and server side is java, using 1.17.1, and the server side code,it just normally send stuffs into stream, and everthing is ok, and when I do engine.shutdown() in server side,
I see the above code received different kinds of err, some of them is
and some are:
and In my go code, I didn't seem to do cancel to the stream, why I got some cancel errors?


5471
Customise code generation to not include final methods7

What version of gRPC are you using?
What did you expect to see?
I use grpc-java as part of the quarkus-grpc-extension. The extension enables to use grpc-java in Quarkus. One of the extension's feature is to use CDI in gRPC services. gRPC services and interceptors should be singletons and my first attempt to make them @ApplicationScoped failed due to a final method in the generated service code (final on bindService()). This makes it hard to create a dynamic proxy.
It would be great if one could customise the code generation in a way that the user can control whether he wants to have final methods or not.


5479
./gradlew installDist results in an error com.google.protobuf not found7

What version of gRPC are you using?
Using gRPC v1.19.0 in CentOS 7.
What did you expect to see?
From the checked out folder, the below two commands were executed without any error.
Then I changed my working directory to examples and tried to build examples
I got the following error
What could be the error ? I have protoc 3.6.1 installed.


5482
Invalid UTF-8 ByteString generated for uint64 greater than value 55903.8

In a nested message, setting uint64  to value greater than 55903 causes ByteString of message to be invalid UTF-8.
Issue is reproduced using a sample project
Details are in the README.md of this project.  But, for a quick reference for the important files:
What did you expect to see?
ByteString to of message to be a valid UTF-8.


5487
connection waiting for very long time grpc v13.18

Please answer these questions before submitting your issue.
What version of gRPC are you using?
I am using old version v13.1 grpc java client
JDK11 , GRPC Service fronted by Load balancer
What did you expect to see?
We use unary blocking call for sending the request like,
I observed some requests are waiting even past the configured deadline, currently 300ms
From the thread dump I see,
and this waits on the waitAndDrain for more than 12 hours.
I tried upgrading to v1.19, seems the problem go away, still monitoring it. But want to understand does this any resolved issue from earlier versions?
I see lot of issues reported in the older versions regarding stream close and connection waiting  grpc/grpc-go#1462 , grpc/grpc#11643 but withDeadline not being honored seems a little concerning to me.


5489
Grpc Server read client ip address and send to service 8

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I wrote interceptor like this
now i want ip address which was captured above to be sent to my services whenever my method get called so that i can add debug log by creating client ip and request data dump in server logs.
Pls suggest a better way.
if metadata which i send from the client have an unique id which i set in server context(key=unique id ,value=client ip address) and while making my method call i set this unique id in request params and compare both(context and request parameter of unique id) at service level. For this approach i need to rewrite my proto file which "I DON'T WANT TO DO".


5490
Throwing StatusRuntimeException from within a ServerInterceptor9

What version of gRPC are you using?
What did you expect to see?
I'm using a gRPC interceptor which sometimes throws a StatusRuntimeException with status code PERMISSION_DENIED - there is also a io.grpc.util.TransmitStatusRuntimeExceptionInterceptor in my list of interceptors (#2189). The PERMISSION_DENIED code successfully gets sent to the gRPC caller, but there is always this exception stack trace logged out by the gRPC server.
I haven't been able to find a way to get rid of this ERROR log, and would rather not disable or tune down the logger itself. It looks like the TransmitStatusRuntimeExceptionInterceptor closes the call early on a StatusRuntimeException being thrown which then means when another interceptor calls e.g. onHalfClose() this error appears.
Is there a better way to go about using StatusRuntimeException or closing calls early in gRPC interceptors in general, in order to avoid ERROR logs like this?


5493
Exception java.lang.IllegalStateException: Could not find policy 'pick_first'9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
When executing the Quickstart class of Google Firestore Service I get this exception.


5494
Channelz should use milliseconds for timestamps9

#4883 changed the TimeProvider.currentTimeNanos()'s precision to milliseconds, because there isn't a way to get the current time in nanoseconds precision. After #5056 is fixed, Channelz/ChannelTracer will be the only users of TimeProvider, and they all convert the time to proto Timestamp which doesn't mandate the unit. It will only be misleading to keep TimeProvider.currentTimeNanos() as is. It should be changed to currentTimeMillis().


5495
Implement LoadBalancer.Helper#createResolvingOobChannel9

The interface was added in #5415 but is not yet implemented.


5496
Extract name-resolution logic from ManagedChannelImpl for re-use9

First mentioned in another comment, and then discussed with @ejona86 and @dapengzhang0, it was concluded that we need to extract the following logic:
Parse the target string and convert it into a URI
Manage NameResolver retries
Wire up NameResolver and LoadBalancer
out of ManagedChannelImpl, and make it usable in the following cases:


5497
Move LoadBalancer.handleSubchannelState() to a per-Subchannel listener interface9

In hierarchical LoadBalancers (e.g., XdsLoadBalancer) or wrapped LoadBalancers (e.g., HealthCheckingLoadBalancerFactory, the top-level LoadBalancer receives Subchannel state updates from the Channel impl, and they almost always pass it down to its children LoadBalancers.
Sometimes the children LoadBalancers are not directly created by the parent, thus requires whatever API in the middle to also pass Subchannel state updates, complicating that API. For example, the proposed RequestDirector includes handleSubchannelState() solely to plumb state updates to where they are used.
If we instead pass a listener when creating a Subchannel to accept state updates, those updates could be directly passed to where the Subchannel is created, skipping the explicit chaining in the middle:
If a wrapping LoadBalancer wants to look at or alter the Subchannel state updates for its delegate (like in HealthCheckingLoadBalancerFactory), it can still do so in the wrapping LoadBalancer.Helper passed to the delegate, by intercepting the SubchannelStateListener.


5498
Setting a deadline for a long-lived streaming stub9

We are using an implementation of bi-directional gRPC streaming, and are interested in setting an appropriate deadline for each request. The stub is used for a long-lived/high throughput stream.
When using unary, I know we could create a new stub for each request, then use it for the unary request.
However, with streaming, the stub is used for lots and lots of requests. Is there a way to set the deadline for an existing stub on on a message by message basis? I did not see anything for streaming deadlines in the examples https://github.com/grpc/grpc-java/tree/master/examples.
In our code, we are using requestStreamObserver.onNext(requestMessage) to queue up each message for sending.
What version of gRPC are you using? 1.19.0


5507
I would like to contribute a streaming timeout/deadline example0

I recently talked to @carl-mastrangelo about how to add timeout/deadline support for bi-directional gRPC streaming (see #5498). The solution works great. I would like to contribute an example for how to do this to the Examples area of this repository. I wanted to check with the grpc-java team first before submitting a PR to make sure you are good with this. The main idea is to provide an example that others can benefit from when using streaming. The documentation for gRPC says that deadlines are important (to avoid the default internal possibly indeterminate timeouts), so I think it would be good to include a sample that others could work from.
Please let me know what you think. If in agreement, I will draft and submit a PR.


5509
Use the JWT service builder in GoogleAuthLibraryCallCredentials0

GoogleAuthLibraryCallCredentials.JwtHelper uses a deprecated constructor to create a ServiceAccountJwtAccessCredentials.  The deprecated constructor was removed in google-auth-library-java's 0.14.0 release, but given its use in grpc, the Constructor was re-added in 0.15.0.  The deprecated constructor will be removed in future releases.
There are*Credentials.Builder which is the preferred method of creating any Credentials, and have been available since the 0.8.0 release.  Please use ServiceAccountJwtAccessCredentials.Builder instead of the ServiceAccountJwtAccessCredentials constructor.
NOTE: I will submit a PR for this.


5510
There should be a way to disable OpenCensus stats and tracing1

Currently, out-of-the-box client and server config includes a very expensive "no-op" in the form of the enabled-by-default opencensus tracing and stats interceptors. This is the case even if no implementation library is on the classpath, and disabling them is difficult/discouraged/impossible (without reflection) depending on the transport.
There's also significantly more garbage produced when enabled.
It would be great to enable these only when the impl library is detected, however:
There are circumstances when it might be there but not used
It may be the case that only one of stats or tracing is being used
Even if it is being used, instrumentation overhead of this magnitude may be considered undesirable (and these numbers are just the api plumbing without any additional cost from the impl itself)
Could these be changed to be disabled by default? I'm unsure why such settings are considered internal when they pertain to external functionality. There's not much danger of anyone "accidentally" leaving it disabled since it would be immediately apparent that the stats aren't working but the converse is of course true and I would assume most common.


5513
Update GoogleAuthLibraryCallCredentials to use non deprecated constructor in google-auth-library-java1

In google-auth-library-java, we will be removing a deprecated constructor in ServiceAccountJwtAccessCredentials: https
This is currently used in GoogleAuthLibraryCallCredentials:
This implementation will need to be changed to be compatible with future versions of the auth library.


5519
Why is startup so slow?1

What version of gRPC are you using?
What did you expect to see?
Using the example code there's a ~5second gap during the startup of the server, which seems odd...
I assume this isn't normal / intended, but it's unclear what is causing this and what could solve it ...


5523
Android Interopt Test is breaking due to mockito upgrade2




5528
Use resolved versions instead of resolutionStrategy.failOnVersionConflict2

Gradle 5.2 added support for publishing the resolved versions of dependencies used.
We are currently using failOnVersionConflict because we didn't have a way to check that Maven would resolve dependencies correctly. Although failOnVersionConflict is similar to Maven Enforcer's dependencyConvergence, we only care about supporting requireUpperBoundDeps.
Unfortunately, resolved versions seems to be sufficient only for direct dependencies. A transitive dependency included twice could have the lesser of the two versions first (and so Maven would chose the wrong one). That may not happen very often, so we could potentially rely on things like https to notice failures. failOnVersionConflict is a PITA and error-prone, so even suboptimal tradeoffs may be welcome.
Using resolved versions is also of interest to #4680.


5529
Convert C++ compilation to new Gradle C++ plugin2

There's lots of improvements, but the most functional is composite build support. That would allow Android builds to --include-build .. and avoid the need to first install to maven local.


5530
Consider converting grpc-bom to Gradle's Java Platform Plugin3

Java Platform Plugin can be used with Maven Publish plugin to produce a BOM. It'd be nice in that it would remove our custom XML creation, but it's also minor.


5533
Use AndroidTicker instead of default system ticker3

The internal import detected an errorprone from #5491:
Stopwatch.createUnstarted(AndroidTicker.systemTicker())


5534
GrpclbLoadBalancer should have full control over the lifecycle of StopWatch3

Would be good to add another GrpclbLoadBalancer constructor without the StopWatch argument. The old constructor is just @VisibleForTesting, and GrpclbLoadBalancerProvider will call the new constructor. In this way, GrpclbLoadBalancer can have full control over the lifecycle of the StopWatch.


5539
Assessment of adoption r8 to take place proguard in Android build.3

No description provided.


5540
Throw away mockito from AbstractInteropTest4

There is only little usage of mockito in AbstractInteropTest, and it's causing problems in android-interop-test #5531 (comment) .


5543
Impossible to ignore ALPN negotiation failure4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Setting the ApplicationProtocolConfig to SelectedListenerFailureBehavior.CHOOSE_MY_LAST_PROTOCOL should unconditionally choose the last protocol even if ALPN negotiation didn't yield any protocols.
Related to #5167
Looking at the logic in io.netty.handler.ssl.ReferenceCountedOpenSslEngine.DefaultOpenSslSession.selectApplicationProtocol(), selectApplicationProtocol() is only invoked if
applicationProtocol is not null. The method selectApplicationProtocol() will ignore the negotiated protocol if CHOOSE_MY_LAST_PROTOCOL is selected and the selected protocol is not in the list of protocols.
It seems inconsistent to be able to ignore the results of the ALPN negotiation only in the case that the negotiation yielded some protocol but not in the case that it yielded no protocols.
Use Case
I am using an AWS Network Load Balancer (NLB) to perform TLS termination for a gRPC application. The NLB cannot perform ALPN but the backend server which is implemented using grpc-java is HTTP/2 capable and tests using Go or Python based gRPC clients succeed against the server via the NLB.
I would like to be able to invoke the application using grpc-java and force the use of HTTP/2 even though ALPN negotiation will not succeed as I know the backend is HTTP/2 capable.


5551
Let Netty decide number of threads for default NioEventLoopGroup5

netty/src/main/java/io/grpc/netty/Utils.java:
DefaultEventLoopGroupResource decides the default parallelism for the NioEventLoopGroup if numEventLoops is 0. Please let Netty decide that because we can override the value with a property (io.netty.eventLoopThreads) instead of in code. Please let 0 (the default) pass through.
Thanks,
Michael


5552
java Client -> nginx GRPCs ssl -> java Server using DNS5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
have an answer by the server using TLS MUTUAL through nginx
currently I have generated the relevant certificates so that the communication is carried out between java client -> nginx (GRPs ssl) -> Java server but the problem is when I try to integrate the TLS part with the CA CRT certificate and probe with CA in Bundle and normal CA and does not achieve communication, it should be noted that these same certificates I have with NODE - GO and it works without problems if I mix NODE -> JAVA, GO -> JAVA works sim problem being JAVA the client my question is. how can I validate the certificates at both ends and that it depends on the MUTUAL TLS connection being carried out correctly
sorry for the bad inglish THANKS


5556
Breaking change in NameResolverProvider with latest release5

What version of gRPC are you using?
What did you expect to see?
I use yidongnan/grpc-spring-boot-starter 2.3.0 and use custom NameResolvers to connect remote services. Due to interoperability conflicts with java's service loaders I cannot directly access/use the provided grpc NameResolvers and have to first use spring logic to determine the remote host before using the NameResolvers.
Due to the changes introduced in grpc-java 1.19 (method parameter change) I am now unable to
use the 1.18 API with NameResolverProviders.
The change in https simply exchanged the parameters without providing a method for backwards compatibility.
Due to this change I'm unable to provide support for either <=1.18 or >=1.19 versions.
I know that at some point the other method will be removed, but I hope to have some time for migration.
Did you forget to add the method override or is it intentional?


5557
How to solve `Warning: io.grpc.netty.shaded.io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter:`?5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
i am using google translate api's, when i get release build throw the bellow warning's from android. I search many examples but still i get this warning. Please any one give me an solution to solve the error.
Here i mention my gradle file and warning output.
Please anyone give me a solution for this error.


5558
Where to keep message definitions, generated classes and how to version them? - good practices5

Hi there.
I have question to people who are experienced in using gRPC in multiple microservices architecture written in Java.
TLDR: Where is the single source of truth for message/service definition and how to integrate it with CD?
Do you keep .proto files within repository that provides gRPC server or separated code base?
Do you compile .jar with those classes and pushes it to private repository to make them accessible to other consuming apps or they should generate those classes on their own?
How do you version those packages?
I imagine this situation: Me and my team develop microservice Order. We define our OrderService and I/O messages. We deploy our OrderApp v1.0. and OrderServiceProtos v1.0 (artifact in private repo)
There is another team developing Customer service and they want to use our OrderService to fetch some data. I assume their only resposibility is to download jar with our generated classes, create Channel, create Stub and go fetch some data.
Next week my team add some method to OrderService. We deploy OrderApp v1.1. and OrderServiceProtos v1.1 (artifact in private repo). We notice another team about update. At that moment they know about update and they can fetch the most fresh jar.
So I wonder: ​ Should I bump OrderServiceProtos everytime I deploy new version of OrderApp ?
What if our CD pipeline runs many times everyday (20+)? I don't want to compile and deploy OrderServiceProtos v1.3 that looks exactly the same like v1.2 (because only the App part was updated and CD pipeline ran)
I am wondering if anyone of you had this same considerations.
Or maybe flow with published artifact as a single source of truth is not correct?


5562
Add support for custom attributes in NameResolver.Helper6

What version of gRPC are you using?
Related
Feature-Request
The java service loader API has the drawback that it creates instances without context.
In my case it creates NameResolverProviders without spring's dependency injection.
With the Attributes API that present up to and including 1.18, I was able to pipe the potentially required beans/config to the actual implementations. Now this path is blocked.
Lets assume we have a config which contains the "service discovery server URL".
Somehow we need to push this tiny piece of runtime only information into the ServiceDiscoveryNameResolver(Factory).
We now (1.19 or later) have basically three options:
Encode everything in the URI
This will soon become a nightmare for every maintainer as more and more properties needs to be encoded for the potential case that one provider needs them. This option cannot pass more complex instances such as a RestTemplate or HttpRequestOptions.
Use static fields to pass the variables
Well you can pass anything through static variables, but using them to transfer something stateful sounds like a bad idea and fails as soon as the load order is slightly of or multiple distinct instances of gprc-services run in the same JVM (to save some memory).
Wrap the NameResolverProvider (registry) in another (spring-managed) registry that will first try to use the contextual name resolvers before falling back to the grpc-managed ones. Well this works but somewhat defeats the purpose of specifying priorities and availability in the first place.
Prior to 1.19 we also had a forth option:
Pass the context through the attributes
In yidongnan/grpc-spring-boot-starter I use the third variant, but also considered using the forth variant because it would free my code from conditional wrappers and would allow adding other contextual name resolvers more easily.
I currently don't use the extra attributes, but I considered it for future simplifications.
The DiscoveryClientResolverFactory is currently my only contextual name resolver. In this example I could request the DiscoveryClient bean from the applicationContext instead of passing it in the constructor.
IMO it would be best to revert the helper back to the unspecific attributes or add an optional, mutable and unspecific attributes to the helper because:
A single getCustomAttributes() : Object would fail as soon as another layer of context is added on top.
At least the default port is useless when other service discovery mechanisms are used. I'm not sure whether I would call it an implementation detail but at least it's related.
There is no factory method/forwarder class to overwrite one value with another without risking to become fragile to changes to the helper class which seems to be the case for 1.21 again.


5574
WriteBufferingAndExceptionHandlerTest is flaky7

Looks like the local address is not being cleaned up fast enough


5576
ClientCall errors does not finally invoke ClientCall.Listener.onClose()7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
ClientCall.Listener.onClose() should be invoked when there is a ClientCall error for unary calls.
When there is an exception thrown by call.sendMessage() or call.halfClose() within asyncUnaryRequestCall(), it results in cancelThrow() calling ClientCall.cancel() and scheduling a stream closed task (i.e. ClientCall.Listener.onClose) on the executor.  However, the exception propagates up to futureUnaryCall  and blockingUnaryCall which catches it again, calls cancelThrow() again but never drains the executor within the try-catch block.  Thus ClientCall.cancel() is called but not ClientCall.Listener.onClose() on client call errors.
Is ClientCall.Listener.onClose() expected to be called whenever the client call terminates?  Is dropping the ClientCall.Listener.onClose() call a bug or expected behaviour?


5583
Huge Off-heap memory used by java.nio.DirectByteBuffers8

What version of gRPC are you using?
What did you expect to see?
Problem:
When I run stress tests with my grpc-java server on amazon linux 2, I saw huge process memory usage, but It was not heap memory or Metaspace (they are pretty small).   so I took heap dump and use jxray to generate the report, I saw huge off-heap memory usage.
Here is the screenshot:
However, the server is running perfectly ok on my Mac pro with the same code.
And here is my code to start grpc server:
Thanks


5584
not able to connect to grpc server getting 'First received frame was not SETTINGS'8

I generated java code from maven plugin 'grpc-java' and published. using artifact in sbt project to connect to grpc server. but not able to connect(on kubernates cluster). while i connect from local using port forwarding it connects and messages are sent (from maven project).
Client code used in sbt is below
Getting below error while trying to send the message.what could be the reason.


5592
Consider supporting Guava 19 in grpc-api9

As requested by @adriancole at #5590 (comment) .
I worked to remove major ecosystem incompatibilities with Guava 20 starting in 2017 and claimed victory in 2018. See #4176 to follow the chain. Guava 20 was released in 2016, so I do have limited sympathy for libraries that remain incompatible, especially since every occurrence I've seen has included at least one @Beta API.
Supporting Guava 19 is a bit difficult from a testing perspective, unless we depend directly on Guava 19. If we continue compiling against Guava 20+ it's likely regressions will be introduced. Depending on Guava 19 directly would be unfortunate and hurts us getting to Guava 27, which we need to avoid Android dependency issues with listenablefuture and failureaccess.
@adriancole, I generally expect to know what libraries are incompatible with newer Guava versions and get some agreement from their maintainers they are working on the issue. That way I can track progress and know when we can use the newer Guava. What libraries are causing the trouble?
Also, note that we don't generally support users downgrading our published dependencies. We did "make it work" for a while for older Guava versions after we became aware it was wide-spread, but downgrading dependencies is not something that is acceptable without informing upstream.
I just tested and grpc-api is API-compatible with Guava 19. I think I'd take the approach of having our own Preconditions class in io.grpc that we use instead for the while. It can still call Guava's Preconditions, but it will ensure we only call overloads that are available in Guava 19. Note that this will cause more garbage creation, since the overloads were added in Guava 20 as a performance optimization. For cases where the garbage may be costly, we could implement the method ourselves. @adriancole, does that sound like a fine approach?


5593
OpenCensus grpc method is not set9

What version of gRPC are you using?
We are using 1.19.0 in combination with OpenCensus 0.19.2.
What did you expect to see?
When using the RpcViewConstants.GRPC_SERVER_SERVER_LATENCY_VIEW from opencensus-java I would expect to see the metric split up by gRPC method, as is intended by them grouping the metric by the tag grpc_server_method.
However, grpc-java still sets the deprecated method tag which means this grouping is broken when using grpc-java:0.19.0 with opencensus-java:0.19.2.
The easy fix would be to set both tags, to ensure a wider compatibility with opencensus. I can prepare a PR if that sounds like a good approach.


5596
Investigate bulk metadata functions9

Metadata provides limited public APIs for interaction, typically requiring a Metadata.Key to do any reads or writes.  This is useful to an application, which may know the key name and marshaller ahead of time, but not so much for middle-ware which may need to scan for keys.   As an example, a middle-ware that looks for metadata prefixes and builds a custom Key depending on the suffix of the key name has trouble with the existing Metadata API.  It requires multiple iterations through the metadata, and up to O(n^2) ops when trying to extract values with duplicate key names.
Metadata is also mutable, and does not want to expose internals, as they may yet change.  I am proposing some experimental APIs here to address the bulk metadata functions use case:
The different options provide the equivalent of a map operation (we might also be able to provide the equivalent of a Java8 stream).  Option 1 is the least flexible, but has the simplest API.  Option 2 allows the caller to provide their own Key producer based on the key name, but the value consumer doesnt get to know the key name used.  Option 3 still uses the same marshaller for each key, but allows the consumer to know the key name. Option 4 is a combination of 2 and 3, allowing both dynamic marshaller construction based on the key name, and allowing the consumer of the the produced values to know the keyname (perhaps for later caching?)


5598
Tracking issue for removing Nio fallback logic9

Remove backward compatibility code for Epoll fall back logic for version 1.22.0.
This fall back is introduced in #5581


5600
client side proxy when using ManagedChannelBuilder.forTarget()0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
I have been using 1.16.1 version. Now upgraded to 1.20.0 version.
The machine where am running the client side ie, ManagedChannelBuilder.forTarget(serveraddress)  call is used is proxy enabled.
I get an error saying "Channel closed while trying to CONNECT through proxy"
I can read the proxy address from environment variable http_proxy.
For example : http_proxy="10.9.3.2.9090" and my target Address = "10.45.6.1:7070" (ie grpc server is running on another machine)
How do i make the grpc allow this proxy and send request to the target Address.
What did you expect to see?
I need a sample example. I see a proxydetector that is available but not sure about the usage of it since the method takes a single address.
I am new to grpc.  Need help.


5602
Disable automatic call request when autoFlowControlEnabled is false0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.18.0 but problem still present on master
What did you expect to see?
When taking over automatic flow control by calling disableAutoInboundFlowControl I would expect the same amount of messages to be emitted as actually requested. But one extra message is always emitted.
After some tracing this reason comes from here:
It should be possible to at least disable this automatic request(1) call to avoid overflows when integrating with reactive streaming libs.


5603
Protocol message tag had invalid wire type0

This could mean either that the input has been truncated or that an embedded message misreported its own length.


5607
GRPCLB should enable client-side health-checking in fallback mode0

When working normally, the remote balancer health-checks backends and only send healthy backends to the client, thus no need for client-side health-checking. In fallback mode, client-side health-checking is needed.
@ejona86 @markdroth @menghanl and I had a discussion today. The simplest solution for Java is to wrap GrpclbLoadBalancer with the health-checking LoadBalancer, thus it always enable client-side health-checking (if service config enables it). It's considered acceptable both normal mode and fallback mode have it enabled indiscriminately.
However, GRPCLB with pick_first child policy won't work well with health-checking. Health-checking returning unhealthy would fail RPCs, but the pick_first policy will not try the next backend, because InternalSubchannel still considers the connection READY. Fortunately, our only user of GRPCLB w/ pick_first won't turn on health-checking.


5608
open ssl error-  help: No ALPN negotiated after enabling useTransportSecurity to grpc server0

Please answer these questions before submitting your issue.
Secure Renegotiation IS NOT supported
What version of gRPC are you using?
What did you expect to see?
Should be able to use OpenSSL command to our server, but after adding useTransportSecurity I haven't been able to ping my server:
Locally, when I try to run a request seeing:
Any tips as to how to trouble shoot this?


5609
Add spellcheck CI to repository0

There are tons of typos and spelling errors in our codebase, some are in the code and some are in the comments. As grpc-java is becoming more and more popular, maybe it's time to clean them up and have a required CI task running spellchecking on PRs. It might add some pain when creating PRs, but fixing typos in a single PR should not be too headache and it does things good to us. Envoy's repo is doing very well on this, maybe we could borrow what they are using.


5610
AndroidChannels: failing requests right after network recovery1

What version of gRPC are you using?
What did you expect to see?
In our project we use android JobService, which starts right after device establish network connection. Inside that service we run Grpc request over AndroidChannel. We expect to see successful network calls at that point
What actually happens.
Most of the time, this request fails few times in a row (as JobService reschedules itself on failure). At first it seems that though JobService is started, no connection is available for some reason, but then we tried to add simple http request via OkHttpClient - and they work well.  Additional digging in logs and debugging reveals, that this might be related to DnsNameResolver, as it might resolve address when request is already in progress. This issue seems highly related to #4028, but occurs in AndroidChannel.
Steps to reproduce
Given mentioned setup (JobService + AndroidChannel), it requires android device with API 24+. Issue can be reproduced by toggling off device internet connection (both WiFi and mobile, seems no difference), wait around 10-15 seconds, and toggling on connection.
Example project, which can demonstrate this issue can be found at https://github.com/AntKos/android-grpc-jobservice.


5616
Question: how to set Status details?1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
As per https I would expect io.grpc.Status to have the same repeated google.protobuf.Any details = 3; functionality but I can't find out how to do this in Java.
Could you please advise on how to achieve using this details field? Thanks


5620
grpc java.lang.IllegalStateException: call was half-closed at2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


5624
Unable to activate real-time metrics to OpenCensus2

#5099 implemented a way to record real-time metrics. Cool! Now I'd like to activate it, as it's disabled by default. I'm not successful in enabling this, however.
Tried with a NettyServerBuilder for example, but the setStatsRecordRealTimeMetrics method is protected.
I don't see any other way to set the private attribute recordRealTimeMetrics in the AbstractServerImplBuilder class from the sources.
The work-around I'm using now is ugly in bypassing the protected attribute (Kotlin, but you get my point).
after which it starts to work, except from the method name not being exported (but that's #5593).
What version of gRPC are you using?
What did you expect to see?
A public function on the Builder to call setStatsRecordRealTimeMetrics(true).


5631
Bidirectional streaming RPC3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I use bidirectional streaming rpc, and I reconnect when reply invoke onError(), then update the helloRequestStreamObserver ref.
I lost request, it's ok, because  ref update util reconnect success. this are some solution to avoid losing request?


5635
Tracking issue for MethodDescriptor.getServiceName being experimental3

No description provided.


5636
GC friendly long live server streaming3

In my application, I use server streaming, when client send request and receive responses until connection will not close(days or more). At heapdump i found that initial request never released until stream not close.
Why not release it as only method was invoked at this place https


5644
grpc-protobuf-lite not working with com.google.cloud:google-cloud-bigtable4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The use of io.grpc:grpc-protobuf-lite and com.google.cloud:google-cloud-bigtable should not raise NoSuchMethodError.
While I was checking the compatibility of google libraries, I found grpc-protobuf-lite has classes that are not compatible with many GCP-related libraries (the list noted below), including com.google.cloud:google-cloud-bigtable:jar:0.84.0-alpha.
Example project to reproduce this issue: http shows:
For grpc-protobuf-lite, I only found this sentence in the doc:
For Android client, use grpc-okhttp instead of grpc-netty-shaded and grpc-protobuf-lite instead of grpc-protobuf
from grpc-java documentation
Questions
Would you explain the difference between grpc-protobuf and grpc-protobuf-lite?
Do you think the incompatibility between io.grpc:grpc-protobuf-lite and com.google.cloud:google-cloud-bigtable is something that needs to be fixed (probably for Android apps accessing GCP services)?
Incompatible Libraries


5649
Rely on ChannelFactory in NettyServer instead of dynamic classes4

Reading up on what it takes to support Graal native image compilation for gRPC, most of the incompatibilities are in the Netty tier (not the responsibility of this repo), but here's a low hanging fruit item:
They suggest using a ChannelFactory when working with ServerBootstrap to prevent unecessary reflective instantiation, something like this:
I spotted #5460 as well which talks about Netty things, but the article I'm including also shows that this sort of thing can be sideloaded/managed externally from this repo. The change I am suggesting however would impact the ServerBuilder API a bit, but I think it might be a good one long term anyhow, WDYT?
More info @ this article:


5650
HOL blocking for multiple bidi streams5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
I would like to know more details on how grpc bidi streaming works on top of HTTP2 streams.
Specifically, in this issue - #3849 below statement got me a little confused
An RPC* corresponds to one HTTP/2 stream. All streaming RPCs use the same HTTP/2 stream.
So does this mean - if I have 2 or more streaming GRPC requests on a single connection, it will lead to no multiplexing and head of line blocking? Is there any way to avoid that?


5652
Add state-checking logic to our StreamObservers5

We currently rely on ClientCall/ServerCall to verify that onNext() is not called after onCompleted(). When this is done incorrectly the user gets a Call-centric error message instead of StreamObserver-centric. We should duplicate some of that logic to StreamObserver so we can deliver a better error message.
For example, this would have helped the user in #5620.


5655
java.lang.IllegalStateException: Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available5

Description in this issue...
googleapis/java-bigtable-hbase#2140


5660
Remove MoreThrowables as stated in TODO6

What version of gRPC are you using?
I've found a class in grpc-core by @ejona86 which should be deleted when Guava 20+ is being used. The class is still being used and we are now using guava 26, so I think this could be refactored or the TODO removed.
Merge Request: #2751


5661
Occasional spikes of 500ms-2s latency on sending from java grpc client to java grpc server6

What version of gRPC are you using?
I previously filed grpc/grpc-go#2788 with grpc-go after noticing a large gap between outbound data and inbound window updates. After matching up debug logging on the client and the server, I was able to determine that the requests seem to just not be making it to the server for awhile. For instance below is a debug message from the grpc java client, followed by the corresponding read on the grpc service.
It seems to be the case that for a small period of time 500ms-2s, no outbound data will be received by the server and then all of it will be received at once. I was wondering if you had any thoughts on what could be causing this or how we could further debug the issue. It seems like one avenue would be to write a custom Http2OutboundFrameLogger that adds a timer to the channel future on outbound data being sent.


5665
Authentication example is presently harmful6

The example is currently equivalent to the "header" example. So there's no possible value-add it could contribute at the moment.
But unfortunately it is recommending making a ClientInterceptor for sending JWT to the server. That's not what we recommend. We would recommend using MoreCallCredentials.from(Credential) along with ServiceAccountJwtAccessCredentials (which is Google-centric, but users can potentially use the fromPkcs8() construction method) or to implement CallCredentials directly. CallCredentials has the advantage that the credential 1) can verify its security requirements, like how all JWTs should be sent on an encrypted connection, and 2) will be fresher, as it is called just before the RPC is sent (a waitForReady RPC could be delayed for days).
The example also needs to incorporate how to propagate the authenticated user to the application via Context. Ideally it would at least note how to fail the RPC if the user is unauthenticated. Examples of how to do this is available on SO.
I'm considering deleting the example for the upcoming v1.21.0 release.


5671
Large number of PoolThreadCache garbage objects7

We are using grpc-java version 1.16.0 in Apache Ratis for RPC communication. Apache Ratis is a java implementation of Raft consensus protocol and uses grpc for server-server and client-server communication. In the scenario there are ~10KB requests coming from the client to the server and the server is replicating those requests to other servers. There are thousands of these requests coming gradually to the server from the client. There are other small sized metadata related communications as well.
We are currently seeing a lot of GCs getting triggered and lot of garbage PoolThreadCache objects. Here is a snippet of the major unreachable heap objects.
It seems like there is lot of garbage being generated via thread caches.


5674
Define and use SubchannelPoolHelper7

No description provided.


5675
Migrate to use SubchannelStateListener for Xds7

No description provided.


5676
Subchannel identity crisis7

Since we are doing lot of wrapping on the LoadBalancer API, and Subchannels are passed through various interfaces, a wrapped Subchannel will require a lot of care to make sure it's consistent on all APIs, e.g.,
The Subchannel from createSubchannel() should be the same objects that's passed to SubchannelStateListener on every wrapping level.
An upcoming ORCA load reporting API is another example (#5639 (comment)).
The Subchannel from PickResult will have to be unwrapped as well. ManagedChannelImpl assumes the Subchannel from PickResult is the real "SubchannelImpl".
Possible solutions:
Move LoadBalancer.Helper methods that accepts Subchannel to the Subchannel class, e.g., updateSubchannelAddresses(). Stop passing Subchannel to the listeners. But that requires a start(), which is a non-trivial API change on the current Subchannel, but could be considered for new APIs.
The opposite of above -- move all state-mutating methods, e.g., shutdown(), requestConnection() to Helper, eliminating the need for wrapping Subchannel.
Provide a util to help correctly wrap Subchannel while keeping the consistency.
Add another identity object to Subchannel. This could also used by ManagedChannelImpl to retrieve the real "SubchannelImpl" from PickResult.
Solutions 2 and 5 wouldn't go along with our plan of changing Subchannel attributes to an object, because a wrapping Helper can only add its own stuff on that object by wrapping it, which ends up the need for unwrapping it on the Subchannel. Otherwise they seem to work well.
@ejona86 @voidzcy


5677
Simplify example-gauth with our recommendations7

Instead of GoogleCredentials.fromStream(), use GoogleCredentials.getApplicationDefault(). We can comment where to put the JSON file and what environment variable to set if they want it somewhere else. We then would note that the JSON file is unnecessary on Google platforms.
Remove refreshAccessToken() and its comment. This will be done automatically when necessary.
GOOGLE_AUTH_EXAMPLE.md would require being updated to match.


5679
Make XdsLbState a LoadBalancer7

XdsLoadBalancer should decide the newPicker when either the fallback balancer or the xdsLbState child balancer updateBalancingState with their own newPicker and their own childHelpers.


5681
Use a reliable groovy/gradle style checker8

#5680 just removed the troublesome spotless style checker.
Maybe find another style checker that is more reliable. CodeNarc might be a choice.


5688
Fedora Fix for Netty-Shaded8

What version of gRPC are you using?
What did you expect to see?
I was unable to get grpc-netty-shaded or grpc-netty (+ the classifier) working on Fedora 30.
This is the error I encountered when using netty-shaded:
And here's the error I encountered when using grpc-netty + the fedora classifier:
I was able to workaround this issue by creating a sym-link for libcrypt.so.1:
Creating this link solved the issue for me.
Note: you might need to install openssl-devel.
Leaving this here in-case it helps someone in the future.


5692
NameResolver refresh not triggered if empty addresses returned9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I've implemented a custom NameResolver to resolve addresses in Consul (DNS or HTTP). We're pairing this name resolver with the RoundRobinLoadBalancer to provide simple client-side load balancing.
While integration testing, I found that if we return an empty list of addresses in the name resolver, no refresh is ever triggered on the NameResolver (leading to a permanent error of UNAVAILABLE for all calls). If I change the NameResolver implementation to call Listener.onError() instead when no addresses are found, refresh() will eventually be triggered and the problem can resolve itself.
When writing the name resolver, I believe I may have gotten tripped up on this comment (which makes it sound like onAddresses() with an empty list is equivalent to onError()):
For reference, the DNS name resolver doesn't pass an empty list of addresses:
I'm not sure if this is expected behavior and I know this is an experimental API, but wanted to report in case this wasn't the desired behavior.


5724
Does gRPC retry mechanism work and if so, where am I wrong?2

What version of gRPC are you using?
What did you expect to see?
I'm trying to figure out how to set up custom retry mechanism. After looking at A6-client-retries and searching through github/google I didn't find any real examples/explanations. So I think that I missed some notable thing.
So, I try to create a client connection with a retry mechanism. Like:
And client behavior doesn't change.
Could anybody get me an advice/example or move me in the right direction?


5729
NPE in DelayedClientTransport2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
No NullPointerException in DelayedClientTransport.java
We (Firestore) have had a few reports of a NPE within DelayedClientTransport.java. (firebase/firebase-android-sdk#428).
Looking at the stacktrace, it seems as though picker is null here:
Examining that function further, it seems as though picker is set here and here:
In the first case, there's a null check that protects it, but there isn't in the second case. Should there be?
(All links to the 1.16.1 tag, but the code looks effectively the same in master wrt this issue.)


5732
any options to show the detail of timeout?3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
solve problem
but found less than 1 millionseconds is cost in server side. would like to know if any optional configs to show the detail of timeout in client side, like which part cost most of the time?
or any other suggestion to solve this problem?
appreciate if any help.


5733
how to build Any Object ?  Any any = Any.newBuilder().build(); 3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
How to set value to any,
Is there some method like  any.put("k","v") ?


5737
Example Configuring Conscrypting on non Android3

What version of gRPC are you using?
What did you expect to see?
Some example where conscrypting is put to use. Other parts of documentation like are good compared to this. I am using example-tls as base but I not pretty sure where the line Security.insertProviderAt(Conscrypt.newProvider(), 1); goes and if there is anyother changes that are needed.
Is this enough if I add that Security.insertProviderAt(Conscrypt.newProvider(), 1); over there and just add the conscrypt gradle dependency? Is there something else I need to do?


5756
Service config does not support integers5

What version of gRPC are you using?
What did you expect to see?
From the A6 client retries proposal it looks fairly clear that e.g. maxAttempts should be an integer. It wouldn't really make sense for it to not be a whole number anyway.
In the ManagedChannelBuilder it's just not allowed.


5758
Make service config more explicit5

Currently when a service config is supplied, we do not know if things are configured correctly as we desired. Service configs are applied silently. This makes it hard to know what goes wrong when using a service config. For example, in #5724, a retry service config is supplied by user but does not correctly applied to the service since the service name in the config was wrong. User sees nothing but retry is not happening. Is it possible to give out some information about what's going on when there is a service config?


5761
How to enable TLS in android client6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Android client must send the client certificate along with the request.
Need some reference or code snippet on how to add TLS in grpc android.


5764
Avoid NameResolver.Listener deprecation for 1.216

There's still some possible changes for the Listener2 API. Let's not encourage people to move to it yet.


5777
Tracking Issue for Attributes.Builder#discard7

No description provided.


5782
JCenter not up-to-date8

Looking at https, I see:
all, api, auth, context, core, netty, netty-shaded, okhttp, protobuf-lite, protobuf-nano, protobuf, services, stub, testing, protoc-gen-grpc-java
Missing 1.21.0:
alts, android, benchmarks, bom, grpclb, interop-testing
I'm going to give it another day. If they don't show up I'll file yet another issue with JCenter.


5788
Using InternalMetadata class in Armeria8

Hi all.
As some of you may have seen, Armeria team mantains a Java implementation of gRPC that runs on top of the Armeria server framework, a generic HTTP/1+2 server framework built on Netty (made by our good friend @trustin himself :) )
We interface with protoc stubs by creating Call objects and starting them - after started, a Call goes through io.grpc business logic as normal in most cases with surprisingly few gotchas. The Call interface is a quite nice plugin point.
We have one major caveat though, no support for the Metadata class
While Armeria has its own methods for adding response trailers, we're finding more and more users would like to be able to use it so their existing gRPC business logic can run as-is on Armeria, and if possible I'd like to achieve that. It means I need to use InternalMetadata to be able to create and serialize Metadata.
Is it kosher for Armeria to use this class? I understand it is for "specifically supported transport packages" - if Armeria could be considered a specifically supported transport package, that would be great! But if it's not possible to have official support like that, if it's "at your own risk but should be ok" that'd be fine too. For context, the first version of our implementation used a lot of io.grpc.internal classes to try to minimize code duplication - that was naturally a nightmare to maintain and I'm hoping not to repeat my mistake ;)
Also, as an alternative or in addition, any thoughts on making Metadata an interface and letting implementations control the serialization themselves? If that happened, we wouldn't need to use InternalMetadata either.
Thanks!
References


5790
Tracking issue for ORCA related APIs9

OrcaPerRequestUtil and OrcaOobUtil are utility classes for client to access backend metrics for Open Request Cost Aggregation (ORCA). Design doc can be found in Envoy community.


5791
How to specify IP address using ServerBuilder9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The ServerBuilder only provides forPort() method to bind the server on a port, however, I want to specify the IP to listen instead of 0.0.0.0.  Is there an official way to do it? I googled but nothing useful found.


5792
Where is the source code of io.grpc.Server class located in the reposiory?9

Please answer these questions before submitting your issue.
What version of gRPC are you using? What did you expect to see?
I expect the source code of the class io.grpc.Server


5793
Could not find TLS ALPN provider; no working netty-tcnative, Conscrypt, or Jetty NPN/ALPN available9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
For those guys who meets similar issue on Raspberry Pi, the issue could be solved by updating JAVA version for 8 jdk to 8 sre.
I spent three days deploying a server service on my raspberry which will use Firestore API, and stuck by this issue by almost one day.


5794
java.util.ServiceConfigurationError: io.grpc.ManagedChannelProvider: Provider io.grpc.netty.NettyChannelProvider not found9

Using grpc 1.21.0.
I have a gRPC Java client that should connect to a gRPC server and make a simple request – which it does, successfully, in a unit test I wrote. However, when I package my jar and run it in a different environment outside of IntelliJ, I get this stack trace when I try to initialize the gRPC client:
I have two thoughts about what might be going on. First, my maven shading configuration may be wrong. I am not an expert on Java dependency management and could easily have made a mistake:
I decompiled the jarfile generated during the package phase, and it seems to indicate that the Netty stuff may be missing or misplaced. I expected to see see the class io.grpc.netty.NettyChannelProvider from my stack trace in the netty directory here:
screenshot of my decompiled jarfile
Second, the server logs indicate to me that Spigot is probably also using Netty, and it's possible that its Netty version is conflicting with the one in my project.
The applications using my project, which I do not own, run Spigot in their own Runtimes, so I declare this dependency in the provided scope.
Finally, here is my source code where I am initializing the gRPC client. I don't think this is causing the problem, but it can't hurt to check:
My question here is: what am I doing wrong and what else can I do to debug?


5804
Should rawConfig include policy name?0

#5397 assumed that rawConfig includes policy name, but the constructor


5805
what does "excessive buffering internally" mean in io.grpc.internal.StreamListener::onReady ?0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
There is a  concept of "Stream" in grpc ,but i can't understand some description on "Stream". When reading docs on io.grpc.internal.StreamListener , I saw words like "without requiring excessive buffering internally" . Is "excessive buffering" the same as memory?


5806
NettyServerHandler closes connection when first go_away is ackd regardless of starting stream0

Scenario:
Server has a connection max age and a grace period of 60 and 120 seconds
A client call/stream starts just as the max age (60 sec) is reached on the connection
The client receives the first go_away as he should
The client acks the go_away
The server as soon as it sees the go_away ack ping sends out the second go_away and closes the connection regardless of the grace period or pending streams
client closes its active stream and receives UNAVAILABLE error


5807
The Android Helloworld sample doesn't work on Android 90

What version of gRPC are you using?
I'm using the Android Helloworld sample, gRPC version 1.21.0
What did you expect to see?
The Hello world should work as it is for previous versions of Android, it works fine in Android 8.


5811
Log more information for xds load balancer1

No description provided.


5812
Add retry logic for XdsComms1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


5814
How to start servcie with different impl class1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I'm a rookie.Now,I have a DemoServer with lots of method.Those method could be classifid according to certain rules.
For Example


5815
TLS examples use cert and key naming inconsistent with the rest of gRPC codebase1

The examples here:
uses cert/key file extensions that are inconsistent with the rest of the codebase:
.crt is used for certificate and .pem is used for private key, but everywhere else in the code we're using pem for the certs and key for the private keys.
Examples from our codebase:


5819
Gradle plugin outputs different filenames on different linux distributions1

What version of gRPC are you using?
What did you expect to see
Project builds correctly on Arch and Debian.
Outputs build/distributions/JobServ.tar on Arch Linux and build/distributions/jobserv.tar on Debian.
(Notice the change from CamelCase to all lowercase)
This is not the end of the world, but an annoyance for anyone who needs to handle that tar as part of their build process.


5822
Way to implement a fail-over client (especially for bidistream call) 2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am implementing a fail-over client which switches to another channel if any error(e.g. deadline exceed) happens. This is fair straightforward to unary call. However,  it seems to impossible for bidistream call because when an error happens the Status returned has no clue to figure out which request fails.
I typically use ClientCall.Listener to capture errors and want to insert some metadata to mark requests, however, I am not sure if every grpc-server implemented by different languages would return the metadata sent by clients.
So is there any way to implement such a fail-over client?


5828
Update protobuf dependency to v3.8.02

Please answer these questions before submitting your issue.
The google-cloud-java generated clients are generated with a tool that uses protobuf v3.8.0, which contains bug fixes. Clients compiled with protoc v3.8.0 have changes that are not backwards-compatible with protobuf v3.7.1, namely the UnusedPrivateParameter.
It will be a similar story with other users who are pinned to the lastest protobuf version.
What version of gRPC are you using?
What did you expect to see?
Dependency on protobuf v3.8.0.


5831
Is there any possibility to add custom NameResolver.Listener to Channel?3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am trying to implement some offline-first functionality. And when device re-establishing network connection it takes some time for NameResolver to resolve a host for my previously built ManagedChannel.
Thus, I need to know when I'll be able to send gRPC calls without following failure:
io.grpc.StatusRuntimeException: UNAVAILABLE: Unable to resolve host %name%
I expect to see a possibility to add extra listener for NameResolver and postpone my calls to the point of time when NameResolver.Listener#onAddresses will be called.
Is there any in v1.20.0 or in the most recent?


5841
[Bazel] java_rpc_toolchain does not respect Java toolchain flags 4

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I build gRPC code with Bazel using Remote Build Execution (RBE) and I have to use a custom jdk8 toolchain [.bazelrc snippet]. Java toolchain flags don't seem propagated to the java_rpc_toolchain rule as it declares a fixed dependency on the default Java toolchain, which is jdk10 for Bazel v0.25.0. I believe this is the primary reason contributing to the following error returned by Bazel:
Unrecognized VM option 'CompactStrings'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
Please let me know if I can do anything else to enforce a custom Java toolchain for Bazel gRPC rules.


5847
Test failure: Java components in grpc_interop_alts4

All Java related test cases are failed.
Error parts:
Shutting down


5850
GRPC is giving Transport closed for unknown reason error when trying to build Tensorflow Image recognition using Grpc Client5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
GRPC v1.10.0
What did you expect to see?
I am building tensorflow image recognition model using grpc client as mentioned in https
I am running maven package, but it is giving error - Transport closed for unknown reason
I need to integrate this to kafka after making sure this is run.
Please let me know how to solve this issue.
Let me know what data is needed to solve this issue.


5854
How to determine whether a server is ok?5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I used the pick_first load balance when I create a etcd client with 3 entrypoints, when docker paused the etcd container which one was used by etcd client,grpc cannot detect the situation and change connection to the good one, I wander how do grpc determine whether the server is ok?which part is about this?I am a new bird and is hard for me to find out the related part.Thank you very much


5855
UNAVAILABLE: HTTP/2 error code: NO_ERROR Received Goawaysession_timed_out5

What version of gRPC are you using?
I have no idea, this is coming from Google Firebase.
What did you expect to see?
No error
This is the callstack:
This is my lines of code that triggered this
This is working most of the time, it happened only twice so far so maybe it's something temporary but I have no idea what it is and how to overcome this.
Please advice


5856
How to add a single retry for a specific scenario in interceptor?5

What version of gRPC are you using?
I am working on auth interceptor which responsible for auth tokens on every single call. Sometimes, when a token expired, I have to change auth metadata on the client side and make a retry for this call.
I have already implemented auth interceptor on start and not I'm trying to find out how to make recall when the interceptor found that token expired on onClose(..){..}
Could anybody give advice or other help with this issue?
Interceptor code:


5858
All internal APIs are shown in the javadoc (gh-pages)5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


5864
The plugin should add boilerplate configuration and not require the user to do it6

It is bad practice for Gradle codegen plugins to depend on the user to add new sourceSets. The plugin should do the following:
Also, the following seems to be boilerplate too. What does it do, and can the plugin do it as well?


5868
GRPC is giving Connection closed error when trying to build Tensorflow Image recognition using Grpc Client 6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I am building tensorflow image recognition model using grpc client as mentioned in https.
I am running maven package, but it is giving error - io.grpc.StatusRuntimeException: UNAVAILABLE, Connection refused: brazossrik01/9.3.67.64:9000
override a deprecated API.


5869
response.toString() returning empty String for a default responses6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
alive: false in my console
Instead I am getting a empty String when printing my response Object which only contains default values.
What did you try to do?
I am currently just playing around with gRPC to prepare myself for production use and found some strange behavior when trying to print my response objects.
I had this issue with a more complex message but it also happens with a minimal case.
Basically if you have a
and return it to the client with alive = false and try to print the response you just get a empty string. If you set alive = true it correctly writes down the value of the field in your console as:  alive: true
Note: Directly accessing the field still works. response.getAlive() returns false, so there is nothing wrong with the message itself, but with the toString() method.
This behavior does not only happen with boolean values but also if you return the first value of a enum, so I would assume with every default value?
Is it expected behavior to return an empty string for a default message or is this a bug?


5872
Benign exception messages are logged at level INFO7

What version of gRPC are you using?
What did you expect to see?
Benign errors (for example, due to connection resets) are not printed at INFO level.
Description
There are some exceptions that are not useful, spam the logs, and are downgraded to FINE level logs lines. This filtering is done via a static list of strings (QUIET_ERRORS) in NettyServerTransport.java.
An example exception message is Connection reset by peer.
Version 1.21.0 included a change to run with epoll on Linux systems, when available (#5581). This seems to have altered certain exception messages to be prefixed with more transport-level information, and the same exceptions are now making their way into the logs at level INFO.
For example, we now see the following, which was previously logged at TRACE:
This is presumably due to the syscall:read(..) failed: prefix causing the exceptions to not be excluded.


5874
Allow complete override of User-Agent Header on a per-RPC level from grpc client libraries7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
This is a followup from a discussion that was initiated on gitter grpc/grpc channel.
Currently, the grpc/java library reuses the User-Agent from the channel for each RPC
and discards User-Agent by treating it as a reserved header.
However, User-Agent is not a reserved header and this creates complications
when trying to write a proxy-like gRPC service for HTTP endpoints that care
about User-Agent for response customization.
Posting it here to get more ideas about how to resolve this.
quoting the conversation below:
What was the underlying reason for the restriction on not allowing User-Agent to be overridden on a per-call basis?  can't seem to find a spec which reserves the User-Agent string for gRPC/HTTP2 and yet there is code in place in the libraries (grpc-java/ grpc-go ..) to discard any user-supplied metadata regarding User-Agent and always use the channel's value eg:
@ejona86 we seem to have a use-case in which a per-RPC user-agent will make
things easier for us. The alternate is to use custom metadata fields to
preserve this information. that approach seems non-standard and we were hoping
to avoid it.  Will it be possible to include a per-RPC user-agent in gRPC? i
will be happy to code it up. but based on what i read in past issues, this
request was repeatedly turned down.
Eric Anderson @ejona86 Jun 04 14:44
That is a cross-language decision. You would need to make clear what the
use-case for it is.  Right now, it isn't clear what the use-case is.
Oh. I see now.
You want to communicate the origin client's user-agent to SVC-C
Yeah. That's not appropriate for user-agent.
Asad @asadali Jun 04 14:45
ack
Eric Anderson @ejona86 Jun 04 14:46
.... unless you are making something closer to a proxy. Maybe.  It sort of
seems like a can of worms. It just makes a mess of things.
But I think I understand now.
Asad @asadali Jun 04 14:48
so the intermediate gateways aren't pure proxies but maybe more like aggregators. in the non-GRPC world, the implementation made an assumption that
User-Agent is the originating client's user-agent. and all intermediate hops
honored that.  I agree, that this is a very loose reading of the spec. I feel
the more logical method is to update the user-agent on each hop
however, systems built around that assumption aren't happy when they lose this
info :( IMO, gRPC clients can default to per-channel behavior but the choice
should ultimately be left to the user if they want to override it
Eric Anderson @ejona86 Jun 04 14:51
Well, today the application can't set the entire user-agent. gRPC will always
include itself in the user-agent.  I'm trying to check what HTTP says to do for
user-agent and proxies.
Asad @asadali Jun 04 14:52
yeah i can use another opinion on this. and current gRPC behavior is what I am
trying to rationalize. does it need to always include its user-agent?
Eric Anderson @ejona86 Jun 04 17:31
@asadali, proxies do forward the user-agent. We do want to enable grpc proxies,
so that does mean we should forward the user-agent. Although on the server, any
compatibility quirks would generally be with the proxy, not the end-client. So
it still seems muddled, but it does seem we should consider it.


5881
Add dependency on grpc-core to the main README.md8

The "Download" section starts with a Maven pom file excerpt containing some dependencies. Note that grpc-netty-shaded doesn't include some classes that are available in grpc-core, for example, io.grpc.internal.AbstractServerImplBuilder. I suggest to add dependency on grpc-core to avoid confusion.
(I've spent quite some time trying to figure out why example-tls builds with Maven but my project doesn't... Turned out the difference is that my project uses netty-shaded.)


5882
Neither OnCancelHandler nor onComplete gets invoked after half-close8

What version of gRPC are you using?
After server sends completion event to the client, i.e., half-closes the call, client doesn't dispatch any other events (although request stream isn't closed/ completed).
In addition to that server OnCancelHandler doesn't get ever invoked, although client shuts down and closes connection.
What did you expect to see?
Servers OnCancelHandler must be invoked in either case, independently if call has been already half-closed or not and if connection has been forcibly shutdown or not. It should be possible to free-up resources like database connections in OnCancelHandler, but as off now it doesn't seem that there is a single place where we could do this.


5889
NPE while creating channel8

Please answer these questions before submitting your issue.
What version of gRPC are you using? -> 1.20.0
What did you expect to see?


5894
Unable to make GRPC call in 32bit Windows Machine9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
More Details
This code is working fine on a 64-bit windows machine, but throwing the below exeptions while running on a 32-bit machine.


5895
ServerCall.Listener.onComplete not exposed to async stub9

@TMilasius in #5882 was needing a point to free up resources. That is onComplete/onCancel in the ServerCall API. But we don't expose onComplete. We'll have to deal with naming collisions with StreamObserver itself, but we should expose a way to receive the onComplete notification, probably by providing a runnable in the same way as onCancel.


5907
Able to authenticate in my local machine and unable to do it in my VM0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Not to throw this exception.


5912
NoSuchMethodError: io.opencensus.tags.TagContextBuilder.putPropagating?1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
1.21.0 from maven repository
What did you expect to see?
I am trying to make a API server on Spring framework that communicates with my other grpc servers.The servers are made on python, and all work well with python clients.
However, when I try my Spring server, this happens.


5913
File import problem1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I follow the demo of the official document, but when I run the greetergrpc.java generated after compile-custom is executed, I see something below
I don't know what went wrong. Thank you


5916
Inconsistent error code conversion with gRPC cpp1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
The HTTP to gRPC status code conversion is not consistent between Java & C++ implementations.
As envoyproxy/envoy#4735 (comment) mentioned, gRPC C Core maps 429 to RESOURCE_EXHAUSTED but Java maps 429 to UNAVAILABLE.


5925
This ALPN config does not support HTTP/2.2

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Same behavior as with unshaded version.
When switching from 1.20.0 to 1.21.0 I get the error in the attached log.
The versions do match the ones in https and switching to netty-shaded does not fix the problem.
Although this run is from within IntelliJ running the jar directly results in the same error.
The used setup is nothing special:


5942
compiler:grpc_java_plugin no longer visible4

What version of gRPC are you using?
What did you expect to see?
Is there a particular motivation for marking it as non-public?


5944
Received unexpected EOS on DATA frame from server4

When response trailers are quite large (likely around 1MB of trailers) we receive an internal error from gRPC rather than the original trailers.
This is affecting Google Ads users - who are unable to debug their failed requests, see googleads/google-ads-java/issues/100.
The error is generated in Http2ClientStreamTransportState where it appears that the EOS flag is set while still receiving data.
Is it possible that this is a race condition where the server has already sent the response and closed the stream before the client finishes receiving the headers, data and trailers? I suppose that could happen if the response is sent in several packets, and Http2ClientStreamTransportState is running at the packet level, rather than message level?
What version of gRPC are you using?
v1.21.0
What did you expect to see?
Response trailers which contain a detailed failure message.


5956
Status CANCELLED under load5

What version of gRPC are you using?
Hi,
I have a service that communicates with upstream via reactive-grpc. It performs both unary calls and subscriptions.
Under high load, after request/subscriptions rate exceeds some threshold, the service starts receiving StatusRuntimeExceptions with status CANCELLED.
I performed some Wireshark investigations and discovered that the amount of time taken by the service to respond to http2 PING sent by the upstream gradually increases with the load. At the moment it exceeds keepalive timeout configured for the upstream, the upstream cancels the call.
Are there any ways to configure/examine the process of http2 ping-pong under grpc? What aspects of configuration may affect this process? What code is responsible for this processing? Where should I put a breakpoint? Any explanations, suggestions, and considerations are welcome.
I'm not sure what particular information about my configuration I should provide, but I will provide anything required.
Thank you!


5963
How to set up header in grpclb?6

What version of gRPC are you using?
What did you expect to see?
Use instructions for setting up custom headers in grpclb
I want to send grpclb server with custom header information, such as metadata containing x-server-name: ABC
Thank you for your help.


5964
UNIMPLEMENTED Error when trying to run kafka with tensorflow6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Latest version
What did you expect to see?
Seeing UNIMPLEMENTED Error when trying to run https java code .
Please suggest if there is problem in ClientCalls.java file.


5966
GRPC sometimes picks wrong Executor6

We are using GRPC for our Firestore Android SDK. Dependencies are:
We have some integration tests that set up two different RPC stubs:
ManagedChannel channel = initChannel(context, databaseInfo);
These GRPC stubs are independent of one-another and use a different channel with a executor.
Some of our operation verify that they run on the correct executor by looking at the thread ID, and this invariant often breaks in the GRPC callbacks when the Managed Channel is first set up. It seems like is picking up the wrong executor.
We have since fixed this by removing the call to channelBuilder.executor(...) and instead calling FirestoreGrpc.newStub(channel).withExecutor(...)
Is this the expected behavior? More details can be found in the discussion here: firebase/firebase-android-sdk#585


5968
async client stub: need to ignore unary response msg if status is not OK6

The future and blocking APIs wait until the close() before delivering any received message. If the status is an error they throw away the request.
We need to do the same for async stub. See also grpc/grpc#12824


5969
async server: need to ignore unary response msg if status is not OK6

The expectation for unary responses is that the server will respond with an message or an error. If the server responds with a message and an error, the message should be thrown away. The async API currently would send the message. For unary responses, we should delay sending the response until the onComplete()/onError(). If onError() is called we should not send the message.
See #5968 and grpc/grpc#12824


5978
ByteBuf.release() was not called before it's garbage-collected7

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
JVM version (e.g. java -version)
I got the above log by setting -Dio.netty.leakDetection.level=paranoid.
From the log it seems like NettyServerHandler does not correctly call release() on the ReferenceCounted objects it receives. But, I'm not explicitly using NettyServerHandler anywhere in the codebase. Though I'm using grpc and following are the classes which are being used:
Do you have any idea which of these might be using the NettyServerHandler?


5979
Scala: IndexOutOfBoundsException during sending response7

What version of gRPC are you using?
I'm using Scala 2.11.
I created protobuf file with the one rpc service and 2 messages: UserCluster and UserClusterResponse (the latter is a list of the former). Then I implemented this service (class ClusterGrpcHandler with method getCluster). This service correctly generate and return data, but this data can't be send to the client. The client got an error with code Unavailable and message transport is closing.
I tried to add as many debug messages to the my app as I could and got following logs:
and exactly after 4th line return statement from method getCluster is located.
I tried to debug this code and found that method getCluster correctly generate object which have to be sent to the client. Also I found that somewhere in the netty internals exception java.lang.IndexOutOfBoundsException with message readerIndex(0) + length(10) exceeds writerIndex(0): PooledUnsafeDirectByteBuf(ridx: 0, widx: 0, cap: 30) occures. Here is stacktrace of this expcetion:
Can someone help me to understand what can be wrong and how can I make my app to send correct response to the client?


5984
Failing plugin test8

Following these instructions, compilation succeeds, but when I run gradle test task, it fails with the following message:
How to fix it? Any help will be appreciated.


5985
OkHttp HPACK header compression is not fully implemented8

Disregarding Huffman encoding, upstream Okhttp's HPACK implementation does not fully implement HPACK compression. Especially for the writer, its implementation is very minimal, with very simplistic header field representations (for table lookup, Indexed Header Field Representation is completely not implemented, only for indexed name; no dynamic table is involved at all).
Okhttp3 has fully implemented this.


5986
enabling grpclb with alts can log channel and eventLoop mismatch warning8

With grpclb and alts, name resolver creates handshaker factory which only sets the eventloop type. this can spam log about eventLoop and channel type mismatch. This warning is legit but may confuse user.


5989
Fails generating proto service implementations in Kotlin gradle module8

I try to generate proto service implementation in java. I created a separate gradle module for using protobuf. Here's how it looks:


5990
Cannot use generated classes9

What version of gRPC are you using?
What did you expect to see?
I'm trying to generate and use classes from the example in the quickstart.
This is the proto file:
According to the instructions in the quickstart guide, after compiling the proto file I should have a GreeterGrpc. This is what I get instead:
According to the guide I should extend GreeterGrpc.GreeterImplBase, but none of the generated classes contains GreeterImplBase (or even simply the string "ImplBase").
Notes: I compiled the proto file with protoc 3.9.0. More precisely:


5995
Openensus method tags are always null9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
After sending an RPC I expected that metrics like roundtrip_latency can be grouped by client method. But it seems like it's always null. I think they are getting lost in the translation of method -> client_method


5997
Bidirection stream calls get exit with StatusRuntimeException also9

I am newie to gRPC and use the latest version (v1.22.1) to develop a POC about trying to push notice from server side in a multi-thread environment.
I build the server, Notice Server and the client Notice Client. The all corresponding maven project files are attached as below.
prototypegRPCJavaServer.zip
The business logic of Server and Client is very simple just like chatting room. The Client sends message to the Server via method chat and will get pushing message via notice method. The Client creates a sheduled pool to run two ManagedChennels in separate thread to get notice data and additional ManagedChannel for rest threads to send chatting messages.
However, one channel used for pushing data will raise exceptions and exit sooner or later. Following is the root cause.
Did I do anything wrong and where I should look into.
Thanks in advance,
Flik


5998
Error connect over TOR9

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Connecting successful over TOR
am trying to connect via GRPC to a server over TOR
Is it just a matter of using the onion address and port? I tried removing TLS but no luck I get an "UNAVAILABLE" error
any ideas? I am using ORBOT SOCKS Proxy running on the android device


5999
Tracking issue for GracefulSwitchLoadBalancer being experimental9

No description provided.


6000
Using GrpcCleanupRule leads to java.lang.NoSuchMethodError (thrown by  io.grpc.NameResolver$Factory.newNameResolver() ) when class extending ...ImplBase takes an Interface constructor parameter0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
I did not expect my unit tests to throw
java.lang.NoSuchMethodError from inside io.grpc.NameResolver$Factory.newNameResolver(...)
Here is a repo with instructions on how to reproduce the issue:


6001
Extension file 'java_grpc_library.bzl' has errors0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
I don't know but I am using Bazel version 0.27.2
What did you expect to see?
I am trying to install ONOS following the Developer Guide. The site says install Bazel first, and I did install Bazel first - version 0.27.2. Then, I installed Java version 201 manually because of the new licence issues. Finally, I cloned the git repository for ONOS version 2.1 and tried to build it using "$ bazel build onos" command. As it was trying to install the software, the process was interrupted with the final message:
I tried to install different versions of jdk and onos but it did not help. I do not understand why I am getting this problem. Can someone help?


6002
SharedResourceHolder should roughly handle exceptions during close0

If we look in SharedResourceHolder, if resource.close(instance) fails throws instances.remove(resource) is not run. While we shouldn't encourage exceptions to be thrown during close, we would like it to be able to recover eventually. In this case, any future resource fetches will get the partially-closed resource, which will immediately fail.
@xCASx, a workaround would be to keep the client objects alive for as long as possible. We generally encourage that for performance, but as long as one client object is alive we won't attempt to shut down this executor.


6003
No such method error "io.netty.internal.tcnative.SSLContext" 0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Working GRPC java ssl connection but getting below error when trying to establish GRPC SSL connection using netty-tcnative: (Sometimes the connection works, sometimes it fails)


6008
Unable to upgrade to protobuf 3.9.00

In this PR, I am trying to upgrade to the latest Protobuf.  However, Bazel cannot build gRPC due to a dependency apparently missing from Proto:
It appears the root cause of this is protocolbuffers/protobuf@f313b9c  which attempts to avoid using bind().   The alternative, if not native.existing_rule("zlib"), has documentation that warns:
Note: If possible, avoid using this function. It makes BUILD files brittle and order-dependent.
I believe there is some ordering mismatch between when the zlib rule is defined and used.   Attempting to move the bind() call up in the gRPC repositories.bzl file causes other failures, so it isn't clear what needs to change to fix this.


6009
SslContext creation failed0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Created sample application to run grpc server in SSL mode.


6010
Differences between setting Metadata to Channel and using CallCredentials in stub1

on the title
I wonder what differences are between them.
It looks working in same way, is there any expected benefit using stub.withCallCredentials instead of setting Metadata to stub?


6011
Transport failed with go grpc client1

What version of gRPC are you using?
I'm running the helloworld example of grpc-java, but request with a go client.
The request is successful in go client, but the grpc-java server throw an transport failed error.


6012
Tracking issue for CallMetricRecorder being experimental1

No description provided.


6015
Image or File Streaming  using gRpc1

Hi ,
Now i am try to upload java grpc using image or file upload..But didn't know the concepts and lot of search the tutorials ..Can you explain that concept.pls


6016
xds:investigate io.envoyproxy.protoc-gen-validate:pgv-java-stub1

It looks like protoc-gen-validate has pre-generated code available on maven central at io.envoyproxy.protoc-gen-validate:pgv-java-stub. It includes the .proto file so it "just works" as expected as an implementation dependency. Using it would avoid us needing to run the codegen ourselves and avoid shading.


6020
StatusRuntimeException: INTERNAL: Panic! This is a bug!2

When running this test against grpc 1.22.1, an exception because of an internal bug is raised
What version of gRPC are you using?
What did you expect to see?


6021
Tracking issue for OrcaMetricReportingServerInterceptor being experimental2

No description provided.


6023
Protoc compiler plugin is being created with .exe suffix for all systems2

Only windows binaries should have .exe, but all platforms have it. This is annoying because you have to change the file type manually.


6029
Error using Java 11/122

Please answer these questions before submitting your issue.
What version of gRPC are you using? 1.21.0
What did you expect to see?
I have the following code in order to use the PubSub Emulator:
When I run it in IntelliJ, it works fine. However, when I build a fat jar with sbt-assembly and run it, I get this exception:
I checked when running in IntelliJ, and it also uses the NettyChannelProvider as the ManangedChannelBuilder's provider.
So what would be happening differently when running in a release jar?


6030
Tracking issue for Deadline.Ticker and related APIs3

No description provided.


6032
when create multi client for difference server, throw such exception java.lang.RuntimeException: ManagedChannel allocation site3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
version: 1.21.0
What did you expect to see?
How to maintain multi client in our service,


6035
Using netty-tcnative with openssl-fips.  How can I verify that grpc is running with fips enabled?3

I am running grpc-netty-1.18 with netty-tcnative 2.0.20 on CentOS Linux release 7.6.1810.  This is all in a docker.  I need to verify that its running in FIPS mode.
I've gone and built the dynamic netty-tcnative with OpenSSL 1.0.2-fips, and I do see it reporting  that it using the expected version in the logs.
For reference these are the jars being used:
I see APR logs stating that fips mode was successfully entered.
Everything seems to work as intended and I dont see any errors, but I also dont see any way to get info on whether grpc is running with FIPS mode
On load I see log output about a bunch of cipher suite mappings, default cipher suites, and supported protocols.  I know some of the loaded cipher suites are not fips compliant, but Im not sure if that log output would be different with fips enabled or not.
I've tried passing  io.netty.internal.tcnative.SSL.fipsModeSet(1) but I dont see any difference in the log output.
Is there some conclusive way determine whether grpc is running in a fips compliant mode?


6036
DNSNameResolver ignore targetURL.3

What version of gRPC are you using?
What did you expect to see?
The authority part of the target URL passed from client is used to form part of the DNS host and port when it looks up the SRV and TXT records.
Here is the start:
From this point onward the authority obtained from the targetUri passed to this constructor is lost. Therefore if we want to use an alternative DNS server from the default one, the current code doesn't work.
In the code where it looks up the SRV record:
Given that "grpclbHostname" is the service name passed from the client with prefix _grpclb._tcp. there is no way I can use a different DNS server other than the underlying one for the host where the code is executed.
For example, this is what I want to be able to do:
Even though I have the SRV record for _grpclb._tcp.helloworld.testdomain.com defined in "dnshost:dnsport", the code fails to find it.


6037
none

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


6040
CallMetricRecorder is not test-friendly4

Currently only InternalCallMetricRecorder can create CallMetricRecorders. If an service implementation records metrics and wants to test that behavior, it cannot do so unless it uses the internal class.


6041
Non-systematic StatusRuntimeException with error code INTERNAL_ERROR with alpakka akka streams googlepub/sub connector.4

Issue itself
I'm using alpakka pub/sub connector, it use gRPC library inside. Some times publishing fails insde grpc library with strange stacktrace:
Restarting graph due to failure. stack_trace:
As alpakka developers say(akka/alpakka#1854 (comment)), they are users of grpc, and issue located insde grpc because it is internal (protocol level).
This thing fails with ~10-15 mps publishing total for 6 publishers with parallelism level of 10 for each. Issue occurs "sometimes", after some period of ordinary function.
Same thing I have with subscribers - they just fail after ~ 30 minutes of work.
The thing I wanted to see is an abscence of such unclear exceptions and normal function.
What version of gRPC are you using?
1.21.0 which comes with alpakka
Versions used
Code which probably will reproduce the issue:
It is in scala as I can't write java code at all. It runs for ~ 30-35 k entries and then subscriber just stops. Tested at live pub/sub topic/subscription.


6043
Tracking issue for stabilizing AndroidChannelBuilder 4

We are considering stabilizing AndroidChannelBuilder APIs. Here are some potential changes:
Deprecated methods scheduledExecutorService(), sslSocketFactory() and transportExecutor() will be removed. Users should configure the delegated ManagedChannelBuilder directly.
fromBuilder() will be renamed to usingBuilder(), which gives a clearer implication that original builder could still be used/changed.
Implicitly, Android connectivity management (see #4056) will be stabilized.


6045
Delete GrpcUtil.IS_RESTRICTED_APPENGINE4

IS_RESTRICTED_APPENGINE was for GAE Java 7. That doesn't exist any more, so these code paths are dead code. We should delete IS_RESTRICTED_APPENGINE and assume it is always false.


6050
Minimalistic gRPC Client/Server application (maven based)5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Something I've been struggling for days, because of the outdated tutorials or non-maven based project examples, there is not enough talent pool on gRPC java either, so I've created a minimalist maven based client/server based project with a single class file in each to convey the problems.
Please download project from https:
Server runs fine -> Run Server:  java -jar Server/target/Server-1.0-SNAPSHOT.jar
Once the above error gets fixed, the Client will throw an error while compiling because of some dependencies errors, I'd highly appreciate for getting it to work, I've spent two days struggling with this.
The objective is that jar file for client or server is independently deploy-able.


6053
Does gRPC Testing support JUnit5?5

What version of gRPC are you using?
Does gRPC Testing support JUnit5?


6067
Need to know how NettyServerBuilder allocates memory to the buffer6

Question copied from grpc/grpc#19887
If i increase the inbound max message size at server side to be 1GB by NettyServerBuilder, how will the memory be allocated to buffer?
Will complete 1GB be allocated to the messaging buffer or will it be lazy allocation meaning only that only that much memory will be allocated , that is needed by object.
For example : If i set NettyServerBuilder.maxMessageSize(MAX_MESSAGE_SIZE), where MAX_MESSAGE_SIZE = 1GB
Then if client sends 500 MB object , will complete 1GB memory will be allocated or simply 500 MB memory will be allocated to the buffer ?


6074
Convert Alts to use new protocol Negotiator style7

TsiHandshakeHandler needs to extend ProtocolNegotiationHandler
AltsProtocolNegotiator needs to be modified to work for both clients and servers.


6075
Should Deadline implement equals()/hashCode()?7

Seems reasonable that these should implement equals() and hashCode(), no?


6080
Tracking issue for ClientCallTracer APIs being experimental8

Introducing ClientCallTracer class, which extends ClientStreamTracer.Factory for tracing client side RPC events, with an addition of exposing tracer component properties via Attributes.
Client side tracer implementers would provide same tracing logic as using ClientStreamTracer.Factory, with a plus of ClientCallTracer#getTracerAttributes(Attributes.Builder) to put properties being exposed externally.
New API ClientCall#getTracerAttributes() bridges the access to tracer properties on ClientCall and on ClientCallTracer.
Why existing ClientStreamTracer.Factory is not enough?
The problem came up with external users/frameworks wishing to access tracer specific properties (e.g., SpanId or TracerId created by Census when CensusTracingModule is applied). Putting tracer properties in CallOptions and propagating through ClientInterceptor#interceptCall(...) only makes tracer properties accessible in interceptor applying time, it does not tie tracer properties to the ClientCall instance. External frameworks/users are not able to access tracer properties unless installing a ClientInterceptor that runs strictly after the tracer installing interceptor. This raises two problems:
Relying on a certain order of interceptors is problematic, which makes special cases for particular interceptors. It is hard to maintain the ordering of different interceptors as there are many places registering interceptors (in-channel, wrapping channel, global interceptors).
Currently, interceptors for Census modules run last to avoid ClientStreamTracer.Factory being overwritten in CallOptions. So no other interceptors are able to access tracer specific properties.


6082
Deadline silently overflows at ~292 years8

Inside of Deadline's constructor, there's this snippet of code:
deadlineNanos = baseInstant + offset;
A long of nanoseconds overflows after ~292 years, so for all intents and purposes, it's probably OK, but it still might be worth checking that an overflow didn't occur (either using a library like Guava's LongMath.checkedAdd(long, long) or Java8+'s Math.addExact(long, long), or even just making sure the result isn't negative.


6092
Unary call can hang forever if uncaught exeception thrown in client interceptor9

What version of gRPC are you using?
v1.2.0, but reproduced with v1.23.0
What did you expect to see?
If a buggy interceptor throws in onClose, gRPC logs the error, but doesn't cancel the call. This can lead to a client hanging forever. Interceptor implementations should take care not to throw, but we think gRPC could also guard against this. A deadline doesn't help, because the deadline future is cleaned up before calling the client observer's onClose method.
For instance, ClientCallImpl#closeObserver could catch runtime exceptions and cancel the call.


6094
grpc-java v1.23.0 should use which version netty-transport-native-epoll ?9

What version of gRPC are you using?
What did you expect to see?
For HTTP2 DoS vulnerability, should I use netty-transport-native-epoll  v4.1.39 or v4.1.38( The grpc-java v1.23.0 use v4.1.38 netty) ?


6095
INTERNAL: Received unexpected EOS on DATA frame from server (Android)9

When doing a blocking call from a java/kotlin client I am getting the following error:
When doing a non-blocking async call the onNext is called correctly, and the response proto is succesfully sent. Yet after this the same error occurs and onCompleted is not executed. When I do a stack trace on the exception I see the following result:
Wrapping the Service on the server with try-catch blocks does not show any exceptions on the server. If necessary I can post the code of the server Service and the client calls.
What version of gRPC are you using?
No errors or more detailed error information.



6101
cpu running into full load,Possibly infinite loop0

Problem representation :#2832
What JVM are you using (java -version)?
netty version


6105
NPE in com.google.auth.oauth2.JwtCredentials$Builder.setPrivateKeyId(JwtCredentials.java:223) due to a mistake in io.grpc.auth.GoogleAuthLibraryCallCredentials0

Hi All,
I run an application that uses java clients libraries for pubsub, stackdriver logging, stackdriver tracing.
Everything works ok, if the application uses only pubsub or stackdriver logging & tracing, but if it uses all of them then I got a NPE.
I debugged the application and it seems like I found the root cause.
There is the following  class:
The stacktrace of the issue:


6108
While grpc server occurred request parsing error, server application layer was not noticed0

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
While grpc server occurred request parsing error (pb incompatible normally), application layer was not notified, gprc framework just close current stream and then send a SendResponseHeadersCommand frame but not a cancelStream frame. Can anyone answer the two questions above? thx


6112
Netty server terminated - k8s readiness probe using gprc-health-probe1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
A successful test by GRPC-health-probe on a k8s readiness probe.
A java grpc service when queried by a k8s readiness probe with a grpc-health-probe gives a netty exception netty server gives a io.grpc.netty.shaded.io.grpc.netty.NettyServerTransport notifyTerminated. The same service runs fine when used with outside k8s with docker
Minikube 1.2.0 k8s 1.15
Works fine with Go GRPC in k8s but with Java GRPC this error occurs.


6114
PubSub no route to host / network unreachable1

What version of gRPC are you using?
What did you expect to see?
Working PubSub connection
Since last week my service can no longer connect to PubSub this is happening both on my local environment as well as from GKE.
In GKE I am getting the following error:


6115
java.lang.UnsatisfiedLinkError: no io_grpc_netty_shaded_netty_tcnative_osx_x86_64 in java.library.path1

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


6118
Netty client channel with TLS over proxy does not establish a connection anymore in 1.22.0 and 1.23.01

A netty grpc channel never establishes a TLS connection to a valid grpc server when using a HTTP proxy. The problem is reproducible in versions 1.23.0 and 1.22.0 but not in 1.21.0 and earlier.
The proxy is configured on the JVM with -Dhttps.proxyHost/-Dhttps.proxyPort.
The channel does send http CONNECT with the correct destination to the configured proxy but after the proxy responds with HTTP/1.1 200, instead of starting with the TLS connection the channel simply hangs and does not send any further traffic to the proxy.
The issue is caused by changes in io.grpc.netty.ProtocolNegotiators. Replacing this file in 1.23.0 with the one from 1.21.0 (with some minor compile fixes) restores the functionality.


6119
Upgrade to okhttp3  Issue #611

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Indeed a lot of android apps now use okhttp3 to make http requests. But if an android app also uses grpc, it must still embed okhttp 2.5.0 library.
Kind regards,
Laurent


6129
GoogleAuthLibraryCallCredentialsTest is flaky2




6133
com.google.errorprone:error_prone_annotations:pom:2.3.3-SNAPSHOT3

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?


6138
Tracking issue for io.grpc.EquivalentAddressGroup.ATTR_AUTHORITY_OVERRIDE being experimental3

No description provided.


6139
Java gRPC bi-streaming delay on receiving message at client3

I'm trying implement RouteGuide Java example. https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/routeguide
I modify Server to response a message immediately after receive a message from client.
But client seem to be can't receive message from Server before requestObserver.onCompleted() was call from client side.
At first time server and first time client run: All message reply from server show up right requestObserver.onCompleted() was call.
At second time client run (server still running): Client receive message from Server after send two message.
Running log:
At First time server and first time client
What happen with my code?
How can I make client receive message immediately after server response?


6144
Trace context propagation using non-gRPC headers4

Currently, gRPC uses the grpc-trace-bin header for context propagation across process boundaries. This works perfectly for an environment in which all services are using gRPC for service-to-service communication. In the case of a more "polyglot transport protocol" environment, preserving the trace context becomes a little more involved.
To give some more specific context / motivation for the problem at hand, we have inbound HTTP requests that are subsequently proxied by an "API gateway"-like service over gRPC to respective backends. All other downstream traffic is gRPC. We're running this in a "mesh" setup, with Envoy running as a proxy alongside each container.
Envoy is configured (via Isito) to look for B3 headers, and will correctly do the context propagation, for HTTP. It doesn't know about grpc-trace-bin and thus can't participate in these traces. Instead it will emit its own B3-flavored trace for the particular hop, and we end up with incomplete traces - one set for the client / server gRPC spans, and another for just the proxy hops.
I'd like to propose / seek feedback on the idea of making the wire transport for tracing configurable / pluggable. I'm coming at this from the perspective that gRPC's trace propagation is tightly coupled to a gRPC-specfic format and it doesn't really make sense (at least to me) to teach an HTTP server / proxy how to handle gRPC's internal format.
Maybe I'm missing some background. I did a quick look in the issues for this repo but didn't see anything obvious. Looks like something similar has been brought up in the Go community, via census-instrumentation/opencensus-go#666, and census-instrumentation/opencensus-specs#136 (closed out).
If this is better for a list, happy to post there too, jlmk where to ask.
Basic idea of the change - Open Census has the concept of Binary and TextFormat "setters" and "getters" to do the propagation. We replaced the grpc-trace-bin propagation header with the full set of B3 headers (no reason this couldn't be the single B3 header).
I've proven this out internally with some light forking of the code to make a new tracing module that does the B3 propagation. The following code is an example, isn't production ready, etc. etc.
We're not actually forking gRPC for this, rather we're making a new tracing module that has the above changes, which we then install into client / server pipelines:
InternalNettyServerBuilder.setTracingEnabled(serverBuilder, false);
With these code changes, we get full end-to-end tracing with all clients, servers and sidecar Envoys adding their spans.


6146
Android kokoro build is very flaky4

Android kokoro build became very flaky after #6103


6150
Question: Fastest unix socket setup for single-request server5

What version of gRPC are you using?
I need to run a server that will respond as fast as possible for a future request. This server's only purpose is to serve this single request and die, so I don't care about multiple requests or high load.
Currently what I'm doing is:
Can I change something in this server/ELG setup to make it act faster?
I'm using directExecutor as I guess it should be faster that starting a thread for the request.
Not sure about the 1 thread ELG though.
Please remember I only need to serve 1 request as fast as possible. I will never receive more requests after this request.
Thanks a lot


6153
Add copy method to NameResolverRegistry5

What version of gRPC are you using?
The problem
2 applications in the same JVM (tomcat) define a custom ´SelfNameResolverProviderthat maps the client nameself` to
the own application. If both applications add it to the registry then the second one will mistakenly connect to the first application.
Possible Workaround
Create new (empty) registries and populate them with "well-known" NameResolverProviders.
Drawback: All providers must be known at compile time and any later additions won't be picked up from the classpath.
Suggested fix/improvement
Add a copy(), clone() or initializeDefaults() method to the registry that allows creating safe copies/independent instances of the registry that still contains the default/expected providers.


6157
[Question] big gap before and after execution of implemented service logic5

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
We are trying to implement a high-throughput low latency service, when increasing throughput, noticed increased amount of traffic has gaps before and/or after the execution of implemented logic, as shown in the screenshot below:
Here is grpc server side configs:
Wondering if anyone has insights about what those gaps are? or what the executor is waiting for?


6160
Question: prevent auto-cancellation6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
When RPC finish a second RPC using a Future stub with a forked Context should not cascade cancellation.
We have a use-case where we want to fire and forget an additional RPC when the first RPC finish. I have tried to reproduce that here: ContextResource.java#L62. What we see is the second RPC will be cancelled with  io.grpc.StatusRuntimeException: CANCELLED: io.grpc.Context was cancelled without error.
Replacing fireAndForgetWithListenableFuture with fireAndForget has the expected behaviour of preventing the cascading cancellation.
What would the "correct" way of using a forked Context with a future stub be? I tried to find an example but came up short.


6161
helloworld example client tests misleading6

HelloWorldClientTest.kt uses a mock for serviceImpl. However, it never defines the SayHello RPC method. This causes the RPC in greet_messageDeliveredToServer to fail with Unimplemented. However, this doesn't fail the test because HelloWorldClient catches the exception and logs it.
Standard error for io.grpc.examples.helloworld.HelloWorldClientTest:
It appears this is the same flow of HelloWorldClientTest.java. Both of them should be fixed to provide a fake implementation for sayHello. That should not be done via the mocking framework, but via the instance passed to delegatesTo.


6162
Uncaught exceptions in server6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
What did you expect to see?
Error response after uncaught exception
Refer to the following file/line number:
You can see that Exception types that are not subclasses of Error or RuntimeException (known as "checked exceptions") are not caught here.
Uncaught exceptions result in no response being sent to the client (but the connection remains open) and thus, from the clients perspective, the RPC call hangs indefinitely.
All exceptions should be caught here, not just runtime exceptions and errors.
"Checked" exceptions can be thrown from code that does not declare it in the signature by several means. One example is here:
Another example is from any kotlin code that calls a java function that throws a checked exception.
NOTE: it looks like the same problem exists in multiple places in this file. The line number I linked is the specific one that I hit in the wild.


6164
Question fro ManagedChannelImpl.getNameResolver 6

I guess this is a bug  in ManagedChannelImpl.getNameResolver ?
this target should be set in host other than path?


6166
Long running request got cancelled when sending a message from server6

What version of gRPC are you using?
From Maven:
Client (C#)
From nuget:
What did you do?
We implemented a service that receives a request from a gRPC client and then waits for a condition to trigger which can take up to several hours. When this condition is finally triggered, the gRPC server sends a message to the client and completes the connection.
The server uses keep alive heartbeating with a keepalive time of 30sec.
Now the problem is that when the server finally reached the condition and wants to send a message, we catch the following exception:
The client uses the async API without setting a deadline or headers, without using a CancellationToken and without Context Propagation.
What did you expect to see?
As we can see that the heartbeats are working fine, our expectation is that the server can send messages using the streamObserver and the call us not CANCELLED.
We were able to reproduce this issue and to create a network capture (I removed the heartbeats):
The RST_STREAM message has Error code CANCEL(8).


6167
tracking issue to backport proxy handler fix (#6159)6

when the #6159 is verified, backport to 1.22, 1.23 and 1.24


6168
Guava 26-android conflicts with runtime dependencies 6

Please answer these questions before submitting your issue.
What version of gRPC are you using?
Java 11.0.3
What did you expect to see?
I do not expect to see java.lang.NoSuchFieldError: JAVA_LOWER_CASE which is part of the CharSet object from guava JRE.
The guava 26-android version conflicts with my current runtime environment since it does not have the field above. I have guava 23 JRE in my runtime that needs to be supported. Gradle automatically picks the higher version number to load during runtime. I am able to easily override the guava version used for my project by specifying
compile ('com.google.guava:guava:23.0') { force = true }
However, every upstream client that depends on my library needs to force their guava up the chain (we all use lower versions).
Does anyone know of a way that I can forcefully set the guava version for my library while maintaining the versions as well for upstream consumers of my library? I hate to tell everyone using my library to add { force = true } to their guava dependency.
I don't need android support, so if there is away to drop android guava completely and replace it with the jre version of guava, that could be an acceptable solution.


6174
How does IOS call the GRPC server based on NettyServerBuilder7

How does IOS call the GRPC server based on NettyServerBuilder? thanks


6193
C# client call java server Exception:Transport failed9

Please answer these questions before submitting your issue.
copy helloworld.proto to C# project.
What version of gRPC are you using?
use java example run grpc server.
use java client  call java server  is right.
but C# client call java server is error.
What did you expect to see?


6195
Remove "safe" checkbox from android-interop-testing9

#6192 disabled GET on the channels, such that MethodDescriptor by itself does not enable. Since GET is half-baked at this point and not making progress, it is probably best to remove the "safe" checkbox and the interceptor that sets safe to true. That is trivial code and can be added back again if/when GET work resumes.


6202
INTERNAL: Protocol error Rst Stream when communicating with .NET Core 3 server.0

I have compiled a repo with the issue in a reproducible manner :
I have basically download the "Greeter" example from dotnet and java  repos and tried to make them work together. Since we are trying to migrate our services to .NET Core 3.0;
Someone reported the same issue on stackoverflow for Kotlin
I have tried the same .NET Core 3 server with Python, .NET and BloomRPC client and it worked flawlessly, which is why I post the issue here.
What version of gRPC are you using?
What operating system (Linux, Windows,...) and version?
I am running on Windows, using Docker in a Linux container.
What did you expect to see?
I expected to see a response containing "Hello whatever message I sent initially".
What did you see instead?
Steps to reproduce the bug
I have described it completely here.
I have also attached a log from the package sniffer on the client here.


6204
API to add constraints on SSL for key size0

Is your feature request related to a problem? Please describe.
I have a gRPC server which is using mutual TLS and I want to reject connections from clients who have a public key size less than 2048 bits.
Describe the solution you'd like
There should be an API in the SslContextBuilder class to set SSL key size related constraints
Describe alternatives you've considered
I was able to achieve the same using a ServerInterceptor by doing something like this
This is a bad way to do it because
The validation is being done after the connection is already
established.
The validation is only triggered when a request/call is made.
Every single call involves an extra overhead of validation.
In case of a validation failure, only the call is rejected but not the connection to the client.
In an ideal scenario
The validation is done during the connection establishment phase. (or some point during the creation of the channel between client and server)
The validation failure would prevent the connection from being created and not set it up and disconnect later.
A client is only validated once per session and all the calls made during that session do not incur any overhead.


6209
how can I know the channel is inactive in the grpc server.0

Hi
I'm here for the help of grpc usage.
When I working on grpc netty server in java. Do I have a way to know if the netty channel between client and server is inactive?
The scenario is that I want to clean some resources (for instance, the TCP connection between my service and database etc.) if the server side detects the channel in between is inactive.
The code below describes how I created the grpc service:
Basically what I found in the source code is:
However, it only handles the situation when (e.g.) the client shuts down abruptly while doing the request to the server. **What I really needs is our server is able to detect the channel's inactivity in-between anytime rather than the only or limited scenarios like above. **
If there is any feature or method I can use fitting for my need?
Thanks!


6210
Add interop unit test for LookasideChannelLb with XdsClient1

No description provided.


6213
ALTS should use Conscrypt when available1

Something like this would work:
Although it would be better to create the Conscrypt provider with reflection, so that Conscrypt is not a required dependency. There are platforms where Conscrypt is unsupported and making a fat jar with it does require extra configuration. I'm unsure whether we should add a dependency on Conscrypt or let the "user" do so (even if that is gax-java).


6216
Wrong dependency details in https1

Wrong dependency details in https
Issues :


6217
Trouble adding Google Services library on Android project with gRPC library1

I was trying to add Firebase Analytics into my Android project with gRPC library, in which Google Services library is also to be added.
By simply setting up the app from the Firebase console, upon syncing I have gotten the following error:
In project 'app' a resolved Google Play services library dependency depends on another at an exact version (e.g. "[2.3.2
,2.3.3]", but isn't being resolved to that version. Behavior exhibited by the library will be unknown.
For extended debugging info execute Gradle from the command line with ./gradlew --info :app:assembleDebug to see the dep
endency paths to the artifact. This error message came from the google-services Gradle plugin, report issues at https://
github.com/google/play-services-plugins and disable by adding "googleServices { disableVersionCheck = false }" to your b
uild.gradle file.
I am using gRPC version 1.22.1.
Downgrading to 1.21.1 results in no such errors showing up again, but it is more of a workaround than a solution.
The problem occurs from 1.22.0 onwards to the latest version.
My hunch on why this happens is because of version disparity at errorprone at line 34 and line 188.
Set up a Firebase project, add Android app, and follow instructions (down the line the google-services.json and dependencies at the gradle files are being added)
Dependency failing: io.perfmark:perfmark-api:0.16.0 -> com.google.errorprone:error_prone_annotations@[2.3.2,2.3.3], but
error_prone_annotations version was 2.3.2.
The following dependencies are project dependencies that are direct or have transitive dependencies that lead to the art
ifact with the issue.
For extended debugging info execute Gradle from the command line with ./gradlew --info :app:assembleDebug to see the dep
endency paths to the artifact. This error message came from the google-services Gradle plugin, report issues at https://
github.com/google/play-services-plugins and disable by adding "googleServices { disableVersionCheck = false }" to your b
uild.gradle file.


6218
netty-tcnative-boringssl-static version compatibility with 1.24.01

Hello,
I'm curious as to what would be the continuation of the compatibility matrix exposed in this section: https
Thanks,


6219
grpc-bom to specify type:pom for protoc-gen-grpc-java1

Is your feature request related to a problem? Please describe.
When our tool (cloud-opensource-java dashboard) tries to read grpc-bom to check the compatibility of Google Java libraries, it fails because our tool tries to download a "JAR" file for protoc-gen-grpc-java (which has type:pom).  GoogleCloudPlatform/cloud-opensource-java#943
While io.grpc:protoc-gen-grpc-java:1.24.0 properly declares type:pom, grpc-bom contains:
From gRPC BOM reader's perspective, I cannot tell the packaging as pom.
Describe the solution you'd like
I want grpc-bom to declare "type: pom" for protoc-gen-grpc-java. I guess the change would be at https
Describe alternatives you've considered
Alternatively, I can implement special case for protoc-gen-grpc-java in our tool. But declaring the packaging in the BOM properly would make more sense.
Additional context
Add any other context about the feature request here.


6235
Mutual TLS with client hostname validation3

I've found a lot of information online about hostname validation on the client side, but is there a way for the server to verify the client's hostname when using mutual TLS? I'm currently building my server with something like:


6236
Support for introducing custom tags to metrics3

Is your feature request related to a problem? Please describe.
@mackenziestarr mentioned on Gitter:
I'm using the prometheus exporter and the grpc latency metrics look like this grpc_io_client_roundtrip_latency_cumulative_bucket{method="google.bigtable.v2.Bigtable/ReadRows"} but i would like to add an additional tag to achieve something like grpc_io_client_roundtrip_latency_cumulative_bucket{method="google.bigtable.v2.Bigtable/ReadRows", table="my-bigtable-table"}
Describe the solution you'd like
Be able to access the opencensus contexts defined in the CensusStatsModule — pretty similar to this github issue census-instrumentation/opencensus-specs#142 which suggests maybe it is possible in grpc-java
It is fine to add the tag manually in the application; google-cloud-java doesn't need to do this automatically at present.
Describe alternatives you've considered
Re-implement latency stats


6243
backport #6220 (bom specifies protoc type)4

backport to 1.22 1.23. and 1.24


6252
Method type specific MethodDescriptor wrapper5

Is your feature request related to a problem? Please describe.
It would be great if MethodDescriptors would be wrapped in method type specific class/interface, similar to RequestMethods. It would enable gRPC tooling to know what type of method it is at compile type, so it would be possible to return appropriate action interfaces based on the method type (does method have single/multiple request/responses). This would help to reduce the tools API verbosity and a bit of complexity.
Describe alternatives you've considered
Current approach is to have differently named methods (unaryMethod(), serverStreamingMethod(), ...) and check if appropriate method type is passed at runtime.
Additional context
I'm trying to create a gRPC method mocking tool for easier testing - gRPCMock. This feature would help determining what type of stub needs to be returned and have single name method for all types.


6259
file transfer using grpc stream5

Hi,
I'm currently sending file from server to client using grpc. This files could have a size of few kilobytes to 50megabytes.
Below my proto example:
So i use stream to get my file ....
As explained in this tutorial and official tutorial etc, we should use async stub in client side in order to get chunk that are sent by server.
My first question is how to wait properly as this call is async ?
Then, When my client call my grpc remote method, i feel my app is stuck when i'm wrting to ByteSink file. Server is sending chunk on first call (or first iteration or hasNext() call on blocking stub)  without any flow control on each chunk during loop ... or without waiting onNext iteration from client ... So server is sending data, client begin to write few kilobytes and then client is stuck and server continue to send is data until he finishes, but client is still stuck  on writing in byteSink file. This error occured only from remote server. When i run the server locally, the download is OK.
Any idea about what is happening ?
Initialy ,i worked with blockingStub, then i tried asyncStub ...and if i didn't had a sleep in server side, i cannot load correctly all bytes. Also, when i send file that had  1mb size, i face same issue.
Currently,  i'm sending between 8 to 16ko but the download is very slow ....
Below piece of code of my server  code:


6266
Determine whether we should drop dependency on ByteStreams6

We purposefully avoided com.google.io for Android, which is why IoUtils existed. I'm not sure if anything there has changed, but #5834 started using com.google.io. ByteStreams pulls in a bit more code that would initially be expected and maintaining IoUtils was trivial. There is some potential performance gains (memory usage and CPU) to be had by ByteStreams, because it uses shards that are combined at the end vs one contiguous chunk of ByteArrayInputStream.
From #5834 we see that using ByteStreams added .5K and 14 methods. That's not much, but simultaneously seems a bit much for limited gain.
This came up as ByteStreams.toByteArray was noticed by a Google-internal Android checker for some related code. (cl/272629838)


6268
Tracking Issue for Xds/SDS Channel/Server Builders being experimental6

Additional context
For now (in the absence of XdsCredential) we need to use XdsChannelBuilder and XdsServerBuilder to be able to use XDS provided TlsContext information.


6274
Disabled tests in io.grpc.xds.sds.trust.SdsX509TrustManagerTest need to be re-enabled7

Many tests in io.grpc.xds.sds.trust.SdsX509TrustManagerTest read from files that fail with blaze (internal failure). Need to fix by using resources


6279
offloadExecutor is experimental API7

Was originally added in #6238 (was renamed from blockingExecutor)


6282
Service Service cannot generate ServiceGrpc.java file8

Hello, I would like to ask, my proto file definition is correct, I want to add the service RandomService in the service.proto of the benchmark module, but did not generate the RandomServiceGrpc.java file. Thank you!


6283
DelayedClientTransport can trigger RejectedExecutionException8

We've seen the following exception (b/142475326):
The application was using our default executor, which means we scheduled work after the channel terminated or the reference counting is broken.
When the channel terminates it guarantees that it is done scheduling work on the executor, but not that all the scheduled work is complete. The problem here appears that some of that work is scheduling more work on the same executor.
Specifically, this runnable can produce more runnables:
But while that runnable is running, 'stream' is likely to have already been removed from 'pendingStreams'. So if the channel is shut down at that point the transport will terminate abruptly and no other transport will "own" the call yet, so the entire channel can terminate before the runnable completes.
We could either split start() draining to a separate method in DelayedStream so that newStream()+start() can be called directly within reprocess(), or we could keep a counter for the number of streams still draining and delay transport termination until it reaches zero.


6299
how to avoid this exception ?9




6300
Race condition causing NPE with LocalChannelProvider and GrpcCallContext with timeout0

There seems to be a race condition causing a NullPointerException when using an InProcessServer, a LocalChannelProvider and a GrpcCallContext with a very short timeout.
The following example call will (often) cause the problem:
GrpcCallContext context = GrpcCallContext.createDefault().withTimeout(Duration.ofMillis(1L));
Assuming that the (mock) server will take more than 1 millisecond to respond, the expected outcome should be a DeadlineExceededException wrapped in an ExecutionException. Instead, a NullPointerException is logged and the call hangs indefinitely.
The exception that is logged is:
The following test class will reproduce the problem. If you change the value of the CLIENT_CONTEXT_TIMEOUT constant from 1 millisecond to for example 100 milliseconds, you will get the expected outcome of each call just timing out and the test case will succeed (after 10 seconds).


6306
Can't compile when proto definition contains oneOf field type0

Please answer these questions before submitting a bug report.
What version of gRPC are you using?
What operating system (Linux, Windows,...) and version?
What did you expect to see? Should compile and generate from proto definitions without errors
What did you see instead?
Task :compileKotlin FAILED e : Supertypes of the following classes cannot be resolved.
Please make sure you have the required dependencies in the classpath:
class entity.grpc.User.MyAgeCase, unresolved supertypes: InternalOneOfEnum
Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs).


6315
netty-tcnative incompatible with Conscrypt provider1

When using conscrypt like:
Security.insertProviderAt(Conscrypt.newProvider(), 1);
On one machine we got lots of weird failures, but also:
It looks like Netty is trying to dig into the JDK to reuse code. But that is only used in ReferenceCountedOpenSslContext which is when Netty is using tcnative.
GrpcSslContexts prefers tcnative, which is how tcnative is being selected. Netty then tries to use Conscrypt because of getInstance("TLS").
It's unclear what the best solution is here. We probably do want to figure out a fix for Netty to work with Conscrypt, but it's unclear what rules Netty should use, since it is already in hack territory. In the short-term, if Conscrypt is the provider for "TLS" we could select JDK+Conscrypt instead of tcnative in GrpcSslContext.
CC @normanmaurer


6322
Localized exceptions are being logged at level INFO (see also #5872)2

This issue is related to #5872.
What version of gRPC are you using?
What operating system (Linux, Windows,...) and version?
What did you expect to see?
Useless exceptions being logged at a lower level than INFO.
What did you see instead?
Useless exceptions being logged at the level INFO.
Steps to reproduce the bug
Have your Windows set to german and have a client forcefully close the connection to the grpc server.
The following exception is then logged at INFO level:


6323
Request got cancelled by RST_STREAM - race condition2

Revised version of #6166. We actually thought that the elapsed time was a factor but it seems it is a race condition and can be observed instantly.
We implemented a service that receives a request from a gRPC client and then waits for a condition to trigger. When this condition is finally met, the gRPC server sends a message to the client and completes the connection.
In our service it can happen that a trigger is fired by a few threads concurrently since we receive updates via several input sources. This is where we sometimes run into the described problem.
When creating the reproducer it could be observed that the request is always answered and the RST_STREAM comes in later. However, onComplete() is not called.
NB: In our full-blown service (Spring Boot based) we only saw the reply in the tcp dump but not in our application. But this is probably due to the nature of a race condition.
We also see this message in the logs:
This is probably where the RST_STREAM originates from that causes our service to not get the response or have onCompleted() not called.
I read that StreamObservers are not thread-safe but I don't know how StreamObserver and ServerCallImpl are connected.
I was wondering if ServerCallImpl could be made thread safe in this regard. Looking at the ServerCallImpl source code I can see that there are several fields representing the state but only one is volatile.
So after all it seems we are simply using gRPC wrong. Do you think there is a chance that gRPC can behave better in such cases because we wasted quite some time finding the root cause of this issue.
We now prevented this problem by guarding the triggering by an AtomicBoolean that only lets the first thread pass. Another approach was to create a synchronized method in our StreamObserver that calls onNext() and subsequently onCompleted().


6330
Can channelBuilder support add a  param to cancel using opencensus tracer 3

Is your feature request related to a problem? Please describe.
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
Describe the solution you'd like
A clear and concise description of what you want to happen.
Describe alternatives you've considered
A clear and concise description of any alternative solutions or features you've considered.
Additional context
Add any other context about the feature request here.


6332
Classpath clash between protobuf-java & protobuf-lite3

Hello, there are some equal classes in protobuf-java and protobuf-lite:
There are clashed archives:
And both these libraries are used in grpc-protobuf:
It would be great to fix dublicated classes at grpc-protobuf.
Thank you


6337
grpc-java android wear OS3

I'm using grp-java in an android app and i have been asked to migrate the app for android wear OS.  Will grpc-java work on Android wear OS?
thanks
chris


6340
gRPC Client Threads Concept 4

Client Thread Consuming & Queue Logic Questions
I have a server stream rpc call
I have grpc Client request created using java and used the StreamObserver onNext
I am trying to understand threading and queuing concept on the client side.
What happens if message on the server side are queuing up fast and the client is been consuming it slow. After 2 hour the TCP connection closed, as the server message are getting queued (GRPC_ARG_KEEPALIVE_TIME_MS is 7200000 (2 hours))
I have written my processing logic in onNext, will this cause it to slow down the consuming of messages?
How is the order of the message maintained in the client, if cachedPool is used?
Will overriding the executor with to more number of thread pool withExecutor(Executors.newFixedThreadPool(20) help?
I have also tried using MoreExecutors.newSequentialExecutor(Executors.newSingleThreadExecutor()), will this slow down the client consuming of messages?
What is the efficient executor in MoreExecutors to process messages sequential and fast?
Will client host device CPU/Memory constrains restrict the number messages being consumed per min?


6348
Packet validation problem4

There is no problem in communication transmission, but due to the differences in the generated structures and the different check codes generated by CRC, how can I validate the packets?


6353
INTERNAL: REJECTED_SEMAPHORE_EXECUTION 5

I got this error code.but I don't understand meaning of REJECTED_SEMAPHORE_EXECUTION
Cloud you explain why my grpc client call got this code(REJECTED_SEMAPHORE_EXECUTION)? Thank you.


6354
Are grpc-benchmarks and grpc-interop-testing for users?5

The artifacts grpc-benchmarks and grpc-interop-testing are part of grpc-bom. Are they intended to be used by users?
Background:  GoogleCloudPlatform/cloud-opensource-java#1004
Our static analysis shows that transitive dependencies of the two artifacts have missing class references. I'm wondering whether these missing references would cause problems for Google Cloud users or not. If they will not go users' class path, then it won't cause a problem.


6356
Update google-auth-version to 0.18.05

In build.gradle


6357
Update OpenCensus to 0.24.05

In build.gradle.
Most other projects in the GCP orbit have already migrated to this version


6364
Propose to officially support ARM64 platform6

Is your feature request related to a problem?
Yes, recently, I am working on promoting Hadoop building on ARM64 server, while an error occured due to missing the io.grpc:protoc-gen-grpc-java:exe:linux-aarch_64:1.15.1 artifact for aarch platform, see error messages:
In the Maven central repo, there are different version of  protoc-gen-grpc-java artifacts for linux-x86, osx-x86, windows-x86, but no aarch64 specific package. see:
I have searched this problem in google, found that there are some similar issues brought up by others, such as #2202 and disscussion , there are also some posts share workarounds by compiling grpc-java manually with private patches. actually, I have also tried to build protoc-gen-grpc-java but it also easily fail for some reason.
Describe the solution you'd like
Hope we can officially support ARM64 platform and publish io.grpc:protoc-gen-grpc-java:exe:linux-aarch_64 artifact in Maven central repo.
I am not sure if I am missing someting, please pointing out if I am wrong.
Describe alternatives you've considered


6365
grpc-interop-testing on Maven Central no longer includes tar/zip6

Also applies to grpc-benchmarks, but that's not as big of a deal.
It seems the last version the zips were included was 1.18.0. I assume this was broken when we swapped to the maven-publish plugin.


6367
ComputeEngineChannelBuilder has wrong signature6

The generic type in ComputeEngineChannelBuilder class signature
However, fixing the bug might be ABI breaking for existing users.
cc @zhangkun83


6374
gRPC SSL / https support for Android application7

Is there any example related to building Android application that should communicate with https gRPC server?
I have managed to create C# application that successfully communicates with Node JS localhost server and credential code is:
Server code is:
In grpc-java side I have tried OkHttpChannelBuilder, AndroidChannelBuilder and NettyChannelBuilder but I have not found solution to make communication work yet.


6392
interop-testing: Support CompressedResponse for streaming9

server_compressed_streaming fails for grpc-java. There is support for CompressedResponse for unary:
But it appears there is no support for streaming. We should add support and enable server_compressed_streaming in run_interop_tests.py.


6396
ThreadlessExecutor thread dead lock9

What version of gRPC are you using?
version: 1.21.0
Possible Reason
invoke execute method, add runnable to ThreadlessExecutor
start execute LockSupport.park(this);


6397
Compilation error with generated code in Netbeans with oneof in prototype9

What version of gRPC-Java are you using? V1.24.0
What is your environment?
Product Version: Apache NetBeans IDE 11.2
Java: 1.8.0_231; Java HotSpot(TM) Server VM 25.231-b11
Runtime: Java(TM) SE Runtime Environment 1.8.0_231-b11
System: Windows 10 version 10.0 running on x86; Cp1252; en_US (nb)
What did you expect to see?  I expected the build to complete
What did you see instead?  I get a compilation error in the generated code:
Scanning for projects...
This same prototype works just fine in C++.  I just downloaded all the Java today so it is the latest.


6399
gRPC client to use a proxy server with traffic between the client and proxy server encrypted as well9

Is your feature request related to a problem?
As implemented in #5173, we could call ManagedChannelBuilder.proxyDetector to specify a custom ProxyDetector that returns a ProxiedSocketAddress.
The current concrete class HttpConnectProxiedSocketAddress contains proxyAddress, targetAddress, username and password and does NOT specify whether the traffic between the gRPC client and proxy server be encrypted or not.
By tracing through the code and the calls in netty, it appears that the traffic between gRPC client and the proxy server is NOT encrypted, though via HTTP CONNECT the gRPC client and the destination server DO established a secured channel.
As described in here, there are 2 things about https proxying:
a proxy which knows the "CONNECT" verb and is able to forward connections to a ultimate SSL-powered target server;
a proxy which is itself a SSL server and will engage in SSL with the client, to protect requests and responses when they transit between client and proxy.
So it appears that gRPC currently support the point 1. but have no support for point 2.?
Describe the solution you'd like
Ideally we should be able to specify the proxy server as a URL (or some way to indicate whether the client and the proxy should have traffic encrypted between them) instead of just a socket address with no protocol attachment.
Then the code logic should perform proper handshake as shown in the Go lang example - which supports a proxy server URL, which has a protocol part http vs https for the proxy server as well (not just the destination), and it performs proper TLS handshakes between the client and the server as seen in here
Describe alternatives you've considered
I must admit that I am not a networking expert and I have mostly been just looking into netty/grpc/java code to see what options can we have out there from code level.
I am not sure if I can configure netty directly to achieve my goal, netty implemented HttpProxyHandler which gRPC client code eventually triggers, but unfortunately from my understanding, that HttpProxyHandler does not encrypt traffic between the gRPC client and proxy server neither.
I do not see any trivial alternatives, please help :)
Additional context
Is gRPC intended to use https/handshake with the proxy server too ? (not just the destination server). As based on the code in here and the comment in here, it might want to support it? But again, I am quite new to all these so I could just be misreading the details.
Many thanks in advance!!


6404
Ability to only log events for the xds client and policies0

Currently we use ChannelLogger which logs events of all channel (including data plane). There is no easy way for users to port only logs of control plane events to StackDriver.
cc @srini100


6405
Have grpc-protobuf-lite depend on protobuf-javalite, not protobuf-lite0

What version of gRPC-Java are you using?
What did you expect to see?
My understanding is that with more recent protobuf versions the Java Lite code generation requires a different approach and is compatible with com.google.protobuf:protobuf-javalite artifacts as opposed to the old com.google.protobuf:protobuf-lite:3.0.1 artifacts. The current grpc-protobuf-lite still depends on the old com.google.protobuf:protobuf-lite:3.0.1, yet the current grpc artifacts generally use recent protobuf versions. I expected to see a dependency on the new protobuf-javalite artifact instead. Or would a new grpc-protobuf-javalite artifact be more appropriate?


6406
I made a "gzip request" to server ,but there isn't a "gzip response" to be returned.0

I use java to had a "gzip request" to server ,the code is list:
but the response i had is not a "gzip response".
I readed the others Issues that I found one whitch means ,it needn't a "gzip response" to be sent for a client use gzip to had a request . So , what should I do to right my options ? I want a "gzip resopnse" to be sent for a "gzip request" ?
thank you.


6408
There is a recursion loop in NameResolver.0

What version of gRPC-Java are you using?
There is a recursion loop in NameResolver.


6410
abstract class NameResolver has recursion loop in non-abstract start methods1

What version of gRPC-Java are you using?
What is your environment?
Steps to reproduce the bug
If you create an implementation of NameResolver and don't override one of start(Listener) or start(Listener2), you get an infinite loop and stack overflow.
Yes, my implementation is incorrect (as I'm experimenting in an effort to understand how this works), but it seems this condition should be prevented somehow.
It's easy to see in the source code that these two methods delegate to each other.


6412
2 way SSL with Grpc and netty [Android]1

(using grpc version 1.24.0 and nettychannelbuilder)
I have looked at this issue and used the code provided by @voidzcy in the example, but i have encoutered a problem regarding my device not being able to detect my certificates who are under the "raw" fodler, and i got this error:
" Caused by: java.security.cert.CertificateException: could not find certificate file: server.pem"
i then tried to add my own Sslcontext, but couldnt figure out how to make it 2 way ssl (server certificate, client certificate, and client key), with Grpc.
Update:
I have used:
while having the files server.crt client.crt and key.key in my "raw" folder, but i get this error now:
Update:
I have checked the stack trace and it says :
But at the begging of my activity i wrote
Security.insertProviderAt(Conscrypt.newProvider(), 1);
and added "classpath 'com.google.gradle:osdetector-gradle-plugin:1.4.0'" to my classpath in gradle
I also tried usuing Play Services Dynamic Security Provider and still the same error occurs.


6413
TLS support for Android with server's certificate signed by a trusted CA1

I have an Android client which I'm trying to connect to my server via TLS. The server already has a certificate signed by a trusted CA and I was able to connect to the server using TLS with gRPC-Swift, so I think the server it's working properly. However, with Android I'm having troubles to establish the secure connection.
I saw the example from the documentation which uses :
But it didn't work neither.
Finally, I added Conscrypt like the README said using this line before the channel creation:
But I'm not sure if I'm using it properly.
Additionally, when I see my logcat I can't see an error related to TLS, so I can't find what error is happening.
My gradle file has these dependencies:
I have tested my code with unsecure connections and all works fine but now with TLS I can't find what is casuing the error. So, my question is how can I connect to my server via TLS from an Android client? Do I need to add another thing?


6417
Client blocks exactly at the third call while calling the unary method in loop?1

What version of gRPC-Java are you using?
What is your environment?
Linux centos
What did you expect to see?
The client should able to call the GRPC server in the remote host in a loop using the same channel.
What did you see instead?
While calling in the loop, the client receives response 2 times and blocks at the third attempt forever. It happens only if I call a remote machine in AWS from my local machine. Local Client to Local server or AWS EC2 Client to Another EC2 server working as expected.
Steps to reproduce the bug
Host a GRPC server in the remote machine. In the client, create a channel and use the same channel instance to call the remote method in a loop and shut down the channel after the loop.


6418
Build grpc-all fat jar after making changes1

I am trying to build a fat jar of grpc-all for version 1.22.1. I am able to do it by executing the following gradle script:
This actuallly builds the fat jar from the remote maven repository. I want this:
Make some code changes in the grpc java (https://github.com/grpc/grpc-java), branch v1.22.1 and then build uber jar reflecting those changes. How can this be done? I have already cloned https://github.com/grpc/grpc-java to my local machine at /home/ankit/grpc-java


6421
io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!  Caused by: java.lang.OutOfMemoryError: unable to create native thread: possibly out of memory or process/resource limits reached2

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug


6422
what would happen if my service is printing this log : io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!    2

My service is printing this error:
io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!
Caused by: java.lang.OutOfMemoryError: unable to create native thread: possibly out of memory or process/resource limits reached
according to the log , I have increased my jvm config:  xms from 502m to 1024m, xmx from 1024m to 4096m, this exception log is going away from my service.
My question is : how to reproduce this exception in other environment. and what  thing would be caused by this error log (like the service is down or something else), as  we didn't find any service down accident and didn't receive any error report from out client. especially cannot reproduce this ,even with loadtest
Can someone help answer my question?


6423
gRPC Server Exception : Connection reset2

hi
why each time client send request to serer, sever respond with internal exeption:


6426
How to throttling in server-side (not the manual flow control version)?2

I'm wondering how you guys to deal with the problem which the client-side's produce rate is greater than the server-side's consume rate.
In my case, that lead to a OOM eventually.
Is there a simple way to implement a throttling in server-side when I can't change the client-side's code.
Here is a issue I raised at another repo.


6427
Grpc over Bluetooth RfComm ?2

I was wondering if it was possible to use grpc over bluetooth to connect two devices? I tried using the bluetooth device mac id as the host but that clearly doesn't appear to work.


6428
How to get the  server address when call complete?2

Hello, everyone,
I'm first use grpc-java, how can i get the server address when client complete one request if success or not?
i want statistics the error count of every server.
can anyone help me?
thanks


6432
why client  send data failed when server invoke the onComplete?3

Consider the following gRPC scenario:
Client opens bidi-stream to server and starts sending data
Server invoke the onComplete ,so closes the response stream and sends the status trailers (translates to sending http2.END_STREAM)
Client continues to send data
if follow the http2-spec,the client is allowed to continue to send data that is processed by the server.But I just tested and the client invoke onNext to send data will throw the exception and log
call was half-closed.
how to explain this case?


6435
Extract json parsing to separate module (ex: grpc-gson) to allow for other implementations such as Jackson (ex: grpc-jackson)3

Is your feature request related to a problem?
It is frustrating that gson is the only option. My code uses jackson ALL over the place, but I still have to bring gson into my classpath for a single technology.
Describe the solution you'd like
I propose to extract the json parsing logic into a separate module (such as grpc-json in keeping with the convention). I further propose a jackson (fasterxml, not codehaus) module be included (grpc-jackson) to accommodate my (and many others') use-case
Describe alternatives you've considered
None. The JsonParser class is api internal.
Additional context
This seems like a very simple thing to do. The ONLY reference to gson is in a single class in grpc-core. The tests are similarly basic, so the change would take maybe a day to implement fully. I may even submit the PR myself, as it is THAT annoying to me.


6436
Error in TLS protocol3

Im using mutual TLS authentication between my android client and python server, the handshake is going ok, but i get the error UNSUPPORTED_PROTOCOL on my python server.
my server is not web based and when i tried connecting to it via a python client it worked well.
my certificates are in .crt format and my key is in PKCS#8.
I believe that the problem is me not using TLS v1.2 , but whenver i change the SSLContext instance to "TLSv1.2" it doesnt do anything, and when i change my channelBuilder.connectionSpec(ConnectionSpec.COMPATIBLE_TLS);
to something else, the handshake doesn't go through and my server throws LAST OCTET INVALID and FIRST OCTET INVALID


6438
Tracking issue for NameResolver.Args.getChannelLogger being experimental3

Make ChannelLogger accessible through NameResolver.Args.
Subcomponents in NameResolver may want to log information to Channelz, such as XdsClient created by XdsNameResolver.


6445
ava.lang.NoSuchMethodError: io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder4

No description provided.


6446
protoc version problem4

My protoc version is 3.10.1 and protoc-gen-grpc-java version is 1.25.0.
When I use protoc-gen-grpc-java, it reports:
Error loading shared library libprotoc.so.17: No such file or directory (needed by /usr/local/bin/protoc-gen-grpc-java)
While I have libprotoc.so.21 in /user/lib


6447
The grpc-cronet Android library build produces an empty aar4

What version of gRPC-Java are you using?
What is your environment?
Target/compile SDK version is 28.
What did you expect to see?
I expected to be able to use the CronetChannelBuilder class, but I wasn't.
What did you see instead?
Upon opening the aar file downloaded from maven central I noticed there were no classes included and the file has a size of 543 bytes.
Steps to reproduce the bug
Running the grpc-cronet build with gradlew produces an aar that is practically empty.
As far as I can tell the line minifyEnabled true in the release build causes all Java classes to be left out of the final aar. Because this is a library and there is no entry point all code is considered dead. I also think proguardFiles should be replaced with consumerProguardFiles in the release build configuration for an Android library.
When running into this issue we started to doubt whether grpc-cronet was actually meant to be released on maven central yet. It is however recommended to use cronet for gRPC on Android here.
Am I missing something here? I couldn't really believe grpc-cronet has had 4 releases published to maven central, the first almost two months ago, with the actual product being in an unusable state.


6454
Tracking issue for NameResolver.Args.getScheduledExecutorService being experimental5

Make transport executor accessible for scheduling small tasks in NameResolver. Similar to LoadBalancer, subcomponents in NameResolver may want to schedule small tasks to be run later. One example is XdsClient in xDS resolver that schedules retry tasks.


6456
Need a way to stop server side streaming when client disconnected5

here is pseudo code to impl a server side streaming:
On client side, if everything is ok, CancellableContext.cancel() or ManagedChannel.shutdownNow() will terminate someMethod call gracefully, but if client crashes && heavyCompute always returns null, someMethod call will run forever...
so is there a way to fix this?
Thanks.


6461
using gRPC 1.25.0 cause epoll io pending tasks increased to several hundred6

using gRPC 1.25.0 cause epoll io pending tasks increased from less than 10 to several hundred
i see netty 4.1.42 refine the epoll impl,cound it be a reason to interpret this..there is no further informations


6462
Bidirectional streaming in Android gRPC disconnect after about 20 seconds6

Bidirectional streaming in Android gRPC disconnect after about 20 seconds in Cellular internet. With wifi everything is OK. I use AndroidChannelBuilder with default config in client, and I use NettyServerBuilder with default config in server.
Server Exception is:


6467
How to put data to Server and then get data back6

HI every one, I'm playing with Flight Server and I want to send (do_put) some data table to server, then the server do some computation and after completion (for the moment just Sync operation) I want to resend back the result as a Table again.
I can't find in the last version the possibility to attach data into an action!
My question is may be naive but it will en light me for the possibility to interact seamlessly with all my micro-services.
Thanks in advance


6468
Client health check in Bidirectional streaming6

In Bidirectional streaming in server side, how I can check that the client connection is ok or not? for example I want to know when client internet be disconnect.


6469
Example RouteGuideGrpc Can not found6

I use maven to generate the protocol source code, and I can not found the RouteGuideGrpc class in the target generated-sources


6470
Why my generated source newStub method param type is com.google.protobuf.RpcChannel?7

as the example, the newStub param type is ManagedChanel


6471
Duplication of classes found in protobuf-javalite-3.11.0.jar and protobuf-lite.3.0.1.jar. Why does protobuf-lite-3.0.1.jar appear if it's not written in any of the gradle files of the project?7

Hello!
The following happens when the implementation of com.google.protobuf:protobuf-javalite:3.11.0 is done in gradle. Errors are replaced with missing classes one when the implementation is removed.
I've checked all three gradle files related with the android module but none of them contain explicitly an implementation of protobuf-lite.3.0.1.jar.
Are there any implementations which depend upon protobuf-lite.3.0.1.jar?
These are the gradle files of the project:
Thank you for your time.


6472
Android generated code from 'helloworld' is invalid.7

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Successfull building.
What did you see instead?
Several errors.
Steps to reproduce the bug


6473
grpc server restarted, client cannot connect immediately.7

when grpc server restarted, the grpc client cannot connect the server immediately.
Sometimes a few seconds, sometimes a few tens of seconds.Why is that?


6474
google/protobuf/empty.proto: File not found7

Hi,
I'm trying to use grpc-java in an Android app to hit an API that makes uses of protobufs. It seems when using java-lite and then adding this line to a .proto file import google/protobuf/empty.proto, I'm receiving this error:
Any help would be greatly appreciated!


6478
Known uninteresting log is INFO level7




6484
DEADLINE_EXCEEDED is triggered after header continuation frame is received8

What version of gRPC-Java are you using?
1.25
What is your environment?
Client: Android
Server: Windows running C++ version of gRPC
What did you expect to see?
HTTP/2 implementation in OkHttp library has hard coded frame size of 16384 bytes. In case server is sending a response with trailers that won't fit to max frame size, the frame is split on server side to headers frame and continuation frame. These frames should be then read on client side and stream should get closed.
What did you see instead?
In case the server sends headers frame and continuation frame, gRPC-java implementation will read the frames, but it doesn't handle the end of stream correctly and therefore it keeps on waiting for more data. Finally DEADLINE_EXCEEDED error is triggered after the configured timeout since there will never be more data coming as server already sent everything.
Steps to reproduce the bug
Make a request from Android client to server
Send response (e.g. error) from server with large trailing metadata so that all data won't fit to OkHttp's max frame size (16384 bytes)
Android client receives the data, but will keep on waiting more and original request will finally fail with DEADLINE_EXCEEDED error
The problem is on below code:
Here the readHeaderBlock method reads the header frame and the continuation frame correctly and updates the member variable continuation with flags from the continuation frame. However, in the above code endStream is already evaluated based on the flags received from the first frame, which will not have the FLAG_END_STREAM. So the endStream will never be true if there is a continuation frame and this will cause that client will keep on waiting for more data.
Solution proposal:
Instead of evaluating endStream immediately from flags received on first frame, flags should be evaluated after reading the header block in which case continuation.flags should always have the flags for the whole response. This way the stream end is received correctly and client will not keep on waiting for more data.


6486
exception is raised "java.lang.IllegalStateException: listener unset" - depends on executor?8

What version of gRPC-Java are you using?
What is your environment?
Linux with Java 11 in a Docker contaoner (openjdk:11.0.5)
What did you expect to see?
What did you see instead?
I see 2-3 exceptions per second:
Steps to reproduce the bug
Use io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder and assign ThreadPoolExecutor with some pretty small queue (I have ArrayBlockingQueue with capacity 1024). Then create some incoming traffic (I have ~ 12K incoming requests per seconds).
After I increased the queue to 8096 the problem has gone.


6497
DEADLINE_EXCEEDED errors when routing to partner AWS NLB via nginx proxy9

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Successful response
What did you see instead?
We have setup a Java Client and have configured timeout for 2300ms.
The app is deployed on AWS and it connects to an internal nginx proxy, which then further routes the calls outbound to the partner.
Here is the Spring bean definition
And the usage
As a suggestion from our partner and following https
we updated nginx proxy, but this seems to have no effect
Any ideas on what might be going on and what can we try further?
Steps to reproduce the bug
Use Java client, to connect to Partner AWS via nginx proxy from our AWS instance


6498
gRPC takes about 6ms single trip between processes on local machine9

I was experimenting with gRPC and it seems a really great tool. However I discovered when I have a server & client on my local machine, I observe about 6ms.
The difference between clientTakes and serverTakes is roughly 5-6ms (larger when the server just started)
Initially I thought it's something wrong in my code so I referred to: https
And I did the exactly same thing as above by adding a timer on client and server. It seems the difference is still consistent at 5-6ms.
(in the pic above i used Scanner to wait in the while loop for sending requests. thus the "a" "f" etc. Please ignore them).
My question is:
Do we expect this 5-6ms even when two these server/client live in the same local machine? My estimate rule of thumb for data travel between two machines in the same DC is 500us(https). Is there anything I might be missing?


6506
Linux build of protoc-gen-grpc-java does not support java lite0

What version of gRPC-Java are you using?
Using v1.25.0 pre-built libraries from:
What is your environment?
Windows 10 and Ubuntu 16.04
What did you expect to see?
Expect the same version of the behavior of the protoc-gen-grpc-java plugin to generate "java lite" on both Windows and Linux.
On Windows we can generate java lite gRPC clients with:
What did you see instead?
But the Linux build of the same plugin version on Linux:
Fails with:
Steps to reproduce the bug
Is there an official or more up-to-date repository for accessing the pre-built java plugin then


6507
Allow creating context with more than 4 keys0

Is your feature request related to a problem?
I'd like to create a context with more than 4 keys
Describe the solution you'd like
Ideally, an overload to withValues that potentially could take a Map<Key, V> of Context keys and values, enabling an arbitrary number of context keys to be used in a single context if a consumer of this library wanted more than 4
Describe alternatives you've considered
We could just use a single Context key and store all of our context in a single map associated with that key, but before I do that I wanted to understand if there was a reason for limiting withValues to taking 4 key-value pairs


6511
Example HelloWorldServer does not gracefully shutdown1

What version of gRPC-Java are you using?
On a fork up at commit d168632
What is your environment?
Mac OSX 10.14.6
What did you expect to see?
The server should allow in-flight RPCs to finish
What did you see instead?
The client receives error WARNING: RPC 1 failed: Status{code=UNAVAILABLE, description=Network closed for unknown reason, cause=null}
Steps to reproduce the bug
Add a call to Thread.sleep(15000) in io.grpc.examples.helloworld.HelloWorldServer.GreeterImpl.sayHello
Build and run the server
Run the client
It seems like server.shutdown() does not wait for in-flight RPCs to finish before returning. The documentation makes it seem like that it should block.
I am able to "fix" the issue by adding a call to server.awaitTermination() in the stop method.


6514
DEADLINE_EXCEEDED - negative value1

I'm seeing errors in my log of a DEADLINE_EXCEEDED, but some of them have a negative value for the exceeded after. Is this expected behavior and if yes, what is the reason, as in the example bellow it is minus two seconds.


6523
NameResolver.Listener2 confusing javadocs2

I'm not sure in which issue type this fits best.
What version of gRPC-Java are you using?
What did you see instead?
The javadocs on io.grpc.NameResolver.Listener2 are confusing because on one hand it states:
This is a replacement API of {@code Listener}. However, we think this new API may change again, so we aren't yet encouraging mass-migration to it. It is fine to use and works.
Which sounds like we shouldn't use it yet. On the other hand, the other method is marked for removal (for a version a few months ago)
@deprecated This will be removed in 1.22.0
So is it going to be removed soon?
Related to #1770


6524
Clarify NameResolver.Listener behavior/expectations when the servers remain the same2

Is your feature request related to a problem?
I have a (Spring) discovery service based NameResolver which sends regular updates/ticks to the application, however it does not contain details which service name might have changed. So I have to check them for updates frequently, even if only one is service updated.
Should I verify whether the server addresses remained the same before invoking onAddresses/ onResult? How expensive is calling the method with the same servers over and over again? Does it trigger new connections to be made?
Describe the solution you'd like
Javadocs that explain what the listener will/are supposed to do if they get (partially) the same addresses.
The listener will create a diff with any previous server list and prepare (close) connections for the new (old) servers


6527
Revert stickiness from round robin2

Stickiness had a "final" design that we implemented, and then the design changed and then it evaporated completely. It isn't thus a cross-language feature and we've never considered it stable nor provided documentation for it. We should delete it. (Today someone was asking how to use it; we don't want users to use something that we consider dead)
Unfortunately it doesn't cleanly revert because there was a reorganization of RRLBFactory. There's some other conflicts as well, but I don't know how painful they will be to "merge."


6530
DnsNameResolver not refreshing after a cache hit3

Hello.
I implemented a NameResolver based on DnsNameResolver from version 1.19.0 - it has the same caching logic, but calls a high-level API instead of a DNS server. I encountered an error in the following scenario:
The first resolution returns a faulty result and caches it
The relevant code in current version of DnsNameResolver looks like
refresh() is never called again, I am stuck with a faulty result.
As I understand the problem, it is because in step 2 the listener is not called, neither onAddresses() nor onError(), so the calling code is waiting for callback and cannot schedule a refresh.
So is it a bug in DnsNameResolver code or is my approach wrong? How do I ensure that re-resolution eventually happens, apart from getting rid of caching?


6534
Update googleauthversion to 0.19.03

This is important and necessary for downstream clients including dialogflow and bigquery. Otherwise we're going to hit linkage errors with any version of gRPC.


6536
repositories.bzl uses http (not https)3

I see a lot of lines like this:
If we're actually resolving these they're going to stop working on January 15, 2020.
I'm not 100% sure this matters, but just in case I wanted to raise the issue.


6542
Update protobuf to 3.11.44

What version of gRPC-Java are you using?



6550
Decide where to put context propagation helpers for guava callbacks5

open-telemetry/opentelemetry-java#702 is more related to grpc-context than open-telemetry. We need to decide where it should go.


6551
Supplying Servername (TLS+SNI)5

Hi, our team has a grpc server written in go setup behind a HAP and we need to provide a serverName for the tls+sni configuration. We have go clients and Android clients. With go, it's possible to supply the servername like so
grpc.WithTransportCredentials(credentials.NewTLS(&tls.Config{ServerName: "host"})) and that works.
However, I'm unable to figure out how to supply the serverName equivalent on android beyond ManagedChannelBuilder#useTransportSecurity and that doesn't seem to be working. Please help


6552
Clarify the Javadoc for CallStreamObserver5

The relevant part of the current Javadoc:
As far as I can tell, for any call, there are three implementations of StreamObserver involved:
I think it would be nice to clarify that. I've spent significant time trying to understand where does ClientCallStreamObserver appear, being confused by the premise that there are only two implementations of StreamObserver.


6554
Feature request: Add com.google.rpc.Status in a javalite variant5

I think the title is self-explanatory but in case it isn't we're building a client for Android devices where we extensively using WKT (solved by the protobuf-lite library) and some protos pertaining to google (com.google.rpc.*).
We would like to have the lite variant in order to be used on Android devices. Is it possible? Is this the correct place to ask for it? Pointing to @ejona86 as, as far i can see, you're the one answering these kind of questions! :D
Thanks in advance!


6560
grpc reports "cancelled before receiving half close" although stream is reset by client6

What version of gRPC-Java are you using?
What is your environment?
The problem is 100% reproducible on CentOS and macOS.
What did you expect to see?
On the server side it would be good to see a different reason for the cancelled call in the StatusRuntimeExcpetion e.g. "CANCELLED - client reset stream" or even another Status entirely that makes it easy to differentiate.
Additionally, either no DATA frame should be sent by the client after a RST_STREAM or the NettyServerHandler should ignore it when receiving it directly after the RST_STREAM.
What did you see instead?
Steps to reproduce the bug
Both client and server use grpc-java. We have a bidirectional call, after the stream is established the client's onNext throws an exception. Therefore grpc-java sends a RST_STREAM followed by a DATA frame to the server.
In the server logs this can be observed with:
and then the exception:
What makes the problem hard to diagnose on the server side:
The way the problem presents itself could be a server problem, as you could argue that the server did close the stream and therefore data from the client could be interpreted as a racy frame. This is the reason we spent a few hours debugging it on the server side even though the problem originated on the client side (that my team doesn't have any control over).
Another thing is that we had to deactivate WARN logging on the server side for grpc because these exception traces trashed the log files. Generally we like to observe exceptions logged on WARN because we detected some bugs in our application that way.


6565
enable service config error handling by default6

in #6564, service config error handling enabled ManagedChannelImpl2 which will replace ManagedChannelImpl is introduced. After verification, fully migrate to service config enabled impl and delete the original (default) codes.


6567
How to set grpc client port6

When the grpc client creates a connection, the port is random. However, in a special network, I need to set a fixed port. How can I do this? Thank you!


6568
Cancelling the stream with status Status{code=INTERNAL, description=Completed without a response, cause=null}6

We have a gRPC client and server that both are streaming to each other. Code implemented in java.
The client triggers onNext in the server a few times and the server aggregates data each time, the the client then triggers onComplete which starts some server side logic and when it finished the server triggers the onComplete on the client side.
I can see in the logs the following logic:
Then a second later the client:
Received Rst Stream.


6569
Getting feedback on errors while using waitForReady or enableRetry 6

Is your feature request related to a problem?
yes using the connection retry  and/or , rpc retry blocks all feedback from coming back to the user.
Describe the solution you'd like
i'd like to have an onError callback either for the context/stream/channel that i'd be able to  report back to the user, i'm aware that while the error is being reported a  race condition may occur that will no longer make it valid for that time, but the user should have the option to decide if they should respond or do something with it.
since GRPC's logging is based on java logging, it cannot be integrated with the standard application logging framework, so even the errors themselves aren't always visible at all.
this is problematic when you situations where failure in services are being reported to a main dashboard or SLA team, the retry logic should continue to execute, while a reporting mechanism should be in place to send feedback in real time if the failures have stopped happening.
Describe alternatives you've considered
attempting to use getState(false) or notifyStateChanged proved to be unreliable
notifyStateChange doesn't tell why it has happened, and getState is too transient to be called periodically.
attempting to subclass netty proved to be too sensitive and will brake in future versions:


6571
how to user custom picker in RoundRobinLoadBalancer7

hi, I want to write a weighted round robin LoadBalancer.
I want to reuse RoundRobinLoadBalancer and change the SubchannelPicker(ReadyPicker), but The class is protected and final cannot extend.
how to change it at runtime or another way do this ?


6573
Android grpc app Gradle build experience needs improvement7

It does not really seem possible to have decent quality Gradle builds for grpc-based Android apps that use certain common 3rd party protobuf types. It also is time-consuming to find appropriate workarounds to make builds succeed anyway. In my case I only use three pretty common 3rd party types,
as well as corresponding standard APIs to manipulate the types from Java programmatically:
The types and APIs are available from certain Gradle artifacts,
but in the end I can't get successful builds if I use the artifacts. Instead I have to manually copy a bunch of the classes I need plus dependencies from the artifacts into my project.
There is a combination of aggravating factors preventing normal build configs:
The artifacts are big and some of the stuff gets in the way of javalite, and also sometimes overlaps with protobuf-generated classes.
The Android R8 tool, used for code optimization and obfuscation, is very particular about duplicate code, and does not work well with artifacts protobuf'ed with the gradle-protobuf-plugin when some classes also come in via some other regular Gradle dependency. The problem is with protobuf'ed classes showing up in the project's build output and coming in via dependencies at the same time.
I've experimented at length with excluding transitive dependencies and protobuf'ing dependencies instead of pulling them in normally, but was forced to manually copy google.rpc.status.proto, io.grpc.protobuf.StatusProto, com.google.protobuf.util.Timestamps, and com.google.protobuf.util.Durations. I will have to keep them in sync with new releases of their corresponding artifacts.
One thing that may help could be a review of common 3rd party types and common 3rd party artifacts with an eye on creating new or more comprehensive javalite-based artifacts.


6575
Metadata.BinaryStreamMarshaller is experimental7

Metadata.BinaryStreamMarshaller and Metadata.Key.of(String, BinaryStreamMarshaller)


6578
Try to remove SuppressWarnings("GuardedBy")7

#6566 introduced suppressions to allow being compatible with newer versions of Error Prone. But we should spend some time to see if we could tweak the code so that the suppressions would be unnecessary.
If we can't remove them or if it would make the code worse, we can leave them as-is and close this issue.


6579
DnsNameResolver seems overly strict when validating service config7

DnsNameResolver only allows a pre-determined set of keys used as filters, in the entire list:
That means we can never add a new filter key. That seems like a very bad idea. I don't know if this is cross-language, but the precise behavior doesn't seem nailed down in https.
CC @dfawley, @markdroth


6582
Trying to implement retry mechanism for my project8

HELP Required::
How should we implement it. Does only ServiceConfig file can handle the retry? Does Throttling Policy required?


6584
E/AndroidRuntime: FATAL EXCEPTION: grpc-okhttp-28

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Using grpc as it is required in com.google.cloud:google-cloud-speech:1.22.0 . When doing the speech recognition the crash is coming sometime.
Start the Speech Recognition than it will stop with this crash


6588
Automatically detect lingering server calls8

Problem
When subscribing to a server streaming call, it's tedious to set up machinery for canceling the stream when no longer needed.
Describe the solution you'd like
When a user calls stub.foo(observer), gRPC attaches a Cleaner to it which cancels the corresponding ClientCallStreamObserver when the inbound stream observer object becomes unreachable.
Since there is some runtime cost of registering Cleaners for each and every streaming call (and there can be thousands of them at any given time, and an unlimited number in the app lifetime), this may best be an opt-in feature. Not sure about exact API, and whether it should be opt-in per-app, per-method, or per-call.
Adding a cleaner also holds a ref to ClientCallStreamObserver as long as the inbound stream observer object is alive in the heap, even if the call itself has completed. We need to make sure this doesn't leak significant resources.
Describe alternatives you've considered
Per-app opt-in is a form of "debug mode" where lingering connections are logged, and then in prod the machinery may be set-up manually in strategic places.


6590
INTERNAL: Panic! This is a bug!9

What version of gRPC-Java are you using?
What is your environment?
Long running server process. Attempting to make a call after some time idle, the reschedule() call fails with Panic.
What did you expect to see?
API call succeeds.
What did you see instead?
Panic.
Steps to reproduce the bug
Please see related issue on Google Ads Java client library.


6591
Remove grpc-exp from ALPN9

grpc-exp was an experiment that didn't go anywhere. We should remove this vestige.


6597
Setting max threads9

I would like to be able to cap the maximum number of threads the grpc Java library uses. Right now, it defaults to 2 threads per CPU. If there are multiple processes on a 64 CPU machine, then many superfluous threads are generated reducing performance. While there appears to be a means to set this, behind the scenes, it is set to a static with a limit = 0, meaning unlimited.


6601
Deadlock on start gRPC server0

What version of gRPC-Java are you using?
What is your environment?
openjdk version "1.8.0_171"
OpenJDK Runtime Environment (IcedTea 3.8.0) (Alpine 8.171.11-r0)
OpenJDK 64-Bit Server VM (build 25.171-b11, mixed mode)
What did you expect to see?
Proper start of gRPC Server
What did you see instead?
Start sometimes hangs with deadlock
Steps to reproduce the bug
I suppose it's a race condition related to synchronization in gRPC (ServerImpl), await in NetServer.start and vertx/nettty event loops (probably single threaded). Probably it could happened at any time if someone start gRPC server and concurrently open new client connection to that server.
In my case I stopped and started the gGPR server but I'm not sure if it is somehow related.
Analysis
What I see in the thread dump is the following 2 threads that stays in that state, seems, forever:
From what I see in these thread dumps and the code I think that this could be the problem (deadlock):
Vertx grpc starts server (ServerImpl.start) in vertx blocking thread
ServerImpl synchronize on lock and then try (keeping lock) to start server (NetServer.start)
NetServer.start opens a channel, binds to it, and since that moment it, I assume, may receive connections from remote clients
It seems, at this time a remote client opens connection to this server (already bound)
Then in channel's event loop (probably single threaded) is received initChannel which try to get ServerImpl.lock in ServerListenerImpl.transportCreated (coudln't because got by ServerImpl.start)
NetServer.start then schedules runnable in channel's event loop and blocks with channelzFuture.await()
Now, channelzFuture.await() waits for a runnable to be executed in channel's event loop (probably single threaded)
At this point channelzFuture.await keeps ServerImpl.lock lock, while the ServerListenerImpl.transportCreated occupies/blocks (this is what I suppose) the single threaded channel's event loop thus making impossible to process further
I'm attaching file with thread dumps of the whole JVM


6606
http to https change over to Maven not yet available in Maven0

In reference to #6536 which appears to have been fixed just after 1.26.0 was released.  There are no later versions or patch versions available at https or the other required grpc dependencies that includes this critical fix.
Thanks!


6612
android client can't work in release1

When I update from 1.11.0 to 1.26.0, I can work in debug mode,but when I build in relase mode and open proguard_rule,It can't work and I get these error;
Is there anything wrong or I lost the proguard_rules?


6613
gRPC seems to treat socksProxyHost as httpProxy1

What version of gRPC-Java are you using?
Latest from master: b8474d6
What is your environment?
openjdk version "1.8.0_232"
OpenJDK Runtime Environment (build 1.8.0_232-8u232-b09-0ubuntu1~18.04.1-b09)
OpenJDK 64-Bit Server VM (build 25.232-b09, mixed mode)
bazel version
What did you expect to see?
I expected gRPC to respect system properties:
and use socks to connect to remote hosts
What did you see instead?
gRPC appears to send HTTP proxy commands (rather than SOCKS) commands
Steps to reproduce the bug
Note: those ports and hosts are what I am trying to connect to with gRPC.  Something that starts with the string "CONNECT" is an HTTP proxy command, not a SOCKS command.  SOCKS uses a binary protocol and expects the first byte to be the SOCKS version.
If I use tor, it gives the following error:
When java is configured as above:
(and pointed to a real SOCKS proxy rather than nc) parts of my program that just java.net.URL connection work properly (using the proxy).
This seems to be a repeat of #5600, but I am certain this isn't a proxy configuration problem.


6617
How can I find out about send errors in server-side streaming?1

In route guide example
How can I find out about send errors in server-side streaming?
Even if the client terminates abnormally, I noticed that the above code keeps running without any errors.
When I ran the same test on a server written in golang, it returned an error.


6618
Please consider a patch release with https:// endpoints in Bazel rules.1

On 15th January maven central turned down http:// endpoints. The v1.26 release still uses those endpoints. @ejona86 fixed this on master a4299eb but the latest release still uses the turned down endpoints. Please consider doing a patch release that contains the before mentioned commit.
Thanks!


6623
io.grpc.StatusRuntimeException: INTERNAL: Protocol error  Rst Stream2

version:1.22.1


6624
 Caused by: java.io.FileNotFoundException: META-INF/native/libio_grpc_netty_shaded_netty_tcnative.so2

Facing below error using 1.21.0 versions of GRPC core, netty shaded. Any help is appreciated.


6625
Increasing message size in bazel with java_grpc_library2

How do we increase the message size limit when building with java_grpc_library through bazel?
I see suggestions about setting maxMessageSize but I'm not sure where we would implement that.
Thanks!


6638
How can I implement refresh token mechanism in an GRPC android client?3

First of all, there are already two questions on the StackOverflow with this same kinda issue this and this which is kinda workaround, not an actual solution.
So there is a ClientInterceptor that is intercepting and attaching the header to the request so if the access token expired the server will respond with an UNAUTHENTICATED status but then how to recall the same method with new access token attached to it.
It is something like an authenticator which is used in retrofit here is the  link.


6641
Deadlock in server transport with multiple ports4

ServerImpl.start() calls NettyServer.start() while holding ServerImpl.lock. NettyServer.start() awaits a submitted runnable in eventloop. However, this pending runnable may never be executed because the eventloop might be executing some other task, , like ServerListenerImpl.transportCreated(),  that is trying to acquire ServerImpl.lock causing a deadlock.
This is a deadlock for multiple-port server transport usecase with the same deadlock mechanism as #6601.


6642
io.grpc.StatusRuntimeException when using shutdownNow4

What version of gRPC-Java are you using?
1.26.0
What is your environment?
Mac Java 8/11
What did you expect to see?
No exception
What did you see instead?
Steps to reproduce the bug
Note this is a BiDi stream call. The client is closing the connection on the server without the server knowing this will happen. This is done by calling:
Everything seems to work properly but I see the above exception in my logs. Note: I don't believe this is the same as #4102 as I'm calling shutdownNow() only once.
As an aside, I'd prefer to just call shutdown() instead of shutdownNow() but awaitTermination takes a very long time (10-20 seconds) if I do this. I don't know if it's related.


6643
java.lang.NoSuchMethodError: No virtual method build() Crash in runtime as it is not able to find the build method4

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
I wished it to work normally and give the speech recognition
What did you see instead?
Crash with  ".NoSuchMethodError: No virtual method build()"
Steps to reproduce the bug
Start the voice recognition, init the setup  and then call the speech recognition method
This build() method is found in compile time but it gives following error in runtime everytime.


6644
NettyChannelBuilder issue after upgrading to grpc 1.26.0 version4

On upgrading grpc version from 1.21.0 to 1.26.0 and protobuf version from 3.6.1 to 3.11.0, seeing following issue
An attempt was made to call the method io.grpc.netty.NettyChannelBuilder.usePlaintext(Z)Lio/grpc/netty/NettyChannelBuilder; but it does not exist. Its class, io.grpc.netty.NettyChannelBuilder, is available from the following locations:
It was loaded from the following location:
Correct the classpath of your application so that it contains a single, compatible version of io.grpc.netty.NettyChannelBuilder
any idea what is going wrong here?
these are the dependencies. This is an existing project, and I updated only the versions for grpc and protobuf and it broke..


6650
round_robin can continually be CONNECTING5

If you have enough backends and they are all unavailable, then it becomes likely that at least one of them will be CONNECTING. That will delay RPCs and avoid giving them a clear error message.
When a subchannel becomes TRANSIENT_FAILURE, we want RR to continue considering it (for channel state and picking logic) TRANSIENT_FAILURE until the subchannel becomes READY. That means it would "ignore" CONNECTING subchannels, except for new and recently-READY subchannels.
This was done in C core in grpc/grpc#20245
This problem really impacts all LBs, even including pick_first. However, round_robin is hit particularly harder than pick_first. @dfawley and I are quite interested in expanding the scope of this change to more parts of grpc, but there are some issues it creates that would need to be resolved, mainly in when we choose to reconnect.


6663
Dangling CountDownLatch.await() in tests6

In ContextTest.earlierParentDeadlineTakesPrecedenceOverLaterChildDeadline and ServerCallsTest.inprocessTransportManualFlow. Most likely fix is to wrap into assertTrue().


6673
can not build successfully in grpc-okhttp 1.27.0 version in android7

I am using grpc for cloud speech-to-text in android application, this is the libs I am using
this both libs working fine in the demo application, but in my application, it's not working. I am getting this error and can not sync project successfully
someone please help to solve out this issue...


6674
io.grpc.StatusRuntimeException: INTERNAL: Protocol error Rst Stream7

android client
Current phenomenon: after establishing a connection with the server, there is no interaction, and the client will receive this error after three minutes
By tracing, I located the error here:
Please tell me if you need more information
Hoping you can help me
Thanks


6678
Conscrypt fails when building grpc-java on Power7

I tried building grpc-java on Power by skipping Android and codegen specific stuff as mentioned here - https, I am facing the following errors:


6679
Update netty to 4.1.44+7

Is your feature request related to a problem?
There is a security vulnerability for Netty versions lower than 4.1.44. See: https
Describe the solution you'd like
Update Netty to at least 4.1.44
Describe alternatives you've considered
There are no real alternatives because we need grpc and want it to be secure.


6683
StatusRuntimeException trailers not sent to client8

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Trailers attached to a thrown StatusRuntimeException by a server implementation are passed to the client.
What did you see instead?
The trailers are not passed.
Steps to reproduce the bug
It should print test. It prints null instead.
If you uncomment the onError call and comment the throw line then it works.


6684
Seeing javax.net.ssl.SSLHandshakeException when enabling Conscrypt8

What version of gRPC-Java are you using?
What is your environment?
openjdk version "1.8.0_232"
What did you expect to see?
Enabling Conscrypt should not break gRPC call from a GCE VM (over CFE).
What did you see instead?
Steps to reproduce the bug


6685
OkHttpChannelBuilder.flowControlWindow(int) isn't working8

What version of gRPC-Java are you using?
Tried this with all of:
What is your environment?
What did you expect to see?
During server-side streaming RPC's, increasing the client's flow control window size should improve the rate at which the client can receive messages (particularly when the connection has some latency).
What did you see instead?
When using the OkHttp client specifically, the above expectation holds true as long as the flow control window size is somewhere between its default value and double the default value – the rate at which the client can receive messages scales linearly with the size of the flow control window. However, going even a single byte above that range results in the client receiving only a few messages, then stops receiving messages entirely. Even when the RPC stops due to deadline and a new streaming RPC is started over the same connection, no more messages are sent.
Steps to reproduce the bug
Though we first encountered this in our production environment, we've been able to recreate it in a controlled test environment like this:
a client that initiates the server-side stream and immediately discards messages as they're received
a server that produces a stream of uniformly-sized messages (~100 bytes) consisting of a random ByteString wrapped in a protocol buffer, sending them as fast as possible
a proxy sitting between the two that adds latency to all network communication (we're using toxiproxy)
all three components run in separate processes on the same machine (just a developer's workstation)
Here's our protos:
Here's how the OkHttp channel is created-
Enabling as much logging as possible (eg. looking at http2 frame logs) doesn't show anything useful, the server sends data until it just stops and there aren't any logs at that point
As shown in the above table, the drop in send rate from adding 100ms is surprisingly drastic (99% slower)
We repeated the same experiments with Netty. Netty is significantly slower in the ideal case (40k msg/s compared to 200k msg/s) but doesn't experience nearly the same drop due to high latency (20k msg/s). We can also increase the flowControlWindow past 2*default without detrimental effects.
We found some mention of BDP in this blog post (yes, I know this is for grpc-go). From a quick code search, it appears as though BDP is implemented in the grpc-java netty client code, but not in okhttp. Can't tell if this is actually related to the problems we're seeing though.


6686
Service config parsing should handle 'not specified value' as default value8

service config is a proto representation in json format.
so, the unspecified value should be in its base form (e.g. null string = "")


6689
Android: Execution failed for task ':app:mergeDebugJavaResource'8

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Build Successful.
What did you see instead?


6692
I see a lot grpc related warnings in catalina log9

What version of gRPC-Java are you using?
I don't know what grpc is for and why do I have it. I do use Firebase so maybe it comes from there. I see the following under maven dependencies:
I see there is version 1.27.0 but because I didn't put grpc dependancies in the first place, I don't know how to update and whether it will be a good idea to do so without breaking things.
What is your environment?
I see the above around 2 hours after tomcat server was up and running, then I saw the following 10 times:
and then tomcat undeployed and redeployed my war. A minute after redeployment I saw this
18 minutes after that I see
and it's been quiet since...
Steps to reproduce the bug: I have no idea. Even though it's been quiet since, I hope someone can shed a light here about what's was going on... Thanks


6694
Migrate binarylog to v1 proto from v1alpha9

No description provided.


6695
benchmarks should use protos from grpc-proto9

We need to upstream the java_package and java_outer_classname (and maybe java_mulitple_files). Our current values for those things aren't great, so we could fix them when upstreaming, but we need to make sure we won't break anyone (e.g., internal code).


6696
Netty is significantly slower than OkHttp9

What version of gRPC-Java are you using?
Tried this with all of:
What is your environment?
Both:
What did you expect to see?
Netty & Okhttp clients should have relatively similar performance.
What did you see instead?
OkHttp is about 5x faster than Netty.
Steps to reproduce the bug
See methodology here: #6685
In those experiments, a server-side streaming RPC is set up where Netty is benchmarked at receiving 40k messages/sec while OkHttp receives 200k messages/sec (with low latency).



6703
How to use the library for high throughput scenarios0

I have a simple RPC contract akin to:
I have a question how to use this library effectively for high throughput scenarios, where source of data server side is able to produce data at a higher rate than GRPC is able to dispatch the data over the network to the clients. The process that produces data uses native code, so needs to be initialized and torn down to free up resources once the RPC is over.
I was under the assumption that onNext(msg) would block at some point, but it seems that is not the case, and I essentially just end up running out of memory as netty tries to buffer everything.
After this realization I've moved to casting the StreamObserver<Data> to ServerCallStreamObserver<Data>, and essentially I check stream.isReady() before every stream.onNext(data). If it's not ready I just sleep in a loop until it becomes ready. This got rid of blowing up the memory problem.
This is obviously evil, and it seems to permanently steal the threads from the executor pool, preventing other clients to be served. Also, this sort of means I have to go on an unbounded thread pool to support an unbounded number of clients.
The benefit of this is that I have a clear execution path of when the call starts, or when it finishes, so my code can tear down the process that produces the data and free resources allocated if RPC for some reason breaks.
Ton of threads that are busy sleeping is obviously not great, so I tried to move to the implementation suggested by:
#2247 (comment)
However, if the client terminates prematurely, it seems my runnable just stops being called, and I have no indication that RPC call is now over and that I can clean up the resources related to the RPC call. Meaning my native code is now never freed causing me to leak resources.
Looking at the exception catching the clients going away, it seems there is very little GRPC stack frames in there, so I wonder if GRPC itself does not know if netty noticed the client going away:
Summary of my questions:
If using the async onReady approach, it seems I am never notified that the client has gone away. How can I know once the RPC call is over so I could clean up resources?
If I block in the RPC thread, is it expected that I will only be able to server numberOfThreadsInThePool clients at the same time? I assume if I use the onReady approach I can serve infinite clients as long as I don't block the threads?
Is there clear way to control how much buffering netty does, and ideally disable it? I would much prefer onNext to block if it can't put stuff directly on the network buffer, because it seems it's very hard to tame netty not to use stupid amounts of memory.
Is there any documentation around this? All the examples are pretty primitive without handling backpressure, and I have to crawl comments on issues to find clues of how to do this sensibly at scale without eating up all the ram.


6707
'channelLogger' is already in use when updating from 1.23.x to 1.24.x0

What version of gRPC-Java are you using?
What is your environment?
Mac OS X
Java 11
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Edit AbstractIntegrationTest in app/src/test/java and set useGrpc to true
Run SmokeTest either by delegating to Gradle in your IDE or with Gradle


6712
Android Gradle Build Errors1

What version of gRPC-Java are you using?
What is your environment?
Gradle 6.0.1
What did you expect to see?
I have previously encountered some errors when building an android project as shown here but resolved them by using the sample files provided in the examples. That was with a clean Android Studio project and using my actual proto file. I expected to be able to use that same setup to integrate grpc into my actual project and generate the required code.
What did you see instead?
When I integrate grpc into my actual project using the same elements from my gradle which worked in the clean project, there are numerous errors which occur no matter what variations I try and use to resolve them.
Is there a fundamental error in the gradle file as it is being used in my actual project?
I will provide the gradle files being used in my actual project for reference and then outline some of the errors that occur and the variations I have tried to use to resolve them.
Steps to reproduce the bug
Here is the project level gradle file before grpc integration:
Here is the app level gradle file before integrating any grpc items:
Here are the same two files after integrating grpc as following the format that was running on the clean project with the production proto file:
Top-level build file where you can add configuration options common to all sub-projects/modules.


6719
Upstream XDS interop tests proto changes to grpc-proto.1

Even though the grpc-proto is not being really used. we should upstream new messages to grpc-proto.
new messages: LoadBalancerStatsRequest, LoadBalancerStatsResponse


6720
INTERNAL: gRPC frame header malformed: reserved bits not zero2

Version:
Environment:
I sending punch of files through grpc, I send the files as chucks in form of bytes, the programs runs well, but when I send too much file chunks it gives me these error:
Sometimes give these error also
Any ideas that could help, it seems that the netty server not able to handle too much data to received or what?


6722
possible to chain CallCredentials, or use multiple instances?2

I might be missing something obvious, but it seems that there is no way to use multiple CallCredentials instances (I am looking in grpc-java 1.26.0) with a client stub.
The use case I am thinking of is that we have library code which offers a CallCredentials implementation which sets a header for "service name", and I'd like to pair this with https
Since AbstractStub.withCallCredentials(..) overwrites the credentials instance on each call, my first naive idea was to write a small CallCredentials implementation which just calls each of the two CallCredentials instances in order:
This is not allowed as each CallCredentials implementation calls applier.apply(..) or applier.fail(..), and io.grpc.internal.MetadataApplierImpl throws an exception when either method is called after it has been "finalized".
Is there no supported way in the CallCredentials design to be able to use multiple classes at runtime? It seems like this would force people into combining all of the credential logic that they want to attach to their client stub into one implementation - or in other words, composition is not possible.


6724
update reflection.proto from v1alpha to v12

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
grpc-services contains deprecated v1alpha/reflection.proto which instructs to use v1/reflection.proto, however the file is not shipped with this jar. It is unclear if there's a maven artifact that contains it that should be used instead.


6725
Update okhttp version from 2.5.0 to 2.7.42

This update of com.squareup.okhttp:okhttp:jar version from 2.5.0 to 2.7.4 would help resolve a reported vulnerability CVE-2016-2402
It would help us a great deal, if you can update the version
As shown in the mvn tree
Also, we would appreciate it if you can let us know, whether it possible to do a quick release as early as possible.
Requesting you to downport the com.squareup.okhttp:okhttp:jar version fix update to io.grpc:grpc-okhttp:jar:1.17.1 as well


6727
FR: Cancellable Response Iterators for Server-side streaming calls2

Is your feature request related to a problem?
I'm implementing a client that streams responses. It's really easy to do this:
But I want to stop processing at some point when I find the response I'm looking for:
This unfortunately leaves the connection hanging. I want to close the connection. This is surprisingly difficult, but it shouldn't be. Here's what I think is maybe the right way?
CancellableContext withCancellation = Context.current().withCancellation();
This seems unnecessarily complicated. I'm have no idea if it's even right.
Describe the solution you'd like
I'd like the return for a server-side streaming call to be subclass of Iterator that implements AutoCloseable, which when closed would cancel the request. That would allow me to do this:
Describe alternatives you've considered
If there were a way to explicitly request something like Context.of(responseIterator).cancelCurrentRequest(), that would also probably be fine.
I could explicitly kill the entire channel, but I'd prefer not to.
Notes
I'm still learning the Java gRPC interface, so it may be that I have overlooked an existing solution.


6728
Panic when empty serverlists from the grpclb balancer2

when grpclb gets empty address, it ends up causing uncaught exception in subchannel.


6733
java.lang.UnsatisfiedLinkError: no netty_tcnative_osx_x86_64 in java.library.path3

why cant load


6735
Unable to load the library 'io_grpc_netty_shaded_netty_tcnative_windows_x86_64', trying other loading mechanism.3

I am using io.grpc:grpc-netty-shaded:1.13.1 in my java application and on start up it gives debug level errors before finally extracting and loading the 'io_grpc_netty_shaded_netty_tcnative_windows_x86_64' from temp folder in windows.
I have tried the latest grpc netty shaded version as well and it gives the same debug level error at loading.
Please suggest the solutions which solves the problem rather than changing the log level kind of solution.
Though loading is eventually successful but it's irritating to see so many stack trace logging at the debug level as well. And every time application comes up the dll is extracted to temp folder increasing the temp folder size unnecessarily.
What is the correct java.library.path to look for the 'io_grpc_netty_shaded_netty_tcnative_windows_x86_64' so that it succeeds i n first attempt.
logs look like this -
First attempt to load
Eventually


6738
How do I set the GRPC_ARG_KEEPALIVE_TIME_MS parameter on the server?3

Make sure you include information that can help us understand your question.
By default, the GRPC_ARG_KEEPALIVE_TIME_MS parameter is set to 2h on the server. How can I change this?


6740
Is there a way to access MethodOptions from ServerInterceptor's interceptCall method?4

I saw this issue and someone commented that it's been "fixed". But after following the link I'm still unsure about how it can be done.


6744
Add an API for injection-frameworks/spring-boot to create stubs of a specific type4

Is your feature request related to a problem?
I want to automatically inject stubs into beans/components without having to create them explicitly.
Currently I use reflection to invoke the factory methods/constructors, but that broke unnoticed for me. So I would like to have an API that is future proof (and extensible).
Describe the solution you'd like
A method in the grpc-java API library, that can be used to create the stubs for me, so that I don't need to guess the way to do it:


6750
XdsNameResolver should not split host:port5

The first thing XdsNameResolver does is split the host and port:
The values are then recombined later. For example:
XdsNameResolver should not do this and instead treat the string as an opaque string. There are times the host and port may need to be split (e.g., VirtualHost matching, although even there it seems inappropriate; but that's another discussion), but in general we want the majority of the system to treat it as an opaque string.


6755
Many LB-related Javadoc warnings5

These have cropped into the build, and some I think have been here for multiple releases (some look almost a year old)


6757
CallOptionsTest is flaky5

i've seen this more than one time.


6760
RELEASING is out of date6

It surprising that it matters which system is used to deploy to Maven Central, but leaving that aside I doubt anyone at Google is still deploying with Windows 7 or   Mac OS X 10.12.6
We deploy GRPC to Maven Central under the following systems:
Other systems may also work, but we haven't verified them.


6761
Profiling for crypter's decryption for ALTS Channel.6

Under heavy traffic using ALTS, I briefly profiled the client to see where the cpu time went through VisualVM. It seems that it spent significant time running javax.crypto.ShortBufferException.<init> ()
Not sure how much these numbers reflect reality but it seems that there is room to improve. The reason why ShortBufferException is created and thrown is to trigger the caller to allocate a bigger output buffer. (code) Once it's caught, the caller CipherSpi will create a temporary big enough buffer, decrypt the data into it by recalling the cipher, and copy it into the origianl output buffer. (code)
Since this routine is being heavily called, it'd be great to have some optimization not to have ShortBufferException and cost caused by a temporary buffering.


6762
cannot run jmh benchmarks6

Error: Could not find or load main class org.openjdk.jmh.runner.ForkedMain
one issue is jmh plugin and gradle version is not matching, but there are more issues than this.


6765
MethodDescriptor.setRawMethodName breaks Immutability if multiple types of transport are used6




6775
Include grpc-android and grpc-android-interop-testing in main build7

Mentioned in #6132 (comment), dependencies in grpc-android and grpc-android-testing are not synced with the main build. We should maintain them using the same versions of dependencies.


6782
Lint error: Duplicate platform classes8

Hello, trying to use this library in order to connect to GCP and when trying to build the apk it gives me the following Lint errors:
../../build.gradle: commons-logging defines classes that conflict with classes now provided by Android. Solutions include finding newer versions or alternative libraries that don't have the same problem (for example, for httpclient use HttpUrlConnection or okhttp instead), or repackaging the library using something like jarjar.
../../build.gradle: httpclient defines classes that conflict with classes now provided by Android. Solutions include finding newer versions or alternative libraries that don't have the same problem (for example, for httpclient use HttpUrlConnection or okhttp instead), or repackaging the library using something like jarjar.
There are a number of libraries that duplicate not just functionality of the Android platform but using the exact same class names as the ones provided in Android -- for example the apache http classes. This can lead to unexpected crashes.
To solve this, you need to either find a newer version of the library which no longer has this problem, or to repackage the library (and all of its dependencies) using something like the jarjar tool, or finally, rewriting the
reports.zip
code to use different APIs (for example, for http code, consider using HttpUrlConnection or a library like okhttp).
Note: This issue has an associated quickfix operation in Android Studio and IntelliJ IDEA.
To suppress this error, use the issue id "DuplicatePlatformClasses" as explained in the Suppressing Warnings and Errors section.


6786
Race in StreamObservers.copyWithFlowControl8

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
That StreamObservers.copyWithFlowControl would deterministically copy values
What did you see instead?
That StreamObservers.copyWithFlowControl has a race that can lead to non-deterministic behavior
Steps to reproduce the bug
The following test class reproduces the bug (generally after a hundred thousand attempts or so)
Why this race happens
If the FlowControllingOnReadyHandler.run method is interrupted between target.onNext and the next target.isReady call, it is possible for it to never see that the target was in a not ready state, meaning that both a new invocation of the ready handler will be started, and the current one will continue.  In this test this is exhibited by the list being out of order.
General issues with the ready mechanism
This race is caused by a more general design flaw of the isReady/onReady mechanism used across ClientCall, ServerCall, and CallStreamObserver.  The typical pattern of
always has this race of the stream transitioning from not ready to ready between the call to next and the call to isReady.  Avoiding this race is very non-trivial, especially given the limited invariants of the onReady call (there doesn't appear to be any guarantee that this method isn't called spuriously when the stream was already ready).  I've been trying to find a good example of this for a while, but this is the first concrete example I've come up with.
Potential solution
One potential fix would be to have StreamObserver.onNext (and {Client|Server}Call.sendMessage) return a boolean atomically indicating that the underlying stream is ready, and to add an invariant that onReady will be called if and only if the underlying stream transitions from a state where it is visibly not ready to one where it is, but this would be a breaking change on any implementations of these classes.  The above pattern would then become
Note that this solution only works when the messages are being pulled.  When the messages are also being pushed asynchronously, rendezvousing the message and the ready event would still be tricky.  For this use case, a whenReady(Runnable) mechanism that invokes the handler exactly once (immediately if already ready) would be preferable.  This approach while more general would be more expensive than the one above as it requires creating a runnable for each message that is sent.


6789
Custom transport for REST, Soap, ...8

We like the interfaces grpc provides and would like to use them to communicate to our legacy services too over REST, SOAP (and TCP for that matter)
We are aware of the proxy that already exists for REST - but it doesn't work for us.
We want to use as much of "vanilla" GRPC as possible and provide as light an integration as possible so we can reuse all the existing goodies that have been built into the framework (such as the opencensus integration)
Picking REST as an example for this question. I've had a poke around and the plan is to:
annotate the proto service definition using the existing HttpRule annotation
the Rest ClientInterceptor would change the message serializer/deserializer to use JsonFormat from protbuf utils and add the HttpRule instance to the metadata which is pulled from the MethodDescriptor so it can be pulled out by the Transport.
My questions are:
are we on the right path here for how the framework is designed to work with new transports?
are there any gotchas that might catch us out with the method we've chosen above.


6795
IllegalStateException: listener unset9

What version of gRPC-Java are you using?
What is your environment?
CentOS Linux release 7.6.1810
OpenJDK 64-Bit Server VM (Zulu 8.38.0.13-CA-linux64) (build 25.212-b04, mixed mode)
What did you expect to see?
No errors
What did you see instead?
Steps to reproduce the bug
Found by internal load testing
I found #6486 but there OP is using a
ArrayBlockingQueue with capacity 1024, whereas I'm using a SynchronousQueue, which is unbounded. Unlike the OP, I'm not seeing a RejectedExecutionException. The only thing we do is set a bounded thread pool executor that sends out usage metrics. A test project is available on GitHub.


6796
Resource leak exception in logs9

What version of gRPC-Java are you using?
What is your environment?
CentOS Linux release 7.6.1810
OpenJDK 64-Bit Server VM (Zulu 8.38.0.13-CA-linux64) (build 25.212-b04, mixed mode)
What did you expect to see?
What did you see instead?
Recent access records:
Steps to reproduce the bug
Found by internal load testing
The only thing we do is set a bounded thread pool executor that sends out usage metrics. A test project is available on GitHub.


6797
Tracking issue for deprecating ATTR_LOAD_BALANCING_CONFIG9

ATTR_LOAD_BALANCING_CONFIG is marked as deprecated, remove it probably in 1.30.x.


6806
ClientCallStreamObserver.disableAutoInboundFlowControl doesn't disable initial flow control0

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Calling ClientCallStreamObserver.disableAutoInboundFlowControl would disable all inbound flow control not explicitly initiated by the user.
What did you see instead?
The default behavior of requesting one initial message for streaming responses and two for unary responses is still applied.  It's worth noting that in streaming request server calls, disableAutoInboundFlowControl disables all inbound flow control (for unary requests, this doesn't even make sense as the handler isn't invoked until the request is received).
Steps to reproduce the bug


6808
GRPC will keep retrying (until RPC timeout) if a user uses a bad service account key0

What version of gRPC-Java are you using?
What is your environment?
What do you see?
When a user uses an invalid service account key (like one that was deleted), it is treated as an UNAVAILABLE error. Unavailable errors are interpreted as ones that should be retried by client libraries; consequently the application will attempt to retry this operation with invalid credentials until the RPC timeout is reached (usually 10 minutes).
What do you expect to see instead?
When a user uses an invalid service account key to authenticate with GRPC, it should yield an UNAUTHENTICATED error which indicates the operation should not be retried.
Steps to reproduce the bug
This is most easily reproduced through experimenting with the client libraries.
Create a service account and service account key, download it.
Delete the key entry in Cloud Console (so the downloaded key is no longer valid).
Authenticate with some google service using that key. Here is an example using Pub/Sub like this.
Additional details:
Suggested fix:
The code that controls this behavior is in GoogleAuthLibraryCallCredentials. I don't think all IOExceptions should be retried though.
In this case, one can see that the exception has a .getCause() which is HttpResponseException and it has .getStatusCode() == 400 which indicates a bad request. This is the error thrown if the user provides an invalid service account key.
Would it be possible to modify it so that if it is an IOException, it will examine the getCause() of the exception and throw UNAUTHENTICATED if the cause is HttpResponseException with status code 400?
Example of exception that you see:


6811
Error in handshake1

How I made a channel -
host is a valid https url.
grpc server is written in Go and deployed in cloud run and is not installed with any custom certificates.
When I make a call to a gRPC service, I get handshake error like this .
This issue is intermittent.


6814
How to instantiate a BlockRpcChannel for Generated Java1

Not sure if this is the right place, but I'm having issue with using the generated java code from my proto.
I'm just trying to utilize the generated Java Client.  I looked at the example:
And I expected the newBlockingStub to take a Channel (ManagedChannel).  In my case, its' expecting a BlockingRpcChannel.  I can't find any examples of how to create a BlockingRpcChannel
Question:
Did I somehow generate the java client incorrectly from the proto
If I did generate it correct, how do you create a BlockingRpcChannel?
Also what is there a difference between the two interfaces?
More Details are posted here (build.gradle, etc):


6817
The Ready event is missed in RetriableStream. Sublistener::onReady is called but masterListener.onReady() is not.1

What version of gRPC-Java are you using?
I am using 1.26.0, and I have tried 1.27.2 and latest code 1.27.3 (compiled by myself).
What is your environment?
Windows 10, with openjdk 11.0.2
What did you expect to see?
I expect to see the onReady is called, then trigger masterListener.onReady().
What did you see instead?
onReady is called, but masterListener.onReady() is not called.
Steps to reproduce the bug
Sorry, it is hard to reproduce, but I can analyze the code to explain.
In drain(Substream) of RetriableStream, the new state was generated when all the entries were runWith the substream. but in the start(), a StartEntry was added, then the stream started after runWith. There is a possibility that the stream has sent the data successfully and call onReady to notify (another thread), but the new state which include the substream in the drainedSubstreams was not generated, then masterListener.onReady() was not called.


6821
Infrastructure for generic JWT authentication2

Is your feature request related to a problem?
The problem I see is that it is described in documentation how to implement JWT authentication for a custom (non-Google) server so everyone has to repeat the same code that is shown in the documentation and it could lead to invalid implementations.
Describe the solution you'd like
It would be great if the grpc-java project offered an infrastructure (like set of interfaces/classes) that would drive gRPC users to the right implementation of JWT implementation, for both client and server.
#5915 introduces a new example on JWT but I still believe that a set of interfaces/classes to use is a better way.
Describe alternatives you've considered
Keep all as is.
Additional context
I'm author of the grpc-java-jwt library that contains two modules:
core with the basic infrastructure for any JWT-based authentication
keycloak with implementation for Keycloak.
It would be great if grpc-core contained basically the same as the core.
If you show me where I should place the new code, I could prepare a new PR, if you want.


6825
Gradle Build not executing properly2

Currently I'm trying to set up a demo project for gRPC.
I'm encountering a problem regarding the generated code.
My gradle file is attached. I've tried Gradle 5.6 and Gradle 6.0.
The errors persist:
I hope there is a fix.
Best,
Nicolas


6832
Duplicate class error3

After running build with grpc-gradle plugin two sources sets are generated.
The classes between these two source sets are duplicate and causing conflicts in compilation.
Please let me know what am I missing. Thanks


6833
Remove dependency on javax.annotation.Generated3

A similar issue was previously reported in #5343, which I cannot reopen. The problem with the solution proposed there is that the upstream library that is pulled this way is licensed under the CDDL. You should probably talk to a lawyer about the implications of that, and whether they apply here.
In any case, given that gRPC seems to be intended to be licensed as Apache 2, it seems wiser to remove the dependency entirely or at least provide an option to avoid it.


6836
Question regarding the behavior of ServerInterceptor.interceptCall3

Hi I am trying to figure out why my two interceptors are bouncing back and forth repeatedly. I have a RpcServiceModule that provides an ExtendedServerServiceDefinition:
ExtendedServerServiceDefinition providePortalService( PortalServiceRpc portalServiceRpc, UserStatusInterceptor userStatusInterceptor, RequestValidationInterceptorFactory requestValidationInterceptorFactory, ClientStatusInterceptor clientStatusInterceptor) { return new ExtendedServerServiceDefinition( portalServiceRpc.bindService(), List.of( clientStatusInterceptor, userStatusInterceptor)); }
After stepping through the code, I saw that the userStatusInterceptor always gets called first, meaning that the interceptors in the list are called from the last to first?
Secondly, in my Interceptor's implementation, I only override interceptCall, which checks the status and throws if the status is not proper. Each interceptorreturn Contexts.interceptCall(current(), call, headers, next), but it seems like the calls are bouncing back and forth even though to my understanding it should just go from one interceptor then on to the next and finish if all is good right? Please let me know if I am overriding the correct method or if I should be overriding interceptForward instead. Thank you!


6842
java.lang.IllegalStateException: lbHelper is null4

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
no exception error
What did you see instead?


6847
Avoid sharing classes in test scope between multiple modules4

Example: FakeClock is a utility class for unit testing. However, it is in grpc-core's test scope but used for cross modules. This is problematic as build tools may not pull test sources to a dependent module. We have hacks in build files to force pulling it into classpath for test scope.
We should eliminate such usages before having more and more such hacks (grpc-rls started doing it). They should be put into grpc-testing module and compiled into the artifact as a utility for tests. If they are not intended for users, we can annotate them as Internal.


6848
Enable grpclb for java implementation4

Hello,
I am a .NET developer trying to communicate java client with custom C# implementation of lookaside server. The question is if somebody may share working configuration of how to enable grpclb in Java? I have tried examples and read release notest but without success.
Steps I have tried before:
when working with JAVA I have faced few pages over the internet with some puzzels but I can not get them working together.
My current setup:
is it required to configure dns resolver like this .nameResolverFactory(new DnsNameResolverProvider()) ?
how to force grpclb policy for ManagedChannel?
it is required for lookaside server to listen to port 80 or 443 or port can be variable when setting target?
is it required to support TXT records? (I see a log like this FINE: No TXT records found for grpc-server-balancer)
is it required to support grpc service config?
So sorry for "newbie" questions bear in mind I'm not a full blast Java engineer
Regards


6849
Problem with TLS,Cert,Sec?4

Hello all,
Im student from Slovakia and I try to create my first app.
I have app app deployed on Openshift. I cant resolve the following error on client side:
Thanks for all answers. Ports are different because Openshift work curious



6850
Port is bound if start is Interrupted5

What version of gRPC-Java are you using?
GRPC 1.25.0, but the problem can be found also in master
Netty 4.1.43.Final
What is your environment?
What did you expect to see?
I expected GRPC server not to keep a bound port if the start fails due to interruption.
What did you see instead?
the server fails correctly but the port is still bound.
When the server is starting for the second time, the port is still bound which leads to a failure.
Steps to reproduce the bug
A little background story: I have nothing to do with GRPC, I am trying to implement restarting Spring Application Context on a signal (HTTP REST call) due to reloading the whole app (the main reason is that the database structures have changed). The signal can come at any point when the web server is alive, which can be even before the application context is fully refreshed. If the signal comes and there is a thread creating an application context, we interrupt it, discard its result, and start a new context. I hope this explains the role of interruption in my use case.
One of the beans is a GRpcServerStarter which encloses Server (NettyServer). If the initialization of this bean is interrupted at the wrong stage (server is binding to a port), then the future.await() is interrupted, server crashes, bean is not created, application context is closed. This however still leads to the port being bound, and the binding leaking.
After this interruption, there is no way to create a new server as the port is used.
HandlerMethod details:
I assume that a fix should handle better the InterruptedException by trying to unbind the port. I guess that this bug could be fixed in Netty, however from theit point of view, the binding can still succeed; you were just not patient enough to wait for the result, and it is your problem that you crash.


6853
How to transfer server-side exception to client?5

When my grpc server creates a new SRE, and adds the causing exception:
responseObserver.onError(new StatusRuntimeException(Status.INTERNAL.withCause(t)));
(where t is an IllegalArgumentException)
... when the client catches the SRE, the Status.cause field is null. If I also add a 'withDescription("some text"), the description is available in the client.
@ejona86 wrote:
@ericmandm, no, your issue is different. The cause is not transmitted between the server and client.
@ericmandm wrote:
Ah Ok, thanks... and sorry I missed that in the documentation.
Is there a best practice for sending the details about a server side exception information to the client? For example, is putting json text in the description field, then deserializing at the client end a decent strategy?


6860
http2 on openshift6

Hi everybody,
do you have somebody experience with grpc on openshift? Is possible to configure there a http2 protocol? Thanks


6862
gRPC-Java Inflater to support reading Z_SYNC_FLUSH mode of zlib6

Is your feature request related to a problem?
Describe the solution you'd like
Inflater routines do not support the zlib functionality of Z_SYNC_FLUSH. This functionality needs to be added to Inflater. One other thing to note is grpc-cpp library supports this (https)


6866
android-interop-testing spews lots of warnings6

For the generated code, we should probably disable the warning, like we do elsewhere:
The rest look like they'll need changes, but I just too a cursory glance.


6868
Teach Android build -PfailOnWarnings=true6

Multiple of our CIs currently run with -PfailOnWarnings=true. This is observed by our main build.gradle to enable -Werror:
We should observe the property for Android as well. This will help keep our builds clean and prevent things like #6866.
Android also has a fair number of linter warnings. It would be nice if we got to a place where they were covered by -PfailOnWarnings=true as well, but that could happen later (in which case we should create a new issue to track it).


6892
Add grpc-testing-proto to grpc-all9

This is to expose the generated code's javadoc and suppress the generated code's jacoco results. Currently javadoc is not generating documentation for the generated code.
I expect this to be non-trivial, but not especially difficult.


6893
Add grpc-alts to grpc-all9

This is to expose the code's javadoc and suppress the generated code's jacoco results. The main issue is suppressing the generated code's jacoco results, since the generated code is in the same package as the manually authored code.
The jacoco issue looks really ugly. We may need to rework our usage of the gradle plugin to compile the generated code into a separate destination directory, so then we can filter the entire directory instead of individual classes.
While it would be good to have a way to reliably filter generated code from jacoco results, it is probably easiest to move the generated code into a different package.


6898
compile protoc-gen-grpc-java failed on architecture x86_64(mac OS)9

I try to compile the protoc-gen-grpc-java followed by this instruction,but i get the erros:
The detail erros:
Making all in src


6906
LoadBalancer/Subchannel might need keep in TRANSIENT_FAILURE until READY0

This is the same issue as #6650 for general lb/subchannel.
If you have enough backends and they are all unavailable, then it becomes likely that at least one of them will be CONNECTING. That will delay RPCs and avoid giving them a clear error message.
When a subchannel becomes TRANSIENT_FAILURE, we want RR to continue considering it (for channel state and picking logic) TRANSIENT_FAILURE until the subchannel becomes READY. That means it would "ignore" CONNECTING subchannels, except for new and recently-READY subchannels.


6910
java.lang.OutOfMemoryError: Direct buffer memory1

What version of gRPC-Java are you using?
What is your environment?
Hi,
i face sometimes a memory issue of my client app that is trying to connect to grpc server.
What happen ? my client app is not able to connect to my grpc server (for some reason, for example grpc server down). So, there is a retry each minutes until grpc server is reachable.
And when finally the server is reachable, sometimes i face an outOfMemory issue. On client side, i only try to get from server a simple json payload  and the grpc message size is not heavy (less than 4mo that is the max size if i understood).
I need to stop my java process in order to start without any exception.
Any hints about this memory issue ?


6914
RoundRobinLoadBalancer hangs on subchannels creation1

What version of gRPC-Java are you using?
What is your environment?
Linux  4.9.0-8-amd64  Debian 4.9.144-3 (2019-02-02) x86_64 GNU/Linux
openjdk 11.0.1 2018-10-16
OpenJDK Runtime Environment 18.9 (build 11.0.1+13)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)
What did you expect to see?
LoadBalancer will not hangs on subchannels creation
What did you see instead?
Steps to reproduce the bug


6917
Bug / FR: Shaded Netty artifact doesn't include Netty-Epoll or Netty tcnative1

What version of gRPC-Java are you using?
What is your environment?
Netflix uses the shaded netty jar in its gRPC applications.   This jar helps avoid netty conflicts, but fails to load Netty Epoll/KQueue, as well as Netty TCnative.   This results in subpar performance of gRPC, notably in allocation profiling.  I think this is nearly a bug, since these libraries should likely be the default, and it's difficult to enable them with the shaded artifacts.  Thus, I am suggesting that these deps be shaded and included for developer convenience.
If this is not feasible, it would be really helpful to include some example code showing how grpc users can do this themselves (perhaps in ALTS / GCP artifacts?)


6919
How to support existing REST APIs written in Java1

We have a microservices written in java where we have exposed REST APIs being consumed by  various clients.We want to migrate to gRPC while supporting the old clients.
I came across the grpc-gateway  but it has to be implemented in Go which I don't want to use.
So how to support existing REST APIs written in Java ?


6921
Building gRPC with Bazel: Guava lists don't have collectors2

I'm including the gRPC repository into my Bazel WORKSPACE like this:
I have also copied over the Maven dependencies from Github.
Now, when I try to include Guava in my BUILD dependency, I add this: "@com_google_guava_guava//jar",.
The following results in an error:
Is this maybe not supported in the Guava version used in gRPC?
Would I be able to override which Guava version I'd like to use if building with Bazel?


6922
An Authentication object was not found in the SecurityContext2

How do we fix this ?  Issue when adding @PreAuthorize in gRPC Method... For rest it works fine...
Note: : Application is deployed in wildfly


6925
Update Netty beyond 4.1.45 (per CVE-2020-11612)2

Is your feature request related to a problem?
There is a security vulnerability, CVE-2020-11612 in netty, before 4.1.46. (This is flagged by build-time tools, such as the commonly used OWASSP dependency-checker.)
My reading on this one is that it particularly affects any use of netty code in a server situation, where untrusted clients data is able to reach the server directly and be decoded:
The ZlibDecoders in Netty 4.1.x before 4.1.46 allow for unbounded memory allocation while decoding a ZlibEncoded byte stream. An attacker could send a large ZlibEncoded byte stream to the Netty server, forcing the server to allocate all of its free memory to a single decoder.
i.e. it affects GRPC server implementations but not clients (unless they are communicating with an untrusted/compromised server, I suppose?)
Describe the solution you'd like
Update shaded netty version to at least 4.1.46 (4.1.48 is the latest, at time of writing.)
Describe alternatives you've considered
Only other option is to ditch use of grpc-netty-shaded in favour of managing separate dependencies. Which negates the whole purpose of having grpc-netty-shaded, and can lead to issues with other dependencies that require (different, conflicting) versions of netty.
Additional context
The table in this project's Security policy doc suggests that a future 1.29.x is earmarked to use 4.1.48.Final.


6926
Performance Question2

mu-scala is a Scala wrapper atop of gRPC. Currently, it's at gRPC 1.28.x and we've observed performance degradation. Details here.
As you can see in the comparative, the big hop happened with the 1.27.x release, with this new feature:
I've tried to revert it back (using that java system property to false) but nothing changed apparently, so the problem may be somewhere else :thinking_face: . I didn't check the okhttp version though.
Am I missing something? Could you please point me out to any other grpc benchmarking reference? Thanks.


6928
OpenCensus 0.26.0 update2

Can we update OpenCensus to 0.26.0 from the current 0.24.0?
if not, what needs to be fixed before we can proceed?


6929
happens-before in StreamObserver2

It's not clear to me what concurrency guarantees are provided in StreamObserver. For example given below where the observer is converted to a future:
Given that onError/onNext/onCompleted may be called from different threads, is there a happens-before relationship (according to the Java Memory Model) between subsequent calls to the observer or not, assuming the observer is not shared between multiple calls? This is not documented anywhere. If there is a happens-before, then the volatile on value is redundant, if not, then it would be required.


6933
Is it possible to run gRPC service inside a tomcat container ? 3

I have a Spring Boot application running on a tomcat server with a few REST endpoints exposed.
As gRPC can be deployed as a standalone service , it manages it's own connections and port. Wouldn't it be problematic to go with this approach of running it on a tomcat server ?


6934
Mutual TLS with chained (root ca -> intermediate ca -> client) certificates3

I can't get mutual tls to run with a certificate chain on the client side.
I ran https successfully with mutual tls enabled but the client's certificate file ../../testing/src/main/resources/certs/client.pem is just a plain certificate without the full chain.
I tried to get this to run with a client cert that was signed by an intermediate cert which is in turn signed by a (self-signed) root ca cert.
The client is using a chained certificate file that contains (in this order) its own cert, the intermediate's cert and the root's cert.
Both server and client use the root ca cert.pem as their trustCertCollectionFile.
Both server and client have the ip address 127.0.0.1 in there subject alternative names and in the client I changed the line
Is this supposed to work? I can generate test certificates to reproduce the problem if needed but note that the following openssl command line claims that my certs are ok:
Note also that the sample runs fine with my certs when I do not use mutual TLS although the server also uses a full chain certificate.


6939
Xds interop test is failing in v1.29.x3




6943
Logspam from Netty if sending when cancelled4

What version of gRPC-Java are you using?
What is your environment?
Docker image: adoptopenjdk/openjdk8:alpine-slim
What did you expect to see?
I expect to see no unnecessary logs.
What did you see instead?
Unnecessary logs.
Steps to reproduce the bug
To reproduce, create a long lived server side streaming rpc, with a Netty server that has .maxConnectionAge() and .maxConnectionAgeGrace() set. Observe that when the age and grace period has passed you receive the following log:


6952
Add ability to change backoff policy5

The gRPC Go APIs allow you to configure the exponential backoff policy, can we get the APIs same APIs in java? There is in fact a TODO to add this feature!
Use case is that I'm running a set of services locally. I would like to set the maximum retry backoff to 5 seconds, since there's no chance of causing excessive load to any sort of cluster.


6954
Receiving Unknown Status code on hostname with InetSocketAddres 5

What version of gRPC-Java are you using?
version 1.24.2
What is your environment?
What did you expect to see?
Status code unavailable
What did you see instead?
Status code unknown
Steps to reproduce the bug
used :
where address contains a hostname that does not exists
got back StatusRuntimeExcetpion with cause of  UnresolvedAddressException and code Unknown


6964
Authentication failure with bidi streaming is not notifying the client6

What version of gRPC-Java are you using?
What is your environment?
Java version: 1.8.0_241, vendor: Oracle Corporation,
What did you expect to see? && ### What did you see instead?
I would expect that when calling
inside ServerInterceptor, that client's onError or onComplete will be called in ClientResponseObserver. But there is no notification sent to the client whatsover. With blocking GRPC calls there is an exception raised on the client side when trying to call the method e.g. if changing https to fail authentication, but not with bidi streaming.
Steps to reproduce the bug


6971
SSLException: handshake timed out due to long java GC pauses and default handshake timeout being 10 secs7

We have a service which establishes 1000s of ssl based grpc connections to our backend servers, while trying to process a lot of other data. Due to this we encounter long java GC pauses, sometimes >10 secs.
The default handshake timeout is 10 secs
As a result of this, we encounter multiple handshake timeout errors in the order 1000s as well. Is there a reason why this is not exposed to the client? so that the caller can change the value.
Is there any other alternative approach to solve this and not encounter so many handshake timeouts. May be an interceptor and queue up the requests if the handshake is not complete?


6974
How To use Java client With TLS But ignore the service endpoint certs7

I'm asking for help if I want to ignore the service certs,How cloud I do this throw java client since
it is easy through httpclient or with GUI tools such as postman.


6975
wrong version on readme?7

Hello.
I think there is a small failure on gradle non-Android dependencies readme.md
This are the gradle dependencies writted on documentation:
shouldn't be version 1.29.0 all of them?
Fixing this in my gradle file have solved a lot of cannot find symbol java errors
Best regards
Nacho.


6981
Support OSGi Remote Services by enhancing grcp protobuf plugin code generation8

I would like to implement an OSGi Remote Services distribution provider based upon grcp.  OSGi Remote Services is a specification:
that allows OSGi services to be exposed for remote access by consumers via a distribution provider.   ECF's implementation of remote services:
has support for pluggable distribution providers:
One of these providers uses grcp/protobuf as a distribution provider
To make this distribution provider easier to use, it would be valuable to be able to have grcp protobuf plugin generate two additional classes:
An OSGi service interface class.   This is an interface declaration that has all of the non-streaming method declarations in a single interface class...e.g. for the grcp health service example, proto would be:
Also desirable would be an abstract superclass implementation of this service interface class to allow naive subclass implementations of the remote HealthCheck service, for example:
I've submitted the following pull request as an initial suggested implementation of changes to grcp plugin to support generation of the service interface and abstract impl.


6982
java.lang.NoSuchFieldError: NETTY_SHADED when upgrading from 1.27.2 to 1.28.08

What version of gRPC-Java are you using?
1.29.0 -- although I tried all gRPC versions from 1.27.2 to 1.29.0 to determine the exact version of breakage and it looks like it occurs between 1.27.2 (working) and 1.28.0 (not working).
What is your environment?
My development machine has macOS Catalina 10.15.4 with Java 11.0.6 installed
I'm seeing the same issue in production, where we run the openjdk:11-jre-slim-buster Docker image, which contains Debian + Java 11
We're using Kotlin 1.3.72, compiled for the JVM
What did you expect to see?
I expect to see the content from the content service (in this case, website copy).
What did you see instead?
I get an error message (see "Steps to reproduce the bug")
Steps to reproduce the bug
I don't see any error logs in the shell where I'm running the grpc service.
This PR seems relevant: #6774
Thanks! Let me know if you need any more information.


6983
bidi-stream flow control8

We use grpc bidi-stream in product.
It will be OOM , if client consume lower(whatever reason).
How to control stream memory size ?
I test manual flow control , It is too slow .
I use ServerCallImpl#isReady() judge stream if can execute onNext().
The DEFAULT_ONREADY_THRESHOLD is not enough, my single msg about 80KiB, how can i configure this.
Can any other idea to resolve this problem?


6984
Would you accept a pull request for gRPC-webpieces-http client and gRPC-webpieces-server?8

Looking into doing work for gRPC generation for our microservices and webpieces is a BUNCH of webpieces although with a backpressure feature wired through 'every' layer even in http1.1.  I know http2 'has' backpressure though in webpieces, the sockets get turned off on a backpressure event due to controllers not keeping up leaving CPU to concentrate on finishing existing requests before turning backpressure on.  Instead of netty, webpieces has it's own nio layer(a library nio layer not a framework like netty library so easier to compose with).
thoughts on a pull request in the future?  It may take our organization some time to create the implementation, so we would fork the repo and hopefully be back in a couple/few months to do a pull request.


6985
generate an async interface8

For some reason the generated code is an abstract class like so
public static abstract class AuthApiImplBase implements io.grpc.BindableService {
could we possibly slightly change that line to
public static abstract class AuthApiImplBase implements AuthApi, io.grpc.BindableService
so that there is an interface.  This can be very powerful for extensibility.  I would like to implement that interface right now on clients and servers and hide some json underneath it while we slowly get to gRPC from json(ie. getting our foot in the door this way at the very least so can swap it out entirely later but unfortunately with no interface here, it has made it a bit harder).
Another thought...java only allows extending from a 'single class' so in the future it would be better that one does not have to extend AuthApiImplBase as well so services could extend another class but I am guessing that would be too huge of a rework at this point.


6986
Will there be a flag for generating CompletableFuture methods in the future?8

Coming from twitter with extensive 'scala.Future' use which is just like java's CompletableFuture, I had a question on the roadmap...
I am wondering the roadmap of java-grpc generation and if non-streaming, simple request-response methods will in the future be able to use CompletableFuture like so (perhaps via a grpc gradle plugin configuration change?)...
public CompletableFuture method(GrpcRequest request);
such that synchronous generation is NO LONGER needed.  if you want sync, you can then call it like so
thanks,
Dean


6989
Tracking issue for ServerCall.getServer()8

Introducing this API to expose the Server instance that dispatches the call on ServerCall interface. Services that need to access the server (e.g., ProtoReflectionService) can obtain the server reference with a server interceptor, without the callback logic of NotifyOnServerBuild.


6994
Retry policy does not provide visibility into failures9

Is your feature request related to a problem?
A retry is configured for UNAVAILABLE
And there was user misconfiguration (a typoed hostname, or no ALPN provider)
Library consumers get no notification that a retry is underway or the reason for the retry.
Describe the solution you'd like
There are several options:
Allow the library consumer to provide an Observer during channel creation. It could get notified for many different types of events that could happen during a channel's lifetime.
Log to a logging facade that library consumers can supply their own implementation for. This is particularly important with shaded dependencies (which gRPC provides their own).
Describe alternatives you've considered
The alternative we implemented is to remove the retry policy configuration from our channel. Not much of an alternative.
Additional context
Discussion on issue #1577
cc: @ejona86


6995
Quick question on url path of gRPC protocol...9

@ejona86 @voidzcy as I assume you know this off the top of your head.  On the simple helloworld server (I have the example working of course), I don't see a way to modify the base url that grpc comes in on.  Does grpc have to be the root?  I mean for example, is all grpc protobuf binary forced to come in over?
I think the full url of an endpoint from what I have seen is
where a proto file of package orderly.something and a service called AuthApi and a method called authorize would be
do I have this correct?
Oh, and one more thing. I then assume the content type MUST be specified to application/grpc ?
I was not sure looking at this https
which has application/grpc+proto vs. application/grpc+json.
thanks,
Dean


6996
Question: WS.Reputation.1 reported by Symantec in Windows binaries from repo1.maven.org9

Binaries for Windows downloaded from https are reported to have "WS.Reputation.1" by Symantec Endpoint protection.
Are you guys responsible for those binaries ?
Url:


6997
Test that newly-added Java 8 ALPN works9

In https Java 8 received a backport of the Java 9 ALPN API. It appears to be available starting in 8u251 or u252. Support was added to Netty in netty/netty#10196 and released in 4.1.49.
Since we do some of our own detection, we should make sure it works with these more recent Java 8 versions. Even though Java 8 has very poor AES GCM performance, if it is an additional option it can help users on nicher platforms why may not need high throughput. We will also need to update SECURITY.md.
It may make sense to split out a separate issue for OkHttp.


7002
BaseDnsNameResolverProvider exception with 1.29?0

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
No exception being thrown.  I have a project that contains peer dependencies that use 1.28.  I then installed a library that used 1.29.  I force 1.29 on all the peer dependencies. I expect 1.29 to be backward compatible.
What did you see instead?
It looks like in 1.29 BaseDnsNameResolverProvider was removed. Is 1.29 backward compatible?  would it break library dependencies that utilize 1.28?
it seems to crash when


7006
Upgrade to Gradle 6 to support Java 130

Is your feature request related to a problem?
If you run gradle with Java 13, you will get "Unsupported class file major version 57". This can be fixed by changing to Gradle 6.
Describe the solution you'd like
Patch:


7007
netty should use BDP by default 0

Since now we expose Netty{Channel,Server}Builder#initialWindowUpdate via #6979. We should use it by default.
We probably need to use smaller windowSize than current DEFAULT_FLOW_CONTROL_WINDOW 1MB.


7022
Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true2

What's the problem ?
The exception java.lang.RuntimeException: ManagedChannel allocation site threw too many times,  the detail as the following stack shows. I do not want the exception happens.
build ManagedChannel code, you can also find it here :
close ManagedChannel code, you can also find it at shutdownManagedChannel:


7024
How can I share some value without sharing Context.Key object instance?2

Summary
How can I store and get a value from Context without sharing Context.Key instance?
Detail
I want to share some value with grpc Context. but I can't get the stored value with Context.Key instance
I tried this snippet
The result was
But I expected
It means if I want to get value from a Context, I should use same Context.Key instance.
It is strange. Because, I'm trying to share some values with Context and when I get the stored value I should use same Context.Key.
To share some value, should share the key object instance. (not the key value)
If I can share myKey object instance, I don't need Context to share value.
What about multi-threaded case? It is more difficult to share the Context.Key object instance.
I can't understand use of Context and Context.key to share value.
In short, My question is.
How can I store and get a value from Context without sharing Context.Key instance?


7028
RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor2

What version of gRPC-Java are you using?
What is your environment?
Android 9
What did you expect to see?
No exception
What did you see instead?
RejectedExecutionException
Steps to reproduce the bug
Add Google Cloud Speech client into the android app.
Full crash log.


7035
Compress behavior difference between grpc-java and grpc-go3

Client:
grpc-java append grpc-accept-encoding header even if  compress calloption has not set.
grpc-go append grpc-accept-encoding header only if compress calloption has set.
Server:
grpc-java will check the grpc-accept-encoding header which client send to server and compression is not enabled by default. Compressor will be set with the grpc-accept-encoding  message compression method
ompression.
grpc-go will not check the grpc-accept-encoding header which client send to server and compression is enabled by default. Compressor will be set with the grpc-encoding message compression method
Why? Are there any other reasons for the inconsistency?


7036
my grpc-java server has only one tcp connection!3

when i test performance of grpc-java server, i find that:
anyway,my server only has one connection!  the test command is:


7037
How to read stats from census module? 3

Hi,
This is more of a user question. Given grpc-census package captures stats by default via CensusStats module, how do I retrieve them? I see that it internally adds server call interceptors which record events but I am not sure how can I expose them or export them elsewhere.
Thanks, in advance.


7042
Is it possible to manage managedChannel and stub by dynamically changing EquivalentAddressGroup of NameResolver.Factory?4

Is it possible to manage managedChannel and stub by dynamically changing EquivalentAddressGroup of NameResolver.Factory?
I want to load balance by dynamically allocating the grpc server using spring eureka and grpc
on client application.
Below is the code of name resolver...
Below is the code to build a managed channel...
Sorry for lack of English proficiency. Thank you for your understanding.


7043
Feature request - proxy settings support at client level4

Is your feature request related to a problem?
Currently proxy settings can be set using environment variables. Unfortunately this applies at JVM level and could have side effects on other services running in the same JVM.
Describe the solution you'd like
It'd be great to have the possibility to define the proxy settings at client level in the code rather than relying on environment variables. That would allow the use of different proxy settings in the same JVM without having side effects on components running in the same JVM.
Describe alternatives you've considered
The alternative would be to run our services in different JVMs which is a no-go in our situation.


7044
io.grpc.StatusRuntimeException: INTERNAL: Protocol error Rst Stream4

What version of gRPC-Java are you using?
What is your environment?
Linux. Java gRPC client talking to a Go gRPC server.
We have a multithreaded client that makes different calls to the gRPC server. We reuse the ManagedChannel, but create a separate blocking stub for each thread. We see the error when the server takes a long time (a few minutes) to process and returns a large error message.
If I change the code to use a ManagedChannel per thread, the problem goes away. This makes it appear that there is a concurrency issue with the ManagedChannel.


7051
Support for proto3 field presence5

Proto3 introduced the optional syntax to support field presence tracking in release 3.12.0. We need to add support in our grpc protoc plugin.
See this doc for more details. Basically we need to add a function GetSupportedFeatures() to our grpc protoc plugin to mark our compliance.
Please plan to do this in the next release. If not, please let me know. Thanks!


7053
Bump Guava to 29.0-android5

Once we use protobuf-java v3.12.0 #7052, the upper bound of guava version will be 29.0-android.


7056
GRPC access logs5

I'm migrating my application to grpc. Everything working fine but for latency plotting I need access log in tomcat but I'm unable to generate access log. The only solution I found so far is the server interceptor. Doesn't grpc support access logging just like we have in tomcat if yes how to enable?


7062
netty: Delete AttributeKey.newInstance("channelLogger")6

As I mentioned in #6707 (comment) :
But even better: we should consider deleting the attribute. It is only used by ProtocolNegotiators, which already has access to GrpcHttp2ConnectionHandler. We could just add method to GrpcHttp2ConnectionHandler instead, which would be explicit.
#6707 is closed because the issue itself is resolved. But this is to clean things up more.


7065
RPC failed: Network closed for unknown reason6

Hi
i have this issue appearing once in a while. I have a system A talking to the system B via rpc, and once in a while i get this error with connection. Full log see below. The strange thing is, this time i don't see connection issue with my server boxes , A can talk to B with same call with no issue. But when i try run A locally this error appears. I can ping locally to the port and ip with no issue.  Please advise.


7075
how to benchmark grpc services?7

for rest services, we can use many soft to benchmark, how to benchmark grpc services?
I want to compare grpc and rest service at QPS/avg Latency.


7076
is service side StreamObserver noblocking?7

is service side StreamObserver noblocking ?
we using netty in current project,is it a good idea call onNext/onError/onComplete in netty's IO threads to improve performance


7082
How to get metrics of GRPC methods in a ServerInterceptor8

Hi, I'm trying to get the time it takes for the GRPC method to run, including all the logic inside the method(database queries, s3 object retrieval, etc.), and the status code it returns.
Currently I have this Interceptor implementation:
But the time being logged is always the same and is not including my database queries, as these are being made after this time is calculated and logged.
For the status code, I couldn't find any indication that it was possible to get.
How would I go about doing this?
My project is using GRPC version 1.20.0, I'm mentioning this in case these features might've been added in a newer release.
Thanks


7085
Force client to refresh DNS during service cell drain event8

I have a gRPC service running in multiple cells. Each cell is backed by its own AWS NLB. There can be multiple cells in a given AWS AZ.
I want to move clients to a new cell to help balance the load over a long period of time.
The service requires a customer's traffic to be served out of the same cell.
The issue is that grpc-java keeps a TCP connection open unless it gets a TRANSIENT_FAILURE by use of max connection age. There is no way to server side send a 302 redirect or forcibly close the TCP connection.
Any ideas how to issue a 302 redirect or force-connection re-estalbish server-side to the client?
If this were an HTTP RestAPI at say foo.com, I could send an HTTP 302 to a sub-domain pointing to the new cell (cellb.foo.com), forcing the client to redirect traffic to the new cell, including a DNS fetch + new TCP Connection
Any ideas on how to server-side direct the client to a new endpoint / IP Address / TCP Connection.


7088
Is ServerCall.close() always called?8

Hi, basically the title is self explanatory, I want to know if ServerCall.close() is always called after any rpc
Thanks


7089
RetriableStream.Sublistener.onReady() has broken concurrency for hedging8

As mentioned in #6817 (comment), there could be multiple concurrent Sublistener.onReady() invocations. They should not all be propagated to the master listener which may cause excessive buffering.


7092
connection reset by peer when using Firebase9

I'm using Firestore that is using gRPC java behind the scenes
I got the following error:
The stacktrace ends with this
Does that mean there was a connection problem between my server and FireStore server? A connection error somewhere else? How can I know what was causing it?
Thanks


7093
Error when building OkHttpChannelBuilder: "No enum constant" TLS_CHACHA20_POLY1305_SHA2569

What version of gRPC-Java are you using?
What is your environment?
OS: Both Linux and OSX experience this error
JDK: Only happening on 1.11
What did you expect to see?
Creating an OkHttpChannelBuilder using grpc/okhttp should work
What did you see instead?
Steps to reproduce the bug
I have noticed this constant exists in okhttp (here) but not here. I believe the difference is one is okhttp3 (4.x) and one is not. Any idea how to resolve this?
Here is the code used to build the object:
Any help is appreciated!


7095
Getting error while GRPC call: Can't find decompressor for deflate9

I have an application where I have to send a number and get a corresponding image from the server. The server is C++ and it uses Gzip compression and deflate algorithms to send the compressed data to the client.
On the android side, I have to call the API and the response will be stored in 'image'.
The request is 'CID'. The service is 'getsampleimage'. The response is 'image'.
But if I use the above method, it is throwing the error 'cant find decompressor for deflate'. I dont know whether it is correctly decompressing the Gzip format or not. Does anybody know how to do decompression on the android client side for the image data(Byte array)


7099
alts: Running on GKE gVisor gives error "ALTS is only allowed to run on Google Cloud Platform"9

I'm running a Java server in a faily minimal docker image on GKE on GCP, and trying to receive a request via ALTS that yields the odd error that "ALTS is only allowed to run on Google Cloud Platform".
currently tries to read /sys/class/dmi/id/product_name, which doesn't exist in the minimal container image I'm using.
Should there be an alternative model for not early erroring-out for Kubernetes containers, or is the requirement that Kubernetes always re-expose the Node's /sys mount to the Pods (hostPath docs) so that this business logic can continue to work?
FTR, gVisor aka GKE Sandbox doesn't allow hostPath mounts, so the best I can do at the moment appears to fake it with my own hack file.
See also grpc/grpc-go#3666


7104
grpclb: Only one of the SRV records will be used0

If there are multiple SRV records the NameResolver will resolve the addresses for each and attach each address's name from the SRV.
However, GrpclbLoadBalancer will then flatten the addresses and just use the first authority, tossing any EAG that didn't use that authority. Since #4469 it has been possible to provide a per-EAG authority. But createOobChannel() only accepts a single EAG (#4618), which is a blocker.
The current behavior dates to #2934, which appears was to perform exponential backoff when failing to connect to the balancer.


7105
Possible buffer leak in blocking stub DEADLINE_EXCEEDED race condition0

One of my unit tests started reporting a netty ByteBuf leak when upgrading from 1.26.x to 1.27.0, and it remains in subsequent versions up to 1.29.0. I'm not 100% sure but strongly suspect it's related to #6328, and in particular the interplay of that change with the ThreadlessExecutor used by blocking unary calls.
It's a somewhat extreme case, the test itself was there to verify a past unrelated concurrency issue. Basically making many consecutive calls using blocking stub with very short (1ms) deadlines. Though likely rare in the wild I think it does expose a real bug.
Here is example snippet which reproduces the leak error log(s) every time mid-test for me when pointed at a local etcd server:
I can provide more of the leak access records if needed.


7107
Smallest possible dependencies for a grpc-java client0

I am trying to use grpc-java to implement a grpc client. I was able to implement it using the Getting Started guide.
However, in my case, the size of the compiled shaded Jar of my program plays a very crucial role (even reducing by few MBs would be helpful). Therefore I was wondering what the smallest possible dependencies that I could use. I am currently using the following dependencies.
I noticed how grpc-okhttp and grpc-protobuf-lite is recommended for Android clients. Can I use them (since they seems to be very low in size) although my client will be running in a non-android environment ? What are the differences between the implementations ? (I found out that protobuf-lite lacks some capabilities, although I am not sure exactly what are lacking)


7110
Failed to collect dependencies at io.grpc:grpc-all:jar:1.30.0 -> io.grpc:grpc-rls:jar:1.30.01

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
No error appears when grpc bumps to 1.30.0
What did you see instead?
Steps to reproduce the bug


7112
Add protobuf-bom into grpc-bom1

Please consider adding com.google.protobuf:protobuf-bom into grpc-bom. This will allow not specifying version of additional libraries from protobuf family.
Example how this might be implemented:
With this feature protobuf-java-util stay aligned with protobuf version that was got transitively from.


7117
xds: investigate io.envoyproxy.controlplane:api1

Similar to #6016 which was not possible because the latest version of io.envoyproxy.protoc-gen-validate:pgv-java-stub in maven is not up to date as what we needed.
io in maven is more up to date and even includes com.google.cloudapi that #7109 needs. However, we don't know how frequently it updates on a regular basis. It may still fall behind our need.


7123
Please add "s" in domain name2

Not sure why I got wrong domain name "dialogflow.googleapi.com" instead of "dialogflow.googleapis.com".


7124
Executing a jar-with-dependencies built with maven-assembly-plugin 3.2+ throws "java.lang.IllegalStateException"2

What version of gRPC-Java are you using?
io.grpc:grpc-core:jar:1.30.0
What is your environment?
JDK: tested with both OpenJDK 8 (1.8.0_232) and 11 (11.0.7)
What did you expect to see?
A perfect, flawless execution of a jar-with-dependencies that would be spoken of for generations to come.
What did you see instead?
Using any version of maven-assemble-plugin 3.2.0 or higher seems to introduce the problem, so the issue is likely related to some change there. There was a similar error reported in #5493 - not sure if it's related to what's happening here.


7125
ServerBuilder should warn/error if a service impl is registered twice2

What version of gRPC-Java are you using?
1.30.0
What is your environment?
Windows 10
What did you expect to see?
A warning/error that the user registered a service twice.
What did you see instead?
Nothing, the second implementation was ignored silently.
Steps to reproduce the bug;
I can add/register both implementations, but I can only access one of them.
Additional context


7126
none




7129
grpc-java upgrade from 1.12.0 to 1.28.0 crashes JVM2

We currently use grpc-java in our spark application running on k8s cluster.
When upgraded to 1.28.0 the JVM crashes with the below error:
The problematic frame from the logs refer to this package  /tmp/libio_grpc_netty_shaded_netty_tcnative_linux_x86_646080581338743196850.so
Below are the dependencies as suggested by the release notes:
I have attached the error log generated by the container.
Please let me know if there are any other dependencies I am missing which is causing the error.


7132
Load-balancing - start method is not being called from NameResolver3

We are trying to implement gRPC load balancing in Java with Consul Service Discovery.
Version info: grpc-java v1.30.0
The problem is that when the app runs, the start method from our custom NameResolver class not being called !
Here is our code:
Here is the custom NameResolver class (start method here is not being called)
I have put breakpoint at start method to check and it's not being called !
Here is the custom NameResolverProvider class
Is there anything wrong on our code ?
We are looking forward to hearing from you soon !


7133
Remove NameResolver.Factory3

NameResolver.Factory is old and was meant to be replaced by NameResolverProvider. I've been slowly trying to remove it, especially ManagedChannelBuilder.nameResolverFactory(). I see evidence new users are using it, so this issue is to be a gathering point for why it is being removed and making sure there are alternatives to the current usages.
Since NameResolverRegistry was added in v1.21, most users shouldn't need the factory. A small number of users may need a "default name resolver override". This would be similar to defaultLoadBalancingPolicy() which was added when we removed loadBalancerFactory(). However, the NameResolver API needs tweaks to support that, where each NameResolver would be for a particular scheme and the NameResolverRegistry would select the appropriate NameResolver (instead of the current "call all the name resolvers in order until one understands the URI").
NameResolver.Factory is used internally in grpc. I don't care much about that, since it does little harm, but I don't expect NameResolver.Factory to ever become stable and it should be removed. It just may go slowly due to priorities.


7138
Consider configuring `ProtoReflectionService` to use it without internal APIs3

Due to the popularity of gRPC, some frameworks or libraries have an integration layer for gRPC.
Especially, Armeria has its own server/client implementations to serve/call a gRPC stub.
ProtoReflectionService is using the internal reference of a gRPC-Java server instance since 1.30.0 #6967.
That means a stub running without gRPC-Java server could not use ProtoReflectionService. line/armeria#2806
Armeria injects ServerServiceDefinitions to ProtoReflectionService using notifyOnBuild() hook.
If ProtoReflectionService supports better ways to build ProtoReflectionService,
it could be a good extension point for gRPC-Java echo systems.


7139
okhttp: isReady does not become false3

In Android application I'm trying to upload a large file (165 MB) using client gRPC streaming. The file is chunked into 2 MB chunks.
Each time I run this code, the application crashes with:
Log output before the crash is as following:
What is important, there is no delay between each sending x chunk log entry, which means the callback provided to setOnReadyHandler is called immediately and requestStream.isReady flag stays true.
Seems like here is the problem: even though the previous data has not been sent and is buffered by gRPC, isReady returns true. The JavaDoc of isReady method says the following:
Therefore my understanding is, that in this case false should be returned, because OutOfMemoryError suggests, that excessive buffering is happening.
How can I improve the code to get rid of OutOfMemoryError? Also is my understanding of isReady() method correct?


7140
cronet: Add compatibility with MigratingDeframer4

The tests for cronet use mocks to assume specific behavior about the stream, so were not trivial change to support MigratingDeframer. We should improve the tests so they can work with MigratingDeframer (or not), or decide we don't actually need MigratingDeframer for cronet.


7157
How can I use the .proto file to generate the code for one request and one response5

I saw the above description in the official documentation
but after experimenting, I found the code I generated through the plugins for ways 1 and 2 is the same
environment:  java1.8 maven plugins: protobuf-maven-plugin version 0.6.1


7159
Does netty-codec-http2 still need an exact version match?5

While trying to upgrade the netty version of a large project, I ran into a version conflict with grpc-netty. This looks to be because it requires an exact match on the version of netty-codec-http2. This seems a bit strange given that most other deps do not have strict requirements, including the other netty libraries.
I see that this was added by #1459, but this seems to date to when netty http2 support was in a pre-release state. I would hope that it's more stable now, although I don't have personal knowledge of the subject. Could this limitation be relaxed going forward?
(I realize that using grpc-netty-shaded would sidestep this issue, and this may be my solution for now. I'd rather not have to, though)


7161
How to recompile grpc-netty-shaded with a local snapshot version of Netty?6

Hey all, I am experimenting with setting up a project using grpc-netty-shaded compiled as a native image using GraalVM.
Right now I want to experiment with making some changes to netty and then seeing the effect of the changes in my application.
How do modify the compilation of the grpc-netty-shaded project to use my local version of netty? For example, I want grpc-netty-shaded to compile with my local version of io.netty:netty-handler:4.1.51.Final-SNAPSHOT that I built locally rather than  io.netty:netty-handler:4.1.48 in Maven Central.
Right now I've tried tinkering with changing the versions specified in https but there appears to be no effect.


7164
Server-side full-stream decompression6

This is follow on for #3403 and #3395.
Java based server is not able to receive this stream.
Server should look into "content-encoding" header to determine if it requires GzipInflatingBuffer for decompression.


7166
SDS: avoid using deprecated envoy api v2 fields 6

There are some usages of deprecated fields in current code base:


7168
migrating thread deframer breaks weighted_round_robin_test_cpp_java6

MigratingThreadDeframer is disabled in OkHttp via #7167. We believe the disabled code pass improved the performance.


7171
services:reflection should export its java_proto dependency7

Here's the current definition of //services:reflection:
It depends on services:_reflection_java_grpc, which is private. However, the generated service exposes those private symbols as part of its public API:
As a result, IntelliJ for example complains about ProtoReflectionService not being fully defined because its supertype isn't accessible as a dependency. Is there a reason why this _reflection_java_grpc target is neither public nor exported? (The same is likely true for _channelz_java_grpc and _health_java_grpc in the same package.)


7178
How to consume metadata headers in the actual call?7

This is the header example server, but the header isn't used in the service, just in the interceptor.
There's no information in the docs. My use case includes passing authorization + device-uuid headers
to the grpc calls.
In go/python and other grpc implementations the headers reside in Context which is passed as a parameter to the call.
Any help will be appreciated!


7179
Make io.grpc.protobuf.StatusProto available for javalite7

I would like to use io.grpc.protobuf.StatusProto and associated status.proto and com.google.rpc.Status with javalite. I believe the only way to do this right now requires copying io.grpc.protobuf.StatusProto.java and status.proto into my project. This is undesirable as it requires regular manual updates and risks versions going out of sync, and it introduces java code into my pure Kotlin project.
Edit: Perhaps creating a fat jar would work as well, but even if so, it would seem a worse approach than the manual copying route.
An old workaround protobufing grpc-google-common-protos is no longer usable with Android R8 minified builds:
Related issues, locked to comments and clarification requests:


7180
Decrease minimum allowed keepalive time interval8

Currently there is a limitation on the minimum value that can be set as keepalive time, defined in KeepAliveManager.MIN_KEEPALIVE_TIME_NANOS with 10 seconds.
The rationale behind the minimum limitation is probably to allow a high number of connections and throughput without creating too much overhead.
But there are also situations where not many connections/throughput is required, but a fast response time instead.
There are already gRPC implementations that allow lower values (I'm using ETCD on server side).
I suggest to reduce KeepAliveManager.MIN_KEEPALIVE_TIME_NANOS to 1s or 10ms to allow using the full range available on server-side. Maybe instead a hard limitation just logging a warning for setting keepalive times below 10s?


7182
Received DATA frame for an unknown stream xxxxx8

What version of gRPC-Java are you using?
What is your environment?
oraclejdk1.8
What did you expect to see?
no unnecessary exception logs
What did you see instead?
no unnecessary exception logs
Steps to reproduce the bug
a client-side streaming rpc such as:
when I closed stream on server side, client-side reacted obClient.onCompleted(). And then server-side print a excption:
Maybe this is the case its also possible that this frame is received on a CLOSED stream.
In addition, if I don't do obClient.onCompleted(), there will be a memory leak.


7186
Android Java (grpc-java) client fails to connect to go server 8

What version of gRPC and what language are you using?
What operating system (Linux, Windows,...) and version?
MacOS Catalina 10.15.15
What runtime / compiler are you using (e.g. python version or version of gcc)
java 8
What did you do?
Trying to connect to go grpc server, on the same network, for swift grpc it works but for android no.


7189
`AbstractInteropTest.deadlineExceeded()` flaky8

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
.. because a client call can expire even before sending any request, especially in a busy machine.
What did you see instead?
The failure occurs in a slow or crowded machine, such as a public cloud CI server.
Steps to reproduce the bug
Run an interop test against it.
Find the sporadic failure of deadlineExceeded() where the failure occurs even before the call reaches at the server.


7192
ManagedChannel#enterIdle does not respect its documentation/javadoc9

What version of gRPC-Java are you using?
What is your environment?
Linux (RHEL 7.6), Red Hat OpenJDK JRE 1.8.0.252
What did you expect to see?
The javadoc of ManagedChannel#enterIdle says:
Invoking this method moves the channel into the IDLE state and triggers tear-down of the
channel's name resolver and load balancer, while still allowing on-going RPCs on the channel to
continue. New RPCs on the channel will trigger creation of a new connection.
So I was expecting that if I do a RPC using the channel and then I am executing ManagedChannel#enterIdle while the call is still on-going, the channel would still go in idle mode.
What did you see instead?
The channel does not go in idle mode.
This is due to this fix: #4630 (enterIdleMode() exits idle if still in use)
Steps to reproduce the bug
Execute a RPC call with a long deadline and then trigger enterIdle() on the channel while the call is still on-going. Check the state of the channel afterwards.
Comments
I understand #4630 that it may be not possible to allow on-going RPCs without hitting some nasty race conditions. If so, I think then the javadoc of  ManagedChannel#enterIdle should be corrected to describe exactly the behavior because today it is at least very misleading (if not wrong).
Thank you for all the good work on gRPC-java !
Kind regards,
Vincent


7193
Help!!!!HTTP Request specified an invalid port number.9

...


7199
Support SslMasterKeyHandler in NettyServerBuilder9

I have a problem with adding SslMasterKeyHandler#newWireSharkSslMasterKeyHandler on the server side. I tried to do this with channelFactory:
and later with ProtocolNegotiator:
In the first case, the setting had no effect. In the second case, the server worked incorrectly (it stopped accepting connections, even without a handler, just with a negotiator wrapper).
What should be the proper implementation?


7201
Failed ALPN negotiation: Unable to find compatible protocol0

What version of gRPC-Java are you using?
What is your environment?
Java - 9.0.4
Spring Boot - 2.3.1.RELEASE
What did you expect to see?
I created a simple Spring Boot project to call my Dialog Flow agent.
I am working from behind my companies firewall.
When I ran my application from InteliJ I was expecting to see the response back from DialogFlow.
What did you see instead?
However when i ran my application I saw the below error:


7208
grpc-okhttp gets gRPC response slowly when request/response are large0

What version of gRPC-Java are you using?
grpc-java version 1.27.0
What is your environment?
Android, API version 24
Linux, OpenJDK Runtime Environment (build 1.8.0_242-b08)
What did you expect to see?
I use gRPC to upload large amount of data (10 Mb) to server and receive same data back. I expect that request and response will be delivered to and from server in same time taking into account network connection throughput is symmetric.
What did you see instead?
Response is delivered from service by 8 times slower when okhttp is used. Moreover delay ratio depends on message size. With netty both request and response take similar time.
Steps to reproduce the bug


7211
Hide AbstractManagedChannelImplBuilder from public API1

Transport implementations extend io.grpc.internal.AbstractManagedChannelImplBuilder to obtain most of their builder implementations. However, this leaks to the user in the Javadoc and with an api dependency in Gradle. The Javadoc in particular is a confusing mess because it isn't clear what is stable, experimental, and internal. Since we don't generate io.grpc.internal Javadoc and since the extending class "shadows" the base ManagedChannelBuilder, it also means the user is unable to click links to get to documentation for a large number of its methods. We should avoid extending AbstractManagedChannelImplBuilder in public (non-internal) classes.
To do this, we should extend ForwardingChannelBuilder instead (probably extending the Simple* version, which would need to be created). Transport implementations would create a AbstractManagedChannelImplBuilder and forward to it. We don't want to remove (useful) public methods in this process and break users, so we should make sure that there aren't any stray public methods in AbstractManagedChannelImplBuilder that would be dropped in the process.
The only abstract method in AbstractManagedChannelImplBuilder is buildTransportFactory(). We should probably inject that method in the constructor and convert the class to concrete, non-abstract. To simplify migration we can create ManagedChannelImplBuilder as a shim on top of AbstractManagedChannelImplBuilder. The shim could override some protected methods and make them public. It can also provide a setter for the checkAuthority override used by things like NettyChannelBuilder. Once all classes (external and internal) are migrated we can remove AbstractManagedChannelImplBuilder and combine it with the shim. If some classes still extend ManagedChannelImplBuilder that may be okay, but we should try to avoid such inheritance if possible.
The same should be done for AbstractServerImplBuilder.


7212
GRPC - SSL authentication-not connecting to the server eventhough there is no error while debugging1

Hello all,
I want to make a SSL connection to a remote C++ server. I have three files for making the SSL connection using C++ client.
There is also example documentation(in GRPC) for making the connection between c++ server and c++ client. So, if i make the connection, it works perfectly.
Now that I want to use the android client. So, now I have three files for the android client.
So, I have used the following SSLfactory for assigning the certificates and keys to the trustmanager and keymanager.
And I have used
ManagedChannel channel = OkHttpChannelBuilder.forAddress(Host,Port).sslSocketFactory(getSslSocketFactory()).build();
for building the channel. I am pretty sure that I have added the client and CA certificates correctly. But I am not sure whether I am doing it correctly for adding client key.
I have also added the CA certificates in my android phone where I am testing the android application. Still it is not making the SSL connection and does not provide the respone from the server. Any help would be appreciated. Thank you in advance


7216
How to get a notification in server side when a connected client disconnected1

Hi All,I am using gRPC-java to build  a Long Connection framework between client and server ,Now I want to get a notification in server side  when a  connected client disconnected ,then I can do something related to the client .
I have searched  in internet several days  , but I have not get any effective results.
Has anyone has the same question and could get me some instructions ?
Best regards.


7217
'./gradlew build' fails because of missing plugin dependency1

When aopalliance is not already in the cache, I get:
Adding maven central to the plugin repo's in settings.gradle solves the problem. I'd be happy to PR, but I'm not sure if that's the 'right' solution.


7218
benchmark scripts use incomplete classpath1

Since 0044f8c the benchmar no longer include the dependencies on the generated classpath, so for example benchmarks/build/install/grpc-benchmarks/bin/qps_server fails with a java.lang.NoClassDefFoundError: io/netty/channel/EventLoopGroup.


7222
RPC call stuck and eventually throws DEADLINE_EXEEDED if hedging attempts got throttled.2

First hedging attempt hits the concurrency limit on the server and immediately returns status UNAVAILABLE
Error rate is above a threshold and client side retry throttling prevents additional retries
Client call hangs until it hits DEADLINE_EXCEEDED.
What version of gRPC-Java are you using?
What is your environment?
Linux, Mac OS, java 11
What did you expect to see?
What did you see instead?
Below is the log output from modified io.grpc.examples.hedging.HedgingHelloWorldClient
Steps to reproduce the bug
I was able to reproduce this bug by modifying hedging example:
Added ClientInterceptor and ClientStreamTracer to io.grpc.examples.hedging.HedgingHelloWorldClient to log returned statuses,
modified io.grpc.examples.hedging.HedgingHelloWorldServer to randomly close call with status UNAVAILABLE,
After running the modified example, search DEADLINE_EXCEEDED in the log and look at other logs having the same callId.
I my log example above you can see first attempt finished with status UNAVAILABLE in 4 ms and call finished with status


7223
ProtocolNegotiators bypass SslContext.newHandler2

This prevents any ability for subclasses of SslContext to provide custom or wrapped SslHandlers.
Instead, call the appropriate sslContext.newBuilder methods.


7228
Ability to create a CallContext with retry settings2

Is your feature request related to a problem?
In googleapis/java-spanner, we're investigating the possibility of letting users set per-request timeout and retry settings.
Currently, the timeouts and retry settings are set at the time of client creation when the UnaryCallable is created (example). If we want to specify per-request timeouts, you can pass in something like CallContext.withCallOptions(CallOptions.withDeadline()) to the RPC call. But there is no equivalent option for retry settings.
Describe the solution you'd like
If CallContext or CallOptions includes a withRetrySettings() method, then this can be accomplished.
Describe alternatives you've considered
The only solution we have right now is to ask the customer to create multiple clients where each client has different retry settings set. But this doesn't resolve all use cases because some customers have requested the ability to programatically change the retry setting in their applications. Instantiating and managing multiple clients can be tedious.


7229
com.google.common.base.Suppliers$NonSerializableMemoizingSupplier cannot be cast to java.util.function.Supplier when using Grpc in Gradle plugin for Android app2

What version of gRPC-Java are you using?
What is your environment?
Arch Linux, JDK version 1.8.0_242, Gradle 5.4.1, Android API 24+
What did you expect to see?
I wrote custom Gradle plugin which uses grpc-protobuf 1.28.0 as a dependency. I use this plugin to build an Android application so both my plugin and com.android.application are used at the same time. I expect my application will be built successfully.
What did you see instead?
Build fails with error:
A problem occurred evaluating project ':app'.
Steps to reproduce the bug
Add the following line into buildscript/dependencies section of the top level gradle.build
For example clone any simple android app:
The root cause seems to be grpc-protobuf uses com.google.guava:guava:28.1-android as dependency see pom. Android version of Guava Supplier class doesn't inherit java.util.function.Supplier I believe because it is not compatible to Android API below 21. When grpc-protobuf is used as dependency in Gradle plugin Gradle resolves guava to android version instead of jre one and it conflicts with requirements of Gradle Android plugin.


7236
Http2 exception while connecting gRPC server running on cloud 3

What version of gRPC-Java are you using?
java.version: 1.8
What is your environment?
Linux  operating system
Currently gRPC server is running on cloud using a docker image openjdk:8-jre-alpine on port 9090
gRPC Client is running on my machine currently and trying to connect to server using plaintext.
What did you expect to see?
Response from cloud GRPC server based on proto response object
What did you see instead?
I see following exception:
Caused by: io.netty.handler.codec.http2.Http2Exception: First received frame was not SETTINGS. Hex dump for first 5 bytes: 485454502f
Steps to reproduce the bug
Both gRPC server and client  either locally and running on cloud then it works, just fails when accessing from local to Azure cloud using AKS.
Request started from gRPC client


7237
gRPC keepalive read ACK message in java code and GRPC_ARG_HTTP2_MAX_PINGS_WITHOUT_DATA option3

We have TCP connections open for very long durations. I have enabled the keepalive on client side to detect the server disconnect scenario.
I have enabled
1) Is their way to read the keepalive acknowledgement message in java code of gRPC?
2) The channel are ideal for long time without data, I am trying to set the GRPC_ARG_HTTP2_MAX_PINGS_WITHOUT_DATA to 0 in java. I am not finding a way to do it. Can you please suggest?
default value mentioned is 2
Thanks


7238
How do you tell the difference between various INTERNAL errors?3

Context:
I'm working on an Android app which connects to a server with a GRPC stream. The server periodically will send RST_STREAM, resulting in io.grpc.stub.StreamObserver.onError being called in my stream response observer.
When calling io.grpc.Status.fromThrowable(cause) and inspecting the resulting Status object, I can see the following Status object:
We need to be able to tell apart from other INTERNAL errors, but it appears the only way to know it was caused specifically by RST_STREAM coming through is by looking at the description field provided.
Question:
Is there any way that we would be able to tell the difference between a RST_STREAM triggered INTERNAL error, and any other INTERNAL error in a way which isn't checking the description string contains "Rst Stream"?
If not, is there any chance that this sort of detail is exposed somehow to users of this library?
Thanks!


7244
Drop support for Android levels 14 and 154

We follow Google Play Services support, as it provides much-needed TLS upgrades and provides a good "temperature" of what versions may be worth supporting. A year and a half ago it dropped support for API levels 14 and 15. We should follow suit.


7248
TLS handshake fails when using client certificate and OkHttpChannelBuilder4

Hi I am using OkHttpChannelBuilder and sslSocketFactory with client certificate for mutual TLS authentication. From wireshark i can see server send Certificate Request but Client responds with a certificate of size 0.
My Client Certificate is store is KeyStore and I can verify Client Certificate CN is same as DN in Server Certificate Request.
I am using grpc 1.30.2 on Android 9 and 10.
My basic question is if OkHttpChannelBuilder supports sending client certificate with cutom trust manager?


7249
AbstractClientStream - Received data on closed stream 4

This is happening for large volume of single message and i am using Spring GCP Pubsub as a client application
Request to please let me know what needs to be done to rectify this


7252
Synchronous grpc C++ server and asynchronous grpc java client for bidirectional streaming RPC5

Hello all,
In my application, I had to use bidirectional streaming RPC. My teammate has implemented synchronous API (for C++ server) on the server side. On the client side also, he has used synchronous API for bidirectional streaming in C++.
Now, I have to do that for android client. But I have read that, android client does not support synchronous method for bidirectional streaming. So, I am using asynchronous android client with synchronous c++ server. How does it affect the performance?
As far as now, I can see some of the responses are missing from the server when I call the RPC continuously. Is it because of the mismatch between the methods used by the client(android-asynchronous) and server(C++ synchronous)? Or is is related to some other problem? I would need your valuable suggestions


7261
How to get a client response  when using StreamObserver to push a message to client at server6

Context:
I'm using grpc's StreamObserver to push data from the server to the client. I found that StreamObserver#onNext has no return value, so I can't know whether the client has successfully processed the message.
Question:
I hope the server can sense whether the client has  successfully processed the message. If some exception throw in client , the server needs to try again. Is there a way to achieve this function through gRPC java?


7263
xxxClient error:  io.grpc.StatusRuntimeException: UNIMPLEMENTED: Method not found!6

Version
I already know that the remote server is available.but I can't find the error answer.


7268
Alts on Android6

I have an application with client on Android and gRPC communication to backend. My backend runs on VM in Compute Engine. When I am trying to use alts builder I am getting 'ALTS is only allowed to run on Google Cloud Platform' error on client.
What version of gRPC-Java are you using?
1.30.2


7269
How to pass custom variables inside a single grpc request6

How to pass custom variables inside a single grpc request, like RequestContextHolder in SpringMVC, and make sure that the scope of these values is restricted to this request?


7270
Migrate compiler to cpp-application Gradle plugin7

The cpp-application plugin is now stable:
It replaces the earlier 'cpp' plugin which we are using:
The cpp plugin will be removed; we should migrate away from it before it is.


7276
Android example: use Maven Central as fall back7

This was discussed out-of-band with @ejona86. We'd like to be able to advertise the latest grpc-java version on grpc.io, as soon as the version is released (e.g., grpc/grpc.io#374). We can't do that right now because of the Android-Java examples depending solely on JCenter; an issue which we hit before (grpc/grpc.io#317, grpc/grpc.io#318).
More context: grpc/grpc.io#374 (comment)


7279
Upgrade netty to 4.1.51.Final7

Is your feature request related to a problem?
We're trying to use Google Secret Manager and its corresponding Java library in a micronaut project, and when trying to compile it to a native image using GraalVM, running into issues regarding GenericJson, which when worked around, results in errors related to grpc and grpc-netty-shaded
Describe the solution you'd like
mentions some changes to accommodate openssl and GraalVM
I believe upgrading the netty version that grpc is using should help alleviate the issues I'm running into.
Describe alternatives you've considered
Additional context


7281
gRPC - Circuit Breaker recommendations8

hi Team,
We are currently building a service that uses grpc as transport protocol.
As part of it we are planning to have a circuit breaker for grpc client
we would like to know if there are any recommendations around building/using circuit breaker library/framework that can be consumed by grpc client?


7286
grpc-okhttp/grpc-netty gets gRPC response slowly from grpc android server8

What version of gRPC-Java are you using?
grpc-java version 1.27.0~1.31.0
What is your environment?
Android, API version 25
Android okhttp/netty client
Android netty server
What did you expect to see?
I use grpc-netty  client and server in the same android phone/emulator but different processes,I think a request & reponse should not take more than 5 ms.
What did you see instead?
A small request & response takes an average of 20ms, change the client channel to okhttp does not help.
Steps to reproduce the bug
just use the Helloworld demo(server stream)
android grpc-netty server response the request immediately and call onCompleted
client receive the onCompleted call but takes 20 ms after request sended


7289
Mesh CA proto is not shaded8

I noticed google.security.meshca.v1 in the build output, which is weird because it should be com.google; there was missing java_package and java_mulitple_files=true in the proto file. This was a tell-tale sign that the proto had not been used from Java before.
However, since it was in XDS, that is "okay" because all generated code in xds should be shaded and internal. However, looking at the configuration in xds/build.gradle it does not appear the google.security package is shaded.
It appears this leaking of generated code made it into v1.31.0. We should fix the shading and backport it to v1.31.x.


7297
`rules_proto_grpc` Bazel rules fail to compile with Bazel 3.4.1 due to errorprone GuardedBy failures.9

What version of gRPC-Java are you using?
1.24.x
What is your environment?
Windows, but should fail on all OSs.
What did you expect to see?
The GRPC rules consume io_grpc_grpc_java at 62e8655, which doesn't contain change d3c77f2. As such, newer versions of Bazel fail to compile GRPC due to GuardedBy static analysis failures in errorprone, and thus the rules are worthless.
I attempted to simply upgrade the version they were using to 1.25.x, but this caused other failures.
What did you see instead?
Steps to reproduce the bug


7307
java.lang.NullPointerException at NettyServerHandler.java:486 using nodejs client0

What version of gRPC-Java are you using?
What is your environment?
ubuntu, java 1.8
What did you see instead?


7308
RetriableStream only retries error on first call0

What version of gRPC-Java are you using?
What is your environment?
MacOS, 10.15
What did you expect to see?
A client can have a channel to a server and make multiple calls for a call type which is retryable. For a transient error, such as UNAVAILABLE any of these calls could fail - the first, the second, the third - and should be retried.
What did you see instead?
Retry occurs if the first call returns UNAVAILABLE.
Retry does not occur if the first call succeeds and the second call gets UNAVAILABLE.
Steps to reproduce the bug
I think this line is to blame, https:
If the first call fails, when closed(Status, RpcProgress, Metadata) is called, state.winningSubstream is null and it will be RpcProgress.PROCESSED, resulting in a call to makeRetryDecision(status, trailers).
If the second or subsequent call fails, state.winningSubstream is not null, and the retry logic is bypassed.


7310
MaxInboundMessageSize doesn't seem to be applied1

What version of gRPC-Java are you using?
GRPC 1.24.0
What is your environment?
Docker image: openjdk:8-jre
What did you expect to see?
I expected the maxInboundMessageSize to be much higher than the default of 4MB when we set the following:
What did you see instead?
Steps to reproduce the bug
This is happening in one of our deployed services.


7318
Error-prone warnings in MeshCaCertificateProviderTest.java1

Reported in the import CL on all mock(ScheduledFuture.class) occurrences. The warnings reads:
Do not mock 'java.util.concurrent.ScheduledFuture' (which
Future factory methods instead, a SettableFuture, or a real ExecutorService or FakeScheduledExecutorService.
Mocked Futures don't properly implement the interface contract of Future.


7321
gRPC - ContentSubType Support2

I find that grpc-go support registering a custom codec and specifying a contentSubType when making a call.
Is it possible we support this feature in grpc-java so users can use custom serializers?


7324
Upgraded embededd OkHttp library to latest version, 3.14.92

Is your feature request related to a problem?
Not necessarily a problem, but the app I work in uses Retrofit, which as of creating this PR uses version 3.14.9 of OkHttp:
Describe the solution you'd like
I'd like to see if upgrading grpc-java's version of OkHttp to 3.14.9 causes any breaking changes.
Describe alternatives you've considered
I've excluded the embedded version of OkHttp that grpc-okhttp brings in, but it was requested of me to try and get the library aka grpc-java to upgrade internally.


7329
io.grpc.StatusRuntimeException: UNKNOWN: Exception calling application: string is too large2

When I use BlockingStub call two operations and then close.


7334
xception in thread "main" java.lang.NoSuchMethodError: io.grpc.ManagedChannelBuilder.usePlaintext()Lio/grpc/ManagedChannelBuilder;3

When I run test, the program does not report an error. When I build the plug-in into another project and use it, I get the following error
This is my code


7336
Intermitent errors under load: INTERNAL: Invalid protobuf byte sequence3

Under a load test, I'm seeing the errors below, with the grpc-java.  There is a single service RPC that has bi-directional streams. The errors only occur under load.
#5997 and others appeared similar, but as far as I can tell I'm synronizing access to the streamObservers.  And this is observed, (only I think) when the message is coming from the server.. not when the response is going back.
What version of gRPC-Java are you using?
What is your environment?
Also sometimes
Steps to reproduce the bug


7345
How to retry with new auth token using builtin retry?4

My requirement is similar to #6638 and #5856, but on JVM, not Android. I want to retry a bidi streaming call with a new auth token if the server responds with a particular status. In both of the aforementioned tickets, an interceptor option was discussed, but this comment also mentions using the builtin retry with ClientStreamTracer that was never elaborated on. I'd like to get some details on using the builtin retry with ClientStreamTracer option.


7348
An `alts` release built with JDK 9+ wouldn't work under Java 7 or 84

From #6829 (comment), I gather that your process may be to build releases with JDK 8. If so, then this is more about convenience for anyone else who might do a local build. (Compare #6839, which dealt with similar calls in core.)
My attempt to turn up other such calls shows some in alts:
Still, after a bad protobuf release (protocolbuffers/protobuf#7827) and a near miss with Guava (google/guava#3994), I figured it was worth bringing this up again in case you want to take additional measures.


7351
NioEventLoop - Unexpected exception in the selector loop. java.io.IOException: Invalid argument5

What version of gRPC-Java are you using?
classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.13'
What is your environment?
macOS 10.15.6 (19G73)
What did you expect to see?
Either no exception or exception that makes sense to the library consumer.
What did you see instead?
Steps to reproduce the bug
I'm able to reproduce it reliably running an integration test for my project. It the problem is not obvious I can give instructions on executing it in your environment.


7357
netty: INTERNAL error if GOAWAY is not a graceful shutdown5

As reported by a user. This seems like a bug introduced in #6918


7360
animal sniffer does not catch ByteBuffer's usages that break in Java 8 when compiled with Java 9+6

Originally reported in #7348. Existing usages are manually fixed by #7349. But we'd want to prevent this happens in the future.
Java 9 introduces overridden methods with covariant return types for the following methods in java.nio.ByteBuffer:
In Java 9 they all now return ByteBuffer, whereas the methods they override return Buffer, resulting in exceptions like this when executing on Java 8 and lower:
java.lang.NoSuchMethodError: java.nio.ByteBuffer.limit(I)Ljava/nio/ByteBuffer
This is because the generated byte code includes the static return type of the method, which is not found on Java 8 and lower because the overloaded methods with covariant return types don't exist (the issue appears even with source and target 8 or lower in compilation parameters). The solution is to cast ByteBuffer instances to Buffer before calling the method.
We'd expect animal sniffer to catch usages that could potentially break Java 8 users.


7361
Observer setOnReadyHandler semantics wrt GRPC thread6

I've got a situation where I think I'm using the observer setOnReadyHandler correctly, but may be running into potential concurrency issues due to running on the GRPC thread.
If execute() is run on the GRPC thread, it gets stuck on the second call to waitForReady(). It works correctly if executing on a new thread. For testing, I'm using the default and not the direct executor, since waitForReady() is a blocking op.
I've got a full test rig setup. https:


7363
more questions on GRPC retry6

grpc-java version 1.31.0
If it works I have two questions:
Do I need to make a service config or simply add the enableRetry() option can work as well?
How do I view the logs of the retry if a retry is being invoked? (do I need to add an interceptor to capture the logs)
Is the retry included in the scope of withDeadlineAfter or it will reset the deadline?


7372
Delay in processing request and sending response under load7

I am running a performance test on my unary gRPC server using GHZ, under load about 100K request the response time is high(about 1s to 1.5s) for initial few thousand requests.
After some debugging what I am observing is that there is a delay of about 500ms between the end of server interceptor and invocation of the gRPC service method, and about 500ms delay between the end of service method and invocation of SimpleForwardingServerCallListener.onComplete.
Please let me know if the question is vague or you need more information.


7373
Throwing an exception from some StreamTracer methods hangs the RPC7

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
If a client-implemented ClientStreamTracer method throws an exception, the RPC should fail.
What did you see instead?
The RPC never completes (blocks forever or the future never completes, depending on stub type).
Steps to reproduce the bug
I was able to reproduce this bug with both the InProcessChannel and Cronet transport implementations.
From grpc's GrpcServerRuleTest:


7376
Unexpected exception: `io.grpc.StatusRuntimeException: UNKNOWN: channel closed`7

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
io.grpc.StatusRuntimeException: UNKNOWN: channel closed
Steps to reproduce the bug
This happens before the exception:


7377
Lack of compat with grpc-web due to lack of HTTP 1.x support7

There is currently a stalemate between grpc-java and grpc-web around use of HTTP 1.x.
Could you fix it in this repo? It doesn't seem like the other project in this organization plans to fix this.


7381
Change Default Thread Executor of the Server8

Currently, the default Thread Executor defined for the gRPC Server is Cached. This executor is known for being extremely slow, even when compared to a Single Thread executor.
Since developers are more likely to build a gRPC server following default configuration, many who do not tweak their servers will assume that a Java implementation of the gRPC Server cannot perform well.
Therefore, I'd like to first ask for the reason behind choosing this executor type instead of other options available.
Secondly, given that developers are most likely not going to benchmark the different executors, I'd like to propose to switch to a Fixed executor, with the number of threads based on the number of availableProcessors() for the JVM.
Third, if we agree that there is certainly no need for the default behavior to guarantee the order in which requests are submitted, and that this is how other implementations are also doing it, then we should consider WorkStealing.
Lastly, if we cannot agree in changing the default Thread Executor, I'd like to then propose that we make the ServerBuilder require user to indicate a Thread Executor, therefore not having a default.
In this benchmark with a 2 CPU server and a 6 CPU client (ghz; 5 connections; 50 concurrency requests), we can easily see how every other thread executor is nearly, or more than, 2x as faster as the Cached executor:


7384
How to make use of all the CPU cores?8

Hi,
I have a question. I have a simple client/server application with grpc-java which just works fine! My concern is, It never seems to use more than 30% of the CPU even under high load! I just use a managed channel builder to create a channel and stub as shown here. How to make use of all the CPU cores? Both client and server runs on the same machine. (ExecutorService with more threads does not seem to help!).
My client side code is more or less like this.
As I have a single channel between client and server in the above example, I also tried creating multiple channels (4 channels) assuming that would help!
No luck.
Can you suggest what needs to be done to make use of all the cores?


7385
gRPC Netty with TLS failing on Android API < 248

What version of gRPC-Java are you using?
The current latest: 1.31.1, although it's probably present in earlier versions.
What is your environment?
Android
What did you expect to see?
Being able to use NettyChannelBuilder with TLS negotiation type on Android devices with API levels 16+.
What did you see instead?
The client crashes with the following error on Android devices under API 24:
SSLParameters#setEndpointIdentificationAlgorithm is only available in Android 24+.
Steps to reproduce the bug


7387
Interfaces for supporting zero copy into Protobuf (HasByteBuffer & Detachable)8

APIs for supporting zero-copy protobuf deserialization from ByteBuffers to protobuf messages. The marshaller can wrap ByteBuffer as ByteSting with UnsafeByteOperations, concatenate ByteStrings into a single RopeByteString and then create a CodedInputStream from it.
New interfaces for the inbound InputStream to allow the marshaller:
HasByteBuffer: access the underlying ByteBuffers directly without copying bytes
Detachable: keep the ByteBuffers around until the application code is done with using the protobuf messages.
More details and an example marshaller implementation can be seen in #8102 (comment).


7388
How to skip host name validation with the OkHTTP channel8

Hello,
I'm porting my gRPC client from the Netty channel to OkHTTP so I can use it on Android. This client is connecting to a gRPC server over TLS, but the server is on a private network and uses a self-signed certificate. In Netty, I can do the following have the host name verification disabled:
That'll give me an SSL context that I can pass to NettyChannelBuilder.forAddress(...).useTransportSecurity()..sslContext(insecureTlsContext). How can I do something like this with the OkHTTP channel?
I've managed to get something to work by cheating and using Netty's InsecureTrustManagerFactory.INSTANCE, but it doesn't make sense to have the Netty channel as a dependency just for this. Also, I read on SECURITY.md that it's a bad idea to have both.


7393
Tracking issue for ForwardingServerBuilder being experimental9

No description provided.


7397
Is there a way to configure NettyServerBuilder with SniHandler?9

Is it possible to configure io.grpc.netty.NettyServerBuilder with io.netty.handler.ssl.SniHandler for Server Name Indication capabilities of a gRPC server?
I would like to use SNI to switch the server certificates used based on the host name.


7398
Add SOCKS proxy support9

Is your feature request related to a problem?
I'm unable to leverage network privacy using gRPC.
Describe the solution you'd like
As a developer on the cutting edge of privacy technology, which is surging in popularity lately, I'd like to use gRPC with SOCKS5 proxies in order to privately connect with servers without revealing my private information, like IP, to the server. Ideally, using gRPC would not result in the leakage of other private information like the timing of communication, and data about the graph of who is communicating.
TL;DR: privacy is a big deal and increasingly more relevant. It's a good time for gRPC to be more compatible with SOCKS proxies.
Describe alternatives you've considered
gRPC doesn't work with the common alternative for network privacy: Tor.
Additional context
This topic was mentioned many times 4 years ago but times have changed and it is probably worthwhile to revisit those decisions. Major advances are happening in the area of network privacy.


7404
libio_grpc_netty_shaded_netty_tcnative_osx_x86_64.jnilib not signed0

What version of gRPC-Java are you using?
What is your environment?
macOS
What did you expect to see?
The file grpc-netty-shaded-1.31.1.jar/META-INF/native/libio_grpc_netty_shaded_netty_tcnative_osx_x86_64.jnilib being signed.
What did you see instead?
That it's not signed.
Steps to reproduce the bug
Submit a package to Apple for Notarization containing grpc-netty-shaded-1.31.1.jar. The Notarization process will fail, with the following being reported:
I've worked around this by extracting the libio_grpc_netty_shaded_netty_tcnative_osx_x86_64.jnilib out of the jar, signing it, then replacing it in the jar before sending off to Apple. I think ideally the binary should be signed as part of the build phase of the


7409
NO_ERROR0

code is
error is :


7410
Cleanup ManagedChannelImpl shutdown/shutdownNow flow1

The implementation of ManagedChannelImpl shutdown/shutdownNow flow evolved into a mess after a sequence of features being added, typically the retry (ManagedChannelImpl.uncommittedRetriableStreamRegistry) and ConfigSelector (ManagedChannelImpl.pendingCalls). This needs some cleanup.


7415
How to pass a header to a CallCredentials? 1

I've a CallCredentials that uses a header value to do a look up in the DB, and then apply the result as an extra header.
Since CallCredentials doesn't have access to metadata, I wrote a ClientInterceptor; in ForwardingClientCall.start, I get the header value and copy it to the Context.
In the CallCredentials, I get the value set before.
However, this is coming out as null.
My questions:
Why does the above not work? I can confirm that both the ClientInterceptor and the CallCredentials are running on the same thread. However, I've noticed that the Context object id changes.
Even though MetadataApplier doesn't have public access to the headers, MetadataApplierImpl does as field origHeaders. The latter isn't a public class, so there's no way to get the headers without reflection trickery.
There's a Contexts.interceptCall method meant for intercepting a ServerCall with a Context parameter; why is there no equivalent method for intercepting a ClientCall?


7421
Exception while executing runnable io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed@7c7357a4 java.lang.NullPointerException2




7429
Export detailed metrics via OpenTelemetry2

Is your feature request related to a problem?
OpenTelemetry is the official successor to OpenCensus. But grpc-java does not expose metrics in an OpenTelemetry-compatible way.
Describe the solution you'd like
It would be nice if the detailed metrics currently exposed via OpenCensus were exposed in an OpenTelemetry-compatible way.
Describe alternatives you've considered
Setting up an OpenCensus-based metrics pipeline just for grpc-java -- certainly possible, but runs counter to the idea of unifying metrics and tracing under the OpenTelemetry umbrella.
Additional context
Given that OpenTelemetry is the official successor to OpenCensus, I tried to figure out if OpenTelemetry is OpenCensus-compatible, but couldn't find relevant documentation. It is possible that this is the case and that OpenTelemetry support is a no-op as a result.


7430
Upgrade Netty to 4.1.52+3

We've seen test failures when upgrading to Netty 4.1.52. It seems likely related to TLSv1.3. This test was run on Java 11. TlsTest.


7431
Support TLS 1.3 for okhttp transport3

Our current okhttp version (2.7.4 Feb 2016) does not support TLS 1.3
Okhttp3 supports that. Since we don't have a short-term plan for upgrading to okhttp3, we may consider adding TLS 1.3 support to our existing okhttp transport.


7435
LoadBalancer.requestConnection() may be ignored if it's called before subchannels are created3

What version of gRPC-Java are you using?
What did you expect to see?
Calling ManagedChannel.getState(true) will make the channel to try to connect to the server at least once, no matter when it's called.
What did you see instead?
Calling ManagedChannel.getState(true) makes the channel try to connect to server only if it's called after subchannels are created, i.e., after name resolution in pick-first, and after backend addresses are received in grpclb. If getState(true) is called before that point, the channel won't try to connect to servers after subchannels are created, unless getState(true) is called again.


7439
Upgrade compile/target Android SDK version to 293

grpc-android (currently SDK 28) uses android.net.NetworkInfo to detect network connectivity for API < 24, which has been deprecated in SDK 29. This may block us upgrading the compile SDK version.
grpc-android-interop-testing (currently SDK 26) needs some cleanup for errorprone and need to migrate android support library to AndroidX.


7442
De I need to shutdown and re-create a ManagedChannel.shutdown() for recovery from StreamObserver.onError()4

Hey, thanks for looking this question!
In our java application, we create a ManagedChannel, and an async stub from that channel, in order to do streaming calls.
When StreamObserver.onError() is called, we did some recovery work, including:
However, according to the doc of channel:
A virtual connection to a conceptual endpoint, to perform RPCs. A channel is free to have zero or many actual connections to the endpoint based on configuration, load, etc.
And the question:
shutdown and re-create channel seems not very necessary.
My question is, when StreamObserver.onError() is invoked, are step 1,2,3  needed for the recovery? or We can reuse the the channel and stub, just need step 4 to re-create the StreamObserver, which means starting a new RPC on a previously opened channel by re-creating a StreamObserver ?
Thanks!


7449
De I need to shutdown and re-create a ManagedChannel.shutdown() for recovery from StreamObserver.onError() 4

Hey there! Thanks for looking at this question!
This is a follow up question from #7442
I wonder if there were cases where ManagedChannel should be recreated. Or ManagedChannel is totally self-recoverable, ManagedChannel.resetConnectBackoff() is enough for the recover task upon network jitters ?


7456
Make backoff policy in AbstractManagedChannelImplBuilder and subclasses customizable5

Currently AbstractManagedChannelImplBuilder.build() method creates backoff policy with default values:
This makes it impossible to configure backoff policy when using sub-classes such as NettyChannelBuilder.
Ideally we should be able to customize backoff policy on each builder implementation (NettyChannelBuilder is the one that I specifically care about at the moment) and use default policy if custom value hasn't been provided.
Please let me know if there are any other ways of configuring this policy or if I'm missing something.


7462
how to cancel a subscribe6

No description provided.


7463
Multiple gRPC servers within the same application and towards the same host interfere with each other?6

Settings:
Two identical grpc servers on the same machine within the same JVM (It's a local simulation for a cluster). They are binded to different ports.
When a request towards the server A is issued, everything is fine. When a trying to build a channel towards B, gRPC complains about the channel used for A to not being closed.
The request done towards A is a stream requests, so it is supposed to be still working.
The code used for creating the two different channels:
What version of gRPC-Java are you using?
What is your environment?
OpenJDK Runtime Environment (build 15+36-1562)
OpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing)
What did you expect to see?
No errors
What did you see instead?
Steps to reproduce the bug


7464
How do I use CronetChannelBuilder with localhost (i.e. plaintext)?6

It seems like CronetChannelBuilder doesn't support plaintext channel right?
How do I test it with non-ssl localhost server?
Thanks


7465
What is the correct Kubernetes health status for channel state TRANSIENT_FAILURE?6

The Javadoc states:
Channels in this state will eventually switch to the CONNECTING state and try to establish a connection again.
Which of Kubernetes liveness and readiness check does this map to? I believe the application is alive but not accepting requests, not down, but I can see someone arguing the other way.


7467
JUnit ExpectedException is deprecated6

In JUnit 4.13 ExpectedException is deprecated. The replacement, assertThrows, is Java 8-centric and would be annoying to use in the short-term. Using try+fail would increase boilerplate and would be worse than just using ExpectedException.
We can @SuppressWarnings for now, but we should swap to assertThrows (or Truth's variant) in the future once we can use Java 8 in our tests.


7479
ChannelCredentials is experimental7

This includes TlsChannelCredentials, InsecureChannelCredentials, CompositeChannelCredentials and many more.


7486
Build Error: This version of %1 is not compatible with the version of Windows you're running8

What version of gRPC-Java are you using?
protoc-gen-grpc-java:1.4.0
What is your environment?
JDK 1.8
Windows 10
What did you see instead?
Steps to reproduce the bug


7505
Include exemplars in OpenCensus instrumentation0

Is your feature request related to a problem?
The OpenCensus GRPC instrumentation does not attach exemplar spans along with the distribution stats it collects.
Exemplars are example points that may be used to annotate aggregated distribution values. They are metadata that gives information about a particular value added to a Distribution bucket, such as a trace ID that was active when a value was added. They may contain further information, such as a example values and timestamps, origin, etc.
Google cloud monitoring can interpret and display these exemplars to link metrics to example spans.
Describe the solution you'd like
Add exemplars to grcp-census instrumentation directly near this code:
Adding something like this should work:
Describe alternatives you've considered
I don't think there is a way to do this without updating the grpc-census instrumentation code. AFAIK adding the exemplar to the MeasureMap directly is the only way to do it.
Additional context
I'm not sure how to get the OpenCensus Tracer for tracer.getCurrentSpan() inside of CensusStatsModule. It may also be beneficial to check if the current span is being sampled before attaching it to the MeasureMap.


7513
The different between Retry policy and Hedge Policy1

I have read the documentation : https: . I kind of confuse different of hedge policy and retry policy. I wonder when i enable Retry Policy if the first RPC is fail, the second will be send to the same address? Can you distinguish those two policies to help me.


7514
XdsServerBuilder is experimental1

Also:
XdsServerCredentials
XdsChannelCredentials


7519
Crash due to use of getAlpnSelectedProtocol on Android 111

What version of gRPC-Java are you using?
1.25.0
What is your environment?
Android 11, target API level 30.
What did you expect to see?
Possibility to use grpc-java in apps targeting API 30 on Android 11 devices.
What did you see instead?
Steps to reproduce the bug
Use io.grpc:grpc-okhttp:1.25 transport and issue a gRPC request in an app compiled to target API 30 on Android 11. This happens due to outdated OkHttp while it seems the graylisted getAlpnSelectedProtocol method issue was fixed in https:(more info in: square/okhttp#3980). It is not possible to force grpc-okhttp to use 3x OkHttp as there are breaking changes, it also seems that the #6119 has stalled.
I am not sure if there is any workaround to this?


7520
About the size of the NettyServer thread pool2

I read the size initialization code for numEventLoops in the io.grpc.netty.Utils.DefaultEventLoopGroupResource class. I understand that "io.netty.eventLoopThreads" is a property that customizes the value of numEventLoops, but System.getProperty("io.netty.eventLoopThreads") does not seem to be useful. Why is this?


7524
Does nginx grpc_next_upstream support http_5022

I use nginx as a proxy server of grpc server. I expect nginx server can take an upstream server as unavialble when the upstream server return a response with error code 502. However, nginx server didn't work as expected. nginx server didn't take the upstream server as unavailable, and keep sending request to it as usual.
Below is an example. A grpc client sent request to nginx server every seconds, and nginx kept sending request to the upstream server which return 502.
Does nginx grpc_next_upstream support http_502?
access log file:


7527
Protobuf-3 grpc-java : Missing method "getIdCase()" ? Classes generated with '--experimental_allow_proto3_optional2

I used the proto3_optional, and getting this xxCase() method missing on field that are 'optional'. Is there a workaround for this?
Generated message class "muni.model.Model$Person" missing method "getIdCase"
Caused by: java.lang.NoSuchMethodException: muni.model.Model$Person.getIdCase()
Note: I need to retain hasXX() method working for validating objects, and JsonFormat.printer(myproto) for deserializing.
Note: Not sure where this bug belongs, reported in protobuff, protocolbuffers/protobuf#7970
Proto object
Error about missing method
Error happens wherever deserializing is involved
e.g jsonprint, System.out.println(myproto).


7529
Request timeout for OkHttpChannelBuilder2

Hi, is there a way for us to set a request titmeout for OkHttpRequestBuilder?


7530
Accessing the server from inside a call in order to implement a "shutdown" rpc3

Hi!
Is it possible to access the Server instance from a call handler so that it can request graceful shutdown of the server?
I would expect it to be available through the current Context, and even found the corresponding Key definition, but it turns out to be package private, and has a comment suggesting to file an issue:
Is there maybe another way to implement a "Shutdown()" rpc? I could of course resort to having a global variable holding the Server instance, which is a singleton anyway, but would very much like to avoid doing that.
Thank you.


7531
How understand and resolve  kinds of GRPC Client Errors3

Version:
BidStream Client Code:
The code log.error("findMulti client", throwable); Sometimes print kinds of errors,but I still can't understand and resolve them even though I search any issues.
Any idea is welcomed ,thanks.


7534
Getting grpc-netty-shaded working in a GraalVM Native Image Build?3

Hello, I'm working on trying to get client libraries which depend on grpc-netty-shaded working with GraalVM native image builds with the Quarkus framework.
I've gotten to the point where I can succesfully compile an application, but at runtime I encountered an error that looks like this and am curious what conditions might cause this:
One tricky point is that Quarkus also pulls in their version of Netty. And I was wondering if grpc-netty-shaded can co-exist with another version of Netty on the classpath; I was wondering if this error might be related to this complication.
Curious if you might give some hints for what might be wrong. I.e. Are these providers discovered via reflection for example?


7536
Question about overrideAuthority and OkHttpBuilder settings3

Hello, I am trying to implement a GRPC connection using swift GRPC and I run into a 401 unauthorized issue I asked for help there and they pointed me to include an http header called "authorization".
The connection to the server using GRPC-Java is done like this:
So I have two questions:
1 What exacty does ".overrideAuthority" property do?
2 In this particular case does using OkHttpBuilder include that header and if yes what would be the value on that header?
I am curious as I have little experience with networking and http and so far after researching the 401 error all I can find is setting the header to use a token but in Java the implementation did not add any token as far as I understand (There is no login on the server all I get from it is a signed csr from an earlier connection to the server)


7540
Apply package name shading to native-image config files in grpc-netty-shaded4

The grpc-netty-shaded JAR provides several config files under the resources/META-INF dir:
I.e. native-image.properties and reflection-config.json in the screenshot.
Inside these config files, the library writers reference Netty package classes, and it would be very useful if these classes could also have their packages renamed during the shading process.
But it should be updated to this:
These files and settings are used by Oracle's GraalVM compiler to assist in the ahead-of-time compilation process. The original library writers added it in so that it would work with native image building.
Is your feature request related to a problem?
Yes, this will greatly contribute to the internal effort of getting Google Cloud Java client libraries compatible with GraalVM native image compilation.
There is significant user interest from Native image app developers for this feature (Quarkus, Micronaut, Spring + GraalVM).
Describe the solution you'd like
Is it possible to extend the shading process to apply package name updates to config files under META-INF/native-image/?
Describe alternatives you've considered
Users can duplicate configuration on their own manually, but this runs the risk of going out of sync with the Netty repo when changes are made.
cc/ @meltsufin


7544
Contextualized listeners chain support4

Currently, ContextualizedServerCallListener can be built only with  ServerCall<ReqT, RespT> call,
Metadata headers and ServerCallHandler<ReqT, RespT> next parameters which are used to create the wrapped listener.
This allows to propagate context to the method implementation.
However, it's impossible to have another listener with access to the context.
Please expose ContextualizedServerCallListener to accept custom listener as the input argument :
In server interceptor :
This will allow to build contextualized chain of


7552
Binary backwards-incompatibily in 1.33.05

My library contains code like:
which breaks when moving from, unless recompiled (and then the new binary would not be compatible with versions < 1.33.0). This is because a class (AbstractManagedChannelImplBuilder) was removed from the direct superclass heriarchy:
Changing the direct superclass or the set of direct superinterfaces of a class type will not break compatibility with pre-existing binaries, provided that the total set of superclasses or superinterfaces, respectively, of the class type loses no members.
I know that technically netty transport is still considered experimental (per #1784), but (a) it's the primary transport and (b) it's been that way for more than 4 years.
Was this intentional/known or is it a case of "it's experimental, tough!"?
It should be easy to avoid I think by for example just adding an empty abstract class AbstractManagedChannelImplBuilder extends ForwardingChannelBuilder... maybe in a 1.33.1? :)


7557
replace NettyChannelBuilder.nameResolverFactory5

Grpc load balancing needs to be used, but the method nameResolverFactory() has been abandoned. How to replace it?


7558
Inconsistencies in Bidirectional Streaming Error Handling5

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Documentation on when and what onError() callbacks are called when receiving errors from either side (server / client), and a consistent behavior in both.
Also - a consistent error (and documentation) of using a stream after an error has been raised on it.
What did you see instead?
Multiple inconsistencies in Exception classes and whether they've even been thrown.
Steps to reproduce the bug


7563
gRPC server instantly resets stream for requests to one API after some time6

Hi all. We are using java-grpc version 1.23.0 (EDIT: have noticed the same behavior in 1.32.2) and we are seeing some unusual behavior. After some amount of time of responding to requests normally our gRPC server will start sending OUTBOUND RST_STREAM in response to requests to only one of our APIs. The requests seems to make it to the Netty layer but never make it to our API implementation. Does anyone have an idea why this might be happening?
Some observations
This only happens to one of our microservices (in a mesh of many)
This only happens to a single API call on the server
In the logs I see error codes 5 and 8 I believe are HTTP 2 error codes for stream closed and cancel.


7566
Passing multiple --plugin args to protoc with java_grpc_library?6

Hi, we have been using java_grpc_library for a while and it works great!  We are now adding Kotlin code to our monorepo and we'd like to support kroto-plus, which is implemented as a protoc plugin (passed to protoc using --plugin). It looks like java_grpc_library currently doesn't allow multiple --plugin args.
The question: is this something that's already on your radar?  I didn't see an existing issue for this.  Or is there a workaround already?  If you are not planning to support this, we can probably contribute a fix ...
Thanks!


7571
ServerCall#close(Status, Metadata) never called for client-cancelled calls7

What version of gRPC-Java are you using?
also affects previous versions
What is your environment?
What do you wish to achieve
I wish to report the request count/duration including the result status (including CANCELLED ones).
See also:
What did you expect to see?
What did you see instead?
Which might lead to a memory leak if a resource is attached to the ServerCall instead of the ServerCall.Listener.
Steps to reproduce the bug
Add a custom cancel method to the ServerCall and call it from the Listener#onCancelled
Use the GrpcContext#addCancellationListener to mark the call as cancelled (not tested)
Expected changes
ServerCall#close is also called for (client-side) cancellations.
ServerCall#close's documentation is amended stating that it won't be called for (client-side) cancellations and other client errors such as connection loss/timeout(?).


7579
gRPC client blocks indefinitely7

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
On restarting the gRPC server we expect all the client connections to close. But this doesn't seem to happen.
What did you see instead?
The connection on the client-side remains as it is, for some client requests we got
CANCELLED: io.grpc.Context was cancelled without error , After that all the requests got blocked indefinitely.
Note: We have DNS for load balancing.
Steps to reproduce the bug
Start a gRPC server.
Make some calls to gRPC server through the client.
Try simultaneously restarting the server.
Try making new calls to the server using the client mentioned in 2.


7581
Thread Leak8

What version of gRPC-Java are you using?
What is your environment?
OpenJRE 15 on Linux and Windows
What did you expect to see?
I'm trying to receive chat messages via a long running stream.
What did you see instead?
GRPC permanently spawns new threads while reading from the stream without closing them.
My function which i use to receive the messages looks like the following:
All threads have the same stack trace:


7583
Use grpc-bom in the examples8

Is your feature request related to a problem?
Examples will be copy paste a lot and it is good to show there all the best practices.
Describe the solution you'd like
Use gRPC bom in the example code.
Describe alternatives you've considered
Keep things as they are.


7584
grpc stream server java.lang.OutOfMemoryError: Direct buffer memory8

I run client test code:
the server fails after 10 successful requests.below is log:


7587
Grpc time out for 15 minutes8

Hey, i am using mentioned version of grpc libraries. so we have 2 services running on grpc , service A create a managed channel during startup and uses it throughout lifetime of pod. service A receives heavy load (100 req/s) . sometimes we keep receiving timeout error for around 15 min , no call reaches service B. after 15 min automatically this resolves, after doing some browsing i checked this could be becasue of TCP_USER_TIMEOUT being set to around 15 min by default. so can someone confirm if this is the same issue, or something else which i am missing
Below is the code used to create channel


7591
RetriableStream backoff algorithm9

Hi there, I have a question about the implementation of the RetriableStream. I am trying to configure a gRPC client using a retryPolicy. If I for example configure it to try 5 times, with an initial backoff of 2s and max of 10s, multiplier two, it can result in a set of backoffs looking like:
I would have expected it to go in a generally more incremental direction. It seems that for each iteration the next backoff is taken from a range (0, nextBackoff):
Is this expected behaviour? Shouldn't instead some small amount of jitter be applied instead? Thanks!


7594
Flaky OkHttpClientTransportTest.testClientHandlerFrameLogger9

Seeing this a couple of times in the past.


7596
client fatjar seems too big9

Hello,
I try to build a client-server communication channel via grpc, where the server is a Spring app and the client is an oracle JVM. I need to build a fatjar which contains all the runtime dependencies for my code. If I do this,
My question is am I doing something wrong? I thought grpc client app should be a lightweight thing, but 10 MB and 10 thousand class is everything but not lightweight.
Thanks


7599
Non-recoverable status when the client executor has rejected tasks (INTERNAL: Panic! This is a bug!)9

What version of gRPC-Java are you using?
What is your environment?
Operation system: Linux / Windows
Jdk: OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.6+10, mixed mode)
What did you expect to see?
In the case of using a channel with an executor that has a maximum pool size and an "Abort" rejection policy. Using a stub based on "AbstractAsyncStub" when a sufficient concurrency is created for rejected in the executor then occurs:
"io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!" due to "Caused by: java.util.concurrent.RejectedExecutionException: Task io.grpc.internal.DelayedClientTransport$5@363c30da rejected from java.util.concurrent.ThreadPoolExecutor".
What did you see instead?
After this point the system does not recover until the reboot and the requests always produce the last panic error.
Steps to reproduce the bug


7602
Error While Calling Api0

how to solve this? in my android App


7604
ComputeEngineChannelBuilder fails on App Engine0

What version of gRPC-Java are you using?
I'm using version 1.33.1.
What is your environment?
App Engine Standard Environment using Java 11.
What did you expect to see?
I am using the Java Bigtable client which sets up a gRPC connection to the Bigtable service. In GAE Java 11, the application default credentials are an instance of ComputeEngineCredentials, which talk to the project's metadata server to obtain auth tokens. This works fine for many client libraries, however the Bigtable client uses DirectPath since version 1.17.0 by default. This code path includes the usage of gRPC's ComputeEngineChannelBuilder. I would expect this to work on App Engine.
What did you see instead?
As the file /sys/class/dmi/id/product_name is not available on App Engine Standard instances, an internal error will be produced resulting in an exception when making gRPC calls.
Steps to reproduce the bug
Use the Bigtable Java client with version >= 1.17.0. Create a client and read an example row:
This results in the following stack trace:


7605
Alternative to GRPC_XDS_BOOSTRAP env variable0

Goal
I'm looking into creating a utility function that can dynamically create and assign the xDS bootstrap.
This could be hooked into the application startup so that xDS can be configured across different environments (IDE, GCE, GKE) without the need of startup shell scripts etc.
While almost every programming language supports dynamically setting environment variables, Java does not.
Would it be possible to have an alternative way in java to provide the location of the bootstrap file?
Possible solution
One possible solution that doesn't break the existing API and gRPC spec would be to also try reading e.g. a java system property
In the case that the GRPC_XDS_BOOSTRAP environment variable isn't found.
Maybe something as simple as:
Alternative solutions would most likely require larger changes to the existing classes in order to pass the config down.


7607
grpc Client-Streaming Java Client gets io.grpc.StatusRuntimeException: UNAVAILABLE: HTTP status code 5030

I have a grpc Nodejs server behind a HAproxy and client-streaming rpc java maven.
When i run the java client it return an error:
No server is available to handle this request.
I already test a rpc client streaming with Nodejs and it worked.
My java client code:
Can this problem occurs by different implementations of different libraries of language in GRPC?


7608
io.netty.channel.epoll.Native.epollWait0 Takes up most of the CPU0

I send 15000 tps from clients in my loader testing,then I found my server's cpu up to 95%
top:
jstack info for the top threads :
is it normal that this native method take up most of the cpu?


7612
grpc-alts 1.33.1 using old version of google-auth-library-oauth2-http, bringing vulnerable apache httpclient1

What version of gRPC-Java are you using?
(Currently the latest) 1.33.1
What is your environment?
Problem is system independent
What did you expect to see?
I would like to see that the latest apache httpclient 4.5.13 is being used when I do a "mvn dependency:tree" in a maven based project using the (latest) java gprc library. This latest 4.5.13 version of apache httpclient is currently the only version which is not vulnerable (see e.g. https the first link I found when I searched it). I did not try to assess the severity of this vulnerability, just saw a security vulerability scan tool (Anchore) reporting apache httpclient 4.5.10 (version used by the grpc library currently, see below) as vulnerable.
What did you see instead?
In a maven based project I executed "mvn dependency:tree" and this is what I found:
So in short: using even the latest grpc library will bring the vulnerable apache httpclient as a transitive dependency.
Probably this could be fixed easily: let grpc-alts use the latest com.google.auth:google-auth-library-oauth2-http 0.22.0, then it would use the google http client 1.37.0 .
Steps to reproduce the bug
Again, take a look at the dependency tree above and you can see that the grpc library 1.33.1 uses the vulnerable org.apache.


7614
Authentication SSL/TLS; Custom CA root certificates for Android1

I am trying to connect to a server over SSL / TLS and am using OkHttpChannelBuilder.
I have this error


7616
Protocol can't generate the service greeting on win10.1

I want to generate a new gRPC in a new maven project. But when I compile the helloworld.proto file, it is only generate the model of message. I can't get service greeting. So what should I do?


7619
io.grpc.StatusRuntimeException: UNAVAILABLE1

Good afternoon. I ran your example on android but got the error.
Everything works on java, but not on android
Please tell me why I might get this error


7621
ServerCredentials is experimental2

This includes TlsServerCredentials, InsecureServerCredentials, Grpc.newServerBuilderForPort, and many more.


7622
ALTS can leak handshake RPCs2

The OnHandshake RPCs start too early. They are started before the TCP connection is even established (when the stub is created, which is part of newHandshaker). If the connection is never established (e.g., the server can't be reached), the TsiHandshakeHandler won't be added to the Channel and so the RPC cleanup will never fire. Before the timeout added in #7589, this would be very bad.
We need to fix the bug, and evaluate how exposed our existing clients are. The v1.34 release is semi-okay, since it has a timeout in place so these busted RPCs won't live forever. But in the case that all backend connections are failing, it might still produce ugly results.
CC @veblush, @apolcyn


7623
Why no response after more than 24 hours and no error?2

No activity with more than 24 hours. Client request freeze after Contexts.interceptCall(context, call, headers, next). Request did not pass to service method, without any error. But connection still there, service method not execute.
Is there any changes about timeout(long time no activity) recently?
Update grpc from 1.29.0 to 1.32.2;
I add a log before try and in PS.getConnection(). I will test again after 24 hours.


7625
NPE when getting remote address2

Hello!
I have implemented a metric in grpc server to track incoming connections using transportFilter API.
It works good on local machine, but having deployed my app into openshift I faced strange warn messages with NPE.
The code which throws exception:
Any idea why it can happen?
I attached the log.
Thank you.


7637
Getting "javadoc: error - invalid flag: -html4" when trying to build3

What version of gRPC-Java are you using?
I am on master branch. git status gives this
On branch master
Your branch is up to date with 'origin/master'.
What is your environment?
I am using  ubuntu 18.04
What did you expect to see?
I was following steps in building grpc-java, with all prerequisites (including protobuf) and expected a successful build using gradle.
What did you see instead?
Steps to reproduce the bug
How did I fix it
I know this is not the ideal way to do this. Can anyone provide more information on this? Thanks!


7639
del3

No description provided.


7643
ALTS: GRPCLB LoadBalancer had an error 4

When running GCS benchmark over DirectPath with gRPC 1.34.0-SNAPSHOT, it failed with the error below. It has been working with gRPC 1.33.1.
What version of gRPC-Java are you using?
What is your environment?
Linux Debian/10
What did you expect to see?
Connecting to the backend using ALTS.
What did you see instead?


7650
Confusing about ManagedChannelBuilder.forAddress 5

I have two grpc client.
this is ok
It's  very confusing for ManagedChannel.forAddress. The behavior will be changed by register NameResolverProvider.


7651
Full method name should be consistent with that from Protobuf5

Given method Greet:
The com.google.protobuf.Descriptors.MethodDescriptor.getFullName returns com.example.GreetingService.Greet, but io.grpc.MethodDescriptor.generateFullMethodName returns com.example.GreetingService/Greet. This is super confusing, and also error prone when making calls using low level ClientCalls API. For example, the gRPC CLI expects method name as com.example.GreetingService.Greet.
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
The full name should be consistent with that from Protobuf.
What did you see instead?
They don't match.


7652
LoadBalancer open too many connection5

What version of gRPC-Java are you using?
Latest
What is your environment?
Linux
What did you expect to see?
LoadBalancer keeps limited number open connections.
What did you see instead?
On each address that return NameResolver to RoundRobinLoadBalancer opened by connection. It's difficult to scale when
NameResolver return more then hundred hosts.
The result of call one request on ManagedChannel that has NameResolver with 1k+ hosts:
Steps to reproduce the bug
I have a NameResolver that by special endpoint resolve a list of hosts that can be use to execute queries. On some endpoint, this NameResolver can return 2k+ hosts, user can send request to any of them. When NameResolver return a lots of code I faced with a problem, that RoundRobinLoadBalancer try connect to all of hosts, instead of create connect only when it requested(limited active pool). I happens in code
Is it valid use NameResolver + LoadBalancer on ManagedChannel? Or it should be other channel on top of ManagedChannel that implements load balancing and resolving himself?


7655
direct memory leak detected via ResourceLeakDetector5

Hi ,I use biStream model to send messages to client from server. then I detect memory leak via use ResourceLeakDetector
Recent access records:
Cound any one give me some instruction? It is a bug or not ?


7656
Grpc transfers a large amount of data files, which takes up a lot of memory  buff/cache5

No description provided.


7667
Support custom KeyManager with TlsChannelCredentials6

I am working on adding mtls feature to Google gax-java library PR. We need to add ssl context to ManagedChannelBuilder. The code in my PR looks like this:
In the code I cast the builder type from ManagedChannelBuilder to NettyChannelBuilder, and add the ssl context. This code is for grpc so the cast works.
Our concern is that NettyChannelBuilder is from io.grpc.netty.shaded.io.grpc.netty. It is supposed to be private to grpc-java I guess.
My question is: is this OK? If not, how can I pass the ssl context to the ManagedChannelBuilder. We must use ManagedChannelBuilder to build the channel (because we provide the user a callback to configure ManagedChannelBuilder), otherwise this will be a major breaking change for all googleapis client libraries.


7684
scope of dependency com.google.protobuf:protobuf-java-util become runtime from compile8

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Compare the following two pom:


7690
protoc-gen-grpc-java not available on apple m19

What version of gRPC-Java are you using?
1.34.0
What is your environment?
What did you expect to see?
build success
What did you see instead?
Steps to reproduce the bug
mvn protobuf:compile


7691
thread hangs and cannot exit9

What version of gRPC-Java are you using?
What is your environment?
What did you see instead?
Thread is hanging.
Steps to reproduce the bug
I've read some issues(#7362, #7579, #5286, #7635), but cannot figure out the reason. It's very difficult to reproduce it.
In my env, it seems because of unexpected channel.shutdown:
Thread1 and Thread2 hold the same channel. Thread1 shutdown channel unexpectedly. Is it possobile that Thread2 will hang?


7692
gRPC + netty throw exception and long stack trace when receiving HTTP/1.1 request9

What version of gRPC-Java are you using?
What is your environment?
Linux RHEL7
What did you expect to see?
Less noisy failure when receiving an HTTP/1.1 GET request
What did you see instead?
Steps to reproduce the bug
Note: ideally this would be addressed with #3458 so that we can define what to return for load balancers/VIPs/outside services that like to check liveness of a service using the only way they know how, which is an HTTP/1.1 request.
But in the interim, it would be nice not to have this type of stacktrace appearing in our logs every 5 seconds (interval for the HTTP/1.1 checks).


7695
can't compile java_grpc_library9

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Define a java_grpc_library rule and use it
What did you see instead?
When I define a java_grpc_library rule, I get this error with 1.33 and 1.34:
Steps to reproduce the bug


7697
Modify the way of get env param in example module.9

What version of gRPC-Java are you using?
on master head


7699
Refactor getHedgingServiceConfig in io.grpc.examples.hedging.HedgingHelloWorldClient9

No description provided.


7703
xds: Need test verifying generated code isn't leaking protobufs0

#7702 fixes a problem where protos using the udpa.annotation and envoy.annotation java packages were failing to be relocated. It existed since 1.28, the first release to include grpc-xds. It seems clear we need an automated check to make sure this sort of thing is caught, as the manual checking didn't work.
It may be easiest to do this in Gradle, with a task that depends on shadowJar and adds itself as a dependency of test. It would look through the contents of the jar and make sure everything is in the io.grpc.xds package. Care should be taken to support up-to-date checks properly.


7711
Access HTTP2 headers in Client/Server interceptors1

Hello,
In the interceptors we would like to capture HTTP2 headers - authority, method, scheme and path. However this are not propagated from the transport (e.g. netty) to the interceptors. Is there any supported way to access these headers in gRPC interceptors?
Currently our implementation uses hacks and it instruments io.grpc.netty.Utils#convertHeaders. The instrumentation adds HTTP2 headers into gRPC Metadata object. This works well for the server side, although we don't like that we store additional data to Metadata. For the client it does not work and we had to instrument io.grpc.netty.Utils#convertClientHeaders and put the HTTP2 headers directly to span object - accessed via thread local - this does not work for the first request when DelayedStream is used see hypertrace/javaagent#109 (comment).
Any hits are appreciated.


7715
Grpc does not send information after a period of time, and does not return when sending again1

HELP
Grpc does not send information after a period of time, and does not return when sending again
Who has ever met this situation?


7716
Is there a better way to add multiple Services to GRPC-Server?1

Every time we add a new Service to the GRPC-Java Server we have to add another .addService(new MyServiceX).
Something like this:
And we need to add a lot of services to our GRPC server.
Is there a better way to add all the services in one go?


7719
Expose SecurityLevel on server-side1

This is an out-shoot of #7711. Basically, there is not a generic way of determining the level of security offered by the transport for RPCs on server-side. This can be approximated by looking for the SSLSession, but that doesn't work for ALTS and maybe some future TLS approaches.


7721
gRPCLB fails RPCs if gRPCLB server unavailable2

This is split out of #7643 (comment):
The initial RPCs seem to fail because the picker is immediately failed when lb RPC fails and there are no backends. Changing the logic to try fallback backends first should be possible, but it also seems it will be a hard to define/implement all the edge cases.
@apolcyn, does it seem wrong that initial RPCs fail if gRPCLB server is unavailable, when fallback is available but hasn't been tried yet? It appears later RPCs would succeeded as the picker would be replaced to buffer further RPCs and eventually the fallback would come online. It seems like we may need to change this error behavior.


7725
io.grpc.SerializingExecutor swallows RuntimeExceptions thrown by gRPC services2

Users can call ServerBuilder#executor() to arrange for gRPC service callbacks like onNext(), onError() and onCancelHandler to be dispatched on a custom Executor. However, when one of those callbacks throws a RuntimeException (due to bug / programming error in the service) that Executor and/or its Thread's UncaughtExceptionHandler never sees it. Instead, io.grpc.SerializingExecutor catches the RuntimeException, logs it and just keeps going.
This might be enough in the datacenter where server logs are typically retained for later debugging, but for mobile "on-device" gRPC servers, the java.util.logging output isn't typically seen by anyone. In that environment, it's more common to handle unexpected Exceptions programmatically and gRPC should somehow make this possible.


7727
GRPC Stream Server message deliver slows donw if rate of dataproduced is  below 30 m/s 2

In my usecase i use server side stream and used async stub when i produced data ie call onNext per 30m/s or slow the lag is increased to reach the data to client ?
What will be the reason for this


7729
Netty Version Combinations table update2

I was wondering whether the version combination table here is still being updated. As it stands, I am maintaining a project which uses both grpc-netty and netty-tcnative-boringssl-static, which both have seen recent releases with versions above the last mentioned.
For clarity, the table currently shares the match between 1.32.x- of grpc-netty to 2.0.31.Final of netty-tcnative-boringssl-static, whereas the most recent release of grpc-netty is 1.34.1.
Should I simply be patient and wait for upgrading, or has the table not been updated for some time?
Thanks in advance for any advice on this topic!


7731
AndroidChannelBuilderTest is incompatible with Robolectric 4.43

When I tried to upgrade to robolectric 4.4, compilation failed:
It's not obvious to me what is going on, but I'm not familiar with shadowOf()


7732
Migrate to new OpenCensus APIs for OpenTelemetry migration3

census-instrumentation/opencensus-java#2059 added some new APIs to be able to use the gRPC context or the OpenTelemetry context. That change breaks gRPC (census-instrumentation/opencensus-java#2069). Ignoring the breakage, we still want to figure out what changes we should make on our side and whether we can adopt the new API. We should also investigate what their migration looks like in the context of gRPC and its users.
Gribkoff, assigning to you for initial investigation, since this may influence your work. But I assume that before any larger changes we'd coordinate and determine who is appropriate.


7734
Fix lint issues in Android projects3

It seems we aren't targeting the a recent Android version. Many of the CheckResult failures appear to be expected behavior, so it will need to be silenced in some way. There's some warnings about old versions and some UI goo. Quite a mixed bag. I'm fine if we resolve a substantial portion of them with this issue and open separate issues for the remaining items.


7736
Migrate from digital.wup.android-maven-publish3

The Android Gradle plugin 3.6+ provides native support for Maven Publish plugin. I don't know anything will break if we use 3.6 along with the existing digital.wup plugin, but we should consider migrating to the built-in support during/after upgrading to 3.6.
When upgrading to 3.6 we should definitely confirm that the pom output looks correct.


7741
Can modify the code generator plugin, remove static import code in the auto generate code?4

In the XxxGrpc generated by plugin. Exist such import codes:
As a learner for grpc-java, I think use
will be better, it's more readable.


7752
xDS channel shutdown problem5

Environment: Windows, openjdk-11.0.4
With the simple demo code below:
Output:
Hello world
Then I look into the source code, concentrating in two classes: io.grpc.xds.SharedXdsClientPoolProvider and io.grpc.xds.AbstractXdsClient.
And then AbstractXdsClient will shutdown its underlying ManagedChannel, which is used to communicate with xDS server:
But acording to SharedXdsClientPoolProvider:69, the ManagedChannel is shared among all XdsClients.
One XdsClient's channel shuts down, all XdsClients' channel shuts down.
And look at SharedXdsClientPoolProviderTest, it seems that the case shown above is not covered by the unit test.
So shouldn't I invoke xds-targeted channel's shutdown()? Or it's a bug?
If I should never invoke shutdown() of xds-targeted channel, how can I manage the channel's cleanup? I need create, cache, shutdown, and re-create channels of many different "xds://xxx" targets in my code. Do increasing un-shutdown channels lead to resource leaks?
Thanks.


7757
libstdc++-static missing on RHEL8 5

I am trying to build grpc-java on powerpc ppc64le under RHEL8, however since RHEL8 doesn't contain the libstdc++-static packages the following error is seen:
any ideas on how we can work around this ?


7760
avoid split big data frame by WeightedFairQueueByteDistributor.allocationQuantum6

Is your feature request related to a problem?
When we send big data frame(100K) to server(concurrent stream in one connection), gRPC java client will split data frame to multiple data frames. In some case(reduce latency time), we don't want to split the data frame. After test, we found allocationQuantum of WeightedFairQueueByteDistributor will affect, but gRPC java client just set 16K to this parameter, and we can't change it through config.
Describe the solution you'd like
We can change WeightedFairQueueByteDistributor allocationQuantum through config.


7765
Investigate TLSv1.3 with Conscrypt6

For some reason Conscrypt is incompatible with TLSv1.3 in ways that I wouldn't expect. It is known incompatible with the default TrustManager on older JDKs because those don't support TLSv1.3. But I explicitly constructed a TrustManagerFactory with the Conscrypt provider and passed it to sslContextBuilder.trustManager(TrustManagerFactory) and it still failed (the stack trace makes it seem like it didn't use the TrustManager I provided):
But there's incompatibilities with JDK 8u275, which supports TLSv1.3, which is super-unfortunate:


7767
MessageIOException occurs when building grcp-core:test6

An MessageIOException occurred when I download the source code of grpc-java to build it. More details are as follows:
Operating System: Windows 10
JDK: openjdk 1.8.0_265
What I did:
using cmd to run gradlew build
I still couldn't find the solution after visited stackoverflow and docs.gradle.org
Could someone help me?


7768
Ask to access onMessage to parse message to get key json ( example try to get code code : 400, code 600)6

My response likes
I want to get the code value, so I try to parse it from message, but it nothing can help me excepting i cast it to my model GetFollowingResponse. I have many getAPi with model response so it is not correct


7774
TLS example fails with ClosedChannelException when using ed25519 certificates7

What version of gRPC-Java are you using?
What is your environment?
OS: Linux (Debian testing x86_64)
JDK: OpenJDK 11
What did you expect to see?
Client RPC completes successfully (greets localhost). Note that EdDSA using ed25519 is part of the TLS 1.3 standard as described in RFC 8446.
What did you see instead?
Steps to reproduce the bug
Modify HelloWorldServerTls#getSslContextBuilder() to call SslContextBuilder#forServer(PrivateKey, X509Certificate...), using BouncyCastleProvider to support the EdDSA algorithm with java.security.KeyFactory in addition to the existing EC, RSA, and DSA algorithms.
Verify that the example still works with the provided certificates/keys for server TLS.
Generate new certificates following the instructions at testing/src/main/resources/certs/README, but with the ed25519 algorithm (equivalents of ca, client, and server1). Note that the command lists the wrong extension section for server1-openssl.cnf, and it should be v3_req instead of req_ext.
Rebuild and run the example using the ed25519 certificates.
I'm happy to share my modifications and certificates/keys if it helps.


7775
Unable to build grpc-java in v1.34.17

What version of gRPC-Java are you using?
What is your environment?
Unable to build in examples folder
What did you see instead?
Task :generateProto FAILED
FAILURE: Build failed with an exception.
What went wrong:
Execution failed for task ':generateProto'.
Steps to reproduce the bug
Seems like issue with url " "


7776
LEAK: ByteBuf.release() was not called before it's garbage-collected.7

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
no leak
What did you see instead?
Recent access records:
Steps to reproduce the bug
not occur very often.
code


7794
NettyServerTest failed9

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
I hope all test cases run successfully
What did you see instead?
An exception of TestTimedOutException occurred
Steps to reproduce the bug


7795
message of client can't send to server.9

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Grpc as a client at android, client will send  message to service, but some message loss
What did you see instead?
I have debug the code,  I find that  message will cached before DNS resolve,  for example client cached two message, when DNS resloved, only one message to send.
Steps to reproduce the bug
Client send two message before DNS reslove,   this issue happen 1/10. The messages using different ManagedChannel. one channel is http , another is https, the two channel have same host


7797
NettyClientTransport shutdown race: throws RejectedExecutionException 9

Discovered when investigating Metadata Applier behaviour with #6283
NettyClientTransport creates newStream() when the channel is already closed. The exception is thrown when submit to eventloop at writeQueue. Transport was closed too early before the accepted RPC is finished.


7802
CPU utilisation is not 100%0

I have written a basic grpc server,
While load testing CPU utilisation is never 100%, current maximum I could take is 25%.
Any ideas how to get 100% usage for maximum throughput?


7819
Unit testing gRPC client/server with xDS?1

PR #7620 (issue #7605)  introduced the io.grpc.xds.bootstrap property as an alternative to the GRPC_XDS_BOOTSTRAP env var. This makes it possible to programmatically provide the xDS config (i.e. via System.setProperty). However, it by no means make it simple to unit test client/servers using xDS.
I see a need for unit tests with a transient xDS server running as part of the test (i.e. io.envoyproxy.controlplane:java-control-plane or similar) to allow clients to discover a server via xDS, all within a unit test.
While this works in single test isolation having multiple such tests running in parallell seems problematic given that these test then either need to use the same bootstrap config and thus the same host:port for xDS across all tests or risk concurrency issues when multiple tests want to use their own bootstrap config and point to it using System.setProperty.
Does my reasoning make sense or am I coming at this the wrong way? Is there an approach on how to unit test gRPC with xDS that I simply missed?


7820
java interop to prod interop tests are failing on master2

unning test large_unary


7821
I found a bug when I use the plugin(protobuf-maven-plugin:0.5.1)2

Codes of server are Python, and codes of client are JAVA. I hava an arg named "sentences" whose type is String[]. So I use setSentences() to build a Request. It's in the file QueryRequest.java :
The sentences_'s type is List.  I met a error of 'java.lang.IndexOutOfBoundsException' because its size is 0 at the beginning.
Then I change the codes of setSentences() (though IDEA tell me I should not)
Finally it works.


7824
How to set connection timeout by OkHttpChannelBuilder?2

How to set connection timeout by OkHttpChannelBuilder in a java client?


7828
OpenCensus 0.28.0 broke Java 7 compatibility2

We're not ready to remove Java 7 support yet. We should revert this to 0.24.0.


7830
io.grpc.netty.NettyClientTransportTest  fails on ARM64 Linux3

Running ./gradlew build -PskipAndroid=true -PskipCodegen=true consistently results in a failure
What did you expect to see?
tests pass
What did you see instead?
Steps to reproduce the bug


7839
Different message size leads to different performance3

The attach code is for repetition
My question is , when i assign  different size for the byte array ,i meet big difference in performance,for Example
The core code as below
When the byte array size is set to 1024 * 70, the receiveBytesPerSecond as below,just 100M+
It is so unstable,but i want a stable performance no matter how large the size is,because i can't control the data received


7844
How do you get the certchain when it is under 'resources'? 4

I am trying to get a 'secure' server running and am having some simple issues, totally due to me lack of understanding but still. :)   I can get a plain-text version of my grpc server running and I can get a 'secure' version running as well if I use a java configuration like this ...
But when trying to do it using configuration properties I keep getting the exception
Caused by: java.lang.IllegalArgumentException: certificateChain path cannot be null or blank
I get the plaintext server running then change the following properties in application properties
I have tried several combination of changing the 'file' and 'classpath' protocol and the '/' or not in front of the file name.
grpc.server.security.certificateChain=file:/vbp-grpc/localhost/server.crt


7845
runtime depdencies in grpc4

when switching to GRPC version 1.34 i suddenly noticed that some of it's dependencies were missing (i.e perfmark, animal sniffer,andoid annotations, gson) it causes classpath issues as we copy dependencies only in compile scope, what was the reason for it? naturally i'd rather not copy all  depdencies marked as runtimes well.


7846
one grpc server for both unary and bidi stream with netty4

I have a requirement to implement a grpc server in java which is capable of handling both grpc unary and bidirectional streaming.It is possible for the service that uses grpc bidi-streaming to send a large number of messages per second.(maybe 2000 messages per second or more)I have two implementations in mind and kind of confused which one suits my requirement most.
When using this approach , since both grpc unary and bidi stream uses the same port, one boss thread will be allocated for both unary and bidi stream. So i'm not sure how well it performs in case of bidi streams receiving large number of messages per second. (I mean whether the boss thread will get busy for bidi streams and become unavailable for the unary)
2 Use two servers one for grpc unary and one for grpc bidi streaming.
Here the previously mentioned issue is not there since we allocate 2 boss threads one for each grpc unary and bidi stream. But for the services I'm using an executor which uses java ThreadPoolExecutor and my question is should I use 2 threadpools for the two services that use grpc unary and bidi streaming ?


7850
why the non-shaded netty  has no UnixChannelOption5

why the non-shaded netty  has no UnixChannelOption


7851
Encountering UNAVAILABLE: Network closed for unknown reason after making successful requests5

What version of gRPC-Java are you using?
1.24.1 (I can reproduce the issue with 1.35.0 though)
What is your environment?
What did you expect to see?
Ideally I would like my outgoing requests to work. Realistically it would be helpful if the exception thrown by the gRPC layer was more actionable/debuggable. All I have to work with is UNAVAILABLE: Network closed for unknown reason.
What did you see instead?
We have a service which runs and periodically makes requests to other services to ensure they are working correctly. When the service boots up it generates a bunch of gRPC channels and GRPC client wrapper objects. During the initial test run the gRPC requests work completely normally. After roughly 15 minutes the second run begins and we start to see issues on some of the gRPC channels which are using mTLS and going through an AWS NLB.
With debug logging enabled I see every attempted request write OUTBOUND HEADERS followed by OUTBOUND DATA. Immediately afterwards the request throws an UNAVAILABLE gRPC status runtime exception with no additional cause. It seems that requests continue with the same streamId and exhibit the same failing behavior.
We see the following exception which is not very helpful.
After enabling DEBUG level logging I discovered that I only see outgoing outbound traffic and the code almost immediately throws an exception.
10 minutes later the second run starts after successfully receiving data...
Outgoing data continues to be sent for other requests and exceptions continue for each respective request
Steps to reproduce the bug
It is not immediately obvious how to reproduce the bug. The issue started happening to us recently.
From my observations the issue only occurs with mTLS connections and they must be idle or alive for a certain amount of time before they start exhibiting issues. We have non mTLS, TLS connections where this issue does not occur at all. I simply find it very frustrating to debug this issue given the exception is thrown from grpc-java.
Thank you for your time!


7855
how to use bazel to build protoc-gen-grpc-java5

Question: I want to build protoc-gen-grpc-java with bazel
Operating System: Debian buster
ARCH: mips64el
Description: When I type bazel build ... in compiler directory,it said


7864
AltsContext is experimental6

No description provided.


7866
package 'com.google.protobuf...' does not exist6

I'm trying to implement gRPC to my project and when I do everythig as you did in your Hello World example, I keep getting 'package com.google.protobuf. ...' does not exist and 'can not find symbol ...'
I added this line to my project gradle:
classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.14"
And to my app gradle I added:
apply plugin: 'com.google.protobuf'
And in dependencies:
Can someone tell me if I did something wrong or the issue is on your side?


7867
./run-test-server.sh and ./run-test-client.sh don't work (Therefore `Basics tutorial` is also broken)6

I was only following this guide
It looks like its outdated as the paths in the guide are already wrong. I found the relevant files/ directories and built the library and also the Android app. It turns out even the 2 basic test scripts don't work.
What version of gRPC-Java are you using?
gRPC-Java: Master branch (f0cf435b85a851ed8b2fa5ddcf8b2d1bc06f2984) and also tried 1.35.0 (remotes/origin/v1.35.0)
JDK: openjdk64-11.0.9.1 and also tried separately with openJDK@8 (installed via homebrew)
I am using jenv though
What is your environment?
What did you expect to see?
The intro scripts work. I start server script, then client script:
What did you see instead?
When running client script for Java 1.8/ JDK8 version"
Running test empty_unary


7868
Ability to get callExecutor in ClientInterceptor implementation6

Various interceptor implementations need to invoke listener callbacks such as in scenarios:
However, those listener callbacks maybe called in a wrong thread that its user or the channel provider does not intend to use. I believe many interceptor implementations have been doing this. The callbacks should be running in application thread (executed by callExecutor).
CallOptions provides getExecutor(), but this may return null, and in that case the callExecutor should fallback to the channel executor.
In some cases this would not be a big problem, but not in the case of delay, retry, or there are other interceptors switching application thread/running async tasks involved. The problem could be even more difficult to resolve if an interceptor implementation is to be used as a library for others.
Possible solutions:
Add a getExecutor() method for Channel class. Then Interceptor can call nextChannel.getExecutor() as a fallback of callOptions.getExecutor().
Problems to some solutions:
Executor lifecycle.


7869
Should it be documented that xds always uses the grpc-netty-shaded transport?6

Hello!
While examining the dependency graph of one of our projects, I realized that while the rest of the gRPC libraries are transport-agnostic (choices being grpc-netty grpc-netty-shaded okhttp and in-process), the xds module has a runtime dependency on grpc-netty-shaded.
My guess is that this is because xds itself uses gRPC.
I suppose this means that effectively when using xds, the only sane choice is to use grpc-netty-shaded as transport in the application itself (we use grpc-netty now). Is this correct? Should it be documented?
Thank you!


7873
option java_multiple_files doesn't generate multiple files.7

What version of gRPC-Java are you using?
Using the snippet code from the README.md file for maven.
What is your environment?
What did you expect to see?
After using the command mvn clean compile,
I should expect to see several java files generated as my .proto file does have option java_multiple_files = true; in it.
What did you see instead?
After using the command mvn clean compile,
I end up with a single java file containing several subclasses.
Steps to reproduce the bug
Generate a new maven project
Type the command mvn compile or mvn clean compile
Inspect the target/generated-sources/protobuf/grpc-java folder, you should have your package name and only one java class like this.
It's worth noting that we can still use the generated files for extending the services, but I would rather use separate java files if I can.
The grpc.io website doesn't mention this option in the documentation and I can't find it with some research. Is it an experimental feature ?
The original website I used as a guideline:
Beside the outdated pom.xml that doesn't contain a fix for java 8+ annotations (you can use the pom.xml from the README.md that is correct), the rest of the tutorial is nearly accurate if we don't mind using HelloServiceGrpc.HelloServiceImplBase instead of HelloServiceImplBase in our code.
The fact that the tutorial use HelloServiceImplBase without the single class seems to indicate this is a regression bug.


7874
Add the ability to have a separate thread pool/executor for each endpoint7

a grpc server can have requests of varying priorities.
since a grpc server uses a single executor for all incoming requests, a load of low-priority requests can affect the ability to handle higher priority requests.
The naive approach for this problem would be to have a separate executor for each end-point, but that solution will be a bit limited. In order to have full flexibility, it would be better to have a way to assign an executor based on both the end-point, and the metadata of the request. for example, in our use case, the metadata holds the type of the calling server, and we want to be able to have a dedicated executors for high priority callers.
The solution approach I thought about was adding a new method to the ServerBuilder, that accepts a GrpcExecutorFactory, which is a functional interface with a method that receives (String methodName, Metadata headers), and returns an Executor.
Then, if the GrpcExecutorFactory was set, construct the SerializingExecutor in the ServerImpl with the returned executor.


7875
services7

No description provided.


7889
Add Channel Interface8

Is there an interface for a Channel?
Is your feature request related to a problem?
I'm always frustrated when need implement multiples channels in a project, and don't have how create a instance in DI of Channel
Describe the solution you'd like
Create a interface to Channel and add reference in ManagedChannel


7898
Netty 4.1.59 fixing temp file vulnerability (CVE-2021-21290)9

Netty 4.1.59 has been released that fixes a local information disclosure vulnerability in Netty on Unix-like systems due temporary files:
Please update the dependencies to Netty 41.59 and TcNative 2.0.36,
and update the table listing the known to work version combinations.


7901
PooledByteBufAllocator has type mismatch due to updated dependency0

What version of gRPC-Java are you using?
1.35.0
What is your environment?
This points to io.netty.buffer#PooledByteBufAllocator
It looks like this used to be an int, but they've changed it to a boolean. In the short term you can probably backrev your
dependency.


7907
Do GRPC netty works with OpenJSSE0

We are facing a classCastException issue while using grpc java (which use Netty handlers for SSL communication) along with OpenJSSE.
Here is the issue—running the gRPC client and server throws:
Is there any way to use OpenJsse along with Grpc java?
Raised the question in StackOverFlow as well but not received any response to raising here.
If this issue is not related to grpc java please provide us the proper details with which team do we have to sync up.
Bapi


7911
How to ensure the retries are working1

I have some confusion in the implementation of retry methods
I have a grpc service jar and I am trying 3 parallel request to the service as mentioned in the example above with the retry config created and attached (provided 5 max retries). How does the retry mechanism works


7917
Do not allow NameResolverProvider to choose which is default; make it application-explicit1

I find ordering of NameResolverProviders loaded by GRPC is up to the priority and classname. Comments in NameResolverRegistry indicate that GRPC needs to make the ordering stable because it relies on the first one as default.
But, I wonder why does it take use of classname for ordering? The classname of NameResolverProvider from third-party library is out of control of developers and it will cause some problem.
Moreover, comments in ManagedChannelImpl indicate that it expects to use DnsNameResolverProvider as default for compatibility with some googleapis endpoint like "foo". But in fact it use the first NameResolverProvider as default.
If some third-party library offers a NameResolverProvider with a package name greater than "io.grpc", which uses the same priority as DnsNameResolverProvider and also supports the same format like "foo.googleapis.com:8080", this hard-coded compatibility in ManagedChannelImpl will be broken. And it's hard for developers to solve this by doing some config thing.
Here's an example:
We use google-cloud-firestore library to integrate firestore service. The hard-coded endpoint is "firestore.googleapis.com:443", which seems to be the case handled by the compatibility of ManagedChannelImpl.
We also use another opensource library to extend grpc functionalities. This library offers a StaticNameResolverProvider with priortiy=5, same as DnsNameResolverProvider, and the package name is greater than "io.grpc". It also supports URI in format like "firestore.googleapis.com:443".
When grpc wants to find a NameResolverProvider for firestore endpoint, it will find StaticNameResolverProvider instead of DnsNameResolverProvider.
Since grpc is kind of basis library and offers extension functionality for NameResolverProvider, I think it should make both of URI format and ordering of NameResolverProviders more clear. Besides, GRPC should also offer a more specific way to set the default NameResolverProvider.


7921
ClientCall.cancel and ClientCallListener.onClose can be called multiple times causing RejectedExecutionException2

Example stacktrace


7925
Tracking issue for SeverBuilder.addServices() being experimental2

No description provided.


7927
io.grpc.Server#SERVER_CONTEXT_KEY for transcoding2

Quote from comment on that field:
Key for accessing the Server instance inside server RPC Context. It's unclear to us what users would need. If you think you need to use this, please file an issue for us to discuss a public API.
Now I'm reaching out to ask for help:
actually not interested in Server itself at all, but the io.grpc.Server#getImmutableServices. Is there any other way to get it ONLY in knowing "I'm on the Server side"?
Context:
Working on a simplistic http-grpc-spring-web transcoder at https: and needs the list of ServerMethodDefinitions to setup the pipes properly.
Any general suggestions are also appreciated.


7929
Tracking issue for AdminInterface being experimental2

Admin Interface API gRFC: grpc/proposal#218
A convenient API for automatically determine relevant admin services that expose the overall state of gRPC activities in a given binary.
Currently it only includes Channelz and CSDS with limited needs, and they are hardcoded. It can be made to be more powerful as we need it to.


7935
gRPC-LB without fallback addresses can hang3

There's been hangs when using gRPC-LB with round_robin and I think I tracked the source down.
gRPC-LB has a timer in case communicating with gRPC-LB takes "too long," to avoid hanging. If it takes too long it swaps to fallback addresses. But the code that handles empty addresses doesn't cause an error if there are no addresses and usingFallbackBackends == true.
It'd make sense for this bug to lurk, as I believe all previously deployed usages of gRPC-LB have fallback addresses.
Note that pick-first could suffer a similar issue, but it is a separate code path and so will need to be checked/fixed independently.
I think the fix for round_robin will be an easy one-line change.


7940
io.grpc.netty.shaded.io.grpc.netty.NettyServerTransport.connections - Transport failed4

1、Go call grpc of Java
2、Go version: google.golang.org/grpc v1.36.0
3、grpc-java version: net.devh     grpc-server-spring-boot-starter     2.4.0.RELEASE
4、Complete the call and report an error: An existing connection was forcibly closed by the remote host


7942
Needs investigation: channel panic upon shutdown after xds call completes4




7946
Buggy documentation4

Both ServerInterceptors.intercept and  ServerInterceptors.interceptForward have the same description.
One of them should state last, not first


7947
Does enableRetry enable transparent retries and how to disable it?4

When building a channel, if I call disableRetry or  don't call enableRetry, does transparent retries will be disabled?


7948
Bad constant name in InternalCheckGcpEnvironment.java4

This one cost some time tracking down a bug. The constant did not help improve the clarity of the code, It actively obscured it.
This constant is NOT the DMI product name. It is a path to a file that contains the DMI product name, and the difference matters. At the least, the constant should be renamed. Better yet, it should be inlined. We don't need a constant here. The literal string is better than the constant.


7949
Compiling and testing the codegen raspberry 44

I am trying to compile gRPC Java Codegen Plugin for Protobuf Compiler in PI4
I run:
So I change the line 63 in the chech-artifact.sh to assertEq "$format" "elf64-littleaarch64" $LINENO (Is this problem?)
and the build is successful
How can I confirm that the codegen is installed to Maven local repository to use it from an other application?


7952
xds: improve debug logs at xds lb, e.g. WeightedTargetLoadbalancer.5

AAD, I want to improve debug logs at xds lb, e.g. WeightedTargetLoadbalancer.


7953
UnsupportedOperationException after Netty 4.1.60 update5

What version of gRPC-Java are you using?
What is your environment?
macOS, jdk11
What did you expect to see?
Server can process a request which contains content-length header.
What did you see instead?
A change in Netty 4.1.60 introduces usage of the Http2Headers#setLong(..) method, but grpc-java's custom header implementations do not implement this method (e.g. throw UnsupportedOperationException).
Steps to reproduce the bug
upgrade netty dependency to 4.1.60.Final
send a request with content-length header
server should fail to process the request with the exception above.


7956
grpc-netty-shaded doesn't use TCP_USER_TIMEOUT on ARMv85

Hi, I had been running w/ the native transport and noticed it had unexpectedly switched back to NIO at some point.  After some investigation I realized the switch happened when I moved to running on ARM.  Looks like grpc-netty-shaded doesn't include the ARM artifacts.
When I switched to depending on grpc-netty rather than grpc-netty-shaded, that didn't work either at first.  When looking at profiles I found it was still using grpc-netty-shaded classes.   I found the shaded package was being brought into my dependency closure from some other dependencies I have.  I think what's happening is when I use ServerBuilder, it's discovering two NettyServerProviders on the classpath: one from grpc-netty and another from grpc-netty-shaded.   They're both the same priority and the shaded version ends up being chosen (which in turn won't work with ARM).
To summarize IIUC there's two issues: grpc-netty-shaded doesn't included ARM, and there doesn't seem to be a way to avoid using the shaded classes as long as anything brings in the shaded dependency.   I'm going to workaround the latter by directly using NettyServerBuilder rather than ServerBuilder.


7958
abnormal delay,version 1.32.15

My RPC service has an abnormal delay problem. From the monitoring point of view, there is irregular jitter. And the delay presents a bimodal pattern. From the perspective of network packet capture, there are abnormal TCP packets. As shown in the figure, there is an abnormal time interval between the head and data of the same grpc http2, and the same TCP packet contains multiple http2 packets. Please help me solve this problem. Thank you very much.


7973
How to define a client interceptor ? 7

I have a spring-boot app and I'm trying to define a client interceptor for my grpc service, so that I can set some custom headers in the response (which will be transcoded to html)
My interceptor definition looks like this:
No matter what I've tried, the response doesn't want o go through that code.
Just note that I also have a ServerInterceptor define in my code, and that logic works fine.
while my grpc implementation looks like this:
Any idea what could be wrong ?


7974
Support for ppc64le7

Is your feature request related to a problem? yes
When we try to build the project on ppc64le platform, we get errors.
Describe the solution you'd like
We get error saying "platform not supported". "architecture not supported" etc.. I think we need to modify compiler/check-artifact.sh to include support for ppc64le also. Similarly one of the test files testing/src/main/java/io/grpc/internal/testing/TestUtils.java also doing arch specific checks. I think that also needs modification
Describe alternatives you've considered
None
Additional context
While trying to build and test the project IBM's power linux(ppc64le) I got into these issues


7975
how to force trigger refresh dns list?7

version: 1.32.0
Error:
1.When only one centos_1 cpu is hight_load, but not dead > 30min;
2.grpc server at centos_1 has many instance, these grpc server connection is not closed;
3.These grpc server instance all request were over dead_line,  can't service >30min, ;
3.But at this time, nslookup is excluded centos_1 grpc server instance;
by the way
How can I force trigger refresh dns list at client side?
Or What can I do in this exception?


7977
ClientXdsClient throws away exception information7

While ClientXdsClient commonly uses approach like StructOrError to avoid creating exceptions, there are still exceptions that need to be caught. This is most frequently InvalidProtocolBufferException, but can also entail IllegalArgumentException, PatternSyntaxException, and maybe others.
Unfortunately, the fully causal chain and stack trace is being completely thrown away for these exceptions. At the very least they should be logged at FINE or lower level. In cases that produce a Status, the cause would ideally be included as the Status cause. However, XdsLogger's API currently doesn't allow logging exceptions and StructOrError only supports simple strings.
CC @voidzcy, @dapengzhang0, @sergiitk


7984
How to check isCanceled when using grpc stremming?8

I implemented model back-perssure, but I have the following problem: before I write message to the stream, I check isCanceled() and it returns true. I see the document that "isCanceled" is true when the peer closed the stream. So, I check the client and it does not close the stream.
So, I think that the server or the client is set keepAliveTimeout which is a small value. I increased the value of this config, but the isCanceled() is still true.
How should I handle it to avoid making such a mistake?
Thanks all.


7988
Wrong buffer size8

My program is bound to have this bug.I don't know why.
Buffer size should not be 14113.Can someone help me with this?


7990
jcenter is going away9

Used in about nine places:
These should all be replaced with maven()


7996
ClusterResolverLoadBalancer's "UNAVAILABLE: No usable endpoint" not very useful9

In b/183205647 a tester saw the error "UNAVAILABLE: No usable endpoint". That is an extremely unhelpful error, except that it has a unique string that can be looked up in the code. It isn't even obvious it is an xDS error. We should improve the error message, at least to something like "UNAVAILABLE: No EDS resources exist for clusters: c1, c2, c3" (or something more appropriate).


7997
grpclb: Improve error information for "Unable to fallback, no fallback addresses found"9

#7960 fixed a case for grpclb that would cause it to hang if there were no fallback addresses. Now in that case instead of hanging it produces the error "UNAVAILABLE: Unable to fallback, no fallback addresses found", which is much better than hanging. However, it doesn't give any information to actually debug what's happening.
I'm thinking something along the lines of:
If there are fallback addresses, use one of their subchannel's error (ideally we'd round-robin over them or some such, but baby steps)
If we have no primary addresses (RPC to gRPCLB has never been successful), we should include the gRPC-LB contact error information (the information from the failing RPC, or create a message describing the RPC hasn't returned yet)
Otherwise, there are primary addresses and we should use one of their subchannel's error (ideally we'd round-robin over them or some such, but baby steps)


8001
OCSP Stapling support and guidance on use of JDK Provider0

The current security guidance on use of TLS Provider emphasises BoringSSL. Based on testing BoringSSL does not support OCSP Stapling so connections suffer performance issue if certificate revocation checking is a requirement.
Is the Security.md guidance still up to date now that JDK 11 (whether from Oracle or AdoptOpenJDK) support OCSP Stapling and other required protocols (APLN)? Is JDK still considered suboptimal for grpc-java use?


8002
Is there advisable to use okhttp instead netty?0

Hi,
I had recently raised one issue #7907 where it is mentioned the issue along with of usage of OpenJSSE and the same is raised in OpenJSSE community as openjsse/openjsse#22. I am not sure by when we can expect any fix for this, so we are trying one more alternative but need your advice on the same.
I can see okhttp library has by default openjsse support but it is advisable to use only for android clients. If I change netty channel to okhttp for our grpc communication which is not android though, will it have any impact in terms of performance or any other aspect? Will okhttp library will be able to handle high load transactions? So in one line is it advisable to use okhttp in place of netty for grpc communication?
Thanks, Bapi


8003
RPCs should fail with UNAUTHENTICATED if fetching auth token returns HttpResponseException0

This caused issue: googleapis/gax-java#965
Description
The following is what happens.
If refresh token is invalid, then auth lib will throw an HttpResponseException like the following
Note that HttpResponseException is subclass of IOException, but we shouldn't retry on HttpResponseException. So the correct implementation would be:


8004
Okio 2.x incompatibilities0

What version of gRPC-Java are you using?
What is your environment?
Linux and macOS, built with Bazel from sources using the tools provided in this repo, rather than through a Maven dependency. The same repo contains an Android app using OkHttp3 (4.9.1), which depends on Okio 2.8+.
What did you expect to see?
What did you see instead?
buffer.readByte() now throws an exception, which causes a compilation error as it's not caught or thrown by readUnsignedByte(). This points to incompatibilities between Okio 1.x and 2.x, and makes adopting gRPC-Java in any repo using "recent" versions of OkHttp an issue. OkHttp3 has been depending on Okio 2.x since its 4.0.0 release.
Steps to reproduce the bug
Depend on both OkHttp3 4.x and gRPC-Java at the same time.


8009
XdsNameResolver does not handle resource revoked and then recovered correctly0

If LDS resource is revoked, the xds lbs will be shutdown and switch to empty service config and pick_first, but when exactly the same resource is recovered after revocation, shouldUpdateResult is always false, and therefore updateResolutionResult() is never called and new service config is never generated.


8014
grpc.ServerCall.isReady() never becomes fails even if the client doesn't request any value.1

What version of gRPC-Java are you using?
What is your environment?
linux open jdk 1.8
What did you expect to see?
isReady becomes false in case of back pressure.
This would stop the stream from sending new messages on the server side.
What did you see instead?
isReady never becomes false.
Steps to reproduce the bug
I made a simple serverCall handler (which is used in a bigger project where automatic codegen happens)
This handler sends messages until isReady() is false. But after adding some logging i noticed that the call.isReady never becomes false.
At the client side for the testing purpose i only call call.request(1) once and never call it again.
Here is a blocking example of what i've implemented in my code generator runtime.
I know that grpc uses a netty buffer (32kb) so i made sure that i use big messages to try to make it backpressure.
Hence i send messages with 10000 ints and send 20000 of them with a array of value 10000000 to avoid variableint to kick in.


8016
Tracking issue for io.grpc.xds.CsdsService being experimental1

No description provided.


8022
Binderchannel (io.grpc.binder.*) is experimental.2

BinderChannel, as specified in gRFC L73, and implemented in the io.grpc.binder package, is experimental.


8024
Tracking issue for AdvancedTls-related API being experimental2

This includes:


8025
How many clients can supported to a single Server? Something goes wrong in my stress testing.2

Each Client build a ManagedChannel and create a newFutureStub & biStreamStub on this channel.
When my clients count is below about 23K , everything  goes well, cpu is 1, load is 0.5
But when I add more clients , server does not accept more clients, and the load rise to 5 ,cpu rise to 15%.
According to log, I found many abnormal log of ServerTransportFilter.
And the time bettween a connection ready &terminated is very close.
It seems that the load is cost at connection build & close.
Could anyone give some instructions? It bothers me for a long time.
Thank you very much.


8026
RoundRobinLoadBalancerFactory$Picker  index  start from 02

I use grpc in production,  and choice rr lb(RoundRobinLoadBalancerFactory$RoundRobinLoadBalancer),
because server release is a continuous process,when server nodes is releasing,  the Constructor  RoundRobinLoadBalancerFactory$Picker(Picker(List<Subchannel> list, @Nullable Status status)  will be called every time.
due to the index is alaways start from 0 ,  the qps sent to different nodes is unbalanced,  Cause fluctuations in availability when the server nodes is releasing.
Any comments are welcome.


8027
Using gprc with gradle 6.8.x gives deprecation warning for gradle 82

What version of gRPC-Java are you using?
What is your environment?
MacOs, Linux.
What did you expect to see?
No warnings about deprecation.
What did you see instead?
Steps to reproduce the bug
Not much to say, simply run with current gradle.


8033
Service unavailable error after server start() was called3

What version of gRPC-Java are you using?
What is your environment?
MacOS BigSur 11.2.3


8034
An illegal reflective access operation has occurred3

What version of gRPC-Java are you using?
What is your environment?
Windows 10, jdk-1.8
What did you expect to see?
grpc server up and running with no warnings
What did you see instead?
Steps to reproduce the bug
Implement a grpc service
Run the service and when the server accepts the grpc request from client, it responds with above warnings


8037
grpc-auth's unit test fails with google-auth-library 0.25.X3

Background: I'm surveying library compatibility across Google Java libraries.
I haven't figured out whether this is a bug in grpc-auth or google-auth-library.
What version of gRPC-Java are you using?
What is your environment?
Mac
What did you expect to see?
All tests pass
What did you see instead?
It seems the problem started after google-auth-library 0.25.0.


8049
Does not build on FreeBSD4

What version of gRPC-Java are you using?
freshly cloned
What is your environment?
openjdk version "1.8.0_282"
OpenJDK Runtime Environment (build 1.8.0_282-b08)
OpenJDK 64-Bit Server VM (build 25.282-b08, mixed mode)
What did you expect to see?
build the library
What did you see instead?


8050
Is it ok to use the gRPC-level proxying example?5

Hello!
I noticed there is an example for gRPC level proxying* that was never merged and was wondering if it is ok to use as a reference?
Thanks!
David


8053
FutureStub cancelled in server call5

What version of gRPC-Java are you using?
1.34.1
What is your environment?
Windows8 jdk1.8.0_202
I have two server ,and they both have same two grpc method(sayOne,sayTwo) ,
when server1 call the server2's sayOne method with FutureStub,
and in server2's sayOne method,it call server1's sayTwo method with FutureStub,


8057
rpc failure - java.lang.NoSuchMethodError: io.netty.buffer.PooledByteBufAllocator5

What version of gRPC-Java are you using?
What is your environment?
openjdk 11.0.5 2019-10-15 LTS
What did you expect to see?
Successful rpcs.
What did you see instead?


8058
Off-heap memory grows without bound using streaming api5

Hi all,
My grpc-java server off-heap memory grows without bound.
Other information
Server-side streaming RPC for chat service.
Connection over SSL, SSL offload is processed on load balancer.
Load is not so high
I didn't apply flow-control.
Total client count is limited; it doesn't really differs that much between the time span.
Server keepalive configurations
Every 3:00 at night I perform onComplete() against all the StreamObservers on the server; Chat service is not served this moment.
Client randomly gets INTERNAL: RST_STREAM closed stream. HTTP/2 error code: INTERNAL_ERROR from LB, so I guess there'll be some broken connections left on server side.
I know this load balancer issue is unusual; It's under inspection.
Mobile clients abruptly disconnect from server for various reasons and reconnect to server; I guess there'll be some broken connections left on server side here, too.
Possibly weird connection misuse on clients might exist; i.e. unexpected multiple connections with streams
I get io.grpc.netty.shaded.io.netty.util.internal.OutOfDirectMemoryError once memory reaches limit. Memory is configured with below:
Some observations
Couldn't find memory leak with option below
Once the memory is grown it doesn't drop even after the 3:00 onComplete() event; I expect connection related resources will be freed after the connection being idle.
There was one moment memory dropped, with below error; And I guess this triggered the memory release.
As I've tested,
After getting connected and the stream got open from the server-side, calling onComplete() after the keepalive period server sends OUTBOUND GO_AWAY.
However when I open the connection and stream then kill the process abruptly, server never sends OUTBOUND GOAWAY.
Here're my questions:
Is it sane not sending OUTBOUND GO_AWAY after abruptly killing the process? Do the resources get freed after the keepalive period or any other period of time?
What should be the reason memory getting not freed even the service is not in use and StreamObservers all onCompleted()?
If it's all about unfreed broken connection resources, will maxConnectionAge with maxConnectionAgeGrace help this situation? With these options, I see GO_AWAY with normal connections however don't see any log with abruptly disconnected connections.
I expect unreferenced StreamObserver objects and related resources in direct memory to be garbage collected. Should I explicitly call onCompleted() or onError() for resource release?; I've actually calling onError() and onCompleted() on all StreamObservers for termination however asking just in case.
Is there any chance this is caused from client's grpc library?
Figure: Chat service was active between 4/3 12:00 and 16:30 and memory never freed. Chat service resumed at 4/4 16:00. Memory growth trend looks like exponential.
I'm sorry not providing any source code here, if you need a reproducible source I'll get it ready; the original source is on production so I can't provide it this moment.
Thanks in advance!


8070
How to catch the threadpool RejectedException in the grpc server side7

How to catch the threadpool RejectedException in the grpc server side? Reference issue: #636
For example, I have below setting for the grpc server executor: corePoolSize=2, maxPoolSize=4, queueCapacity=2. When the client has more than 6 requests, the server executor theadpool may throw TaskRejectedException, like:
I have tried
but both does't work.
Can someone please suggest where can I catch this kind of exception? Thanks a lot in advance.


8071
suspect memory leak in off-heap7

Hi all,
My grpc-java client off-heap memory grows.
server: grpc-java 1.28.0
My application is processing image data. For example, ocr, resize, and other image model processor. Use grpc corresponding to service.
I catch this case. JVM heap is normal. But native memory leaks with time.
USE JVM NMT setting, I see Internal memory grows higher.
Suspect native memory leak.
In addition, USE linux method, SMAPS all memory. I can find many (2-15M) memory.
Finally, dump suspect memory, find many grpc request and response info(contain image data).
Can you help me? Thanks!


8076
How to transform nullvalues as java pojo fields with protobuffer?7

Is this library supports null as default value, right? but google protobuffer dosen't, you know.


8077
Upgrade grpc netty due to security risks7

Hi!
In grpc 1.37.0 it seems like there is a security issue as below.
file entries are added to the 'DeleteOnExitHook' object but not properly removed when processing POST requests that are 16 kB. This may allow a remote attacker
to exhaust available memory resources, potentially resulting in a denial of service."
Do you have any plan for upgrade grpc-netty (or grpc-netty-shaded) to a new version for netty-codec-http:4.1.53.Final?


8080
[Help wanted] io.grpc.okhttp.OkHttpClientTransportTest fails in Mac and GitHub Actions8

In master, I cannot build :grpc-okhttp module because OkHttpClientTransportTest fails in my Mac (Mac OS 11.2.3) and GitHub Actions (link).
Therefore I think I'll need to setup something for the failing environment to make the test pass.
While I continue to dig further, I appreciate if anyone know the prerequisite for OkHttpClientTransportTest.


8083
How to send big packagge through gRPC.8

Hello, I call API from other service by gRPC, sometimes the return data is very big, suppose to be 200-300K, I found it may cause the service disconnected and my client application will get error when next time call the API. in this case How can I improve.


8086
Generated annotation Java118

What version of gRPC-Java are you using?
What is your environment?
MacBook m1 Jdk 11
What did you expect to see?
Generated annotation from javax.annotation.processing.Generated
What did you see instead?
that's my build file


8088
Migrate to explicitly refresh name resolution by load balancer8

Currently each subchannel implicitly refreshes the name resolution when its connection is broken. That is, this feature is built into subchannel's internal implementation. Although it eliminates the burden of having LoadBalancer implementations refresh the name resolution when connections to backends are broken, this is gives LoadBalancer no chance to disable or override this refresh.
We'd want to let LoadBalancer manage refreshes explicitly. The API has already been there for a long time: LoadBalancer.Helper.refreshNameResolution(). During the transition, SubchannelImpl will check if Helper.refreshNameResolution() is called when its connection is broken. If not, it will still refresh the resolution and log a warning. This will be removed in the future and LoadBalancers are completely responsible for triggering the refresh.
As a side effect of this check, LoadBalancers that intentionally do not want the refresh (e.g., xDS) will cause the warning. So we are adding a temporary LoadBalancer.Helper API, ignoreRefreshNameResolutionCheck() to help the transition. It's been marked as deprecated, xDS should be the only LoadBalancer implementation that uses it.


8092
ServerWrapperForXdsTest.delegateStartError_shutdown is flaky9

ServerWrapperForXdsTest.delegateStartError_shutdown
value of: getCurrentServingState()
As confirmed by @sanjaypujare
It's quite possible a flake - there is
Either I should increase the sleep time or find another way to make it less flaky and deterministic


8094
Runtime exception when execute ManagedChannelBuilder.forAddress()9

I have some problems when i create grpc ManagedChannel.
when i run jar file, I keep getting the following error..


8097
More accurate Status description when at MAX_CONCURRENT_STREAMS limit and GOAWAY has been received 9

As described in #8020 (comment)


8118
:grpc-xds:test is flaky on ARM64 Linux1

A bunch of test cases is highly flaky (almost always fails) when run on arm64 linux (both under real machine or emulator)
run buildscripts/run_arm64_tests_in_docker.sh to reproduce under an emulator.


8120
Inconsistent server-side error in ServerStreamTracer vs ServerInterceptor2

What version of gRPC-Java are you using?
What is your environment?
Linux, OpenJDK 1.8
What did you expect to see?
In a bidirectional streaming service, I'm observing different a status passed to ServerCall.close(Status, Metadata) versus the status passed to ServerStreamTracer.streamClosed(Status) when a misbehaving client is abruptly terminating the connection (without sending any sort of cancel or reset).
What did you see instead?
The server has a logging interceptor which intercepts the ServerCall.close(Status, Metadata) method and logs the status. The status seen here is Status{code=CANCELLED, description=Cancelling request because of error from client., cause=null}. We also have a ServerStreamTracer installed on the server, but the Status passed to ServerStreamTracer.streamClosed(Status) is Status{code=UNAVAILABLE, description=connection terminated for unknown reason, cause=null}.
Steps to reproduce the bug
I have a minimal reproducer with some instructions here.
If the client is terminating the connection then I suppose there really is no true status (either from the server or from the client). So I could be convinced that either of these Status codes would be valid. What really threw off our metrics and sent a couple of engineers down a debugging rabbit hole is that we couldn't correlate any request logs on the server (being logged from the ServerInterceptor) with the status metrics being emitted from the ServerStreamTracer. So I think regardless of what Status is ultimately reported for a abruptly closed connection, it should at least be consistent between these two sources.
This may also be related to #7558 .


8122
Request received RST when nginx reload2

What version of gRPC-Java are you using?
1.35.0
What is your environment?
What did you expect to see?
When continuously requests a grpc server (tensorflow serving) behind nginx with for loop, the nginx is reloading. nginx fork new sub process to handle new request, the prior sub process exit util the current request finish, then client stub will create a new channel/connection to process remain requests.
For example, When python client sends a request to the grpc server, nginx will produce a FIN/PSH/ACK flag packet before sub process exited. Then the client will send FIN/ACK to nginx and close the request. Finally, python grpc client will reconnect to nginx to handle the remaining requests.
What did you see instead?
When nginx reloaded, the prior sub process log 200 OK to nginx access_log, while the grpc-java client threw an exception below:
nginx sent RST flag packet to java client and has no FIN flag packet when use wireshark captured the tcp packet.
Steps to reproduce the bug
use for loop to request a grpc server continuously (like tensorflow serving) behind nginx
reloading nginx at the same time


8124
about grpc client call server overtime question2

first use grpc
how set the grpc client call server overtime


8125
ServerCall attributes for security accounting2

For implementing server-side access control, we retrieve the Authentication information using a ServerInterceptor.
In addition to the client credentials (retrieved from the headers Metadata), we need the client's address.
The 'remote-addr' Attribute is provided using the ServerCall's getAttributes.
However, this API is marked experimental, and the presence of the 'remote-addr' attribute is nowhere guaranteed.
Is there a reliable way to determine the client's remote address, as it is an important information for security control and accounting ?


8135
Aarch64 tests are flaky due to being slow3

StressTestClientTest timeout:
There was also one tool failure, but I'm guessing that was a kokoro issue so let's ignore it for now:
There have been 6 runs, so that puts failure rate at 2 out of 5 so far. We've had plenty of "tests execute excruciatingly slow" issues in the past that took a long time to resolve. I'm concerned this may just be the tip of the iceburg.


8136
Retry in bidirectional streaming3

I am utilize gRPC Java to wrap a leagcy system. There is one use case is the payload size for request / response could be 1~2 gigabyte. One proposal is chunk request / response into small binary blocks and transport them by bidirectional streaming.  We would like the client could retry certain message if any expeption happens on server side.
I found some questions are similar to the problem we have.
The "How to get the failed message to retry," is the exact question I have. which method should I
Way to implement a fail-over client (especially for bidistream call) #5822
In this question
"In gRPC the entire RPC/stream is what would tend to be retried/failed-over, not individual messages. If some of the messages of a stream may fail while others are fine, then 1) it may be an inappropriate use of streaming or 2) you need to handle this at the application-level and need support from the streaming RPC schema. There is no generic metadata mechanism per-message in a stream." commented by ejona86, it looks like reasonable, but our request / response payload size is exceed maximum gRPC payload limitation (2^32, right?).
How could I make gRPC rety works on message level? or trigger gRPC build in retry (request level) when client StreamObserver.onError?


8142
Unexpected GOAWAY4

I am experiencing some strange behaviour when reading >100 streams sequentially and issuing cancel when done with a single stream.
If I do this on <100 streams things are fine, if I do it on >100 I get:
Something tells me that it has to do with MAX_CONCURRENT_STREAMS or some sort of race condition, because if I enable DEBUG log level then I suddenly hit that error when reading ~185 streams.
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
No failure
What did you see instead?


8143
Load balancing with ManagedChannel and name resolver4

We have been using the LinkerD proxy in a kubernetes cluster to do gRPC load balancing over a cluster IP replica set of pods.  And am seeing that we already have the ManagedChannel class has the functionality to load balance provided the same cluster IP host name.  Are there APIs usable on the ManagedChannel class to indicate more advanced tweaking around using round robin or weight based load balancing not only for the connection management but for request level load balancing as well?  I was trying to explore if possible to do away with using LinkerD and use the Managed Channel by itself. Thanks for feedback.


8158
Add class-retention @GrpcGenerated annotation to generated types5

Is your feature request related to a problem?
Static analyzers (e.g. lint checks and proguard) would like to reliably detect that code has been generated by gRPC in order exclude it from some types of validation. Currently, gRPC-generated types are annotated with the @Generated annotation, but this only has SOURCE retention and is unavailable to these analyzers.
Describe the solution you'd like
Additionally add an @GrpcGenerated annotation with CLASS retention to generated types.
Describe alternatives you've considered
Currently we inspect generated code for anticipated naming schemes and structure (e.g. endsWith("Grpc") & contains X fields) in order to determine if it is grpc-generated. Obviously this is fragile and relies on implementation details that it shouldn't.
Additional context
There is prior art for this kind of annotation in Dagger and AutoFactory (coming soon).


8164
INTERNAL: error in frame handler in Android6

Configuration:


8174
grpc-default-executor threads stop processing tasks: how can we troubleshoot in such situation?7

Do you know a good way to troubleshoot "grpc-default-executor" threads' status?
In apache/beam#14768 (comment), when I tried to upgrade Beam's vendored (shaded) gRPC dependency to 1.37.0 (or 1.36) from gRPC 1.26.0, I observed that some tests (GrpcLoggingServiceTest or BeamFnLoggingServiceTest randomly) do not finish. Borrowing Kenn's words, BeamFnLoggingServiceTest does the followings:
start a logging service
set up some stub clients, each with onError wired up to release a countdown latch
send error responses to all three of them (actually it sends the error in the same task it creates the stub)
each task waits on the latch
(GrpcLoggingServiceTest has similar structure)
Unfortunately it occurs only in Beam's CI Jenkins environment (which takes ~1 hour to finish). I cannot reproduce the problem locally.
From the observation of the trace log and the previous thread dump, it seems that grpc-default-executor threads stop processing tasks (the thread dump showed no "grpc-default-executor" threads in the JVM when the test was waiting for the them to count down a CountDownLatch) and one of the latches are not counted down. This results in the test threads waiting forever for the remaining latch. I cannot tell why the "grpc-default-executor" threads stop working (disappear?).
Do you know how to troubleshot such situation?


8177
How to restart bi-directional stream after network disconnection android7

I'm using AndroidChannelBuilder to build ManagedChannel and subscribe on android network changes. My rpc function works well after network reconnection, but on my bi-directional stream it dies forever both when I'm using CoroutineStub and StreamObserver. How can I restart bi-directional stream after network reconnection?


8182
SdsX509TrustManager throws when encountering unknown SAN type8

This puts far too strict of restrictions on the SAN, as it prevents using any other types. Instead, unknown types should be ignored.
The method signature of verifyOneSanInList() already returns boolean, so it seems this will be easy.


8186
Questions about error handling when Server crash8

I have gRPC bi-directional stream service using client side customized name resolver and load balancer. There is 10% possibilities the servers from cluster will crash after server get the request. I have to make the client retry the call iteratively
to the next server until I get the successful response.
The gRPC build in retry and my customized retry all work when server return corresponding status code like "UNAVAILABLE", however, the retry is not working for client time out with "DEADLINE_EXCEEDED" error.
Because I have to return a CompletableFuture, I could not resolve it by adding call into a loop (suggested from here: #8177 (comment))
I found retry could work if I put some code into onError, it looks naive.
How could I retry the call gracefully?


8187
Client Interceptor close not be triggered if call is successful8

I create a client interceptor try to do some clean up task in onClose(Status status, Metadata trailers) method once the bi-directional call complete.
What I observed is, onClose(Status status, Metadata trailers) will be trigged when call failed (server return an error), but it will not be triggered if call is successful. It looks like ClientStreamListener.close not be invoked.
Is there any way I could have opportunity to know bi-directional call complete regardless successful or failed.
Here is my Interceptor:


8188
android: Disabled background data causes errors8

Hello, we have an app, that implements a widget that gets data using a GRPC stream on an update. However we have many instances where the widget fails to update where we are receiving:
I am assuming, when the app goes the background (due to the user's OS setting restricting background data) that the main grpc channel gets broken and needs time to restart, so when the widget wakes up to update, the call fails.
What is the best way to address this issue where we need block till the channel is ready to ensure the stream is successful?


8190
grpc hang due to the ELG thread placement of NameResolver refresh method9

What version of gRPC are you using?
What operating system (Linux, Windows, …) and version?
Both Linux and Windows
What did you do?
Implement a customized NameResolver which extends NameResolver, let's call it "CustomizedNameResolver".  In the override refresh() method, it makes a grpc call to service discovery agent to retrieve a list of service instances and then resolve them.
What did you expect to see?
Expect the customized namer resolver works whenever being called and not hang in the existing grpc call.
What did you see instead?
grpc calls hang in the customized name resolver, particularly on the grpc calling inside overridden refresh() method.
We did a thread dump analysis, the problem is the grpc call inside overridden refresh() method is placed in gRPC ELG thread instead of worker thread, which in turns blocks all gRPC traffic causing grpc call hang indefinitely.
According to comment on refresh() method, the document does not clearly states that you must delegate a grpc call to a worker/background thread to not block other grpc calls.
First, is the placement of grpc call inside overridden refresh() method on the grpc ELG thread an expected behavior? Why cannot we delegate it to worker thread by default?
Second, some guides and explanations could be added to the document on NameResolver to further clarify.
Attach a thread dump on ELG for your reference. Thank you.


8191
Support for `s390x` (`s390_64`) machine architecture9

Is your feature request related to a problem?
The protobuf compiler protoc supports a few non-x86 machine architectures such as aarch64, ppcle, and s390x which are not supported by the gRPC plugin protoc-gen-grpc-java:
Describe the solution you'd like
It would be great if gRPC-Java supported the same machine architectures as Protocol Buffers out of the box.
With aarch64 there's already a non-x86 architecture supported by gRPC-Java and maybe support for the other machine architectures could be implemented in the same way.


8192
binder: BinderTransport doesn't communicate deadlines to the server.9

We should implement this in BinderTransport, likely by including the deadline in the call's prefix data.
Context


8195
Support for SocketAddress with ChannelCredentials in NettyChannelBuilder9

Is your feature request related to a problem?
ChannelCredentials is nice. I'm creating channels via SocketAddress and would like to be able to use it.
Describe the solution you'd like
Support for SocketAddress with ChannelCredentials in NettyChannelBuilder. Have made pull request #8194
Describe alternatives you've considered
Not opening pull request #8194


8196
How to call server by InputStream of MethodDescriptor in Grpc?9

I want to call grpc server by InputStream of MethodDescriptor in client, but, I'm not success. This is my code:
the version of grpc-all dependency is:
In Server , My EchoServiceImpl extends EchoServiceGrpc.EchoServiceImplBase, override echo rpc method . I export inputstream service before build server.
In client, I create InputStream MethodDescriptor, and the RequestMarshaller is the inputstram ,but I'm not success util now. who can supply some advice ? thanks


8197
How to enabled Netty ChannelHandlers that provide JDK Flight Recorder events9

In netty/netty#9777, I've been working on JDR Flight Recorder (JFR) events for Netty, mainly be creating a new channel handler.
What would be a good way to easily enable this for users of gRPC?


8199
Can't get hello-world-client to connect9

I just cloned the project according to the docs in the official quick start guide. I can start the hello-world-server just fine
Listening for transport dt_socket at address: 5005
I then open a second terminal window on my mac and execute the command to start the client. As you can see I get an Address already in use message. Any idea what I'm doing wrong? I have tried turning off my firewall also, just in case. Same results.


8203
GRPC Interceptor0

Is there an example of a GRPC Interceptor to uniformly handle things like exceptions and so on


8204
Improve BinderTransport's handling of compression.0

BinderTransport currently ignores the compression setting.
Context: #8031 (comment)


8207
tsan, xds: AAD, I want to remove dead code in xds certificate provider0

TSAN failure:


8208
UNAVAILABLE: GOAWAY closed buffered stream. HTTP/2 error code: NO_ERROR0

What version of gRPC-Java are you using?
What is your environment?
Amazon ECS. With amazoncorretto:11 (jdk) as build and run image.
What did you expect to see?
Normal inter-service communication with no errors on client and server.
What did you see instead?
Errors with message UNAVAILABLE: GOAWAY closed buffered stream. HTTP/2 error code: NO_ERROR after every fixed interval in gRPC client.
Steps to reproduce the bug
Additional info:
Don't see these errors when the stub method is not doing much processing and just returning some dummy data.
The error rate is increased in following scenarios:
When we increase the rpm or concurrent calls to server
When the rpc method starts taking more time to process


8213
Xds interop client hiccups with invalid EDS + "XdsUpdateClientConfigureService.Configure"1

What version of gRPC-Java are you using?
What is your environment?
PSM K8s framework
What did you expect to see?
The xDS client constantly sends RPC with or without XdsUpdateClientConfigureService.Configure.
What did you see instead?
After received XdsUpdateClientConfigureService.Configure, the client seems stopped sending any traffic, and there isn't any error log.
This behavior only occur when TD sends several empty EDS update and EDS update without IP before sending valid EDS. If the TD resources exist for longer period of time, there won't be any problem.
Steps to reproduce the bug
Create new set of TD resources;
Wait for the xDS config to populate, and a client channel become READY;
According to client logs, the RPCs status are OK;
Invoke LoadBalancerStatsService.GetClientStats to get an RPC distribution;
All RPCs in the LoadBalancerStatsResponse appears to be failed.


8217
grpc-java 1.33.0 Futures.addCallback(responseFuture, ResponseCallback) delayed for 60seconds1

This issue is in production environment.
grpc-java futureStub client sends request  grpc-cpp server. (futureStub is set withDeadlineAfter())
Futures.addCallback is used to wait for ResponseCallback. (sample code part)
Intermittently (not always, not easy to reproduce), ResponseCallback call is delayed ~60seconds.
client host is not in high load, threads are all alive.
is there any possible racing issue, or any magic wait for that 60 seconds, or my usage error?


8220
Can gRPC ensure client receive at most one response for each request in simple RPC ?2

As I mentioned above. If I disable auto retry in client, can gRPC ensure client receive at most one response for each request in simple RPC ?


8222
java.lang.IllegalStateException · May only be called before start while using enable Retry2

What version of gRPC-Java are you using?
io.grpc:grpc-android:1.37.0'
What is your environment?
What did you expect to see?
I expect the the stream call to be retried if the call to start the stream fails.
What did you see instead?
A small percentage of our users are cashing with the following stack trace:
Our service calls are stream calls that are built like this:


8223
Endless empty message were sent by Netty server and caused OOM.  2

version: 1.11.0
Dose it a bug or wrong usage ?
What happened ?


8226
Bandwidth-Delay Product algorithm for OkHttp?2

Hello,
I have seen that Netty has a BDP feature - any plans to implement the same for OkHttp?
Apologies if this is not the best place to ask.
Many thanks in advance for your support!


8232
Grpc delay in sending response after onNext is called3

I used APM to trace my grpc request. In each of trace the requests I could see the time taken by actual computation and the overhead of the grpc was the same. Concretely, my application is taking 1-1.5ms for computation, while the grpc's overhead  seems to be 2-3 ms
I am trying to figure out the reason for the same. I enabled the debug logs and found this error
I don't think I am doing anything in the code so that such an error may appear. I do some computation and then call the onNext method. How can I debug the reason further?
2.For the server I am adding the following to my server -
Is there a documentation around how each might affect the times before and after rpc call execution.
If I am doing some heavy computational work before onNext, is there any different strategy that I can use. Currently, just doing the work and then calling onNext with response.


8246
why the protoc-gen-grpc-java  pre-compiled binaries all in the format of exe?4

i need a protoc-gen-grpc-java pre-compiled binaries for mac os,i see osx but it is in the format of exe?


8249
Failed to start bean 'shadedNettyGrpcServerLifecycle' while spring boot application startup in a kubernetes pod with openjdk 8 alpine base image4

Following exception is coming during the startup of spring boot application:


8252
Dealing with MAX_CONCURRENT_STREAMS limitations5

Hi!
A few days ago, we ran into some issues when implementing a system that needs to open a few hundred long lived (~15 mins) bidirectional streaming RPCs. We noticed that most of these RPCs seemed to be intermittently frozen for long durations without any indication of why.
After some digging it turned out that we were hitting the MAX_CONCURRENT_STREAMS = 100 limit advertised by the server.
It seems like the behavior of grpc-java and netty in this case is to silently queue/buffer the RPCs until new HTTP2 streams are available.
I think this is happening in netty here.
From what I can tell, there doesn't currently seem to be any way of either accessing the limit sent by the server or surfacing the fact that we are hitting this limit on the channel.
Any ideas or options of how we could surface this information?
To work around the limit, I also think our only option right now is to create multiple channels. Since we probably don't want to open one channel per stream, I think we might need to do something similar to this ChannelPool.java (which unfortunately is package-private).
Is there anything in grpc-java that might help us here or is this approach our best bet right now?


8256
Requests with too many nested levels fail5

I'm running in to
Caused by: com.google.protobuf.InvalidProtocolBufferException: Protocol message had too many levels of nesting.  May be malicious.  Use CodedInputStream.setRecursionLimit() to increase the depth limit.
when parsing a request message that happens to have a very deep, nested structure. The marshaller ProtoLiteUtils.java seems to use the default of 100.
100 is of course a lot in most cases, but not when e.g. sending over serialized expressions of 30-ish deep function calls, which doesn't seem too unlikely (I ran in to it implementing the expression language CEL for example).
Is it possible to raise this limit a bit, or make it configurable?


8260
BDP PINGs are sent much more frequently than necessary6

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Client does not flood server with PING frames when autoTuneFlowControl is enabled (default)
What did you see instead?
Steps to reproduce the bug
Client makes request-response calls continuously such that there is constant number of outstanding requests.
Server is 3rd party GRPC implementation based on Netty.
It only acks received PING frames, and does not send own PING frames(ack=false).
Acked frames content is 1234.
Client and server are on the same host.
There is workaround NettyChannelBuilder.flowControlWindow(int) which happens to disable autoTuneFlowControl.


8264
Unsupported class file major version 59 for android6

I tried upgrading the version of io.grpc:grpc-all  from 1.34 to 1.35 or higher, I consistently get an error message :  Unsupported class file major version 59. With io.grpc:grpc-all:1.34.1 my android application run fine. From io.grpc:grpc-all:1.34.1, it isn't.
Who can help me please ?


8269
Allow infinite transparent retries for buffered RPCs6

Transparent retries are limited to only once per RPC. However, if the RPC was never made it to the wire we should consider allowing an unlimited number of transparent retries as a solution for our eager assignment of RPCs to transports and the impact of MAX_CONCURRENT_STREAMS.
This is actually a cross-language concern and shouldn't be done before it is agreed cross-language, but it seems highly likely and this can serve as a place for people to watch that are interested in the progress.


8272
The principle of GPRC explained7




8274
Tracking issue for ServerCallExecutorSupplier API being experimental7

Allows for defining an executor per-service or per-method. Discussed in #7874.
This does not replace ServerBuilder.execute(), which is a the default executor to run tasks before the point when executorSupplier can be called, or as a fallback executor when executorSupplier returns nothing.
If ServerBuilder.executorSupplier() is provided, ServerBuilder.directExecutor() is automatically disabled.


8288
WithWaitForReady: Set retry timeout?8

Hello,
I am using withWaitForReady to ensure calls will be done only once the channel is ready. What I noticed is, when starting my client some time before starting the server (for example around 30 seconds), it takes a while for the client to connect (e.g. around 10 seconds, sometimes a bit less/more) - and this seems to be exponential to the waiting time on the client side.
What I found in the gRPC documentation is this: http
But I am not sure how to tell gRPC that I want the retry timeout to be more constant/shorter - can you help? Thanks!


8300
Validation prevents integer value in service config0

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Parsing a service config like in this example, and passing it to defaultServiceConfig() on a NettyChannelBuilder (method is implemented on AbstractManagedChannelImplBuilder) should work.
What did you see instead?
Parsing a service config like in this example, and passing it to defaultServiceConfig() on a NettyChannelBuilder results in an IllegalArgumentException, saying the Integer type is not supported, from this validation code. If I pass a double, e.g. I put "5.0" instead of "5" in the json file, then it works as expected; however, the retry proposal specifies that maxAttempts must be an integer.
Steps to reproduce the bug
Pass a Map for a service config that contains an Integer value for maxAttempts to NettyChannelBuilder's defaultServiceConfig() method.


8307
java.lang.IllegalArgumentException: Failed to load any of the given libraries:

I'm trying to run google translate API which depends on netty-shaded, but getting this exception:
I have seen some of the articles related to this couldn't find the proper asnwer. netty-shaded is available in class path
I'm using Java 8


8309
Ensuring resource cleanup before class loader is closed0

Hello, I use grpc-java (version 1.32.1) inside a Flink application. AFAIK, Flink dynamically loads user jars with different class loaders and attempts to release them once the job finishes. My job only uses clients with a ManagedChannel built like this:
which is closed at the end:
Leaving resources running can cause problems with metaspace memory in Flink's JVM if the cluster is used multiple times, so I'd like to know if I should perform additional steps to ensure all netty resources are stopped.


8310
UNAVAILABLE: HTTP/2 error code: NO_ERROR Received Goaway1

What version of gRPC-Java are you using?
What is your environment?
java version "1.8.0_91"
Java(TM) SE Runtime Environment (build 1.8.0_91-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
The java grpc client connects to the go grpc service (service grpc version 1.27.1). The above exception occurs. The service uses container deployment and nginx for load balancing. There is a high probability of this abnormal situation.
Of course, we are also working hard to find a solution, but there is no progress. Hope to get your guidance and help.
I will be very grateful.


8311
BufferedReader in CertificateUtils.java (~line 68) not in try-with-resources block to ensure controlled release1

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
This was detected by a third-party scanning tool and flagged as a CWE-404 - Improper Resource Shutdown or Release
What did you see instead?
Proper release of the BufferReader
Steps to reproduce the bug


8313
maxInboundMessageSize is not applied when app code has newer gRPC version than used in library1

What version of gRPC-Java are you using?
Library compiled with gRPC 1.26.0 (cannot be recompiled on demand)
What is your environment?
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Run compiled Client with gRPC 1.39.0 in the classpath.
The program will print 4194304 but value 100 expected.
It seems this behavior was caused by fixing issue #7552


8320
Server streaming flow controlling2

Hi,
Questions in brief:
Can I apply manual flow control in server streaming scenario?
Can setOnReadyHandler() be used in server streaming scenario?
I'm trying to implement server streaming flow control refering to manual flow control example. And upon description of ServerCallStreamObserver.disableAutoRequest() it is said:
Swaps to manual flow control where no message will be delivered to StreamObserver.onNext(Object) unless it is request() ed.
However as I understand, disableAutoRequest() shouldn't be used for server streaming as mentioned in doc:
... this method will have no effect. This is true for: ... MethodDescriptor.MethodType.SERVER_STREAMING operations.
so that upon my understanding neither disableAutoRequest() nor request() shouldn't be used in server streaming scenario. And if my understanding is correct, this means I can't use manual flow control in server streaming scenario.
So I read couple of github issues more and found that there was a guide:
If you avoid calling disableAutoInboundFlowControl(), then you won't need to call request() either. The main piece is setOnReadyHandler() and isReady().
So I was thinking to implement setOnReadyHandler(), however ServerCallStreamObserver.setOnReadyHandler() has a description:
On server-side it may only be called during the initial call to the application, before the service returns its StreamObserver.
which I understand this method should be used in bidi-streaming or client streaming scenario only; as server streaming doesn't returns its StreamObserver.
Do I have correct understanding? If not can you provide a short snippet for server streaming flow control?
So far, I've just applied isReady() like below:
Thanks!


8321
gRPC Java Server Same StreamId for two different TCP Connections2

Testing Use Case Java
I have attached the pcap file screen shot No.201 data packet from client1 and No.209 from client2 are using the same streamId=3 on the gRPC java server
Is there any option in nettyBuilder to have different streamId for connection from different clients?
I am thinking due to this some of the client(example: client1)stale TCP connection is not getting closed as client2 is active on streamID=3. Please suggest.


8322
Common interface for generated async stub and ServiceImplBase2

Is your feature request related to a problem?
My server has multiple gRPC services running on the same VM. I would like to reuse the same client logic I have build on top of the stubs (higher level methods, error handling, retries, ...) for using in inter-service calls in the server side (within the same VM).
Describe the solution you'd like
If the generated gRPC classes for the async stub (client-side) and ServiceImplBase (server-side) would implement the same interface, it would be easier/cleaner for me to create a ServiceLoader for my client code, returning the appropiate implementation depending on the case (client-side based on async stub, server-side based on ServiceImplBase).
I would be happy to contribute to this.
Describe alternatives you've considered
Using server-side the regular stubs pointing to localhost, but I don't like the unnecessary marshalling and transport involved in it.


8324
Support reactive-grpc2

Is your feature request related to a problem?
Reactive gRPC builds on top of gRPC's back-pressure support, to deliver end-to-end back-pressure-based flow control in line with Reactive Streams back-pressure model.
Describe the solution you'd like
Describe alternatives you've considered
Additional context


8329
AbstractClientStream - Received data on closed stream2

What version of gRPC-Java are you using?
What is your environment?
Linux alpine image on a pod.
JDK 11
What did you expect to see?
no log messages
What did you see instead?
many log messages with message : AbstractClientStream - Received data on closed stream
Steps to reproduce the bug
I don't know how exactly to reproduce but with me, it is a persistent behavior when I pull async huge amount of messages 2-3 Million with 2-3Kb size from pubSub subscribtion.


8330
ERROR i.g.n.s.i.n.u.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected.3

What version of gRPC-Java are you using?
What is your environment?
Linux alpine image on a pod.
JDK 11
What did you expect to see?
no errors
What did you see instead?
error message
Steps to reproduce the bug
I don't know how exactly to reproduce but with me, it is a persistent behavior when I pull async huge amount of messages 2-3 Million with 2-3Kb size from pubSub subscription.


8332
dependencies conflicts3

The dependencies of protobuf-java and error_prone_annotations are conflicted as below:


8334
RPC seems to hang indefinitely3

Hey! I'm hoping you might have some insights into what could be going on here, or any tips for debugging it better. We have a grpc client on version 1.36.2 and it seems like after some amount of time, threads that issued RPCs hang indefinitely. The calls are being issued with a blocking stub, and in this particular instance they are being wrapped in kotlin coroutines. Here's two traces:
Somewhat ironically, they both have the same elapsed time which seems to mean something happened to cause the whole client to stop processing RPCs. The above are colocated in the logs with GOAWAYs like such
Some added background notes as well:
A deadline of 60s is on all of these RPCs which doesn't help in this particular instance.
Datadog APM is attached so they are dynamically injecting some interceptors.
We have a jwt client interceptor which will make a blocking RPC call for authentication. I've always thought this wasn't the best thing to do, but I've tried to inject faults with it and can't reproduce this blocking behavior.
Any thoughts or debugging help would be much appreciated!


8335
context time out3

I'm creating a blocking stub :
and then I start calling method in a loop:
but i got DEADLINE_EXCEEDED: context timed out When the timeout period has not expired


8337
Use exact maven versions3

What version of gRPC-Java are you using?
What is your environment?
Maven
What did you expect to see?
Developers and DevOps people that build CI/CD pipelines expect builds to be reproducible and deterministic. If we build a project today or next year (assuming the same exact commit id), we expect the same binary to be built. That is not the case with the grpc maven artifacts.
For example, snapshots are discouraged from being used in production builds because they can be overwritten with newer code or completely deleted; either changing application behavior or breaking the build.
What did you see instead?
When building the project using maven it will reach out across the network to check for a newer version of grpc to build with. This opens the project to builds that are not deterministic.
Steps to reproduce the bug
I have a maven project that uses grpc-okhttp, and I execute mvn clean install. Observe the output contains


8338
message of client can't send to server3

What version of gRPC-Java are you using?
What is your environment?
android TV
What did you expect to see?
What did you see instead?
Steps to reproduce the bug


8348
Does grpc support adding more compression algorithms4

In this issue #1704 discusses the issue of data compression. It seems that grpc does not intend to continue to do more work on data compression, but Compressor is used in MessageFramer.writeCompressed(), does grpc java encourage or allow the addition of more compression algorithms, such as brotli and zstd to improve compression performance, or continue to maintain the current compression algorithm without intending to do more work? thanks


8349
awaitTermination() should throw an exception when start() is not be called4

What version of gRPC-Java are you using?
What is your environment?
Windows10 X64 OracleJDK8
What did you expect to see?
What did you see instead?
Steps to reproduce the bug


8353
Failed to resolve com_google_protobuf_javalite5

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
A successful resolution of com_google_protobuf_javalite
What did you see instead?
Steps to reproduce the bug
When resolving the internal deps, the above issue occurs.


8357
Pin Netty versions for maven_install?5

For the normal Maven Central releases we have netty-codec-http2 version-pinned:
This feels like an oversight on my part, but it also might be appropriate given the difficulty in overriding the dependency. maven_install doesn't have a built-in way to exclude transitive deps from particular dependencies; it only has a way to exclude an (unversioned) dep from all dependencies. I think that means the main solution for a user needing to override the version pin would be to remove it from the artifacts list:
That's not impossible for users, but is ugly. A macro would help though. It is nice that remove() fails the build if the entry is not present in the list and that the entry must include the version number.
That said, version pinning does nothing for Gradle users and we haven't seen many users reporting issues. That is probably strongly influenced by the heavy use of grpc-netty-shaded, but Bazel users don't see any shading and so would need to resolve any version conflict.


8364
xds: reuse load balancer instances across priorities6

Hi!
We are currently experimenting with overriding round_robin with a custom leaf/child load balancer when using xDS (since neither grpc nor the control plane supports custom LB policies yet).
Our custom load balancer keeps track of additional state about each subchannel and tends to work better with more captured state.
While overriding round_robin seems to work, I've noticed an issue where our load balancer instances get periodically recreated (and thus loosing important state).
I've read through the code and my understanding is that the current implementation works something like this:
PriorityLoadBalancer creates a WeightedTargetLoadBalancer for every priority in the EDS response and partitions the groups of endpoints to each WeightedTargetLoadBalancer accordingly.
The WeightedTargetLoadBalancer looks at the target locality of each endpoint group and creates a child LB (like round_robin) for every such target if it doesn't already exist in this WeightedTargetLoadBalancer instance.
After that, the WeightedTargetLoadBalancer will remove all child LBs that target endpoint groups that are no longer present to it.
When the child LBs are removed in this case, all subchannels and underlying TCP connections get torn down and removed as well.
Since the control plane we use will move endpoint groups (targets) up and down in priority level during normal operation, this means that we also loose all load balancer state for those groups when this happens.
I've noticed a TODO comment here which would address the immediate issue by caching child LBs instead of removing them.
While I think this type of caching would help us a lot, I think there is an edge case where you'll have multiple load balancer instances targeting the same thing but from different WeightedTargetLoadBalancer instances.
This means that if fallback to a higher priority ever occurs, the load balancer wont have the state captured by load balancers in lower/higher priorities. Also, it could lead to redundant TCP connections since load balancers in lower/higher priorities already might have active and ready connections to the endpoints in some group.
So I think a more optimal solution is to only create and cache one Load balancer instance for every target and then reuse them across multiple priority levels. This would reduce overhead and help us persist important load balancer state both when priorities change but also if we ever need to fallback to another priority.
As to how exactly that would look I'm not entirely sure and it still might make sense to implement caching in WeightedTargetLoadBalancer as a first step regardless.
For this I might be able to help as well since this is fairly high priority for us.
We could probably implement some shared cache in our custom load balancer provider but it seems like it would make more sense to instead help with implementing some caching logic here.


8373
xds: NPE on server-side when bootstrap lacking server_listener_resource_name_template7

I used an old bootstrap generator, so it didn't have xds_v3 as well and there was no log message.
CC @YifeiZhuang


8380
The problem caused by "For a server that crashed and then recovered, the result of gRPC sending a request is always DEADLINE_EXCEEDED"8

Environment
Our team is using gRPC to send requests from the client to the server.
I am testing whether the gRPC connection from the client to the server is still available after the server crashes and then recovers.
We did this test because we once found that after the server crashed for a while, even if it recovered, the request sent by the client via gRPC still kept returning DEADLINE_EXCEEDED.
In our client, unless the ManagedChannel is interrupted or closed, we will not re-create the ManagedChannel every time we request it. We will create one after the client is started and hold it forever. But every time we request, we will create a new stub from ManagedChannel to complete the request.
In the test, the  time of server crash is not short or long (I used the iptables command to simulate the server crash/recovery: iptables -A INPUT -s server-ip -j DROP / iptables -D INPUT -s server-ip -j DROP), for example, after the server was abnormal, I sent 20 requests and got the DEADLINE result, I immediately resumed the server, the situation mentioned above Appeared. But if I send only one request after the server is abnormal, and the server is restored immediately after getting the DEADLINE result, the above problem does not occur, and the server can return the result normally.
What's even stranger is that there is a thread in our client that detects the health status of the server. What this thread actually does is to create a new gRPC ManagedChannel to send a simple request to the server. At that time, after the server resumes, the result returned by this thread is normal.
I guessed that there was a problem with ManagedChannel, and then I used a tricky method. In the listener of the request result, if the request fails and the status code is DEADLINE_EXCEEDED, etc., I call ManagedChannel.enterIdle(). Then the problem of always returning to DEADLINE_EXCEEDED is solved.
However, our team believes that gRPC should have considered the recovery of client connections after server crashes. Then we focus on the gRPC retry we have been using.
Our retry configuration:
Could you please tell me why gRPC cannot restore the connection with the server ?
The retry function does not seem to be effective, or is it not applicable to the server crash situation described above?
I used the method of enterIdle to solve the problem by tricks, but what should I do correctly?
I saw the issue about getting retry logs, but I don't know how to use the following APIs:
Can you give me the simplest call example? Please


8383
RPCs start to fail as commands are no longer written to the wire after receiving 503. 8

What version of gRPC-Java are you using?
I am using 1.23.0, however I can reproduce the issue on 1.39.1.
What is your environment?
What did you expect to see?
I would expect new RPCs to function normally and send messages to the wire.
What did you see instead?
We have a service which acts as a gRPC client and makes requests to several gRPC servers. Our client uses a single underlying channel and makes a combination of streaming and unary requests. The unary requests happen on a regular 5 second interval. It appears that once our client makes a certain amount of requests, the server gets unhappy and sends us an HTTP 503 / gRPC UNAVAILABLE (likely due to rate limiting). After we receive this 503 it appears that any following RPCs will fail since commands/messages are no longer being written to the wire.
These are the last messages that we see on the HTTP2 frame logger
When our code proceeds to make the next unary requests on the 5 second interval the HTTP2 frame logger is silent (with the exception of messages written on a totally different channel/target).
Originally we had no deadlines on these requests so these RPCs were hanging indefinitely (if I add deadlines the deadlines do work which is different from #8334). It appeared as if all of our threads executing gRPC requests were in a deadlock so I attached a debugger and took a thread dump. Every single one of the threads using the shared gRPC channel was parked in a WAITING state inside of waitAndDrain.
It took me a while to grok the code but I realized that these threads were essentially waiting for some Netty thread to parse the response from the server and enqueue some callback code for our blocking threads to execute. What was troubling to me is that the client was never even writing any requests onto the wire so surely  it would never receive any response and these threads would sit here indefinitely (unless a deadline was configured).
I continued tracing the code paths and debugging the code. I discovered that the new RPCs were getting legitimate stream implementations, ie. NettyClientStream and not NoopClientStream. I discovered that writes to a stream were enqueued onto a channel's WriteQueue. I verified that the WriteQueue was periodically flushing messages to the Netty channel.
For example, here is a create stream command that is being flushed. And it will not be loged by the HTTP frame logger.
In order to double check that the HTTP frame logger wasn't malfunctioning I decided to take a packet capture and noticed a void of packets (after the initial 503 failures) when there should have at least been packets sent every 5 seconds. Capture ends when I kill the JVM. Note: Packet capture was taken at a different time than above screenshot so port numbers aren't the same because its a different TCP connection.
I haven't gone through debugging the Netty pipeline yet but I figured I should post here before I go even further down the rabbit hole.
Steps to reproduce the bug
See above. Only able to reproduce with this particular target service which sends us 503s at certain request rates. Luckily it is extremely reproducible.


8384
It is strongly recommended to reduce some internal classes. The code looks too chaotic8

It is strongly recommended to reduce some internal classes. The code looks too chaotic,
for example


8385
Method grpc.health.v1.Health/Watch is unimplemented8

why grpc.health.v1.Health/Watch is unimplemented ?


8389
large file transfer with gRPC8

I have C++ gRPC client and Java gRPC server.
Is gRPC right choice to transfer large files (>50 megabytes) with client side streaming ?
Why I am asking this is because gRPC is meant for small message transfer between microservices, right ?
Do we have any comparison between HTTP/1.1 multipart upload vs gRPC streaming in terms of performance and RTT ?


8391
ServerSecurityPolicyTest is flaky9

The test has been flaky since I added binder to the android CI in #8365.
Looks like the test would flake if some other test that uses SecurityPolicies runs before ServerSecurityPolicyTest, as SecurityPolicies.MY_UID would then get loaded to the "wrong" UID and ShadowProcess.setUid(MY_UID) within the test wouldn't impact the class. This isn't too surprising of a test bug since many test runs in Bazel run in separate JVMs.
We have StaticTestingClassLoader from context's test which could maybe help. But I don't know how compatible it is with Robolectric and there's enough tests that it'd seem annoying to use.


8394
Transparent retry may not always be triggered9

If when NettyClientTransport starts to call newStream(), we have server send GOAWAY, then the client should transparently retry. However, sometimes the client is running at, and because it's the old  3-arg transportReportStatus method, the client would not transparently retry.


8396
Error: Could not resolve all files for configuration `:compileProtoPath`9

Hi everyone;
How to use and quick start grpc-java?


8397
io.grpc.xds.SharedCallCounterMap.cleanQueue() NullPointerException9

Version: v1.38.1
It happened to grpc client with xds enabled:
I failed to find the exact steps to reproduce this exception. But it almost always happens in my long-running server application.


8404
There are a large number of internal classes in grpc java source code. It is strongly recommended to move to a separate java file0

There are a large number of internal classes in grpc java source code. It is strongly recommended to move to a separate java file.  A large number of internal classes make the code look very messy
for example:
There are many more,


8409
there should be 1 source of truth regarding whether a call is cancelled0

What version of gRPC-Java are you using?
What is your environment?
openJdk-11, ubuntu
What did you expect to see?
StatusRuntimeException should be thrown consistently by responseObserver.onNext(...) if responseObserver.isCancelled() == true
What did you see instead?
unless a server dispatches work to other threads, an exception is not thrown by responseObserver.onNext(...) regardless of responseObserver.isCancelled() == true.
This is due to the fact that there are 2 competing sources on whether a call was cancelled:
responseObserver has its own additional cancelled flag  that is checked by onNext(...). This flag is set by listener.onCancel() and as listener can be called by at most 1 thread concurrently, the flag is not set until a user method exits.
It seems that observer's additional cancelled flag does not bring any value and is completely redundant: I think it should be removed and instead responseObserver.onNext() should be checking cancellation status directly by call.isCancelled() the same way responseObserver.isCancelled() does.
Steps to reproduce the bug


8413
gRPC Application project with grpc-java plugin version:1.37.0 and higher does not build on Windows1

Micronaut Version 2.5.12


8414
Update Cronet to 92.4515.1311

cronet-embedded is being updated again. 92.4515.131 was published recently:


8416
Update netty to 4.1.671

What version of gRPC-Java are you using?
What is your environment?
NexusIQ shows a vulnerability in netty-codec.
The version 4.1.66.Final and later has none.
Fix part of Netty 4.1.66.Final: netty/netty#11429


8419
How do I specify a specific IP address for the GRPC server1

example:add ip


8421
Upgrade Android plugins to 4.x2

Apparently the new versions require using a gradle.properties with specifically set values, for all practical purposes. This will cause trouble because gradle.properties is generally reserved (at least by us) for local options specific to that developer. But now it needs to contain:
I don't know what to do about that; add gradle.properties to the repository and accept it will probably be accidentally changed or require devs to create it themselves. The CI can probably just pass -P on the command line to gradle if need be.
And then there are these further changes:
This warning, other than being completely incomprehensible, appears to be benign. It seems likely to be an upstream issue, and looks similar to android/android-test#573
But after that there are compilation failures due to missing classes so we'll need to migrate our code or figure out new dependencies. And when doing that we need to make sure it is compatible with androidx migration internally.


8423
add a flag to ServerCallStreamObserver to make onCompleted() throw StatusRuntimeException if the call was cancelled2

Is your feature request related to a problem?
It is currently a bit cumbersome If a gRPC method needs to attempt to roll back effects of a call when the client cancels and work is not dispatched to other threads:
responseObserver.onNext(...) will not throw an exception neither in unary methods (they don't throw on cancel by design) nor in server-streaming (due to  issue #8409 ). Furthermore responseObserver.onNext() may never be called by some server-streaming methods that return a stream of length 0 but need to attempt to roll back side-effects of processing client's request nevertheless.
onCancelHandler cannot be used as it will be called only after the method exits, due to listener's "called by at most 1 thread at a time" contract.
Describe the solution you'd like
If the general idea of this feature request is accepted, I will be happy to prepare a proper PR myself starting from the above draft.
Describe alternatives you've considered
Currently in cases like this, the easiest solution is to keep checking responseObserver.isCancelled() before responseObserver.onCompleted() (and in case of server-streaming calls possibly additionally before each responseObserver.onNext() if it's desirable to interrupt processing ASAP). This however is kinda C-style: client cancelling is an exceptional situation, so I think it's cleaner to handle it in a catch block rather and keep the main positive code-path clean.
Context.addListener() can probably be also used, but as the listener will be called by another thread, it will have to set a specially designated volatile/synchronized flag, which the code of the main positive case will need to examine before responseObserver.onCompleted(). Therefore it's not better than the above solution using responseObserver.isCancelled().
Additional context
Even for methods that do dispatch work to other threads, using exception rather than onCancelHandler is a cleaner solution in some cases: as cancellation may occur in the middle of a call, onCancelHandler similarly as a listener set by Context.addListener() described above, often needs to set a specially designated volatile/synchronized flag to stop further processing, that again needs to be checked by the code of the main positive case, while an exception interrupts the main positive code-path with much less hassle.


8424
how to set the value of method "setSampledToLocalTracing" when code generated2

How to configure the value of dynamically generated code setSampledToLocalTracing(false) to be false
here is my proto file


8428
Grpc netty tls information2

Hi Team,
We want to understand the tls usage for grpc-netty, netty-handler, boringssl. Grpc java uses these library for secure tls communication if I am not wrong.
I want the informations like
Does this implement SYMMETRIC algorithms and key lengths greater than 56 bits?
Where and for what purpose is this crypto being used
What is the crypto algorithm is used for TLS communication
I know the questions are not an usual ones but we want these information to ensure the security concerns.
Hope to hear from the experts :-)
Thanks, Bapi


8431
Received DATA frame for an unknown stream in bi stream3

I have a grpc bistream in my application. In the happy path, the server will call onCompleted() of the response stream and then the client will call onCompleted() of the request stream.
Most of the times things work fine, but every once in a while I am getting a big scary stack trace like
What does this mean, is it not appropriate for me to call onCompleted() of the request stream after onCompleted() of the response stream? When I remove the onCompleted() call in the request stream the error does not occur.
In my testing, it seems as though it is acceptable to have the requestStream closed but the responseStream open, i.e. the client call onComplete but the server continue to call onNext, in that these messages are received by the client. But the reverse is not acceptable, i.e. the server calling onComplete and then the client calling onNext in that these messages are not received by the server. So that in grpc the stream can only be half closed in one way? Is this correct and where is this documented?


8432
Add ConnectivityState.TERMINATED or change SHUTDOWN to notify after gRPC threads end.3

Is your feature request related to a problem?
We shutdown ManagedChannel asynchronously so need an asynchronous callback for determining when a channel has been completely cleaned up. This can be important for when libraries are dynamically unloaded / loaded at runtime as the order matters. Currently there is only ConnectivityState.SHUTDOWN, which means no new RPCs will be serviced, but the connection may still be operating. Notably, there is almost always a GOAWAY frame sent after this connectivity state is reached.
Describe the solution you'd like
Add ConnectivityState.TERMINATED to notify after connections have been completely closed. This would be sent after all gRPC threads have been ended.
Describe alternatives you've considered
ConnectivityState.SHUTDOWN could possibly be changed to report after gRPC threads have ended - it's unclear to me what the use case is of being notified of shutdown before this has happened but there may be a use case, in which case a new enum is needed instead. That being said, because it's only a timing issue, it would be rare to break applications by changing the behavior this way too and could be viable.
Additional context
We use gRPC in a library and have user reports of issues due to not being able to know when the gRPC library has finished shutting down.
open-telemetry/opentelemetry-java#3521


8434
API to eagerly send headers from a service3

I'd like to conditionally send headers from my server to a client at the beginning of a call. I have constructed an interceptor that will invoke ServerCall.sendHeaders(), and the client does receive those headers. My confusion is that after sending the headers the call will always immediately fail when the server tries to send a message, since ServerCallStreamObserverImpl always tries to send headers again in its implementation of onNext():
Is this the recommended practice or is there a way to indicate that gRPC should not proceed to attempt to send back empty headers?
I also realize that I'll have to consolidate any future interceptors that want to send back metadata as well since obviously any downstream attempts to send metadata will fail with or without this no-op - either the call will terminate or I'll be dropping it.
Thanks!


8451
Channel panic if receives CDS update with RING_HASH lb policy5

Since v1.37.0, the client channel would panic if receives CDS update with RING_HASH lb policy.
The right behavior should be still NACK the CDS update if RING_HASH is not supported. But the NACK logic was removed since v1.37.0.
The panic issue is fixed by #8438 in master and backported in v1.40.x, v1.39.x, v1.38.x, and fixed by #8440 in v1.37.x. The fix was fallback to round_robin if RING_HASH is not supported.
However, we should still fix the behavior by NACKing the response.


8453
HTTP/2 error code: COMPRESSION_ERROR5

When I run the basic example on our k8s cluster, I'm getting the following error:
Client stacktrace
and after code runs, successCount is 10 and failedCount is 10. When I run the client call, it works fine and server returns data fine, but when I run it again, it fails and sends this error.
When I try code agains local server, it works fine without any problem, it happens when I deploy the service to k8s.
Is there any bug around this? Or am I doing something very wrong?


8454
AdvancedTlsTest.onFileReloadingKeyManagerTrustManagerTest is flaky5




8455
Panic! This is a bug!5

What version of gRPC-Java are you using?
What is your environment?
Red Hat 4.8.5-28  jdk1.8
this project deploy in k8s
What did you expect to see?
What did you see instead?
Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs).
Steps to reproduce the bug
Only twice in recent months, in addition .I can not reproduce the bug


8460
gRPC exporting TLS keys -supported version combos6

Im following the following guide to export TLS keys for my gRPC traffic:
But when adding the newWireSharkSslMasterKeyHandler(), the TLS connection fails with a key length error, so adding the  newWireSharkSslMasterKeyHandler()  is causing a corruption of the initial key exchange.
The first question is: what are the actual supported combination versions listed here that support the above guide?:
Im using the following combo:


8463
RETRY_DELAY_PER_CALL is not recorded correctly if deadline exceeded while call is in backoff6

The current CensusStatsModule is not able to correctly record the delay caused by an ongoing backoff if/when deadline exceeded.


8467
Tracking Issue for setOnCloseHandler being Experimental6

To resolve issue #5895 PR #8452 has been created that adds new ServerCallStreamObserver.setOnFinishHandler(...) method.
The handler is called by Listener.onComplete when the call is finished correctly from the server's point of view: either onCompleted() or onError(Throwable) has been called, all the messages and trailing metadata have been put on the wire and the stream has been closed.
Several names were proposed for the handler:
onCompleteHandler : derives name from Listener's method but causes confusion with StreamObserver.onCompleted()
onSuccessHandler : my initial idea, yet also confusing as it can be called also after StreamObserver.onError(...)
onFinishHandler : current approach, matches well the verb from method's javadoc
onFinalizeHandler : would also probably do well


8470
Encounter io.grpc.StatusRuntimeException frequently7

What version of gRPC-Java are you using?
What is your environment?
Client:
OpenJDK Runtime Environment Corretto-8.292.10.1 (build 1.8.0_292-b10)
Server:
Use Golang to build the grpc server.
What did you expect to see?
The grpc connection is stable.
What did you see instead?
I encountered StatusRuntimeException frequently during the client receives data from the server, And the stacktrace is the following:
If I tried again after this error occurred, then there was anthor error:
Steps to reproduce the bug
I encountered the error frequently, with no special reproduction steps.


8473
Cross compiling the codegen plugin for linux7

We have a old fork of grpc-java and are now updating it to a (relatively) newer version.
There used to be a Dockerfile in compiler/ where we could build a grpc-java-deploy image. Here's the old readme that talks about this process.
I can compile the mac binary locally but not very familiar with cross compiling for linux. Would appreciate any help or pointers!


8476
it should be documented that calling `requestObserver.onError(...)` on the client side cancels the call instead of transferring error status7

What version of gRPC-Java are you using?
What is your environment?
openJdk-11 on ubuntu
What did you expect to see?
in case of bi-di methods (and probably also streaming-client-unary-server), when a client calls for example requestObserver.onError(Status.INTERNAL.withDescription("desc").asException()); the  server should receive all messages scheduled for transfer by the client (with requestObserver.onNext(...)) prior to the call to requestObserver.onError(...). After that the server should receive a call to onError(...) with a Status(Runtime)Exception with identical status code (INTERNAL) and description ("desc") .
What did you see instead?
results of clients calling requestObserver.onError(...) are the same as if the call was cancelled: most recent request messages don't get transferred to the server and whatever status and description the client sets, the server always receives Status.CANCELLED and "client cancelled" description.


8481
Log gRPC request payload as soon as the server receives it8

My objective is to log the gRPC request payload as soon as the server receives it before doing anything else.
This is how I write my ServerInterceptor implementation in an attempt to log the request payload.
In the normal occasion, when everything is good, both the logging in the body of interceptCall and the onMessage method gets triggered. However, in the unexpected circumstances, e.g. the DB that the gRPC server communicates to, is down, the onMessage method does not get triggered. The request goes into the val serverCallListener = next.startCall(call, headers) and results in an exception and finally, returns a response to the caller.
Now, you can see that I only have access to the request payload (or message) inside the onMessage method. How can I access the request payload before that, i.e. in the body of interceptCall?
Library versions


8495
Netty server loses exception during handshake9

Recently when debugging a server-caused handshake failure, we enabled logs and saw:
But there was no earlier failure. This seems to be a problem introduced by the client/server protocol negotiator unification and WriteBufferingAndExceptionHandler. On client-side we issue a fake write (that gets thrown away by NettyClientHandler) and use it for detecting errors during handshake:
We don't have anything similar on server-side, but WriteBufferingAndExceptionHandler is expecting to communicate a failure via a failed write.


8499
CallStreamObserver stabilization9

The resolution of #1788 made (Client|Server)CallStreamObserver stable but left the parent class, CallStreamObserver, experimental.


8501
Overload the equals method of Key0

What version of gRPC-Java are you using?
Master branch
What is your environment?
windows
What did you expect to see?
when call Key.equals, it compare the debugString of Key, but not the memory address.
What did you see instead?
override the equals method of Key
Steps to reproduce the bug


8508
Assemble error while using latest gRPC plugin on Android -> Input is shadowed in the --proto_path (Gradle 7.0.1)0

I am trying to update an Android project to use the latest gradle plugin (7.0.1), from the current 3.6.4 that it is using. In order to do this, considering the project is using protobuf, I need to update the protobuf and gRPC dependencies, as the current ones are not compatible with the latest plugin.
The gradle sync succeeds while using those, the problem is when I try to assemble the project, I get the following error:
Execution failed for task ':App:generateDebugProto'.
From what I understand while reading the error, the problem is that the proto files are generated now in both extracted-protos and extracted-include-protos build files, and the latter shadows the first one. I have checked, in the previous version, the files were generated solely in the extracted-protos build files.
By removing the profobuf dependency, as some articles suggested:
protobuf "com.google.protobuf:protobuf-java:3.17.3"
There is another assemble error present:
Can someone please shed some light on this? Thank you.


8512
Could not find TLS ALPN provider 1

I am using grpc-netty 1.38.1 , netty-handler 4.1.52.Final , netty-tcnative-boringssl-static 2.0.34.Final , and I am getting the below error -
Should I use different versions of the libraries ?
This is in Jdk 1.8 specifically zulujdk_8_21_0_2


8513
feature request: ring_hash as a general load balancer1

The ring_hash load balancer was designed in gRFC-A42 for xDS session affinity. Some users want to use ring_hash as general load balancer without being part of xDS. This might need a cross-language design (gRFC) on the general purpose ring_hash lb policy first.


8515
Getting below error on local machine after every few min.1

io.grpc.netty.shaded.io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
java.net.SocketException: Connection reset


8523
Cannot find a symbol GrpcGenerated after upgrade to 1.40.x2

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Compilation success
What did you see instead?
I'm using the following plugin to generate classes, but when I upgrade to the mentioned version, the error occurs.


8535
Heap pollution by HpackEncoder$HeaderEntry3

I have multiple(500k) long living(1h+) server streaming. I see in head dump, that dominant resource its HpackEncoder$HeaderEntry that was send to server. After send to server they stay in heap until streaming not end. Is is really necessary keep in memory headers by HpackEncoder after encoded and send them?


8536
BinderChannel flow control can get stuck under load3

What version of gRPC-Java are you using?
head
What is your environment?
Steps to reproduce the bug
We're launching a unary "GetTile" gRPC interaction between two Android processes. Response message can be ~100kb and clients request several tiles one after the other. Telemetry from the field shows that after a while some clients start experiencing DEADLINE_EXCEEDED errors even though other calls to the same server process over different Channels continue to succeed.
By lowering BinderTransport#TRANSACTION_BYTES_WINDOW and requesting tiles in a loop I can reproduce similar symptoms locally. Using the debugger I can see the server's BinderTransport#transmitWindowFull becomes stuck true even though all bytes have been acknowledged by the client. The server is generating response messages but isn't able to put them on the wire. I believe the problem is that BinderTransport#sendTransaction() updates transmitWindowFull based on an unsynchronized read of acknowledgedOutgoingBytes, which may not include concurrent updates by #handleAcknowledgedBytes() on another thread.
What did you expect to see?
Binder transactions should pause when flow control kicks in then resume when enough outstanding bytes are acknowledged.
What did you see instead?
Outstanding bytes are acknowledged but transmitWindowFull remains true in a way that's inconsistent with acknowledgedOutgoingBytes and numOutgoingBytes.


8542
gRPC clients always send grpc-accept-encoding header as Gzip4

I noticed that the gRPC Java clients always send grpc-accept-encoding=gzip whether I enabled Gzip compression or not. Is this the intended behaviour?.
AFAIU, the reason for this behaviour is DEFAULT_INSTANCE of the CompressorRegistry is using Gzip as the first parameter.
I couldn't find such a statement in the gRPC compression spec. Moreover, the gRPC Go language clients don't do such a thing.


8543
Be more strict in the NameResolver.Factory javadocs 4

Is your feature request related to a problem?
It's related to a problem/change of behavior of the NameResolverRegistry introduced in #8323
Due to that change the NameResolvers will only be invoked if their getDefaultScheme() matches the specified scheme.
I previously watched for/used both the "default" scheme and an alias.
Describe the solution you'd like
Please change the javadocs to contain a hint, that the scheme used in the newNameResolver must be the same and only as the default scheme (or at least that no other schemes will be checked).
Describe alternatives you've considered
Add a new method that assumes that the check has already been done, with the newNameResolver being implemented to do the checks and then invoke the new method. Later that method should be marked as final to disallow invalid behavior.


8549
performance test, client and server cpu utilisation did not exceed 70%, qps did not exceed 7K4

jdk version: 1.8.0_192-b12
grpc version: 1.40.0
i use porotc and grpc plugin to generated pb file to get req\res\grpc-service definition java file .
in my project, grpc client base on spring cloud gateway, grpc server base on spring-boot-server.
two server process  deploy on 8 core vm, client deploy on 4 core 8G docker and docker deploy on vm.
grpc server just use @GrpcServer on myclass that extend grpc.bindableservice ,  and set grpc port in spring.yaml , and there no other config.
grpc client like that build channel : for the same target server , diff thread use the same one client and channle build future stub.
performance test with wrk result like below,wrk initiate request by http mode to my grpc client , and grpc client transfer request to grpc server and get response to wrk.
client cpu utilisation did not exceed 70%, qps did not exceed 7K,  two server cpu both about 50%.
ping latency client vm bettew server client about 0.2ms
1、how to set client or server config to improve my project performance;
2、what's different  between use @GrpcServer and nettyserverbuild.xxxx


8555
Since last two versions very frequent occurrence of io.grpc.StatusRuntimeException: CANCELLED: io.grpc.Context was cancelled without error5

What version of gRPC-Java are you using?
1.40.1 and 1.41.0.
What is your environment?
Linux, latest OpenJDK 11 builds
What did you see instead?
Very frequent occurrence of io.grpc.StatusRuntimeException: CANCELLED: io.grpc.Context was cancelled without error  in code that worked without such issues before latest couple of versions of grpc-java.
Steps to reproduce the bug
Unfortunately i don't have a reproducible code I can share, but we see this happening across all our services which are using grpc calls.
If we change the code to fork Context before sending the outgoing API call using grpc, the issue goes away.
It's not a matter of timeouts, all tests are in a local environment.
Error appears immediately after executing the API call and seems request does not arrive to remove service.


8557
Best practise for logging5

We adopted gRPC java for a critical app and we are struggling on the best approach to log the important information in a single line:
Most of our API doesn't have to deal with streams, so for these queries we just use the ServerInterceptor with ServerCall for logging. When we look at the documentation for the close:
If you wish to know when the call is actually completed/closed, you have to use Listener#onComplete or Listener#onCancel instead.
Question #1. If we look at the documentation, we are advised to rely on onCancel & onComplete to calculate the response time, but these methods are not providing the status as a parameter, so we cannot log that information?
As a workaround, we were thinking to extract the status from the close and keep it until onComplete or onCancel is invoked, but if I understand correctly, there are 3 different possible scenarios:
(1) close (2) onComplete
(1) close (2) onCancel
(1) onCancel (2) Optional: close
So even if we would like to extract the status from the close and keep it until the onComplete or onCancel is invoked, the fact that onCancel could be invoked before break that workaround.
Question #2. Currently, we use the close method to do the logging, but we also noticed that when a client lately was unstable and very slow to accept the response, it impacted our response time, so it's not clear to us how to calculate the response time once the response is ready on our side, no matter if the client is available to consume it or not?


8565
Data race in RetriableStream.onReady()6

As shown in the following stack trace, RetriableStream.onReady() is calling isReady() on transport thread, whereas isReady() is calling frame().isClosed(), but framer.closed is not thread-safe.


8567
I can't build my project by click green run button in Android studio.6

Environment:
Mac big Sur 11.6
when I run my project by click the green button ,
I get this problem.
Execution failed for task ':protocol:generateDebugProto'.
Could not resolve all files for configuration ':protocol:protobufToolsLocator_grpc'.
Could not find protoc-gen-grpc-java-1.0.0-osx-aarch_64.exe (io.grpc:protoc-gen-grpc-java:1.0.0).
Searched in the following locations:
what's is the  protoc-gen-grpc-java-1.0.0-osx-aarch_64.exe??


8569
Cancel a blocking call BEFORE deadline?6

Hi there,
I know that I can set a deadline for a blocking call with something like
How do I proactively cancel this call BEFORE the deadline?
Thanks


8574
DNS cache not updated after unsuccessful reconnects7

Hi,
I use grpc-java as part of jetcd to connect to an etcd cluster within kubernetes.
When scaling down and up again all etcd endpoints, I would expect the grpc client to reconnect.
Restarting the etcd endpoints means new pod IPs, and the k8s internal DNS updates the headless service DNS pretty fast.
Based on ticket #1463 I think the grpc client should refresh the DNS names
after trying all configured endpoints.
In the provided logs I see that all three endpoints are tried in a loop, but always the old pod IPs.
Also interesting: The "No route to host" log is only seen for the first endpoint etcd-0, but the message "Started transport NettyClientTransport" is seen as round robin over all endpoints.
The JVM is already configured to networkaddress.cache.ttl=10
What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
After trying to connect to all endpoints, grpc should refresh DNS and get the new pod IPs
What did you see instead?
grpc is keeping the old pod-names/IPs
Steps to reproduce the bug
Shutdown all server endpoints, start them again (with new IPs) and wait for client to reconnect
grpc.log


8576
RBAC should fail with PERMISSION_DENIED7

It is currently failing with UNAUTHENTICATED. UNAUTHENTICATED means the user was unable to prove their identity. PERMISSION_DENIED is for authz failures.


8577
health.proto Should be in a Proto Jar on Maven Central7

All of the health check instructions I can find indicate that the http should be copy & pasted into a project. I'd rather pull it in as a dependency but I can't find it in any of the published proto jars on Maven Central.


8586
Packaged GRPC service JAR doesn't support deprecated valueOf method for enums8

The simple GET API works in local machine but not in the cloud when deployed as an app because the valueOf method does not exist in the generated java classes for enums generated from proto for the service request.
In cloud, we use the native binary out of the packaged jar. Is there a way to include the deprecated method into the exported jar?
stack trace as below.


8587
As a user, I wish that ManagedChannel implements AutoCloseable interface8

Is your feature request related to a problem?
When I'm building io.grpc.ManagedChannel directly in the code (in integration tests) it could be useful if that already implemented java.lang.AutoCloseable interface. So instead of this:


8590
GRPC code generator creates deprecated code9

What version of gRPC-Java are you using?
1.41.0
What is your environment?
Mac, Java 16
What did you expect to see?
No Warnings
What did you see instead?
com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner in com.google.protobuf.Descriptors.FileDescriptor has been deprecated
Steps to reproduce the bug
Build any GRPC application with -Xlint:deprecated. The code generator is creating code that uses a deprecated API.


8591
Java-client costs 5-6s for the first request9

What version of gRPC-Java are you using?
3.17.2
What is your environment?
client in java to server in go
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Generate go server. It does not matter what implementation the server logic is. Because the duration is my focus, which is between the last call  to grpc api in client and sending to server. Start server just for client works.


8592
gRPC xDS client returned an unusable name resolver error with xDS server9

I tried a gRPC xDS client implementation with a go-control-plane implementation. Go clients that I implemented works without an issue, however, the Java client returned the following error.
Note that, I've correctly imported the relevant xDS libraries as in this documentation.
Then, I tried it with a java-control-plane, but I encountered  the same issue.


8605
TLS handshake error when bumping netty to 4.1.69.Final and tcnative to 2.0.44.Final0




8606
Maven Build Issue from Setting `Class-Path` in the jar manifest for grpc-netty-shaded0

What version of gRPC-Java are you using?
What is your environment?
JDK 16, Maven version 3.8.1, MacOS Catalina 10.15.7
What did you expect to see?
a clean build of my project
What did you see instead?
This issue has happened with other projects that we take a dependency on, see here. Taking a look at the MANIFEST.MF of the grpc-netty-shaded jar, the Class-Path attribute is set which seems to be causing the bug.


8610
Support of Cipher Suite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA2561

Is your feature request related to a problem?
Grpc-java does not support Cipher Suite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256. So far grpc-java is maintaining its own optimized version of okhttp, thus it is not possible to switch to a new okhttp version that supports newer cipher suites.
Describe the solution you'd like
Add Cipher Suite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 to the grpc-java forked version of okhttp or introduce a newer version of okhttp.
Describe alternatives you've considered
So for I don't see any alternative.
Additional context
TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 is a hard requirement in my project. If this cipher suite is not supported I have to switch from grpc to a REST API which I really don't like.


8611
sometimes build fails with "Execution failed for task ':grpc-core:compileJava'. > assert i != -1"1

What version of gRPC-Java are you using?
incremental build from 0376de1 to 1f90e0e but happened before also
What is your environment?
ubuntu-18.04, openJDK-11
What did you expect to see?
build should succeed cleanly
What did you see instead?
very hard to reproduce reliably: happened to me like 2 times across about 30 builds during last 2 months. As far as I remember the previous time it also happened during an incremental build, but not 100% sure.


8617
Need  compatible  versions for Netty 4.1.68+ , GRPC server and netty-tcnative-boringssl-static1

We need to upgrade Netty version to 4.1.68+. Please let us know the compatible versions for gRPC server and netty-tcnative-boringssl-static. The versions  table in  https does not include this netty version.


8624
does grpc-java have the 'UnknownServiceHandler in go' implementation?2

hi,
I would like to create a grpc reverse proxy in java, and only googled some go solutions like below codes, do we have the same mechanism in java?
thanks


8626
AnonymousInProcessSocketAddress is experimental.2

AnonymousInProcessSocketAddress, added in #8589 is an experimental API.


8627
IPv6 connection is unavailable in South Korea due to ISP issue.2

Yesterday, KT(one of the biggest ISP companies in Korea) had a connection issue for whole regions in South Korea.
After they resolved the problem, Google's Firestore service is not working properly. (Only in Android apps)
While I'm investigating the issue, I noticed Firestore Android SDK uses gRPC library for network connection.
This issue can be resolved if you connect by only using IPv4.
But since we can't inform to whole users to change their connection to IPv4 from their Android setting, it should be done with client app level.
We found this java -Djava.net.preferIPv4Stack=true command is not working for gRPC client.
I actually have no many knowledges about gRPC, so I aplogize if my question is not proper.
Is there any way to force whole connection to use IPv4 while using this library?
This problem is happening whole services which uses Firestore in South Korea.
I hope someone can give me a tip.
Thanks in advance.


8628
Replace the String field CdsUpdate.lrsServerName with a ServerInfo field to support federation2

go/grpc-xds-federation#heading=h.gh3gjftay27x


8629
Migrate away deprecated field in CSDS response message2

go/grpc-xds-federation?disco=AAAAQ4-QtfU
Deprecated xds_config field in


8631
udpa to xds proto migration3

Migration plan:
We should start using the ORCA protos from the new location.
We should change our code that handles the udpa.type.v1.TypedStruct type URL to also accept xds.type.v3.TypedStruct in the same place.


8636
FakeNameResolverProvider is experimental.3

This class, added in #8633, is useful for testing usage of forTarget() in some channel builders.


8640
ManagedChannel never terminates with shutdown/shutdownNow4

What version of gRPC-Java are you using?
What is your environment?
As a Kubernetes pod running /linux
openjdk version "1.8.0_302"
OpenJDK Runtime Environment (build 1.8.0_302-b08)
OpenJDK 64-Bit Server VM (build 25.302-b08, mixed mode)
What did you expect to see?
Waits for the channel to become terminated, giving up if the timeout is reached.
What did you see instead?
ManagedChannel.isTerminated() always return true after 100 or more tries shutdown()/shutdownNow()
Steps to reproduce the bug
The issue gets reproduced intermediate and when observed the thread hangs. The channel stop is called using the following snippets.


8642
CsdsService not properly synchronized with XdsClient4

Consider this code from CsdsService:
The initial issue is that getSubscribedResourcesMetadata() and getCurrentVersion() have no synchronization:
That is bad. However, the xdsClient API itself is insufficient for CSDS because those two method calls need to be atomic; even if each of those methods were thread-safe the version needs to match the resources returned.


8643
xds: Improve error message for XdsServer listener not found4

Running on master and using TD, if I get the endpoint-selector wrong (or it doesn't exist), I get:
That's not helpful in the least. From a grpc-developer standpoint I can make sense of that after some assumptions, but for a user it is pretty useless except for Googling and hoping there's something on SO.
I do think this is a difficult message though, because the client doesn't actually know what's going on. Maybe there is a port mismatch. Maybe there is a metadata mismatch. Maybe they didn't include metadata in the bootstrap. Maybe the endpoint policy was matching SIDECAR_PROXY instead of GRPC_SERVER. Or maybe it just hasn't propagated through the control plane yet. So there's little hope of including everything the user needs to look at to resolve this.
So I think the best thing to do is just include the context of the error. "Failed to find listening configuration for address '0.0.0.0:50051': Requested entity was not found." Or similarly "Failed to find listening configuration 'grpc/server?xds.resource.listening_address=0.0.0.0:50051': Requested entity was not found." (of which I'm preferring the latter) We might also suggest "check your bootstrap" but... dunno.
CC @sanjaypujare @YifeiZhuang


8644
gRPC server instantly resets stream for requests,then the erlang client receive eof response4

hi, i use the grpc server using java, the client uses erlang; We encountered a very strange problem, the server side reported an error:
then erlang client receive eof immediately.
same problem like:##7563.   but the message size is less than 4 MB, so we can't reslove the problem by increasing the maximum message size


8657
xds: NACK causes resource to be considered non-existing5

I'm dealing with a server returning broken configuration. There's three breakages.
The first is that the resource is considered not to exist. That is not right. The watcher should have been delivered an error and the resource wait timer cancelled. I'll note that in this case we had previously gotten a lot of UNAVAILABLE: Credentials failed to obtain metadata failures, and this is the first response to arrive (not included because that log was painful to copy).
Even assuming that the resource is properly determined to not exist, it shouldn't cause start() to fail. From A36 xDS for Servers:
XdsServer's start must not fail due to transient xDS issues, like missing xDS configuration from the xDS server.
And then there's a bug in XdsTestServer if start() throws, since server was never assigned.


8659
what is the best way to expose http rest api from grpc server5

hi,
for some reasons I need to expose some http rest apis from an existing gRPC server, and an external reverse proxy like envy is not an option. so I tried these implementations with SpringBoot and AbstractProcessor, receive an http request, convert request to protobuf, init Context,  call gRPC, convert observer protobuf to response, send it back, etc.
My question is which one is better, if the first one, how to share Context; if the second, is directExecutor() still fine in this use case? and  how about the performance lose?
thanks a lot


8672
Client Side Streaming OutOfDirectMemoryError: failed to allocate direct memory7

What version of gRPC-Java are you using?
What is your environment?
java version "1.8.0_271"
Java(TM) SE Runtime Environment (build 1.8.0_271-b09)
Java HotSpot(TM) 64-Bit Server VM (build 25.271-b09, mixed mode)
What did you expect to see?
Running upload logic without any error.
What did you see instead?
Client side occurred OutOfDirectMemoryError: failed to allocate direct memory.
Steps to reproduce the bug
It's actually a mock to test how would gRPC do when endpoint process speed is in huge imbalance.
I use gRPC Client Side Streaming to implement Upload Business in my project lately. Well this issue would not happend when I do uploading things by HTTP 1.1 using Serverlet, which put data in http request payload, in java back end, retrive payload data steaming using api like javax.servlet.http.HttpServletRequest#getInputStream()
First of all, client and server configuration are:
My question is, am I configured gRPC in a wrong way? If is, what's the correct way to do?


8673
Crash in OkHttpClientTransport7

What version of gRPC-Java are you using?
What is your environment?
android
What did you expect to see?
The library should instantiate
What did you see instead?
The library crashes with the following stack-trace:
Steps to reproduce the bug
Not fully reproducible but happening on Android 10/11 and mostly on Xiaomi/Realme


8674
Server not accepting requests after update from 1.41.0 to 1.42.07

After upgrading from 1.41.0 to 1.42.0, our services stopped receiving requests, and logging following INFO message:
We think that it could be caused by the following changes:
As we are running our workload also in a legacy environment where proxies don't handle HTTP/2 100% correctly, the issue is probably in the Connection header.
Is your feature request related to a problem?
Connections with the Connection header are refused.
Describe the solution you'd like
Make this validation configurable, so have a new method in ServerBuilder class
Describe alternatives you've considered
Remove this validation completely.
Additional context
Unfortunately, this is a critical issue for us that blocks us from updating gRPC libraries
My guess why netty doesn't reject the connection with the Connection header is that there are still too many legacy workloads that could be broken by this change.


8678
GRPC induces NoSuchFieldError with build() on unused message in proto file7

What version of gRPC-Java are you using?
What is your environment?
Windows, Azul OpenJDK 13,
What did you expect to see?
no exceptions; builder returns a normal instance
A custom error "this message type has been removed at runtime for the optimization CODE_SIZE; please rerun with SPEED"
What did you see instead?
Steps to reproduce the bug
write some code


8679
How to add a new mechanisms in java?7

it seems we are able to add a customer authentication mechanisms for grpc.
May I know how to do the same for java?
Following the sample in links above, how should I add the customer authentication mechanisms as reading data from header?
and another question, any limitation for customer authentication mechanisms ?


8682
DEADLINE_EXCEEDED when using sleep8

Current configuration:
Issue:
I have gRPC server running. Using a java client to connect to it, and send requests. The following code for the client:
This is the output of this executing:
Now if I add in a sleep. I see unexpected DEADLINE_EXECEEDED exceptions after the initial request.
I then see the following during execution:
Notice that it still executes the initial request and then the second request (which all happen before the sleeps). But then the sleep causes the deadline to be exceeded.
What did you expect to see?
I don't expect a deadline exceeded exception
What did you see instead?
There is a deadline exceeded execption
Steps to reproduce the bug
Run the described code above against a simple server.
Is this expected? It appears to be a bug, and I want to ensure that this library will not block if other threads are busy doing work.
If this isn't a bug. How can I ensure that other work does not cause DEADLINE_EXCEEDED exceptions in the above code?


8684
status code for unclean connection termination8

When the TCP connection underlying a netty server connection is abruptly closed by the client, grpc-java goes through all active call streams and closes them as UNAVAILABLE:
A problem we've seen with this arrangement is that there is no way for to distinguish UNAVAILABLE call failures due to "real" server unavailability and due to the client uncleanly closing their connections (probably due to abrupt process death). What do you think about changing the status in this situation to CANCELLED?



8687
Migrate from JSR305's javax.annotation.CheckReturnValue to ErrorProne's com.google.errorprone.annotations.CheckReturnValue8

Initiated by cl/408694635



8705
Should the java compiler version be unified as 1.8 or newer0

There is two java compiler version in master branch,1.7 and 1.8.
Should we upgarde it to 1.8 or newer. For the following reasons:
Java8 and 11 is most popular Java version.Few applications  still use Java7. See 2020-java-technology-report.
Java8 new features, like lambda、stream,can improve development efficiency, make code implementation cleaner.
Please think about it. Thanks.


8707
reflection.proto v1 is ready now,v1alpha can be update0

grpc-services contains deprecated v1alpha/reflection.proto.Few hours ago, grpc/grpc project accept PR #27957 , add v1/reflection.proto.
So I think we can update this file.


8708
It is hoped that the Java code generated by grpc can provide an ``interface``0

It is hoped that the Java code generated by grpc can provide an interface for developers to implement concrete logic rather than an abstract class, because ide can help check whether developers have implemented the interface, but can not check the abstract class


8712
InProcess: client streaming memory leak when retry enabled 1

What version of gRPC-Java are you using?
What is your environment?
Linux 5.15.2
openjdk version "11.0.13" 2021-10-19
What did you expect to see?
No java heap space exception.
What did you see instead?
java.lang.OutOfMemoryError: Java heap space
Steps to reproduce the bug
We've recently updated our grpc dependency from 1.39.0 to 1.42.0 which now causes an out of memory error in one of our tests.
I've attached a test project that can reproduce the problem.
grpcheap.zip
Please be aware that the test is run with limited heap size (see pom.xml): -Xmx64M
The general idea of the test is this:
What happens when I run the test with grpc >1.40 is that I get an OOM when it has sent ~60mb worth of chunks, which obviously is near the -Xmx limit. However, what I would expect is that the heap usage would never rise to that level, as after each 1mb chunk has been sent that chunk can be gc'ed. I've also attached a screenshot of visualvm where you can see the heap graph of the test using grpc 1.39.0 vs 1.42.0:


8714
Race condition in idleTimer & ManagedChannel#enterIdle - refactor needed1

Edit (2021/12/15): The following bug is fixed with a hot patch #8746. However, the logic of idleTimer in ManagedChannel is complex, delicate, and bug-prone. Refactoring is needed to make it more robust and easy to understand.
What version of gRPC-Java are you using?
1.41.0, current master: 8382bd8
What is your environment?
Java 11/16, MacOS. Original user report is probably from a Linux  server.
What did you expect to see?
We trigger ManagedChannel#enterIdle API periodically while also keeping ManagedChannelImpl#idleTimer with default settings. We expect ManagedChannelImpl to work properly and not to end up in panic.
What did you see instead?
The channel is broken after it.
Steps to reproduce the bug
Apply the change to io.grpc.testing.integration.XdsTestClient:
Relevant report
The original user report in Temporal JavaSDK: temporalio/sdk-java#863
According to the report, the issue happened after a long period of channel inactivity (> idleTimer period).
My best guess is that our periodic #enterIdle shuts down the nameResolver while still-scheduled (cancel(permanent=false)) idleTimer sees a stale enabled=true and performs the action. But I don't see how this can happen.


8717
If I want to implement my own monitoring and control refreshing grpc connections, such as server address changes and client monitoring  and refresh in real time. Do you have any good opinions?1

No description provided.


8718
AppScan vulnerabilities reported from 'grpc' code1

Hi,
Can you please review below AppScan vulnerabilities reported in GRPC code and let us know if any plan to fix these or if these are false positives.
Thank you,
Preeti.


8719
In the aws environment, the grpc client requests the server to hang and there is no response for a long time.1

grpc.version: 1.39.0
netty.version:4.1.65Final
background:
We have two services a and b, both a and b provide both http interface and grpc interface;
Among them, a depends on the grpc interface of b.
When I access the http interface of a, everything is normal. And many visits are normal.
When I access the grpc interface of a, the grpc interface of a accessing b hangs, and there is no return for a long time, and the withDeadlineAfter(5 seconds) setting is also invalid, and the access will not be interrupted.
Go to the b service to check the log. The log at the interface entrance is not printed. Therefore, it is suspected that the grpc request of the a service is not sent.
To add, the http interface and grpc interface of service a are the same piece of code that is finally accessed through the adapter, that is to say, no matter whether you access the http interface or grpc interface of a, you will use the grpc client to access the grpc interface of service b.
Test the above scenario on the mac development computer, everything is normal


8720
Round Robin Load Balancer Retry Logic2

Hello!
I was playing around with the client side round robin load balancing in Kubernetes. I was making grpc calls to a headless service that had 2 backing pods and I noticed that
if one pod goes down, ensuing requests are automatically routed to the surviving pod
if a new pod comes back up, it won't be added to the pool and requests won't make it back to that pod
if all existing pods go down, and new pods come up, requests are automatically routed to them
This leads me to believe that the round robin load balancer only issues a name resolution request for the ip addresses when it runs out of existing functioning ips. Is this expected behavior or is there something else I need to configure in order to get new pods automatically added to an existing pool?
We are using


8721
Huh. I don't know how that fixed it. But since it seems you found a solution, closing the issue.2

Huh. I don't know how that fixed it. But since it seems you found a solution, closing the issue.
Originally posted by @ejona86 in #4263 (comment)
Because the protobuf-java has descriptor.proto but  protobuf-lite doesn't have ,How I resolved it


8723
Hopeless SSL failures not reported to client implementation2

Hi folks,
I'm writing an application that relies on a long-lived bi-directional stream of messages, with the client-server channel running over mTLS, and hitting a bit of a problem.
On startup the client begins a bidirectionally streaming RPC to the server, constructing a stream and sending a "register" message over it. The server does not send a "register acknowledge" message, and I'm unfortunately not in a position to modify the protocol here, only my implementation. This bidirectionally streaming RPC is kept running for the lifetime of the application (until either client or server crashes, which ideally happens rarely).
The certificates used on the client side expire and are re-issued frequently (as fast as every 5 minutes if a customer running this application decides that's required), and we've written our client to re-build the underlying channel the RPC is being made over should the RPC end (e.g. if the server crashes and the clients StreamObserver::onError is called).
We're finding that, if the following occurs, our client is getting hung forever attempting to connect to the server with a set of certificates the server will never accept:
Server crashes, client is disconnected and re-builds channel, taking in newly-issued set of certificates (cert-set A)
Server remains offline while another new set of certificates is issued (cert-set B, cert-set A now expired)
Server comes online, beings processing connection requests
Client now in a state where it believes the initial register message has been processed, but actually the underlying connection is faulty and the channel is stuck in a retry loop forever.
Obviously using something like a deadline isn't an option here, due to the protocol design.
It seems like ideally it should be possible to detect this kind of "hopeless" situation (at a base level, the client certificate is expired, so the noAfter will evaluate to a time in the past, which should be enough to be able to say the handshake will never succeed), but I understand it's tricky - perhaps an SSLException or IOException passed to onError would be appropriate, but I'm not sure.
I've included a reproducing case below, with the caveat that rather than creating a client certificate and having it expire, the reproducing case simply has the server require client certificates and then has the client not send any - a similarly "hopeless" case, but without any tricky timing shenanigans. To reproduce:
Run "genSecurityContext.sh" to generate a certificate authority and a server cert/key pair signed by that authority
Modify the constant "SEC_MATERIAL" to point to wherever you ran "genSecurityContext.sh"
Run the application via Main::main(), and note the client is never notified of the permanently broken netty channel
The case is packaged as a maven project, for the sake of convenience, but if you're (understandably) leery about unzipping random
files, the bulk of the logic is:
Thanks,
Oliver


8724
Bump Protobuf to 3.19.1 which is is Mac M1 osx-aarch_64 compatible.2

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
Release 1.42.1 generates osx-aarch_64 compatible artifacts.
However the protobuf version used is 3.17.2 which does not have a compatible osx-aarch_64.
I seems that this release will work correctly with arm64 macs. Probably I understood it wrongly.
What I expect is that using the latest grpc-java arm64 mac compatible and using the latest protoc 3.19.1 which is "compatible" with arm64 mac, I can generate valid code.
What did you see instead?
As I was using a newer compiler, for arm64 compatibility reasons, It was generating code that depends on methods that are not available in the current grpc-java used protobuf 3.17.2 version.
Steps to reproduce the bug
If you try to compile the well know helloworld.proto bundled in protoc, you will get the error mentioned previously.
I am using the current suggested protobuf-maven-pluginto generate code. However I need to dump up the protocArtifact to 3.19.1 to use a aarm64 mac compatible artifact.
Use protoc 3.17.3 which does include osx-aarch_64 based maven artifacts


8726
BinderClientTransport instance retained post-termination if the destination AndroidComponentAddress doesn't exist2

What version of gRPC-Java are you using?
latest
What is your environment?
Android/Linux
Steps to reproduce the bug
Call BinderChannelBuilder.forAddress() on a directAddress whose package or Service class name doesn't exist.
Send a request over the new Channel to activate it.
Observe the request fail with UNIMPLEMENTED as expected.
shutdown() the Channel and awaitTermination()
What did you expect to see?
No remaining Java references to Channel related resources.
What did you see instead?
Heap dump shows a strong reference to the ServiceBinding in android.app.LoadedApk#mServices (as a ServiceConnection) even after termination.
The problem is that ServiceBinding fails to call Context#unbindService() when bindService() returns false. (See b/37092557 for discussion / longstanding confusion on when to call unbindService())


8732
Support okhttp3 in the public interface of grpc-okhttp3

Is your feature request related to a problem?
Describe the solution you'd like
Add support for okhttp3 to the public api e.g. OkHttpChannelBuilder to make it easier to use with okhttp3 compatible versions
Describe alternatives you've considered
Stick to the old version of okhttp 2
Additional context
Support both okhttp and okhttp3 in the public interface.


8737
Server-side streaming and client process callback synchronization3

Hello, I am testing gRPC server-side streaming with a client async stub and got a question about how client process callbacks
From the documentation it's stated that no onNext can be sent after onComplete signal is sent from the server, but I am not sure does client wait for all remaining onNext callbacks to finish before executing/processing the onComplete callback.
Or simply stated, can onComplete callback execution happens on client async stub while the client is still processing the final onNext callback?


8738
Can we use gRPC to pass a file descriptor between server and client?3

As title says,  Can we use gRPC to pass a file descriptor between server and client?  I have known it can be done by using Netty EpollDomainSocketChannel, but i don't whether gRPC has implemented it or not.


8740
How can the server proactively disconnect the client?4

In some cases, the server needs to close unauthorized client connections. However, I did not find a way for the server to actively disconnect the client. How do I disable the TCP connection of the grpc on the server?


8741
java.lang.NoClassDefFoundError: io/grpc/BindableService4

I used grpc for helloworld , but when I run grpc server  ,error occured :
and how can i study grpc  , I first use this framework !


8743
libssl.so.1.0.0 cannot open shared when upgrading netty to 4.1.69.Final and tcnative to 2.0.44.Final4

Hi Good Day!
We just upgrade our netty version to 4.1.69.FInal, the upgrade tcnative to 2.0.44.Final..
After this, we are encountering the following issue... Any thoughts what could I been missing?
Thanks...


8751
JVM crash with grpc-java 1.42.x and alpine docker image5

An attempt to upgrade from grpc-java 1.41.1 to 1.42.x ends with JVM crash.
Maybe also affected by the fact that openjdk:X-alpine images are not maintained anymore, hence have no new JDK updates.
The first version of grpc-java with the problem is 1.42.0, the versions before work fine.
It may be related to grpc/grpc#27995


8753
How to close keepalive watchdog?5

I got an error in client like :
after that, when the client try to send req to server, I just got :
and I sniffered the packet,notice the client didn't send req to server any more, that was not what i hope
so can I just close the watchdog, or is there any way to let the clinet keep send req (even the server is in DEADLINE_EXCEEDED)?


8755
Pseudo header :protocol support5

I am implementing websocket-over-http/2, and I use envoy proxy to send http/2 request to server using grpc-java.
Referring here, when envoy sends an http/2 request, it bootstraps the websocket connection to http/2 using the header :protocol, which seems to be due to rfc8441.
I wonder if the netty handler of grpc java handles the :protocol pseudo header (in my case, of course, an illegal error occurred), and I wonder how I can control this pseudo header without an error.
If pseudo header :protocol is not supported, I wonder if it will be added


8756
Ring hash should be named `ring_hash_experimental`5

Ring hash can only be used from within xds currently, because that's the only way to get a hash assigned to RPCs which is required for it to function. So it should be using the _experimental suffix like the other only-used-from-xds policies. The gRFC uses both names for the policy, but one is more vernacular and the other is the precise name as seen in the LB registry. I confirmed with @markdroth that _experimental is intended.
We would be interested in figuring out a way to use it outside of xds, but there's currently no work happening on that front.


8770
How to graceful shutdown client or server when connection still have active streams7

I create a bidirectional streaming RPC.
In server side, I call onNext of responseStreamObserver continuous, then I try to invoke server.shutdown.
But server will never shutdown for there is active stream.
Only the active stream send end frame will trigger stream close and then trigger the connection close and server shutdown.
Also, when I try to shutdown subChannel in client side, connection will never close for there is active stream.
Both side will send a GO_AWAY frame, but in gRPC layer, requestStream can not receive this status, so stream can not stop by send onComplete.
Why not notify requestStream when receive a GO_AWAY frame? And then stream will know it's time to do onComplete.


8771
How to get header in ClientInterceptor from response with ListenableFuture-style stub?7

The server responsed header,but in ListenableFuture-style stub,the ClientInterceptor runs in grpc ThreadpoolExecutor;
How can I get the header in current Thread? thanks


8772
Capability to configure both default `CallCredentials` and custom `SslContext` on netty `ManagedChannel`7

The problem
I would like to create a netty ManagedChannel which has both a default CallCredentials and a custom SslContext.
I can do the former with
and I can do the latter with
but I can't see a way to do both at once.
Solution ideas
I can see two possible API additions which would achieve this.
Make it possible to configure an SslContext on a ChannelCredentials instance. I guess this couldn't be done on TlsChannelCredentials since that's in core and can't depend on the netty SslContext, so it would have to be a netty-specific ChannelCredentials implementation. Then I could do something like
Make it possible to configure a default CallCredentials on a NettyChannelBuilder without a ChannelCredentials. Then I could do something like
From what I've seen of the source code, 2. would probably be the easier change to make, but might fit in less well with the direction you want to take the API in.
My current workaround
The workaround we're intending to use right now is to create a channel which has the correct SslContext but no default CallCredentials, and instead configure the CallCredentials directly on every stub I create. To make this easier, we'll wrap the ManagedChannel and the CallCredentials together into an object of our own so that we can pass them around together. Something like
where GrpcChannelWithCallCredentials is our wrapper class. This is a bit ugly, and involves a change in every bit of code where we create a stub, rather than being able to do it once where we create the channel.


8778
Connection closed while performing protocol negotiation for 7

when build grpc client use h2c protocol.
NettyChannelBuilder.forTarget().negotiationType(NegotiationType.PLAINTEXT_UPGRADE).build();
and build grpc server like following:
NettyServerBuilder.forPort().addService(xxx).build().start();
and then client request server , I got  grpc RuntimeException:
I know it's seem like unreasonable: why use H2C instead of H2. I only  have to say it's business needs.
So, i want to know server-side how to support PLAINTEXT_UPGRADE.
I note NettyServerbuilder has .protocolNegotiator() api, but I not found how to get the param of protocolNegotiator()


8781
Update netty to 4.1.72.Final8

What version of gRPC-Java are you using?
What is your environment?
Ubuntu 20.04.3 (Azure pipelines)
PaloAltoNetworks' Prisma Cloud Scan shows some vulnerabilities in netty-codec.
The version 4.1.68.Final and later has not any high severity issues. And the 4.1.71.Final and later has none.


8791
NameResolver Fallback9

We encountered an issue where our DNS doesn't properly propagate to certain ISP/mobile provider in some parts of the world and the and the default  DNSNameResolver returns:
io.grpc.StatusRuntimeException: UNAVAILABLE: Unable to resolve host
As a work around, I tried to implement a name resolver with cloudflare DOH, but I only want it as a back up if the default resolver fails.
To test the fallback mechanism, I set my DohNameResolver to priority 6 but deliberately return an empty list of EquivalentAddressGroup. I expect GRPC to fall back to the default NameResolver if my current resolver returns empty list of addresses, but instead it just keeps trying to use my DohNameResolver.
Is there a way to set a nameresolver fallback policy?


8792
How to selectively require Client Certificate for a few services but not require it for other services?9

In TLS mutual authentication, I am aware that ClientAuth has three modes:
But say I have two grpc service definitions. For the first one I do not want any authentication and for the next one I do want to have the strict require authentication.How to do this?
Should the server then be configured for 'Optional' mode and then an interceptor would be required to validate the client certificate based on the service being access by the client? If yes, then this does seem comparatively heavier, and also leaves more risk for error.
(Perhaps the previous paragraph make me sound like a lazy person and as outsourcing my security work to be done by someone else :p , but I am just trying to find out the best possible way to achieve this functionality and re-use existing frameworks instead of re-doing it)


8793
grpc forward9

Can grpc  forward similar to http. Now I want to control the path of the interface call based on the information in the metadata.
such as I request /greet/hello


8796
Retry policy doesn't work with coroutines9

What version of gRPC-Java are you using?
What is your environment?
MacOS, Java 11
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Here you can find a detailed explanation. I have exactly the same problem.


8797
io.grpc.StatusRuntimeException: INTERNAL: No value received for unary call9

io.grpc.StatusRuntimeException: INTERNAL: No value received for unary call
I'm getting this Exception message from my grpc unary call  while running my signed apk  .
I get this RunTime Exception Only when I Get a Release Version and not on debug mode please help me out I'm really getting frustrate
thanks for your help


8799
Android lint error when upgrade to Android plugin 4.x9

Trying to upgrade Android plugin to 4.x as described in #8421 (comment) with some minor workarounds, the build failed with a lint error:


8803
When to upgrade Netty to 4.1.72  ?0

New CVE vulnerability


8824
FIx the android-interop-testing/src/main/res/layout/activity_tester.xml file to get rid of linter messages2

PR #8821 addresses the android linter issue (seen internally in Google3 builds) by adding the tools:ignore="OnClick" property to the elements. However this might not be correct and the issue could be the line 5
This may need to be changed in order to run properly in Google3 as suggested by @ejona86


8826
rpc method name to  java.lang.Method name mapping2

Is your feature request related to a problem?
Describe the solution you'd like
Either provide API to  map from/to rpc method name to/from   java.lang.Method name or annotate the generated method with something like


8827
When the relase include Netty 4.1.68+2

Hi gRPC team,
I saw #8617 been closed.
In the latest 1.43.2, the netty version still is 4.1.63.Final (it is 4.1.72.Final in master branch).
May I know when will have a release to include the 4.1.68+ version of netty?


8829
Fix RLS config child lb config validation2

As per the spec go/grpc-rls-lb-policy-design
At config-validation time, we must construct and validate the config for the child policy, but we don't yet know the target name to use for it.  The config for the child policy will be constructed by starting with the static config from the childPolicy field, adding the field name specified in childPolicyConfigTargetFieldName, and setting the value of that field to some dummy string.


8831
Some question about UNKNOWN StatusRuntimeException3

stack info.
Hi, I used grpc to communicate between server and server. But I found that exception 'UNKNOWN' occur when server qps is largest.
So I traced that why this error happen.
I found that the status from trailers is Status.UNKNOWN. The io.grpc.Metadata namesAndValues showed that
I want to know the cause of the problem And how to solve it.
@ejona86  eric, could you give some advice?


8834
BinderTransport flow control starves unlucky streams3

What version of gRPC-Java are you using?
head
What is your environment?
Android/Linux
Steps to reproduce the bug
Create a gRPC client that maintains 10 concurrently active unary RPCs to a service that immediately responds with a payload of 1MB, for 60 seconds.
What did you expect to see?
No errors and a normal distribution of response latencies.
What did you see instead?
I believe the long tail latency / timeouts is caused by some call ids always hashing to the end of BinderTransport's ongoingCalls container. Every time space in the flow control window opens up, call ids that appear early in the iteration order gobble it all up. By the time we get to the end of ongoingCalls, flowController.isTransmitWindowFull() is returning true again and Outbound.send() just returns without making any progress.


8838
How can the gRPC client create socket connect When create stub or channel3

I want create socket connectoin when create stub or channel


8848
INVALID_ARGUMENT: Maximum Append Size of 1048576 Exceeded4

Greetings,
This could also be a feature request if there is a way to increase that limit already.
What version of gRPC-Java are you using?
1.31.1
What is your environment?
All supported OSes. I tested it on Java 8 and 11 only.
What did you expect to see?
I would expect my request to go through, considering the java gRPC implementation is the only one where I experienced that issue so far.
What did you see instead?
Steps to reproduce the bug
I have an opened PR in our library on trying to fix this: EventStore/EventStoreDB-Client-Java#129.
The test showing that exception is very related to our library. However, here's how I try to fix it when building a Managed channel:
At the stub level, I also tried to increase the inbound and outbound message sizes but with no success so far:
StreamsGrpc.newStub(channel).withMaxOutboundMessageSize(16 * 1024 * 1024).withMaxInboundMessageSize(16 * 1024 * 1024)
Thanks for your time.


8850
AndroidChannel fails to reconnect after block5

I'm having issues with Firestore (which uses gRPC) not connecting after a device is locked and was able to track it down to here.
It seems that the network callback needs to override the onBlockedStatusChanged() function and reconnect when the blocked parameter is false.
I'm seeing onAvailable() only called when my app initially starts but onBlockedStatusChanged() is called with true when it has been idle for a while and false when it comes back up. This was tested on Android 12.


8856
io.grpc.StatusRuntimeException: INTERNAL: RST_STREAM closed stream. HTTP/2 error code: INTERNAL_ERROR5

Above channel is used to create Asynchronous/non-blocking stubs to interact with the gRPC server.
Communication RPC is Server-side Streaming
Would appreciate any help on the issue.


8860
UNAVAILABLE: Unable to resolve host 6

I have used ManagedChannel for grpc call in android:
I'm getting unable to resolve host in android when I'm opening the app from the background in some time.  My network connection is good also HTTP requests are working by retrofit. The only problem is in the grpc call. After reopening the app everything is working fine as expected.
Is there any way to handle the above issue??


8866
Half-closed without a request 6

A client and server communicating over localhost.
I have a simple client and server that does nothing beside responding to an incoming RPC:
The client sends 100 RPCs with a 100ms deadline in parallel over a single channel that is in a READY state and shutdowns after all RPCs has been sent.
After the JVM has started we get a bunch of RPC with status: INTERNAL, desc: Half-closed without a request server side, client report the expected DEADLINE_EXCEEDED . So before any JIT or lazy class loading.
Re-running the client (keeping the server running) doesn't not produce those error and we can see that only onCancel gets called when the client cancel an RPC. Instead of close(Status.INTERNAL) -> onHalfClose -> onCancel that we saw before.
I guess that gRPC can't do much about the slow JVM startup but is the INTERNAL, desc: Half-closed without a request expected in those cases?


8868
Interceptors skipped when the client aborts6

I'm using io.grpc 1.43.2 on a Kubernetes Cluster with Linux, OpenJDK 11.0.13 64 bit, using Spring Boot framework. To generate Java code I used the Maven plugin org.xolstice.maven.plugins/protobuf-maven-plugin with io.grpc:protoc-gen-grpc-java 1.4.0 and com.google.protobuf:protoc:3.3.0.
My issue is that my GRPC service functions are sometimes called without executing the related interceptors first.
I created a GRPC service inside a Spring Boot application that needs some interceptors:
All 4 classes (grpcService, grpcTokenInterceptor, headerInterceptor, grpcRequestContextInterceptor) output a debug message before doing any work. Normally I can see proper order of calls in the log:
When my grpcTokenInterceptor produces an exception due to bad input, then I can see a nice stack trace which shows the interceptors:
When my grpcService produces an exception, I get this stack trace which shows how the service function gets called:
Everything is fine until here. The interceptoprs and the service are called in the expected order.
But during load-tests, my grpcService is sometimes called without interceptors. Then my class aborts with an exception due to missing data from the interceptors that have not been called. In these few cases, the log shows that the interceptors have not been executed:
This is the first message of the affected thread (after program start).
I repeated the load test several times and it seems that the issue happens only 1x on the first message per thread. But not always, only sometimes. Some threads produce the error 1x while other threads work fine at the same time.
My guess: Maybe the trigger of that issue is that the network connection got reset by the client, before the message got processed by the server. See attached screenshot of a network trace which we created on the server:
Now I'm stuck here. I'm not sure if this is a bug on server side, or client side or a misunderstanding of myself.
How can I find out why my interceptors have not been executed? Is there any condition that must be fulfilled?
I tried to find the answer in the source code but failed.
It would be great if you can help me to analyze this issue further. My biggest problem is that it happens only seldom and only during load tests. I did not find a way to trigger the issue manually.


8869
grpc Observability is experimental6

No description provided.


8874
`Class-Path` entries in the jar manifest of grpc-netty-shaded leads to unexistent file scan7

What version of gRPC-Java are you using?
grpc-netty-shaded-1.41.0.jar
What is your environment?
Windows 10
openjdk version "11" 2018-09-25
OpenJDK Runtime Environment 18.9 (build 11+28)
OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)
Problem
Library grpc-netty-shaded-1.41.0.jar has a MANIFEST.MF with bunch of Class-path entries. This caused a problem during Tomcat's TLD scan using local maven or gradle cache.  Here is my investigation of what is the cause of it:
The problem occur in Spring Boot application running within Eclipse IDE. It is about transitive dependency of the io.honeycomb and classpath available for IDE. Not sure about IDEA, but in Eclipse all dependency classes are included to classpath.
Honeycomb adds a bunch of dependencies among which is also grpc-netty-shaded-1.41.0.jar:
Project have also implicit embedded tomcat dependency via spring-boot-starter-web, as well as explicit dependency of tomcat-embed-jasper-9.0.56.jar. Since we have tomcat-embed-jasper dependency a org.apache.jasper.servlet.TldScanner will be used to scan for Tag Library Descriptors during org.apache.jasper.servlet.JasperInitializer.onStartup(Set<Class<?>>, ServletContext) call.
Scanner will load available classpath entries resolving each of them. Library grpc-netty-shaded-1.41.0.jar is found successfully in local gradle cache:
Since it is a JAR file, an additional processing applied to check JAR file's MANIFEST.MF. It will extract all the entries of Class-Path of the manifest. Here is a list of all classpath entries of grpc-netty-shaded-1.41.0.jar:
Based on each of the entry an additional candidate will be added to the scan list. URL of the candidate is build in following way:
As a result it will create a list of additional entries similar to following:
Files above doesn't exists in a context of grpc-netty-shaded, they are all resided in their own contexts within the gradle cache. As a result I've got a lot of errors:


8876
A significant percentage of Client calls fail randomly.7

Majority of the calls from client to server work just fine. However, a significant percentage of the client calls are failing on the client side with the following exception:
Both my client and server are running on the same machine with the same set of dependencies(both use grpc-java 1.43.1 , same jdk 17 etc.)
This is how the workflows looks like:
Client makes a unary request and server responds in a stream.
The request is split into multiple sub-tasks on the server. Each sub-task is actually a class implementing Callable interface. The thread on which the RPC request from client landed, invokes these list of sub-tasks classes using a ThreadPoolExecutor :
Future future = dispatchController.execute(Context.current().wrap(taskImpl));
As is evident, I have also wrapped the taskImpl(implements Callable interface) with Context method. (Based on the point 5, I trust doing this is right?)
The taskImpl(implementing Callable interface) is designed to notify the "main" thread after it finishes it's workflow, as follows:
The taskImpl also sends messages/responses to the client from the executor thread using onNext(...) method of StreamObserver.
My suspicion based on my observations is that, the requests which fail are due to this.
The point to note here is that, on the server side, there are no exceptions or errors. The error or exception is seen solely on the client side(unless I have missed something on the server side logs).
To test it further, I added the client call in a loop of 100 runs, to see how many succeed and how many fail. I would get results like this:
Either this is a bug, or I am missing something.
Any pointers on how to proceed would help.
Before raising this issue, I have also checked on the following answers by @ejona86 and @carl-mastrangelo
What version of gRPC-Java are you using?
I assume it is 1.43.1 based on the following:
What is your environment?
openjdk version "17.0.2" 2022-01-18 LTS
OpenJDK Runtime Environment Zulu17.32+13-CA (build 17.0.2+8-LTS)
OpenJDK 64-Bit Server VM Zulu17.32+13-CA (build 17.0.2+8-LTS, mixed mode, sharing)
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Don't have one right now. I hope the problem description with the workflow should be a good start?


8877
Benchmark client doesn't support taking xds:///custom-target-string as server target7

Is your feature request related to a problem?
We are trying to use java benchmark workers in proxyless service mesh (PSM) tests. PSM tests supports is developed on top of gRPC OSS benchmark framework as an additional feature.
In non-proxied PSM tests, the server target passed to client becomes a string: xds:///custome-target-string,  instead of the actual server's ip address and port in the regular benchmark. Once starting, the benchmark client running non-proxied PSM tests should communicate with a fake control plane to figure out the address of the test server.
Building java benchmark workers include xds jar is successful, but when testing, the logs from benchmark client shows that the benchmark client is expecting the server target to be in the form of socket address, it throws exceptions when given a xds:///target-string as an server target.
Describe the solution you'd like
It would be great if the benchmark client is able to take string server target, such as xds:///custom-target-string.
Describe alternatives you've considered
Additional context


8880
gRPC "StatusRuntimeException: UNKNOWN" and underlying netty throws NullPointerException8

What version of gRPC and what language are you using?
What runtime / compiler are you using (e.g. python version or version of gcc)
Java version
What did you do?
We don't know how to reproduce this issue, but it starts showing up in several production servers. The gRPC calls one component make to other components using those BlockingStub will fail, and we see the NullPointerException below every time. If we restart the component (pod), it starts working again. Usually it work fine for some time (maybe several days or weeks?), then starts failing. Once it starts failing, it will fail forever. And we don't know how long it will take to fail again.
What did you expect to see?
What did you see instead?
Anything else we should know about your project / environment?
We tried to look at DefaultHttp2ConnectionDecoder.java, line 339, it's weird this line will throw NPE, since connection is used before and java final, how could it throw NPE?


8883
JsonUtil.getObject() etc behaves differently between explicit null value and absence of the key8

(Noticed by @sergiitk in #8871 (comment)) The current implementation of JsonUtil.getObject() will throw ClassCastException if the input contains the key with an explicit null value.


8884
xds: support istio grpc-agent8

I tried to use xDS with istio grpc-agent. But it doesn't work well.
Is your feature request related to a problem?
xDS doesn't work with istio grpc-agent because not supported NameResolver of unix:///
Describe the solution you'd like
Enable xDS to handle unix domain socket with istio grpc-agent like grpc-go.
Additional context


8885
xds: 'Unsupported configurations in UpstreamTlsContext!' error on creating a channel8

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
I create a channel using the following function and then use it for communication with a gRPC service as a client.
What did you see instead?
I got an exception:
Steps to reproduce the bug
We have a golang service which uses gRPC and xDS. It creates an upstream context for a cluster as follows:
Go clients work well with this service. I've just started trying to call this service from Java using grpc-xds protocol.
When I got this error I made some research and found that before creating the SslContextProvider for the channel from the UpstreamContext, the context is checked for the presence of some fields:
So, the UpstreamContext is checked for:
ValidationContextCertificateProviderInstance has value.
None of these fields is in my  UpstreamContext. But after that, some other fields are used for creating the SslContextProvider: CertificateValidationContext.CaCertificatedProviderInstance and TlsCertificateProviderInstance, which are in my context.  So, I would be able to create the SslContextProvider if I passed the previous check.
I also noticed that all those fields are @deprecated in the proto and generated stubs, so I assumed that it could be a bug.


8886
xDS ADS reconnection should not spam logs8

As recently seen:
I'm surprised that log statement exists as a WARNING. Seems it was introduced in the large ManagedChannelImpl2 rewrite (#2530).
Before resolution has ever succeeded. There's no need for logging because the error will be communicated to RPCs. This is unlikely the case here just because "Closed by server" is probably the cycling of long-lived RPCs for load balancing
After initial resolution. This might deserve logs at some points because RPCs probably won't fail (gRPC will continue using previous data). In this case, xds client should probably squelch this "error" as it is quite normal. There could be some debate here as to whether the watchers would be notified, or whether it matters if they are notified, but overall this is quite ordinary. Any error here should be logged if re-creating the ADS stream fails (which is probably dependent on whether the stream received responses).
So that means we should make two changes (one to ManagedChannelImpl, one to xds).
I'd hope we'd never log WARNINGs like this, but it is a bit hard of a situation and I don't want us to let perfect be the enemy of good. At least for xDS, we should be able to avoid logging except when ADS stream creation fails.
I've seen #8773, but it looks incomplete, as it'd need to handle the "never received a response" case.


8887
Revert API change in {ManageChannel, Server}Provider API8

Although ManageChannelProvider and ServerProvider are @Internal, because they are not apparently internal with Internal prefix in name the API change in 881f747 and bd156f9 may still impact existing users.
cc @sanjaypujare  @ejona86


8890
xds: "NameResolver returned no usable address" if Listener/VirtualHost does not exist9

XdsNameResolver uses cleanUpRoutes() in several cases which clears the service config and passes zero addresses:
That replaces the LB with pick first, which doesn't support zero addresses, and produces a less-than-helpful error message. We may be swapping the LB on purpose to generate an error, but that is probably no longer necessary since the addition of ConfigSelector. Even if we are swapping to cause an error, we should deliver an error down to the new LB instead of the unhelpful "no usable address".
CC @dapengzhang0,  @sergiitk, @YifeiZhuang


8893
How  to enable PerfMark in grpc-java?9

I'm using grpc-java to do my project, and some perfmance jittery occur in my project. I see PerfMark is one useful tool to debug performance problem. However I did not find how to enable and ouput html report.
Could someone help explain  this?


8897
Request 'gRPC-Java to support HTTP/3'9

By gRPC-Java supporting HTTP/3 the following primary goals will be achieved:
Elimination of head-of-line issue.
Seamless switching between underlying IP infrastructure, such as Cellular and Wi-Fi media.
Support of zero round-trip connection reestablishment.
Proposed Solution
Alternatives Considered
None
Additional Context


8899
Official support for Retry policy9

Hi all,
I'm struggling to find an official documentation of Retry policy on gRPC calls, in particular, to know if is still experimental, or if is something official and supported to be used.
My current version 1.30, but I would upgrade to the latest version if is required to have this feature.
I found this repo, but it seems is just a proposal https
Can you share a documentation and point from which version we can use it, in case is supported?
Regards


8908
io.grpc.xds.XdsServerWrapperTest.shutdown_inflight is flaky0

had a surprising failure. This run was for the 1.43.x branch, but the test looks the same as master, thus filing.
Seems like the "This exception might occur in wrongly written multi-threaded tests." explanation is most likely.
If this remains the only flake we see, then we shouldn't spend too much time on it. But it is probably worth a glance and then we can close the issue. We can reopen this issue if it happens more often.
CC @sanjaypujare


8911
Dynamically apply metadata headers in dependency client calls1

Hi team!
I'm working on authentication between multiple service, basically the logic is:
Both Service C and Service D are GRPC services.
I'm the owner of Service C. I got the auth Context of user A as input parameter from Service B, and I need to verify the permission of User A in service D and act correspondingly (we have a service D client in Service C). The strategy we want to use is to get the credential we want from the auth Context parameter and dynamically assign the credential as a header of request to Service D. For some reason we cannot get this auth Context from Metadata so we're not able to use ClientInterceptor to do this and dynamically apply this header in every client call to Service D is the only way.
Could you help on how we can make it work?


8912
netty: Writes can starve reads, causing DEADLINE_EXCEEDED1

What version of gRPC-Java are you using?
1.44.0
What is your environment?
A client and server communicating over localhost.
Operating system: Mac OSX
JDK: 11.0.9
What did you expect to see?
Client in this branch not failing the majority of RPCs with DEADLINE_EXCEEDED when using Netty for transport.
What did you see instead?
The majority of call fails with DEADLINE_EXCEEDED using Netty whereas using OkHttp doesn't .
Steps to reproduce the bug
This (hacky) reproducible might indicate a potential problem where the periodic flushing of the WriteQueue doesn't happen frequently enough. This causes latency leading to DEADLINE_EXCEEDED during startup. Switching to ÒkHttp for this particular case does not cause any RPCs to fail.
On the wire with Netty multiple RPCs are batched and sent togheter whereas with ÒkHttp they are immediately dispatched.
Here is a screenshot from Perfmark using Netty:
is this a known issue or am I doing something fundamentally wrong in the reproducer?


8914
binder: Deadlock due to unexpected re-entrancy of transactions on process-local Binder1

BinderTransport locking was written under the assumption that calls to IBinder#transact() enqueued the Parcel for delivery to the peer and returned immediately. However, Android guarantees the unique object identity of IBinder instances within a process. And so when a client creates a Channel to a Server/Service within its own process, BinderClientTransport.outgoingBinder == BinderServerTransport.outgoingBinder. android.os.Binder#transact() on that object is implemented not as a system call to the binder driver but as a direct call to its own onTransact() method.
This is a problem because BinderTransport#handleTransaction() holds its 'this' lock while calling outgoingBinder.transact() in multiple places. If two peer instances of BinderClientTransport and BinderServerTransport are running handleTransaction() on different threads at the same time, they can each end up holding their own lock while waiting (forever) for the other's.
Steps to reproduce one instance of this bug
Use BinderChannelBuilder to create a Channel to an android.app.Service hosted by the same process
Have both the client and server repeatedly send messages to each other around the same time from different threads
What did you expect to see?
No deadlock
What did you see instead?
Example deadlock, via sendAcknowledgeBytes():


8916
GRPC client blocking vs async stub recommendation1

We are currently implementing a high throughput spring boot application using grpc-starter package https, this is a client server based application. We are migrating our legacy REST end points CRUD operations to GRPC. For having best design for this service, we need help with following questions:
If a single immutable GRPC blocking stub client instance is accessed by multiple  threads, will this be a blocking call i.e. only one RPC call is executed at any given time.
As per the google GRPC IO docs it is recommended not to use blocking stub to parallelize RPC call. Is this highlighting the case of multiple RPC call on same client object. https
Will the blocking stub use new TCP connection for every call or same TCP connection is reused.


8917
GrpcCleanupRule errors out  when retrying tests1

When GrpcCleanupRule is used as a class rule and surefire/failsafe maven plugins are configured to retry failing tests, the rule throws an exception on the second run of the test with the following stacktrace:
What version of gRPC-Java are you using?
What is your environment?
Linux/Java 8
What did you expect to see?
Expectation is for the rule not to throw when applied multiple times
What did you see instead?
An exception unrelated to the test is being thrown
Steps to reproduce the bug
Create a small maven project with a flakey test class, and enable surefire retry feature (see the attached project)


8919
io.netty.handler.codec.http2.Http2Exception: Header size exceeded max allowed size (10240) using NettyChannelBuilder1

What version of gRPC-Java are you using?
What did you expect to see?
As discussed in a previously closed issue #4284:
The HTTP/2 spec Settings section says:
What did you see instead?
While #4284 and netty/netty#7825 addressed the default limit enforced by HpackEncoder, there is one more place in gRPC-java that specifies the header limit:
which leads to the value 10240 as a maximum allowed size.


8925
servlet: UndertowTransportTest.clientCancelFromWithinMessageRead is flaky2




8927
Exception while executing runnable io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed2

What version of gRPC-Java are you using?
What is your environment?
Linux in Docker
What did you expect to see?
What did you see instead?
(No further stack trace to indicate the cause)
Steps to reproduce the bug
I've been using GRPC for a while now, I saw this error when I started to do "streaming".  The weird part is the messages are successfully received and processed on both ends, but this error comes up on the client and no error indicated on the server.
I built a channel like this (I tried to the point where there is no interceptor code so I got the error you see above) but I do use
I'm tried to see if I can create a small test scenario for this in https  which I have a test for but it is not manifesting


8928
ManagedChannelImpl pendingClientCall rejectedExecutionException2




8930
UNAVAILABLE: Connection closed after GOAWAY. HTTP/2 error code: NO_ERROR3

What version of gRPC-Java are you using?
What is your environment?
Client: Java 8 running on 64bit Amazon Linux/2.6.6
Server: AWS Fargate 1.4.0, JVM version: 1.8.0_322
Load Balancer for Fargate Server: AWS ALB HTTP/2 enabled
What did you expect to see?
No GOAWAY errors
What did you see instead?
We were seeing a lot more GOAWAY errors before we put the retry policy in place, but are still seeing enough errors to be concerned.
Are there any other things we can try to suppress this issue?
Thank you!


8931
binder: Cross-process calls against a shutdown() Server do not fail fast as required by AbstractTransportTest3

What version of gRPC-Java are you using?
master
What is your environment?
Android/Linux
Steps to reproduce the bug
Declare an Android Service hosting an BinderServerBuilder-built Server in process A
In a second process B, create an BinderChannelBuilder-built Channel to that Server and send a call that completes successfully. This causes the Service to be bound and a Server to be created.
Invoke Server#shutdown() in A
In a process other than A, create a second BinderChannelBuilder-built Channel to the Server and send a call with no deadline.
What did you expect to see?
According to AbstractTransportTest#serverNotListening(), a ManagedClientTransport start()ed after its Server is shutdown() should report transportShutdown(UNAVAILABLE) within 5 seconds. Based on this, I expect that a new call to a shutdown()-but-otherwise-healthy Server would fail quickly.
What did you see instead?
The second call hangs forever.
Discussion
The second BinderClientTransport's call to bindService() succeeds, returning Android's cached copy of "hostServiceBinder" without any interaction with process A.  Because client and server are in different processes, the second BinderClientTransport's call to transact(SETUP_TRANSPORT, ... FLAG_ONEWAY) is dispatched asynchronously -- it returns true immediately but, later on the server, LeakSafeOneWayBinder#onTransact() returns without processing the transaction because it has been detach()ed by shutdown(). The second BinderClientTransport is stuck waiting for a SETUP_TRANSPORT reply that will never come.
AbstractTransportTest#serverNotListening() only passes today because client and server are in the same unit test process, making the client's LeakSafeOneWayBinder#onTransact's call synchronous and giving the client immediate feedback about its failure.


8935
Netty Shaded high cpu utilization3

Hello,
In one of the service while using the netty-shaded (ManagedChannel)  to build the channel we have observed a high cpu utilisation.
While running the jprofiler on the service we have found that epollEventLoop(epollWaitNoTimerChange) is consuming most of the cpu (in seconds).
The problem was resolved when we moved to netty library (NettyChannelBuilder) instead of netty-shaded (ManagedChannelBuilder).
Netty shaded version used that caused high cpu: 1.39.0
implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
netty (we use this to replace netty shaded)
implementation "io.grpc:grpc-netty:${grpcVersion}"
JVM version : openjdk:8u141-jre
Can anyone please help in clarifying this issue?


8936
grpc-bom should manage protoc-gen-grpc-java artifacts?3

What version of gRPC-Java are you using?
1.44.1
What is your environment?
What did you expect to see?
The grpc-bom managing the protoc-gen-grpc-java artifacts with exe type and os classifier.
What did you see instead?
The grpc-bom managing protoc-gen-grpc-java with pom type. Is there a use case for this? It is effectively empty: https
Steps to reproduce the bug


8937
Who's Using grpc-java?3

No description provided.


8945
Measuring gRPC-side queueing time4

I'm trying to measure the queuing time inside gRPC to disambiguate between a slow service, a slow network, and a slow client.
We're setting server-side max concurrent calls per stream to some value (that we think is appropriate given the machine size and work), but we sometimes have more outgoing requests on the client than that. In that case, gRPC has to wait for an HTTP2 stream to become available, which it does by internally queuing the calls. We'd like to detect / measure that so we have more visibility into where the latency is introduced.
From reading the code and running some experiments, I've not been able to do that with current gRPC (we're on release 1.41.0). I used a simple echo client-server test, where I artificially restricted the server to a single call per stream, the client to a single channel, and also added a server-side delay of 1 second. This clearly shows client-side queueing of calls, where the call is started immediately, but only executed once the previous call completes. This all works as expected.
I then investigated whether there's any way to observe when the outgoing message is actually sent.
In principle, it looks like the onReady handler could cover this case - when an HTTP2 stream becomes available, it gets assigned to the NettyClientStream, which in turn triggers an onReady signal. However, this doesn't make it through the RetriableStream - release 1.41.0 mentions #7089, which seems to have changed at HEAD; I didn't track it down but disabled retries for my tests. However, the onReady signal is also suppressed for calls that only have a single client message in ClientStreamListenerImpl. This is consistent with the isReady documentation, which explicitly says that a single-message call may always return false for isReady.
It seems like onReady might work for client-streaming calls, but we need this for unary calls.
There's also the StreamTracer interface, but the methods aren't called at the right time. In particular, the outboundMessageSent method - despite what the name seems to imply - is called before the message is actually sent on the network. In fact, it's called before we even have an HTTP2 stream available.
Any suggestions?


8947
Istio pod cannot connect to another pod by gRPC4

I´m having problems to understand why my istio pod service is not able to connect by gRPC to another pod.
I can see the communication from pod A y able to reach envoy sidecar proxy of B, but this one never route the request to the service container.
Here the log from the envoy sidecar of B
I tried to make a curl form the service A to service B and I´m able to pass through the envoy sidecar of B, but when I try by gRPC I got stuck in proxy sidecar.
Any idea what to look?


8949
Add support for HAProxy Protocol ("proxy protocol")4

Is there a way to add a CustomHandler to ChannelPipeline using NettyServerBuilder ?
I initialize my GrpcNettyServer by below:
All I want is to get the channel from the server and add a custom handler to the channel pipeline.
Does NettyServerBuilder supports that option ?


8950
XdsNameResolver blindly propagates XdsClient errors5

If a watch in XdsClient fails, XdsNameResolver will propagate the error directly to the channel without adding context and without setting a proper status.
And accompanying RPC failures:
That RPC failure is very bad, because it isn't clear it is from XdsNR and should be UNAVAILABLE.
As seen in b/221844501.


8952
Priority policy should delay picker updates while updating children5

To allow localities moving priorities within xDS atomically, when processing a config update, the priority policy should inhibit upward picker updates of its own until it has provided the configs to all of its children. Children update their picker synchronously when receiving the config update, so after passing down the new configuration to all children the priority policy will have updated pickers for each and should at that point propagate its own picker update upward. This was decided in the cross-language TL discussion on 2022-02-11.
We need to audit the code to ensure existing LBs update their picker synchronously, and tweak the docs. I expect all LBs are already doing this, but it is worth the check.


8954
"jaxrs-resteasy-eap" with "withXml" not generating annotations for XML5

Hi,
we have an API which supports both xml and json - however only the json annotations are added.
Maybe our configuration is wrong? I wasn't able to find a related issue.
Kind regards
Timo


8957
grpc compiler can't compatible with MAC M15




8981
Netty 4.1.75.Final HTTP/2 connection closures8

What version of gRPC-Java are you using?
What is your environment?
macOS
What did you expect to see?
After bumping Netty from 4.1.72.Final to 4.1.75.Final I'd expect tests to pass.
What did you see instead?
Broken tests:
GrpcHttp2RequestHeaders most probably contains incorrect implementation and unnecessary guards against accessing pseudo headers, which are not specified by Netty and are in fact used by the contains method.


8983
Examples fail with MinGW due to lack of "use_default_shell_env = True"8

What version of gRPC-Java are you using?
master
What is your environment?
Windows 10 with MinGW via MSYS2
What did you expect to see?
What did you see instead?
Steps to reproduce the bug
Similar to rules-proto-grpc/rules_proto_grpc#181, issue is resolved by passing use_default_shell_env = True to the ctx.actions.run that runs protoc in java_rpc_library, so that PATH can be inherited from the host and libstdc++-6.dll can be found in C:\msys64\mingw64\bin.


8985
Add a class for method metadata8

Is your feature request related to a problem?
The problem we have is that it is useful for us to pass around information on essentially the metadata of a method type, but don't have a class that is quite correctly scoped. For example, we have metrics that are emitted with information on what methods are being called and we want to tag them with .e.g. the service name and the method name. While this information is available from the method descriptor, it does involve some amount of manipulation to pull out the separate parts.
Describe the solution you'd like
It would be good to have a 'metadata' class for methods, something like:
Describe alternatives you've considered
I think the alternative is to either implement such a class ourselves, or implement the functionality of the methods in-line when needed.
WDYT? Is this a class you would be willing to accept? I am happy to contribute it (to the API module?).


8988
Thanks for clarifying! If a single version is desired, then a bracket isn't necessary. Your builds will work exactly the same irrespective of API stability issues if you remove the brackets.8

Thanks for clarifying! If a single version is desired, then a bracket isn't necessary. Your builds will work exactly the same irrespective of API stability issues if you remove the brackets.
Nope. They are treated differently by Maven. I made the change on purpose. 90db93b
A bare version suggests a version, but upgrading and downgrading are allowed. It is essentially unrestricted. A []-encoded version pins a version.
To demonstrate, take a look at this pom:
If you try to build, you'll get an error because of the version ranges. Without the version ranges this would have compiled (but may have behaved strange at runtime):
Or consider this pom (grpc-core instead of grpc-netty as before):
The normal version resolution order would have chosen grpc-core 1.39.0, since that is the first in the breadth-first search. But maven is selecting 1.38.1 because it has to select a version in the "range":
All that said, I did that before BOMs were really a thing. The behavior is different with BOMs.
Originally posted by @ejona86 in #8337 (comment)


8990
onClose in SimpleForwardingClientCallListener is not called even once for grpc stream method9

What version of gRPC-Java are you using?
What is your environment?
What did you expect to see?
When ForwardingClientCallListener.SimpleForwardingClientCallListener used in impl of ClientInterceptor, method onClose should be called at least once for streaming server method at the end (Or not?). onClose is correctly called once for unary calls.
If I have to use any other ClientCall.Listener tell me which one please and close this issue.
What did you see instead?
onClose is not called even once for grpc stream method
Steps to reproduce the bug
Method like rpc SayHelloStream (HelloRequest) returns (stream HelloReply) {}
ClientInterceptor impl with ForwardingClientCall.SimpleForwardingClientCall and ForwardingClientCallListener.SimpleForwardingClientCallListener with breakpoint somewhere in onClose
Any grpc server logic that work properly with method from 1.
Any client config with active interceptor from 2.


8991
ServerBuilder should expose keepalive methods from NettyServerBuilder9

Hello,
We've been encountering issues with connections getting closed. Eric Anderson recommended adjusting keep-alive settings on the server and client (here). However, when I went to configure these settings, I couldn't find any documentation on it or examples on the grpc kotlin side. Could you help point me to how we can configure the server-side options mentioned in the keep alive docs?
We've also asked this in grpc-kotlin here and thought that it would be helpful to ask on the java side as grpc-kotlin has the same API for server building as grpc-java. You can find further context in that issue as well.
@ejona86 mentioned that this might be related to
Looks like the keepalive API is only on NettyServerBuilder, not ServerBuilder.
Please let us know if you need any further information and we'll get that to you ASAP!


