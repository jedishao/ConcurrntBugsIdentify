2001
timeout wrapper for Future · Issue #2001 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I often use this method to limit future execution time.
Does it make sense to add something like this in Future interface?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2005
provide "putHeader" for HttpClientOptions and RequestOptions · Issue #2005 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With "HttpClientOptions" we can set for example "setKeepAlive" or "setTryUseCompression" which results in putting appropriate headers for all requests . Would be nice to provide a  "putHeader"-Method to put common headers for all requests.
For example, I want to set this:
or this:
With this I can reuse my headers for different requests.
Both, "HttpClientOptions" and "RequestOptions" has no "putHeader"-Method. So I am forced to write my headers within each "HttpClientRequest" which can not be reused.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2007
Packet lost in Http1xOrHttp2Handler · Issue #2007 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If we send an http request beginning with "P" (i.e. a POST, PATCH or PUT) split across two packets where the first packet has data length of 1 byte and the second packet contains the rest of the request, then the Http1xOrHttp2Handler reads the 1 byte packet, and then throws it away.
When the second packet comes in it does not aggregate the 1 byte that it previously read with the second packet, resulting in the method being received as "OST", "ATCH", or "UT".
A workaround is to disable the Http1xOrHttp2Handler with:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2010
Enable `permessage-deflate` and `deflate-frame` compression on WebSockets · Issue #2010 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Enabling compression on WebSockets is a very desirable feature for applications with a lot of repetitive data over WS. And modern browsers support WS compression.
Vert.x uses Netty 4.1 which has support for permessage-deflate and deflate-frame compression extensions for WebSockets for its WS implementation, yet Vert.x does not give one any mean to enable them (or at least I haven’t seen a way to do it).
Is Vert.x using Netty’s implementation of WebSocket, or does it make its own implementation? Would it be possible to use Netty’s compression extensions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2011
better error reporting of application logic within stacktrace · Issue #2011 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have some code executed within a vertx:
and when starting the vertx then this stacktrace occurs:
After searching, I found the reason why my vertx throws this stacktrace: Within my application logic, I have called MyEnums.valueOf("TEST") which should return "MyEnums.TEST". However, I did not have the Enum "TEST" declared before, so vertx closed with a stacktrace. After putting the Enum "TEST" within my MyEnums, vertx starts normal and it works.
The bad thing is, why does the stacktrace does not show the error of my application logic?
Because of the event-loop? Would be nice if I can trace my errors within the stacktrace.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2012
Race condition in AsyncFileImpl writesOutstanding · Issue #2012 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If an AsyncFileImpl is written to from a thread different to the context that created then the long counter writesOutstanding can get into an invalid state. This is because the counter is updated from both the caller's thread and also on the context when a write is complete.
Fix is to use an AtomicLong for writesOutstanding:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2013
H2C upgrade failure HTTP/1.x response should not be processed by the server handler · Issue #2013 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2014
H2C upgrade should set the HTTP/1.x host header · Issue #2014 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2018
provide new property for sequential work of "CompositeFuture.all" · Issue #2018 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please provide a optional property for "CompositeFuture.all" which makes the Composite of a list to run sequential (from first index to last index of the list) or in parallel (default).
For example:
This eliminates the burden to use chaining compose with callback hell..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2020
Expose AsyncMap keys, values and entries · Issue #2020 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, AsyncMap lets you get/put/remove/replace entries asynchronously.
In some cases, you also need the ability to get the keys, values or entries (see @cescoffier 's comment in vert-x3/vertx-infinispan#35 (comment))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2022
Exception running project with 3.4.2 · Issue #2022 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was just running a vertx project we have with the new 3.4.2 version and I got this exception:
startup failed:
Is there any breaking change in the new version?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2026
Http2Settings.hashCode() does not conform to contract. · Issue #2026 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of Http2Settings.hashCode() does not conform to the contract where if 2 instances return true from equals they must have the same hash code value.
The primary issue is that it uses Object.hashCode() as its base value.  It also does not include a hash of headerTableSize in its value (this property is checked by equals), though strictly speaking the contract does not require this.
The following groovy script shows the issue (the second assert fails):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2027
HttpServerRequest exception handler is not called when the connection is closed · Issue #2027 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpServerRequest extends ReadStream<Buffer>. When there is an ongoing file upload and the connection closes abruptly, the exception handler on the HttpServerRequest should be called to signal that the stream an error occured
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2028
DNS query fails for CNAME results · Issue #2028 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using the vertx http client with:
Fails with:
Debugging shows that the netty DNS resolver will simply loop on CNAME records because it will try to resolve the original hostname rather than the cname at http
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2031
Include netty dns resolution fix into the vertx build · Issue #2031 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As asked by @vietj, I'm starting the issue to track inclusion of netty dns resolution fix into the vertx build.
Details at the end of #1525 and also here: netty/netty#6844 and netty/netty#6885.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2032
FileSystem methods do not accept options · Issue #2032 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to place an uploaded file at a certain location, replacing any file that may be present there.
Unfortunately, FileSystem::copy only accepts a from, to and handler, it does not allow me to pass Java's CopyOptions. This means I have to perform 3 asynch calls (check existence, remove and copy) rather than a single one for my use case.
Suggestion: add a way to specify additional file system options, or provide a replace and deleteIfExists method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2037
When handling message replies, reply.cause() should return type of ReplyException instead of Throwable · Issue #2037 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently:
As you can see, we have to cast the Throwable to ReplyException in order to extract the failure code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2038
TrustOptions\PemTrustOptions does not provide an equals() method · Issue #2038 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
when validating equality of two instances of HttpServerOptions, if PemTrustOptions with the same values are added to both instances, the assert fails in /io/vertx/core/net/TCPSSLOptions.java at
regardless of the fact that both instances are configured with the same certificate paths.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2039
question about DNS AddressResolver · Issue #2039 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the class io.vertx.core.impl.AddressResolver of version 3.3.3，If I don't set the dnServers in AddressResolverOptions, it will invoke the DnsServerAddresses.defaultAddresses() of netty to get dnsserver
of system. In  the class DnsServerAddresses, after fist time it got dnsservers from sun.net, it will not change dnsserver any more during runtime, because it's final: private static final DnsServerAddresses DEFAULT_NAME_SERVERS.
So if  I change the dnsserver in /etc/resolv.conf (linux) during runtime, the vert.x will not change dnsserver in it's cache, so what do you guys consider about this design, for Asynchronous ？for performance?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2042
io.vertx.core.AsyncResult.map(Function<T, U> mapper) · Issue #2042 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
maybe throw Ex, so we must try, but Future extends AsyncResult catch the ex in the Future.map(Function) .
I think AsyncResult.map(Function) implement should try catch Ex, it can help we help happy coding.
It overshadowed the possibility of a program failure when we used AsyncResult.map no try catch Ex, because most AsyncResult object also is Future in Vertx.
I use the util method to solve:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2043
MIT licensed code · Issue #2043 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
shouldn't the <licenses> section in pom.xml contain also MIT license since there's a MIT licensed code in io/vertx/core/http/impl/cgbystrom/ ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2046
WorkerExecutor should use the right executor when the context queue is not empty · Issue #2046 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2048
AddressResolverOptions.addServer not showing in logs nor seeming to resolve addresses · Issue #2048 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've a Launcher class which extends io.vertx.core.Launcher. In an overridden beforeStartingVertx(VertxOptions) method, I add a DNS address for a Consul server:
My logs show this is being executed (well, the logging call is anyway!):
If I try to set the location of a server, say a kafka bootstrap server using the vertx-kafka-client, like so (I've a wrapper around the options but if I specify the actual address of the server there is no issue):
I have four questions disguised as two:
Why is the DNS resolver that I added not showing up in the logs? Am I correctly adding it?
Without getting into the kafka-client internals, is this the correct way to specify the address and can Vert.x deal with such addresses? Or do I need to format it differently?
Any help or clarification would be hugely appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2049
IllegalStateException Unknown deployment when passing deployment ID to undeploy() method · Issue #2049 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking through the logs of a Vert.x application, I noticed the following exception when undeploying verticles (it's the same exception for all 3):
However, they are all deployed and have a deployment ID:
The deployment ID's are stored in a synchronized map, with the verticle class as the key and the the deployment id as the value. When queried, it shows that they are correctly stored:
Prior to the call to endeploy, if I check which verticle is being undeployed, I get can see that the valid deployment ID is being passed into the call to undeploy:
Here are the relevant bits of code:
Please excuse all the System.out.println()'s, I've thrown them in there to help me get a better idea of what's going on and should probably record this info in the logs. But for now, I'd just appreciate any help understanding why Vert.x is saying the deployments are unknown? Whether it's a problem with my code or an actual Vert.x issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2050
Jackson 2.8.x Support · Issue #2050 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The project currently uses Jackson 2.7.4 and I was wondering about the possibility of upgrading to something in the 2.8.x line (e.g. 2.8.9 is the latest as of 7/13). I intended to do a quick poc by cloning the repository; unfortunately, I could not get it to compile (mvn clean install) either at the head of master or on 3.4.2 (latest release) -- w/o any changes.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2051
overriding clusterHost and clusterPort on start · Issue #2051 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've a Launcher class which extends io.vertx.core.Launcher that changes the vertx options in beforeStartingVertx(VertxOptions) method including setClusterHost and setClusterPort.
what happens: these settings are ignored and it falls back the host with getDefaultAddress() from BareCommand.java
in our cause this is always resulting in choosing the wrong interface
would be nice if it would take the host and port from the options if set before handling null and falling back to the "default address"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2054
Vertx-web-js : SockJSHandler error while calling bridge function · Issue #2054 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm on Windows and tried to launch a server.js in command line and in IDE with maven dependencies, but both failed with the same error.
Here is the server:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2058
CompositeFuture forces you to use raw types · Issue #2058 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are currently three methods in CompositeFuture which force you to use raw types:
The causes compiler warnings to appear all over the place:
It should be possible to rewrite the method signature to e.g. io.vertx.core.CompositeFuture.all(List<Future<?>>), which solves the raw types warning, but is not compatible with the previous declaration and this would break compatibility.
However there could be be a set of workarounds. One could be simply adding new methods like e.g. allOf. Or putting everything in a new interface TypedCompositeFuture, which would avoid the collision.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2059
WebSocket request options not honored · Issue #2059 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Connection fails with because HTTP upgrade request is sent as clear text.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2060
ConnectionManager: Connection pool always reached max wait queue size · Issue #2060 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My project use webclient to make http request.  When under a large number of request running for hours, it's always reach a wrong state at end, that no request will send indeed while always logs with: Connection pool reached max wait queue size.
here is my code:
I dumped the stack and found the connCount is equals maxPoolSize while no connect available. so I think maybe the Http1xPool can‘t create new connection because connCount is not really response to the connection pool size.
here is some stacktrace:
The reason cause the fail of create connection.
The following is my guess.
When call createNewConnection, the connCount++， but the connection create failed，then function connectionFailed was called where connectionClosed() will be executed in context.executeFromIO, so connCount can decrease back.
context.executeFromIO will check the current Thread ，if not VertxThread， cause an exception， that may lead to a result: the connectionClose would not be called and connCount can not decrease back，This means that the connCount will increased without add a new connection in the connection pool, at last, no connection can be poll, no connection will be create, all waiter go to the queue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2063
Let users connect with absolute websocket urls · Issue #2063 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As a matter of usability, the HttpClient should let users connect with absolute websocket urls (ws:// or wss://)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2065
Vert.x ReadStream hangs in paused if WriteStream fails · Issue #2065 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have the following usecase for a vert.x aplication:
write a REST handler for a GET request
in this handler copy data from a ReadStream onto the response
This looked straight forward, in the handler I would create the ReadStream and then use a Pump to pipe the stream onto the response (WriteStream).
I noticed however that it can happen that the client closes the HTTP connection to my handler while the pump is still active. In this situation I had expected an exception on the WriteStream instance to occurs. However this is not the case, instead the WriteStream#writeQueueFull method returns "true" which sets the ReadStream into paused mode. It now waits for a drain event, but this event is never sent, because the write connection has been closed. The result is that over time the number of open (paused) ReadStreams grows, eventually generating a leak.
What is the correct way to handle this situation?
The first aspect that looks strange is that there is no exception on the write stream. But even if I were able to figure out the error situation (e.g. by listening on the close event on the response), what am I supposed to do with the ReadStream? It cannot be canceled but it also cannot stay open. The approach I can think of is to pump its content into a nil stream (i.e. consume it but ignore its content).
Overall this makes the complete pumping process pretty complicated.
The example below shows a simple testcase to reproduce the issue. The main method makes a request against a verticle and closed the connection immediately.
On the server (i.e. in the verticle) no exception is triggered, instead the ReadStream is locked in paused state.
The output of the sample code is:
request
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2067
HttpClientResponseImpl doesnt log when no handler is set · Issue #2067 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When HttpClientResponseImpl#handleException is called while treating a http response, if an handler was not set, the exception is completely hidden from the user. Please compare
please see this repo for a test case:
In our case, after the body handler has completed we continue with another future to do more work but
there is a nullpointer exception and we dont reach that code and couldnt understand why because there was no trace of the exception anywhere.
Other than this, thank you for the great work, we love to work with vertx at Akio.com :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2068
A couple of fixes on http exception handler called on close · Issue #2068 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Make the HttpServerResponse#exceptionHandler is called when the response is closed before the end of the stream.
Avoid the HttpClientRequest#exceptionHandler to be notified twice when connection is closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2070
Setting number of requests sent from an HTTP handler to the event bus · Issue #2070 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
can you please help me figure out how to increase the number of requests processed in parallel by a particular HTTP handler? In all my tests it seems to be limited to 5 regardless of the size of the event loop or the worker pool.
I have an http server:
When sending many requests in parallel I see that at most 5 of them are dispatched to the verticle via the event bus in parallel. It seems like a first response from the verticle/event bus must be received before the next request will be sent to the event bus/verticle. I.e. I see the output like this:
The client used to run the test is like this:
Thanks a lot in advance
Boris
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2079
JSON message codecs creates unnecessary intermediate String · Issue #2079 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonObjectMessageCodec and JsonArrayMessageCodec use intermediate String for encoding and decoding. They should directly encode to and decode from Buffer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2086
Weird connection state if response body sent with NO_CONTENT · Issue #2086 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is some snippet of example code
This seems to make subsequent connections hang or unexpected results.
Vert.x should probably just throw an exception if a body is sent to the response when the status code is NO_CONTENT ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2088
IllegalStateException when using sendStream · Issue #2088 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I've got issue with using sendStream to forward request to another service. It results in IllegalStateException: Request has already been read
Code to reproduce:
Result:
Link to post at Google Group: https
Thanks,
Maciek.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2091
Allow to set null handlers on Http(Client/Server)(Request/Response) objects after completion · Issue #2091 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: setting an handler on these objects after they are ended will throw an exception to signal an error, however it can be desirable to set a null handler after completion (for instance stopping a pump will set null handlers) and in this situation we should be more tolerant and accept setting null handlers.
changes: update various handler setter method to accept null values after completion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2092
Are there any plans on supporting Clojure in Vert.x 3? · Issue #2092 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I have some Clojure code that I would like to do some basic web stuff with.  I seem to recall in the past Vert.X supported it as a first class citizen...Is there a plan to bring that back?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2093
FutureSequence · Issue #2093 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I found it arduous to get the result from a call to CompositeFuture.all.
I've written a class in kotlin which allows me to easily get a result out of a list of futures (similar to scala Future.sequence).  The main feature I wanted here was to be able to call .map(mapper: List<T> -> R) or .compose(mapper: List<T> -> Future<R>) on a future created from a list of Future<T>, rather than  .map(mapper: CompositeFuture -> R).
Is this something for which it would be worthwhile for me formalize, test, convert from kotlin, and create an MR?  I find this functionality extremely useful, but I imagine it may have been intentionally foregone due to performance and memory implications.
source
Kotlin snippet:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2095
Add the possibility to read forms atrributes on the fly · Issue #2095 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
it could be usefull to retrieve forms attributes before the whole read of the request for doing server side validation.
For exemple if you a html forms whih mixed file and simple field, we need to wait the whole read of the request (field + file) before acces simple field (via getFormAttribute), so if the user upload a big file and for some reason the validation of one field is bad the server need to retrieve the whole file before begin the validation.
i have started a discussion with some example on google groups :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2096
queryString key should be case sensitive · Issue #2096 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
given url /test?key=v1&Key=v2&KEY=v3 it should return different value as below, but now it all returns v3
6.2.2.1. Case Normalization
When a URI uses components of the generic syntax, the component syntax equivalence rules always apply; namely, that the scheme and host are case-insensitive and therefore should be normalized to lowercase. For example, the URI is equivalent to http://www.example.com/.
The other generic syntax components are assumed to be case-sensitive unless specifically defined otherwise by the scheme (see Section 6.2.3).
The code causing issue is HttpUtils.params, it should not use CaseInsensitiveHeaders
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2098
Terminating vertx under Windows · Issue #2098 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When launched as a background process, the vertx application cannot be gracefully terminated under Windows. For some reason only killing the process works, but that skips any shutdown hooks. This means that the Launcher start/stop commands cut major parts of the functionality described in the core manual.
The run command allows to gracefully quit the process by issuing ctrl+c within the cmd window it was run from. However, the process spawned by it is also not terminable from outside, e.g. taskkill /pid.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2099
Api on AsyncResult.map is wrong · Issue #2099 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation on AsyncResult.map contains the following passage:
If the {@code mapper} throws an exception, the returned future will be failed with this exception.
When this async result is failed, the failure will be propagated to the returned future and the {@code mapper}     will not be called.
This is simply not true, throwing an exception in the Mapper results in an asyncresult that never completes and therefore breaks the complete flow. This passage should probably be removed from the docs or map should offer the advertised behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2100
HttpClient allow dangerous header values · Issue #2100 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Vert.x http client accepts header values that contains LF in it. If a program were to add an extra header based on user input without proper data sanitation this could allow an attacker to perform header injection.
Here is a working example:
This will produce the following input:
It seems that Vert.x does't ask Netty to perform header validation:
When passing true in the validateHeaders parameter to DefaultHttpRequest's constructor an exception is then raised:
Is there any reason why Vert.x is not asking Netty to validate the header of the client request?
If not, I'll create a PR to fix this issue that we consider to be a SSRF vulnerability.
What do think?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2101
HTTP client connections should be pools per host and per virtual host · Issue #2101 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using an HttpClient for requests to different IPs with the same host header set, the connection pool only establishes one connection to one IP because the ConnectionKey for pooling only includes the host header (as peerHost). Also see this mailing list conversation.
To allow for connections to multiple IPs using the same host header, the peerHost could be e.g. IP + hostname.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2104
Problem handling SSL Exceptions with ClientAuth.REQUIRED · Issue #2104 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If one set NetServer instance to require SSL Client Certificate authentication and client does not send it netty throws exception that vert.x does not handle cleanly even if one registers exception handler for NetSocket.
Initially encountered this issue while writing SSL test cases for vertx-mqtt.
If one changes code snippet to use ClientAuth.REQUEST then you can see openssl's s_client nicely connected.
What I would have expected:
No exception shown in logs
Ability to catch failure case for unit tests
Socket closed is kinda OK but now it was completely invisible for application thus hard to make unit tests for it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2109
Fail explicitly when a client HTTP request is made with H2 and ALPN disabled · Issue #2109 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2110
DnsResolverProvider fails on Android · Issue #2110 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Note: I originally posted this in vert-x3/vertx-proton#54, but was told that issues with DnsResolverProvider should go here.  Note further that I'm using io.vertx:vertx-proton:3.4.2.
never reaches the println.  (This should perhaps be a separate issue, but note that CACHE_DIR_BASE_PROP_NAME needs to be set, on Android, or things fail, too.  Note further that I'm using "images.google.com" as an example - it produces the same errors as I see when I give the hostname of our company's test server.  Port 5671 is not open on images.google.com, but since the failure of the DNS resolution is the issue I'd like to point out, it doesn't matter.)
Instead, it yields the following error:
Something about the ADDITIONAL DNS section only having a period for the name, or something.
Now, when I comment out that line near the top of the code:
things work fine.  (In the case of Google, the connection eventually times out, as expected.  On our test server, the connection succeeds, and everything works great.)  I therefore suspect that something is wrong with your DnsResolverProvider when used on Android.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2111
error NoClassDefFoundError when running verticle from command line · Issue #2111 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i tried to run my verticle from command line
any idea what's wrong ? thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2115
WebClient: downloading url to file signals completion prematurely · Issue #2115 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I download file using BodyCodec.pipe(file) and try to read it right after completion, I sometimes read empty file (the data is not here).
Following code reproduces bug (it's not 100% reproducible, for me it fails only on heavily loaded CI):
It calls stream.end() which underneath calls AsyncFileImpl.close() and then signals completion right away, without waiting for close to finish. In fact this creates race condition between handler and file closing. So code which listens for completion event may receive this event before close() takes place (which means the data in file will be truncated).
I fixed it locally by making my own copy of StreamingBodyCodec which signals completion to my code after file is closed via separate future (which is very hacky). After this fix bug stopped reproducing. But it would be nice to have it fixed in master as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2118
Feature request: Expose netty's SSL Handshake Timeout to the Vertx user · Issue #2118 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
This is a feature request; it will be nice to be able to set the ssl handshake timeout.
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2122
WriteStream is missing callback for asynchronous end() completion · Issue #2122 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So far WriteStream has only  synchronous 'end()` methods:
I.e. after I called end() it is safe to assume that stream is actually closed.
This means that AsyncFile cannot properly implement this interface cause in order to end asyncfile's writestream you need to close file, which is asynchronous operation. This causes troubles when you download url to file and try to use file immediately after receiving download completion callback: web-client #691
Suggestion:
Add method void end(Handler<AsyncResult<Void>> handler) to WriteStream interface (with default implementation to not break existing code).
Make AsyncFile use this method for asynchronously closing underlying file.
This will open a way to actually fix problem with web-client (by enabling StreamingBodyCodec to wait for actual end() completion event.
I made aforementioned changes locally. Can open a PR. Need a comment from maintainers whether it's a proper fix or I am missing something.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2124
Httpserver added idle timeout, but the channel also may not be closed · Issue #2124 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We found this problem in a production environment, and frequent under the mobile client.In positioning, we can easily simulate and reconstruct the problem, steps are as follows:
The service side httpserver add idle timeout : new HttpServerOptions () setIdleTimeout (180);
Clients use Telnet connect http server : Telnet 10.25.76.170 8802
To disable the client network card, this time the telent service disconnected, and then enable the client network card;
After 180 seconds, on the server can also see a link from the client, for example :
TCP 0 0 10.25.76.170:8802 10.25.76.15:61703 ESTABLISHED
Problems occurred in the HttpServerImpl, in support of h2c process, the risk of connection timeout does not shut down. Now, we disabled H2c (Settings - Dvertx disableH2c = true) to circumvent this problem, the effect is very obvious in mobile wireless environment.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2126
FileSystem readDir does not list all entries when resolving from Classpath · Issue #2126 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem is: FileResolver copies-out resources from Classpath to a temporary directory in filesystem (i.e. .vertx/file-cache-[uuid]/... seen as a cache).
If you first access a single file, then only this one file is copied-out. A dir-listing hereafter then only lists this single file. Vertx seems to rely on the cache content here.
If you do list the directory contents before accessing a single file, i.e:
then you see the the whole subtree copied-out of the classpath.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2127
mysql connection aborted  · Issue #2127 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I has test with that code:
Connection closed automatically after unsubscribe:
I see  "Aborted connection" in console after  async.complete(), but if i don`t use   async.complete(); than connections closed normally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2128
Provide an exception handler on HttpServer and NetServer to process uncaught connection errors · Issue #2128 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: currently the HttpServer forwards connection errors to the HttpConnection associated with the channel. It happens that the channel can fail before an HttpConnection is created, e.g SSL handshake failure. Application can have an interest to handle such failures for auditing purposes. In addition an existing internal handler already exists for testing purposes. The same can be done for NetServer.
changes: add an exception handler on HttpServer to process channel errors before an HttpConnection is created. Make sure also that HttpConnection is created after the SSL handshake for HTTP/1 as it was for HTTP/2 due to ALPN (the ALPN negotiation defers the creation of HtppConnection after the SSL handshake when the negotiated protocol is determined), which implements a consistent behavior. The same for NetServer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2130
SLF4J location aware logger parameters are ignored · Issue #2130 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to refer to a possible issue concerning logging in vert.x. This has already been discussed in similar issue #1243 and #1280 . I'm trying to use SLF4J logging with {} parameters, but instead of parameters, logger logs parenthesis.
Example:
I created vert.x Logger instance by passing an SLF4J delegate to the constructor.
The flow is as follows: Logger.error (using error call in this example, could be something else) calls delegate.error, which in turn calls error method in SLF4JLogDelegate. This method calls log(int level, Object message, Throwable t, Object... params) which check if logger instanceof LocationAwareLogger (line 173 in io.vertx.core.logging.SLF4JLogDelegate)  .
For this case, this is true and l.log(null, FQCN, level, msg, parameters, t) is invoked in org.slf4j.impl.Log4jLoggerAdapter (line 579 for 1.7.25) and this is a method that receives parameters (as Object[] argArray), but ignores them (apparently a bug in SLF4j). I believe this method should not be invoked when parameters are present. Instead, an appropriate method should be called for each separate level, since each has a MessageFormatter that includes parameters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2132
Log4j2 varargs parameters not logged anymore as list · Issue #2132 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2133
Netty upgrade to 4.1.15.Final · Issue #2133 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2134
Native transport support · Issue #2134 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x can run with native transport for Linux and BSD.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2135
Domain socket supports for the io.vertx.core.net package · Issue #2135 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Supports for domain sockets for io.vertx.core.net package.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2137
SharedData#getMap() feature that provides LocalMap wrapped as AsyncMap when not clustered · Issue #2137 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently SharedData provides methods for dealing with locks, counters and maps. Locks and Counters can be easily aquired with getLock() and getCounter(). Vertx decides if you get the local or clustered version. For Maps we have no such feature. We have to know if our Vertx is clustered and use the appropriate method getLocalMap() or getClusterWideMap(). I think it will be nice to have also a method called getMap() which is similar to getLock() and getCounter().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2138
Server Idle timeout does not apply to connection that are HTTP/1.x / H2C ambiguous · Issue #2138 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: currently when a client connects and has not sent enough data to distinguish between an HTTP/1.x or H2C protocol, the server idle timeout does not apply.
change: configure the idle timeout handler to support this case
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2139
Get NullPointerException when create shared JDBCClient with vertx core 3.4.2 · Issue #2139 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When creating a shared JDBCClient in vertx core 3.4.2 version with:
I got the exception:
But it runs well in vertx core 3.4.1.
Anybody has idea about how to fix it for 3.4.2 ? Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2141
ProxyErrorTest.testProxyHostUnknown() depends on normal dns, which may not work · Issue #2141 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The test uses unknown.hostname to get a dns resolution error, this will not work when the providers dns returns an ad page for unknown hosts.
We will set up a fakedns instead
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2142
Expose the selected sub protocol negotiated by the websocket client and server · Issue #2142 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: currently the HttpClient allows to define the set of sub protocols supported by the client and server, that are then negotiated. However it is not possible for applications that uses it, the selected sub protocol.
change: WebSocketBase provides a subProtocole() method that returns the selected sub protocol. The ServerWebSocket also now allows to explicitly accept the socket and perform the handshake so the selected sub protocol can be determined during the server websocket handler invocation
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2143
Java 9 CommandBuilder incompatibilty · Issue #2143 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
after upgrading to Java9 jdk vertx startup throws:
Is it some kind of java 9 incompatibilty? How can I fix it?
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2144
Options generated converter should be package private · Issue #2144 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is no value to have the currently generated converter to be public classes as they are meant to be used by data objects.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2145
Serialize messages sent to the connection in the order of the synchronization monitor · Issue #2145 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: currently the ConnectionBase class does not  serialize the messages written with writeToChannel to the underlying channel when a message is written outside of the event loop followed by a message written from the event loop thread. This can cause out of order issues when ordering is assumed by the Vert.x code using ConnectionBase, for instance calling HttpClientRequest#end() outside of the event loop sends an last HttpContent message to the channel then release the connection to the pool (with pipelining), this connection might be provided then to a waiter that uses it and send pipelined messages, e.g an HttpRequest message.
changes: change the implementation of writeToChannel and write the message to the channel when the current thread is the event loop or there are no asynchronous message write in progress otherwise a write task is scheduled causing further messages to be scheduled as well. Two sequential calls to writeToChannel (the method is synchronized) will have their messages in the same order the synchronization monitor (the class) allowed. In particular an asynchronous task calling writeToChannel started after a call to writeToChannel will have its message sent after.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2148
Install plugin with Eclipse IDE? · Issue #2148 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Are there instructions on how to install the plugin with the Eclipse IDE?
newb here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2150
Can Router expose vertx? · Issue #2150 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The RouterImpl already has a method that would expose vertx() but only to the default classes.  Is there a reason why it was not exposed on the Router level?
The reason I am asking is I am trying to build a simple API that would help me build routes, but I would need vertx on construction to use the executeBlocking for long initialization sequences.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2151
IllegalStateException in ClientConnection#beginRequest · Issue #2151 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using a verticle to send HTTP GET requests to an endpoint. It seems that the traffic is growing and the requests (when writing the header) are overlapping, causing an exception.
I don't have too much control of this, the question is what to do?
Increase the number of verticle instances? So in this case the client instance will be different, so the race condition will be vanish? Or at least have a lower probability.
Set bigger connection pool that the default of the http client? How can I do that?
Implement queueing of writing request in ClientConnection.
One things is missing for me: if it is happening inside a verticle how it can happen that a request is being written, but another request is coming in? It is a standard verticle, not a worker.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2155
JsonParser fails to handle floating point numbers in buffering mode · Issue #2155 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
To reproduce, create a JsonParser, switch to object value mode and push a buffer of JSON with at least one floating point value. Parsing fails with UnsupportedOperationException: Not implemented
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2158
AsyncResult improvements · Issue #2158 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe AsyncResult.map() must handle exceptions in mapper function.
Also it seems that AsyncResult.succeededAsyncResult() and AsyncResult.failedAsyncResult() static factories will be useful.
If these proposals makes sense I can provide PR
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2159
Properly fail the Verticle deployment for a verticle factory resolves with failing options · Issue #2159 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the DeploymentManager will be invoked asynchronously by a VerticleFactory and upon resolution the new deployment can throw an exception, this exception should be properly routed to the original deployment completion handler and not to the VerticleFactory itself.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2161
weird problem in clustered mode of Hazelcast · Issue #2161 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
an IllegalStateException occurred when accessing url http://localhost:8080/ .
Unexpected exception in route
please pay attention in above bold code. the web service seems good and could work when I put the router.route().handler(BodyHandler.create()); in front of router.route().handler(CookieHandler.create()); .
the web service works very well, no exception occurs.
is there anyone who could tell me why? I could not find any suggestion in the document that the BodyHandler.create() should be called before calling SessionHandler.create().
thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2162
Setting a drain handler on a drained MessageProducer should call it · Issue #2162 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the MessageProducer#drainHandler only set the drain handler on the producer. It can happen that an application using the producer outside of the event loop sets a drain handler because MessageProducer#writeQueueFull() returned true and concurrently the producer has been fully refund from all its credits before the drain handler is set:
When setting a drain handler on a producer we should call it when the queue is in drained state.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2163
Overlapping classes with shade plugin · Issue #2163 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
the shade plugin is giving the following warning when i build my application
my dependency tree is like this
Why do vertx jars have these classes duplication that makes them overlap?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2166
Share the same DNS cache between event loop · Issue #2166 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, each event loop has its own DNS cache when using the DNS address resolver, the current DNS cache implementation is concurrent and can be easily shared between event loop to reduce memory consumption.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2167
RunCommand overrides deployment options set through system properties even if those arguments were not passed to the command · Issue #2167 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not sure if this is a bug or a feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2168
Got a NullPointerException when event bus was under heavy load · Issue #2168 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2170
Request Timeout should start after the connection is stabilished · Issue #2170 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx suppot a timeout in the request, but that timeout start as soon as the method i invoked.
I believe that Vertx should support a 'requestTimeout'.
This means the timeout should apply only after the connection is stablished and the request starts.
To illustrate this, the following snipet will describe it:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2171
SockJSSession needs to use the transport thread when using the transport · Issue #2171 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the SockJSSession uses the transport for write/close operations from any thread. This can cause deadlocks when used from external threads or because the transport thread has changed (for instance a session reconnection with an scaled http server).
It can be fixed by recording the transport context when the transport is associated with the session (register method) and doing a runOnContext when the current context is not the same. This shall also prevent race conditions for instance a write operation is scheduled from a non vertx thread, the register method is called and gives a new transport to the session. In this case the write will be rescheduled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2172
Java 9: java.lang.IllegalStateException: failed to create a new resolver · Issue #2172 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If i create an new NetServer and start it, the server doesnt start and i get the following log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2179
The default SSL engine enabled protocols should not prevent to use protocols declared by options · Issue #2179 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SSLHelper has:
However later builds up the enabled protocol list with:
And since netty by default does not enable SSLv2Hello (ref ), SSLv2Hello in fact is not enabled, and I believe it is not possible to enable any protocols other than TLSv1/1.1/1.2.
This could be regarded as a feature as it prevents developers selecting insecure protocols, however is confusing that addEnabledSecureTransportProtocol will only actually work if its  TLSv1/1.1/1.2.
Could be fixed by removing SSLv2Hello from the default list to make it less confusing, and maybe documenting what protocols are available. Or by re-enabling all protocols by changing
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2180
Can eventbus support message route? · Issue #2180 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to send the same user message to same verticle,can eventbus support message route?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2181
Writing on HttpServerResponse does not throw when closed · Issue #2181 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the client closes the connection, I can keep on calling HttpServerResponse.write forever without any indication of an error, I don't even get an exception in my exception handler.
It would be better to throw something.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2183
Unable to build vertx as describe in the readme · Issue #2183 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The readme file says to build vertx by issuing the following command:
However this results in the following error:
I guess there is some step missing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2184
Non keep-alive HTTP/1.x requests close the connection immediately with compressed responses · Issue #2184 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
First of all, Thank you for the amazing work with vertx.
I am testing the Version 3.5.0 with an nginx reverse proxy.
If I turn off the keep-alive functionality, the HttpServerResponseImpl is not answering anything.
You can test using the following HTTP requests:
This is because of the Connection: close
After a debug, I found that if HttpServerResponseImpl line 442 keepAlive is false, it is working as expected
So I suspect that the closeConnAfterWrite is not working as expected.
I would appreciate if you can take a look on it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2187
JsonOnject is not friendly. · Issue #2187 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I need some type ，such as java.util.Date . Type conversion is a very painful
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2188
"update-returning"   isn't supported by vertx-pg · Issue #2188 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't get result for this sql . (PS: I want to get the type)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2190
Switching to 3.5 - Could not find proxy get templ · Issue #2190 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
By switching to 3.5 from 3.4.2 on build, when it comes to god generation:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2191
Expose FakeClusterManager for application test code · Issue #2191 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For unit testing code which uses cluster-related APIs (eg io.vertx.core.shareddata.SharedData.getClusterWideMap()) in a non-clustered environment it would be very handy if the class io.vertx.test.fakecluster.FakeClusterManager were exposed. Otherwise there seems to be no way of unit testing such code ("Can't get cluster wide map if not clustered") - except by writing another dummy/local ClusterManager.
This class can be accessed via the dependency 'io.vertx:vertx-core:3.5.0:tests' but it doesn't seem to be documented anywhere, and I imagine that the contents of the tests jar are subject to change.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2192
Sending RxJava2 items to eventbus with backpressure · Issue #2192 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Following the vertx rx-java 2 documentation, it seems there's a easy way to transform a read stream into a flowable, using the FlowableHelper.toFlowable utility method, but nothing for write streams.
The documentation uses the following example to send data from rx-java to the eventbus:
But if you send messages to the eventbus in the subscribe method, you cannot handle backpressure correctly (I've an example that hangs if I send too many messages, but I don't get any exception to confirm that backpressure is the only problem).
Is there a way to turn a write stream into a Subscriber?
Or something similar..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2193
Unknown channel option 'io.netty.channel.unix.UnixChannelOption#SO_REUSEPORT' · Issue #2193 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am running a service using Vert.x v3.5.0 with setPreferNativeTransport(true) in VertxOptions. I am seeing periodic warnings in the logs:
Please advise
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2195
Error 'Unable to create Channel from...' on 3.5.0 · Issue #2195 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After bumping up to Vert.x 3.5.0 I get this error when http server is starting:
Any ideas what could've gone wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2196
Some of the requests are fail because of  java.lang.NullPointerException on vertx 3.5.0 · Issue #2196 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got NullPointerException, during serving some of requests on vertx 3.5.0
The issue is not occurring on vertx 3.4.2 and 3.3.3.
I am using java 8 (exception occurred on Windows and Linux)
Problem occurred with both ssl enabled and ssl disabled options
The full stack trace is:
Thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2197
java.lang.NumberFormatException on vert.x 3.5.0 · Issue #2197 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got an error when I have requested url
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2199
Since 3.5.0: failed to parse /etc/resolv.conf on Windows · Issue #2199 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having problems with starting a webserver on Windows10 since updating to 3.5.0:
Might also be a result of adding coroutine support to my app...
Is this a known issue? Any workaround?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2200
Missing log.trace-ing for HTTP client calls · Issue #2200 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that turning TRACE for io.vertx outputs HTTP server logs, but unfortunately no HTTP client logs. I am using swagger-codegen to generate clients dynamically and thus would love to see what goes on over the wire -- I currently use a packet analyzer to inspect, but obviously that rules out HTTPS. I created a branch in my fork (https) and can send a pull request (I have signed the ECA) or can have you copy my changes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2201
'Unexpected exception in the selector loop' for long-running timers · Issue #2201 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
happens only on osx with the following exception
can be reproduced by the following test
different behavior on linux systems (as well higher delays are needed for the test)
the timer immediately triggers without any error or exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2202
NullPointerException in RouteImpl.handleContext · Issue #2202 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
I was trying to create a simple application with vert.x (version 3.5.0) and Java 9 and encounter a (potential) bug. Steps to reproduce:
Create HTTP server configure a router with handler using method reference (introduced since Java 8).
Access the same route from any HTTP client and it will throw a NPE:
Here is my code:
If I don't use method reference, but use lambda directly, like
then it will work fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2203
Feature: Support merging VertxOptions instances · Issue #2203 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Launcher method beforeStartingVertx gives you an opportunity to modify the supplied VertxOptions instance, but this must be done by modifying the provided options instance directly.  In our Launcher extension we read "override" options from a JSON file and it would be nice to have an easy way to override the existing options settings with the contents of the JSON file.
We used to do this using VertxOptionsConverter.fromJson, but that class is now package private, so that doesn't work anymore.  There are constructors on VertxOptions that allow for the overlay of either JSON or another VertxOptions instance, but those don't work for overlaying an existing instance.
Something along the lines of fromJson or fromOptions as instance methods on VertxOptions would be great.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2204
java.lang.IllegalArgumentException: \etc\resolv.conf didn't provide any name servers · Issue #2204 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when I use  version 3.5 vertx,it always appears
so I want to ask reason,why?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2205
How get remote host and port in http sever? · Issue #2205 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The context.request().remoteAddress() return is remote ip，but I expect is domain name.
otherwize return the port is not remote http port of the request.
How should I do？
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2206
the MulticastReciver doesn't work for Udp under some configurations · Issue #2206 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I type the code refer to the web http, but when I sent the data buffer to 230.0.0.1 for a test, the MulticastReciver's handler doesn't print the data string.
the Sender class code:
the Receiver class code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2207
HTTP/2 connection must wait for the first settings frame before being delivered · Issue #2207 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP/2 connection must wait for the first settings frame before being delivered so the max concurrency is known and the client can exceed the number of concurrency streams because they are created with an incorrect max concurrency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2208
HttpClient connection pool improvements · Issue #2208 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Provide a better implementation of the HttpClient pool: the current pool has a few drawbacks, race conditions , inconsistencies and is tightly coupled to the logic for establishing HTTP connections.
The new pool only retains the logic of managing connections and the HTTP logic has been factored out. The pool is a state machine that reacts to events and tries to progress to satisfy the waiter list based on the connections managed by the pool and the connection provider to create new connections.
The logic for managing effectively connections has been factored out of the pool, leaving room for reusing this pool potentially in other components that would need a pool with similar behavior. This also allow to build establish HTTP connection without the pool (i.e by promoting an existing socket into an HTTP connection).
The pool also clarifies that the connection waiter will always be called on the connection event loop without owning a lock from the pool, to avoid deadlock reentrency with the pool lock.
The fallback from HTTP/2 to HTTP/1 has also be improved, the previous way was switching the HTTP/2 pool by the HTTP/1 pool. The new pool provides instead a way to deal with both at the same time and honour the max pool capacity consistently.
The HTTP/1 pipelining accounting logic has been retrofitted into the pool and is not anymore handled by the HTTP/1 connections, HTTP/1 connections only schedule the pending requests on the connection reactively.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2210
Verticle deployment failure should undeploy its children verticle · Issue #2210 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation: currently a verticle that fails its deployment although it has successfully deployment children verticles does not have its children automatically deployed although its close hooks are called. This force the developer to take care of undeploying explicitely the children verticle in this situation.
Change: when a verticle fails its deployment, the deployed children verticle are undeployed
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2211
Why are the CharSequence methods in HttpServerResponse marked @GenIgnore? · Issue #2211 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This makes it awkward to use the io.vertx.core.http.HttpHeaders constants, which are CharSequences, with the generated versions (e.g., io.vertx.reactivex).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2212
HttpClient connection leaks when exceptions thrown when receiving inbound messages · Issue #2212 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are observing HttpClient connection leaks due to exceptions in receiving inbound messages in certain conditions.
The leak we are seeing is caused by io.netty.handler.codec.compression.DecompressionException, but there could be other cases that trigger the similar leaking situation.
Some details about the case we are seeing: when a client has tryUseCompression set to true, and a server returns Content-Encoding: gzip in a response header, BUT then returns an invalid gzip response (could simply be some plain texts) for some reasons, DecompressionException is thrown, but the connection is not properly cleaned up.
So far we suspect the direct cause of the issue is that VertxHandler.channelInactive is not fired after a channel is closed by exceptionCaught. But we are not sure the problem is in netty or vertx.
Here is a unit test to reproduce the issue:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2213
switching to 3.5 - StaticHandlerImpl.isFileExisting · Issue #2213 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a web-static handler in one of my verticle.
It used to work.
Now when I start and try to connect in browser to "/" or "/index.html"
Did I miss something? Should it still work?
in /resources/webroot I have index.html that is used to show some content.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2214
HttpServer with compression enabled throws ClosedChannelException when "Connection: Close" in header · Issue #2214 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps to reproduce:
Issue request with "Connection: Close":
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2215
HazelcastKubernetesDiscoveryStrategyFactory in vertx-3.5.0 · Issue #2215 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I have just upgraded my application in vertx-3.5.0. Since this upgrade, my application doesn't start anymore and generate this error:
java.lang.ClassNotFoundException: io.vertx.servicediscovery.hazelcast.HazelcastKubernetesDiscoveryStrategyFactory
This class is mentionned in META-INF/services/com.hazelcast.spi.discovery.DiscoveryStrategyFactory in this artifact <artifactId>vertx-service-discovery-bridge-kubernetes</artifactId>, but i didn't find it in the jar file.
Could you please tell me if it's a bad configuration or a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2216
vertx run --help incorrect · Issue #2216 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In doing vertx run --help, I see this:
This is backwards as the -- switches come after main-verticle, i.e.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2217
Vertx 3.5 Testing RedisClient. Timeout on set. · Issue #2217 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Testing RedisCleint set method that I use in my RedisConfigRepository
Eventually it fails with timeout.
Why?
There is a test:
There is a code in the RedisConfigRepository
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2218
HttpClientResponse executed on the a different context thread when resumed outside of its context · Issue #2218 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to load the body of an HTTP request. However, in the data handler, I need to do stuff that is asynchronous. So I pause the stream at the beginning of the handler, and resume it when I'm done doing my asynchronous stuff.
Pseudocode:
each time I receive a buffer
However, it's not working as I expect it to.
Am I getting something wrong? Is it possible my handler gets called again before it has time to pause the reading?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2219
version 3.5.0, The -conf option does not point to an existing file or is not a valid JSON object · Issue #2219 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when use io.vertx.core.Launcher, no problem!!!!
but use custom MyLauncher extends io.vertx.core.Launcher, throw exception:
The -conf option does not point to an existing file or is not a valid JSON object.
is version 3.5.0 bug???
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2224
vertx-web-common should not export package io.vertx.ext.web · Issue #2224 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A collision appear when using vertx-web and vertx-web-common in OSGI environment.
vertx-web-common should not export the empty io.vertx.ext.web package. Otherwise osgi resolver could resolve wrong package and CLNFE will arise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2225
Lingering verticles after undeploy · Issue #2225 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We noticed in heapdumps that even after calling vertx.undeploy, verticles are not freed from memory because of a GC root
this
Because this verticle is being held, none of the associated classes all the way upto the IsolatingClassLoader is being freed up. Since we deploy and undeploy quite often, we are thinking that this will lead to a memory leak
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2226
Use new SniCompletionEvent from Netty · Issue #2226 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
and try to remove VertxSniHandler - see netty/netty#7444
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2230
HTTP/1.x server connection back-pressure management might reorder request body chunks · Issue #2230 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As discussed here previously, starting with vert.x 3.5.0 I was noticing failing integration tests when uploading large (at least a few MB) files. The issue so far only appeared when running against mongo in a docker container or with travis ci. Downgrading to vert.x 3.4.0 seems to fix the issue. This issue does not appear on every build.
I once examined the differences between the uploaded and the persisted file and it showed that about the first 1054400 bytes were correctly persisted, but subsequent bytes were corrupt. I could not find any issues with file download. Just the upload seems to encouter this issue.
I have put a branch together which explicitly compares the md5 checksums of the uploaded file in addition to the actual bytes with vertx 3.5.1-SNAPSHOT travis available here - source
this is a build using vertx 3.4.0 which never failed so far
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2231
3.5.0 NullPointerException · Issue #2231 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While running some tests, I randomly came across this exception:
Unhandled exception
According to this discussion this is caused by that happens when Vert.x is closed and still accepting requests (it cannot process)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2232
DNSClient should send datagram requests with recursion desired flag set · Issue #2232 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the DNSClient send datagram requests with the flag recursionDesired set to false, which fails to provide a correct response when the DNS server could make a recursive query.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2233
Only automatically set content-length header on HTTP/2 HttpServerResponse when headers haven't been sent · Issue #2233 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
but that's incorrect
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2234
NetServer#close completion handler is not called when the actual server failed · Issue #2234 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The method io.vertx.core.net.NetServer.close(Handler<AsyncResult<Void>>) is supposed to call back to the completion handler, however this is not always the case:
My expectation on the code below would be that the completionHandler of deployVerticle gets called in any case. However it doesn't get called at all.
This is due to the fact that the DeploymentManager does run code using context.runCloseHooks, but as the NetServer.close method doesn't call its completionHandler the deployVerticle method doesn't report back as well.
This is a regression in vertx 3.5.0 as this seems to have introduced the call on the runCloseHooks methods. But I guess (I haven't checked) the issue with the NetServer.close was there before 3.5.0, but now it manifests in the issue with the deployVerticle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2236
Clustered Eventbus with dynamic port assignment · Issue #2236 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all.
Is there any mechanism that vertx can handle when used in aws ECS if you decided to make the port mapping of the host port to be dynamic?
This is a must in order for the ECS service to be scalable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2237
About Metrics using Dropwizard · Issue #2237 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can I monitor the status of my cluster using "Metrics using Dropwizard"?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2238
About kafka client. · Issue #2238 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I use vert.x kafka client,I can't send messages to Kafka, the code is as follows:
Is there a Kafka version limit for the Kafka client using vert.x? thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2239
Provide a default configuration of the DNSClient that uses the same DNS server address than the async hostname resolver  · Issue #2239 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2243
add methods for byte arrays to rx lib · Issue #2243 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
according to this thread, methods for byte arrays are lacked in rx library. This cause lots of migration effort. Any plan to add this lost methods?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2245
how much memory is being used when i open a new verticle? · Issue #2245 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a project, I started four verticle, is it normal to used 680+M memory?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2246
About Service Discovery ,I think there is a bug. · Issue #2246 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the following source,the findAny () method returns the first element of the set forever, unable to achieve the load balance.
Do you need to achieve your own load balancing?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2247
JsonObject as payload in class · Issue #2247 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a class that can have additional payload field as JsonObject. When i try decode my class i am getting DecodeException. I can avoid this if field are simple Object and my getter return payload like new JsonObject((Map<String, Object>) payload).  JsonObject misses deserializer. Are that intended behavior?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2248
Wrong parameter name in PortBuilder · Issue #2248 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm referring to the securityGroup(String groupName) method in the org.openstack4j.model.network.builder.PortBuilder interface (and subsequently to the only implementing class org.openstack4j.openstack.networking.domain.NeutronPort).
The only parameter is String groupName and this is incorrect and misleading because the underlying OpenStack REST requires security group ID, as is seen in the following link http under the POST /v2.0/ports create Port method.
I believe this is only a naming issue because the method produced a desired result when provided with the group ID instead of a group name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2250
Netty 4.1.19.Final upgrade · Issue #2250 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2251
Jackson 2.9.3 upgrade · Issue #2251 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
waiting for CQ resolution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2252
Let's Encrypt ecc 256 can not listen port but none-ecc can listen port · Issue #2252 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
question 1
I use debian linux, and Let's Encrypt ecc 256 with command:
it's should ec-256 (prime256v1, "ECDSA P-256"), but i can not listen port with this cert(but vertx is running without error), code as
but, when i not use ecc cert with acme.sh command:
all thing is ok, https 8080 can work.
question 2
openssl can not work, show error "openssl not found"
but netty-tcnative-boringssl-static can work, as gradle dependencies comment.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2253
Provide system property for native transport · Issue #2253 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, it seems the only way is programmatically. It would be very convenient to have system property to enable that
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2254
Improve host address resolution · Issue #2254 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DnsResolverProvider loads hosts file when only in constructor of DnsResolverProvider. The problem is that when hosts file is modified, vertx does not recognize it because of no load of hosts file(except in the constructor).
I think there is no way to dynamically load it again while vertx is running. Is there any way to solve it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2255
The WebSocket should check there is a handler for pong before delivering the pong event · Issue #2255 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We recently upgraded to vertx 3.5 and are seeing this exception in our logs
Stack Trace:
We don't have (or need) a pong handler attached to the ServerWebSocket instance but have clients that will send pong frames to our websocket servers, so we see this exception being logged.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2256
NullPointerException -> SockJSSession.writePendingMessages() on high load · Issue #2256 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Description
Intermittent erro generated when  there are too many concurrency connections.
Trace
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2257
There's no notification of a bind exception · Issue #2257 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There's no way for a user to discover a bind exception occurred, except to crawl through the log.
If a BindException occurs, the server is removed, but the caller isn't notified.
The exceptionHandler(new BindException(host+":"+port)) should be called.
Yes, a BindException is thrown and caught already,
but there's no way for the caller to discover it...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2258
Provide user-friendly way to test an HTTP header value · Issue #2258 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is no easy way to test that an HTTP header is present and has a given value:
Testing a header value is a common task, especially if you write edge services or API gateways
The header value in this example should be tested in a case-insensitive way; so the HttpHeaders constant must be first converted to String (no equalsIgnoreCase on CharSequence)
A list of all headers needs to be created before testing
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2263
HttpClientImple DEFAULT_HANDLER uses uri.getQuery instead of getRawQuery when extract redirection uri from response location header    · Issue #2263 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I found that Vertx HttpClient DEFAULT_HANDLER uses java.net.URI.getQuery instead of getRawQuery when extracts a redirection uri from response location header.
Even Vertx HttpUitls.resolveURIReference uses java.net.URI.getQuery and then redirects it with decoded query.
java.net.URI.getQuery returns decoded query according to documents.
Returns the decoded query component of this URI.
The string returned by this method is equal to that returned by the getRawQuery method except that all sequences of escaped octets are decoded.
In my case, there are many cases that location header value includes URIEncoded query because my service covers not only english alphabet but also ascii unsafe language.
Redirection target server still needs URIEncoded query for ascii unsafe language.
I've made a patch for that referring to Apache httpClient where uses getRawQuery and then applied it with HttpClient.setRedirectinHandler.
I guess this issue not only for mine.
I think java.net.URI.getRawQuery is proper rather than getQuery.
Do you have any reason for using getQuery I'm not aware of?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2264
Name resolver always fallback to original name or search domain · Issue #2264 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Until in some situation, either the original name or the search domain resolved name was used in a resolution. Now both are always used, the only difference is in the resolution order according to the ndots value. This behavior change comes with Netty 4.1.19.Final version, Vert.x integration tests are updated accordingly to the new behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2265
Dependencies upgrade · Issue #2265 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2266
Stop chunked response when client disconnects · Issue #2266 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm playing around with vertx and vertx-web. I have a simple endpoint that produces a chunked response by endlessly printing "hello" once a second.
How do I detect when the client disconnects? Vertx doesn't seem to throw an exception when attempting to write to a disconnected client, and routingContext.response().closed() keeps returning false long after the client is gone.
Here's a minimal example, I'm using curl as the client:
I'm using Vert.x 3.5.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2267
Documentation for "Asynchronous Verticle start and stop" unclear · Issue #2267 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation for the "Asynchronous Verticle start and stop" section in the core documentation does not clearly explain what is necessary to make the verticle deloyment work asynchronously making initial use of vertx more frustrating than need be, especially because it uses verticle deployment in the example making it self referencing.
I would suggest adding some vertx.executeBlocking() code to the start method in the example code and referencing the "Running blocking code" section to show how it is done to make it clearer to first time users.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2269
3.5.0 JDBCClient querySingle IndexOutOfBoundsException · Issue #2269 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2276
WebSocket API close frame payload · Issue #2276 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The WebSocket API should allow to set and receive the close frame payload.
Close frame should be propagated on the client, i.e before calling the close handler the websocket should forward a close frame with the status and reason.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2278
Clarify that classloading isolation not compatible with Java 9 in documentation · Issue #2278 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This line cause incompatibility with Java 9 , when combined with attempt to use isolation group.
As can bee seen, 8 v 9 uses different classloader while launching jar. Java 8 one is extending URLClassloader, Java 9 one is not
Can be tested by following project
vertx-test.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2281
3.5.0: WebSocket is closed exception when socket closed under load · Issue #2281 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 3.5.0
We are using the SockJS support and specifically the part that allows you to send data to an open websocket via an event bus address.  When there is a socket which is under heavy load (lots of data being written over the bus) and that socket is closed, we sometimes see the following exceptions:
These are benign and we think due to the timing of processing in-flight events and the closing of the socket (that close does unregister the event bus consumer, but obviously not in a way that guarantees that no further messages will be processed by the handler).
Unfortunately for our deployed server this results in a near constant spam of these error messages (it doesn't happen all the time, but often enough that at scale we are getting at least one every few seconds).  We'd rather not turn the logger off entirely since sometimes errors like this indicate an actual problem.
Possible solutions:
Wrap the write to the socket at line 70 in SockJSSocketBase.java with a try/catch to consume the exception in this case.
Provide a way for us to replace the write handler used by the Socks code with our own so we can catch/consume the exception.
Guarantee that no data will be delivered to the handler after a close has occurred (not sure if that's possible/a good idea).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2282
Why not find a template is an exception Why not 404 · Issue #2282 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2283
About service discovery using zookeeper connection timeout problem · Issue #2283 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use zookeeper as a service storage, the application has just started running no problem, but the operation of the period of time the following error:
I think it is not connected in the source code is not caused by the release?
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2284
WebClient.rxSendStream(file) cause AsyncFile OutOfMemoryError · Issue #2284 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using WebClient.rxSendStream method to upload a large file(2GB) to remote server. The upload speed is normal in the beginning. But it became slower and slower, finally the OutOfMemoryError was thrown.
Below is my code causing problem, I can consistently reproduce it:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2285
 SQLConnection  batchWithParams did not work · Issue #2285 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As soon as the 'batchWithParams; method is called on SQLConnection, the event loop gets hanged, and no statements inside the handler are executed, and no exceptions are thrown. I'm facing similar issue while calling the 'batch' method of SQLConnection class as well.
I tried finding similar queries on this group, but couldn't find any relevant ones
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2286
JsonObject: mapFrom misses some fields if the PoJo extends a Hashtable · Issue #2286 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using swagger codegen to generate POJOs from an OpenAPI spec file, I obtain some objects of the following type:
When converting this particular object into a Vertx JsonObject (i.e. JsonObject json = JsonObject.mapFrom(obj);), only the key/value "fields" present in the hashtable are kept and not the extra fields present in my class e.g. name in the above example.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2287
Best practice when writing tests that require deployed verticles and access to the verticle context · Issue #2287 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
Just curious if there is a recommended way to run a test on the context a verticle is using. Currently, I've solved it in by creating a super class method for integration type tests (https) that contains a runOnServerContext method. A rule is responsible for deploying the verticles.
Here's an example of a test that uses the runOnServerContext method https.
If I don't do this I run into deadlock issues when pumping (write/drain/resume calls) involves http client request/response instances and http server request/response instances since either the readstream or writestream context differs from the context used by the verticle.
In the case of the RemoteBlobActionsTest the test generates a file then attempts to pump it to a remote node using an httpclient associated with the SfsServer verticle. If the AsyncFile isn't opened in the server verticle context the pump deadlocks against the http client request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2288
httpclient allows request to be created in a context other than the one an httpclient was instantiated in resulting in a deadlock on pumping. · Issue #2288 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
Here's a reproducer for #2287. Perhaps it would make sense to bind an http client request to the context in which it is created (like AyncFile) instead of the context in which it's first used or throw an exception. In my case this is only an issue in tests since I need to access some of the internal sfs api associated with a verticle instance. Another option could enhance the vertx unit artifact by creating a rule to deploy a verticle and allow a test to be run in the context of a verticle instead of the context of the RunTestOnContext rule so that resources initialized for a test (AsyncFile) could be pumped to an http client request that made an initial connection using a verticle context. The example below is trivial... in a more complex application, it becomes difficult to manage the current behavior during test execution. A non trivial example of an api might look like volumeReplicaGroup.consume(size, newArrayList(MD5, SHA512), asyncFile) and the http clients used internally by the volume replica group may or may not already be bound to the verticle context instead of the test context asycFile is bound to (it would depend on if the verticle had attempted to use the client).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2289
Provide a link to documentation for older versions of Vert.x · Issue #2289 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am working in Red Hat OpenShift Application Runtimes and thus limited to using certain APIs in version 3.4.2 and earlier. There does not appear to be a simple way to view the older versions of the Documentation from the Vert.x web site. It would be awesome if we could view documentation from older versions of Vert.x easily.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2290
About AsyncMap · Issue #2290 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello,
io.vertx.reactivex.core.shareddata.AsyncMap.This class does not provide the values method, is it a problem?
thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2291
ServerHandler throws NPE when shutdown is in progress · Issue #2291 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While HTTP requests are fired against a vertx based HTTP server and a shutdown is initiated the following exceptions start appearing in the logs:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2292
Possible race condition with chunked responses after upgrading to 3.5.0 (now with reproducer) · Issue #2292 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
after upgrading to vert.x 3.5.0 we've been seeing a consistent problem with one of our service APIs: when replying with chunked responses over SSL, clients are reporting encoding errors when processing the response.
The problem is that after a certain load threshold (not sure if the number of such chunks of their size but I can consistently repro it in our service with >4000 chunks) the client will receive invalid chunks and break the connection.
On the server side the problem surfaces with a long list of ClosedChannelException instances which for me I believe was a red herring as a root cause. Trying to debug the service, I noticed that the exceptions are legitimate and caused by a Connection reset by peer exception which is swallowed by netty:
The channel will then be closed and triggering the large number of ClosedChannelException instances when the originally scheduled zrange commands complete.
But there is no symptom on the server-side to describe an encoding problem so my hypothesis is that the client breaks the connection when it receives the first bad chunk thus triggering the Connection reset by peer which in turn surfaces the ClosedChannelException. So I think this is a symptom of a more delicate problem.
When this happens, curl -raw on the web server's endpoint will display some chunks but then stop with one of the following errors:
Also, comparing the payload observed by curl with what the server should provide, the chunk size appears to be correct every time but the chunk content is truncated at random points along the way.
All of the above leads me to believe that the response is indeed corrupted but I can't figure out why/when/how or by whom the chunked response is corrupted in the stack:
Other observations:
the problem is isolated to versions above 3.5.0 (does not repro in 3.5.0.Beta1 or below and the service code which triggers this behavior hasn't been changed in a while)
it only appears with https and toggling OpenSSL has no effect
for low number of chunks (less than 1000) it rarely reproduces on a cold service start but consistently reproduces afterwards
the actual payload (string content) does not affect it. Considering that there are times in which it does not reproduce with the same content, I believe it behaves like a race condition and not like an input validation bug
debugging appears to be adding synchronization and changes the behavior. I never succeeded in reproducing it while trying to observe this breakpoint. What I did was to condition the breakpoint to fire when contentLength == 0 (marking the end of the response). With the breakpoint enabled, it never reproduces. With the breakpoint muted, it always reproduces.
looking at the change history, my initial idea was that the change which added this behavior was due to this issue (Serialize messages sent to the connection in the order of the synchronization monitor) which was closed with these changes. But after confirming that all messages are written from the event-loop thread, I think it's not relevant.
HttpServerOptions.setMaxChunkSize has no effect.
HttpServerResponse.setWriteQueueMaxSize has no effect.
A reproducer can be consulted here.
Any pointers/help to get to the root cause of this issue would be greatly appreciated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2293
Use LinkedHashSet in json to data object conversion · Issue #2293 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2294
The data object converter should prefer to use the setter over the adder when a data object declares both · Issue #2294 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2295
Remove SSLv2Hello from the default list of enabled protocols · Issue #2295 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SSLv2Hello was already removed by the JDK7 enabled algorithms filtering applied, the patch #2279 makes it enabled by default - it should be disabled by default as this is what Java does since JDK7
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2296
Thread blocked · Issue #2296 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2297
How can I get the *.ttf file？ · Issue #2297 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in my project, I can't get ttf file.
the response state is 403.
how can i do?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2298
Make LogDelegateFactory configurable via VertxOptions to avoid classloading issues in ContextClassLoader sensitive environments such as OSGi · Issue #2298 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The use of:
String className = System.getProperty("vertx.logger-delegate-factory-class-name");
Thread.currentThread().getContextClassLoader().loadClass(className);
in io.vertx.core.logging.LoggerFactory can be problematic in "context ClassLoader sensitive environments", such as OSGi (but this could also affect use of Vert.x within other environments that do funky class loading); here are some links with background about why that is so:
I've actually run into this problem myself, see the detailed error below (which probably won't really make all that sense, without more context ; it's from https running under https ... but ignore that).
I was able to work-around this in my code by instead of doing this:
using this beauty:
but in an ideal world... this kind of hand-stand should not be required?
One possible solution to this could be to offer an alternative to the system property and ClassLoader mess by simply letting users of Vert.x specify an instance of their desired io.vertx.core.spi.logging.LogDelegateFactory programmatically - I guess this would naturally fit into the io.vertx.core.VertxOptions.VertxOptions ?
Another solution, less flexible and IMHO best combined with above, would be to let io.vertx.core.logging.LoggerFactory try both (first) the getContextClassLoader() (as well as, if NOK) the LoggerFactory.class.getClassLoader().
Would a Pull Request proposing this via code be a welcome contribution to the Vert.x project?
Full background:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2302
Upgrade Jetty ALPN agent to 2.0.7  · Issue #2302 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
so the tests can run with the latest Oracle JDK.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2303
Improve default dns client configuration · Issue #2303 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the default dns client host is localhost.
It could be changed to null which means to use the value used by the address resolver which would be more consistent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2304
HttpClient should not cache request body for redirection purpose · Issue #2304 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: currently the http client redirection following feature will cache the sent body along with the request, this may is not desirable
change: remove the request body cache
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2306
The HttpClient websocket connect method should call the error handler at most once · Issue #2306 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: currently connecting from the client may invoke the error handler more than one time (the errors are reported from the underlying websocket stream).
change: use an future in the implementation to guarantee at most one callback
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2307
Fix HttpClient default redirection policy · Issue #2307 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation: the current redirection policy does not follow strictly https. It performs a redirection on any HTTP method for the 301, 302 and 307 status instead of only GET and HEAD. In addition for 301 and 302 status it changes the method to GET
change: perform redirection for 301, 302 and 307 status code only when the method is GET or HEAD and do not change the method
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2310
Investigate adding the protocol in HTTP RequestOptions · Issue #2310 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2311
With Netty Epoll throw readAddress(..) failed: Connection timed out · Issue #2311 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use vertx to create tcp server and set setPreferNativeTransport = true  ,NetServerOptions
client will send 3 kinds package
with 1000 clients after a few hours netty will throw readAddress(..) failed: Connection timed out
I find netty issues.but it close at 4.0.26 .Any ideas for help?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2313
spring-boot-maven-plugin and 'Main-Verticle' are not working together. · Issue #2313 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Launcher is not using the Main-Verticle manifest header in case the Main-Class does not match with itself. I'm not certain about the intent of this check, but this causes this issue:
As spring-boot has its own JarLauncher, therefore it won't see itself there.
Why use the spring-boot plugin?
Shade puts everything together into to root. If there are some clashes, eg. resource files, then you need transformers. SB plugin creates a jar classloader for each embedded jars, multiple resources can be found without magic.
After creating the classloaders, the class under "Start-Class" will be started.
I'm certain, that vert.x should not be concerning about this in the Launcher. "Start-Class" is an implementation detail of a different world.
Maybe Laucher could be more lax about the main class/verticle when a manifest entry instructs it to do so. Or a vertx specific manifest entry would be able to override the checks for "Main-Class" to something else.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2314
Are there any limits for "lengthfieldbased" mode about RecordParser · Issue #2314 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can see there are delimited and fixed size modes in RecordParser.java, but I could not find a parser which acts like LengthFieldBasedFrameDecoder in Netty;
I think I might achieve that by extending RecordParser or Handler<Buffer> interface, however, may I ask are there any limits about writing that decoder/Parser with Vert.x's Buffer? Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2315
HTTPRequestValidationHandler addQueryParamWithPattern does not work · Issue #2315 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following API does not work for the specified pattern, after trouble-shooting, the cause is - the pattern was not correctly set, instead, it was set as default value. I would like to join as contributor to solve this issue if possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2316
ContentType 'application/json; charset=UTF-8' was rejected by vertx validator · Issue #2316 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ContentType is required to be exactly equal with 'application/json' or 'application/xml', so our ContentType 'application/json; charset=UTF-8' was rejected with statusCode=400 and null failure Throwable object.
It is better to change to startWith 'application/json' or 'application/xml', since it is very typical to append the charset in the ContentType.
I am willing to join as contributor to solve this if possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2317
Remote client IP call inside Docker container returns an internal IP · Issue #2317 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling context.request().remoteAddress().host() returns an internal address, like 10.x.x.x, which is odd as the service is bound from port 80 on the host onto port 80 on the vertx server. This is essentially means I can't create an IP Whitelist for my service
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2318
Is there an official changelog someplace? · Issue #2318 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are ~240 commits between 3.5.0 and 3.5.1, is there a changelog someplace?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2320
peerCertificateChain() should return java.security.cert.X509Certificate · Issue #2320 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
peerCertificateChain() should return java.security.cert.X509Certificate instead of  javax.security.cert.X509Certificate.  javax.security.cert.X509Certificate is supposed to be deprecated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2321
No access to peerCertificateChain on the client side · Issue #2321 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
response.netSocket().peerCertificateChain() will just make HTTPS stop working correctly
request.connection().peerCertificateChain() works but it is not intuitive as you need to gain access to request.connection() where on the server side, you can just do request.peerCertificateChain()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2322
Hazelcast cluster.xml JVM property usage documentation · Issue #2322 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would be great to add the following type of documents for the hazelcast setup:
When using docker with a -ha or cluster you have typically set the -cluster-host.
The hazelcast cluster.xml file does not support ENV vars as per: hazelcast/hazelcast#11676
But as per the 11676 issue, you can use JVM system properties:
so the cluster.xml file can look like:
and your dockerfile can look like:

happy to do a PR if i can get some direction of the best location to add this: (in the docker manual, hazelcast, HA, clustering, etc.
edit: cleanup of examples and naming
edit: in addition i think it helps to cleanup clarity around:
reference example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2323
vertx run's -conf <config_file> argument: Where does it stand in precedence? · Issue #2323 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
By default the Config Retriever is configured with the following stores (in this order):
The environment variables
A conf/config.json file. This path can be overridden using the vertx-config-path system property or VERTX_CONFIG_PATH environment variable.
Does the -conf argument count as the A conf/config.json file. location?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2324
Investigate client getting callbacks on the GlobalEventExecutor instead of the event loop thread · Issue #2324 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2325
Deprecate and mark for removal isUsePooledBuffers · Issue #2325 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
isUsePooledBuffers option does not seem to be used anywhere? Is it intentional? Should it be marked obsoleted?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2326
HTTP client keep alive timeout · Issue #2326 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like Vert.x does not have a way to specify the keep alive strategy like what Apache HttpClient has. Would it be difficult to get it implemented?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2327
Why is Vertx.addCloseHook/Vertx.removeCloseHook not exposed? · Issue #2327 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx.addCloseHook/Vertx.removeCloseHook should be exposed via Vertx interface rather than  just VertxInternal interface so that we can allow some cleanup code to be executed when Vert.x is shutdown.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2328
Document that VertxOptions.setClustered is for internal usage · Issue #2328 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The javadoc explains almost nothing about VertxOptions.setClustered(boolean clustered) or EventBusOptions.setClustered(boolean clustered).
In fact, this option is not for public usage, as clustered mode has to be enabled by calling Vertx.clusteredVertx.
You should either lower the access to setClustered to "package" or add some explanations in the javadoc.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2329
Use plain asciidoc file instead of package-info file · Issue #2329 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2331
bug report: sometimes deploy verticle future not invoked. · Issue #2331 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx version: 3.5.0
in other conditions, eg: port already binded or directly throw exception from verticle.start, deploy future is no problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2332
Launcher setClustered invalid · Issue #2332 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
my VxApiLauncher is extends Launcher
in beforeStartingVertx i setting Clustered is true
but in afterStartingVertx or myVerticle clustered is false
vert.x version 3.5.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2334
Feature: Add Pkcs11Options like Keystore · Issue #2334 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the HCE context, we need to store the private key in an HSM. I tested this naive implementation :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2335
Support setting local address when using tcp based clients · Issue #2335 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
My friend was using vertx webclient as a crawling client, while the SA of his company require him to specify the local port for some security reasons.
I read the source code of vertx and found out that the current version vertx doesn't support specifying local address when making tcp connections or creating udp sockets.
However I think it's not difficult to achieve such thing:
I walked through the code and found that when using http client, the connection is setup in ChannelProvider, where bootstrap.connect is invoked with one argument (the remote address). I think it's not hard to add an arguemnt to ChannelProvider#connect like this:
then call bootstrap.connect with two arguments (the remote addres and the local address).
And some fields could be added to NetworkOptions or TCPSSLOptions to store the local address info.
And ofcause, the related code would all be modified.
I would like to make a pr but before that I would like to check whether this fixing method is ok and why it's not supported for now ...
Also, I saw that the argument ProxyOptions options is not used in connect method, is it safe to be removed?
Looking forward to your reply~
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2338
Continuous IOException when WebSocket write fails due to a closed socket · Issue #2338 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We are using version 3.5.0, to build a websocket server. At times, when a client's websocket is closed, the EventLoop is still trying to write to the netty Channel, ignoring the closed state. This might be something internal to netty, but I want to ask your team first to understand if there is any known issue.
A result of this, is repeated IOExeptions being thrown on the ExeptionHandler of the WebSocket.
still held in the socket/channel's write queue). I am not familiar with the internal acrchitecture of netty, but it looks like the following code in Netty's AbstractChannel's flush0() method is not closing the channel appropriately causing further writes to happen
I am not sure if there is a designated way to properly close vert.x's websocket in order to avoid this.
Thanks in advance.
Udai.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2339
HttpClient send form with file upload · Issue #2339 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Creating an HTTP server to receive multipart/form-data requests with file uploads is as easy as adding the BodyHandler.create() handler to a Router's route(). It would be great to just as easily to create an HTTP client request that  sends multipart/form-data with (one or more) file uploads.
This would be helpful for:
Unit testing HTTP servers that can accept file uploads
Uploading files to external services that require them to be sent using multipart/form-data

Currently, uploading files like this can be done with the HttpClient, but it takes much more work than writing an HTTP server that can accept file uploads. Thankfully, Vert.x has test code that can help users understand how to do this:
This topic has also been briefly discussed on the Google user group:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2340
Unable to read SSL certificates from jar · Issue #2340 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Sometimes we want to use key files provided by jar balls, but vertx cannot handle the path.
It'll be cool if vertx allows to look for resources by relative paths in classloader (and use them for SSL certificates in this case).
More information :
Version
The problem begins from io.vertx.core.file.impl.FileSystemImpl#readFileInternal line 736 byte[] bytes = Files.readAllBytes(target); it seems this one cannot handle zip file systems
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2341
App Id in the start command doc is wrong · Issue #2341 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2342
HttpClient: wrong poolSize option · Issue #2342 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
in HttpChannelConnector, pool sizes are swapped between HTTP1/HTTP2:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2345
About file uploading · Issue #2345 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When uploading files directly into the file-uploads directory, can I intercept it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2346
Make HttpClientRequest#host() returns the actual server origin of the request instead of the host header · Issue #2346 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was looking into metrics and wanted to group HTTP client request metrics by host. Unfortunately the original host is not easily accessible and before I PR something I wanted to point out that the whole host handling is somewhat confusing right now and start a discussion about naming.
So HttpClientRequestBase has a host field, that will be populated in the constructor by the default host or the host from the actual request depending on the use case. Albeit it does not have a direct access method for it.
There is a protected hostHeader() method, that does depending on the ssl type of the request return the host or the host plus port. Otherwise the field is completely encapsulated and only used for the absoluteURI method.
To make things a little confusing the HttpClientRequestImpl has a getHost() method that returns the content of the hostHeader field in that class. Furthermore it overrides the hostHeader() method to give precedence to this field, but that is still protected.
My naive approach would have been to add a getRawHost() or getBaseHost() to HttpClientRequestBase but that feels fishy at least. Any suggestions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2349
Measuring the event-loop  · Issue #2349 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So I stumbled upon
and was wondering what one has to do with the other? Why shouldn't I want to measure my eventloop throughput?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2350
Clustering tests: let cluster managers decide how to tear down clustered nodes · Issue #2350 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the base test class stops all nodes at the same time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2351
vertx reactive route debugging loosing information. · Issue #2351 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following is a debug statement from the router
Note that the context of the handlers are totally lost so the debug statements are pointless.
This is due to the delegate mapping from io.vertx.reactivex.ext.web in io.vertx.reactivex.ext.web.Route.handler. The anonymous class removes the toString of the handler.
To make this relevant in the wrapping either
remove the delegate wrapping here and put the handler directly into the router.
make the anonymous class decorate the toString with the relevant handler.
This was found in the 3.5.2 release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2352
Remove timer callbacks from the metrics SPI · Issue #2352 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the upcoming vertx-micrometer-metrics module, timer metrics are not implemented. They were not implemented either in the Hawkular module.
If this metric is not relevant / not seen as useful, it should probably be deprecated. The related API methods are:
As far as I know they're only implemented in vertx-dropwizard-metrics
In the opposite way, if it is decided to keep them, we should probably open an issue in vertx-micrometer-metrics to implement it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2353
There is no proper way to store mutable objects in a local map · Issue #2353 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is possible only for JsonObject, byte array and some other copyable objects known to vert.x.
It would be usefull to have mechanism to store mutable user objects in a local map if they can be copied.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2359
Context improvements · Issue #2359 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A few improvements and simplifications can be done in Vert.x Context
remove the internal ContextTask functional interface (which is a Runnable that can throw) as we can use Handler<Void> in practice which unified the internal Context#wrapTask method
remove the internal Action functional interface (which is similar to a Callable) as we can use the Handler<Future<T>> idiom instead
add a ContextInternal#executeFromIO(T,Handler<T>) so an handler task can be passed an argument
decompose the implementation of ContextImpl#wrapTask so the logic can be reused by executeFromIO without creating a unnecessary lambda
handle the worker task metric in WorkerContext instead of ContextImpl#wrapTask
avoid unnecessary lambda captures in VertxHandler when handling a message from Netty
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2361
Json#decodeValue cannot deserialize a JSON null/number/boolean from a Buffer · Issue #2361 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
vert.x core: 3.5.1
Context
An EOFException is unexpectedly thrown when deserializing a JSON primitive (null, Integer, String) from a vert.x Buffer. Unrolling the buffer into a String prior to deserialization works as expected.
Do you have a reproducer?
Steps to reproduce
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2362
HTTP/2 via HTTP/1.1 connection upgrade does not respect the protocol · Issue #2362 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the upgrade implementation assumes that the HTTP/1.1 request should not be treated as an HTTP/2 stream and only send an HTTP/1.1 response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2363
java.lang.NoClassDefFoundError · Issue #2363 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Need to catch as Throwable.
Explain: MavenVerticleFactory resolve "compile" scope only. MavenVerticleFactory will missing some runtime dependencies, NoClassDefFoundError will throw and this block can not catch it.
Console prints only "INFO: Resolving xxxxx.xxx"
and nothing happen after that.No way know why application not run without debuging
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2364
EventBus message fail method overload without error code · Issue #2364 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For now class "Message" have only one way to report about failure on consumer side:
void fail(int failureCode, String message);
Maybe this is useful for proxy services, but for simple message passing it is redundant. I need to define some list of error codes and maintain it on clients. But I just want to send a simple message to some address and get simple response (OK or NOT).
What was the reason for such design decision?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2365
HTTP server connection keeps processing pending pipelined requests when connection closed · Issue #2365 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP server keeps processing pipelined HTTP messages when the connection is closed during the processing of a request and there are pending HTTP request in the server pipeline (i.e the response has not been sent). This is due to a bug that when a message has not been processed during a check, the connection redo the check and it must not do it.
Changes: we only trigger an message processing check from the message check itself when a message has been effectively processed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2368
Exception in DefaultChannelPipeline: it reached at the tail of the pipeline · Issue #2368 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Today I received a lot of exceptions every millisecond for hours looking like an infinite loop in the log file:
What does this come from? Does i thappen during request or response handling or during SSL handshake?
Where to add a exception handler to catch this exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2369
WARNING: An illegal reflective access operation has occurred · Issue #2369 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running a Vert.x instance, the following warnings will be output to stdout:
These warnings were fixed by netty/netty#7650 and are available in release 4.1.21.Final and later
Upgrading the Netty dependency to that version should fix that problem
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2370
HttpClient pool gets inconsistent on a synchronous connection failure · Issue #2370 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClient pool assumes that the underlying ConnectionProvider will make an asynchronous callback, which is the case with the asynchronous DNS resolver but not with the JVM synchronous resolver when the host cannot be resolved.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2371
How does the BlockedThreadChecker work? · Issue #2371 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
where BlockedThreadChecker call registerThread（VertxThread）?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2372
Clustered event bus traffic security [doc issue] · Issue #2372 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I'm new to Vert.x and going through documentation. Not sure where to report doc issues.
I m going through 'Security notes' (), and it is mentioned:
Clustered event bus traffic
When clustering the event bus between different Vert.x nodes on a network, the traffic is sent un-encrypted across the wire, so do not use this if you have confidential data to send and your Vert.x nodes are not on a trusted network.
But in 'Configuring the event bus' (https) section, it is mentioned we can provide keystore for secure communication.
The previous snippet depicts how you can use SSL connections for the event bus, instead of plain TCP connections.
So, which is correct? I can confirm this by running Vert.x in cluster mode with keystore and see the traffic over the wire myself. But wanted to get the confirmation from the experienced users/authors. Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2373
Don't route connection write promise failures in the pipeline · Issue #2373 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the ConnectionBase#writeToChannel(Object) method uses the channel void promise for the channel write. When an error occurs, the channel void promise will invoke the pipeline exception handling. This can create undesired loop where an API exception handling performs a write operations that fails and invoke the same exception handler again for its own failure.
Instead we create our own void promise that won't fire the exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2374
Uncaught exception in Netty pipeline · Issue #2374 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
While running servers with vert.x 3.5.1 (vertx + vertx web), I got
"An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception."
The exception itself is an java.lang.IllegalArgumentException thrown by io.netty.handler.codec.http.HttpVersion either for empty version or invalid version.
So far I was not able torreproduce this error with a simple example, but here some observations :
If I send a valid HTTP request (with keep alive) and then an invalid HTTP request (like GET / HTTP/dummy), I got the IllegalArgumentException, but it is actually catched and logged by vertx ConnectionBase.
In the case where I got  "An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.", it is actually not caught by vert.x at all, and it is looping forever (like the error is not "consumed" from the event loop).
Here the stack trace
An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2375
Http1xOrH2CHandler should remove itself before firing the buffer · Issue #2375 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Http1xOrH2CHandler removes itself after firing the buffer which leads the Http1xOrH2CHandler to process a decoded error (that is fired in the pipeline to be treated like a network error). It should should remove itself before, since once the protocol has been identified, it should not interact anymore with the pipeline
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2376
net client idle in ms · Issue #2376 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am using vertx redis and I need to idle timeout in less than a seconds. I am using Redis vertx and I have checked that NetClientImpl always call IdleStateHandler in a way that it will idle in seconds.
Do you support only TimeUnit.SECONDS for a specific reason ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2377
The http server request exception handler should observe the response as closed on a close event · Issue #2377 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2379
Typo prevents configuration of EpollTransport · Issue #2379 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside of Transport.java, the configure method has the following:
But inside EpollTransport.java it is looking for:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2380
The HTTP server should always resume the request when the last chunk is processed · Issue #2380 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 3.5.1
The code was taken from the BodyHandler. Using the following code and a small file (2 byte) causes the problem
The second request is stuck and the vert.x handler is never called. Problem is associated with HttpServerFileUploadImpl.streamToFileSystem.
The resume() Method sometimes instantly calls the endHandler (without another eventloop iteration). When this happens the HTTP connection cannot be used for further requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2381
CONTENT_LENGTH should be set in the end method not write · Issue #2381 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I encountered a behaviour which looks weird when I was trying to create a seperate Handler that ends a Response. [For a reason!].
As a solution, I think we should write the headers only in the end method and if we're trying to and not while writing.
If you agree, let me know to create a PR.
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2382
HTTP Download Server takes very long to open large file · Issue #2382 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to setup two HTTP Servers.
Server1 is user facing, accepting REST request to download large file. Server1 then forward request to Server2 to get file.
Server2 will open file from filesystem and send it back.
Results:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2384
can Future restore？ · Issue #2384 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had a method as:
When catch a exception， happend:
how can i do? or is there any better way to write it?
This will solve the problem, but it will be so bad
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2385
public interface VertxInternal exposes package private classes WorkerPool and WorkerExecutorImpl · Issue #2385 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to implement a wrapper for Vertx instance that would do some custom stuff before delegating to actual instance. Implementing only Vertx interface would not work(in some cases Vertx instance is casted to VertxInternal inside vertx libs).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2386
Provide a value version of runOnContext on ContextInternal · Issue #2386 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes we write this idiomatic code:
would allow to simply write instead:
without an extra capturing lambda and be more concise and remains readable.
I'm targetting ContextInternal to avoid overloading Context with an extra method that would create unnecessary API noise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2388
Http1xServerConnection's processMessage seems to hang one of my event-loops · Issue #2388 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our server is using Vertx 3.5.1, it handles thousands of request/sec from thousands of JS clients. Those JS clients sometimes create rubbish request with strange chars
When processing query parameters with invalid chars like the one above we don't have problems because Http1xServerConnection's processMessage always return true, this can be check with the following stack trace
But when request.decoderResult().isFailure() returns true (from Http1xServerConnection's processMessage) and after invoking handleError method, the request is queued again (Http1xServerConnection's handleMessage), so event loop will handle it again later
Actually I am "quite sure" about this because now this machine does not receive any request, it has been disconnected from the load balancer, and this event-loop is still using lots of resources
I attach some stack traces of the problematic event-loop
Stack Trace
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2390
Netty upgrade to 4.1.22.Final · Issue #2390 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
Im using JDK 10 and have encountered an issue with the version of netty being used(netty/netty#7768, where the owner said on the 4th of may, "Upgrade to latest Netty version as it was fixed there")
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2391
Time values can be specified with a time unit · Issue #2391 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2396
oAuth introspect token works only with POST url · Issue #2396 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi We are working to implement oAuth2 in our vertx application. We have configured path in while creating oAuth2Oauth and tokens are generated. When we try to introspect token using oauth2oauth.introspecttoken() method it throws error "405 Method not allowed". Reason is introspect token method fetches the introspect URL using POST. But our r provider is custom oauth provider and the validate URL is GET URL.
So is it possible to provide http method as config to oAuth provider or can we create custom oauth provider. If so can anyone please refer a link for custom oAuth provider. Many thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2397
Change the method signature for CompositeFuture#all · Issue #2397 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please change the signature of this method from:
in order to call it with any type of Future (like List<Future<Void>>).
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2398
javax.net.ssl.SSLHandshakeException: General SSLEngine problem · Issue #2398 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I use WebClient to send a HTTPS request, I get an error:
Here is my code:
Can you help me,thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2400
Can't capture javax.net.ssl.SSLHandshakeException when using HttpClient · Issue #2400 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can't capture javax.net.ssl.SSLHandshakeException when using HttpClient.
See the following snippet:
When using postIt method and my-cert does not match the cert in the server I get:
But this exception happens at Netty level apparently and I'm not able to capture it to report it to interested parties.
Is there anyway to handle this exception? I'm also integrating the service with Prometheus but I don't see Vertx publishing any of these stats.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2402
Callback Hell is painful and Quasar is also ugly · Issue #2402 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is there any good solutions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2405
read wrong audio data from HttpServerRequest.getFormAttribute. UTF8 will change illegal byte to EFBFBD. · Issue #2405 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
but we read wrong data from HttpServerRequest.getFormAttribute. UTF8 will change illegal byte to EFBFBD.
didn't find any method to read binary data from vertx HttpServerRequest like like getReader or others
Do you have any comments about this? thank you in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2406
Cleanup expired HTTP client connection every second instead of milliseconds · Issue #2406 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
starts a Timer with 1 milli-second delay to search for closeable/evictable connections.
Is it really required to do this so often? - Especially as we can define the keep-alive time only as whole seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2407
Datagram socket resolve hostname even on IP address  · Issue #2407 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are sending packets directly to IP and noticed that it's trying to resolve hostname. https://git.io/vpmfI addr.isUnresolved()) are always true.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2409
Use CloudFlare 1.1.1.1 as default DNS fallback instead Google's public DNS 8.8.8.8 and 8.8.8.4 · Issue #2409 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2410
Feature - Provide a wrapping of an InputStream into a ReadStream<Buffer> · Issue #2410 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This comes after these discussions.
@cescoffier already provided an implementation here.
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2411
HttpServerResponse::exceptionHandler not called when any HttpServerResponseImpl::headersEndHandler throws · Issue #2411 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java, Vert.x 3.5.0
When an exception occurs within one of HttpServerResponseImpl::headersEndHandler this exception does not seem to be processed by HttpServerResponse::exceptionHandler and the response remains not ended. The following tests proves this on the example of an incorrect cookie (triggering an IllegalArgumentException in cookie.encode()), which leaves the server response in limbo:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2412
Missing VertxGen annotation on JsonEventType · Issue #2412 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This enum misses the VertxGen annotation making it impossible to be used by non java languages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2413
Native transport SO_REUSEPORT should be set on server bootstrap as option instead of child option · Issue #2413 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2414
Report HTTP client pool internal failures as connect errors · Issue #2414 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2415
HttpClient pool should use a LIFO policy instead of a FIFO policy · Issue #2415 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2416
HTTP client requests should always prefix request URI with / for absolute queries · Issue #2416 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2417
Async map behaviour differs in local and clustered mode · Issue #2417 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For example, following code fails in local mode, but works fine in clustered one:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2418
Possible deadlock when trying to get multiple locks · Issue #2418 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is the code, which illustrates the problem.
The Consumer verticle acuires lock1 and gets stuck.
I have reproduced the same problem using HazelcastClusterManager and IgniteClusterManager.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2419
Use a stack-less TimeoutException when timing out an HttpClientRequest  · Issue #2419 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2423
Unable to disable file caching in 3.5.1 in intelliJ IDEA · Issue #2423 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Static files in the JAR are not being "re-read" after they've been changed during development, while the app/server is running. The server has to be restarted after each change instead.
Inside my public static void main(String[] args) method, before any vert.x code, I have System.setProperty("vertx.disableFileCaching", "true");
Storing my static files on a file system path instead would be cumbersome due to this project's needs.
I have consulted Link #1514 and Link #1528, but I am not having success so far.
My development environment:
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2424
Showstopper: NoSuchMethodError during bootstrap · Issue #2424 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When calling either "vertx.clusteredVertx(...);" or "vertx.Vertx.vertx();" the following exception gets thrown in 3.5.1:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2425
io.vertx.core.buffer.Buffer tightly coupled with io.netty.buffer.ByteBuf · Issue #2425 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Buffer interface is tightly coupled with the netty ByteBuf. IMO this is an unfortunate design and the Buffer should be completely third-party classes agnostic.
The default implementation offered by Vert.x could rely on the netty ByteBuf (essentially wrapping it), but other implementations should be allowed without using the ByteBuf
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2427
Behavior when clustered Vertx instance crashes and Lock is acquired · Issue #2427 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using Vertx with Hazelcast as the cluster manager and I am stuck with a problem on how to deal with the situation where a Vertx node acquires a lock and crashes right after it. As no body else will be able to acquire that Lock, there is no way to release it with without recycling the cluster. Is that the expected behavior or am I missing something? Will Hazelcast deal with a crashing node that's holding a Lock?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2428
Decouple the FileResolver from a Vertx instance · Issue #2428 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motiviation: currently the FileResolver is in the io.vertx.core.impl package and owns a Vertx instance. The only reason it needs this instance is to delete the cache dir when it is closed, because it actually needs to schedule a blocking file deletion (via the filesystem instance).
Change: decouple the FileResolver from the Vertx instance and the FileSystem implementation so it can be used without Vertx or FileResolver. The close operation is now blocking and the callers run it in an execute internal blocking operation (Vert.x close) or a thread (at JVM shutdown).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2430
Metrics SPI should not be exposed measured instances · Issue #2430 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation : currently the Metrics SPI expose the measured instances to the SPI implementation when at creation of the corresponding metrics instance. This instance is actually not really used by the implementations (Vertx instance was used by micrometer metrics instance to create an HTTP server but in practice it can start its own embedded instance as there is no much gain to create a new one). One issue providing the Vertx instance is that the provided instance was a racy publication of the Vertx instance complicated to solve (because the MetricsFactory needs to be called early for creating the pool metrics). The metrics event bus initialised callback is also not used in practice (it used to be by hawkular implementation), only by micrometer metrics as a signal to initialise the backend which can be replaced by a simple initialisation in the micrometer metrics factory.
Change : do not provide measured instances when calling the SPI for creating a metrics implementation. Callback methods have also been renamed to contain the type of the metrics created (i.e createMetrics -> createEventBusMetrics, etc...). The event bus initialised callback is removed as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2431
Use cases for multithreaded worker verticles · Issue #2431 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MultiThreaded worker verticles are an extension to worker verticles. Like with usual worker verticles, events are handled on worker pool threads. But they can be executed by different threads concurrently, which means the verticle must manage its own state to be visible between threads.
There are many parts of Vert.x which simply doesn't support them. For example, you can't create an HTTP server on a MT worker verticle.
Also, we have seen many new users, in particular those experienced with Spring or Java EE, starting directly with MT worker verticles and adding as many threads as possible with the impression it would help get the best performance results. But this is really counter-productive.
We are looking for relevant use cases for MT worker verticles. If you are using them, can you please describe in a comment to this issue what you are doing and why you couldn't do with standard (event loop) or usual worker verticles?
We want to determine if MT worker verticles do more harm than good. Ultimately, if they are simply an anti-pattern, we could deprecate and remove them after a few releases.
Looking forward to your feedback, thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2432
Support for Consumer Groups · Issue #2432 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
First of all great work on vert.x, it is really enjoyable to work with and such a powerful tool in such a small package. But recently I came across a missing vert.x feature that if implemented would make the appeal of vert.x's event bus much greater.
As far as I can see there is no direct support for Consumer Groups in vert.x, and this is a real pity.
By consumer groups I mean a set of consumers that would listen to published messages on a same address but with only at most one of these consumers getting the message. This would allow us to do load balancing for published messages. Load balancing already works out of the box for send messages (point-to-point), and without it published messages have only limited useful use cases.
Without this, published message processing does not scale horizontally as all messages must be processed by every single verticle register as consumer (i.e. no load balancing).
Having Consumer Groups would make the event bus allot more powerful and should not be that hard to implement. I suppose that it would be possible to set this up with existing tools, but it would require to
hand craft an API for subscribing to consumer groups,
have verticles that manage these groups subscription and message distribution
hold the subscription information in a distributed data structure.
All possible but better provided by a vert.x api.
In code, I am looking for something like that
Where the name of ProductStatsVerticle.class is used as the name of the consumer group. Variants with a String consumer group name should also exist.
I'd like to have some opinions on this. Maybe there are already 3rd party implementation that could be inspiring, or a pattern that easily permits this feature?
Best regards,
Thim.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2433
Question-How can i contribute to this repository · Issue #2433 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a great repository , i would like to work as contributor, Can you please help me to become contributor.Or suggest me the way.
I have read readme for contributor, but so far i have not seen any need help tasks or issues which i can pick up.
You guys are instantly responding on issues, so i do not have any chance to look into it.
I tried commenting on one but later i got comment stating that it is already closed.
I have pulled the repository and looking into the code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2434
Missing @Nullable annotations · Issue #2434 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Building this list so that we can track any missing @Nullable annotation until 3.6 is released
Currently, the executeBlocking result handler type is not annotated with @Nullable.
As a result, the generated Rxified API returns a Single<T>. But it's quite common to use Future<Void> for a blocking task which does not need to return any result.
Then if the user simply invoke future.complete(), the program fails at runtime.
As a workaround, the user can use a Future<Object> and invoke complete() with any non-null value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2435
Invalid SSL configuration does not callback the server listen method handler · Issue #2435 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When HTTP server is initialized with invalid SSL configuration (e.g. invalid path to keystore file), it does not call the listen handler, breaking the async calls chain.
Example:
In addition to that, the verticle deployment code does not call the deployment completion handler.
Example:
So far I see that the problem might be caused by the fact that actualServer is not set to anything at the point of this check, but listening is already set to true, so executeCloseDone above is not called either.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2436
Move the data object converter generator to codegen · Issue #2436 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2437
Improve connection exception logging · Issue #2437 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the connection base will log every error to a connection when an exception handler is not set, in particular connection RST. Let's only log the message like previously (pre 3.5.1) and the full stack trace when debug is enabled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2438
ClusteredEventBus racy initialization · Issue #2438 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It seems as if there is a case in the ClusteredEventBus (3.5.1) where a NPE can appear. After trying out some different cluster manager implementations the following NPE appear from time to time on a new instance when it is being launched. This is the NPE that appears:
Looking at the code for the ClusteredEventBus it seems as if the member "subs" can be null when the view changed handler is called before the ClusteredEventBus has started completely. The view changed handler is set in the constructor but the "subs" member is only given a value in the method "start(...)". I briefly looked at previous versions of the ClusteredEventBus and there has previously been a null-check in the view changed handler.
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2439
Vertx clustered racy initialization · Issue #2439 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation
Vertx clustered instances are not properly initialised in cluster mode.
Changes
Rework the creation of Vertx that leads to a non racy initialisation. Add init methods that allow to properly bootstrap the clustered vertx instance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2441
DNS requests are always sent with the flag 'RecursionDesired' set to true · Issue #2441 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should probably add a property to the class DnsClientOptions to support sending non recursive DNS requests. something like DnsClientOptions.isRecursionDesired() and DnsClientOptions.setRecursionDesired(boolean newValue)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2445
DnsClient: There is no option to enable the netty logger · Issue #2445 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2446
VertxHttpHeaders#add(CharSequence,CharSequence) does not used AsciiString cached hashcode value · Issue #2446 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation
It prevents AsciiString based headers to be used efficiently (using the cached
change
Replace the method body by the body of VertxHttpHeaders#add(CharSequence,Object) and have VertxHttpHeaders#add(CharSequence,Object) delegate to VertxHttpHeaders#add(CharSequence,CharSequence)
Microbenchmarks shows a significant improvement when optimised headers are used (hint before the optimization was only partially used). Note the benchmark is not used to justify the change, the change itself is very obvious. This was reported also with Java Flight Recorder hot methods showing a unusual call to AsciiString#hashCode(CharSequence) that calls PlatformDependent.hashCodeAscii(CharSequence ) instead of casting to AsciiString and using the cached value since the AsciiString was converted to String.

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2447
Refactor VertxHttpHeaders to remove duplicate code and delegate to CharSequence based methods · Issue #2447 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation
Currently VertxHttpHeaders has lot of duplicate code and not always uses the CharSequence based methods performing unnecessary work.
Changes
Refactor methods so the overloaded methods always delegate to the CharSequence version, this will keep only a single implementation and it will be the optimal version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2449
Correlate block thread checker with GC pauses · Issue #2449 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The block thread checker sometimes reports GC pauses as misbehaving blocking application.
The GC mbean emits notification about GC pauses (start time / end time) that could be used to mitigate this and avoid false positive.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2450
Return null for JsonObject.mapFrom(null) · Issue #2450 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2452
Use of system properties to configure cluster settings is not documented · Issue #2452 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using the command line or launcher API to launch vertx, it is possible to use system properties to configure values for the cluster properties found on the VertxOptions class, but there is no public documentation describing the naming convention for these properties.
There is a brief sentence indicating that it is possible to use system properties, but with no description of what the property names are:
You can also set system properties using:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2456
DNS client should support calling a DNS server over IpV6 · Issue #2456 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Step to reproduce:
Expected: The DnsClient should be able to call a Dns server over IpV4 or IpV6
As a sidenote, I also tried using the full IpV6 address "2001:4860:4860:0:0:0:0:8888" but it doesn't work as well.
If time permits, I'll investigate this issue and provide a fix for it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2457
Incorrect VertxHttp2Stream checkNextTick implementation · Issue #2457 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm building a HTTP2 proxy with Vert.x 3.5.1, when I try to migrate to 3.5.2.CR1, NullPointerException may happen when requests come
I guess this might be caused when pending deque is empty, see
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2459
ClosedChannelException occurs when writing · Issue #2459 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm building a server with Vert.x 3.5.1, after I use setIdleTimeout() to setup a idle timeout for some sockets, sockets will be closed by timeout. I keep writing to the sockets continuously,  some sockets may throw java.nio.channels.ClosedChannelException.
Here's what I have tried, the exception may be thrown.
I wrote to sockets by write() method from other workers continuously, stop when endHandler or closeHandler invoked.
I tried to send buffer to WriteHandlerId through EventBus. When a socket is closed, the WriteHandlerId will automatically unregisterd.
I tried with WebSocket and Socket, they both throw the exception.
How to avoid this exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2460
Proxy multipart/form-data with API-Gateway · Issue #2460 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry for bad English.
I made simple solution dealing with multipart.
My reference is vertx-blueprint-microservice which use MSA.
I got problem How can I handle multipart.
PROBLEM IS HANGING RESPONSE.
hanging point is  toReq.end(context.getBody());
I don't know how can I solve this.
I doubt that SERVICE can't accept multipart, however
this is succeed. it's wierd.
Is there any more example how can I handle multipart proxying?
PS
I saw this repo in vertx homepage.
I think this means quite important reference for understanding vertx.
However this repo looks dead. There is no response at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2461
WebSocket end handler should be called immediately to signal stream ended · Issue #2461 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In NetSocketImpl:
In WebSocketImplBase:
I set a closed flag in the endHandler. I will stop write to the socket, if the socket has the closed flag. However IllegalStateException: WebSocket is closed will be thrown by WebSocket sometimes. I modify the code snippet in WebSocketImplBase according to NetSocketImpl, Then the IllegalStateException never occurs again :
Is it a proper fix?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2464
WorkExecutorImpls are not removed from closeHooks when they are closed · Issue #2464 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a WorkExecutor is created via a vertx.createSharedWorkerExecutor(...) call, a reference to the WorkExecutor is added to the closeHooks for the current Context:
However, when the WorkerExecutor is closed, the reference is not removed from closeHooks, resulting in a leak:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2465
Add ability to set queueing strategy for WorkerPool · Issue #2465 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the moment the workerPool in VertxImpl is initialized as follows:
This creates an underlying ThreadPoolExecutor with an unbounded LinkedBlockingQueue
When our HTTP server is under immense load the queue grows which causes our latencies to grow unbounded.
We would prefer to fail fast or at least set a fixed size for the worker queue.
How do you feel about a new VertxOptions#workerPoolQueueCapacity ?
I could provide the accompanying PR as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2470
Http header CR / LF validation · Issue #2470 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation
Currently HttpClientRequest and HttpServerResponse don't check wether header name or value contain \r or \n chars. Of course developers are fully responsible for http headers set and
such incorrect value is likely unintended. Forbidding it prevents HTTP header injection for application that omit to check headers.
change
throw an IllegalArgumentException when a header name or value contains \r or \n char
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2474
vert.x 3.5.1 co.paralleluniverse.fibers.instrument.UnableToInstrumentException · Issue #2474 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I update vert.x from version 3.5.0 to 3.5.1,project run with errors,  this is my shell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2476
Launcher system properties are not propagated when the verticle runs as background process (start) · Issue #2476 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The file.encoding setting is valid when the trial java -jar command starts, but it does not work with the start parameter.(Vert.x 3.5.1) Here is an example:
This is the MainVerticle:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2477
Don't keep a reference in the HTTP pool connection listener to the connection waiter · Issue #2477 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2480
Windows redeploy does not provide valid inline verticle configuration · Issue #2480 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
env : Windows 10 pro.
The Java process builder now removes double quotes in process arguments (https) to conform to Windows CLI parsing
This affects the Vert.x redeploy mode with inline configuration which contains double quotes and the JSON will not be parsed by the process created by the launcher, the Verticle will not get the expected configuration.
On Windows we should escape this differently by surrounding with double quotes and using a \ char to escape inner double quotes (A double quotation mark preceded by a backslash (") is interpreted as a literal double quotation mark character (").)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2483
some dependence does not contain version such as netty in pom.xm · Issue #2483 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
clone project down my local,but some dependence dose not have contain version suan as netty in pom.xml
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2484
Internal references to local Locks taken using SharedData.getLock() are not cleaned up · Issue #2484 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Every time a unique lock name is taken via SharedData.getLock(...), it gets added to a Map inside of SharedDataImpl. Currently, entries added to this Map are never removed, even if all references to the lock have been released, and there are no pending waiters. This means the Map can grow infinitely if an application takes locks using generated names, rather than hard-coded ones. To avoid this, entries could be removed from the internal map at the point the lock is released, as long as there are no pending waiters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2485
 zookeeper service discovery is not working in ECS Dockers · Issue #2485 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am trying to deploy my micro services through docker in AWS ECS cluster, I am able to deploy the containers and services are registered with Zookeeper. Once registration is happend, microservices are not talking each other with the help of zookeeper. Can you please help on that.
Regards
Here is the log from Zookeeper, which shows connection established from docker containers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2486
Websocket client and server don't send back close frame in closing handshake  · Issue #2486 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue
While using vertx to implement a websocket server, certain websocket client library (okhttp) got failure callback when closing the websocket from its side.
After doing a package capture, I found vertx didn't respond a CLOSE frame after receiving one. This behavior doesn't follow the RFC.
I checked vertx source code, and did some debug. I believe there is a bug at Line 699. From the comment, these lines of code intend to Echo back close frame.
Actually the Line 699 would always fail.
After adding some debug code there, it actually throws the following exception. The wrFrame cannot be passed to writeAndFlush directly.
Solution
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2487
Event Bus: ability to set discard handler on MessageConsumer · Issue #2487 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version - 3.5.1
The underlying implementation class (HandlerRegistration) has a discard handler, but setting this is not exposed (the method has a comment about it being for test use only).  Having the ability to find out when messages are discarded is actually useful when managing workloads at scale.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2488
Event Bus: ability to set discard handler on MessageConsumer · Issue #2488 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version - 3.5.1
The underlying implementation class (HandlerRegistration) has a discard handler, but setting this is not exposed (the method has a comment about it being for test use only).  Having the ability to find out when messages are discarded is actually useful when managing workloads at scale.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2489
Event Bus:  "Handlers.choose()" should deprioritize paused handlers · Issue #2489 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version -- 3.5.1
Currently when a message is handled by the bus the "choose" code will simply pick the next handler in line.  If it turns out that handler is paused, the message will get dropped on the pending queue and possibly discarded, even if there are other handlers on the same address that are available to process the message.  It would be preferable if it gave preference to handlers that are not paused over those that are when making this choice.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2490
FutureImpl shall release the handler after completion · Issue #2490 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently FutureImpl keeps a reference on the handler after it has been completed. As side effect it can promote objects to survivor spaces. Since the future is completed there is no need to keep the reference onto the handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2492
Deploying HelloWorld Verticle in OpenShift v3.7.46 ThreadDumps · Issue #2492 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Thought I would start with this group, but it may be more of an OpenShift issue.
We are seeing threads block deploying the simplest of applications.  We are new to Vertx, so it could be how we have something configured in the Dockerfile.  Attached is the console dump from the OpenShift pod, and the Dockerfile we use to build the image (we do not use fabric8 yet to deploy to our main OpenShift clusters).
OpenShift Master: v3.7.46
Vertx Maven Version: 3.5.2.CR3
I can run the same, generated container locally in Docker (version 18.03) on CentOs without seeing these issues.
Thanks for any help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2493
DnsException improvements · Issue #2493 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
shall not capture stack trace
provide a meaningful to string
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2494
Can I use vert.x only with memory in JVM heap? · Issue #2494 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I build a gateway application with vert.x,version is 3.5.1
Use eventBus between application comunication.
Use vert.x core httpclient for visit out API .
I find some problem as follow:
1.When application transfer about 130MBit/s in eventBus,sometimes ping check timeOut,and reconnect,
then the receive rate in vert.x metrics (eventbus messages oneMinuteRate) going unstable,and many
connection established between both ends of eventBus port.
2.HttpClient used in my application for visit out restful API. I set the timeout param as 3s like
,but I set a variable now as Instant.now().toEpochMilli(),then when respone, Instant.now().toEpochMilli()- now =gap, this gap large than 3s.Sometimes this gap go to 10s.
Here is my question:
1.eventBus use netty direct memory ,I set the propertity io.netty.noUnsafe=true, but it doesn't
work,so i met a PooledUnsafeDirectByteBuf out of memory.Is there any propertity can work?
2.When timeoutHandler called , this httpRequest throw an TimeoutException
(logic in io.vertx.core.http.impl.HttpClientRequestBase#timeout), then may this request is over.
When there is a response back after timeout, where can it be cached or handled?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2495
Java 10 issue: java.lang.IncompatibleClassChangeError: Method io.vertx.core.Future.succeededFuture()Lio/vertx/core/Future; must be InterfaceMethodref constant  · Issue #2495 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FWIW im using some compiled groovy inside a java project, but not vertx-lang-groovy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2496
eventBus.send blocks in for loop · Issue #2496 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just found that eventBus.send blocks when using for loop, it will finish all the send, then process the reply.
Is there a way I can have interleave send/receive when usingh for loop?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2497
vertx-jdbc-client  · Issue #2497 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,  Today I went to see  vertx-jdbc-client and found a problem,  all get connectin and execute sql in the same thread，especially only one thread.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2498
NetServer bootstrap should set SO_LINGER option on the child channel instead of the server channel · Issue #2498 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
If we use setSoLinger we only get:
Code right now is:
Hope somebody can help on this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2506
Hard-coded HTTPS scheme regardless of SSL usage · Issue #2506 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The https scheme is passed even if ssl is not used, should be easy to fix by checking via isSsl() then use "http" or "https" accordingly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2508
HttpServer connection lifecycle rework · Issue #2508 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Http1xServerConnection class handles all HTTP messages in a single queue. This refactoring removes the global queue and instead uses a buffer queue in each HttpServerRequest implementation. Pipelined requests are now handled in the connection as a linked queue of HttpServerRequest where the head is the request sending a response and the tail is the request receiving the HTTP content buffers. In normal case the head and tail are the same request, in pipelined case a request may have been fully received but the response not yet sent and thus head tail.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2511
AsyncFile.read allocate two buffer to read the data · Issue #2511 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AsyncFile.read allocate two buffers to read the data makes it very inefficient.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2512
Initial Connection Pool on HttpClient · Issue #2512 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, Vertx HttpClientOptions  only has a max limit on a HttpClient pool (both HTTP/1 and HTTP/2). Connections are opened only under a certain load. Is it possible to start the HttpClient with a initial number of connections?
The motivation for this comes from running applications in a Kubernetes environment where the HttpClient is trying to hit a service cluster. In my case only one of the pods is getting connected to while the rest sit idle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2513
OAuth2Auth does not extend AuthProvider in Scala dialect · Issue #2513 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Vertx version 3.5.2
I am trying to build social login with GithubAuth using Scala dialect of the Vertx.
To avoid repetitive authentication calls to the server i want to use session.
According to the docs code should look like this:
The last line however does not compile as OAuth2Auth does not extend AuthProvider
I managed to make it work by using the following trick:
router.route.handler(UserSessionHandler.create(AuthProvider(authProvider.asJava.asInstanceOf[JAuthProvider])))
It looks like the Scala API is incomplete.
Thanks,
Jakub
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2514
HttpClient should behave according to the HTTP version returned by the server and not sent by the client · Issue #2514 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Full discussion with Gists is available here.
The problem goes as follows: vert.x http client submits 2 sequential requests to a http1.0 server.
First requests receives a response as expected, second one fails with VertxException.
The issue seems to be introduced in 3.5.2 and didn't exist in 3.5.1.
Fixing When the response does not contain Connection: Keep-alive in HTTP/1.0, the client has to assume Connection: close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2515
Websocket queue not respected in timer/periodic/blocking · Issue #2515 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello everyone, I'm building a client/server process to benchmark some databases. The server basically sends out data at a given rate, and clients need to consume that data at the best of their abilities. I've chosen websockets to achieve this, and made a vertx implementation.
I've now reached a problem: the server does not seem to discard messages when I expect them to. For example: one fast DB and one slow DB are consuming the same stream. As I set the queue size small, I would expect the small DB's client to trigger some dropped messages, however, the fast and the small DB's clients are both consuming the data at the same rate.
I've made a small MWE and the following caught my eye: when I use the webSocket variable within a setPeriodic, setTimer or executeBlocking, the queue seems  to be ignored. I guess I'm misusing vertx in some way, but in the case I'm not, hopefully I'll get an answer through here. Does anyone have an idea? Should I implement this 'huge stream of unending data' in a different way (i'm doing it in batches now, through setPeriodic)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2517
Disable HttpClient TCP idle timeout when connection is in the pool · Issue #2517 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that in a corner case, we have a lot of test failure where the connection is not used very often. For example, I make a timeout to be of 10 seconds and I make a call every 10 seconds exactly. Every once in while, my request fails with VertxException (Connection is closed) since the checkout connection is closed right after the connection is polled from the connection pool. I only noticed this in 3.5.2 but not in 3.4.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2519
HttpServer does not clean the channel pipeline after HTTP/1 upgrade to H2C · Issue #2519 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently after an HTTP/1 to H2C upgrade the HTTP server does not actually remove the codecs from the channel pipeline leading the HTTP decoder to decode H2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2520
The Kotlin documentation for vert.x has errors in it. · Issue #2520 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I checked the documentation for Kotlin on this page and it has some errors in it where code blocks should have been:

This is the same part from the Java docs:

I did not find the repo for the docs so I'm not sure this is the right place to mention this. This problem persisted for at least a year so I thought it might worth mentioning. I'd love to have good Kotlin docs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2521
MultiMap with putIfAbsent method · Issue #2521 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
The MultiMap interface could implement the method putIfAbsent like the Map interface. It's been needed in the PR 960 of vertx-web and I think it could be a very util method in more cases.
I could implement it if the enhancement is approved.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2522
HttpClient response chunk handling rework · Issue #2522 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Rework the HttpClient request chunk handling that is split between HttpClientResponse and HttpClientStream so it is fully managed by the stream. The logic is now encapsulated in the stream and it simplifies the logic of the client response that does not care anymore of paused trailers and paused end chunk (that was only used by HTTP/1).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2524
There should be a handler which is guaranteed to be called when the request is done · Issue #2524 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There should be a handler which is guaranteed to be called when the request is done so that we can perform the resource cleanup. Currently, there are some hooks but it is hard to deal with.
On the server side, you have .addBodyEndHandler() and .closeHandler(). On the client side, it is even more confusing since you have to hook both to the HttpClientRequest.exceptionHandler() and HttpClientResponse.exceptionHandler(), HttpClientResponse.endHandler() while it does not even have an analogous .closeHandler().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2525
acceptEventLoopGroup · Issue #2525 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Why didn't netServer use the acceptEventLoopGroup ？
and  I looked acceptEventLoopGroup only use for httpServer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2530
problem with vertx-config-yaml · Issue #2530 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I added  vertx-config-yaml and vertx-config in my pom.xml,
and it worked when I run my tests.
but when I package this project to a fatjar and run ,
it throws Exception:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2531
Use of wildcards in Pump · Issue #2531 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The declaration of static pump function from Pump class should be changed to allow use of wildcards.
Instead of
it should be
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2532
HttpClient idle state handler should be added first when the connection is borrowed from the pool · Issue #2532 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient adds the IdleStateHandler before the handler, relying on the handler presence. With HTTP/2 clear text upgrade the handler name cannot be preserved and therefore adding the idle state handler fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2533
HttpClient must use the http scheme for non SSL connections · Issue #2533 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when the HttpClient sends an HTTP/2 request, it uses the https scheme unconditionally. The scheme decision should look whether the connection uses TLS or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2534
Event loop context executing with wrong thread · Issue #2534 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running it on a AWS instance, it shouldn't matter but maybe network performance is important in case this is caused by a race condition.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2535
Access to no existing routing · Issue #2535 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Access to no existing routing,return Resource not found ,why not Get into failureHandler !
Such as default access / or access that does not exist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2536
Create common interface for executeBlocking methods · Issue #2536 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The executeBlocking methods are common between the interfaces WorkerExecutor and Context. It would be an API convenience to have WorkerExecutor and Context be extensions of a common interface that supplies the two executeBlocking methods.
Then something like the following could be done:
Currently, makeManyBlockingCalls needs to be overloaded to accept a Context or WorkerExecutor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2537
PostgreSQL message/record size · Issue #2537 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In BaseSQLClient.class package io.vertx.ext.asyncsql.impl  dependency there is a limit for a record size set to 16777216. The internal config parameter name is maximumMessageSize.
When trying to download a large file from the database, the server produces an error:
Unfortunately there is no way to change the limit without the code modification (which I temporarily did)
It would be useful to be able to set that limit up in JsonObject config (additional configuration key)
How can I get large files from the database?
Best regards
ldvhome
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2538
is there any way to implement actors model with vertx? · Issue #2538 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I know Akka and it's acotrs is very powerful.
My question is know how to implement actors model with vertx?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2539
Update to netty 4.1.25.Final and netty-tcnative 2.0.8.Final · Issue #2539 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2540
mock websocket client connect, but throw NullPointException · Issue #2540 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2541
Exception not handled in some cases · Issue #2541 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I saw this in our log file. Is it something that should be fixed? I suspected that it might have something to do with websocket but I can't be sure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2542
Limit client connection count · Issue #2542 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,we are heavy use vert.x, and we want limit active client connection count both in HttpServer and NetServer.
If server had accepted certain amount of connection, new connection need reject for overload protection.
Any good idea ?
Best Regards & Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2544
Vertx/Netty is appending "=" in query parameter. · Issue #2544 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using Vertx 3.5.0 WebClient API to make HTTP call to remote server and given below is how my input URI look like :
In HttpClientContext Vertx is calling io.netty.handler.codec.http.QueryStringEncoder, which append "=" even though it wasn't there in actual input provided to Vertx.
From QueryStringEncoder:
So actual URI received by remote server looks like below:
If you notice in above URL, Vertx is encoding the parameter and also appending extra "=" at the end.
This issue isn't there if we use HttpClient API instead of WebClient API. Unfortunately the remote server doesn't like this extra "=" added to query and encoded query, and fails hard. This remote system can't be updated to handle this behavior because if doesn't belong to us.
Moving back to HttpClient will be very expensive to us because of amount of code change. Looking forward to your feedback. We are open for suggestions, and we can create a PR once agreed upon the solution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2547
Provide Elliptic Curve format for key and cert  · Issue #2547 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have tried to load ECDSA key pair that is formatted using following delimiters:
And I get the following error message:
Which make me wonder wheter there is any support for elliptic-curve cryptography or if I am missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2548
`FileResolver.unpackFromBundleURL()` does not detect a directory unless the requested path has a trailing '/' · Issue #2548 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As can be seen from this line of FileResolver.java, unpackFromBundleURL() does not account for the possibility of a resource path to be a directory - even if it doesn't end with a '/'.
For example, consider the following sample OSGi bundle structure (excluding manifests etc.):
If unpackFromBundleURL() is called for META-INF/resources/webjars/swagger-ui/3.17.4/, it will correctly reach the directory code here. However, if this method is called for META-INF/resources/webjars/swagger-ui/3.17.4, the else branch (for file resources) will be taken and the cache will be corrupted.
See #2549 for a fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2550
Use VertxOptions to configure class path resolving · Issue #2550 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class path resolving is currently enabled or disabled via System property.
In environments with multiple Vert.x-based applications the property will be set to the same value for all the applications running in the same JVM.
Adding a VertxOption field to override the System property would allow each Vert.x application in a JVM to decide individually whether to allow file class path resolving.
The use-case driving this issue is that we would like to use Vert.x as a client without any file system side effects (such as creating a .vertx directory), but we don't want to interfere with other Vert.x-based applications that may be running in the same JVM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2560
RecordParser should have an option to limit the record size · Issue #2560 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using RecordParser's delimited mode, it would be nice to somehow limit the maximum buffer size, to prevent misbehaving/malicious clients from exhausting server resources.
This could be achieved by exposing the buffer length, like so:
Another option would be to check the record size in RecordParserImpl.parseDelimited() and throw an exception, that could be handled inside the exceptionHandler:
Thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2562
Bug with HTTP trailers and GZIP compression? · Issue #2562 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys,
I think I might have found a bug in Vert.x 3.5.3 or Netty. If I enable GZIP compression on both my HTTP server and the client and then try to send an HTTP trailer I get the exception below.
I created a gist demonstrating the error:
As soon as I comment out one of the lines marked with // XXXXXXX the program works correctly.
Am I doing something wrong or is this actually a bug?
Cheers,
Michel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2563
Inadequate documentation for `SharedData.getLock()` · Issue #2563 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The docs for SharedData.getLock() do not specify the behaviour when there is competition in acquiring a lock. While non-determinism is expected when this is happening from multiple threads, it is also silent about what happens if I try to acquire the same lock sequentially in the same method:
From the code I can see that a local lock uses an ordered list of waiters, so I would expect that the first call would acquire the lock before before the 2nd (in the absence of timeout, and obviously with the possibility of there being interleaving acquisitions from other threads). But I've no idea whether these same semantics would also apply with a clustered lock. If the API doesn't guarantee any such semantics the Javadoc should probably explain that to avoid people accidentally relying on such behaviour.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2565
io\vertx\core\http\impl\HttpServerImpl  maybe error listen port · Issue #2565 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
has two line code use //fixme
we use async to remove id when happends error
but use sync to put id later on
then rarely
first remove
but sharedHttpServers has the id
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2566
Accessing Timers · Issue #2566 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be no way for an application to discover if a Timer is active, or to inspect the metadata of a timer.
The timeouts map (io.vertx.core.impl.VertxImpl#timeouts) is private, as is the timer data (io.vertx.core.impl.VertxImpl.InternalTimerHandler).  All that is possible is to cancel a timer.  Is there a mechanic for managing timers that isn't obvious?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2569
Not able to overwrite the default decoder · Issue #2569 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx version 3.5.1
Recently i migrated from vertx 2 to vertx 3.5.1. I am sending a value - %%SOME_VALUE%% in my paramater. But Vertx 3 throws error "invalid hex byte" while handling the request. I cannot change the format of the value due to some constraints but looking for some ways to handle within the vertx application. I am unable to overwrite the netty decoder used in vertx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2571
get byte[] from JDBC for GZIP decompression · Issue #2571 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HI I have compressed data as byte[], stored in DB table column. I need to get the byte[] and decompress it. But there is no direct method to get data as byte[] in vert.x jdbc. I tried using getBinary(0) , but it throws me below exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2572
error on vertx sendMail, io.vertx.core.impl.ContextImpl - Unhandled exception java.lang.NullPointerException: null · Issue #2572 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello i cannot catch null error on sending email
my code is like this :
and try to use this, but still cannot catch the error on failed :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2574
ReadStream fetch mode · Issue #2574 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A Vert.x stream isn't trivial to implement and actual adapters using request flow control (RxJava,Reactive-Streams) have to maintain an extra queue for buffering unrequested items until they are requested.
The ReadStream interface should be augmented with a fetch operation that allows to provide request based control. The stream interface continues to operate with pause/resume control that is easier to use (and also more realistic with actual transports such as TCP, as request based flow control has to prefetch for efficiency in practice).
The state changes from two states (paused / flowing) to (fetching[n] / flowing), fetching[0] is equivalent to pause.
A fetch method is added to ReadStream:
ReadStream is difficult to implement and it is often implemented multiples times. We want to provide a helper for implementation (Queue) that acts as a event driven queue relieving the implementor to handle threading, reentrancy and data races. Currently such queue is maintained in several places implicitly (like HttpServerRequest or AsyncFile) and sometimes not:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2575
SslHandler should use ref-count buffer · Issue #2575 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, it uses PartialPooledByteBufAllocator. Therefore, it does not pool the buffer which results in extra memory allocation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2576
HttpServer failed to listen java.lang.IllegalStateException · Issue #2576 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using latest vert.x core 3.5.3
When trying to create a Http server listen on either port 80 of 127.0.0.1, 0.0.0.0, or ::
will result in an exception java.lang.IllegalStateException: failed to create a new resolver
Command run: vertx run Test.java
Code used.
It is fine when I run on Mac OS but on a VPS (OVH) with centos 7 (firewall disabled) the Exception will be thrown and I can't get any content if I curl to the http end point.
On the same server if I yum install nginx and start it, it is fine on the same port. Only vertx had the problem on listen on the port. This vps instance is with both ipv4 and ipv6
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2577
HttpServerRequest#netSocket() improvements · Issue #2577 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServerRequest#netSocket() has a few problems:
when used with a CONNECT requests, the code is different for HTTP/1 and HTTP/2, HTTP/2 will send an header frame and HTTP/1 will not
the request/response lifecycle is not properly handled in all cases, when using a NetSocket the response should be marked as ended so it cannot be used anymore
the net socket should be obtained before the response is sent, assuming the handler has the still the ownership of the stream
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2584
JsonParser does not correctly perform flow control · Issue #2584 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient (with SSL)
JsonParser to process the response in objectValueMode
Default configuration in the rest of the parameters
When I receive a JSON object inside the handle, I make a parser.pause() to prevent the arrival of new events, however, I get to receive some more events before it really stays paused (3~5).
I think that this is because internally JsonParser does not check when processing the tokens if it is paused, sending all the buffer read so far by the HTTP client. The stream is already paused, but if in this buffer there are 4 json objects, the method "handle" will be called 4 times.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2585
/io/vertx/core/http/impl/HttpServerImpl.java should be able to asynchronously accept/reject Websocket handshake  · Issue #2585 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpServerImpl synchronously accepts or rejects the Websocket handshake:
I think we should probably make it async, in case we have an async operation (i.e. hitting an OAuth server with a token) that rejection depends on.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2586
Support temporary files and directories · Issue #2586 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice if io.vertx.core.file.FileSystem supported the creation of temporary files and directories (using java.nio.files.Files.createTempFileand java.nio.files.Files.createTempDirectory respectively)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2588
Provide default methods for metrics SPI · Issue #2588 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
we do have now, base (dummy) implementation of these but we should better provide default methods instead
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2590
NullPointerException when reporting a deployment failure without a completion handler · Issue #2590 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 3.5.3, when deploying a verticle using deployVerticle(Class<? extends Verticle, DeployOptions), it throws a NPE if the class is not public (default: package-private).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2593
HttpClient connection should be resumed when response ends · Issue #2593 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are running into a situation where an http client connection is paused when its last message is received.
This causes the paused connection to be recycled.
We think paused connections should be resumed when they are pooled.
A test to reproduce this behaviour:
If you think this is the correct fix, I do not mind to create a PR with the test and the fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2595
HTTP client upgrade to socket might lose buffers immediately sent by the server · Issue #2595 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP client upgrade to socket might lose buffers when these buffers are received in the same chunk than the HTTP response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2596
how to set netty vertion · Issue #2596 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when i use java vert.x 3.5.3 ,io.netty vertion is 4.1.19, but i got
i need to update io.netty to vertion 4.1.27, how to do? thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2375
Http1xOrH2CHandler should remove itself before firing the buffer · Issue #2375 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Http1xOrH2CHandler removes itself after firing the buffer which leads the Http1xOrH2CHandler to process a decoded error (that is fired in the pipeline to be treated like a network error). It should should remove itself before, since once the protocol has been identified, it should not interact anymore with the pipeline
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2376
net client idle in ms · Issue #2376 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am using vertx redis and I need to idle timeout in less than a seconds. I am using Redis vertx and I have checked that NetClientImpl always call IdleStateHandler in a way that it will idle in seconds.
Do you support only TimeUnit.SECONDS for a specific reason ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2377
The http server request exception handler should observe the response as closed on a close event · Issue #2377 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2379
Typo prevents configuration of EpollTransport · Issue #2379 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside of Transport.java, the configure method has the following:
But inside EpollTransport.java it is looking for:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2380
The HTTP server should always resume the request when the last chunk is processed · Issue #2380 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The code was taken from the BodyHandler. Using the following code and a small file (2 byte) causes the problem
The second request is stuck and the vert.x handler is never called. Problem is associated with HttpServerFileUploadImpl.streamToFileSystem.
The resume() Method sometimes instantly calls the endHandler (without another eventloop iteration). When this happens the HTTP connection cannot be used for further requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2381
CONTENT_LENGTH should be set in the end method not write · Issue #2381 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I encountered a behaviour which looks weird when I was trying to create a seperate Handler that ends a Response. [For a reason!].
As a solution, I think we should write the headers only in the end method and if we're trying to and not while writing.
If you agree, let me know to create a PR.
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2382
HTTP Download Server takes very long to open large file · Issue #2382 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to setup two HTTP Servers.
Server1 is user facing, accepting REST request to download large file. Server1 then forward request to Server2 to get file.
Server2 will open file from filesystem and send it back.
Results:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2384
can Future restore？ · Issue #2384 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had a method as:
When catch a exception， happend:
how can i do? or is there any better way to write it?
This will solve the problem, but it will be so bad
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2385
public interface VertxInternal exposes package private classes WorkerPool and WorkerExecutorImpl · Issue #2385 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to implement a wrapper for Vertx instance that would do some custom stuff before delegating to actual instance. Implementing only Vertx interface would not work(in some cases Vertx instance is casted to VertxInternal inside vertx libs).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2386
Provide a value version of runOnContext on ContextInternal · Issue #2386 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes we write this idiomatic code:
would allow to simply write instead:
context.runOnContext(result, callback);
without an extra capturing lambda and be more concise and remains readable.
I'm targetting ContextInternal to avoid overloading Context with an extra method that would create unnecessary API noise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2388
Http1xServerConnection's processMessage seems to hang one of my event-loops · Issue #2388 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our server is using Vertx 3.5.1, it handles thousands of request/sec from thousands of JS clients. Those JS clients sometimes create rubbish request with strange chars
When processing query parameters with invalid chars like the one above we don't have problems because Http1xServerConnection's processMessage always return true, this can be check with the following stack trace
But when request.decoderResult().isFailure() returns true (from Http1xServerConnection's processMessage) and after invoking handleError method, the request is queued again (Http1xServerConnection's  handleMessage), so event loop will handle it again later
Actually I am "quite sure" about this because now this machine does not receive any request, it has been disconnected from the load balancer, and this event-loop is still using lots of resources
I attach some stack traces of the problematic event-loop
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2390
Netty upgrade to 4.1.22.Final · Issue #2390 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
Im using JDK 10 and have encountered an issue with the version of netty being used(netty/netty#7768, where the owner said on the 4th of may, "Upgrade to latest Netty version as it was fixed there")
Language: Kotlin
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2391
Time values can be specified with a time unit · Issue #2391 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2396
oAuth introspect token works only with POST url · Issue #2396 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi We are working to implement oAuth2 in our vertx application. We have configured path in while creating oAuth2Oauth and tokens are generated. When we try to introspect token using oauth2oauth.introspecttoken() method it throws error "405 Method not allowed". Reason is introspect token method fetches the introspect URL using POST. But our r provider is custom oauth provider and the validate URL is GET URL.
So is it possible to provide http method as config to oAuth provider or can we create custom oauth provider. If so can anyone please refer a link for custom oAuth provider. Many thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2397
Change the method signature for CompositeFuture#all · Issue #2397 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please change the signature of this method from:
to
in order to call it with any type of Future (like List<Future<Void>>).
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2398
javax.net.ssl.SSLHandshakeException: General SSLEngine problem · Issue #2398 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I use WebClient to send a HTTPS request, I get an error:
Here is my code:
Can you help me,thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2400
Can't capture javax.net.ssl.SSLHandshakeException when using HttpClient · Issue #2400 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can't capture javax.net.ssl.SSLHandshakeException when using HttpClient.
See the following snippet:
When using postIt method and my-cert does not match the cert in the server I get:
But this exception happens at Netty level apparently and I'm not able to capture it to report it to interested parties.
Is there anyway to handle this exception? I'm also integrating the service with Prometheus but I don't see Vertx publishing any of these stats.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2402
Callback Hell is painful and Quasar is also ugly · Issue #2402 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is there any good solutions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2405
read wrong audio data from HttpServerRequest.getFormAttribute. UTF8 will change illegal byte to EFBFBD. · Issue #2405 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
but we read wrong data from HttpServerRequest.getFormAttribute. UTF8 will change illegal byte to EFBFBD.
didn't find any method to read binary data from vertx HttpServerRequest like like getReader or others
Do you have any comments about this? thank you in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2406
Cleanup expired HTTP client connection every second instead of milliseconds · Issue #2406 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
starts a Timer with 1 milli-second delay to search for closeable/evictable connections.
Is it really required to do this so often? - Especially as we can define the keep-alive time only as whole seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2407
Datagram socket resolve hostname even on IP address  · Issue #2407 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are sending packets directly to IP and noticed that it's trying to resolve hostname. https://git.io/vpmfI addr.isUnresolved()) are always true.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2409
Use CloudFlare 1.1.1.1 as default DNS fallback instead Google's public DNS 8.8.8.8 and 8.8.8.4 · Issue #2409 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2410
Feature - Provide a wrapping of an InputStream into a ReadStream<Buffer> · Issue #2410 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This comes after these discussions.
@cescoffier already provided an implementation here.
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2411
HttpServerResponse::exceptionHandler not called when any HttpServerResponseImpl::headersEndHandler throws · Issue #2411 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When an exception occurs within one of HttpServerResponseImpl::headersEndHandler this exception does not seem to be processed by HttpServerResponse::exceptionHandler and the response remains not ended. The following tests proves this on the example of an incorrect cookie (triggering an IllegalArgumentException in cookie.encode()), which leaves the server response in limbo:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2412
Missing VertxGen annotation on JsonEventType · Issue #2412 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This enum misses the VertxGen annotation making it impossible to be used by non java languages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2413
Native transport SO_REUSEPORT should be set on server bootstrap as option instead of child option · Issue #2413 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2414
Report HTTP client pool internal failures as connect errors · Issue #2414 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2415
HttpClient pool should use a LIFO policy instead of a FIFO policy · Issue #2415 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2416
HTTP client requests should always prefix request URI with / for absolute queries · Issue #2416 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2417
Async map behaviour differs in local and clustered mode · Issue #2417 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For example, following code fails in local mode, but works fine in clustered one:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2418
Possible deadlock when trying to get multiple locks · Issue #2418 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is the code, which illustrates the problem.
The Consumer verticle acuires lock1 and gets stuck.
I have reproduced the same problem using HazelcastClusterManager and IgniteClusterManager.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2419
Use a stack-less TimeoutException when timing out an HttpClientRequest  · Issue #2419 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2423
Unable to disable file caching in 3.5.1 in intelliJ IDEA · Issue #2423 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Static files in the JAR are not being "re-read" after they've been changed during development, while the app/server is running. The server has to be restarted after each change instead.
Inside my public static void main(String[] args) method, before any vert.x code, I have System.setProperty("vertx.disableFileCaching", "true");
Storing my static files on a file system path instead would be cumbersome due to this project's needs.
I have consulted Link #1514 and Link #1528, but I am not having success so far.
My development environment:
Here is the start method of the Verticle:
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2424
Showstopper: NoSuchMethodError during bootstrap · Issue #2424 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When calling either "vertx.clusteredVertx(...);" or "vertx.Vertx.vertx();" the following exception gets thrown in 3.5.1:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2425
io.vertx.core.buffer.Buffer tightly coupled with io.netty.buffer.ByteBuf · Issue #2425 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Buffer interface is tightly coupled with the netty ByteBuf. IMO this is an unfortunate design and the Buffer should be completely third-party classes agnostic.
The default implementation offered by Vert.x could rely on the netty ByteBuf (essentially wrapping it), but other implementations should be allowed without using the ByteBuf
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2427
Behavior when clustered Vertx instance crashes and Lock is acquired · Issue #2427 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using Vertx with Hazelcast as the cluster manager and I am stuck with a problem on how to deal with the situation where a Vertx node acquires a lock and crashes right after it. As no body else will be able to acquire that Lock, there is no way to release it with without recycling the cluster. Is that the expected behavior or am I missing something? Will Hazelcast deal with a crashing node that's holding a Lock?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2428
Decouple the FileResolver from a Vertx instance · Issue #2428 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motiviation: currently the FileResolver is in the io.vertx.core.impl package and owns a Vertx instance. The only reason it needs this instance is to delete the cache dir when it is closed, because it actually needs to schedule a blocking file deletion (via the filesystem instance).
Change: decouple the FileResolver from the Vertx instance and the FileSystem implementation so it can be used without Vertx or FileResolver. The close operation is now blocking and the callers run it in an execute internal blocking operation (Vert.x close) or a thread (at JVM shutdown).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2430
Metrics SPI should not be exposed measured instances · Issue #2430 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation : currently the Metrics SPI expose the measured instances to the SPI implementation when at creation of the corresponding metrics instance. This instance is actually not really used by the implementations (Vertx instance was used by micrometer metrics instance to create an HTTP server but in practice it can start its own embedded instance as there is no much gain to create a new one). One issue providing the Vertx instance is that the provided instance was a racy publication of the Vertx instance complicated to solve (because the MetricsFactory needs to be called early for creating the pool metrics). The metrics event bus initialised callback is also not used in practice (it used to be by hawkular implementation), only by micrometer metrics as a signal to initialise the backend which can be replaced by a simple initialisation in the micrometer metrics factory.
Change : do not provide measured instances when calling the SPI for creating a metrics implementation. Callback methods have also been renamed to contain the type of the metrics created (i.e createMetrics -> createEventBusMetrics, etc...). The event bus initialised callback is removed as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2431
Use cases for multithreaded worker verticles · Issue #2431 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MultiThreaded worker verticles are an extension to worker verticles. Like with usual worker verticles, events are handled on worker pool threads. But they can be executed by different threads concurrently, which means the verticle must manage its own state to be visible between threads.
There are many parts of Vert.x which simply doesn't support them. For example, you can't create an HTTP server on a MT worker verticle.
Also, we have seen many new users, in particular those experienced with Spring or Java EE, starting directly with MT worker verticles and adding as many threads as possible with the impression it would help get the best performance results. But this is really counter-productive.
We are looking for relevant use cases for MT worker verticles. If you are using them, can you please describe in a comment to this issue what you are doing and why you couldn't do with standard (event loop) or usual worker verticles?
We want to determine if MT worker verticles do more harm than good. Ultimately, if they are simply an anti-pattern, we could deprecate and remove them after a few releases.
Looking forward to your feedback, thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2432
Support for Consumer Groups · Issue #2432 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
First of all great work on vert.x, it is really enjoyable to work with and such a powerful tool in such a small package. But recently I came across a missing vert.x feature that if implemented would make the appeal of vert.x's event bus much greater.
As far as I can see there is no direct support for Consumer Groups in vert.x, and this is a real pity.
By consumer groups I mean a set of consumers that would listen to published messages on a same address but with only at most one of these consumers getting the message. This would allow us to do load balancing for published messages. Load balancing already works out of the box for send messages (point-to-point), and without it published messages have only limited useful use cases.
Without this, published message processing does not scale horizontally as all messages must be processed by every single verticle register as consumer (i.e. no load balancing).
Having Consumer Groups would make the event bus allot more powerful and should not be that hard to implement. I suppose that it would be possible to set this up with existing tools, but it would require to
hand craft an API for subscribing to consumer groups,
have verticles that manage these groups subscription and message distribution
hold the subscription information in a distributed data structure.
All possible but better provided by a vert.x api.
In code, I am looking for something like that
Where the name of ProductStatsVerticle.class is used as the name of the consumer group. Variants with a String consumer group name should also exist.
I'd like to have some opinions on this. Maybe there are already 3rd party implementation that could be inspiring, or a pattern that easily permits this feature?
Best regards,
Thim.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2433
Question-How can i contribute to this repository · Issue #2433 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello Vert.x,
This is a great repository , i would like to work as contributor, Can you please help me to become contributor.Or suggest me the way.
I have read readme for contributor, but so far i have not seen any need help tasks or issues which i can pick up.
You guys are instantly responding on issues, so i do not have any chance to look into it.
I tried commenting on one but later i got comment stating that it is already closed.
I have pulled the repository and looking into the code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2434
Missing @Nullable annotations · Issue #2434 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Building this list so that we can track any missing @Nullable annotation until 3.6 is released
Currently, the executeBlocking result handler type is not annotated with @Nullable.
As a result, the generated Rxified API returns a Single<T>. But it's quite common to use Future<Void> for a blocking task which does not need to return any result.
Then if the user simply invoke future.complete(), the program fails at runtime.
As a workaround, the user can use a Future<Object> and invoke complete() with any non-null value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2435
Invalid SSL configuration does not callback the server listen method handler · Issue #2435 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When HTTP server is initialized with invalid SSL configuration (e.g. invalid path to keystore file), it does not call the listen handler, breaking the async calls chain.
In addition to that, the verticle deployment code does not call the deployment completion handler.
So far I see that the problem might be caused by the fact that actualServer is not set to anything at the point of this check, but listening is already set to true, so executeCloseDone above is not called either.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2436
Move the data object converter generator to codegen · Issue #2436 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2437
Improve connection exception logging · Issue #2437 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the connection base will log every error to a connection when an exception handler is not set, in particular connection RST. Let's only log the message like previously (pre 3.5.1) and the full stack trace when debug is enabled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2438
ClusteredEventBus racy initialization · Issue #2438 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It seems as if there is a case in the ClusteredEventBus (3.5.1) where a NPE can appear. After trying out some different cluster manager implementations the following NPE appear from time to time on a new instance when it is being launched. This is the NPE that appears:
Looking at the code for the ClusteredEventBus it seems as if the member "subs" can be null when the view changed handler is called before the ClusteredEventBus has started completely. The view changed handler is set in the constructor but the "subs" member is only given a value in the method "start(...)". I briefly looked at previous versions of the ClusteredEventBus and there has previously been a null-check in the view changed handler.
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2439
Vertx clustered racy initialization · Issue #2439 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx clustered instances are not properly initialised in cluster mode.
Rework the creation of Vertx that leads to a non racy initialisation. Add init methods that allow to properly bootstrap the clustered vertx instance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2441
DNS requests are always sent with the flag 'RecursionDesired' set to true · Issue #2441 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should probably add a property to the class DnsClientOptions to support sending non recursive DNS requests. something like DnsClientOptions.isRecursionDesired() and DnsClientOptions.setRecursionDesired(boolean newValue)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2445
DnsClient: There is no option to enable the netty logger · Issue #2445 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2446
VertxHttpHeaders#add(CharSequence,CharSequence) does not used AsciiString cached hashcode value · Issue #2446 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation
It prevents AsciiString based headers to be used efficiently (using the cached
Replace the method body by the body of VertxHttpHeaders#add(CharSequence,Object) and have VertxHttpHeaders#add(CharSequence,Object) delegate to VertxHttpHeaders#add(CharSequence,CharSequence)
Microbenchmarks shows a significant improvement when optimised headers are used (hint before the optimization was only partially used). Note the benchmark is not used to justify the change, the change itself is very obvious. This was reported also with Java Flight Recorder hot methods showing a unusual call to AsciiString#hashCode(CharSequence) that calls PlatformDependent.hashCodeAscii(CharSequence ) instead of casting to AsciiString and using the cached value since the AsciiString was converted to String.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2447
Refactor VertxHttpHeaders to remove duplicate code and delegate to CharSequence based methods · Issue #2447 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation
Currently VertxHttpHeaders has lot of duplicate code and not always uses the CharSequence based methods performing unnecessary work.
Changes
Refactor methods so the overloaded methods always delegate to the CharSequence version, this will keep only a single implementation and it will be the optimal version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2449
Correlate block thread checker with GC pauses · Issue #2449 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The block thread checker sometimes reports GC pauses as misbehaving blocking application.
The GC mbean emits notification about GC pauses (start time / end time) that could be used to mitigate this and avoid false positive.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2450
Return null for JsonObject.mapFrom(null) · Issue #2450 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2452
Use of system properties to configure cluster settings is not documented · Issue #2452 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using the command line or launcher API to launch vertx, it is possible to use system properties to configure values for the cluster properties found on the VertxOptions class, but there is no public documentation describing the naming convention for these properties.
There is a brief sentence indicating that it is possible to use system properties, but with no description of what the property names are:

You can also set system properties using: -Dkey=value
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2456
DNS client should support calling a DNS server over IpV6 · Issue #2456 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Step to reproduce:
vertx.createDnsClient(53, "2001:4860:4860::8888").lookup4("vertx.io", res -> {});
=> the result fails with the following exception: 'java.net.SocketException: Address family not supported by protocol'
Expected: The DnsClient should be able to call a Dns server over IpV4 or IpV6
As a sidenote, I also tried using the full IpV6 address "2001:4860:4860:0:0:0:0:8888" but it doesn't work as well.
If time permits, I'll investigate this issue and provide a fix for it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2457
Incorrect VertxHttp2Stream checkNextTick implementation · Issue #2457 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm building a HTTP2 proxy with Vert.x 3.5.1, when I try to migrate to 3.5.2.CR1, NullPointerException may happen when requests come
I guess this might be caused when pending deque is empty, see
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2459
ClosedChannelException occurs when writing · Issue #2459 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm building a server with Vert.x 3.5.1, after I use setIdleTimeout() to setup a idle timeout for some sockets, sockets will be closed by timeout. I keep writing to the sockets continuously,  some sockets may throw java.nio.channels.ClosedChannelException.
Here's what I have tried, the exception may be thrown.
I wrote to sockets by write() method from other workers continuously, stop when endHandler or closeHandler invoked.
I tried to send buffer to WriteHandlerId through EventBus. When a socket is closed, the WriteHandlerId will automatically unregisterd.
I tried with WebSocket and Socket, they both throw the exception.
How to avoid this exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2460
Proxy multipart/form-data with API-Gateway · Issue #2460 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry for bad English.
I made simple solution dealing with multipart.
My reference is vertx-blueprint-microservice which use MSA.
I got problem How can I handle multipart.
PROBLEM IS HANGING RESPONSE.
I don't know how can I solve this.
I doubt that SERVICE can't accept multipart, however
this is succeed. it's wierd.
Is there any more example how can I handle multipart proxying?
I saw this repo in vertx homepage.
I think this means quite important reference for understanding vertx.
However this repo looks dead. There is no response at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2461
WebSocket end handler should be called immediately to signal stream ended · Issue #2461 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In NetSocketImpl:
I set a closed flag in the endHandler. I will stop write to the socket, if the socket has the closed flag. However IllegalStateException: WebSocket is closed will be thrown by WebSocket sometimes. I modify the code snippet in WebSocketImplBase according to NetSocketImpl, Then the IllegalStateException never occurs again :
Is it a proper fix?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2464
WorkExecutorImpls are not removed from closeHooks when they are closed · Issue #2464 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a WorkExecutor is created via a vertx.createSharedWorkerExecutor(...) call, a reference to the WorkExecutor is added to the closeHooks for the current Context:
However, when the WorkerExecutor is closed, the reference is not removed from closeHooks, resulting in a leak:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2465
Add ability to set queueing strategy for WorkerPool · Issue #2465 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the moment the workerPool in VertxImpl is initialized as follows:
This creates an underlying ThreadPoolExecutor with an unbounded LinkedBlockingQueue
When our HTTP server is under immense load the queue grows which causes our latencies to grow unbounded.
We would prefer to fail fast or at least set a fixed size for the worker queue.
How do you feel about a new VertxOptions#workerPoolQueueCapacity ?
I could provide the accompanying PR as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2470
Http header CR / LF validation · Issue #2470 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently HttpClientRequest and HttpServerResponse don't check wether header name or value contain \r or \n chars. Of course developers are fully responsible for http headers set and
such incorrect value is likely unintended. Forbidding it prevents HTTP header injection for application that omit to check headers.
change
throw an IllegalArgumentException when a header name or value contains \r or \n char
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2474
vert.x 3.5.1 co.paralleluniverse.fibers.instrument.UnableToInstrumentException · Issue #2474 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I update vert.x from version 3.5.0 to 3.5.1,project run with errors,  this is my shell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2476
Launcher system properties are not propagated when the verticle runs as background process (start) · Issue #2476 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The file.encoding setting is valid when the trial java -jar command starts, but it does not work with the start parameter.(Vert.x 3.5.1) Here is an example:
This is the MainVerticle:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2477
Don't keep a reference in the HTTP pool connection listener to the connection waiter · Issue #2477 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2480
Windows redeploy does not provide valid inline verticle configuration · Issue #2480 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Java process builder now removes double quotes in process arguments (https://bugs.openjdk.java.net/browse/JDK-8131908) to conform to Windows CLI parsing https
This affects the Vert.x redeploy mode with inline configuration which contains double quotes and the JSON will not be parsed by the process created by the launcher, the Verticle will not get the expected configuration.
On Windows we should escape this differently by surrounding with double quotes and using a \ char to escape inner double quotes (A double quotation mark preceded by a backslash (") is interpreted as a literal double quotation mark character (").)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2483
some dependence does not contain version such as netty in pom.xm · Issue #2483 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
clone project down my local,but some dependence dose not have contain version suan as netty in pom.xml
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2484
Internal references to local Locks taken using SharedData.getLock() are not cleaned up · Issue #2484 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Every time a unique lock name is taken via SharedData.getLock(...), it gets added to a Map inside of SharedDataImpl. Currently, entries added to this Map are never removed, even if all references to the lock have been released, and there are no pending waiters. This means the Map can grow infinitely if an application takes locks using generated names, rather than hard-coded ones. To avoid this, entries could be removed from the internal map at the point the lock is released, as long as there are no pending waiters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2485
 zookeeper service discovery is not working in ECS Dockers · Issue #2485 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am trying to deploy my micro services through docker in AWS ECS cluster, I am able to deploy the containers and services are registered with Zookeeper. Once registration is happend, microservices are not talking each other with the help of zookeeper. Can you please help on that.
Here is the log from Zookeeper, which shows connection established from docker containers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2486
Websocket client and server don't send back close frame in closing handshake  · Issue #2486 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue
While using vertx to implement a websocket server, certain websocket client library (okhttp) got failure callback when closing the websocket from its side.
Finding
After doing a package capture, I found vertx didn't respond a CLOSE frame after receiving one. This behavior doesn't follow the RFC.
I checked vertx source code, and did some debug. I believe there is a bug at Line 699. From the comment, these lines of code intend to Echo back close frame.
Actually the Line 699 would always fail.
After adding some debug code there, it actually throws the following exception. The wrFrame cannot be passed to writeAndFlush directly.
Solution
Change Line 699 to the following code solves the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2487
Event Bus: ability to set discard handler on MessageConsumer · Issue #2487 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version - 3.5.1
The underlying implementation class (HandlerRegistration) has a discard handler, but setting this is not exposed (the method has a comment about it being for test use only).  Having the ability to find out when messages are discarded is actually useful when managing workloads at scale.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2488
Event Bus: ability to set discard handler on MessageConsumer · Issue #2488 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version - 3.5.1
The underlying implementation class (HandlerRegistration) has a discard handler, but setting this is not exposed (the method has a comment about it being for test use only).  Having the ability to find out when messages are discarded is actually useful when managing workloads at scale.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2489
Event Bus:  "Handlers.choose()" should deprioritize paused handlers · Issue #2489 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when a message is handled by the bus the "choose" code will simply pick the next handler in line.  If it turns out that handler is paused, the message will get dropped on the pending queue and possibly discarded, even if there are other handlers on the same address that are available to process the message.  It would be preferable if it gave preference to handlers that are not paused over those that are when making this choice.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2490
FutureImpl shall release the handler after completion · Issue #2490 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently FutureImpl keeps a reference on the handler after it has been completed. As side effect it can promote objects to survivor spaces. Since the future is completed there is no need to keep the reference onto the handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2492
Deploying HelloWorld Verticle in OpenShift v3.7.46 ThreadDumps · Issue #2492 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Thought I would start with this group, but it may be more of an OpenShift issue.
We are seeing threads block deploying the simplest of applications.  We are new to Vertx, so it could be how we have something configured in the Dockerfile.  Attached is the console dump from the OpenShift pod, and the Dockerfile we use to build the image (we do not use fabric8 yet to deploy to our main OpenShift clusters).
I can run the same, generated container locally in Docker (version 18.03) on CentOs without seeing these issues.
Thanks for any help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2493
DnsException improvements · Issue #2493 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
shall not capture stack trace
provide a meaningful to string
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2494
Can I use vert.x only with memory in JVM heap? · Issue #2494 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I build a gateway application with vert.x,version is 3.5.1
Use eventBus between application comunication.
Use vert.x core httpclient for visit out API .
I find some problem as follow:
1.When application transfer about 130MBit/s in eventBus,sometimes ping check timeOut,and reconnect,
then the receive rate in vert.x metrics (eventbus messages oneMinuteRate) going unstable,and many
connection established between both ends of eventBus port.
2.HttpClient used in my application for visit out restful API. I set the timeout param as 3s like
,but I set a variable now as Instant.now().toEpochMilli(),then when respone, Instant.now().toEpochMilli()- now =gap, this gap large than 3s.Sometimes this gap go to 10s.
Here is my question:
work,so i met a PooledUnsafeDirectByteBuf out of memory.Is there any propertity can work?
2.When timeoutHandler called , this httpRequest throw an TimeoutException
When there is a response back after timeout, where can it be cached or handled?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2495
Java 10 issue: java.lang.IncompatibleClassChangeError: Method io.vertx.core.Future.succeededFuture()Lio/vertx/core/Future; must be InterfaceMethodref constant  · Issue #2495 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FWIW im using some compiled groovy inside a java project, but not vertx-lang-groovy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2496
eventBus.send blocks in for loop · Issue #2496 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just found that eventBus.send blocks when using for loop, it will finish all the send, then process the reply.
Is there a way I can have interleave send/receive when usingh for loop?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2497
vertx-jdbc-client  · Issue #2497 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,  Today I went to see  vertx-jdbc-client and found a problem,  all get connectin and execute sql in the same thread，especially only one thread.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2498
NetServer bootstrap should set SO_LINGER option on the child channel instead of the server channel · Issue #2498 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
If we use setSoLinger we only get:
Code right now is:
Hope somebody can help on this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2506
Hard-coded HTTPS scheme regardless of SSL usage · Issue #2506 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The https scheme is passed even if ssl is not used, should be easy to fix by checking via isSsl() then use "http" or "https" accordingly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2508
HttpServer connection lifecycle rework · Issue #2508 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Http1xServerConnection class handles all HTTP messages in a single queue. This refactoring removes the global queue and instead uses a buffer queue in each HttpServerRequest implementation. Pipelined requests are now handled in the connection as a linked queue of HttpServerRequest where the head is the request sending a response and the tail is the request receiving the HTTP content buffers. In normal case the head and tail are the same request, in pipelined case a request may have been fully received but the response not yet sent and thus head tail.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2511
AsyncFile.read allocate two buffer to read the data · Issue #2511 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AsyncFile.read allocate two buffers to read the data makes it very inefficient.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2512
Initial Connection Pool on HttpClient · Issue #2512 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, Vertx HttpClientOptions  only has a max limit on a HttpClient pool (both HTTP/1 and HTTP/2). Connections are opened only under a certain load. Is it possible to start the HttpClient with a initial number of connections?
The motivation for this comes from running applications in a Kubernetes environment where the HttpClient is trying to hit a service cluster. In my case only one of the pods is getting connected to while the rest sit idle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2513
OAuth2Auth does not extend AuthProvider in Scala dialect · Issue #2513 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Vertx version 3.5.2
I am trying to build social login with GithubAuth using Scala dialect of the Vertx.
To avoid repetitive authentication calls to the server i want to use session.
According to the docs code should look like this:
The last line however does not compile as OAuth2Auth does not extend AuthProvider
I managed to make it work by using the following trick:
router.route.handler(UserSessionHandler.create(AuthProvider(authProvider.asJava.asInstanceOf[JAuthProvider])))
It looks like the Scala API is incomplete.
Thanks,
Jakub
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2514
HttpClient should behave according to the HTTP version returned by the server and not sent by the client · Issue #2514 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Full discussion with Gists is available here.
The problem goes as follows: vert.x http client submits 2 sequential requests to a http1.0 server.
First requests receives a response as expected, second one fails with VertxException.
The issue seems to be introduced in 3.5.2 and didn't exist in 3.5.1.
Fixing When the response does not contain Connection: Keep-alive in HTTP/1.0, the client has to assume Connection: close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2515
Websocket queue not respected in timer/periodic/blocking · Issue #2515 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello everyone, I'm building a client/server process to benchmark some databases. The server basically sends out data at a given rate, and clients need to consume that data at the best of their abilities. I've chosen websockets to achieve this, and made a vertx implementation.
I've now reached a problem: the server does not seem to discard messages when I expect them to. For example: one fast DB and one slow DB are consuming the same stream. As I set the queue size small, I would expect the small DB's client to trigger some dropped messages, however, the fast and the small DB's clients are both consuming the data at the same rate.
I've made a small MWE and the following caught my eye: when I use the webSocket variable within a setPeriodic, setTimer or executeBlocking, the queue seems  to be ignored. I guess I'm misusing vertx in some way, but in the case I'm not, hopefully I'll get an answer through here. Does anyone have an idea? Should I implement this 'huge stream of unending data' in a different way (i'm doing it in batches now, through setPeriodic)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2517
Disable HttpClient TCP idle timeout when connection is in the pool · Issue #2517 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that in a corner case, we have a lot of test failure where the connection is not used very often. For example, I make a timeout to be of 10 seconds and I make a call every 10 seconds exactly. Every once in while, my request fails with VertxException (Connection is closed) since the checkout connection is closed right after the connection is polled from the connection pool. I only noticed this in 3.5.2 but not in 3.4.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2519
HttpServer does not clean the channel pipeline after HTTP/1 upgrade to H2C · Issue #2519 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently after an HTTP/1 to H2C upgrade the HTTP server does not actually remove the codecs from the channel pipeline leading the HTTP decoder to decode H2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2520
The Kotlin documentation for vert.x has errors in it. · Issue #2520 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I checked the documentation for Kotlin on this page and it has some errors in it where code blocks should have been:
This is the same part from the Java docs:
I did not find the repo for the docs so I'm not sure this is the right place to mention this. This problem persisted for at least a year so I thought it might worth mentioning. I'd love to have good Kotlin docs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2521
MultiMap with putIfAbsent method · Issue #2521 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
The MultiMap interface could implement the method putIfAbsent like the Map interface. It's been needed in the PR 960 of vertx-web and I think it could be a very util method in more cases.
I could implement it if the enhancement is approved.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2522
HttpClient response chunk handling rework · Issue #2522 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Rework the HttpClient request chunk handling that is split between HttpClientResponse and HttpClientStream so it is fully managed by the stream. The logic is now encapsulated in the stream and it simplifies the logic of the client response that does not care anymore of paused trailers and paused end chunk (that was only used by HTTP/1).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2524
There should be a handler which is guaranteed to be called when the request is done · Issue #2524 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There should be a handler which is guaranteed to be called when the request is done so that we can perform the resource cleanup. Currently, there are some hooks but it is hard to deal with.
On the server side, you have .addBodyEndHandler() and .closeHandler(). On the client side, it is even more confusing since you have to hook both to the HttpClientRequest.exceptionHandler() and HttpClientResponse.exceptionHandler(), HttpClientResponse.endHandler() while it does not even have an analogous .closeHandler().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2525
acceptEventLoopGroup · Issue #2525 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Why didn't netServer use the acceptEventLoopGroup ？
and  I looked acceptEventLoopGroup only use for httpServer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2530
problem with vertx-config-yaml · Issue #2530 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I added  vertx-config-yaml and vertx-config in my pom.xml,
and it worked when I run my tests.
but when I package this project to a fatjar and run ,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2531
Use of wildcards in Pump · Issue #2531 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The declaration of static pump function from Pump class should be changed to allow use of wildcards.
Instead of
it should be
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2532
HttpClient idle state handler should be added first when the connection is borrowed from the pool · Issue #2532 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient adds the IdleStateHandler before the handler, relying on the handler presence. With HTTP/2 clear text upgrade the handler name cannot be preserved and therefore adding the idle state handler fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2533
HttpClient must use the http scheme for non SSL connections · Issue #2533 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when the HttpClient sends an HTTP/2 request, it uses the https scheme unconditionally. The scheme decision should look whether the connection uses TLS or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2534
Event loop context executing with wrong thread · Issue #2534 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running it on a AWS instance, it shouldn't matter but maybe network performance is important in case this is caused by a race condition.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2535
Access to no existing routing · Issue #2535 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Access to no existing routing,return Resource not found ,why not Get into failureHandler !
Such as default access / or access that does not exist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2536
Create common interface for executeBlocking methods · Issue #2536 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The executeBlocking methods are common between the interfaces WorkerExecutor and Context. It would be an API convenience to have WorkerExecutor and Context be extensions of a common interface that supplies the two executeBlocking methods.
Then something like the following could be done:
Currently, makeManyBlockingCalls needs to be overloaded to accept a Context or WorkerExecutor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2537
PostgreSQL message/record size · Issue #2537 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In BaseSQLClient.class package io.vertx.ext.asyncsql.impl  dependency there is a limit for a record size set to 16777216. The internal config parameter name is maximumMessageSize.
When trying to download a large file from the database, the server produces an error:
Unfortunately there is no way to change the limit without the code modification (which I temporarily did)
It would be useful to be able to set that limit up in JsonObject config (additional configuration key)
How can I get large files from the database?
Best regards
ldvhome
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2538
is there any way to implement actors model with vertx? · Issue #2538 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I know Akka and it's acotrs is very powerful.
My question is know how to implement actors model with vertx?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2539
Update to netty 4.1.25.Final and netty-tcnative 2.0.8.Final · Issue #2539 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2540
mock websocket client connect, but throw NullPointException · Issue #2540 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2541
Exception not handled in some cases · Issue #2541 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I saw this in our log file. Is it something that should be fixed? I suspected that it might have something to do with websocket but I can't be sure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2542
Limit client connection count · Issue #2542 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,we are heavy use vert.x, and we want limit active client connection count both in HttpServer and NetServer.
If server had accepted certain amount of connection, new connection need reject for overload protection.
Any good idea ?
Best Regards & Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2544
Vertx/Netty is appending "=" in query parameter. · Issue #2544 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using Vertx 3.5.0 WebClient API to make HTTP call to remote server and given below is how my input URI look like :
In HttpClientContext Vertx is calling io.netty.handler.codec.http.QueryStringEncoder, which append "=" even though it wasn't there in actual input provided to Vertx.
From QueryStringEncoder:
So actual URI received by remote server looks like below:
If you notice in above URL, Vertx is encoding the parameter and also appending extra "=" at the end.
This issue isn't there if we use HttpClient API instead of WebClient API. Unfortunately the remote server doesn't like this extra "=" added to query and encoded query, and fails hard. This remote system can't be updated to handle this behavior because if doesn't belong to us.
Moving back to HttpClient will be very expensive to us because of amount of code change. Looking forward to your feedback. We are open for suggestions, and we can create a PR once agreed upon the solution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2547
Provide Elliptic Curve format for key and cert  · Issue #2547 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have tried to load ECDSA key pair that is formatted using following delimiters:
Which make me wonder wheter there is any support for elliptic-curve cryptography or if I am missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2548
`FileResolver.unpackFromBundleURL()` does not detect a directory unless the requested path has a trailing '/' · Issue #2548 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As can be seen from this line of FileResolver.java, unpackFromBundleURL() does not account for the possibility of a resource path to be a directory - even if it doesn't end with a '/'.
For example, consider the following sample OSGi bundle structure (excluding manifests etc.):
If unpackFromBundleURL() is called for META-INF/resources/webjars/swagger-ui/3.17.4/, it will correctly reach the directory code here. However, if this method is called for META-INF/resources/webjars/swagger-ui/3.17.4, the else branch (for file resources) will be taken and the cache will be corrupted.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2550
Use VertxOptions to configure class path resolving · Issue #2550 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class path resolving is currently enabled or disabled via System property.
In environments with multiple Vert.x-based applications the property will be set to the same value for all the applications running in the same JVM.
Adding a VertxOption field to override the System property would allow each Vert.x application in a JVM to decide individually whether to allow file class path resolving.
The use-case driving this issue is that we would like to use Vert.x as a client without any file system side effects (such as creating a .vertx directory), but we don't want to interfere with other Vert.x-based applications that may be running in the same JVM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2560
RecordParser should have an option to limit the record size · Issue #2560 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using RecordParser's delimited mode, it would be nice to somehow limit the maximum buffer size, to prevent misbehaving/malicious clients from exhausting server resources.
This could be achieved by exposing the buffer length, like so:
Another option would be to check the record size in RecordParserImpl.parseDelimited() and throw an exception, that could be handled inside the exceptionHandler:
Thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2562
Bug with HTTP trailers and GZIP compression? · Issue #2562 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys,
I think I might have found a bug in Vert.x 3.5.3 or Netty. If I enable GZIP compression on both my HTTP server and the client and then try to send an HTTP trailer I get the exception below.
I created a gist demonstrating the error:
As soon as I comment out one of the lines marked with // XXXXXXX the program works correctly.
Am I doing something wrong or is this actually a bug?
Cheers,
Michel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2563
Inadequate documentation for `SharedData.getLock()` · Issue #2563 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The docs for SharedData.getLock() do not specify the behaviour when there is competition in acquiring a lock. While non-determinism is expected when this is happening from multiple threads, it is also silent about what happens if I try to acquire the same lock sequentially in the same method:
From the code I can see that a local lock uses an ordered list of waiters, so I would expect that the first call would acquire the lock before before the 2nd (in the absence of timeout, and obviously with the possibility of there being interleaving acquisitions from other threads). But I've no idea whether these same semantics would also apply with a clustered lock. If the API doesn't guarantee any such semantics the Javadoc should probably explain that to avoid people accidentally relying on such behaviour.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2565
io\vertx\core\http\impl\HttpServerImpl  maybe error listen port · Issue #2565 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
has two line code use //fixme
we use async to remove id when happends error
but use sync to put id later on
then rarely
it while listen error
but sharedHttpServers has the id
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2566
Accessing Timers · Issue #2566 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be no way for an application to discover if a Timer is active, or to inspect the metadata of a timer.
The timeouts map (io.vertx.core.impl.VertxImpl#timeouts) is private, as is the timer data (io.vertx.core.impl.VertxImpl.InternalTimerHandler).  All that is possible is to cancel a timer.  Is there a mechanic for managing timers that isn't obvious?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2569
Not able to overwrite the default decoder · Issue #2569 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx version 3.5.1
Recently i migrated from vertx 2 to vertx 3.5.1. I am sending a value - %%SOME_VALUE%% in my paramater. But Vertx 3 throws error "invalid hex byte" while handling the request. I cannot change the format of the value due to some constraints but looking for some ways to handle within the vertx application. I am unable to overwrite the netty decoder used in vertx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2571
get byte[] from JDBC for GZIP decompression · Issue #2571 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HI I have compressed data as byte[], stored in DB table column. I need to get the byte[] and decompress it. But there is no direct method to get data as byte[] in vert.x jdbc. I tried using getBinary(0) , but it throws me below exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2572
error on vertx sendMail, io.vertx.core.impl.ContextImpl - Unhandled exception java.lang.NullPointerException: null · Issue #2572 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello i cannot catch null error on sending email
my code is like this :
and try to use this, but still cannot catch the error on failed :
log error :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2574
ReadStream fetch mode · Issue #2574 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A Vert.x stream isn't trivial to implement and actual adapters using request flow control (RxJava,Reactive-Streams) have to maintain an extra queue for buffering unrequested items until they are requested.
The ReadStream interface should be augmented with a fetch operation that allows to provide request based control. The stream interface continues to operate with pause/resume control that is easier to use (and also more realistic with actual transports such as TCP, as request based flow control has to prefetch for efficiency in practice).
The state changes from two states (paused / flowing) to (fetching[n] / flowing), fetching[0] is equivalent to pause.
A fetch method is added to ReadStream:
ReadStream is difficult to implement and it is often implemented multiples times. We want to provide a helper for implementation (Queue) that acts as a event driven queue relieving the implementor to handle threading, reentrancy and data races. Currently such queue is maintained in several places implicitly (like HttpServerRequest or AsyncFile) and sometimes not:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2575
SslHandler should use ref-count buffer · Issue #2575 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, it uses PartialPooledByteBufAllocator. Therefore, it does not pool the buffer which results in extra memory allocation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2576
HttpServer failed to listen java.lang.IllegalStateException · Issue #2576 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using latest vert.x core 3.5.3
When trying to create a Http server listen on either port 80 of 127.0.0.1, 0.0.0.0, or ::
will result in an exception java.lang.IllegalStateException: failed to create a new resolver
Command run: vertx run Test.java
Code used.
console log when the process is executed:
It is fine when I run on Mac OS but on a VPS (OVH) with centos 7 (firewall disabled) the Exception will be thrown and I can't get any content if I curl to the http end point.
On the same server if I yum install nginx and start it, it is fine on the same port. Only vertx had the problem on listen on the port. This vps instance is with both ipv4 and ipv6
Centos 7 ifconfig
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2577
HttpServerRequest#netSocket() improvements · Issue #2577 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServerRequest#netSocket() has a few problems:
when used with a CONNECT requests, the code is different for HTTP/1 and HTTP/2, HTTP/2 will send an header frame and HTTP/1 will not
the request/response lifecycle is not properly handled in all cases, when using a NetSocket the response should be marked as ended so it cannot be used anymore
the net socket should be obtained before the response is sent, assuming the handler has the still the ownership of the stream
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2584
JsonParser does not correctly perform flow control · Issue #2584 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonParser to process the response in objectValueMode
Default configuration in the rest of the parameters
When I receive a JSON object inside the handle, I make a parser.pause() to prevent the arrival of new events, however, I get to receive some more events before it really stays paused (3~5).
I think that this is because internally JsonParser does not check when processing the tokens if it is paused, sending all the buffer read so far by the HTTP client. The stream is already paused, but if in this buffer there are 4 json objects, the method "handle" will be called 4 times.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2585
/io/vertx/core/http/impl/HttpServerImpl.java should be able to asynchronously accept/reject Websocket handshake  · Issue #2585 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpServerImpl synchronously accepts or rejects the Websocket handshake:
I think we should probably make it async, in case we have an async operation (i.e. hitting an OAuth server with a token) that rejection depends on.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2586
Support temporary files and directories · Issue #2586 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice if io.vertx.core.file.FileSystem supported the creation of temporary files and directories (using java.nio.files.Files.createTempFileand java.nio.files.Files.createTempDirectory respectively)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2588
Provide default methods for metrics SPI · Issue #2588 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
we do have now, base (dummy) implementation of these but we should better provide default methods instead
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2590
NullPointerException when reporting a deployment failure without a completion handler · Issue #2590 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 3.5.3, when deploying a verticle using deployVerticle(Class<? extends Verticle, DeployOptions), it throws a NPE if the class is not public (default: package-private).
Reproducible example is provided: vertx-test.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2593
HttpClient connection should be resumed when response ends · Issue #2593 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are running into a situation where an http client connection is paused when its last message is received.
This causes the paused connection to be recycled.
We think paused connections should be resumed when they are pooled.
A test to reproduce this behaviour:
A fix could be as easy as:
If you think this is the correct fix, I do not mind to create a PR with the test and the fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2595
HTTP client upgrade to socket might lose buffers immediately sent by the server · Issue #2595 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP client upgrade to socket might lose buffers when these buffers are received in the same chunk than the HTTP response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2596
how to set netty vertion · Issue #2596 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when i use java vert.x 3.5.3 ,io.netty vertion is 4.1.19, but i got
i need to update io.netty to vertion 4.1.27, how to do? thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2597
mvn package fail · Issue #2597 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2598
Vertx HTTP Thread block unknown warning issue · Issue #2598 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
times to times we get this thread-block warning exception. any idea?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2599
Remove generic connection message encoding/decoding and instead let each connection handle it when necessary · Issue #2599 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the VertxHandler/ConnectionBase handle conversion of Netty / Vertx messages. Such conversion can be handled by the receiver of the emitter of the message instead of being applied to each message. This removes unnecessary message inspection (if/else switches) when it's not needed (i.e an plain HTTP request with not entity).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2600
Support for proxy hosts black listing in ProxyOptions · Issue #2600 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, we have this issue when we want to ignore the proxy and when it comes to call certain components of our internal network. Since vertx ignores JVM proxy arguments like http.nonProxyHosts there is no real workaround.
The proxy configuration is set at the WebClient level. ProxyOptions object should have an equivalent to http.nonProxyHosts.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2601
Verticle on Docker container won't stop properly · Issue #2601 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
Stopping a Verticle using the cli on this Docker container fails. This is because the 'ps' command is not installed which is utilized by the StopCommand class here.
The method terminateLinux() fails because the method pid() returns null.
pid() returns null because it relies on the 'ps' command.
Steps to reproduce
Create a simple Verticle. It should not matter what language its implemented in.
In my case, I wrote my app in Kotlin.
Fire up a vertx docker container and add the verticle to it.
Run the Verticle using the 'start' command.
Try to shut down the Verticle using the 'stop' command.
Profit!
Extra
For my code, I was able to fix the app by adding
to my Dockerfile which was using vertx/vertx3 as its base.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2602
Gracefully close HttpServer · Issue #2602 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Logging issue to gracefully close HTTP server.
Meaning :
Stop listening and accepting incoming requests.
Leave inflight requests ending normally before completly close the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2606
Provide a way for verticles to reload configuration upon changes · Issue #2606 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As per documentation for config retriever listening for changes, the retriever reloads the configuration every 5 seconds. Issue is that there is no way provide that new configuration to the verticle without first undeploying and redeploying it with the new configuration or doing a app/pod restart. The reason for that is the config JsonObject that holds the configuration for the verticle is created via new constructor and there is no reference to this config object available. This functionality will be really helpful where API keys and certs are being rotated out and live traffic is being taken by the app.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2607
Extra chunk for request with no content. · Issue #2607 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code produces an extra 0 end trailer chunk that makes HTTP clients parse it as a second invalid response:
My guess is that if there is no body, there should not be any trailer end chunk.
Related to #1986 (was only for HEAD).
Perhaps there are other HTTP status codes that can't contain a message body?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2608
EventBus: if handler registration has pending messages to deliver, but handler has been set to null, results in NPE. · Issue #2608 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 3.5.3
This one is a bit hard to reproduce outside of a larger system.  For us it happens when we have an Rx chain reading from an event bus consumer (implemented via FlowableReadStream).  If we cancel the subscription then this calls FlowableReadStream.release().  This sets all of the handlers on the underlying stream (which is a HandlerRegistration in this case) to null.  It then resumes the stream which causes it to attempt to deliver any data that it has in its pending queue.  Since the handler is now null the resulting delivery attempt results in an NPE and lots of log spew, like this:
Either the HandlerRegistration code should check for the null handler and silently drop the data (perhaps invoking the discard handler -- see #2488) or the stream should offer a way to flush the pending data which can be called by release.  I'm assuming we don't want to flush the queue when the handler is set to null, though that would probably fix this as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2609
HTTP/2 settings update can miss acknowledgement · Issue #2609 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP/2 settings upgrade sets the acknowledgement handler after the successful write of the settings frame, sometimes the acknowledgement can be received before this callback happens and therefore we miss the acknowledgement.
We should instead update the acknowledgement handler queue before writing the settings frame and remove this handler from the queue on a write failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2610
WebSocket client does not report server protocol violations on the WebSocket exception handler · Issue #2610 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the title says, basically. When a websocket client receives a payload larger than the configured max size, it seems that it just immediately closes the socket without warning - no logs, no exception, no close frame. I may have misunderstood something, but nothing I did short of changing the max sizes in the options gave any indication of the problem being displayed or fixed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2612
Websocket Request Failing to Upgrade · Issue #2612 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Websocket Request to upgrade fails with the below exception. The same was working on my local setup, but when deployed on a cluster started getting this error.
The difference between the two websocket requests was that the first one was sending a response through as soon as it upgraded whereas the failing one was updating some shared data using an AsyncMap and sending a test message in the callBack.
In effect the websocket closes down if the first message is not sent immediately after upgrading.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2615
Consider passing websocket close code / reason to the WebSocket closeHandler · Issue #2615 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since the closeHandler callback is just a Handler<Void>, dealing with close codes / reasons requires you to add extra code into the frameHandler to explicitly check for close frames to get the code / reason, making closeHandler have limited utility for non-trivial use-cases.
Example use-case:
I'm using vert.x to write a wrapper for the Discord API. Part of this entails opening a websocket connection to their gateway to receive real-time events. As the gateway may give a variety of close codes / reasons under different circumstances (server restarting, sending a malformed payload, ...), it would be significantly more convenient to be able to handle this in the closeHandler rather than needing to have a special case in the frameHandler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2616
ErrorDataDecoderException: Bad string · Issue #2616 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looks like more netty bug, but I report here for investigation.
I have a simple configuration like
For special requests the code fails before my handler.
Vertx version: 3.5.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2617
localCosumer 100x slower than consumer in Clustered mode · Issue #2617 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tested with Vertx 3.5.3 and 3.5.0 on a Core i7-69xx:
consumer handles 100'000 to 150'000 per second
localConsumer is factor 100 slower: only ~1'500 per second can be delivered (and CPU-Load is high)
With Vertx 3.4.0 and 3.4.2 observations are different: Here, both types (consumer and localConsumer) are quite slow
Prior to 3.4.0 (e.g. 3.3.3) there seems to be no support for Infinispan-Cluster (or I didn't find the appropriate dependencies)
Notes:
I found #1764, but I think this was a different case as the performance panalty was only a few percent - not factor 100
I also found 3ed3fea - this probably addresses the same basic issue, but from the sender's perspective
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2618
Incorrect javadoc for MessageProducer#send · Issue #2618 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not sure whether this behavior is correct or not, but when you try to create a message producer via EventBus.publisher method, it creates instance of MessageProducerImpl class with private send field equal to false -- which is designed to distinguish senders and publishers I guess; but actual implementation of methods send and write of the producer class differs:
Send method:
Which subsequently leads to strange behavior: send method actually sends messages, but write method publishes them, even if it was a publisher created.
In JavaDoc for the MessageProducer.send method denoted that it is
Synonym for write(Object).
So, if it is a synonym, why the behavior differs?
For me using MessageProducer.write method works fine now, but I had some time figuring out why publishing messages did not work (not all message handlers actually received data).
Please, consider adding analogous if (send) checks to the method send also, if this behavior is not correct. And should really write method be synchronized, while send is not?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2619
FileResolver fails when path contains `+` character · Issue #2619 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2620
Upgrade Netty to 4.1.27.Final · Issue #2620 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2621
Upgrade Jackson to 2.9.6 · Issue #2621 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2622
Upgrade Tcnative to 2.0.12.Final · Issue #2622 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2625
Improve the ALPN detection to work on latest JDK 11 · Issue #2625 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2627
CompositeFuture cannot take a list of futures where the list type parameter has a type parameter · Issue #2627 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Apologies if the title is unclear; I couldn't think of a good way to word it...
Suppose you do something like the following:
This can be resolved by convincing the compiler to see it as a List<Future> instead of a List<Future<T>>, such as
CompositeFuture.all(Arrays.asList(futures.toArray(new Future[0])))...
but doing this feels like an unnecessary hack to get around the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2628
Add Vert.x Logger isWarnEnabled() method · Issue #2628 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The io.vertx.core.logging.Logger interface currently does not have a isWarnEnabled() method like the other levels have already. This adds this method as well as the corresponding method on LogDelegate and its implementations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2630
HttpServerResponse content headers improvements · Issue #2630 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServerResponse incorrectly sets the content-length and transfer-encoding headers in a few cases. It should use the following rules:
content-Length should not be set automatically to 0 or this header can be set to what the body size would have been
transfer-encoding should not be present
none of these headers should be present
Currently a few cases are not supported for HTTP/1.x and HTTP/2. This issues fixes them, in addition the chunked flag on the response implementations is removed to check the transfer-encoding directly on the response to avoid the edge case where a user would set such headers instead of the response object.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2633
Unidiomatic Ruby example on the home page · Issue #2633 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We provide idiomatic APIs for every language that Vert.x supports.
This Ruby example is formatted non-idiomatically, with unnecessary parentheses and the {} block syntax. It would be better to write it like this:
(It is not very idiomatic to use global variables $vertx either, but I don’t know enough about Vert.x to say it isn’t justified.)
I would have made this a pull request, but I can’t find the code for the Vert.x website in any eclipse-vertx GitHub repo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2634
It would be nice to have convenience functions in httpServerRequest also available for serverWebSocket · Issue #2634 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
httpServerRequest comes with some nice functionality, like getParam(). It would be nice to have that available in the websocket equivalent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2636
HttpClient connection handler · Issue #2636 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClient does have a per request connection handler which requires to modify each request to be aware of connection life cycle. This can be quite intrusive in client code to set a the connection handler on each request, specially when one wants to be aware of life cycle without being intrusive.
This features adds a new HttpClient#connectionHandler(Handler<HttpConnection>) that is called when the client connects to an host.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2641
Exception not propagated from VertxHandler to WebSocket exceptionHandler · Issue #2641 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello Team,
While investigating a random websocket disconnect issue, I found that the VertxHandler::exceptionCaught() does not propagate the exception all the way to the websocket exceptionHandler. Due to this, when websocket disconnect happens due to an exception, the application's exceptionHandler never logs it, and only gets notified about the close().
Uses vertx-rx and netty's per-message deflate extension.
This is the code I am referring to in VertxHandler:
Is this a known issue? Else, can you please take a look and advice a potential fix?
Thank you,
Udai.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2644
IllegalStateException cannot register channel with OpenJDK 11  · Issue #2644 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using latest version of Vert.x
and compiled successfully my application with OpenJDK 11+28
My application start fine but as soon Vert.x received a request it shows that warning and the whole Vertx server get restarted and returns Server Internal Error
Same code runs fine when compiled and run with Java 8 (Oracle)
Should be able to register channel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2645
TLS resumption · Issue #2645 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since SSL handshake can be quite expensive, it might make sense to have an option to turn on more complex logic in connection pooling for SSL connection to establish at least one connection at the startup so that the TLS session can be cached by the server. This will reduce the CPU time spent by eventloop thread significantly especially when there are multiple requests to the same server at the same time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2646
Vert.x fails to start on Linux if SM prevents reading resolv.conf · Issue #2646 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Under Linux a SecurityControlException is thrown by AddressResolver line 50 due to the JVM not having security permissions to access /etc/resolv.conf. Due to the platform I am developing for I cannot grant security permission for this file. Below is the stack trace. Vertx version 3.5.3 is used.
The if checks should be moved inside the try catch block to prevent the crash.
Alternatively it would be nice to be able to ignore this check via a system property.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2647
Even bus not work well in VPC network · Issue #2647 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
When setup cluster with event bus:
Private node is in private cloud, its public address is not local network interface but a virtual address defined by NAT.
Public node in public address.
Using hazelcast and set public-address in hazelcast configuration.
When starting node in private cloud, add argument and java properties:
It up and run normally with hazelcast, private node joins into cluster.
However, event bus message cannot send from public node to private node because address is still local network interface of private node.
Not sure it is a bug or something is wrong in my configuration
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2648
WebSocket upgrade request body limit · Issue #2648 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The WebSocket HTTP upgrade implementation buffers the full http request before doing the handshake, holding the entire request body in memory. There should be a reasonnable limit (8192 bytes) above which the WebSocket gets an HTTP response with the 413 status code and the connection gets closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2649
Sporadic failures of ComplexHATest#testComplexFailover · Issue #2649 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting test: ComplexHATest#testComplexFailover
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2650
Update Kotlin support for 3.5.4 · Issue #2650 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I notice that vert.x 3.5.4 is recently released with kotlin libraries deprecated (kotlin-stdlib-jre7-1.2.20.jar / kotlin-stdlib-jre8.1.2.20.jar) when kotlin released months ago others named as "jdk" (kotlin-stdlib-jdk7-?.jar / kotlin-stdlib-jdk8-?.jar). I can imagine to update kotlin you have to check updated dependencies (e.g. kotlinx-coroutines-core-0.30.1.jar) and recompile vertx-lang-kotlin. Any way, this is something to update in vert.x and I would apreciate this. Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2651
SSH incompatible event loop when NativeTransport set to true · Issue #2651 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2653
NPE on HttpServerResponse.setChunked(false) on 3.5.4 · Issue #2653 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2654
Shared data in both local and clustered mode · Issue #2654 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Providing shared data structures (locks, counters, async maps) in both local and cluster modes, even when Vert.x is clustered.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2655
AsyncFile setReadLength  · Issue #2655 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Could we have AsyncFile.setReadLength for streaming/pumping where result can be bigger than max buffer size ie > 2GB.
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2657
Callback improvements · Issue #2657 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Improve how callbacks are delivered to the application.
some callbacks are invoked under synchronisation which are fine most of the time but can also sometimes lead to deadlock, we should avoid this when possible
some callbacks invocation are delayed with a runOnContext operation which is not suitable when the callback notifies of a state update, e.g a close operation. Often applications use this callback to update its own state. When the callback is delayed, it can lead to an unexpected state when another event happens before the callback, e.g a websocket is closed, making it impossible to write and the application is unaware of this, the websocket close handler should be not be delayed so the developer can rely on this when writing his application
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2660
Incorrect metrics SPI callbacks for H2C upgrade · Issue #2660 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is it a bug or requirement?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2662
Websocket client HTTP header response callback · Issue #2662 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would the vert.x team be open to a PR which exposes yet another callback to be passed into httpClient.websocket that allows a user to receive the HTTP headers returned by the sever after the websocket handshake succeeds?
The issue is that we load balance on the server end based on a cookie, the cookie is auto generated by HAProxy when not present in a request and it includes the name of the backend node the request should route to.  We need this cookie for session identity because we occasionally open multiple websocket channels from a single client.  It makes our lives easier if secondary websocket channels can be forwarded to the same backend node as the original, or if we have to reconnect the initial channel.
I was unable to get this information back even via reflection because it is quickly discarded so I had to fork and modify the code to add a handler.  Since I see no other issues related to this, maybe we are an oddity therefore I am curious if the PR would be welcome.  Feel free to close if not and we will maintain our fork.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2664
io.vertx.core.spi.metrics.HttpClientMetrics#endpointConnected is not invoked for Http2 client  · Issue #2664 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2665
Can we upgrade netty to support Java11 · Issue #2665 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Dear Vertx Team,
since Java11 is already out there. When we run with vertx, it will always pop out following words in logs:
cannot access class jdk.internal.misc.Unsafe (in module java.base) because module java.base does not export jdk.internal.misc to unnamed module
since netty has already fixed this issue, can we update it also?
cheers,
gb
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2666
Allow to put object that doesn't implement Shareable into LocalMap · Issue #2666 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Shareable interface is used in two ways:
The first is worthless. It actually doesn't help to write safe code because there is no way to define whether object thread-safe or not. Rather it's an obstacle because now it's impossible to share any object that comes from 3rd-party library without implementing some kind of holder. For instance what I want to share a DataSource. A dependency injector? There are many thread-safe classes in Java world around Vert.x and no one of them implement io.vertx.core.shareddata.Shareable.
If you want to warn about how dangerous is to share object state between threads, please, do it in the docs. Since Vert.x is unopinionated, do not force to write boilerplate code just to avoid unnecessary checks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2670
Client connections on GlobalEventExecutor thread that are not propagated to the application · Issue #2670 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes the Netty's bootstrap may notify client connections on the GlobalEventExecutor thread when it happens early in the boostrap when an event-loop has not been yet determined. Vertx expects notifications to happen on the event loop thread and this results in a Uh oh! Event loop context executing with wrong thread! failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2671
SSL websocket not working with HTTP proxy · Issue #2671 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems there is a problem with the websocket frame encoding when tunneling a websocket SSL connection through a HTTP proxy.
The following testcase fails on the websocketWithProxy method
the following messages are completely missing the websocket frame informations. The message is therefore never received on the server side
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2672
Ignore case for vertx router binding  · Issue #2672 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of now, vertx router does not handle case when binding to a url path.
For instance, if your application acts as a proxy and have no control on the case for the URI path and in order define a handler you bind to router like this,
rather than just writing,
Is there a reason/limitation that we not using equalsIgnoreCase here?
Also if this change is acceptable, our team is more than happy to contribute to that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2674
Quest for database cache · Issue #2674 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can I use database cache and  how to do?same as spring  boot @Cacheable
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2679
vertx-js example causes warning · Issue #2679 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Following the very first example on the vertx documenation js version causes the following warning on the console:
WARNING: You're already on a Vert.x context, are you sure you want to create a new Vertx instance?
Code looks to be work fine until you start to use some clustering API-s, where they just won't function as expected. I believe because we're on a differently configured context by now.
Do you have a reproducer?
Solution
As I found out from the examples the vertx variable is already defined js verticles, so the above initialization is not required.
If this is true in every cases then the documentation should be updated to reflect this, otherwise it should be more clear describing when the vertx is already defined and when not.
Many thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2682
Redeploy inside docker container fails · Issue #2682 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to create a development environment inside Docker for Vert.x, I have the file system mounted and the file watcher is successfully detecting changes. However when a change occurs the redeploy task ./gradlew classes fails with the following:
Despite the failure Vert.x subsequently reboots but with the stale code as the recompilation never occurs. Whats odd is if there was an issue with the wrapper it would have occurred when the container boots as its started with the command: ./gradlew clean run
Any help would be much appreciated
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2684
executeBlocking callback run on the wrong thread for asynchronous future resolution · Issue #2684 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the executeBlocking(Handler<Future<T>>, Handler<AsyncResult<T>>) might execute the callback on the wrong thread when the runOnContext(...) execution loses the race against the thread that completes the future. This never happens when the worker thread completes the future, but it can happen when the worker thread hands off the future to another thread that completes it.
This happen in the Mongo client and fails with a stack-trace like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2685
Feature: Support for stream dependency and weight · Issue #2685 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem:
The project I am working on requires prioritization of HTTP/2 streams. For that I need to be able to set stream dependency and weight in HEADER frames in request made from client, as well as responses sent from the server. Currently stream dependency and stream weight is not exposed through the API. When writing HTTP/2 requests/responses stream dependency and weight are not passed to Netty, therefore default values are used (0 and 16 respectively).
It seems it would be enough to to add  extend HttpClientRequest and HttpServerResponse interfaces with setStreamDependecy and setWeight to override the default values and pass them through Http2ClientStream.writeHead -> VertxHttp2ConnectionHandler.writeHeaders to io.netty.handler.codec.http2.Http2ConnectionEncoder.writeHeaders
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2686
Problems decoding payload · Issue #2686 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I am making a really simple route in vert.x scala:
I have some payloads with "=" and "%", like this example:
For some strange reason when both are present I am getting this in log:
What I cand do about? Not sure if it is vertx or netty issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2687
Have some plan to support game server？ · Issue #2687 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just learning about vert.x. I think it is suitable for PvP MMO game server for its speed.
Anyone use vert.x for game server?
Or official support plan?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2688
MultiMap should return entries in addition order · Issue #2688 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2689
SSL handshake improvements · Issue #2689 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the SSL handshake leaks handshake failures to the ChannelPipeline during the handshake because we are using the HandshakeFuture to progress during the handshake.
Improve the SSL handshake handling to use a channel handlers (client / server) that will not propagate uncaught failures in the pipeline. The handlers are implemented using events emitted by the SslHandler/SniHandler when the handshake completes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2690
ChannelProvider improvements · Issue #2690 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the ChannelProvider is responsible for connecting the channel on behalf of the NetClient/HttpClient . SSL handshaking and setup is handled separately by the clients.
Improve the ChannelProvider to also handle the SSL client handshake in a common place. The proxy provider has also been merged in the ChannelProvider as there is no much interest to have a subclass for it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2691
Support for distributed queues · Issue #2691 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Could the ClusterManager be extended to expose shared/distributed queues provided by underneath cluster managers in the same way as AsyncMap?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2692
FileResolve shutdown hook throws exception · Issue #2692 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm shutting down a Vertx environment using vertx.close.  During this process the system runs its shutdown hooks.  One of those is deployed by FileResolver and it is consistently throw the following exception:
The issue is that since we're doing close we've already terminated the executor used to run blocking code so the attempt to queue work is rejected.  It would be better if this exception didn't leak as it does currently since there is essentially nothing the Vert.x programmer can do about it (at least not AFAICT).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2695
Signal the VertxMetrics when the Vertx instance is initialised · Issue #2695 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the VertxMetrics SPI does not leak the Vertx instance during metrics creation because the instance might be not be fully initialised yet. We should add a callback to the VertxMetrics to signal when the Vertx instance is initialised before it is returned to the application.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2696
Usability: clustered event bus defaults · Issue #2696 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, there are different processes for configuring clustered eventbus.
When running a Vert.x app from the CLI, or in an executable jar with the Launcher, we try to determine a host address if not provided via argument. Then the host/port are set in the ClusteredEventBusOptions.
When it starts the ClusteredEventBus uses values from options.
There are a number of issues with this process:
the address chosen by the cluster manager is not always consistent with the address chosen by the CLI
it's difficult to configure for beginners: users must update the cluster manager configuration file and provide CLI arguments or EB options
EB options defaults to localhost and when embedding Vert.x, users often forget to set cluster host
For Vert.x 4 we must think about better processes, for a better user experience and less questions/issues posted of course :)
Not all issues need to be solved with code changes: a better documentation about this process can help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2698
Server to server file upload, handler gets stuck · Issue #2698 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So I have a scenario where a file upload from a server is uploaded to another server. The client code is taken from Paulo Lopes' SO post. Client saves a file from user's form and streams it to another server. Though it's written in scala, basically it just forwards futures from file open to http post.
The target server follows the Vertx example with some modifications to receive, reconstruct the file as byte array instead of saving it in local stroage. It doesn't use vertx-web either.
Here req detects incoming request but uploadHandler never proceeds into Handle and is just stuck in the line with comment.  it doesn't throw any exception either. However a file upload from html form directed at that path works. Any help pointing the problem is appreciated. Thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2699
NPE during h2c upgrade without host header · Issue #2699 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the server receives h2c upgrade request without Host header, it throws NPE:
The host header is mandatory, but upon client error the server should respond with error (right now it sends 101 Switching protocols and then the connection is terminated).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2700
HttpServerResponseImpl.isChunked fails to validate existence of Transfer-Enconding header · Issue #2700 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In io/vertx/core/http/impl/HttpServerResponseImpl.java:145  version 3.5.4, the methods tries to compare CharSequence with a String and always returns false even when the header is present.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2701
NetServer not using every eventloop thread · Issue #2701 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm writing a tcp server using vertx NetClient, however i found that even if i start multiple servers and listen at the same time, the handler won't using every eventloop thread.
Here's the example code:
The result I imagine would be printing vert.x-eventloop-thread-(0 to 3), however the output ranges from 1 to 3, where 0 was never printed.
I check the source code and found that when the first server.listen is called, it tries to resolve the local socket host, even if the host is set to 0.0.0.0. The resolve process will start a UDP sock for DNS. The UDP sock will use the second EventLoop element inside the PowerOfTwoEventExecutorChooser.
executors will be used by the last tcp server, where it's the same as the first one. And the DNS lookup will not bu used very often, so the result would be: one event loop thread not doing anything.
I'm wondering whether this is a bug? This is easy to fix, just set the event loop to 5. But if the vertx is upgraded, I must check whether there are any new process fetching event loop from the chooser.
And I don't see it very clear that: why the event loop should be set to 2 * cores. If all libs i'm using are async (async-mysql-client/webclient/redisclient and so on), I think I won't get better performance when setting event loop size to ${a number > cores} than ${= cores} (or change it to ${cores - 1} if considering soft interrupt).
Looking forward to your reply~thx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2702
Multi-threaded worker deprecation · Issue #2702 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MultiThreaded worker verticles are an extension to worker verticles. Like with usual worker verticles, events are handled on worker pool threads. But they can be executed by different threads concurrently, which means the verticle must manage its own state to be visible between threads.
There are many parts of Vert.x which simply doesn't support them. For example, you can't create an HTTP server on a MT worker verticle.
Also, we have seen many new users, in particular those experienced with Spring or Java EE, starting directly with MT worker verticles and adding as many threads as possible with the impression it would help get the best performance results. But this is really counter-productive.
In 3.6.0 we deprecate the usage of multi-threader worker verticles and we document how to replace them. The feature will be dropped in Vert.x 4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2703
Remove multithreaded worker verticles · Issue #2703 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Deprecated in 3.6, they can be removed in 4.0
remove mt worker context
update deployment options
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2704
Deprecate Message replyAddress method · Issue #2704 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The replyAddress cannot be used in both standalone and clustered mode. When clustered, the remote recipient cannot use the reply address because it's not registered in cluster manager.
Reply address is an internal detail of implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2705
File descriptor leak when using WebClient · Issue #2705 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue only happens when an exception happens (a Timeout in this case), but not in every combination of timeout / number of requests. for example, with number of request set to 10 and timeout set to 8000ms, the issue does not appear (only 2 requests fail), however, when the number of requests is 20 and timeout set to 8000ms, the issue does appear (12 requests fail).
I'm wondering if I'm doing something wrong in my reproducer or if there's a bug in the underlying implementation that's supposed to close / free sockets.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2706
Issue TCCL warn based on system classloader equality rather than internal class name check · Issue #2706 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the name of the system classloader class changes with Java version, it seems better to use tccl == ClassLoader.getSystemClassLoader() rather than tccl.getClass().getName().equals("sun.misc.Launcher$AppClassLoader").
Without this, it cause to issue warns on Java > 8 when creating a context from the main thread with the vertx.disableTCCL flag set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2708
Json.checkAndVerify doesn't support Enums · Issue #2708 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I've got a problem with the Json-class in vertx-core.
I think it is related to this piece of code in Json.java:
Another else-if fixed it for me:
This is my first issue / PR, so please tell me, if I can improve something.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2711
Document the new streams fetch mode · Issue #2711 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be useful in javadocs and docs to have a quick overview of the ReadStream state machines when in regular push vs (new) pull/fetch mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2712
NPE in OpenApi3Utils for dynamic number of query parameters in spec · Issue #2712 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On exploring the use of web-api-contract and OpenAPI3RouterFactory.create and have the requirement to have a variable (dynamic) number of query parameters for an endpoint e.g. /my/path/v1?param1=value1&param2=value2 etc. (for a search solution) but the parsing of this in OpenApi3Utils.class fails with a NPE.java.lang.NullPointerException
the relevant slice of my spec.yaml is
it parses fine in SwaggerUI for example with the correct output.
A suggested workaround of an empty {} for the object properties sorted the NPE, but no additionalProperties are parsed from the url (which may be a secondary issue)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2715
io.vertx.core.net.SocketAddress.NetworkMetrics#bytesRead and bytesWritten do not contain headers · Issue #2715 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the numberOfBytes only contains the body length.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2716
3.6.0.CR1  do not support http2?  · Issue #2716 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the same code run correctly in the 3.5.3
when I use 3.6.0.CR1, it throws
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2717
Clear pending messages when unregistering message consumer · Issue #2717 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the message consumer, keep the pending messages (accumulated when the consumer was paused) after unregistration. There can be some races that the consumer is resumed after unregistration (user issue) and the pending messages will be processed and it results in internal failures.
Instead the pending messages should be cleared on unregistration and the discarded messages processed by the internal discard handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2718
future compose not handle first future exception · Issue #2718 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
my question is why the first future of compose futures must be success?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2719
The sendFile implementation using file region might idle timeout for very large files · Issue #2719 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently calling sendFile on a NetSocket or HttpServerResponse might timeout for connection having a TCP idle timeout set. This happens because we send a single file region that takes more time than the idle timeout value and cause a timeout. Since it's a FileRegion object, configuring observeOutput on IdleStateHandler will have no effect as such regions are not reporting progress on the ChannelOutboundBuffer.
Instead of sending a very large region, instead we stream file regions of a fixed size (1mo) until the file is completely sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2720
Upgrade Jetty ALPN Agent to 2.0.9 · Issue #2720 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
so that the tests work with the latest Oracle JDK.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2722
Close all shared TCP based servers when Vert.x is closing · Issue #2722 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When closing Vert.x, only the first shared server is closed and not the other servers, which actually does not close the server, since the other shared servers are not closed and prevent closing to happen.
On Vert.x close we should instead close all the servers with a special method as this is not a regular close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2725
Configure cluster public host and port from command line · Issue #2725 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, it's only possible to configure cluster public host and port with sysprops.
This will help having a consistent user experience (cluster host and port can be configured via the command line).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2728
Remove TCPSSLOptions#usePooledBuffers · Issue #2728 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See #2325
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2729
TLS 1.3 Support · Issue #2729 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi All,
Is it possible to update netty to 4.1.31.Final and add support for TLS 1.3?
That said TLSv1.3 is not enabled by default so if you want to use it you will need to explicit enable it by using TLSv1.3 when configure your SslContextBuilder (like for example):
To be able to do this for our native implementations you also need to ensure you use netty-tcnative 2.0.19 (compiled against OpenSSL 1.1.1+) or netty-tcnative-boringssl-static 2.0.19.
Regards,
Pratik Parikh
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2730
AsyncFile should accept empty buffer writes instead of throwing an IllegalStateException · Issue #2730 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How can I avoid this exception or can I ignore this exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2731
Evetbus processor registration problem with socket · Issue #2731 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi：
Please look at the chart below.
Using localConsumer here will make other vertx instances in the cluster invisible.Why not consumer but localConsumer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2732
AsyncFile reuse the ByteBuffer for repeated reads · Issue #2732 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently AsyncFile allocates an heap ByteBuffer for repeated reads and could instead allocate a single that would be reused.
Change the doRead() method so it allocates a ByteBuffer and then call doRead passing the buffer instead of calling the read method that allocates the ByteBuffer. After copy the ByteBuffer must be compacted for reuse.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2733
AsyncMap keys, values not available through reactivex/core · Issue #2733 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a way to gain access to these methods from reactivex/core even if they are not the rx variant?
Will there be an observable returning rx variant?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2734
when use metrics with h2 and h2c , http server will lost bytesWritten info · Issue #2734 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the method  bytesWritten(Void socketMetric, SocketAddress remoteAddress, long numberOfBytes)  has not been invoked
@Override
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2736
HttpServerFileUpload should be resumed when the pending inbound buffer is drained · Issue #2736 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
That's a regression introduced by the usage of InboundBuffer.
The consequence is that the TCP when the TCP connection is paused, it is never resumed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2737
File Upload never finishes with 3.6.0-CR2 · Issue #2737 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So we upgrade to 3.6.0-CR2 to make our code base ready for 3.6.0.
And we encountered an Issues related to File Uploads.
When you try to upload a large file to an vertx webserver and pump this file to the filesystem the following happens:
The writeStream gets full because the fs can write fast enough. This leads to an full InboundBuffer in the HttpServerFileUploadImpl which the proceeds to pause the request when it recives another chunk of data.
The thing is, the request never gets resumed again even tho write stream and inbound buffer get empty.
Looking at the code in HttpServerFileUploadImpl i dont get how this could have worked before since nothing resumes the request. But everything works with 3.5.2.
I think this is a regression introudced through the refactoring of the internal Queue in the HttpServerFileUploadImpl to the InboundBuffer class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2738
ClusteredEventBus with ZookeeperClusterManager loosing the messages when one of the nodes is leaving the cluster · Issue #2738 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello guys!
It seems like vertx cluster event bus (zookeeper implementation) loosing some messages when some of the nodes leaving the cluster. This can be related to #1594 or vert-x3/vertx-hazelcast#13 issues.
Theoretically, it is still sending the messages to the shutted down node.
Here is a code to reproduce:
For now this is really blocking for my project. Is it possible to do something with this?
For example:
Send a call to other nodes, that current node is leaving
And just then start all shutdown procedure
enable some retry mechanism on the event bus and track closed connections or something..
Unsubscribe from receiving messages
push to verticles all the messages, received by event bus, before vertx instance will be shutted down
In this case I can fail the messages manually
stop the event bus and stop the instance
I will be very grateful for any help!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2739
Undocumented breaking change in HttpServerResponse::setChunked(true) from 3.5.3 to 3.5.4 · Issue #2739 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vertx 3.5.3 chunked transfer encoding could be enabled by
In Vertx 3.5.4 the above call order breaks with
IllegalStateException: You must set the Content-Length header to be the total size of the message body BEFORE sending any data if you are not using HTTP chunked encoding.
Please note that headers().remove("content-length") was not a requirement for getting/retaining chunked transfer encoding in 3.5.3. That call just adds clarity by leading to an IllegalStateException whenever chunked transfer encoding is not enabled.
Vertx 3.5.4 require that the call order be reversed. I.e.
I would not expect the behaviour of 3.5.4 unless chunked transfer-encoding was enabled and disabled by setting the appropriate header (with a call to header().set("transfer-encoding", "chunked")), rather than controlling it through a separate instance method.
Given the presence of the setChunked instance method , I do expect the behaviour of 3.5.3: That only explicit calls to setChunked can enable and disable chunked transfer encoding, and that the appropriate transfer-encoding header be set accordingly.
Messages MUST NOT include both a Content-Length header field and a non-identity transfer-coding. If the message does include a non-identity transfer-coding, the Content-Length MUST be ignored
Neither Vertx 3.5.3, nor 3.5.4 removed or prevented the content-length header from being set when chunked transfer encoding is enabled. I don't see a problem with it, because I can control this behaviour in my implementation. But if you really do feel that it is desireable for headers().setAll to be an implicit call to setChunked(false),  then I strongly believe you should do the same whenever the content-length header is set. I also believe you should change the documentation by
Adding a note about this breaking change in the release notes for 3.5.4
Changing the documentation for both ::setChunked and headers::setAll to clearly state that calls to these methods are inter-dependent as well as document the impact of different method call ordering.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2740
EventBusMetrics  add messageSent(String address, Boolean publish, Boolean local, Boolean remote, ServerID sid)  method · Issue #2740 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add
void messageSent(String address, Boolean publish, Boolean local, Boolean remote, ServerID sid)
method to the EventBusMetrics class to help track the delivery of event bus messages across cluster nodes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2741
HttpClient request/response uses Handler<AsyncResult<HttpClientResponse>> pattern · Issue #2741 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient request/response methods are using in Vert.x 3 patterns using an Handler<HttpClientResponse>. For obvious reasons we want to use instead Handler<AsyncResult<HttpClientResponse>> in Vert.x 4. The WebClient provides already this in Vert.x 3.x and it is the advocated client for high level operations so we don't need to provide replacement for these operations, only to deprecate them.
Pull request for Vert.x 3 that deprecates the methods of the HttpClient with a mention for removal in Vert.x 4:
A bunch of pull requests for the Vert.x 4 stack that upgrade the usage of the handler:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2743
Deprecate the HttpClient request/response methods that use an Handler<HttpClientResponse> · Issue #2743 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient request/response methods are using in Vert.x 3 patterns using an Handler. For obvious reasons we want to use instead Handler<AsyncResult> in Vert.x 4. The WebClient provides already this in Vert.x 3.x and it is the advocated client for high level operations so we don't need to provide replacement for these operations, only to deprecate them.
This issue tracks the deprecation happening in Vert.x 3.6
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2745
HttpClientRequest should be reset on a timeout · Issue #2745 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when an HttpClientRequest times out, the request exception handler is called, but the request will remains unmanaged when it already is assigned a connection. When a request times out, the request should be reset. This will do a proper reset in HTTP/2 and will do a best effort operation for HTTP/1 (at best it recycles the connection, at worst it closes the connection).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2746
Remove pooled buffer option · Issue #2746 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x provides the option on TCPSSLOptions to configure the usage of pooled buffers. This option has no effect whatsoever and has marked as deprecated in 3.6. We should simply remove it from Vert.x. This option might be overridden by TCPSSLOptions sub classes in other modules of the stack, so the stack should be checked and provide corresponding PR along with this one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2747
http server metrics vertx.http.server.bytesSent is insufficient for bandwidth measurements · Issue #2747 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The metrics collected by the SPI HttpServerMetrics.bytesWritten(..) is technical correct on average but for large downloads that spans multiple reporting intervals the result is misleading and hard to reason about.
Assuming a 10s reporting interval and a large file that take 60s to download from a vertx HttpServer, the metrics reported is 5 intervals of 0 bytes sent, followed by 1 interval with download activity far beyond physical capacity.
if bytesWritten() was called, not just at the end if the response, but more frequently (say for each 1Mb written) the metrics would be easier to make sense of.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2748
NetSocket StartTLS upgrade failure should report an exception to the socket exception handler · Issue #2748 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When doing a NetSocket#upgradeToSsl, any handshake failure should be reported to the socket exception handler since the NetSocket#upgradeToSsl does not yet take an asynchronous result as argument. The work-around is to set a close handler on the socket, since it will be automatically closed on such failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2749
empty vertx server metrics with http2 · Issue #2749 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using dropwizard metrics and vertx 3.6.0, the vertx server metrics are empty (values are 0). The following test passes using vertx 3.5.4 and fails with vertx 3.6.0. It also passes with vertx 3.6.0 when switching the protocol version to HTTP_1_1.
It seems that this is due to the failed flag passed to Http2ServerResponseImpl.handleEnded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2750
How to configure host verification callback · Issue #2750 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
we are using Vertx in the cluster mode with SSL enabled and TCP Eventbus bridge for other microservices. In both, I can enable SSL, which is working fine in all combo. but I need the control of connected hosts or at least verification callback.
I can enable SSL by using net server option.
but there i couldnt find host verification callback configuration. is it possible like in SSLServerSocket? or is there any other way?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2752
Improper parsing of multiple search domains in resolv.conf · Issue #2752 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the search domain parsing of the resolv.conf file only takes in account the first search domain and not the other. The regression is in the Netty parser and has been fixed in 4.0.31.Final
We will use the fixed code temporarily until we move to 4.0.31.Final.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2753
JsonObject cannot map to class with Instant or byte array field · Issue #2753 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Jackson mapper is configured to serialize Instant and byte arrays properly (required for io.vertx.core.json.JsonObject#mapFrom method).
But it's not configured to deserialize properly (in method io.vertx.core.json.JsonObject#mapTo).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2755
Prune multi-threaded worker verticles · Issue #2755 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MT worker verticles have been deprecated for removal in 3.6.0.
We simply remove them in v4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2756
Write buffer text message · Issue #2756 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In WebSocketImplBase, the writeTextMessage method accept a String as input, then convert it to Buffer internally.
I'd like to add a method which accept Buffer data but send out as FrameType.TEXT
Something like the following:
It's for the performance, in our case we already have a Buffer, it will be wasted to convert it to String then Vertx convert the String to Buffer again before sending out.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2759
Why the NetClientOptions can't set the SO_TIMEOUT options · Issue #2759 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I do not found any method to set the SO_TIMEOUT option  io.vertx.core.net.NetClientOptions.   I check the Transport.java file, only found the  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, options.getConnectTimeout()), but not found  any method call like bootstrap.option(ChannelOption.SO_TIMEOUT, xxxx).
Why there is no method for the NetClientOptions to set SO_TIMEOUT options?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2760
NoSuchMethodError io.vertx.core.impl.VertxInternal.getOrCreateContext() · Issue #2760 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2761
routingContext.reroute() should reparse headers · Issue #2761 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When rerouting, the headers are not reparsed, which prevents us from modifying the headers before rerouting.
For example, I'd like to process requests with a "accept" parameter that I will convert into a "Accept" header. I've written a handler that does that then call reroute(). The problem is that when reroute() is invoked, the headers are not parsed again, so my new "Accept" header is not taken into account and the wrong handler is invoked.
The fix would be as simple as invoking fillParsedHeaders() from the reroute() method into RoutingContextImpl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2762
Add global MessageCodec · Issue #2762 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be good to be able to register a global MessageCodec to be used when a specific codec for a message is not provided.
As of today (Vertx 3.6.0) when a message without a registered MessageCodec is sent through the event bus, a RuntimeError is thrown. Nevertheless, most of the time a silent fallback to a default codec would be enough.
For example, in our current application, we want that all messages are sent in Json format; we have tens of different messages and we are forced to register for each of them a specific codec.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2763
3.6.0 -- HttpServerRequest.pause() no longer prevents end of empty stream · Issue #2763 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be a behavior change between 3.5.3 and 3.6.0 which unfortunately has broken our server.  I'm hoping it was an unintended consequence of the stream changes related to fetch() and not a purposeful semantic change in what pause means.
In one of the routes in our server we install a handler which calls pause on the HttpServerRequest instance that is being processed (we use context.request().pause()).  We do this so that we can install our own end handler and proxy the request to a different stream.  Once that's done we resume the request and let it proceed as normal.
In 3.5.3 this works fine -- the sequence of calls (at a high level) go something like this:
handleMessage called on Http1xServerConnection with the initial client request.
pause called on the HttpServerRequestImpl instance
Internally this used to set both the paused and queuing flags to true.
handleMessage called on Http1xServerConnection with the LastHttpContent marke
Because of the fact that queuing is true this would defer processing of this until resume
At this point we set up the request proxying and resume the request (this includes installing a new end handler).
In 3.6.0 we see:
handleMessage called on Http1xServerConnection with the initial client request.
pause called on the HttpServerRequestImpl instance
Internally this calls pause on the pendingQueue (which is actually created at this point), but does not set the paused flag to true.
handleMessage called on Http1xServerConnection with the LastHttpContent marker
There is no code which prevents this from being immediately processed, even though the request has been paused.  This causes the request to be marked as "ended".
Now when we attempt to establish the alternate handlers for the request we get a failure since the request has ended.
The upshot is that pause doesn't seem to be respected.  It is also a bit odd that there appears to be no code which sets the paused flag in HttpServerRequestImpl to true (there is still code that checks for this, but nothing sets it, not even the called to pause()).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2765
Use base64url when converting to/from JSON · Issue #2765 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When converting data objects to/from JSON, byte arrays are encoded/decoded to/from base64.
But the I-JSON Message Format RFC actually recommends to use base64url.
When it is required that an I-JSON protocol element contain arbitrary binary data, it is RECOMMENDED that this data be encoded in a string value in base64url; see Section 5 of.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2767
java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonSerializer on 3.6.0 and 3.6.1 · Issue #2767 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I run my project I get an error like this: Exception in thread "main" java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonSerializer if I use these versions: 3.6.0 or 3.6.1. But if I return to version "3.6.0.CR1" in my gradle config file then everything works. I try to invalidate cache but it doesn't work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2768
FileResolver isBundleUrlDirectory is not correct for DirBundleFile · Issue #2768 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if url is exist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2769
Deserialize object by it's base class · Issue #2769 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is it possible to send / receive an object using polymorphism and knowing only it's base class?
Example:
Now, I would like to make a generic receiver that will get all classes that extend Base class:
When I'm trying to do something similar to this I'm receiving an error that deserialization process has failed to decode my data into Base class as far as there are unrecognized fields (param2 in this example).
Is it somehow possible to use polymorphism with vert.x EventBus?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2770
java.io.IOException: Too many open files · Issue #2770 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi, yesterday, i just got an error open too many files, but i checked all fd limit configuration, still can't figure it out, here is some error log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2771
attributeHandler or partHandler in multipart · Issue #2771 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Guys,
I have a use case where i have to parse form attributes BEFORE the file (the attribute tells the app how to handle the file upload like compression and encryption etc). In current Vert.x this is not possible as we can only have the attributes at the endHandler. Is it possible to have attributeHandler that is called as attribute is read or even better to have partHandler and abstract all parts as to check the type of part inside the handler which is more natural.
Regards and Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2772
HttpClientRequest random timeout when reuse keep-alive connecton and  server close connection · Issue #2772 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx HttpClient request to server successfully, and connection keep-alive
client send the second request with the connection from pool, but the connection is closed by server
sometimes HttpClientRequest can not handle this correctly, will cause a timeout problem, not invoke excepton handler immediately
test with vertx 3.5.3/3.6.2, both have the problem
analysis:
1 deactive channel
2 fire channel inactive and deregister (async task)
vertx process connecton close based on (2)
vertx invoke netty channel write with VoidPromise, can not know write failed, can only waiting for timeout.
so when a client request is created and sent between (1) and (2), which can be done by runOnContext, will cause a timeout problem
reproducer code:
it's a random problem, and difficult to reproduce
so i build the reproducer case with javassist, controll the work flow to make the problem always triggered.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2773
HttpClient race condition when getting a connection from the pool being closed · Issue #2773 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently there is a race condition with the HttpClient between a client request and a connection close. The pool delivers the client request in the next tick and the connection might be removed from the pool between this the schedule and the delivery. At this moment the client does not know the connection was closed and is never aware of the connection close.
We should avoid a next tick in this situation, i.e when the client request is fulfilled with a valid connection, it should be called immediately to avoid the race.
Currently the fact that the connection pool can hold connections with multiples context does not allow to run the pool requests on the pool and thus the situation is hard to avoid without a re-check before the connection is delivered. A better solution might be to attach a vertx context on the pool and consider all connections will use the same context, this would allow to eliminate the race easily.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2774
Deprecate logging API · Issue #2774 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Vert.x logging API is public and advertised in the docs. Besides, there are a couple of issues as it supports parameterised logging methods without standardising on a message format (it delegates this to the logging backend so messages are not portable).
Therefore, we regularly get questions/bug reports about this, which increases the maintenance effort. Also, it's not good to provide a non-working feature only to cause users' disappointment.
Considering it's not a programming toolkit responsibility to provide yet another logging API, the Vert.x loggers shall be deprecated and, in a later major version made internal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2776
Remove documentation for public logging API · Issue #2776 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The public logging API will be deprecated in v4 (see #2774). Let's stop advertising it in v3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2778
Deprecate Future#completer · Issue #2778 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
after this issue (#1827) finished. should we deprecate Future.completer and change the examples in documents?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2779
vertx eventloop is slowing consuming from eventbus on load · Issue #2779 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are polling messages from kafka (using Executor Thread) and put it on vert.x eventbus. eventually the verticles(non-workers) consuming those messages from the eventbus.
we measured that the time it takes to each message to be consumed from vertx eventbus after it was sent to it can reach to 4 seconds on peaks.
for some reason occasionally it takes to the eventloop's verticle consumer long time to consume messages still but not showing the famous thread block error anywhere else. So we cant be sure what delaying it(we set the threadblock warning to be on 100ms)
weird thing that we dont see any event loop block warnings. cpu/ram are all good.
we measured the time it takes for a messages from the time we send it to the eventbus until it was subscribed and it took around 1 second. on average our event-loop job metrics shows around 60ms so no way eventloop is being delayed picking up messages.
perhaps something regarding the eventbus ?
thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2780
text is empty · Issue #2780 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2781
A Question about Transaction For Mongo&MySQL · Issue #2781 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a small idea. About transaction...
In future versions. Will we add some new methods? For simpler transaction usage.
And I didn't find a good way to use transactions in VertX.
Recently I've been using VertX and Mongo.VertX much more interesting than SpringBoot.It's just that there's a problem here in transactions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2782
How to use CompletableFuture in vertx-web-client · Issue #2782 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello,I wanted to use CompletableFuture, in vertx-web-client but now it's blocked and I don't know how to use it in vertx-web-client。
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2783
HandlerManager throws ArrayIndexOutOfBoundsException under high load · Issue #2783 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Upon stress on websocket connectivity (Connect and disconnect quickly), HandlerManager is throwing ArrayIndexOutOfBoundsException as below -
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2784
Vertx-config when using Spring Config Server Store not interpolating variable properties · Issue #2784 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using vert.x ConfigRetrieverOptions as type "spring-config-server" to fetch properties from config server in my vert.x application.
I have property file in my config server that has some interpolated values like:
When I am trying to fetch key2, instead of returning "hello/world" ConfigRetriever.getConfig is giving me as it is value without interpolating i.e. ${key1}/world
Is there anything else I need to do in vert.x to support this feature(String Interpolation)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2785
HttpServer should send a valid HTTP response when no request handler and a WebSocket handler is set · Issue #2785 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServer fails with a NPE when a ServerWebSocket handler is set and no HttpServerRequest is set. In this situation instead the server should respond with a 400 response when a request with a missing upgrade header is received.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2786
ServerWebSocket upgrade does not always fail correctly during an handshake failure · Issue #2786 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The actual implementation of the server will not handle correctly an websocket handshake failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2787
HttpClient pool improvements · Issue #2787 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A few improvements done to the HttpClient and the pool:
the client suffers from races when a connection is closed while being delivered to the client request (see #2773)
TCP idle timeout now is not handled anymore with pool events but instead when a TCP idle event happens, it is ignored when the connection is in the pool
the activate/passivate connection has been removed (since it's not used anymore for TCP idle)
the coupling of the pool to channel has been removed as it was not necessary
The main change is that now the pool methods update the pool state and the corresponding events (deliver a connection to a waiter, connect to an endpoint, keep the waiter list bounded) are handled on the event-loop thread to avoid races. To accomodate this, now the pool has a context instead of having a context per connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2789
Virtual memory usage is high, when Java Heap or real memory usage is much lower · Issue #2789 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello guys, Vertx is an awesome piece of software, thanks for your effort.
However I have a problem which I described in the subject. My web server is extremely simple and the only thing it does is sends received URL to Kafka after basic validation. I understand that Kafka client might be the root cause, but I have found similar issue with like
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2790
JsonParser should not resume or pause the source wrapped read stream when it is ended · Issue #2790 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have implemented streaming Json from an AsyncFile as shown in this example. This has worked nicely before 3.6.0 but now results in a java.lang.IllegalStateException: File handle is closed in 3.6.2.
Based on some debugging, the following happens:
the exceptionHandler is called with the above exception
As far as I can see, issue #2584 and PR #2583 seems to be related.
Is the example outdated? Should we handle file closing in some other way?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2792
Stream pipe API · Issue #2792 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the advocated way to transfer data between streams is to use the pump API. This API only cares about transferring data and leave the aspects of stream life cycle and error management to the developer, which can be difficult to implement when a write stream is obtained asynchronously.
The stream API is a new API that will pipe a read stream to a write stream using the well known pump mechanism and will also take care of other aspects to provide a simple and effective solution to the developer.
The previous pump API will still be supported but not advocated anymore in the doc in favor of the pipe API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2794
HttpServer closes the connection prematurely when sending a large file with HTTP/1.1 without keep-alive · Issue #2794 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version:  3.6.2
When sending a file larger than 1MB the server will prematurely disconnect if the client has set the Connection header to close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2795
HttpServer handles incorrectly pipelined server response with sendFile · Issue #2795 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServerResponse will signal that the connection can be written to the server after calling sendFile leading the server to process a next request and interact with the response concurrently with the send file operation. Instead the response should signal the end when the file has been sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2797
The uri() method and the absoluteURI() method in HttpServerRequestImpl are inconsistent in judging the legality of uri. · Issue #2797 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I request the address http in the browser, the uri() method will not report an error, but the absoluteURI() print error will return a null value. This inconsistent performance is not reasonable.
The contents of the error are as follows:
The first line is the result returned by the uri() method.
The last line is the result returned by the absoluteURI() method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2798
io.vertx.core.VertxException: Thread blocked · Issue #2798 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
i am already using vertx.executeBlocking() but i always get this exception:
For explanaition:
I download some files from ftp server and this takes some time. So i have also tried to set the checker interval:
but this doesn't have any effect.
It is a clustered vertx instance (source file).
What can i do to solve this problem? Or how can i increase the limit?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2799
Feature Request of webclient : getRedirectedUri()   · Issue #2799 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using web client to get urls . I need to get the redirected uri for further parsing as base url . Thanks in advance . As I investigated, HttpAsyncClient uses a HttpContext to get it:
just for reference.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2800
MongoDB rxFindWithOptions returns no results · Issue #2800 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I'm trying to run natural language search. I have collection tag, and that collection has text field, with text index on it.
When I connect via shell, and run the query:
I get expected results back. When I do the same from the vert.x kotlin app:
I always get 0 results back for the same input  - "tag" string in this case.
Is there some obvious mistake I'm making?
Many thanks for wonderful work!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2801
Document that executeBlocking should not be used for long blocking operations · Issue #2801 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently users might use executeBlocking for operations that lasts an indefinite amount of time (e.g using a worker thread to poll a blocking input in a while loop). Add documentation to clarify this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2802
HTTP response sendFile callback · Issue #2802 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add a callback to HttpServerResponse.sendFile so the caller can react to when the file is completely put on the wire.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2803
HTTP2 request/response exception handler should not be called when response is ended · Issue #2803 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When setting an exceptionHandler for a response, it is called with a "connection closed" exception for every HTTP2 request, even when the response has been written and ended properly. This does not happen for HTTP1.1 requests. The following unit test illustrates this problem - it passes for HTTP1.1 and fails for HTTP2. Maybe PR #2319 fixes this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2806
Vertx  call RPC， no Handler for address exception · Issue #2806 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using vertx-service-discovery for rpc service. And use vertx-ignite for cluster. The vertx version is 3.5.4.
I also got this exception: NO HANDLER (-1) for address , it appears sometime, not always.
the exception showed below：
I registered in the eventbus address “_comservice_192.168.1.33” ，bond with the service name “messagepriovder_comservice_192.168.1.33” . when the com service node(192.168.1.33) started, the rpc service will be published. Then the biz service node will find the rpc service by service name rhen call the rpc interface.  The com service node and biz service node are clustered by ignite with tcpvmfinder configurations.
I succeed to get the rpc service consumer , but when calling the rpc interface, the error  appears.
I got very confused , and test some days , have not fixed this. Could anyone offer s
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2375
Http1xOrH2CHandler should remove itself before firing the buffer · Issue #2375 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Http1xOrH2CHandler removes itself after firing the buffer which leads the Http1xOrH2CHandler to process a decoded error (that is fired in the pipeline to be treated like a network error). It should should remove itself before, since once the protocol has been identified, it should not interact anymore with the pipeline
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2376
net client idle in ms · Issue #2376 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am using vertx redis and I need to idle timeout in less than a seconds. I am using Redis vertx and I have checked that NetClientImpl always call IdleStateHandler in a way that it will idle in seconds.
Do you support only TimeUnit.SECONDS for a specific reason ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2377
The http server request exception handler should observe the response as closed on a close event · Issue #2377 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2379
Typo prevents configuration of EpollTransport · Issue #2379 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside of Transport.java, the configure method has the following:
But inside EpollTransport.java it is looking for:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2380
The HTTP server should always resume the request when the last chunk is processed · Issue #2380 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 3.5.1
The code was taken from the BodyHandler. Using the following code and a small file (2 byte) causes the problem
The second request is stuck and the vert.x handler is never called. Problem is associated with HttpServerFileUploadImpl.streamToFileSystem.
The resume() Method sometimes instantly calls the endHandler (without another eventloop iteration). When this happens the HTTP connection cannot be used for further requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2381
CONTENT_LENGTH should be set in the end method not write · Issue #2381 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I encountered a behaviour which looks weird when I was trying to create a seperate Handler that ends a Response. [For a reason!].
As a solution, I think we should write the headers only in the end method and if we're trying to and not while writing.
If you agree, let me know to create a PR.
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2382
HTTP Download Server takes very long to open large file · Issue #2382 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to setup two HTTP Servers.
Server1 is user facing, accepting REST request to download large file. Server1 then forward request to Server2 to get file.
Server2 will open file from filesystem and send it back.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2384
can Future restore？ · Issue #2384 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had a method as:
When catch a exception， happend:
how can i do? or is there any better way to write it?
This will solve the problem, but it will be so bad
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2385
public interface VertxInternal exposes package private classes WorkerPool and WorkerExecutorImpl · Issue #2385 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to implement a wrapper for Vertx instance that would do some custom stuff before delegating to actual instance. Implementing only Vertx interface would not work(in some cases Vertx instance is casted to VertxInternal inside vertx libs).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2386
Provide a value version of runOnContext on ContextInternal · Issue #2386 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes we write this idiomatic code:
Having a value version:
would allow to simply write instead:
without an extra capturing lambda and be more concise and remains readable.
I'm targetting ContextInternal to avoid overloading Context with an extra method that would create unnecessary API noise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2388
Http1xServerConnection's processMessage seems to hang one of my event-loops · Issue #2388 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Our server is using Vertx 3.5.1, it handles thousands of request/sec from thousands of JS clients. Those JS clients sometimes create rubbish request with strange chars
When processing query parameters with invalid chars like the one above we don't have problems because Http1xServerConnection's processMessage always return true, this can be check with the following stack trace
But when request.decoderResult().isFailure() returns true (from Http1xServerConnection's processMessage) and after invoking handleError method, the request is queued again (Http1xServerConnection's  handleMessage), so event loop will handle it again later
Actually I am "quite sure" about this because now this machine does not receive any request, it has been disconnected from the load balancer, and this event-loop is still using lots of resources
I attach some stack traces of the problematic event-loop
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2390
Netty upgrade to 4.1.22.Final · Issue #2390 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
Im using JDK 10 and have encountered an issue with the version of netty being used(netty/netty#7768, where the owner said on the 4th of may, "Upgrade to latest Netty version as it was fixed there")
Language: Kotlin
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2391
Time values can be specified with a time unit · Issue #2391 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2396
oAuth introspect token works only with POST url · Issue #2396 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi We are working to implement oAuth2 in our vertx application. We have configured path in while creating oAuth2Oauth and tokens are generated. When we try to introspect token using oauth2oauth.introspecttoken() method it throws error "405 Method not allowed". Reason is introspect token method fetches the introspect URL using POST. But our r provider is custom oauth provider and the validate URL is GET URL.
So is it possible to provide http method as config to oAuth provider or can we create custom oauth provider. If so can anyone please refer a link for custom oAuth provider. Many thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2397
Change the method signature for CompositeFuture#all · Issue #2397 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please change the signature of this method from:
in order to call it with any type of Future (like List<Future<Void>>).
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2398
javax.net.ssl.SSLHandshakeException: General SSLEngine problem · Issue #2398 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I use WebClient to send a HTTPS request, I get an error:
Here is my code:
Error info:
Can you help me,thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2400
Can't capture javax.net.ssl.SSLHandshakeException when using HttpClient · Issue #2400 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can't capture javax.net.ssl.SSLHandshakeException when using HttpClient.
See the following snippet:
When using postIt method and my-cert does not match the cert in the server I get:
But this exception happens at Netty level apparently and I'm not able to capture it to report it to interested parties.
Is there anyway to handle this exception? I'm also integrating the service with Prometheus but I don't see Vertx publishing any of these stats.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2402
Callback Hell is painful and Quasar is also ugly · Issue #2402 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
is there any good solutions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2405
read wrong audio data from HttpServerRequest.getFormAttribute. UTF8 will change illegal byte to EFBFBD. · Issue #2405 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
but we read wrong data from HttpServerRequest.getFormAttribute. UTF8 will change illegal byte to EFBFBD.
didn't find any method to read binary data from vertx HttpServerRequest like like getReader or others
Do you have any comments about this? thank you in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2406
Cleanup expired HTTP client connection every second instead of milliseconds · Issue #2406 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
starts a Timer with 1 milli-second delay to search for closeable/evictable connections.
Is it really required to do this so often? - Especially as we can define the keep-alive time only as whole seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2407
Datagram socket resolve hostname even on IP address  · Issue #2407 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are sending packets directly to IP and noticed that it's trying to resolve hostname. https://git.io/vpmfI addr.isUnresolved()) are always true.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2409
Use CloudFlare 1.1.1.1 as default DNS fallback instead Google's public DNS 8.8.8.8 and 8.8.8.4 · Issue #2409 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2410
Feature - Provide a wrapping of an InputStream into a ReadStream<Buffer> · Issue #2410 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This comes after these discussions.
@cescoffier already provided an implementation here.
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2411
HttpServerResponse::exceptionHandler not called when any HttpServerResponseImpl::headersEndHandler throws · Issue #2411 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When an exception occurs within one of HttpServerResponseImpl::headersEndHandler this exception does not seem to be processed by HttpServerResponse::exceptionHandler and the response remains not ended. The following tests proves this on the example of an incorrect cookie (triggering an IllegalArgumentException in cookie.encode()), which leaves the server response in limbo:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2412
Missing VertxGen annotation on JsonEventType · Issue #2412 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This enum misses the VertxGen annotation making it impossible to be used by non java languages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2413
Native transport SO_REUSEPORT should be set on server bootstrap as option instead of child option · Issue #2413 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2414
Report HTTP client pool internal failures as connect errors · Issue #2414 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2415
HttpClient pool should use a LIFO policy instead of a FIFO policy · Issue #2415 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2416
HTTP client requests should always prefix request URI with / for absolute queries · Issue #2416 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2417
Async map behaviour differs in local and clustered mode · Issue #2417 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For example, following code fails in local mode, but works fine in clustered one:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2418
Possible deadlock when trying to get multiple locks · Issue #2418 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is the code, which illustrates the problem.
The Consumer verticle acuires lock1 and gets stuck.
I have reproduced the same problem using HazelcastClusterManager and IgniteClusterManager.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2419
Use a stack-less TimeoutException when timing out an HttpClientRequest  · Issue #2419 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2423
Unable to disable file caching in 3.5.1 in intelliJ IDEA · Issue #2423 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Static files in the JAR are not being "re-read" after they've been changed during development, while the app/server is running. The server has to be restarted after each change instead.
Inside my public static void main(String[] args) method, before any vert.x code, I have System.setProperty("vertx.disableFileCaching", "true");
Storing my static files on a file system path instead would be cumbersome due to this project's needs.
I have consulted Link #1514 and Link #1528, but I am not having success so far.
My development environment:
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2424
Showstopper: NoSuchMethodError during bootstrap · Issue #2424 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When calling either "vertx.clusteredVertx(...);" or "vertx.Vertx.vertx();" the following exception gets thrown in 3.5.1:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2425
io.vertx.core.buffer.Buffer tightly coupled with io.netty.buffer.ByteBuf · Issue #2425 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Buffer interface is tightly coupled with the netty ByteBuf. IMO this is an unfortunate design and the Buffer should be completely third-party classes agnostic.
The default implementation offered by Vert.x could rely on the netty ByteBuf (essentially wrapping it), but other implementations should be allowed without using the ByteBuf
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2427
Behavior when clustered Vertx instance crashes and Lock is acquired · Issue #2427 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using Vertx with Hazelcast as the cluster manager and I am stuck with a problem on how to deal with the situation where a Vertx node acquires a lock and crashes right after it. As no body else will be able to acquire that Lock, there is no way to release it with without recycling the cluster. Is that the expected behavior or am I missing something? Will Hazelcast deal with a crashing node that's holding a Lock?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2428
Decouple the FileResolver from a Vertx instance · Issue #2428 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motiviation: currently the FileResolver is in the io.vertx.core.impl package and owns a Vertx instance. The only reason it needs this instance is to delete the cache dir when it is closed, because it actually needs to schedule a blocking file deletion (via the filesystem instance).
Change: decouple the FileResolver from the Vertx instance and the FileSystem implementation so it can be used without Vertx or FileResolver. The close operation is now blocking and the callers run it in an execute internal blocking operation (Vert.x close) or a thread (at JVM shutdown).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2430
Metrics SPI should not be exposed measured instances · Issue #2430 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation : currently the Metrics SPI expose the measured instances to the SPI implementation when at creation of the corresponding metrics instance. This instance is actually not really used by the implementations (Vertx instance was used by micrometer metrics instance to create an HTTP server but in practice it can start its own embedded instance as there is no much gain to create a new one). One issue providing the Vertx instance is that the provided instance was a racy publication of the Vertx instance complicated to solve (because the MetricsFactory needs to be called early for creating the pool metrics). The metrics event bus initialised callback is also not used in practice (it used to be by hawkular implementation), only by micrometer metrics as a signal to initialise the backend which can be replaced by a simple initialisation in the micrometer metrics factory.
Change : do not provide measured instances when calling the SPI for creating a metrics implementation. Callback methods have also been renamed to contain the type of the metrics created (i.e createMetrics -> createEventBusMetrics, etc...). The event bus initialised callback is removed as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2431
Use cases for multithreaded worker verticles · Issue #2431 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MultiThreaded worker verticles are an extension to worker verticles. Like with usual worker verticles, events are handled on worker pool threads. But they can be executed by different threads concurrently, which means the verticle must manage its own state to be visible between threads.
There are many parts of Vert.x which simply doesn't support them. For example, you can't create an HTTP server on a MT worker verticle.
Also, we have seen many new users, in particular those experienced with Spring or Java EE, starting directly with MT worker verticles and adding as many threads as possible with the impression it would help get the best performance results. But this is really counter-productive.
We are looking for relevant use cases for MT worker verticles. If you are using them, can you please describe in a comment to this issue what you are doing and why you couldn't do with standard (event loop) or usual worker verticles?
We want to determine if MT worker verticles do more harm than good. Ultimately, if they are simply an anti-pattern, we could deprecate and remove them after a few releases.
Looking forward to your feedback, thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2432
Support for Consumer Groups · Issue #2432 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
First of all great work on vert.x, it is really enjoyable to work with and such a powerful tool in such a small package. But recently I came across a missing vert.x feature that if implemented would make the appeal of vert.x's event bus much greater.
As far as I can see there is no direct support for Consumer Groups in vert.x, and this is a real pity.
By consumer groups I mean a set of consumers that would listen to published messages on a same address but with only at most one of these consumers getting the message. This would allow us to do load balancing for published messages. Load balancing already works out of the box for send messages (point-to-point), and without it published messages have only limited useful use cases.
Without this, published message processing does not scale horizontally as all messages must be processed by every single verticle register as consumer (i.e. no load balancing).
Having Consumer Groups would make the event bus allot more powerful and should not be that hard to implement. I suppose that it would be possible to set this up with existing tools, but it would require to
hand craft an API for subscribing to consumer groups,
have verticles that manage these groups subscription and message distribution
hold the subscription information in a distributed data structure.
sible but better provided by a vert.x api.
In code, I am looking for something like that
Where the name of ProductStatsVerticle.class is used as the name of the consumer group. Variants with a String consumer group name should also exist.
I'd like to have some opinions on this. Maybe there are already 3rd party implementation that could be inspiring, or a pattern that easily permits this feature?
Best regards,
Thim.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2433
Question-How can i contribute to this repository · Issue #2433 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello Vert.x,
This is a great repository , i would like to work as contributor, Can you please help me to become contributor.Or suggest me the way.
I have read readme for contributor, but so far i have not seen any need help tasks or issues which i can pick up.
You guys are instantly responding on issues, so i do not have any chance to look into it.
I tried commenting on one but later i got comment stating that it is already closed.
I have pulled the repository and looking into the code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2434
Missing @Nullable annotations · Issue #2434 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Building this list so that we can track any missing @Nullable annotation until 3.6 is released
Currently, the executeBlocking result handler type is not annotated with @Nullable.
As a result, the generated Rxified API returns a Single<T>. But it's quite common to use Future<Void> for a blocking task which does not need to return any result.
Then if the user simply invoke future.complete(), the program fails at runtime.
As a workaround, the user can use a Future<Object> and invoke complete() with any non-null value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2435
Invalid SSL configuration does not callback the server listen method handler · Issue #2435 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When HTTP server is initialized with invalid SSL configuration (e.g. invalid path to keystore file), it does not call the listen handler, breaking the async calls chain.
In addition to that, the verticle deployment code does not call the deployment completion handler.
So far I see that the problem might be caused by the fact that actualServer is not set to anything at the point of this check, but listening is already set to true, so executeCloseDone above is not called either.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2436
Move the data object converter generator to codegen · Issue #2436 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2437
Improve connection exception logging · Issue #2437 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the connection base will log every error to a connection when an exception handler is not set, in particular connection RST. Let's only log the message like previously (pre 3.5.1) and the full stack trace when debug is enabled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2438
ClusteredEventBus racy initialization · Issue #2438 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It seems as if there is a case in the ClusteredEventBus (3.5.1) where a NPE can appear. After trying out some different cluster manager implementations the following NPE appear from time to time on a new instance when it is being launched. This is the NPE that appears:
Looking at the code for the ClusteredEventBus it seems as if the member "subs" can be null when the view changed handler is called before the ClusteredEventBus has started completely. The view changed handler is set in the constructor but the "subs" member is only given a value in the method "start(...)". I briefly looked at previous versions of the ClusteredEventBus and there has previously been a null-check in the view changed handler.
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2439
Vertx clustered racy initialization · Issue #2439 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation
Vertx clustered instances are not properly initialised in cluster mode.
Changes
Rework the creation of Vertx that leads to a non racy initialisation. Add init methods that allow to properly bootstrap the clustered vertx instance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2441
DNS requests are always sent with the flag 'RecursionDesired' set to true · Issue #2441 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We should probably add a property to the class DnsClientOptions to support sending non recursive DNS requests. something like DnsClientOptions.isRecursionDesired() and DnsClientOptions.setRecursionDesired(boolean newValue)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2445
DnsClient: There is no option to enable the netty logger · Issue #2445 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2446
VertxHttpHeaders#add(CharSequence,CharSequence) does not used AsciiString cached hashcode value · Issue #2446 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation
It prevents AsciiString based headers to be used efficiently (using the cached
change
Replace the method body by the body of VertxHttpHeaders#add(CharSequence,Object) and have VertxHttpHeaders#add(CharSequence,Object) delegate to VertxHttpHeaders#add(CharSequence,CharSequence)
Microbenchmarks shows a significant improvement when optimised headers are used (hint before the optimization was only partially used). Note the benchmark is not used to justify the change, the change itself is very obvious. This was reported also with Java Flight Recorder hot methods showing a unusual call to AsciiString#hashCode(CharSequence) that calls PlatformDependent.hashCodeAscii(CharSequence ) instead of casting to AsciiString and using the cached value since the AsciiString was converted to String.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2447
Refactor VertxHttpHeaders to remove duplicate code and delegate to CharSequence based methods · Issue #2447 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation
Currently VertxHttpHeaders has lot of duplicate code and not always uses the CharSequence based methods performing unnecessary work.
Changes
Refactor methods so the overloaded methods always delegate to the CharSequence version, this will keep only a single implementation and it will be the optimal version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2449
Correlate block thread checker with GC pauses · Issue #2449 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The block thread checker sometimes reports GC pauses as misbehaving blocking application.
The GC mbean emits notification about GC pauses (start time / end time) that could be used to mitigate this and avoid false positive.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2450
Return null for JsonObject.mapFrom(null) · Issue #2450 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2452
Use of system properties to configure cluster settings is not documented · Issue #2452 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using the command line or launcher API to launch vertx, it is possible to use system properties to configure values for the cluster properties found on the VertxOptions class, but there is no public documentation describing the naming convention for these properties.
There is a brief sentence indicating that it is possible to use system properties, but with no description of what the property names are:

You can also set system properties using: -Dkey=value
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2456
DNS client should support calling a DNS server over IpV6 · Issue #2456 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Step to reproduce:
vertx.createDnsClient(53, "2001:4860:4860::8888").lookup4("vertx.io", res -> {});
=> the result fails with the following exception: 'java.net.SocketException: Address family not supported by protocol'
Expected: The DnsClient should be able to call a Dns server over IpV4 or IpV6
As a sidenote, I also tried using the full IpV6 address "2001:4860:4860:0:0:0:0:8888" but it doesn't work as well.
If time permits, I'll investigate this issue and provide a fix for it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2457
Incorrect VertxHttp2Stream checkNextTick implementation · Issue #2457 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm building a HTTP2 proxy with Vert.x 3.5.1, when I try to migrate to 3.5.2.CR1, NullPointerException may happen when requests come
I guess this might be caused when pending deque is empty,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2459
ClosedChannelException occurs when writing · Issue #2459 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm building a server with Vert.x 3.5.1, after I use setIdleTimeout() to setup a idle timeout for some sockets, sockets will be closed by timeout. I keep writing to the sockets continuously,  some sockets may throw java.nio.channels.ClosedChannelException.
How to avoid this exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2460
Proxy multipart/form-data with API-Gateway · Issue #2460 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry for bad English.
I made simple solution dealing with multipart.
My reference is vertx-blueprint-microservice which use MSA.
I got problem How can I handle multipart.
In ApiGateway source,
I don't know how can I solve this.
I doubt that SERVICE can't accept multipart, however
this is succeed. it's wierd.
Is there any more example how can I handle multipart proxying?
I saw this repo in vertx homepage.
I think this means quite important reference for understanding vertx.
However this repo looks dead. There is no response at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2461
WebSocket end handler should be called immediately to signal stream ended · Issue #2461 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In NetSocketImpl:
In WebSocketImplBase:
I set a closed flag in the endHandler. I will stop write to the socket, if the socket has the closed flag. However IllegalStateException: WebSocket is closed will be thrown by WebSocket sometimes. I modify the code snippet in WebSocketImplBase according to NetSocketImpl, Then the IllegalStateException never occurs again :
Is it a proper fix?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2464
WorkExecutorImpls are not removed from closeHooks when they are closed · Issue #2464 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a WorkExecutor is created via a vertx.createSharedWorkerExecutor(...) call, a reference to the WorkExecutor is added to the closeHooks for the current Context:
However, when the WorkerExecutor is closed, the reference is not removed from closeHooks, resulting in a leak:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2465
Add ability to set queueing strategy for WorkerPool · Issue #2465 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the moment the workerPool in VertxImpl is initialized as follows:
This creates an underlying ThreadPoolExecutor with an unbounded LinkedBlockingQueue
When our HTTP server is under immense load the queue grows which causes our latencies to grow unbounded.
We would prefer to fail fast or at least set a fixed size for the worker queue.
How do you feel about a new VertxOptions#workerPoolQueueCapacity ?
I could provide the accompanying PR as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2470
Http header CR / LF validation · Issue #2470 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
motivation
Currently HttpClientRequest and HttpServerResponse don't check wether header name or value contain \r or \n chars. Of course developers are fully responsible for http headers set and
such incorrect value is likely unintended. Forbidding it prevents HTTP header injection for application that omit to check headers.
change
throw an IllegalArgumentException when a header name or value contains \r or \n char
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2474
vert.x 3.5.1 co.paralleluniverse.fibers.instrument.UnableToInstrumentException · Issue #2474 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I update vert.x from version 3.5.0 to 3.5.1,project run with errors,  this is my shell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2476
Launcher system properties are not propagated when the verticle runs as background process (start) · Issue #2476 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The file.encoding setting is valid when the trial java -jar command starts, but it does not work with the start parameter.(Vert.x 3.5.1) Here is an example:
This is the MainVerticle:
Execute the following command in a Chinese windows server:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2477
Don't keep a reference in the HTTP pool connection listener to the connection waiter · Issue #2477 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2480
Windows redeploy does not provide valid inline verticle configuration · Issue #2480 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
env : Windows 10 pro.
The Java process builder now removes double quotes in process arguments (https) to conform to Windows CLI parsing https
This affects the Vert.x redeploy mode with inline configuration which contains double quotes and the JSON will not be parsed by the process created by the launcher, the Verticle will not get the expected configuration.
On Windows we should escape this differently by surrounding with double quotes and using a \ char to escape inner double quotes (A double quotation mark preceded by a backslash (") is interpreted as a literal double quotation mark character (").)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2483
some dependence does not contain version such as netty in pom.xm · Issue #2483 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
clone project down my local,but some dependence dose not have contain version suan as netty in pom.xml
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2484
Internal references to local Locks taken using SharedData.getLock() are not cleaned up · Issue #2484 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Every time a unique lock name is taken via SharedData.getLock(...), it gets added to a Map inside of SharedDataImpl. Currently, entries added to this Map are never removed, even if all references to the lock have been released, and there are no pending waiters. This means the Map can grow infinitely if an application takes locks using generated names, rather than hard-coded ones. To avoid this, entries could be removed from the internal map at the point the lock is released, as long as there are no pending waiters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2485
 zookeeper service discovery is not working in ECS Dockers · Issue #2485 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am trying to deploy my micro services through docker in AWS ECS cluster, I am able to deploy the containers and services are registered with Zookeeper. Once registration is happend, microservices are not talking each other with the help of zookeeper. Can you please help on that.
Here is the log from Zookeeper, which shows connection established from docker containers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2486
Websocket client and server don't send back close frame in closing handshake  · Issue #2486 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue
While using vertx to implement a websocket server, certain websocket client library (okhttp) got failure callback when closing the websocket from its side.
Finding
After doing a package capture, I found vertx didn't respond a CLOSE frame after receiving one. This behavior doesn't follow the RFC.
I checked vertx source code, and did some debug. I believe there is a bug at Line 699. From the comment, these lines of code intend to Echo back close frame.
Actually the Line 699 would always fail.
After adding some debug code there, it actually throws the following exception. The wrFrame cannot be passed to writeAndFlush directly.
Solution
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2487
Event Bus: ability to set discard handler on MessageConsumer · Issue #2487 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The underlying implementation class (HandlerRegistration) has a discard handler, but setting this is not exposed (the method has a comment about it being for test use only).  Having the ability to find out when messages are discarded is actually useful when managing workloads at scale.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2488
Event Bus: ability to set discard handler on MessageConsumer · Issue #2488 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version - 3.5.1
The underlying implementation class (HandlerRegistration) has a discard handler, but setting this is not exposed (the method has a comment about it being for test use only).  Having the ability to find out when messages are discarded is actually useful when managing workloads at scale.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2489
Event Bus:  "Handlers.choose()" should deprioritize paused handlers · Issue #2489 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version -- 3.5.1
Currently when a message is handled by the bus the "choose" code will simply pick the next handler in line.  If it turns out that handler is paused, the message will get dropped on the pending queue and possibly discarded, even if there are other handlers on the same address that are available to process the message.  It would be preferable if it gave preference to handlers that are not paused over those that are when making this choice.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2490
FutureImpl shall release the handler after completion · Issue #2490 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently FutureImpl keeps a reference on the handler after it has been completed. As side effect it can promote objects to survivor spaces. Since the future is completed there is no need to keep the reference onto the handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2492
Deploying HelloWorld Verticle in OpenShift v3.7.46 ThreadDumps · Issue #2492 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Thought I would start with this group, but it may be more of an OpenShift issue.
We are seeing threads block deploying the simplest of applications.  We are new to Vertx, so it could be how we have something configured in the Dockerfile.  Attached is the console dump from the OpenShift pod, and the Dockerfile we use to build the image (we do not use fabric8 yet to deploy to our main OpenShift clusters).
I can run the same, generated container locally in Docker (version 18.03) on CentOs without seeing these issues.
Thanks for any help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2493
DnsException improvements · Issue #2493 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
shall not capture stack trace
provide a meaningful to string
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2494
Can I use vert.x only with memory in JVM heap? · Issue #2494 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I build a gateway application with vert.x,version is 3.5.1
Use eventBus between application comunication.
Use vert.x core httpclient for visit out API .
I find some problem as follow:
1.When application transfer about 130MBit/s in eventBus,sometimes ping check timeOut,and reconnect,
then the receive rate in vert.x metrics (eventbus messages oneMinuteRate) going unstable,and many
connection established between both ends of eventBus port.
2.HttpClient used in my application for visit out restful API. I set the timeout param as 3s like
httpClient.get(host,address,v->{ //dosomething }.setTimeout(3000).end;
,but I set a variable now as Instant.now().toEpochMilli(),then when respone, Instant.now().toEpochMilli()- now =gap, this gap large than 3s.Sometimes this gap go to 10s.
Here is my question:
1.eventBus use netty direct memory ,I set the propertity io.netty.noUnsafe=true, but it doesn't
work,so i met a PooledUnsafeDirectByteBuf out of memory.Is there any propertity can work?
2.When timeoutHandler called , this httpRequest throw an TimeoutException
(logic in io.vertx.core.http.impl.HttpClientRequestBase#timeout), then may this request is over.
When there is a response back after timeout, where can it be cached or handled?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2495
Java 10 issue: java.lang.IncompatibleClassChangeError: Method io.vertx.core.Future.succeededFuture()Lio/vertx/core/Future; must be InterfaceMethodref constant  · Issue #2495 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FWIW im using some compiled groovy inside a java project, but not vertx-lang-groovy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2496
eventBus.send blocks in for loop · Issue #2496 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just found that eventBus.send blocks when using for loop, it will finish all the send, then process the reply.
Is there a way I can have interleave send/receive when usingh for loop?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2497
vertx-jdbc-client  · Issue #2497 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,  Today I went to see  vertx-jdbc-client and found a problem,  all get connectin and execute sql in the same thread，especially only one thread.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2498
NetServer bootstrap should set SO_LINGER option on the child channel instead of the server channel · Issue #2498 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
If we use setSoLinger we only get:
Code right now is:
Hope somebody can help on this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2506
Hard-coded HTTPS scheme regardless of SSL usage · Issue #2506 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The https scheme is passed even if ssl is not used, should be easy to fix by checking via isSsl() then use "http" or "https" accordingly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2508
HttpServer connection lifecycle rework · Issue #2508 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Http1xServerConnection class handles all HTTP messages in a single queue. This refactoring removes the global queue and instead uses a buffer queue in each HttpServerRequest implementation. Pipelined requests are now handled in the connection as a linked queue of HttpServerRequest where the head is the request sending a response and the tail is the request receiving the HTTP content buffers. In normal case the head and tail are the same request, in pipelined case a request may have been fully received but the response not yet sent and thus head → tail.
This refactor is required by
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2511
AsyncFile.read allocate two buffer to read the data · Issue #2511 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
AsyncFile.read allocate two buffers to read the data makes it very inefficient.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2512
Initial Connection Pool on HttpClient · Issue #2512 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, Vertx HttpClientOptions  only has a max limit on a HttpClient pool (both HTTP/1 and HTTP/2). Connections are opened only under a certain load. Is it possible to start the HttpClient with a initial number of connections?
The motivation for this comes from running applications in a Kubernetes environment where the HttpClient is trying to hit a service cluster. In my case only one of the pods is getting connected to while the rest sit idle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2513
OAuth2Auth does not extend AuthProvider in Scala dialect · Issue #2513 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am trying to build social login with GithubAuth using Scala dialect of the Vertx.
To avoid repetitive authentication calls to the server i want to use session.
The last line however does not compile as OAuth2Auth does not extend AuthProvider
I managed to make it work by using the following trick:
It looks like the Scala API is incomplete.
Thanks,
Jakub
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2514
HttpClient should behave according to the HTTP version returned by the server and not sent by the client · Issue #2514 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Full discussion with Gists is available here.
The problem goes as follows: vert.x http client submits 2 sequential requests to a http1.0 server.
First requests receives a response as expected, second one fails with VertxException.
The issue seems to be introduced in 3.5.2 and didn't exist in 3.5.1.
Fixing When the response does not contain Connection: Keep-alive in HTTP/1.0, the client has to assume Connection: close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2515
Websocket queue not respected in timer/periodic/blocking · Issue #2515 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello everyone, I'm building a client/server process to benchmark some databases. The server basically sends out data at a given rate, and clients need to consume that data at the best of their abilities. I've chosen websockets to achieve this, and made a vertx implementation.
I've now reached a problem: the server does not seem to discard messages when I expect them to. For example: one fast DB and one slow DB are consuming the same stream. As I set the queue size small, I would expect the small DB's client to trigger some dropped messages, however, the fast and the small DB's clients are both consuming the data at the same rate.
I've made a small MWE and the following caught my eye: when I use the webSocket variable within a setPeriodic, setTimer or executeBlocking, the queue seems  to be ignored. I guess I'm misusing vertx in some way, but in the case I'm not, hopefully I'll get an answer through here. Does anyone have an idea? Should I implement this 'huge stream of unending data' in a different way (i'm doing it in batches now, through setPeriodic)?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2517
Disable HttpClient TCP idle timeout when connection is in the pool · Issue #2517 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed that in a corner case, we have a lot of test failure where the connection is not used very often. For example, I make a timeout to be of 10 seconds and I make a call every 10 seconds exactly. Every once in while, my request fails with VertxException (Connection is closed) since the checkout connection is closed right after the connection is polled from the connection pool. I only noticed this in 3.5.2 but not in 3.4.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2519
HttpServer does not clean the channel pipeline after HTTP/1 upgrade to H2C · Issue #2519 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently after an HTTP/1 to H2C upgrade the HTTP server does not actually remove the codecs from the channel pipeline leading the HTTP decoder to decode H2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2520
The Kotlin documentation for vert.x has errors in it. · Issue #2520 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I checked the documentation for Kotlin on this page and it has some errors in it where code blocks should have been:
This is the same part from the Java docs:
I did not find the repo for the docs so I'm not sure this is the right place to mention this. This problem persisted for at least a year so I thought it might worth mentioning. I'd love to have good Kotlin docs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2521
MultiMap with putIfAbsent method · Issue #2521 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
The MultiMap interface could implement the method putIfAbsent like the Map interface. It's been needed in the PR 960 of vertx-web and I think it could be a very util method in more cases.
I could implement it if the enhancement is approved.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2522
HttpClient response chunk handling rework · Issue #2522 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Rework the HttpClient request chunk handling that is split between HttpClientResponse and HttpClientStream so it is fully managed by the stream. The logic is now encapsulated in the stream and it simplifies the logic of the client response that does not care anymore of paused trailers and paused end chunk (that was only used by HTTP/1).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2524
There should be a handler which is guaranteed to be called when the request is done · Issue #2524 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There should be a handler which is guaranteed to be called when the request is done so that we can perform the resource cleanup. Currently, there are some hooks but it is hard to deal with.
On the server side, you have .addBodyEndHandler() and .closeHandler(). On the client side, it is even more confusing since you have to hook both to the HttpClientRequest.exceptionHandler() and HttpClientResponse.exceptionHandler(), HttpClientResponse.endHandler() while it does not even have an analogous .closeHandler().
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2525
acceptEventLoopGroup · Issue #2525 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Why didn't netServer use the acceptEventLoopGroup ？
and  I looked acceptEventLoopGroup only use for httpServer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2530
problem with vertx-config-yaml · Issue #2530 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I added  vertx-config-yaml and vertx-config in my pom.xml,
and it worked when I run my tests.
but when I package this project to a fatjar and run ,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2531
Use of wildcards in Pump · Issue #2531 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The declaration of static pump function from Pump class should be changed to allow use of wildcards.
Instead of
it should be
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2532
HttpClient idle state handler should be added first when the connection is borrowed from the pool · Issue #2532 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient adds the IdleStateHandler before the handler, relying on the handler presence. With HTTP/2 clear text upgrade the handler name cannot be preserved and therefore adding the idle state handler fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2533
HttpClient must use the http scheme for non SSL connections · Issue #2533 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when the HttpClient sends an HTTP/2 request, it uses the https scheme unconditionally. The scheme decision should look whether the connection uses TLS or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2534
Event loop context executing with wrong thread · Issue #2534 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running it on a AWS instance, it shouldn't matter but maybe network performance is important in case this is caused by a race condition.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2535
Access to no existing routing · Issue #2535 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Access to no existing routing,return Resource not found ,why not Get into failureHandler !
Such as default access / or access that does not exist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2536
Create common interface for executeBlocking methods · Issue #2536 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The executeBlocking methods are common between the interfaces WorkerExecutor and Context. It would be an API convenience to have WorkerExecutor and Context be extensions of a common interface that supplies the two executeBlocking methods.
Then something like the following could be done:
Currently, makeManyBlockingCalls needs to be overloaded to accept a Context or WorkerExecutor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2537
PostgreSQL message/record size · Issue #2537 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In BaseSQLClient.class package io.vertx.ext.asyncsql.impl  dependency there is a limit for a record size set to 16777216.
The internal config parameter name is maximumMessageSize.
When trying to download a large file from the database, the server produces an error:
Unfortunately there is no way to change the limit without the code modification (which I temporarily did)
It would be useful to be able to set that limit up in JsonObject config (additional configuration key)
How can I get large files from the database?
Best regards
ldvhome
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2538
is there any way to implement actors model with vertx? · Issue #2538 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I know Akka and it's acotrs is very powerful.
My question is know how to implement actors model with vertx?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2539
Update to netty 4.1.25.Final and netty-tcnative 2.0.8.Final · Issue #2539 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2540
mock websocket client connect, but throw NullPointException · Issue #2540 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2541
Exception not handled in some cases · Issue #2541 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I saw this in our log file. Is it something that should be fixed? I suspected that it might have something to do with websocket but I can't be sure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2542
Limit client connection count · Issue #2542 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,we are heavy use vert.x, and we want limit active client connection count both in HttpServer and NetServer.
If server had accepted certain amount of connection, new connection need reject for overload protection.
Any good idea ?
Best Regards & Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2544
Vertx/Netty is appending "=" in query parameter. · Issue #2544 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using Vertx 3.5.0 WebClient API to make HTTP call to remote server and given below is how my input URI look like :
In HttpClientContext Vertx is calling io.netty.handler.codec.http.QueryStringEncoder, which append "=" even though it wasn't there in actual input provided to Vertx.
From QueryStringEncoder:
So actual URI received by remote server looks like below:
If you notice in above URL, Vertx is encoding the parameter and also appending extra "=" at the end.
This issue isn't there if we use HttpClient API instead of WebClient API. Unfortunately the remote server doesn't like this extra "=" added to query and encoded query, and fails hard. This remote system can't be updated to handle this behavior because if doesn't belong to us.
Moving back to HttpClient will be very expensive to us because of amount of code change. Looking forward to your feedback. We are open for suggestions, and we can create a PR once agreed upon the solution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2547
Provide Elliptic Curve format for key and cert  · Issue #2547 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have tried to load ECDSA key pair that is formatted using following delimiters:
using the following conde snippet:
And I get the following error message:
Which make me wonder wheter there is any support for elliptic-curve cryptography or if I am missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2548
`FileResolver.unpackFromBundleURL()` does not detect a directory unless the requested path has a trailing '/' · Issue #2548 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As can be seen from this line of FileResolver.java, unpackFromBundleURL() does not account for the possibility of a resource path to be a directory - even if it doesn't end with a '/'.
For example, consider the following sample OSGi bundle structure (excluding manifests etc.):
If unpackFromBundleURL() is called for META-INF/resources/webjars/swagger-ui/3.17.4/, it will correctly reach the directory code here. However, if this method is called for META-INF/resources/webjars/swagger-ui/3.17.4, the else branch (for file resources) will be taken and the cache will be corrupted.
See #2549 for a fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2550
Use VertxOptions to configure class path resolving · Issue #2550 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class path resolving is currently enabled or disabled via System property.
In environments with multiple Vert.x-based applications the property will be set to the same value for all the applications running in the same JVM.
Adding a VertxOption field to override the System property would allow each Vert.x application in a JVM to decide individually whether to allow file class path resolving.
The use-case driving this issue is that we would like to use Vert.x as a client without any file system side effects (such as creating a .vertx directory), but we don't want to interfere with other Vert.x-based applications that may be running in the same JVM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2560
RecordParser should have an option to limit the record size · Issue #2560 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using RecordParser's delimited mode, it would be nice to somehow limit the maximum buffer size, to prevent misbehaving/malicious clients from exhausting server resources.
This could be achieved by exposing the buffer length, like so:
Another option would be to check the record size in RecordParserImpl.parseDelimited() and throw an exception, that could be handled inside the exceptionHandler:
Thoughts?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2562
Bug with HTTP trailers and GZIP compression? · Issue #2562 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys,
I think I might have found a bug in Vert.x 3.5.3 or Netty. If I enable GZIP compression on both my HTTP server and the client and then try to send an HTTP trailer I get the exception below.
I created a gist demonstrating the error:
As soon as I comment out one of the lines marked with //XXXXXXX the program works correctly.
Am I doing something wrong or is this actually a bug?
Cheers,
Michel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2563
Inadequate documentation for `SharedData.getLock()` · Issue #2563 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The docs for SharedData.getLock() do not specify the behaviour when there is competition in acquiring a lock. While non-determinism is expected when this is happening from multiple threads, it is also silent about what happens if I try to acquire the same lock sequentially in the same method:
From the code I can see that a local lock uses an ordered list of waiters, so I would expect that the first call would acquire the lock before before the 2nd (in the absence of timeout, and obviously with the possibility of there being interleaving acquisitions from other threads). But I've no idea whether these same semantics would also apply with a clustered lock. If the API doesn't guarantee any such semantics the Javadoc should probably explain that to avoid people accidentally relying on such behaviour.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2565
io\vertx\core\http\impl\HttpServerImpl  maybe error listen port · Issue #2565 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
has two line code use //fixme
we use async to remove id when happends error
but use sync to put id later on
may the error happends before the  (vertx.sharedHttpServers().put(id, this);
then rarely
first remove
it while listen error
but sharedHttpServers has the id
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2566
Accessing Timers · Issue #2566 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be no way for an application to discover if a Timer is active, or to inspect the metadata of a timer.
The timeouts map (io.vertx.core.impl.VertxImpl#timeouts) is private, as is the timer data (io.vertx.core.impl.VertxImpl.InternalTimerHandler).  All that is possible is to cancel a timer.  Is there a mechanic for managing timers that isn't obvious?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2569
Not able to overwrite the default decoder · Issue #2569 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx version 3.5.1
Recently i migrated from vertx 2 to vertx 3.5.1. I am sending a value - %%SOME_VALUE%% in my paramater. But Vertx 3 throws error "invalid hex byte" while handling the request. I cannot change the format of the value due to some constraints but looking for some ways to handle within the vertx application. I am unable to overwrite the netty decoder used in vertx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2571
get byte[] from JDBC for GZIP decompression · Issue #2571 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HI I have compressed data as byte[], stored in DB table column. I need to get the byte[] and decompress it. But there is no direct method to get data as byte[] in vert.x jdbc. I tried using getBinary(0) , but it throws me below exception
Can anyone please help me out to decompress byte[] stored in DB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2572
error on vertx sendMail, io.vertx.core.impl.ContextImpl - Unhandled exception java.lang.NullPointerException: null · Issue #2572 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello i cannot catch null error on sending email
my code is like this :
and try to use this, but still cannot catch the error on failed :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2574
ReadStream fetch mode · Issue #2574 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A Vert.x stream isn't trivial to implement and actual adapters using request flow control (RxJava,Reactive-Streams) have to maintain an extra queue for buffering unrequested items until they are requested.
The ReadStream interface should be augmented with a fetch operation that allows to provide request based control. The stream interface continues to operate with pause/resume control that is easier to use (and also more realistic with actual transports such as TCP, as request based flow control has to prefetch for efficiency in practice).
The state changes from two states (paused / flowing) to (fetching[n] / flowing), fetching[0] is equivalent to pause.
A fetch method is added to ReadStream:
ReadStream is difficult to implement and it is often implemented multiples times. We want to provide a helper for implementation (Queue) that acts as a event driven queue relieving the implementor to handle threading, reentrancy and data races. Currently such queue is maintained in several places implicitly (like HttpServerRequest or AsyncFile) and sometimes not:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2575
SslHandler should use ref-count buffer · Issue #2575 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, it uses PartialPooledByteBufAllocator. Therefore, it does not pool the buffer which results in extra memory allocation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2576
HttpServer failed to listen java.lang.IllegalStateException · Issue #2576 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using latest vert.x core 3.5.3
When trying to create a Http server listen on either port 80 of 127.0.0.1, 0.0.0.0, or ::
will result in an exception java.lang.IllegalStateException: failed to create a new resolver
Command run: vertx run Test.java
Code used.
console log when the process is executed:
It is fine when I run on Mac OS but on a VPS (OVH) with centos 7 (firewall disabled) the Exception will be thrown and I can't get any content if I curl to the http end point.
On the same server if I yum install nginx and start it, it is fine on the same port. Only vertx had the problem on listen on the port. This vps instance is with both ipv4 and ipv6
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2577
HttpServerRequest#netSocket() improvements · Issue #2577 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServerRequest#netSocket() has a few problems:
when used with a CONNECT requests, the code is different for HTTP/1 and HTTP/2, HTTP/2 will send an header frame and HTTP/1 will not
the request/response lifecycle is not properly handled in all cases, when using a NetSocket the response should be marked as ended so it cannot be used anymore
the net socket should be obtained before the response is sent, assuming the handler has the still the ownership of the stream
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2584
JsonParser does not correctly perform flow control · Issue #2584 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonParser to process the response in objectValueMode
Default configuration in the rest of the parameters
When I receive a JSON object inside the handle, I make a parser.pause() to prevent the arrival of new events, however, I get to receive some more events before it really stays paused (3~5).
I think that this is because internally JsonParser does not check when processing the tokens if it is paused, sending all the buffer read so far by the HTTP client. The stream is already paused, but if in this buffer there are 4 json objects, the method "handle" will be called 4 times.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2585
/io/vertx/core/http/impl/HttpServerImpl.java should be able to asynchronously accept/reject Websocket handshake  · Issue #2585 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think we should probably make it async, in case we have an async operation (i.e. hitting an OAuth server with a token) that rejection depends on.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2586
Support temporary files and directories · Issue #2586 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice if io.vertx.core.file.FileSystem supported the creation of temporary files and directories (using java.nio.files.Files.createTempFileand java.nio.files.Files.createTempDirectory respectively)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2588
Provide default methods for metrics SPI · Issue #2588 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
we do have now, base (dummy) implementation of these but we should better provide default methods instead
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2590
NullPointerException when reporting a deployment failure without a completion handler · Issue #2590 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 3.5.3, when deploying a verticle using deployVerticle(Class<? extends Verticle, DeployOptions), it throws a NPE if the class is not public (default: package-private).
Reproducible example is provided: vertx-test.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2593
HttpClient connection should be resumed when response ends · Issue #2593 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are running into a situation where an http client connection is paused when its last message is received.
This causes the paused connection to be recycled.
We think paused connections should be resumed when they are pooled.
A test to reproduce this behaviour:
A fix could be as easy as:
If you think this is the correct fix, I do not mind to create a PR with the test and the fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2595
HTTP client upgrade to socket might lose buffers immediately sent by the server · Issue #2595 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP client upgrade to socket might lose buffers when these buffers are received in the same chunk than the HTTP response.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2596
how to set netty vertion · Issue #2596 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when i use java vert.x 3.5.3 ,io.netty vertion is 4.1.19, but i got
i need to update io.netty to vertion 4.1.27, how to do? thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2597
mvn package fail · Issue #2597 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2598
Vertx HTTP Thread block unknown warning issue · Issue #2598 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
times to times we get this thread-block warning exception. any idea?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2599
Remove generic connection message encoding/decoding and instead let each connection handle it when necessary · Issue #2599 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the VertxHandler/ConnectionBase handle conversion of Netty / Vertx messages. Such conversion can be handled by the receiver of the emitter of the message instead of being applied to each message. This removes unnecessary message inspection (if/else switches) when it's not needed (i.e an plain HTTP request with not entity).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2600
Support for proxy hosts black listing in ProxyOptions · Issue #2600 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, we have this issue when we want to ignore the proxy and when it comes to call certain components of our internal network. Since vertx ignores JVM proxy arguments like http.nonProxyHosts there is no real workaround.
The proxy configuration is set at the WebClient level. ProxyOptions object should have an equivalent to http.nonProxyHosts.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2601
Verticle on Docker container won't stop properly · Issue #2601 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Stopping a Verticle using the cli on this Docker container fails. This is because the 'ps' command is not installed which is utilized by the StopCommand class here.
The method terminateLinux() fails because the method pid() returns null.
pid() returns null because it relies on the 'ps' command.
Steps to reproduce
Create a simple Verticle. It should not matter what language its implemented in.
In my case, I wrote my app in Kotlin.
Fire up a vertx docker container and add the verticle to it.
Run the Verticle using the 'start' command.
Try to shut down the Verticle using the 'stop' command.For my code, I was able to fix the app by adding
to my Dockerfile which was using vertx/vertx3 as its base.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2602
Gracefully close HttpServer · Issue #2602 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Logging issue to gracefully close HTTP server.
Stop listening and accepting incoming requests.
Leave inflight requests ending normally before completly close the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2606
Provide a way for verticles to reload configuration upon changes · Issue #2606 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As per documentation for config retriever listening for changes, the retriever reloads the configuration every 5 seconds. Issue is that there is no way provide that new configuration to the verticle without first undeploying and redeploying it with the new configuration or doing a app/pod restart. The reason for that is the config JsonObject that holds the configuration for the verticle is created via new constructor and there is no reference to this config object available. This functionality will be really helpful where API keys and certs are being rotated out and live traffic is being taken by the app.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2607
Extra chunk for request with no content. · Issue #2607 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code produces an extra 0 end trailer chunk that makes HTTP clients parse it as a second invalid response:
My guess is that if there is no body, there should not be any trailer end chunk.
Related to #1986 (was only for HEAD).
Perhaps there are other HTTP status codes that can't contain a message body?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2608
EventBus: if handler registration has pending messages to deliver, but handler has been set to null, results in NPE. · Issue #2608 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 3.5.3
This one is a bit hard to reproduce outside of a larger system.  For us it happens when we have an Rx chain reading from an event bus consumer (implemented via FlowableReadStream).  If we cancel the subscription then this calls FlowableReadStream.release().  This sets all of the handlers on the underlying stream (which is a HandlerRegistration in this case) to null.  It then resumes the stream which causes it to attempt to deliver any data that it has in its pending queue.  Since the handler is now null the resulting delivery attempt results in an NPE and lots of log spew, like this:
Either the HandlerRegistration code should check for the null handler and silently drop the data (perhaps invoking the discard handler -- see #2488) or the stream should offer a way to flush the pending data which can be called by release.  I'm assuming we don't want to flush the queue when the handler is set to null, though that would probably fix this as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2609
HTTP/2 settings update can miss acknowledgement · Issue #2609 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP/2 settings upgrade sets the acknowledgement handler after the successful write of the settings frame, sometimes the acknowledgement can be received before this callback happens and therefore we miss the acknowledgement.
We should instead update the acknowledgement handler queue before writing the settings frame and remove this handler from the queue on a write failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2610
WebSocket client does not report server protocol violations on the WebSocket exception handler · Issue #2610 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the title says, basically. When a websocket client receives a payload larger than the configured max size, it seems that it just immediately closes the socket without warning - no logs, no exception, no close frame. I may have misunderstood something, but nothing I did short of changing the max sizes in the options gave any indication of the problem being displayed or fixed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2612
Websocket Request Failing to Upgrade · Issue #2612 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Websocket Request to upgrade fails with the below exception. The same was working on my local setup, but when deployed on a cluster started getting this error.
The difference between the two websocket requests was that the first one was sending a response through as soon as it upgraded whereas the failing one was updating some shared data using an AsyncMap and sending a test message in the callBack.
In effect the websocket closes down if the first message is not sent immediately after upgrading.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2615
Consider passing websocket close code / reason to the WebSocket closeHandler · Issue #2615 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since the closeHandler callback is just a Handler<Void>, dealing with close codes / reasons requires you to add extra code into the frameHandler to explicitly check for close frames to get the code / reason, making closeHandler have limited utility for non-trivial use-cases.
I'm using vert.x to write a wrapper for the Discord API. Part of this entails opening a websocket connection to their gateway to receive real-time events. As the gateway may give a variety of close codes / reasons under different circumstances (server restarting, sending a malformed payload, ...), it would be significantly more convenient to be able to handle this in the closeHandler rather than needing to have a special case in the frameHandler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2616
ErrorDataDecoderException: Bad string · Issue #2616 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looks like more netty bug, but I report here for investigation.
I have a simple configuration like:
For special requests the code fails before my handler.
BODY:
Error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2617
localCosumer 100x slower than consumer in Clustered mode · Issue #2617 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tested with Vertx 3.5.3 and 3.5.0 on a Core i7-69xx:
consumer handles 100'000 to 150'000 per second
localConsumer is factor 100 slower: only ~1'500 per second can be delivered (and CPU-Load is high)
With Vertx 3.4.0 and 3.4.2 observations are different: Here, both types (consumer and localConsumer) are quite slow
Prior to 3.4.0 (e.g. 3.3.3) there seems to be no support for Infinispan-Cluster (or I didn't find the appropriate dependencies)
Notes:
I found #1764, but I think this was a different case as the performance panalty was only a few percent - not factor 100
I also found 3ed3fea - this probably addresses the same basic issue, but from the sender's perspective
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2618
Incorrect javadoc for MessageProducer#send · Issue #2618 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not sure whether this behavior is correct or not, but when you try to create a message producer via EventBus.publisher method, it creates instance of MessageProducerImpl class with private send field equal to false -- which is designed to distinguish senders and publishers I guess; but actual implementation of methods send and write of the producer class differs:
Send method:
Write method:
Which subsequently leads to strange behavior: send method actually sends messages, but write method publishes them, even if it was a publisher created.
In JavaDoc for the MessageProducer.send method denoted that it is
So, if it is a synonym, why the behavior differs?
For me using MessageProducer.write method works fine now, but I had some time figuring out why publishing messages did not work (not all message handlers actually received data).
Please, consider adding analogous if (send) checks to the method send also, if this behavior is not correct. And should really write method be synchronized, while send is not?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2619
FileResolver fails when path contains `+` character · Issue #2619 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Most likely java.net.URLDecoder.decode(String, String) replaces + with    (space)
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2620
Upgrade Netty to 4.1.27.Final · Issue #2620 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2621
Upgrade Jackson to 2.9.6 · Issue #2621 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2622
Upgrade Tcnative to 2.0.12.Final · Issue #2622 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2625
Improve the ALPN detection to work on latest JDK 11 · Issue #2625 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2627
CompositeFuture cannot take a list of futures where the list type parameter has a type parameter · Issue #2627 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Apologies if the title is unclear; I couldn't think of a good way to word it...
Suppose you do something like the following:
This gives me the following error:
This can be resolved by convincing the compiler to see it as a List<Future> instead of a List<Future<T>>, such as
but doing this feels like an unnecessary hack to get around the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2628
Add Vert.x Logger isWarnEnabled() method · Issue #2628 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The io.vertx.core.logging.Logger interface currently does not have a isWarnEnabled() method like the other levels have already. This adds this method as well as the corresponding method on LogDelegate and its implementations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2630
HttpServerResponse content headers improvements · Issue #2630 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServerResponse incorrectly sets the content-length and transfer-encoding headers in a few cases. It should use the following rules:
content-Length should not be set automatically to 0 or this header can be set to what the body size would have been
transfer-encoding should not be present
none of these headers should be present
Currently a few cases are not supported for HTTP/1.x and HTTP/2. This issues fixes them, in addition the chunked flag on the response implementations is removed to check the transfer-encoding directly on the response to avoid the edge case where a user would set such headers instead of the response object.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2633
Unidiomatic Ruby example on the home page · Issue #2633 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We provide idiomatic APIs for every language that Vert.x supports.
Ruby
This Ruby example is formatted non-idiomatically, with unnecessary parentheses and the {} block syntax. It would be better to write it like this:
(It is not very idiomatic to use global variables $vertx either, but I don’t know enough about Vert.x to say it isn’t justified.)
I would have made this a pull request, but I can’t find the code for the Vert.x website in any eclipse-vertx GitHub repo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2634
It would be nice to have convenience functions in httpServerRequest also available for serverWebSocket · Issue #2634 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
httpServerRequest comes with some nice functionality, like getParam(). It would be nice to have that available in the websocket equivalent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2636
HttpClient connection handler · Issue #2636 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClient does have a per request connection handler which requires to modify each request to be aware of connection life cycle. This can be quite intrusive in client code to set a the connection handler on each request, specially when one wants to be aware of life cycle without being intrusive.
This features adds a new HttpClient#connectionHandler(Handler<HttpConnection>) that is called when the client connects to an host.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2641
Exception not propagated from VertxHandler to WebSocket exceptionHandler · Issue #2641 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello Team,
While investigating a random websocket disconnect issue, I found that the VertxHandler::exceptionCaught() does not propagate the exception all the way to the websocket exceptionHandler. Due to this, when websocket disconnect happens due to an exception, the application's exceptionHandler never logs it, and only gets notified about the close().
Uses vertx-rx and netty's per-message deflate extension.
This is the code I am referring to in VertxHandler:
Is this a known issue? Else, can you please take a look and advice a potential fix?
Thank you,
Udai.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2644
IllegalStateException cannot register channel with OpenJDK 11  · Issue #2644 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using latest version of Vert.x
and compiled successfully my application with OpenJDK 11+28
My application start fine but as soon Vert.x received a request it shows that warning and the whole Vertx server get restarted and returns Server Internal Error
Same code runs fine when compiled and run with Java 8 (Oracle)
Expected behavior
Should be able to register channel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2645
TLS resumption · Issue #2645 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since SSL handshake can be quite expensive, it might make sense to have an option to turn on more complex logic in connection pooling for SSL connection to establish at least one connection at the startup so that the TLS session can be cached by the server. This will reduce the CPU time spent by eventloop thread significantly especially when there are multiple requests to the same server at the same time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2646
Vert.x fails to start on Linux if SM prevents reading resolv.conf · Issue #2646 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Under Linux a SecurityControlException is thrown by AddressResolver line 50 due to the JVM not having security permissions to access /etc/resolv.conf. Due to the platform I am developing for I cannot grant security permission for this file. Below is the stack trace. Vertx version 3.5.3 is used.
The if checks should be moved inside the try catch block to prevent the crash.
Alternatively it would be nice to be able to ignore this check via a system property.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2647
Even bus not work well in VPC network · Issue #2647 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
When setup cluster with event bus:
Private node is in private cloud, its public address is not local network interface but a virtual address defined by NAT.
Public node in public address.
Using hazelcast and set public-address in hazelcast configuration.
When starting node in private cloud, add argument and java properties:
It up and run normally with hazelcast, private node joins into cluster.
However, event bus message cannot send from public node to private node because address is still local network interface of private node.
Not sure it is a bug or something is wrong in my configuration
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2648
WebSocket upgrade request body limit · Issue #2648 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CVE-2018-12541: The WebSocket HTTP upgrade implementation buffers the full http request before doing the handshake, holding the entire request body in memory. There should be a reasonnable limit (8192 bytes) above which the WebSocket gets an HTTP response with the 413 status code and the connection gets closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2649
Sporadic failures of ComplexHATest#testComplexFailover · Issue #2649 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2650
Update Kotlin support for 3.5.4 · Issue #2650 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I notice that vert.x 3.5.4 is recently released with kotlin libraries deprecated (kotlin-stdlib-jre7-1.2.20.jar / kotlin-stdlib-jre8.1.2.20.jar) when kotlin released months ago others named as "jdk" (kotlin-stdlib-jdk7-?.jar / kotlin-stdlib-jdk8-?.jar). I can imagine to update kotlin you have to check updated dependencies (e.g. kotlinx-coroutines-core-0.30.1.jar) and recompile vertx-lang-kotlin. Any way, this is something to update in vert.x and I would apreciate this. Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2651
SSH incompatible event loop when NativeTransport set to true · Issue #2651 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2653
NPE on HttpServerResponse.setChunked(false) on 3.5.4 · Issue #2653 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2654
Shared data in both local and clustered mode · Issue #2654 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Providing shared data structures (locks, counters, async maps) in both local and cluster modes, even when Vert.x is clustered.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2655
AsyncFile setReadLength  · Issue #2655 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Could we have AsyncFile.setReadLength for streaming/pumping where result can be bigger than max buffer size ie > 2GB.
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2657
Callback improvements · Issue #2657 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Improve how callbacks are delivered to the application.
some callbacks are invoked under synchronisation which are fine most of the time but can also sometimes lead to deadlock, we should avoid this when possible
some callbacks invocation are delayed with a runOnContext operation which is not suitable when the callback notifies of a state update, e.g a close operation. Often applications use this callback to update its own state. When the callback is delayed, it can lead to an unexpected state when another event happens before the callback, e.g a websocket is closed, making it impossible to write and the application is unaware of this, the websocket close handler should be not be delayed so the developer can rely on this when writing his application
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2660
Incorrect metrics SPI callbacks for H2C upgrade · Issue #2660 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.vertx.core.spi.metrics.HttpClientMetrics#endpointConnected is not invoked for Http2 client
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2662
Websocket client HTTP header response callback · Issue #2662 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Would the vert.x team be open to a PR which exposes yet another callback to be passed into httpClient.websocket that allows a user to receive the HTTP headers returned by the sever after the websocket handshake succeeds?
The issue is that we load balance on the server end based on a cookie, the cookie is auto generated by HAProxy when not present in a request and it includes the name of the backend node the request should route to.  We need this cookie for session identity because we occasionally open multiple websocket channels from a single client.  It makes our lives easier if secondary websocket channels can be forwarded to the same backend node as the original, or if we have to reconnect the initial channel.
I was unable to get this information back even via reflection because it is quickly discarded so I had to fork and modify the code to add a handler.  Since I see no other issues related to this, maybe we are an oddity therefore I am curious if the PR would be welcome.  Feel free to close if not and we will maintain our fork.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2664
io.vertx.core.spi.metrics.HttpClientMetrics#endpointConnected is not invoked for Http2 client  · Issue #2664 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2665
Can we upgrade netty to support Java11 · Issue #2665 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Dear Vertx Team,
since Java11 is already out there. When we run with vertx, it will always pop out following words in logs:
cannot access class jdk.internal.misc.Unsafe (in module java.base) because module java.base does not export jdk.internal.misc to unnamed module
since netty has already fixed this issue, can we update it also?
cheers,
gb
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2666
Allow to put object that doesn't implement Shareable into LocalMap · Issue #2666 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Shareable interface is used in two ways:
to verify object before putting it into map;
to create a copy of mutable object before returning it;
The first is worthless. It actually doesn't help to write safe code because there is no way to define whether object thread-safe or not. Rather it's an obstacle because now it's impossible to share any object that comes from 3rd-party library without implementing some kind of holder. For instance what I want to share a DataSource. A dependency injector? There are many thread-safe classes in Java world around Vert.x and no one of them implement io.vertx.core.shareddata.Shareable.
If you want to warn about how dangerous is to share object state between threads, please, do it in the docs. Since Vert.x is unopinionated, do not force to write boilerplate code just to avoid unnecessary checks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2670
Client connections on GlobalEventExecutor thread that are not propagated to the application · Issue #2670 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes the Netty's bootstrap may notify client connections on the GlobalEventExecutor thread when it happens early in the boostrap when an event-loop has not been yet determined. Vertx expects notifications to happen on the event loop thread and this results in a Uh oh! Event loop context executing with wrong thread! failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2671
SSL websocket not working with HTTP proxy · Issue #2671 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems there is a problem with the websocket frame encoding when tunneling a websocket SSL connection through a HTTP proxy.
The following testcase fails on the websocketWithProxy method
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2672
Ignore case for vertx router binding  · Issue #2672 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of now, vertx router does not handle case when binding to a url path.
For instance, if your application acts as a proxy and have no control on the case for the URI path and in order define a handler you bind to router like this,
Is there a reason/limitation that we not using equalsIgnoreCase here?
Also if this change is acceptable, our team is more than happy to contribute to that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2674
Quest for database cache · Issue #2674 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can I use database cache and  how to do?same as spring  boot @Cacheable
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2679
vertx-js example causes warning · Issue #2679 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
Following the very first example on the vertx documenation js version causes the following warning on the console:
Code looks to be work fine until you start to use some clustering API-s, where they just won't function as expected. I believe because we're on a differently configured context by now.
Do you have a reproducer?
Solution
As I found out from the examples the vertx variable is already defined js verticles, so the above initialization is not required.
If this is true in every cases then the documentation should be updated to reflect this, otherwise it should be more clear describing when the vertx is already defined and when not.
Many thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2682
Redeploy inside docker container fails · Issue #2682 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to create a development environment inside Docker for Vert.x, I have the file system mounted and the file watcher is successfully detecting changes. However when a change occurs the redeploy task ./gradlew classes fails with the following:
Despite the failure Vert.x subsequently reboots but with the stale code as the recompilation never occurs. Whats odd is if there was an issue with the wrapper it would have occurred when the container boots as its started with the command: ./gradlew clean run
Any help would be much appreciated
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2684
executeBlocking callback run on the wrong thread for asynchronous future resolution · Issue #2684 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the executeBlocking(Handler<Future<T>>, Handler<AsyncResult<T>>) might execute the callback on the wrong thread when the runOnContext(...) execution loses the race against the thread that completes the future. This never happens when the worker thread completes the future, but it can happen when the worker thread hands off the future to another thread that completes it.
This happen in the Mongo client and fails with a stack-trace like:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2685
Feature: Support for stream dependency and weight · Issue #2685 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem:
The project I am working on requires prioritization of HTTP/2 streams. For that I need to be able to set stream dependency and weight in HEADER frames in request made from client, as well as responses sent from the server. Currently stream dependency and stream weight is not exposed through the API. When writing HTTP/2 requests/responses stream dependency and weight are not passed to Netty, therefore default values are used (0 and 16 respectively).
Solution:
It seems it would be enough to to add  extend HttpClientRequest and HttpServerResponse interfaces with setStreamDependecy and setWeight to override the default values and pass them through Http2ClientStream.writeHead -> VertxHttp2ConnectionHandler.writeHeaders to io.netty.handler.codec.http2.Http2ConnectionEncoder.writeHeaders
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2686
Problems decoding payload · Issue #2686 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I am making a really simple route in vert.x scala:
I have some payloads with "=" and "%", like this example:
For some strange reason when both are present I am getting this in log:
What I cand do about? Not sure if it is vertx or netty issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2687
Have some plan to support game server？ · Issue #2687 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just learning about vert.x. I think it is suitable for PvP MMO game server for its speed.
Anyone use vert.x for game server?
Or official support plan?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2688
MultiMap should return entries in addition order · Issue #2688 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2689
SSL handshake improvements · Issue #2689 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the SSL handshake leaks handshake failures to the ChannelPipeline during the handshake because we are using the HandshakeFuture to progress during the handshake.
Improve the SSL handshake handling to use a channel handlers (client / server) that will not propagate uncaught failures in the pipeline. The handlers are implemented using events emitted by the SslHandler/SniHandler when the handshake completes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2690
ChannelProvider improvements · Issue #2690 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the ChannelProvider is responsible for connecting the channel on behalf of the NetClient/HttpClient . SSL handshaking and setup is handled separately by the clients.
Improve the ChannelProvider to also handle the SSL client handshake in a common place. The proxy provider has also been merged in the ChannelProvider as there is no much interest to have a subclass for it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2691
Support for distributed queues · Issue #2691 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Could the ClusterManager be extended to expose shared/distributed queues provided by underneath cluster managers in the same way as AsyncMap?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2692
FileResolve shutdown hook throws exception · Issue #2692 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm shutting down a Vertx environment using vertx.close.  During this process the system runs its shutdown hooks.  One of those is deployed by FileResolver and it is consistently throw the following exception:
The issue is that since we're doing close we've already terminated the executor used to run blocking code so the attempt to queue work is rejected.  It would be better if this exception didn't leak as it does currently since there is essentially nothing the Vert.x programmer can do about it (at least not AFAICT).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2695
Signal the VertxMetrics when the Vertx instance is initialised · Issue #2695 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the VertxMetrics SPI does not leak the Vertx instance during metrics creation because the instance might be not be fully initialised yet. We should add a callback to the VertxMetrics to signal when the Vertx instance is initialised before it is returned to the application.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2696
Usability: clustered event bus defaults · Issue #2696 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, there are different processes for configuring clustered eventbus.
the cluster manager configuration file (eg cluster.xml for HZ)
the ClusteredEventBusOptions
the Launcher CLI args (cluster-host, cluster-port)
When running a Vert.x app from the CLI, or in an executable jar with the Launcher, we try to determine a host address if not provided via argument. Then the host/port are set in the ClusteredEventBusOptions.
When it starts the ClusteredEventBus uses values from options.
There are a number of issues with this process:
the address chosen by the cluster manager is not always consistent with the address chosen by the CLI
it's difficult to configure for beginners: users must update the cluster manager configuration file and provide CLI arguments or EB options
EB options defaults to localhost and when embedding Vert.x, users often forget to set cluster host
For Vert.x 4 we must think about better processes, for a better user experience and less questions/issues posted of course :)
Not all issues need to be solved with code changes: a better documentation about this process can help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2698
Server to server file upload, handler gets stuck · Issue #2698 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So I have a scenario where a file upload from a server is uploaded to another server. The client code is taken from Paulo Lopes' SO post. Client saves a file from user's form and streams it to another server. Though it's written in scala, basically it just forwards futures from file open to http post.
The target server follows the Vertx example with some modifications to receive, reconstruct the file as byte array instead of saving it in local stroage. It doesn't use vertx-web either.
Here req detects incoming request but uploadHandler never proceeds into Handle and is just stuck in the line with comment.  it doesn't throw any exception either. However a file upload from html form directed at that path works. Any help pointing the problem is appreciated. Thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2699
NPE during h2c upgrade without host header · Issue #2699 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the server receives h2c upgrade request without Host header, it throws NPE:
The host header is mandatory, but upon client error the server should respond with error (right now it sends 101 Switching protocols and then the connection is terminated).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2700
HttpServerResponseImpl.isChunked fails to validate existence of Transfer-Enconding header · Issue #2700 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In io/vertx/core/http/impl/HttpServerResponseImpl.java:145  version 3.5.4, the methods tries to compare CharSequence with a String and always returns false even when the header is present.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2701
NetServer not using every eventloop thread · Issue #2701 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm writing a tcp server using vertx NetClient, however i found that even if i start multiple servers and listen at the same time, the handler won't using every eventloop thread.
Here's the example code:
The result I imagine would be printing vert.x-eventloop-thread-(0 to 3), however the output ranges from 1 to 3, where 0 was never printed.
I check the source code and found that when the first server.listen is called, it tries to resolve the local socket host, even if the host is set to 0.0.0.0. The resolve process will start a UDP sock for DNS. The UDP sock will use the second EventLoop element inside the PowerOfTwoEventExecutorChooser.
executors[0] will be used by the last tcp server, where it's the same as the first one. And the DNS lookup will not bu used very often, so the result would be: one event loop thread not doing anything.
I'm wondering whether this is a bug? This is easy to fix, just set the event loop to 5. But if the vertx is upgraded, I must check whether there are any new process fetching event loop from the chooser.
And I don't see it very clear that: why the event loop should be set to 2 * cores. If all libs i'm using are async (async-mysql-client/webclient/redisclient and so on), I think I won't get better performance when setting event loop size to ${a number > cores} than ${= cores} (or change it to ${cores - 1} if considering soft interrupt).
Looking forward to your reply~thx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2702
Multi-threaded worker deprecation · Issue #2702 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MultiThreaded worker verticles are an extension to worker verticles. Like with usual worker verticles, events are handled on worker pool threads. But they can be executed by different threads concurrently, which means the verticle must manage its own state to be visible between threads.
There are many parts of Vert.x which simply doesn't support them. For example, you can't create an HTTP server on a MT worker verticle.
Also, we have seen many new users, in particular those experienced with Spring or Java EE, starting directly with MT worker verticles and adding as many threads as possible with the impression it would help get the best performance results. But this is really counter-productive.
In 3.6.0 we deprecate the usage of multi-threader worker verticles and we document how to replace them. The feature will be dropped in Vert.x 4.
See
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2703
Remove multithreaded worker verticles · Issue #2703 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Deprecated in 3.6, they can be removed in 4.0
See #2702
remove mt worker context
update deployment options
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2704
Deprecate Message replyAddress method · Issue #2704 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The replyAddress cannot be used in both standalone and clustered mode. When clustered, the remote recipient cannot use the reply address because it's not registered in cluster manager.
Reply address is an internal detail of implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2705
File descriptor leak when using WebClient · Issue #2705 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Enviornment Information:
Gradle 4.10.2
This issue only happens when an exception happens (a Timeout in this case), but not in every combination of timeout / number of requests. for example, with number of request set to 10 and timeout set to 8000ms, the issue does not appear (only 2 requests fail), however, when the number of requests is 20 and timeout set to 8000ms, the issue does appear (12 requests fail).
I'm wondering if I'm doing something wrong in my reproducer or if there's a bug in the underlying implementation that's supposed to close / free sockets.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2706
Issue TCCL warn based on system classloader equality rather than internal class name check · Issue #2706 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the name of the system classloader class changes with Java version, it seems better to use tccl == ClassLoader.getSystemClassLoader() rather than tccl.getClass().getName().equals("sun.misc.Launcher$AppClassLoader").
Without this, it cause to issue warns on Java > 8 when creating a context from the main thread with the vertx.disableTCCL flag set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2708
Json.checkAndVerify doesn't support Enums · Issue #2708 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I've got a problem with the Json-class in vertx-core.
I think it is related to this piece of code in Json.java:
This is my first issue / PR, so please tell me, if I can improve something.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2711
Document the new streams fetch mode · Issue #2711 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be useful in javadocs and docs to have a quick overview of the ReadStream state machines when in regular push vs (new) pull/fetch mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2712
NPE in OpenApi3Utils for dynamic number of query parameters in spec · Issue #2712 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On exploring the use of web-api-contract and OpenAPI3RouterFactory.create and have the requirement to have a variable (dynamic) number of query parameters for an endpoint e.g. /my/path/v1?param1=value1&param2=value2 etc. (for a search solution) but the parsing of this in OpenApi3Utils.class fails with a NPE.
the relevant slice of my spec.yaml is
it parses fine in SwaggerUI for example with the correct output.
A suggested workaround of an empty {} for the object properties sorted the NPE, but no additionalProperties are parsed from the url (which may be a secondary issue)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2715
io.vertx.core.net.SocketAddress.NetworkMetrics#bytesRead and bytesWritten do not contain headers · Issue #2715 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the numberOfBytes only contains the body length.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2716
3.6.0.CR1  do not support http2?  · Issue #2716 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the same code run correctly in the 3.5.3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2717
Clear pending messages when unregistering message consumer · Issue #2717 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the message consumer, keep the pending messages (accumulated when the consumer was paused) after unregistration. There can be some races that the consumer is resumed after unregistration (user issue) and the pending messages will be processed and it results in internal failures.
Instead the pending messages should be cleared on unregistration and the discarded messages processed by the internal discard handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2718
future compose not handle first future exception · Issue #2718 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
my question is why the first future of compose futures must be success?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2719
The sendFile implementation using file region might idle timeout for very large files · Issue #2719 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently calling sendFile on a NetSocket or HttpServerResponse might timeout for connection having a TCP idle timeout set. This happens because we send a single file region that takes more time than the idle timeout value and cause a timeout. Since it's a FileRegion object, configuring observeOutput on IdleStateHandler will have no effect as such regions are not reporting progress on the ChannelOutboundBuffer.
Instead of sending a very large region, instead we stream file regions of a fixed size (1mo) until the file is completely sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2720
Upgrade Jetty ALPN Agent to 2.0.9 · Issue #2720 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
so that the tests work with the latest Oracle JDK.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2722
Close all shared TCP based servers when Vert.x is closing · Issue #2722 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When closing Vert.x, only the first shared server is closed and not the other servers, which actually does not close the server, since the other shared servers are not closed and prevent closing to happen.
On Vert.x close we should instead close all the servers with a special method as this is not a regular close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2725
Configure cluster public host and port from command line · Issue #2725 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, it's only possible to configure cluster public host and port with sysprops.
This will help having a consistent user experience (cluster host and port can be configured via the command line).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2728
Remove TCPSSLOptions#usePooledBuffers · Issue #2728 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See #2325
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2729
TLS 1.3 Support · Issue #2729 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi All,
Is it possible to update netty to 4.1.31.Final and add support for TLS 1.3?
TLSv1.3 was recently finalized as a standard. In this release we add support for it in various ways, when either of these is true:
That said TLSv1.3 is not enabled by default so if you want to use it you will need to explicit enable it by using TLSv1.3 when configure your SslContextBuilder (like for example):
To be able to do this for our native implementations you also need to ensure you use netty-tcnative 2.0.19 (compiled against OpenSSL 1.1.1+) or netty-tcnative-boringssl-static 2.0.19.
Regards,
Pratik Parikh
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2730
AsyncFile should accept empty buffer writes instead of throwing an IllegalStateException · Issue #2730 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@vietj  I need some help.
when I start the server and client. the file download successfully. but it will throw an exception
How can I avoid this exception or can I ignore this exception?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2731
Evetbus processor registration problem with socket · Issue #2731 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi：
Please look at the chart below.
Using localConsumer here will make other vertx instances in the cluster invisible.Why not consumer but localConsumer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2732
AsyncFile reuse the ByteBuffer for repeated reads · Issue #2732 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently AsyncFile allocates an heap ByteBuffer for repeated reads and could instead allocate a single that would be reused.
Change the doRead() method so it allocates a ByteBuffer and then call doRead passing the buffer instead of calling the read method that allocates the ByteBuffer. After copy the ByteBuffer must be compacted for reuse.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2733
AsyncMap keys, values not available through reactivex/core · Issue #2733 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a way to gain access to these methods from reactivex/core even if they are not the rx variant?
Will there be an observable returning rx variant?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2734
when use metrics with h2 and h2c , http server will lost bytesWritten info · Issue #2734 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2736
HttpServerFileUpload should be resumed when the pending inbound buffer is drained · Issue #2736 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
That's a regression introduced by the usage of InboundBuffer.
The consequence is that the TCP when the TCP connection is paused, it is never resumed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2737
File Upload never finishes with 3.6.0-CR2 · Issue #2737 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So we upgrade to 3.6.0-CR2 to make our code base ready for 3.6.0.
And we encountered an Issues related to File Uploads.
When you try to upload a large file to an vertx webserver and pump this file to the filesystem the following happens:
The writeStream gets full because the fs can write fast enough. This leads to an full InboundBuffer in the HttpServerFileUploadImpl which the proceeds to pause the request when it recives another chunk of data.
The thing is, the request never gets resumed again even tho write stream and inbound buffer get empty.
Looking at the code in HttpServerFileUploadImpl i dont get how this could have worked before since nothing resumes the request. But everything works with 3.5.2.
I think this is a regression introudced through the refactoring of the internal Queue in the HttpServerFileUploadImpl to the InboundBuffer class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2738
ClusteredEventBus with ZookeeperClusterManager loosing the messages when one of the nodes is leaving the cluster · Issue #2738 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello guys!
It seems like vertx cluster event bus (zookeeper implementation) loosing some messages when some of the nodes leaving the cluster. This can be related to #1594 or vert-x3/vertx-hazelcast#13 issues.
Theoretically, it is still sending the messages to the shutted down node.
Here is a code to reproduce:
For now this is really blocking for my project. Is it possible to do something with this?
For example:
Send a call to other nodes, that current node is leaving
And just then start all shutdown procedure
enable some retry mechanism on the event bus and track closed connections or something..
Unsubscribe from receiving messages
push to verticles all the messages, received by event bus, before vertx instance will be shutted down
In this case I can fail the messages manually
stop the event bus and stop the instance
I will be very grateful for any help!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2739
Undocumented breaking change in HttpServerResponse::setChunked(true) from 3.5.3 to 3.5.4 · Issue #2739 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vertx 3.5.3 chunked transfer encoding could be enabled by
In Vertx 3.5.4 the above call order breaks with
IllegalStateException: You must set the Content-Length header to be the total size of the message body BEFORE sending any data if you are not using HTTP chunked encoding.
Please note that headers().remove("content-length") was not a requirement for getting/retaining chunked transfer encoding in 3.5.3. That call just adds clarity by leading to an IllegalStateException whenever chunked transfer encoding is not enabled.
Vertx 3.5.4 require that the call order be reversed. I.e.
I would not expect the behaviour of 3.5.4 unless chunked transfer-encoding was enabled and disabled by setting the appropriate header (with a call to header().set("transfer-encoding", "chunked")), rather than controlling it through a separate instance method.
Given the presence of the setChunked instance method , I do expect the behaviour of 3.5.3: That only explicit calls to setChunked can enable and disable chunked transfer encoding, and that the appropriate transfer-encoding header be set accordingly.
Messages MUST NOT include both a Content-Length header field and a non-identity transfer-coding. If the message does include a non-identity transfer-coding, the Content-Length MUST be ignored
Neither Vertx 3.5.3, nor 3.5.4 removed or prevented the content-length header from being set when chunked transfer encoding is enabled. I don't see a problem with it, because I can control this behaviour in my implementation. But if you really do feel that it is desireable for headers().setAll to be an implicit call to setChunked(false),  then I strongly believe you should do the same whenever the content-length header is set. I also believe you should change the documentation by
Adding a note about this breaking change in the release notes for 3.5.4
Changing the documentation for both ::setChunked and headers::setAll to clearly state that calls to these methods are inter-dependent as well as document the impact of different method call ordering.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2740
EventBusMetrics  add messageSent(String address, Boolean publish, Boolean local, Boolean remote, ServerID sid)  method · Issue #2740 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add
void messageSent(String address, Boolean publish, Boolean local, Boolean remote, ServerID sid)
method to the EventBusMetrics class to help track the delivery of event bus messages across cluster nodes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2741
HttpClient request/response uses Handler<AsyncResult<HttpClientResponse>> pattern · Issue #2741 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient request/response methods are using in Vert.x 3 patterns using an Handler<HttpClientResponse>. For obvious reasons we want to use instead Handler<AsyncResult<HttpClientResponse>> in Vert.x 4. The WebClient provides already this in Vert.x 3.x and it is the advocated client for high level operations so we don't need to provide replacement for these operations, only to deprecate them.
Pull request for Vert.x 3 that deprecates the methods of the HttpClient with a mention for removal in Vert.x 4:
A bunch of pull requests for the Vert.x 4 stack that upgrade the usage of the handler:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2743
Deprecate the HttpClient request/response methods that use an Handler<HttpClientResponse> · Issue #2743 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient request/response methods are using in Vert.x 3 patterns using an Handler. For obvious reasons we want to use instead Handler<AsyncResult> in Vert.x 4. The WebClient provides already this in Vert.x 3.x and it is the advocated client for high level operations so we don't need to provide replacement for these operations, only to deprecate them.
This issue tracks the deprecation happening in Vert.x 3.6
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2745
HttpClientRequest should be reset on a timeout · Issue #2745 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when an HttpClientRequest times out, the request exception handler is called, but the request will remains unmanaged when it already is assigned a connection. When a request times out, the request should be reset. This will do a proper reset in HTTP/2 and will do a best effort operation for HTTP/1 (at best it recycles the connection, at worst it closes the connection).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2746
Remove pooled buffer option · Issue #2746 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x provides the option on TCPSSLOptions to configure the usage of pooled buffers. This option has no effect whatsoever and has marked as deprecated in 3.6. We should simply remove it from Vert.x. This option might be overridden by TCPSSLOptions sub classes in other modules of the stack, so the stack should be checked and provide corresponding PR along with this one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2747
http server metrics vertx.http.server.bytesSent is insufficient for bandwidth measurements · Issue #2747 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The metrics collected by the SPI HttpServerMetrics.bytesWritten(..) is technical correct on average but for large downloads that spans multiple reporting intervals the result is misleading and hard to reason about.
Assuming a 10s reporting interval and a large file that take 60s to download from a vertx HttpServer, the metrics reported is 5 intervals of 0 bytes sent, followed by 1 interval with download activity far beyond physical capacity.
if bytesWritten() was called, not just at the end if the response, but more frequently (say for each 1Mb written) the metrics would be easier to make sense of.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2748
NetSocket StartTLS upgrade failure should report an exception to the socket exception handler · Issue #2748 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When doing a NetSocket#upgradeToSsl, any handshake failure should be reported to the socket exception handler since the NetSocket#upgradeToSsl does not yet take an asynchronous result as argument. The work-around is to set a close handler on the socket, since it will be automatically closed on such failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2749
empty vertx server metrics with http2 · Issue #2749 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using dropwizard metrics and vertx 3.6.0, the vertx server metrics are empty (values are 0). The following test passes using vertx 3.5.4 and fails with vertx 3.6.0. It also passes with vertx 3.6.0 when switching the protocol version to HTTP_1_1.
It seems that this is due to the failed flag passed to Http2ServerResponseImpl.handleEnded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2750
How to configure host verification callback · Issue #2750 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
we are using Vertx in the cluster mode with SSL enabled and TCP Eventbus bridge for other microservices. In both, I can enable SSL, which is working fine in all combo. but I need the control of connected hosts or at least verification callback.
I can enable SSL by using net server option.
but there i couldnt find host verification callback configuration. is it possible like in SSLServerSocket? or is there any other way?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2752
Improper parsing of multiple search domains in resolv.conf · Issue #2752 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the search domain parsing of the resolv.conf file only takes in account the first search domain and not the other. The regression is in the Netty parser and has been fixed in 4.0.31.Final:
We will use the fixed code temporarily until we move to 4.0.31.Final.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2753
JsonObject cannot map to class with Instant or byte array field · Issue #2753 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Jackson mapper is configured to serialize Instant and byte arrays properly (required for io.vertx.core.json.JsonObject#mapFrom method).
But it's not configured to deserialize properly (in method io.vertx.core.json.JsonObject#mapTo).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2755
Prune multi-threaded worker verticles · Issue #2755 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MT worker verticles have been deprecated for removal in 3.6.0.
We simply remove them in v4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2756
Write buffer text message · Issue #2756 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In WebSocketImplBase, the writeTextMessage method accept a String as input, then convert it to Buffer internally.
I'd like to add a method which accept Buffer data but send out as FrameType.TEXT
It's for the performance, in our case we already have a Buffer, it will be wasted to convert it to String then Vertx convert the String to Buffer again before sending out.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2759
Why the NetClientOptions can't set the SO_TIMEOUT options · Issue #2759 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I do not found any method to set the SO_TIMEOUT option  io.vertx.core.net.NetClientOptions.
I check the Transport.java file, only found the  bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, options.getConnectTimeout()), but not found  any method call like bootstrap.option(ChannelOption.SO_TIMEOUT, xxxx).
Why there is no method for the NetClientOptions to set SO_TIMEOUT options?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2760
NoSuchMethodError io.vertx.core.impl.VertxInternal.getOrCreateContext() · Issue #2760 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2761
routingContext.reroute() should reparse headers · Issue #2761 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When rerouting, the headers are not reparsed, which prevents us from modifying the headers before rerouting.
For example, I'd like to process requests with a "accept" parameter that I will convert into a "Accept" header. I've written a handler that does that then call reroute(). The problem is that when reroute() is invoked, the headers are not parsed again, so my new "Accept" header is not taken into account and the wrong handler is invoked.
The fix would be as simple as invoking fillParsedHeaders() from the reroute() method into RoutingContextImpl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2762
[Request] Add global MessageCodec · Issue #2762 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be good to be able to register a global MessageCodec to be used when a specific codec for a message is not provided.
As of today (Vertx 3.6.0) when a message without a registered MessageCodec is sent through the event bus, a RuntimeError is thrown. Nevertheless, most of the time a silent fallback to a default codec would be enough.
For example, in our current application, we want that all messages are sent in Json format; we have tens of different messages and we are forced to register for each of them a specific codec.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2763
3.6.0 -- HttpServerRequest.pause() no longer prevents end of empty stream · Issue #2763 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be a behavior change between 3.5.3 and 3.6.0 which unfortunately has broken our server.  I'm hoping it was an unintended consequence of the stream changes related to fetch() and not a purposeful semantic change in what pause means.
In one of the routes in our server we install a handler which calls pause on the HttpServerRequest instance that is being processed (we use context.request().pause()).  We do this so that we can install our own end handler and proxy the request to a different stream.  Once that's done we resume the request and let it proceed as normal.
In 3.5.3 this works fine -- the sequence of calls (at a high level) go something like this:
handleMessage called on Http1xServerConnection with the initial client request.
pause called on the HttpServerRequestImpl instance
Internally this used to set both the paused and queuing flags to true.
handleMessage called on Http1xServerConnection with the LastHttpContent marker
Because of the fact that queuing is true this would defer processing of this until resume
At this point we set up the request proxying and resume the request (this includes installing a new end handler).
In 3.6.0 we see:
handleMessage called on Http1xServerConnection with the initial client request.
pause called on the HttpServerRequestImpl instance
Internally this calls pause on the pendingQueue (which is actually created at this point), but does not set the paused flag to true.
handleMessage called on Http1xServerConnection with the LastHttpContent marker
There is no code which prevents this from being immediately processed, even though the request has been paused.  This causes the request to be marked as "ended".
Now when we attempt to establish the alternate handlers for the request we get a failure since the request has ended.
The upshot is that pause doesn't seem to be respected.  It is also a bit odd that there appears to be no code which sets the paused flag in HttpServerRequestImpl to true (there is still code that checks for this, but nothing sets it, not even the called to pause()).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2765
Use base64url when converting to/from JSON · Issue #2765 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When converting data objects to/from JSON, byte arrays are encoded/decoded to/from base64.
But the I-JSON Message Format RFC actually recommends to use base64url.
When it is required that an I-JSON protocol element contain arbitrary binary data, it is RECOMMENDED that this data be encoded in a string value in base64url; see Section 5 of.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2767
java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonSerializer on 3.6.0 and 3.6.1 · Issue #2767 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I run my project I get an error like this: Exception in thread "main" java.lang.NoClassDefFoundError: com/fasterxml/jackson/databind/JsonSerializer if I use these versions: 3.6.0 or 3.6.1. But if I return to version "3.6.0.CR1" in my gradle config file then everything works. I try to invalidate cache but it doesn't work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2768
FileResolver isBundleUrlDirectory is not correct for DirBundleFile · Issue #2768 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if url is exist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2769
Deserialize object by it's base class · Issue #2769 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is it possible to send / receive an object using polymorphism and knowing only it's base class?
Example:
Now, I would like to make a generic receiver that will get all classes that extend Base class:
When I'm trying to do something similar to this I'm receiving an error that deserialization process has failed to decode my data into Base class as far as there are unrecognized fields (param2 in this example).
Is it somehow possible to use polymorphism with vert.x EventBus?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2770
java.io.IOException: Too many open files · Issue #2770 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi, yesterday, i just got an error open too many files, but i checked all fd limit configuration, still can't figure it out, here is some error log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2771
[request] attributeHandler or partHandler in multipart · Issue #2771 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Guys,
I have a use case where i have to parse form attributes BEFORE the file (the attribute tells the app how to handle the file upload like compression and encryption etc). In current Vert.x this is not possible as we can only have the attributes at the endHandler. Is it possible to have attributeHandler that is called as attribute is read or even better to have partHandler and abstract all parts as to check the type of part inside the handler which is more natural.
Regards and Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2772
HttpClientRequest random timeout when reuse keep-alive connecton and  server close connection · Issue #2772 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx HttpClient request to server successfully, and connection keep-alive
client send the second request with the connection from pool, but the connection is closed by server
sometimes HttpClientRequest can not handle this correctly, will cause a timeout problem, not invoke excepton handler immediately
test with vertx 3.5.3/3.6.2, both have the problem
analysis:
(1) deactive channel
(2) fire channel inactive and deregister (async task)
vertx process connecton close based on (2)
vertx invoke netty channel write with VoidPromise, can not know write failed, can only waiting for timeout.
so when a client request is created and sent between (1) and (2), which can be done by runOnContext, will cause a timeout problem
reproducer code:
it's a random problem, and difficult to reproduce
so i build the reproducer case with javassist, controll the work flow to make the problem always triggered.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2773
HttpClient race condition when getting a connection from the pool being closed · Issue #2773 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently there is a race condition with the HttpClient between a client request and a connection close. The pool delivers the client request in the next tick and the connection might be removed from the pool between this the schedule and the delivery. At this moment the client does not know the connection was closed and is never aware of the connection close.
We should avoid a next tick in this situation, i.e when the client request is fulfilled with a valid connection, it should be called immediately to avoid the race.
Currently the fact that the connection pool can hold connections with multiples context does not allow to run the pool requests on the pool and thus the situation is hard to avoid without a re-check before the connection is delivered. A better solution might be to attach a vertx context on the pool and consider all connections will use the same context, this would allow to eliminate the race easily.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2774
Deprecate logging API · Issue #2774 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Vert.x logging API is public and advertised in the docs. Besides, there are a couple of issues as it supports parameterised logging methods without standardising on a message format (it delegates this to the logging backend so messages are not portable).
Therefore, we regularly get questions/bug reports about this, which increases the maintenance effort. Also, it's not good to provide a non-working feature only to cause users' disappointment.
Considering it's not a programming toolkit responsibility to provide yet another logging API, the Vert.x loggers shall be deprecated and, in a later major version made internal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2776
Remove documentation for public logging API · Issue #2776 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The public logging API will be deprecated in v4 (see #2774). Let's stop advertising it in v3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2778
Deprecate Future#completer · Issue #2778 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
after this issue (#1827) finished. should we deprecate Future.completer and change the examples in documents?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2779
vertx eventloop is slowing consuming from eventbus on load · Issue #2779 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are polling messages from kafka (using Executor Thread) and put it on vert.x eventbus. eventually the verticles(non-workers) consuming those messages from the eventbus.
we measured that the time it takes to each message to be consumed from vertx eventbus after it was sent to it can reach to 4 seconds on peaks.
for some reason occasionally it takes to the eventloop's verticle consumer long time to consume messages still but not showing the famous thread block error anywhere else. So we cant be sure what delaying it(we set the threadblock warning to be on 100ms)
weird thing that we dont see any event loop block warnings. cpu/ram are all good.
we measured the time it takes for a messages from the time we send it to the eventbus until it was subscribed and it took around 1 second. on average our event-loop job metrics shows around 60ms so no way eventloop is being delayed picking up messages.
perhaps something regarding the eventbus ?
thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2780
text is empty · Issue #2780 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2781
A Question about Transaction For Mongo&MySQL · Issue #2781 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a small idea. About transaction...
In future versions. Will we add some new methods? For simpler transaction usage.
And I didn't find a good way to use transactions in VertX.
Recently I've been using VertX and Mongo.VertX much more interesting than SpringBoot.It's just that there's a problem here in transactions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2782
How to use CompletableFuture in vertx-web-client · Issue #2782 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello,I wanted to use CompletableFuture, in vertx-web-client but now it's blocked and I don't know how to use it in vertx-web-client。
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2783
HandlerManager throws ArrayIndexOutOfBoundsException under high load · Issue #2783 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Upon stress on websocket connectivity (Connect and disconnect quickly), HandlerManager is throwing ArrayIndexOutOfBoundsException as below -
vertx-core version: 3.5.3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2784
Vertx-config when using Spring Config Server Store not interpolating variable properties · Issue #2784 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using vert.x ConfigRetrieverOptions as type "spring-config-server" to fetch properties from config server in my vert.x application.
I have property file in my config server that has some interpolated values like:
When I am trying to fetch key2, instead of returning "hello/world" ConfigRetriever.getConfig is giving me as it is value without interpolating i.e. ${key1}/world
Is there anything else I need to do in vert.x to support this feature(String Interpolation)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2785
HttpServer should send a valid HTTP response when no request handler and a WebSocket handler is set · Issue #2785 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServer fails with a NPE when a ServerWebSocket handler is set and no HttpServerRequest is set. In this situation instead the server should respond with a 400 response when a request with a missing upgrade header is received.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2786
ServerWebSocket upgrade does not always fail correctly during an handshake failure · Issue #2786 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The actual implementation of the server will not handle correctly an websocket handshake failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2787
HttpClient pool improvements · Issue #2787 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A few improvements done to the HttpClient and the pool:
the client suffers from races when a connection is closed while being delivered to the client request (see #2773)
TCP idle timeout now is not handled anymore with pool events but instead when a TCP idle event happens, it is ignored when the connection is in the pool
the activate/passivate connection has been removed (since it's not used anymore for TCP idle)
the coupling of the pool to channel has been removed as it was not necessary
The main change is that now the pool methods update the pool state and the corresponding events (deliver a connection to a waiter, connect to an endpoint, keep the waiter list bounded) are handled on the event-loop thread to avoid races. To accomodate this, now the pool has a context instead of having a context per connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2789
Virtual memory usage is high, when Java Heap or real memory usage is much lower · Issue #2789 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello guys, Vertx is an awesome piece of software, thanks for your effort.
However I have a problem which I described in the subject. My web server is extremely simple and the only thing it does is sends received URL to Kafka after basic validation. I understand that Kafka client might be the root cause, but I have found similar issue with like https
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2790
JsonParser should not resume or pause the source wrapped read stream when it is ended · Issue #2790 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have implemented streaming Json from an AsyncFile as shown in this example. This has worked nicely before 3.6.0 but now results in a java.lang.IllegalStateException: File handle is closed in 3.6.2.
Based on some debugging, the following happens:
the exceptionHandler is called with the above exception
As far as I can see, issue #2584 and PR #2583 seems to be related.
Is the example outdated? Should we handle file closing in some other way?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2792
Stream pipe API · Issue #2792 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the advocated way to transfer data between streams is to use the pump API. This API only cares about transferring data and leave the aspects of stream life cycle and error management to the developer, which can be difficult to implement when a write stream is obtained asynchronously.
The stream API is a new API that will pipe a read stream to a write stream using the well known pump mechanism and will also take care of other aspects to provide a simple and effective solution to the developer.
The previous pump API will still be supported but not advocated anymore in the doc in favor of the pipe API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2794
HttpServer closes the connection prematurely when sending a large file with HTTP/1.1 without keep-alive · Issue #2794 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version:  3.6.2
When sending a file larger than 1MB the server will prematurely disconnect if the client has set the Connection header to close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2795
HttpServer handles incorrectly pipelined server response with sendFile · Issue #2795 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpServerResponse will signal that the connection can be written to the server after calling sendFile leading the server to process a next request and interact with the response concurrently with the send file operation. Instead the response should signal the end when the file has been sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2797
The uri() method and the absoluteURI() method in HttpServerRequestImpl are inconsistent in judging the legality of uri. · Issue #2797 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I request the address http: in the browser, the uri() method will not report an error, but the absoluteURI() print error will return a null value. This inconsistent performance is not reasonable.
The contents of the error are as follows:
The first line is the result returned by the uri() method.
The last line is the result returned by the absoluteURI() method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2798
io.vertx.core.VertxException: Thread blocked · Issue #2798 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
i am already using vertx.executeBlocking() but i always get this exception:
For explanaition:
I download some files from ftp server and this takes some time. So i have also tried to set the checker interval:
vertxOptions.setBlockedThreadCheckInterval(30000);
but this doesn't have any effect.
It is a clustered vertx instance (source file).
What can i do to solve this problem? Or how can i increase the limit?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2799
Feature Request of webclient : getRedirectedUri()   · Issue #2799 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using web client to get urls . I need to get the redirected uri for further parsing as base url . Thanks in advance . As I investigated, HttpAsyncClient uses a HttpContext to get it:
just for reference.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2800
MongoDB rxFindWithOptions returns no results · Issue #2800 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I'm trying to run natural language search. I have collection tag, and that collection has text field, with text index on it.
When I connect via shell, and run the query:
I always get 0 results back for the same input  - "tag" string in this case.
Is there some obvious mistake I'm making?
Many thanks for wonderful work!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2801
Document that executeBlocking should not be used for long blocking operations · Issue #2801 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently users might use executeBlocking for operations that lasts an indefinite amount of time (e.g using a worker thread to poll a blocking input in a while loop). Add documentation to clarify this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2802
HTTP response sendFile callback · Issue #2802 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add a callback to HttpServerResponse.sendFile so the caller can react to when the file is completely put on the wire.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2803
HTTP2 request/response exception handler should not be called when response is ended · Issue #2803 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When setting an exceptionHandler for a response, it is called with a "connection closed" exception for every HTTP2 request, even when the response has been written and ended properly. This does not happen for HTTP1.1 requests. The following unit test illustrates this problem - it passes for HTTP1.1 and fails for HTTP2. Maybe PR #2319 fixes this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2806
Vertx  call RPC， no Handler for address exception · Issue #2806 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using vertx-service-discovery for rpc service. And use vertx-ignite for cluster. The vertx version is 3.5.4.
I also got this exception: NO HANDLER (-1) for address , it appears sometime, not always.
the exception showed below：
I registered in the eventbus address “_comservice_192.168.1.33” ，bond with the service name “messagepriovder_comservice_192.168.1.33” . when the com service node(192.168.1.33) started, the rpc service will be published. Then the biz service node will find the rpc service by service name rhen call the rpc interface.  The com service node and biz service node are clustered by ignite with tcpvmfinder configurations.
I succeed to get the rpc service consumer , but when calling the rpc interface, the error  appears.
I got very confused , and test some days , have not fixed this. Could anyone offer s
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2807
Allow ObjectMapper to be configured on a per Vertical basis · Issue #2807 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are cases where you want to setup a Verticle with a specific ObjectMapper configurations (additional configs, modules, etc).
But we dont want to change the global mapper, but we are also using items (like the Web Client) that use the global mapper.
Would be great if Abstract Verticle allowed you to control the specific mapper being used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2808
Avoid excessive handler creation while Send-Reply which slowes down communication (Cluster Mode) · Issue #2808 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have to deal with many messages send via send/reply strategy over a clustered eventbus. Vertx registeres a new handler for each call which causes in heavy load in cluster manager (we use zookeeper cluster manager) which has to create a new entry for each message and propagate it to all cluster memebers (< 600 instances). This could be avoid and we implement our own Reply Strategy which uses send strategy of vertx inside. We register only one reply consumer/handler while start of each verticle/eventbus instance. It's address is send as header via send and while reply this address is used.
maybe its possible to integrate this into vertx core.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2809
Adding close hook make it impossible to fail verticle deploy · Issue #2809 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2810
API design flaw - conflicting interests between requestHandler and router? · Issue #2810 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have this error:
here is the culprit (the main verticle):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2811
how to customize eventloop thread name and calculate how many eventloopContext created · Issue #2811 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
we create multiple vertx instances in one process
sometimes our code is not so good, that caused create unnecessary eventloopContext
so we extend VertxImpl in vertx 3.5.3 and previous versions
give vertx a name, and make eventloop thread name prefix relate to vertx name
calculate how many eventloopContext created
but when i try this in 3.6.3-SNAPSHOT, i fount that constructor changed from package to private, so i can not do what we want.
someone help me to resolve this? thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2813
MessageConsumer delivers more items than requested in fetch mode · Issue #2813 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Originally filed as an Rxified consumer issue (vert-x3/vertx-rx#179) but it turns out the MessageConsumer implementation itself is the root cause.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2815
jackson-databind multiple critical CVEs · Issue #2815 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From org.owasp:dependency-check-maven plugin,
Bumping to v2.9.8 solves the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2816
Feature/question - access id of current event loop tick · Issue #2816 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am looking for a feature to determine if a method call x is in the same event loop tick as a previous method call y. If it's the same tick, I will use code like this to make sure the call gets run on the next tick:
this kind of thing will make sure APIs are always sync or always async to make them consisent. Doing this in Node.js is known as avoiding Zalgo.
Anyway, my question is, how do we implement vertx.weAreInNewTick(previousTickId)?
What that method would do is get the id of the current tick and if that id is greater than the previous tick, return true. But not sure if we can do this yet?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2817
Why is NetServerImpl sharing the thread pool pattern · Issue #2817 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The listen method in the NetServerImpl class :
Threads that handle other IO events and tasks in addition to accept can easily block
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2818
Why does deploy use a new thread callback in the DeploymentManager class · Issue #2818 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Why is it wasteful to create a new context, but only callContext
Isn't that a waste of an eventloop thread? There's nothing to do!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2819
How to trap errors thrown in a verticle - specifically within route handlers · Issue #2819 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I posted this question on StackOverflow:
Maybe I missed it in the docs but I think it's an important feature and I am wondering if Vertx attempts to solve this one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2820
HttpClient pool does check progress after connections are evicted on idle timeout · Issue #2820 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClient pool on idle timeout might evict connections but does not check progress. It should check progress so the pool is closed and released when it becomes empty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2821
Handler/callback registration guarantee? · Issue #2821 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Say I have a simple API, like so:
Given the above code, my question is - using Vertx with Java, is there a guarantee that v.onDone will be called in a deterministic amount of time?
for example, assume that v.done() looks like:
so by using a thread, we delay, in the hopes that  v.onDone() in the same scope will be registered, but I don't believe there is any such guarantee, when it comes to basic Java threads. So I assume that using an event loop will give us such a guarantee, where vanilla Java threads wouldn't.  Is there some documentation that explains how this guarantee works?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2822
Vert.x 3.6.3 wrong access control origin · Issue #2822 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I am working with vertx web and I am migrating from the 3.5.0 to the 3.6.3.
I am now facing a issue that was not present on the previous version: when request is sent to the websocket server there is a CORS problem
Here is the header of the sent request:
You can see that the parameter access-control-allow-origin is different from one version to another. As a result Firefox tells me it is not allowed to look for a resource which access-control-allow-origin is "*" while Access-Control-Allow-Credentials is set to true.
I might have seen something in the vertx code that changed and could explain that but I do not know if it was on purpose. In the method setCORS() in the class io.vertx.ext.web.handler.sockjs.impl.BaseTransport, the new version does not override the Access-Control-Allow-Origin if already set resulting in the wildcard in the response.
Here is my implementation for opening a server websocket:
Yours faithfully
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2823
basicAuthentication joins using hyphen instead of colon · Issue #2823 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For basic authentication, the basicAuthentication method in HttpRequests should be joining the client_id and client_secret with a colon (as the javadoc also suggests), but in reality it joins them using a hyphen, as shown below. It's not the biggest inconvenience, but just thought I'd point that out.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2825
Add fails method to TestContext async object · Issue #2825 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am seeing this:
I would think there would be a method that tells the test case that there is failure?
should we just throw an error?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2826
Feature request - add overload for JsonObject.mapTo · Issue #2826 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I posted this question on SO:
here is the only definition for mapTo:
where renameKeys would rename the keys in this.map to the expected names.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2827
Feature request - non-blocking locking akin to synchronized block · Issue #2827 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I asked this question on SO:
Is there a good way to implement an asynchronous version of synchronized keyword? Obviously synchronous blocks the current thread.
For example:
I can return a boolean from this block - it's synchronous. Is there a way to do this asynchronously?
I made up the Object.onLockAcquisition method, but looking for something like that.
Object.wait() and Object.notify() are for threads, I don't think a non-blocking locking system will play well with traditional synchronization primitives
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2828
Use JsonArray along with JsonObject · Issue #2828 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I looked through the source code, and therefore I believe this is a request not a question.
Say we have a SQLConnection conn:
however it's pretty obvious that this query is going to return a list (of rows), so always putting everything in a JsonObject is not very refined. I would hope for something like this instead:
but that call doesn't seem to exist. I looked through the source, I see this for toJson();
the above code is very if/elsey - I think it would be nice to see a toJsonArray and toJson method?
if it couldn't be converted to an array, it would throw an Exception, which is fine. If it's an array and you attempt to convert it to a single object, then it would also throw.
Is this a good idea? All I see right now is:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2829
Should be a json() convenience method on ctx.response() · Issue #2829 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am looking this:
I just want to write json to the response. I assume the right way to do this now is something like:
but I wonder if there could exist a json() method or sendJson() method that could accept various different kinds of JSON library types and handle them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2831
HttpClientRequest.get/getNow is deprecated, what should I use instead? · Issue #2831 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2832
Add static method JsonObject.from() · Issue #2832 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe this can create a JsonObject from a string:
however, I expected this to work:
but there is no from() static method...this would be a nice-to-have.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2833
TrustOptions and KeyCertOptions should define a copy() method instead of clone() · Issue #2833 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently TrustOptions and KeyCertOptions interface defines a clone() method without extending the Cloneable interface. The method should be deprecated in 3.x with a new copy() method and the copy() method should delegate to the clone() method as default implementation. The clone() method is removed in 4.0.
This method is not intended to be used by developers, usually it is used internally when an options object is copied and this is used to implement a polymorphic copy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2838
Cleanup in HTTP server/client options · Issue #2838 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP server/client have many discrepencies and the documentation is inconsistent with the spec for the WebSocket compression extensions.
In addition a few methods needs to be actually renamed to have proper getters and a couple of constants for default parameter value are inconsistent with their corresponding attribute.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2839
SSLEngineOptions should define a copy() method instead of clone() · Issue #2839 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently SSLEngineOptions class defines a clone() method without extending the Cloneable interface. The method should be deprecated in 3.x with a new copy() method and the copy() method should delegate to the clone() method as default implementation. The clone() method is removed in 4.0.
This method is not intended to be used by developers, usually it is used internally when an options object is copied and this is used to implement a polymorphic copy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2840
Remove equals/hashCode from options · Issue #2840 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently some options classes define equals/hashCode methods with tests. There is no real purpose for such methods and such implementations require to be implemented / tested. The equals method is used in some tests (for instance to assert copy constructors) but this can be replaced by comparing the json version of the options.
We can remove such methods which are not really necessary and this will simplify the implementation of vertx options and be less error prone synchronising the implementation with the actual options fields (which does not happen for json as we generate them).
Users code should not rely on these methods, this will only be removed in Vert.x 4 however.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2842
Context tracing  · Issue #2842 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Support context tracing in a Vert.x runtime.
trace an activity or flow attached to the current Vert.x context (which implies it can be statically retrieved using a thread local using the Vert.x context)
hooks for transport context propagation (HTTP client/server, event-bus consumer/producer)
tracing management, i.e the ability to start/end an activity for third-party integration
generic framework for tracing arbitrary continuations
allow to shallow duplicate and attach local data to a io.vertx.core.Context, this creates a new context which shares the same state than its creating context (same event-loop, same attribute map, same concurrency, etc...).
add a local map storage on the context, that is used to store state to distinguish contexts (i.e it can store a span id, etc...)
add an event-driven tracer SPI (that can be configured or discovered) for integration with external tracing systems (tracing clients such as Zipkin, OpenTracing, etc...)
modify server implementations so that contexts are created when necessary
Not covered by this issue (i.e todo)
integration of other Vert.x middleware with the tracer SPI so their activity can be traced
integration with tracing clients
per verticle tracing configuration (not planned)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2844
CLI parser should be case-sensitive · Issue #2844 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using the CLI API for parsing command-line parameters I noticed that the shortName for Options are case-insensitive.  I wouldn't have expected this behavior by default, and didn't see this behavior documented anywhere.  I recall working with other command-line tools which accept single-character ("shortName") options in both uppercase and lowercase forms (i.e. ./someTool -a someValue -A someOtherValue).
Here's a quick test case demonstrating this behavior (short names):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2845
Remove deprecated  Metrics#isEnabled() method · Issue #2845 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Remove this SPI internal method that has been marked as deprecated and never really used/implemented.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2846
Remove deprecated NetServerOptions#isClientAuthRequired() · Issue #2846 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This method has been deprecated a long time ago and replaced by NetServerOptions#clientAuth enumerated field.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2847
Remove deprecated VertxOptions#fileResolverCachingEnabled · Issue #2847 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This method is replaced by the nested FileSystemOptions#fileCachingEnabled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2848
i dont unrestand this behavior · Issue #2848 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the second setPriodic sync with first setPriodic ?????
if first setPrioic have a long time operations why the second setPriodic must w8 for it.
this is a worker verticle ,
sorry my english is not good.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2849
i dont underestand this behavior · Issue #2849 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
verticle is worker verticle , DeplpymentOptions().setWorker(true).
why the second operation (setPriodic) synced with first.
if the first operation have a long time process why the second operation must w8ing for it , while we used worker thread and worker threads used for long operation.
plz explain this behavor , sorry my english is not good.TY.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2850
Inbound buffer should compare strictly to the high water mark for writability · Issue #2850 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the InboundBuffer uses a lower or equals comparison to the high water mark when checking the buffer writability. It should use a strict bound, so a buffer with a zero high water mark  will reported to be full when the buffer is paused and there is no demand
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2851
InboundBuffer should call the drain handler only during a drain call · Issue #2851 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the drain handler can be called when writing to the InboundBuffer as the InboundBuffer will append the elements to the queue when it receives elements and is already emitting and the internal buffer is full.
Instead writing to the internal buffer should always succeed when there is demand and the result of the write operation should only be based on the high water mark and the size of the internal queue instead of being based previously on the high water mark only.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2852
Delay the end handler notification when an stream end handler is called · Issue #2852 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 3.6, the stream contract was changed to pause only the event notification and not the end handler notification. The assumption was that pause only concerns the data and that a stream could end when there is no demand for its elements.
This issue restores the previous behaviour and add test for this behavior (it was actually inconsistentin the codebase).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2855
Does not get response from second request, while replying to eventbus requests from websocket client handler · Issue #2855 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Only getting one response, when processing the event bus message, (reply is from websocket client handler.)
Getting reply only for the first message, all other requests which are sent via eventbus are getting timeout after 30 seconds.
Using Vert.x 3.6.3
Stuck with this for a very long time. Any help would be greatly appreciated !!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2856
Can not close file while upload empty file or zero size file · Issue #2856 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
reproduce step
start upload server sample in vertx-examples.
don't choose file or choose empty file(size is 0) and upload
after upload, check program's open file with lsof( on linux ) or processexplore(on windows)
can see the remain uploaded file handle
it seems that the HttpServerFileUploadImpl.streamToFileSystem does not set the file variable,  it's null, and can not close while handleComplete. But I'm not sure about it now.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2858
Asynchronous handshake of a server WebSocket · Issue #2858 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the server WebSocket handler can decide to accept or reject a WebSocket when it is invoked otherwise it will be accepted when no action has been explicitly taken. Sometimes it is desirable to perform an asynchronous decision (e.g authentication).
This feature provides asynchronous handshake with a setHandshake method accepting a future instance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2859
HTTP server file upload leaks file descriptors when empty upload streamed to file system · Issue #2859 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP server does not close file descriptors when empty files are streamed to the file system. There is a race happening because the completion check does not pay check that the stream isn't being paused, causing the file opening to happen after the completion leading to the leak.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2864
JSON decoding without knowledge of the content · Issue #2864 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, it's possible to decode content to a JsonObject or a JsonArray, if you know what the actual content is.
But sometimes you receive JSON without knowing the format beforehand, and it would be handy to have methods to decode to the right target object.
An example use case is a GraphQL request: some clients (Apollo) support request batching and then will send you an array of request instead of a single request object. Only by inspecting the content you can determine if the request is batched request or a regular one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2865
FileUpload streamed file should be closed on error · Issue #2865 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2867
HttpServer close handler not invoked if actual server is null · Issue #2867 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If an exception occurs after listening is switched on but before actualServer is set, then the close method handler will not be invoked.
This prevents the deploy method to receive the failure (the verticle is undeployed correctly but the HTTP server hook never completes). Here's an example:
If the PFX path is wrong, listen throws an exception.
But the handler will not be invoked
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2869
Prune Future#completer · Issue #2869 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This method is not useful anymore for some time as the Future<T> extends Handler<AsyncResult<T>>.
This method is deprecated in 3.7.0 and removed in 4.0.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2870
Automatic certificate change detection and reload · Issue #2870 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x needs to support automatic change detection and reload for certificates, so that Vert.x servers can be used with certbot.
Currently Vert.x does not have out-of-the-box support for LetsEncrypt.org's ACME. There is an outdated project that implemented support for an older version protocol. However, a better strategy is to rely on certbot, the primary recommended ACME client, set up as a cron job to renew certificates as needed.
When used with a Vert.x server, this would require shutting down the Vert.x server and restarting it when the certificate is renewed, using certbot's --renew-hook option. Server downtime, even if brief, is not ideal.
It would be much better for Vert.x to be able to watch for changes to certificates, and reload certificates if they change.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2873
Deprecate EventBusOptions delegates in VertxOptions · Issue #2873 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We had a 2 days effort because the API is misleading:
This will result in:
But I expected:
In my opinion the API should be changed in order to reduce the confusion. If I configure an option it should not be changed after setting other options.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2875
web socket responses are not being sent on eventBus.Message · Issue #2875 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would like to use a single socket connection, to send multiple messages to Socket server and receive the response from the socket server and reply via eventBus.Message.
but the response from the socket server is not being sent via message.reply.
I tried with HTTP client, that seems to be working fine.
Please point out where am I going wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2876
JsonArray: Shall we remove `Objects.requireNonNull` when `add` some value · Issue #2876 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2877
ConnectionBase#sslSession() cannot retrieve the session · Issue #2877 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently ConnectionBase#sslSession() throws an error because it assumes the SslHandler is named ssl unlike the peerCertificateChain() method that gets this handler using its class.
The method ConnectionBase#sslSession() should do the same.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2878
Server WebSocket handshake failures won't let the server connection in a usable state · Issue #2878 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently server WebSocket handshake failures will send an HttpResponse message directly leaving the Http1xServerConnection#responseInProgress field with the current response. This prevent the HTTP server request handler to further process any HTTP message when the connection is persistent.
Handshake failures now will use the current HttpServerResponse to send the handshake failure which will maintain the Http1xServerConnection state correctly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2879
ServerWebSocket is not able to process further connection messages · Issue #2879 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently server WebSocket handshake will send an HttpResponse message directly leaving the Http1xServerConnection#responseInProgress field with the current response. This prevent the HTTP server request handler to further process any HTTP message such as writability.
As side effect, this prevent the ServerWebSocket drain handler to be called, since the response in progress will handle this message.
The WebSocketServerHandshaker will take care of sending the HttpResponse message so there is no way to use HttpServerResponse instead. So after a successful WebSocket handshake the Http1xServerConnection#responseComplete() method should be called to signal the response has ended.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2880
JsonArray add methods should allow the null argument · Issue #2880 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the JsonArray is protective and does not allow null as argument of its various add methods. In practice when one should want to add a null value, that person should use the addNull() method which is fine when you need to actually add the null value directly. However when you add a value that might be null, this force the user to check the value nullity and use either the add method or the addNull() method.
This allows to add the null value in any add method of JsonArray.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2881
Upgrade maven-bundle-plugin to 4.1.0 · Issue #2881 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2882
LoggerFactory doesn't work for static final logger · Issue #2882 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to use Log4j2 as my Logger using the LoggerFactory of vertx.
And after many tests, I found the problem but I don't understand it.
I use vertx in version 3.6.3
The result in my console :
My config seems good because the System property has the good value.
But all my loggers are static final in my class, so they use JUL instead of Log4j2.
It is a bug ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2884
Remove deprecated EventBusOptions delegates from VertxOptions · Issue #2884 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also update the stack where needed (in particular the cluster managers)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2885
Follow what is being done at netty and add native image metadata · Issue #2885 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See: netty/netty#8959
If we all provide this, any project using netty or vertx can build without any extra configuration or tooling that the native-image itself.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2886
Cannot import FreeMarkerTemplateEngine (Kotlin) · Issue #2886 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Created a Kotlin+Gradle starter project and tried to import FreeMarkerTemplateEngine -
But I have an "unresolved reference" error.  Weirdly enough, IntelliJ is suggesting me to import "io.vertx.rxjava.ext.web.templ.freemarker.FreeMarkerTemplateEngine", which I cannot use with my Verticle's context
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2887
some confuse about setTimer · Issue #2887 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
recently such a problem came to me,I write my code like this:
but amazingly I found that the timer would exit after it work for several times. Do anyone know why? Thanks a lot.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2889
HttpClient shall set content-length header to 0 when sending request without body · Issue #2889 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Versions
When sending a request with the vert.x http client, the content-length header is not set when there is no body in the request.
The logs:
I think it should be better if vert.x adds automatically the content-length header with a value equals to 0 when there is no body on all methods excepting GET and HEAD. Vert.x already does that for requests with body.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2890
This code still does not understand · Issue #2890 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// Need to set context before constructor is called as writehandler　registration needs this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2891
HttpServer should answer with BAD REQUEST when content-length is negative  · Issue #2891 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
When sending a request with the vert.x http client and setting a content-length equals to -10, the server does not throw an error. I thing it should throw a bad request error
Reproducer
The logs:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2892
Calling unregister on a consumer that has not been fully registered across a cluster can result in metrics SPI call with null parameter. · Issue #2892 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a non-local event bus consumer and then invoke unregister on it before it has invoked its completion handler this can lead to calls to EventBusMetrics.handlerUnregistered where the handler parameter is null.  This would seem to violate the implied SPI contract and can trigger NPE's in at least some implementations.  See vert-x3/vertx-micrometer-metrics#74 for one example.
This happens because the HandlerRegistration.metrics field isn't populated until HandlerRegistration.setResult is called and that doesn't occur until the consumer's subscription has been fully propagated across the cluster.
Note that this may not be the only issue with the premature call to unregister it is just the most obvious.
It would seem that either:
a) The premature unregister call should be rejected (especially if there are other, unwanted side-effects of this).
b) The SPI call should be made in a way that ensures a non-null handler parameter.
c) The SPI should be clarified to say that null is a legal value and then all implementations of the SPI updated to account for this.
I do not yet have a minimal reproduction.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2893
CloseHook · Issue #2893 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi !
Establish httpserver, bind the network interface successfully and does not change the variable listening state, resulting in the call to close method will appear unable to close the socket
listening state is always false
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2894
Vert.x Web KeycloakAuth OAuth2Auth auth handler and BodyHandler can't be used together  · Issue #2894 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there.
I may be doing something silly here but I can't seem to get the KeycloakAuth OAuth2Auth Auth handler and the Vert.x Web BodyHandler to play together nicely.
I am using Vert.x 3.6.2 and I have setup my Router as follows:
Form the exception it appears the the Auth handler reads body which prevents the BodyHandler from doing so. This means that the body will be unavailable on the RequestContext which is a problem for the API that I need to secure with the Auth handler. Is this a valid setup or am I doing something silly? If not it seems like if the Auth and Body handlers are mutually exclusive then the Auth needs to do what the BodyHandler usually does.
Please advise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2895
Pause is not respected · Issue #2895 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It does not appear that Pause has any impact at all on whether or not a stream is paused.
In the example, the Flowable chain will perform two read request on the webclient prior to reading the inbound stream and when the stream is read an error is produced that the stream has already been read.
Reproducer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2896
Extend possibility for adding classes to class path with setExtraClasspath · Issue #2896 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when we want to add classes/jars to the class path we rely on setExtraClasspath from DeploymentOptions. This method requires path to specific jar and can not take folder as arguments or path with wildcard (pattern) ex: /path/to/folder/*.jar
This functionality would be useful as we pack all additional jars on specific convention based location and seams like a logic request.
Also on the side note, why it is mandatory to define isolationGroup when defining ExtraClasspath?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2899
Event bus consumer racy cluster registration · Issue #2899 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the event bus message consumer registration is racy in cluster mode, the registration will happen asynchronously and the consumer can be unregistered letting the handler handle the registration although it is currently unregistered.
The consumer should properly handle the case where the asynchronous registration completion happens after the consumer is unregistered. In such situation
the consumer completion handler should be called with a failed result during unregistration
the consumer state should be failed
the registration callback should check whether the consumer is still registered before updating the state and register the consumer to the metrics SPI
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2900
Move event bus metrics unregistration to HandlerRegistration instead of HandlerHolder · Issue #2900 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the EventBusMetrics unregistration happens in HandlerHolder when the holder is removed. This design implies that the metrics registrations always happens before the holder is removed. In cluster, the holder is registered locally before the cluster wide registration happens, the metrics is only registered when this cluster registration succeeds. So we don't have the guarantee that the holder will be removed after the clustered registrations is done.
The unregistration can be moved to HandlerRegistration instead that actually holds the relevant state to determine whether the unregistration should happen in a non racy manner.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2903
Core HttpClient fails silently on GET method · Issue #2903 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code fails silenty (no call is made):
If I change the method to POST, the client works. Also I can confirm the GET endpoint is working correctly. I have also tried the other methods (getNow, get, etc..)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2904
HttpServerRequest fetch does not call the end handler when the request is empty · Issue #2904 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2905
Create default Message<JsonObject>  · Issue #2905 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Maybe its a very simple, easy question but I can't manage to find a way to create a default message when I receive a timeout on the eventbus.
Any help would be greatly appreciate it.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2906
Vert.x deployment issue on new verticle with new library · Issue #2906 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a verticle which can deploy other verticles as services. And on the deployment of new verticle having new dependency like vertx-circuit-breaker (this library exist only on the new verticle that is going to be deployed) shows error like this:
But when we include that library on main verticle from where we are deploying new verticle, it works perfectly fine.
The dependencies of new verticle is not able to resolve dynamically by the verticle from where we are deploying other verticles as services.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2907
Avoid holding lock in ConnectionBase#writeToChannel · Issue #2907 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current implementation of ConnectionBase#writeToChannel synchronises on the ConnectionBase (which is necessary) and holds this lock when calling ChannelHandlerContext#write or ChannelHandlerContext#writeAndFlush. It happens that when the channel outbound buffer is full, the write operation drains the buffer on a flush changing the channel writability leading to potential deadlock in Vert.x
We should avoid holding the lock and restrict the lock scope only for the reading/writing the ConnectionBase intrinsic state (i.e needsFlush and writeInProgress fields).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2910
Idle timeout does not fail request since 3.6.0 · Issue #2910 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I recently attempted to up grade our project from vertx 3.5.3 to 3.6.3, but found that idle timeouts no longer fail existing requests. After creating the repro below, I've verified that this seems to have been introduced at 3.6.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2911
Verticle based applications only use half of configured event loop threads · Issue #2911 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I discovered this issue in 3.5.3 and have verified using the reproducer below that it is still present in 3.6.3 and 3.7.0.
As background, it seems that 1) Netty assigns event loop threads in round-robin fashion, and 2) Netty creates event loop threads only when something is executed on the event loop. The current Verticle deployment path calls getOrCreateContext() twice, which results in every other event loop never having anything run on it, and as a consequence applications that use an even number of event loop threads will only use half of them. This is the common case, since the default number of event loop threads is twice the number of cores detected in the system, and it seems likely that custom configurations are likely to use an even number of threads.
The code below can be used to see this issue:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2912
Vertx.cancelTimer() can return true when timer fires · Issue #2912 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The API contract for Vertx.cancelTimer() appears to indicate that if it returns true, the timer has been successfully canceled. However, the timer handler is not properly synchronized with the timer flag, so the handler can see the cancelled flag is false and start the handler execution before the CAS in the cancel() method runs.
Currently, we have to do our own synchronization around timers to ensure that when a timer fires indicating a timeout, we are guaranteed the handler does not also execute. It would be better if InternalTimerHandler.handle() also did a cancelled.compareAndSet(false, true) and only executed the handler when the CAS is successful, ensuring that canceled timers are guaranteed not to execute their handlers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2913
bareCommand.getJsonFromFileOrString can not read classpath file · Issue #2913 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"-conf" can only read non-classpath configuration files.
Maybe we should check the "jsonFileOrString" ,if starting with “classpath:”read configuration file from classpath.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2914
Vertx.getOrCreateContext unexpected behaviour · Issue #2914 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys,
After 3.7.0 upgrade my system provides unexpected behavior with the data in a Context.
Currently I working for reproduction test. (Will take some time).
Following some inputs:
In start() method of Verticle initialized object and set to actual context via Context.put().
Later in code, I trying to get this object from context (context.get()), but its null.
This is a web application and data over via Router.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2915
Signal end of stream using a sentinel · Issue #2915 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently streams implementations in core relies on a boolean flag to determine when a stream has ended and the delivery (possibly delayed) of the corresponding event.
This can be simplified by using an end sentinel that is the last event of the stream removing some complexity in the handling of the delayed stream end.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2916
HTTP event handler should not be called when holding a lock · Issue #2916 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We still have event handlers that are called while holding a lock which can lead to deadlocks.
We should remove them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2920
Vertx-web-client  setTryUseCompression error:decompression failure · Issue #2920 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello,
I use webclient request
But there was an error：
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2921
OpenApi router factory and EventBus · Issue #2921 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We recently shifted our apis to make use of the openapi web contract with the combination of eventbus to send and receive api responses for our clients.
It was working fine until today where we noticed that most of our apis were timing out, the following errors were thrown.
We were unable to debug as our consumers where not even receiving the messages to reply back. Our logs just had these error messages.
We use the shared event bus as of now not the cluster event bus. Are there any limits to how many messages the eventbus can handle?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2922
NullPointerException on Clustered EventBus · Issue #2922 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2926
routingContext.request().resume() ends current request · Issue #2926 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
When using routingContext.request().pause() and routingContext.request().resume() I'm getting "Request has already been read" exception. When using vert.x 3.5 it is working fine.
Steps to reproduce
Here is my AuthHandler which is the first hander in my Router. It checks if there is a valid session and if yes it calls routingContext.next() to continue to the next handlers
When using vert.x 3.5 it works fine but in vert.x 3.7 in my next handler I'm getting "Request has already been read" exception.
Here is the implementation of resume method of HttpServerRequestImpl in vert.x 3.5
and here is the implementation of resume method of HttpServerRequestImpl in vert.x 3.7
In my case !pending.resume() is returning true so then doEnd() is called.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2927
FutureImpl's confusing inheritance · Issue #2927 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As I was looking at all your Implementation classes I found a very confusing class decleration statement. FutureImpl implements Future and Handler.
But why is that? I think thats very confusing because Future already implements Handler so thats redundant in the FutureImpl class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2930
ConnectionPool should evict unused connection as a progress task · Issue #2930 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the ConnectionPool does evict unused connections when connections are recycled. When a waiter recycles a connection immediately, the connections will be put back in the pool because there might still be waiters and the pool will contain extra unused connections. Also idle connections will be expired synchronously by closeIdle.
Unused / idle connection eviction should also be a progress task, so when there are no more waiters, the pool will evict those. Closing idle connections will now be a pool progress.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2932
message by message · Issue #2932 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
how can i get the message chain ,i want to know the pre message info (headers).
first i want add outInterceptor (EventBusImpl.addOutboundInterceptor) so it can run by handler,but i find the OutboundDeliveryContext.replierMessage is private  .in the handler ,i can't get the replierMessage.
second i find the EventBusImpl.sendReply has the input param(replierMessage) but not used.
what can it do to get the replierMessage.headers  ,i will logger the  message invoked chain
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2933
MessageProducerImpl runs out of credits when using send() in publish-mode · Issue #2933 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The MessageProducerImpl uses a credit-system to not overfeed the receiver. The credits get added back by a receiver via the credit-address.
But this mechanism is only active in send=true mode. In publish mode the credits still get subtracted and checked - but never refilled. So as soon as the producer runs out of credits, its send() method stops working altogether.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2934
HttpServerOptions.setCompressionSupported(true) breaks h2c upgrade · Issue #2934 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2935
Performance issues with vert.x · Issue #2935 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We are running a simple hello world application and we are seeing a lot of time being taken in processing of the request with just 40-50 users.
Machine Configuration: 4 core cpu 1.90 Ghz
Source code which we are testing:
Here are the jmeter results:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2936
HttpClient does not fire HttpClientRequest exception handler after receiving a 100 continue response · Issue #2936 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClientRequest exception handler is not fired when a response sent with a 100 response code and the actual response has not been received yet.
The failure delivery should check that the response is null or the response has a 100 continue status code. When the actual response will be received, it will override the initial response that was received.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2937
io.vertx.core.http.HttpClientResponse#headers returning invalid header (:status) · Issue #2937 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Returned map contains the key ':Status' with the value HTTP response status code i.e. 200.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2938
[Scala API] Handlers cannot be unset · Issue #2938 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
response.handler(null)  will not work as intended (to release the reference) because scala api will wrap it with a new function
As a work around one must cast it to the Java class
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2939
What distributed transaction support is provided by vertx · Issue #2939 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to use vert.x to create a project about a distributed transaction business.
What distributed transaction support is provided by vert.x?
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2940
[Expose EpollTcpInfo in Requests · Issue #2940 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2941
Do not expose HTTP/2 pseudo headers in header maps · Issue #2941 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2942
Shutdown Vert.x Java process with high CPU uses · Issue #2942 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am running vert.x on linux machine with configuration:
I had tried to deploy two vert.x services. One vert.x ran perfectly fine, but when I ran second one, it will automatically terminates due to high CPU uses. I expect that process should be slow instead of terminating out. Is there anything I can do here?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2943
Vertx hangs instead of closing while using Micrometer · Issue #2943 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to use Vertx + Micrometer and I see that that when I want to call vertx#close the application doesn't exit and some threads from the Micrometer class stay there forever.
However when I run the both standalone (either Vertx or Micrometer), everything is fine. So this issue only happens when I try to use both at the same time.
Here's a screen shot of what I see when I try to close the vertx instance, but it hangs.
Below you can find a link to the repository capable of reproducing the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2944
vertx  java.lang.IllegalStateException: Response is closed · Issue #2944 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't know where catch this Exception,EveryWhere like 'response.end()'  i have added 'if (response.closed()||response.ended())'
The version of Vertx  is 3.7.0
Do anybody know how to fix this issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2945
WriteStream asynchronous write/end versions · Issue #2945 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The WriteStream interface defines write and end methods with a  fire and forget semantic that won't provide any kind of completion feedback when they are called.
These methods should be overloaded with an asynchronous version that will report the success of the failure of the operation, which shall be used when the feedback of the completion and/or the success/failure matters.
The WriteStream#write(T) and Writestream#end() operation shall not anymore report failures and should retain the fire and forget semantic instead. This means that the implementations for HttpServerResponse will not anymore throw an IllegalStateException when the response is closed, only the asynchronous version will do.
A few existing sub-interfaces of WriteStream provide already such methods such as AsyncFile or NetSocket. A similar efforts have been already attempted previously for the end operation: #2123
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2947
Ambiguous Exception on Timeouts · Issue #2947 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is on 3.7.1 BUILD-SNAPSHOT
If configuring the HttpClient like so.
There is no TimeoutException.  The exception used is io.vertx.core.VertxException: Connection was closed
Is there anyway to determine if the connection was closed by the client itself (as a result of the timeout) or if it was terminated by the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2948
ServerWebSocket handler should not ignore exception · Issue #2948 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
here is reproduce code:
while I am debugging source code, found that InboundBuffer<Buffer> pending in WebSocketImplBase doesn't setup exceptionHandler.
so I think this is a bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2949
HttpClient shall forbid chunked transfer requests when it might use http2 · Issue #2949 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given an application doesn't know in advance whether a server supports http2 and allows the HttpClient to upgrade the connection to h2c in terms of:
the connection might not be upgraded, then either content-length or chunked transfer would be ok
the connection might be upgraded, then either content-length or none of both would be ok, but chunked transfer must not be used (against http2 spec)
In summary, content-length is required to allow for both situations.
This in turn means it's illegal to enable chunked transfer along with supporting any http2 protocol (upgrade, prior knowledge or ALPN).
Right now the client would upgrade the connection after having sent the chunked transfer header (and then maybe even http1 chunks?) which is against http2 spec. The upgrade handshake (AFAIK) specifies the initial http1 request is to be considered the first http2 request on stream id 1. So the initial http1 request must not contain chunked transfer.
This behaviour breaks (upgraded) requests to e.g. a http2 enabled spring boot web service although a http2 enabled vert.x server is fine with it.
Verified with vertx 3.6.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2950
Performance issues with vert.x using apache bench · Issue #2950 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Disclaimer: It's more of an observation that we are seeing. May be we are doing something incorrectly
When running the test using apache bench for a vert.x application, we are seeing that the response time increased as we increase the number of concurrent users.
Also when the test is running, if we hit the API from another console, we see that the response time increases for that as well.
We have used the following code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2952
Properties for HttpMethod · Issue #2952 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For vert-x3/vertx-web#460, I need to know if a HttpMethod is safe (leads to a read-only operation: GET, HEAD, OPTIONS), idempotent (does not have any side-effect: all safe one plus PUT and DELETE) or migh have a body(POST, PUT, DELETE, TRACE, CONNECT, PATCH).
Although, I could add an utility on vertx-web, it would be more appropriate to add these properties together with HttpMethod.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2954
Provide HttpClient asynchronous WebSocket connect methods · Issue #2954 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient provides WebSocket connect methods that will not follow the asynchronous method pattern (i.e uses a Handler<AsyncResult<WebSocket>>).
We need to provide such methods to improve the usability of WebSocket client connect use case as well as prepare the migration for Vert.x 4 with future style methods.
Such methods are named webSocket(...).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2955
Deprecate irrelevant HttpClient WebSocket connect methods · Issue #2955 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient expose incorrect WebSocket connection methods. We need to deprecate these methods in favor of the HttpClient#webSocket(...) methods.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2956
Introduce WebSocketConnectOptions · Issue #2956 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In order to keep the HttpClient#webSocket(...) method overloading reasonable we introduce a WebSocketConnectOptions that extends RequestOptions with:
the version as the WebsocketVersion enum
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2957
Add headers to RequestOptions  · Issue #2957 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We add an header MultiMap to the RequestOptions allowing to create HttpClientRequest or WebSocket using the corresponding options overloading and be able to specify HTTP headers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2958
Couchbase SDK with Vert.x and Netty server issues · Issue #2958 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am suspecting and do not have sample application to create the issue that there is an issue while using couchbase SDK with vert.x and some dependency injection(like spring-boot-autoconfigure, guice).
If the couchbase SDK connects to cluster before the vert.x httpserver creation, the SDK starts a netty server and the same netty server is getting used while vert.x create the new HttpServer.
The reason I am suspecting that is because when I use reactive extensions with vert.x, I see cb-io threads being used for the processing of normal rxjava code. If the vert.x http server would have started, I would have seen the io- pool for processing of rxjava code.
Also I am seeing this at the start of the code which is making me suspect that this being the cause.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2959
Why Vert.x json renames my object properties? · Issue #2959 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a data class like the following
When I'm trying to serialize it using io.vertx.core.json.Json.encode(user), I expect the result to be
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2960
Misleading function name · Issue #2960 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had trouble setting up a basic authentication example and discovered by debugging that calling routingContext.request().setExpectMultipart(true); was the point of failure. I noticed that my call had no effect because the request wasn't using a valid multipart content type. I find it misleading to have a setter-like function which does not behave at all like a setter and, even worse, fails silently (see all the if with no matching else):
I suggest modifying the code so that if expect is true but setting the value can not be carried out, a runtime exception is thrown to warn the developer that the code is not behaving as expected. Alternatively, please at least include proper documentation that explains why this call may fail.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2962
NetSocket upgrade to SSL asynchrony fix · Issue #2962 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the NetSocket#upgradeToSsl method uses an Handler<Void> completion. The only way to determine whether the upgrade fails is to set an exception handler on the socket which will replace the current handler and complicate the code.
This method should instead use an Handler<AsyncResult<Void>>.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2963
Cannot close file if one of the write operations fails · Issue #2963 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I test thing with vert.x and I discover that :
If file transfer start , create file & fill it.
If disk size becomes full.
BodyHandler does not trigger an Http response.
The guilty seems to be the wich call close on the file but because it remains byte to write, closed is defered & never called, callback never called.
because close will defer to :
and the because of writesOutstanding != 0 (some byte left because we cannot write the all things), close is defered and never called because the completion handler which is the only part who called the defered method is always in failure (no space on disk) :
Reproducer :
I have create a tempory partition on an unbuntu desktop (sudo mount -t tmpfs -o size=90M tmpfs /media/testUpload/) and try to download a file greater that 90Mo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2967
RecordParser delimited parsing does not read the last file line · Issue #2967 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2968
Compilation failure: both interface io.vertx.core.Vertx in io.vertx.core and class io.vertx.reactivex.core.Vertx in io.vertx.reactivex.core match · Issue #2968 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
When doing mvn package it gives this error:
Can you please help with the issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2971
javax.net.ssl.SSLException: Received fatal alert: certificate_unknown · Issue #2971 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to Create an Https server on localhost and i have a client which uses SockJS and connects to the event bus via a url https. I have a self signed certificate and the server.cert and server.key files are in the resources of my project.
Server Code
And i'm using Vertx eventbus js https to connect the server to the client. The client runs on an azure blob url and has a host like https
When i send a message from the vertx module to the client i get the following error
Am i doing something wrong,
I am running this on Mac OSX El Capitan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2972
The values in some methods of JsonArray/JsonObject are not converted to json types. · Issue #2972 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
some method like :
it conver the value to JsonArray if it's a List, conver to JsonObject if it's a map.
but some other method didn't conver.eg:forEach, stream,spliterator. So should we implements these methods
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2973
Inbound buffer silently ignores an exception · Issue #2973 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey,
I have been playing with a simple TCP server, and it seems like exceptions thrown in socket::handler are silently ignored. None of the below exception handlers are passed to InboundBuffer as a result an exception neither being caught or logged:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2977
socket IO read/write issue · Issue #2977 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Close the socket buffer write when reading a socket in the connetionBase class.
Why is this design?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2981
Vertx http request queuing · Issue #2981 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We have taken the vert.x hello world application and run that as a standalone application
When we run the load test with a single user, we get the following response:
As you can see from the test, as we increase the load on the application, the response time increases exponentially.
Are the request getting queued up ?
When we used LoggerHandler, we can see the response time on the server is 0-3 ms. So where is the additional time going?
The similar results were seen when we ran it in a docker container with 1 core CPU and 4GB of RAM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2982
HTTP Client - Deadlock · Issue #2982 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes, it appears that some eventloops are blocked while doing some http client relative stuff (Vert.x 3.7.0)
Here is a threaddump:
I'm trying to provide a simple reproducer but it seems that the deadlock is pretty hard to reproduce.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2984
Curator Framework Upgrade · Issue #2984 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Is there any plan to upgrade apache curator framework to the latest version. It seems we are using a very old version -
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2985
BUILDING.md needs some tweaks · Issue #2985 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When attempting to build vert.x out of the box, I get:
The BUILDING.md file says you need JDK 1.8+ (not 1.8 exactly). Also, it does not tell you how to build a snapshot from git master. How do I fix the above issues?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2989
EventBus request method for request-response pattern · Issue #2989 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the EventBus overloads the send method to implement one-way messaging and request-response messaging (using a reply handler). Although both methods share a lot they have a different semantic. This will cause an issue in Vert.x 4 asynchronous model based on futures: the future form of request-response pattern will have the same name than the one-way pattern.
We introduce a new method request for the request-response pattern that will always specify a reply handler.
The send methods having a reply handler are deprecated and shall be removed in Vert.x 4.
Likewise, the Message reply methods having an handler are deprecated in favour of replyAndRequest method that will carry on the conversation between the two points:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2991
Spring Async + Vert.x issue - Vert.x thread / Netty eventloop blocked (may be a bug) · Issue #2991 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
When an async spring task is getting executed, vertx/netty threads are blocked.
To see the issue in action:
Result: The https will keep on processing and will not complete with status code 200 until we move forward the breakpoint.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2992
Vert.x have few RPS at slow Flowable · Issue #2992 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm currently developing a framework comparison. Among other things I have vert.x with me. However, I have a problem, which I do not understand, respectively can solve.
If I set the duration of an observable to about 100ms, I get only 8 requests per second with vert.x. I have 145 rps with Helidon or Quarks.
If the response time is not reduced, vert.x also reacts to about 150 rps.
the code can be found here:
does anyone have an idea what I'm doing wrong? or is vert.x just slower with such requests?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2993
NPE when calling JsonArray#copy() in case of a `null` list · Issue #2993 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Assuming the following code:
I am not sure of the correct fix is to allow that, or throw the NPE when calling the constructor. But throwing the NPE in the copy method seems wrong to me.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2995
Provide a compability with clickhouse ODBC · Issue #2995 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, Our company wants to use a driver for clickhouse with vertx. And we want to use ODBC driver for it. But vertx doesn't have a support of this driver. We want to develop lib and add such support. What are the requirements to take this library to vertx in future?  And what do you think about this? Maybe we shouldn't do this and use another way.
Thank you for help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2996
SSL handshake: Decouple from event loop · Issue #2996 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In our application, we have used LoggerHandler (https) and we see that the time reported by it for the health URL is 0-2 msec. But when we run the test using jmeter, we see that it is taking much longer for end to end processing. We are running the application in docker container with 1 core CPU and 4 GB of RAM.
I am suspecting it is due to handshake taking time as the LoggerHandler is the last in the chain before the response is written out.
How can we move the SSL handshake to a different executor or dedicated eventloop for SSL handshake so that other eventloops doesn't participate in SSL handshake ?
If needed I can share a reproducer with jmeter job.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2997
SSL and chunkedWriter · Issue #2997 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Why is the chunkedwriter made as default when SSL is enabled ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2998
Vert.x Core futurisation · Issue #2998 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x 4 will provide a future based asynchronous model while retaining compatibility with Vert.x 3.x callback model. Each callback method will have a corresponding future version, e.g:
Future<NetSocket> future = client.connect(addr);
This issues records the futurisation of Vert.x Core and the update of the stack. Note that this issue is a subset of the entire effort.
HttpClient
HttpClient is a special case because it is low level and gives great control over the request/response and most methods cannot use directly the Future<T>.
Most request/response methods have already been updated to use an Handler<AsyncResult<HttpClientResponse>> async type instead of Handler<HttpClientResponse> in Vert.x 3.x.
The RxVersion will generate a Single<HttpClientResponse> rxGetNow(RequestOptions options).
Request methods returning an HttpClientRequest
These methods cannot simultaneously return an HttpClientRequest and a Future<HttpClientResponse>. The current choice is to make HttpClientRequest extends Future<HttpClientResponse>. HttpClientRequest already has an handler method allowing to set the handler after the request is created, this method is replaced by Future#setHandler(Handler<AsyncResult<HttpClientResponse>) instead.
For RxJava such methods are not translated to rx pretty much like before because they all return an HttpClientResponse.
Body handler
We might provide more *Now methods in HttpClient that would use a ReadStream<Buffer> as argument, e.g void put(int port, String host, String path, ReadStream<Buffer> body, Handler<AsyncResult<HttpClientResponse>> handler)
Same for HttpServerRequest.
The futurization of WriteStream raises a couple of challenges due to the interface fluent design
The write(T) method is fluent and therefore its return type cannot be changed to a Future type without a breaking change, the possible solutions are:
change write(T) return type to Future<T>, in fact the write method behaves as an fire and forget method as it will never report a write error directly (only through the exception handler of the stream)
add a version of write(T) method with that returns a Future<T>, akin to writeWithFuture(T) (find a better name) . That might be odd with existing overload of write such as AsyncFile or HttpServerResponse
In addition there are other current issues with WriteStream<T>
tream is not usable anymore it should raise an exception which can be inconvenient for usability purpose (in HttpServerResponse when the stream has been reset by the client).
the pipe feature added in Vert.x 3.7 can perform a callback when the operation completes after the WriteStream has ended but cannot guarantee that the end operation is finished (from the application perspective).
Therefore here is the proposal:
This will be a breaking change but it seems to be the right trade-off.
FileSystem
No particular issue with this.
AsyncFile
No particular issue with this.
Execute blocking
No particular issue with this.
The request and requestAndReply methods will have a version that returns a Future<Message<T>>.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3001
Validate content at JsonObject and JsonArray instantiation · Issue #3001 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently JsonObject and JsonArray do not validate the argument of their constructors leading to the creation a invalid objects, e.g new JsonObject("null"), new JsonObject((String)null), new JsonObject("1234").
We should validate this at creation time, in addition we also improve documentation to tell people to use Json#decodeValue method instead of constructor when they are unsure of the json value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3002
DeploymentManager::classloaders are not being closed when doing vertx.close() · Issue #3002 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While running tests in my projects, I start a Vertx instance BeforeEach and deploy the relevant verticles that i want to test with isolation group and extra-classpath (we use that to create a plugin-like system with isolated classpaths) and close the vertx instance AfterEach.
Some of the tests fetch a plugin (shaded vertx jar with a main-verticle), place it in a folder, and load it dynamically with an isolation group and extra-classpath. After calling vertx.close() I tried to remove the temp jar file but it was used by the jvm and could not be deleted.
After debugging it, I found that the reason it is being held by the JVM is that inside VertxImpl there is DeploymentManager that has Map<String, ClassLoader> classloaders and it does not close the URLClassLoader instances when calling vertx.close().
To test my assumption, i did some ugly reflection work to check it:
After using my new vertx.closeAllAwait() the jar could be removed as the classloaders created by vertx were closed.
I wonder if it is not closing the classloaders by design and if it is possible to close them when vertx is closing, or maybe add a boolean flag and close them when the user want to.
EDIT: it is a bit inconsistent, sometimes the classloaders list is empty but the JVM still hold the file, but i still wonder if some other resources in vertx are not being released.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3003
HttpClient doesn't handle 307 HTTP redirect · Issue #3003 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using Vert.x for HTTP POST/PUT client requests, some of which receive a 307 redirection response from the server. These requests fail to redirect as described in the RFC and the original POST/PUT payload is not cached for redirection. RFC description of the behaviour is here: https:
I found the change made to the HttpClientRequestImpl class that specifically removes payload caching, #2305. The change appears to have been based on an outdated RFC and the 307 behaviour is quite different.
I will attempt to create a pull request for a possible fix and submit it. I believe that caching of the original payload body should be optionally defined by the user agent, caching all payloads could place a high resource load.
I have attempted workarounds but at the moment I can't see a possibility of using the Vert.x build in redirectHandler method to proceed with 307 responses. Instead in my current dev project I plan to handle 307 responses manually by optionally caching the payload and making a brand new HTTP request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3004
Deprecate MessageProducer send methods · Issue #3004 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The MessageProducer interface declares two send methods, such methods should be deprecated. MessageProducer#write(T) should be used instead of MessageProducer#send(T), EventBus#request(String,Object,Handler) should be used instead of MessageProducer#send(T,Handler).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3005
Remove MessageProducer send methods · Issue #3005 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Such methods are deprecated in 3.8 and needs to be removed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3007
MessageProducer.close throws NullPointerException · Issue #3007 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of MessageProducer.close() calls close(null), which results in a NullPointerException trying to call the handler.
This simple example demonstrates the problem:
Also, since end() also just calls close(), it also throws a NullPointerException.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3008
JVM Fatal Exceptions silently ignored in vertx-rx · Issue #3008 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JVM Fatal Exceptions can be silently ignored in vertx-rx. This results in errors such as OutOfMemoryError to not be logged or output anywhere.
The problem lies in the catch(Throwable ignore) blocks in some rx classes.
I've found them in io.vertx.reactivex.impl.AsyncResultMaybe (e.g. on line 53) and io.vertx.reactivex.impl.AsyncResultCompletable. There may be others too.
The catch blocks in AsyncResultSingle attempt to log the error rather than ignore it. However a better solution for all classes that deal with uncaught exceptions might be to call RxJavaPlugin.onError() as below...
catch( Throwable err ) { RxJavaPlugins.onError(err); }
which would allow users to define their own error handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3009
ContextImpl can silently ignore Exceptions · Issue #3009 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The test class at the end of this comment doesn't report the fatal StackOverflowError at all - it just silently swallows it.  If the call to make RxJava use the vertx scheduler is skipped - i.e. line 23 is commented out - then the exception is reported on the console.
The output from the code using vertx schedulers is...
and using the RxSchedulers (i.e. with L23 commented out) it's...
The problem appears to be in io.vertx.core.impl.ContextImpl. (Hence raised here and not on the rx repo).
At lines 273-275, in method executeBlocking(Handler<Future<T>>, Handler<AsyncResult<T>>, Executor, TaskQueue, PoolMetrics) there is the following
However, if the Handler<AsyncResult<T>> resultHandler supplied to the method is null, as is the case in the test code below,  then as far as I can tell there is nothing listening to the response of the Future res variable. See lines 283-285...
I think the fix is that the catch block at line 273 should call reportException(e) if resultHandler is null.
This is the output with the change suggested above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3010
setTimer() from worker thread · Issue #3010 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to run this test several times.
Somethimes (but not every case) the very first (and only very first) execution fails:
Starting test: Khmmm#sometimesFails
It havens when I do this in verticle context or in test context.
It never happens if setTimer() executes from eventloop. What am I doing wrong?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3011
Allow arbitrary payload on HttpServerRequest object · Issue #3011 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes it can be useful to attach an object to an HttpServerRequest that has the same lifecycle than the request without having the specific need to maintain a Map<HttpServerRequest, Object> for such tracking. We should add an internal get/set (HttpServerRequestInternal) for this case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3012
Lazy load JDK default cipher suite · Issue #3012 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I work on a constraint device and start a webserver seems quite long.
I check some value and :
I got some stack trace that seems to indicate that event loop block at some point but they are not the same from one launch to another :
Does this value seems reasonnable or something is realy blocking the event loop ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3013
Jackson mapper instances are public and should be not exposed · Issue #3013 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.vertx.core.json.Json#mapper and io.vertx.core.json.Json#prettyMapper are public and static.
In the runtime environment any code that has access to the Json class can manipulate the mapper globally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3014
HttpClient improvements · Issue #3014 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A bunch of improvements aiming at simplifying the code and remove existing potential deadlocks when client is used elsewhere than the event loop
move the 100 continue handling in the stream management instead of HttpClientRequest implementation
request timeout is now fully handled by resetting the request
resetting a request will always call the request / response exception handlers
remove usage of end sentinel in HTTP 1 streams and instead use the trailers map
stream reset now takes an exception as argument instead of a code
stream reset exception does not anymore capture the stack trace
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3017
Isolation group classloader cleanup · Issue #3017 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the deployment manager will create classloader when isolation group is required. When all verticles using an isolation group are undeployed or when the vertx instance is closed these classloaders should be closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3020
Expose WebSocket closed status · Issue #3020 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The WebSocketBase interface could expose its closed boolean status.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3021
Thread blocked for long time · Issue #3021 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
What is the issue is related too? And what is the possible way to solve it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3023
Vert.x can use event loop with vanilla Netty threads · Issue #3023 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently Vert.x mandates that EventLoop threads are instance of VertxThread. It is possible to have Vert.x uses vanilla EventLoop threads by using FastThreadLocal instances to store the current dispatch local information such as the current context and the blocked thread checker statistics.
This allows Vert.x instance to be created with existing EventLoopGroup and embed it in an existing runtime that provides the Netty resources.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3024
HttpClient redirection can use any HttpClientRequest · Issue #3024 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient will cast the HttpClientRequest returned by the redirect handler down to HttpClientRequestImpl. If we avoid this cast it gives flexibility for redirect implementors to provide a proxy of the request to implement things such as body caching in some specific cases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3027
WorkerContext.wrapTask() bug? · Issue #3027 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
metrics.begin(metric)  return usage.time() but it do not stop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3028
[Worker pool - ExecuteBlocking] Queing delay too high · Issue #3028 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
During some load testing on our architecture based on VertX I found some issues concerning the use of ExecuteBlocking. I don't know yet if it comes from our way of doing or if something weird is going on.
1. Context
We are calling an endpoint that is in charge of execute some I/O (a rest call to a third party). For that we are executing that I/O in a executeBlocking() method (using vertx.executeBlocking() with ordered = false).
Unfortunately, we can't use the Vertx webclient for that purpose
2. Configuration
We are using 4 event loops (fix to 4 as we have only 2 CPU on our hardware) and a worker pool size of 100 using 4 verticles.
The I/O blocking process is executed in a average of 200ms.
The load test is using JMeter (on the same local machine) using 1000 threads that will call this specific endpoint (using HTTP).
For the verticle deployment we are using a specific Verticle that is in charge of deploying the "business verticles" based on configuration via  vertx.deployVerticle. The business verticle to deploy is configured that way :
3. Where is the potential problem ?
The average response time of the call is around 2 seconds.
The delay is caused by the time to send the blocking task to the worker pool.
As we can see in the metrics most of the queue_delay is around 2 seconds.
As we can see the worker pool is busy but it seems that some threads are waiting sometimes (indicating that he seems not "over charged"). (we've tried adding more threads in the pool but it didn't change anything, more threads were waiting, that's all).
The event loops are not blocked (we don't have any warnings, and we've set the warning to 100ms).
We've set timers to correlate data for the queuing delay and we've noticed the same numbers (2 seconds delay for a process to be executed).
Here is a trace (from Jaeger) displaying the duration for one specific call during load testing :
We can see that the process inside the execute blocking is taking around 200ms but before that the process was doing nothing but waiting to be processed.
Questions :
Do we have missed a configuration ?
Is there something we're doing wrong ?
How can we explain that delay ?
Can we avoid the queuing delay in some way ?
This kind of contention is not happening with lower concurrency (like 100 threads)
We've tried to have one worker pool per verticle (so 4 worker pool) to avoid potential contention but it didn't change anything at first sight.
We can't have more than 2 CPU on our hardware
We are using Vertx 3.7.1
Thank you and don't hesitate to ask me anything that can help you investigate this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3029
Javadoc for Filesystem.mkdirs incorrect · Issue #3029 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Javadoc says that the operation will fail when the directory already exists.
This is incorrect. Internally Files.createDirectories is used, which does not fail when the directory already exists.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3030
Fix FileSystem#mkdirs javadoc · Issue #3030 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently FileSystem#mkdirs javadoc is incorrect. This actually only fail when there is a file already existing and not a directory. Under the hood the API uses Files#createDirectories method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3031
Worker pool metrics does not correctly pass the pool metrics handback objects · Issue #3031 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3034
The main class io.vertx.core.Launcher could not be found or loaded · Issue #3034 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx version=3.7.1
When I use cmd.exe to enter the command "vertx version", the console outputs 3.7.1,
but when I use git bash.exe to enter the same command, the console error
"The main class io.vertx.core.Launcher could not be found or loaded"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3037
Add new static method to create Future<T> objects that is compatible with "var" declarations · Issue #3037 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the moment, the only way to create a typed Future<T> is to have an explicitly-typed declaration of the variable, namely:
If you attempt to use the Java 10 var keyword, the result is a value of type Future<Object>.
It would therefore be useful to add a new static method to Future (or Promise in 3.8), similar to the following:
Using this new method allows for the following code, where the inferred type is now Future<Void>:
The impact of this change seems minimal, given that it is really just a compile-time type checking fix.
Regards,
Deryck Brown
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3038
HttpClient doesn't handle 308 redirect · Issue #3038 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a reason?
Seems like it's supposed to be handled like a 301.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3039
Support for Dart · Issue #3039 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm Dart developer and i would like to work on something to create an implementation of Vertx pro Dart.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3040
How does vert.x connect with dns server · Issue #3040 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I find  some random udp port(0.0.0.0：）in my program,which is for dns resolve.obviously it listens at any address so it's not safe,so I wonder how can I bind the this port to specified ip address.thanks a lot
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3041
jdbc.subscribeOn(scheduler) is executed on event loop thread · Issue #3041 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was expecting the following SQL statement to be executed on the worker thread. However, according to logs it is executed on event loop thread. Tried 3.8.0 today, no difference. Here is the code and output:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3042
Using multiple classloaders with FileResolver can cause caching issues · Issue #3042 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue
The fileresolver will currently locate and unpack resources using the currently active classloader. The found resource will be extracted and placed in a cache directory. This mechanism is however not taking into account that the classloader can resolve different resources for the same given fileName/path. The fileresolver will currently return the wrong content once the resource has been cached once.
Mitigation
I suggest to prepend a id,key that is classloader specific to the cache directory so that the cache is working correctly when using multiple classloaders. I'm not yet sure what id to use since ideally the cache should survive a restart of the JVM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3044
Port-Blacklist for "inner-communication-Threads" · Issue #3044 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
i am working on a NetServer-Project on a Windows 2016-Server. Looking at the Screenshot (ProcessExplorer), you will see, that the process which has a single Vertx-Instance with one NetServer listening on one Port (35000), opens alot of "random" Ports which communicate "zick-zack"-wise. I quess it is for inner-Thread-Communication in vertx(?).
The problem i have is, that in our System, we have some ports, which are used fix by other third-party-services and are blocked by vertx sometimes. Is it possible to have a blacklist or something like that, which is used for port allocation?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3045
Is it okay to share the Vert.X EventLoop with the AWS SDK? · Issue #3045 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys.
I've been recently migrating one service from Undertow to Vert.x and the experience so far have been great. We make massive usage of AWS SDK 2 and as both uses Netty under the hood, and Netty event loop can handle hundreds of millions of requests, I was wondering if is it okay to share Vert.x's Netty EventLoop with AWS SDK 2's NettyNioHttpAsyncClient?
Below you can find a copy of what we did on your configuration.
Here are versions we've been using on our Kotlin (on OpenJDK 11) project:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3047
Make available on WebSocketBase the close status code and reason · Issue #3047 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently one can be aware of the close status code and reason received by a WebSocket by setting a frame handler and catching the close frame. We can also retain such info on the WebSocket and expose them as accessors so they can be retrieved easily.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3050
HttpServer cookie support · Issue #3050 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently cookie support is provided by Vert.x Web using the cookie handler. This feature is quite simple and could be directly in Vert.x Core.
Cookies can be queried on HttpServerRequest and managed on HttpServerResponse (like adding / removing)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3051
Test failures on Ubuntu 16.04 on X86 architecture · Issue #3051 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to build Eclipse Vert.x package master branch on Ubuntu 16.04 platform on X86 architecture. I could build the package but I am getting around 8 test case failures.
These are the steps that I followed -
I am currently trying to look at the logs to investigate the failures, however any pointers on any additional dependencies / configuration required for these, which I may be missing would be of great help.
Appreciate your help in advance.
Below are the test cases which are failing. Please let me if I should share more specific details.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3052
allow naming the thread pool threads vertx uses · Issue #3052 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
this is useful when running multiple vertx instances in the same JVM
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3053
Calling unregister on an event bus handler causes an NullPointerException in the metrics code · Issue #3053 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The metrics options:
This is a sometimes-issue.
My work around at the moment is to disable metrics since I really need this consumer to close.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3054
MessageConsumer should unregister only once · Issue #3054 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the MessageConsumer will call the metrics SPI when the consumer is already unregistered. While the consumer state is fine with this, the metrics SPI should not be called more than necessary as it can corrupt the metrics state.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3055
Documentation promotes use of deprecated method getNow · Issue #3055 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The core documentation on how to make requests says to use xxxNow to make request from a client, but those methods are deprecated, e.g., getNow.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3056
Future.future(Handler<Promise<T>> handler) not handle exception. · Issue #3056 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I see that issue #1568.
Why don't make the Future fail when the handler throws an Exception?
Should I create a pr resolve that?
Code: Here!
Expanded, should I make all Future auto fail when Future.handler throws an Exception ?
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3058
HttpServer#close does not disconnect established connections · Issue #3058 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have just upgraded Gentics Mesh from Vert.x 3.7.1 to 3.8.0 and only a single test in our testsuite is failing. The test simulates a server crash by first establishing a websocket connection and stopping the used HttpServer. Previously an error was thrown since the connection was severed. The client would now reconnect. This is no longer the case. With Vert.x 3.8.0 the connection is not severed and I can see in Wireshark that the continuously send text frames are accepted with an ACK.
I use HttpServer#close with an handler so I'm sure the server should be stopped. The failure handler is not invoked.
I can try to create a reproducer if needed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3059
“Unexpected exception in route” with POST using Content-Type:application/x-www-form-urlencoded (Content-Type:application/json working fine) · Issue #3059 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm creating a post request that can except "Content-Type:application/x-www-form-urlencoded" using "vert.x". And getting "Unexpected exception in route java.lang.NullPointerException" but the same request works fine when I remove the content type.
I am using vert.x 3.3.3 and trying to create a route with verticles.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3060
ClusteredEventBus should throw an exception if an outbound connection is actually back to its own server · Issue #3060 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue occurs when the event bus port is the same for two clustered Vertx instances on the same machine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3061
3.7.1 version still  "java.lang.IllegalStateException: Response is closed" · Issue #3061 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
issue #2944  is written that it will be handled in version vertx 3.7.1 but still have this case.
May be we should check response isClosed() or catch the exception and swallow it. Or is there any suggestions ?
What was the improvement for this case in version 3.7.1 ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3062
vertx PumpImpl has one problem · Issue #3062 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx version
Issue
I use ServiceComb to upload muletipe files(upload one file has no this problem), but have some problem. Sometimes success, sometime fail. Below is the log
then i add some log to check where this problem, finally i find the PumpImpl object  is different at same file upload.
Problem
writeStream.writeQueueFull() return false, the writeStream's drainHandler is the last one, so upload the second file maybe check the first inputstream's status, then throw an IOException
I don't understand why the drainHandler shuold be setted only when writeQueueFull? i move the
But I am still worried about some other problems @vietj , can you help me to  look this problem, Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3063
Pipe should use the write stream acknowledged end when a result handler is expected · Issue #3063 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when a pipe receives a ReadStream#endHandler end event it will end the WriteStream and call the pipe operation result handler immediately. Instead it should use the acknowledged end and propagate the result to the result handler so it can be aware when the write is completed or when it failed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3064
HttpServerResponse operation should not fail synchronously when the stream is is closed · Issue #3064 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We already have made some improvements here and for we should have the same behaviour for other related responses methods.
when the stream is ended (by the user) then it should fail synchronously because it is a programming mistake
when the stream is closed then it should not fail synchronously but should fail asynchronously. In Vert.x 4 the synchronous operation return a Future result that be failed in this case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3065
HttpServerResponse send file does not report a failure when the response is closed for HTTP/2 · Issue #3065 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the implementation of HttpServerResponse does not report an async failure on sendFile when the response is closed. The current implementation uses a virtual Netty channel however this channel's contract (AbstractChannel) has a synchronous failure model which does not fit the HTTP/2 response which has an asynchronous failure model. Consequently failures can't be reported properly through the pipeline.
Instead we should simply use an AsyncFile pipe operation on the HttpServerResponse because HTTP/2 cannot benefit from zero file copy transfer anyway.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3068
Consider Netty upgrade to resolve security vulnerability in HTTP/2 · Issue #3068 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For details of vulnerability see the following disclosure:
Netty is already released fixes as 4.1.39.Final. See:
AFAIK vertx-core needs to be updated in order to update vertx-web, right?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3069
run command should honour "-options" · Issue #3069 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx core manual for Java shows that run command takes in -options CLI option. However, if I were to provide that by running a jar, it does not consider the path to json file passed in as CLI option.
Also, neither RunCommand and BaseCommand has -options CLI option listed within them. It would be really helpful to honour the option, instead of having to specify everything as system properties prefixed with -Dvertx.options.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3070
Message exception handling in consumer · Issue #3070 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
About a month ago I opened a PR with a suggestion for better exception handling: #3035
I would like to raise it as an issue, as I am not sure if only opening a PR was the right thing to do to get attention for it.
I gave a good description in my PR but ill give a short description here as well.
Currently in vert.x, if an uncaught exception occurs in a consumer, it will be swallowed by vertx and the sender needs to wait for a timeout in order to know that something went wrong. The code in my PR give a suggestion to add another kind of exception handler that allows the user to configure default behavior in case of an uncaught exception. This way the sender will be notified about the problem as soon as it happens. It also allows to create global exception handling logic in a single centralized place.
I would also consider making it fail with 500 by default to make sure the consumer is safe and never blocks in case of unknown exceptions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3071
Recovering From Failure Faster? · Issue #3071 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the WebClient with Vert.x 3.7.1 to send around 2mm requests in batches of 5k spread over several nodes (backed by a queue). I am finding in most cases it takes only 1-2 seconds to send each batch, but occasionally I am receiving a "Stream reset: 2" message, which causes the entire batch to take over 60s to complete.
Out of 2mm sends, I only received this message 250 times, and I am ok with dropping those requests entirely. The issue is the time it takes to recover from a stream reset.
Is it possible to have requests fail faster, or to recover from STREAM_RST quicker?
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3072
How to unsecure the healthcheck endpoint after enabling the SSL property in the HTTP server options? · Issue #3072 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Greetings Everyone!
Use Case: We did the following SSL configuration as per the docs, however we need to disable this SSL check for a couple of routes (/healthcheck & /ping- make them non-secure) and have the SSL check only for 1 route (/seller). How do we accomplish this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3073
timeout is not working properly in multipart/form-data request · Issue #3073 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When we set the timeout in multipart/form-data request. It is not working properly. If we did not get the response in that given time, it is not throwing timeout error and stuck at that point and will never get the response.
If we did not get a response in 5sec, code is not throwing any error and never get any response/error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3074
NPE when undeploying several instances of the same verticle that share the same isolationGroup · Issue #3074 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Vert.x folks!
Vert.x 3.8.0 fails undeploying verticles when more than 1 instance were deployed with VertxMavenFactory.
This is because these instances share the same isolationGroup.
The issue seems to have been introduced in this commit: 38111ed
A NPE is thrown from here:
In the code above, icl is null after been cleaned when undeploying the first instance.
Here is a reproducer:
Thanks a lot for having a look at it :)
Best!
Hugo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3075
Async undeploy won't report exception by the verticle with promise complete · Issue #3075 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Considering this
The RuntimeException will attempt to fail the promise already completed and result into a failure in the deployment manager and losing the original exception.
Instead the deployment manager should try to fail the promise and when it can't fail it then it should report it to the undeploying context so the application can be aware of it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3076
JsonParser does not consume properly the stream demand · Issue #3076 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the JsonParser implementation does not consume properly the stream demand. It consumes for each Jackson JsonToken instead of the actual event emitted by the parser. Some tokens won't produce events such as the FIELD_NAME token. The consequence is that stream demand is lost by stream consumers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3077
http response endHandler not called on request with `connection: close` · Issue #3077 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After upstepping from vert.x version 3.6.2 to 3.7.1 we noticed that the endHandler for http 1.1 responses is not called anymore when the client asks for the connection to be closed with a connection: close header.
We can reproduce the issue with the following test in io.vertx.core.http.HttpTest:
A git bisect points to 645f6d4 by @vietj.
As this is a rather big change it is unclear to us where it is introduced exactly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3080
Proper handling of host names ending with a dot in client connections · Issue #3080 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently NetClient and HttpClient don't properly handle host names ending with a dot.
TLS peer host should be the un-dotted version instead of the provided name otherwise it results in unexpected handshake failures.
The hosts based resolution should use the un-dotted version when doing a lookup in the list to resolve correctly the name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3081
Support mapping in ReadStream · Issue #3081 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be very useful to provide a mapping method in ReadStreams (like pipeTo).
Idea and use case:
I think it could be implemented by default as a simple delegation in ReadStream (like pipe*).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3082
HTTP/1.1 connection state might be corrupted when processing pipelined requests · Issue #3082 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the server process HTTP/1.1 pipelined requests, the state might not be updated correctly when dequeuing a pipelined requests when the dequeued request is asynchronously processed. This code is not executed in real life applications (that won't use pipelining) but can be executed intensively in benchmarks. The corrupted state leads to an incorrect error handling when handling IO errors like a connection reset.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3084
Vert.x 4.0 ClusteredEventBus support HTTP/HTTP2 · Issue #3084 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 3.X only support transport in socket  (ConnectionHolder/NetSocket).
If it would also provide HTTP/HTTP2 as it transportation or have a mechanism (i.e, abstract/interface class) let us to write our own implementation.
Leverage  HTTP/HTTP2 work better in K8S or Proxy/Gateway integrated well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3085
hight response time for the first web request received after the server has no work load for a while · Issue #3085 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We working on a project using vert.x 3.8 and openapi3 contract and we have noticed that our server vert.x takes long time to answer a web request if the server has not received http requests for a while.
Do we have some option in vert.x to help us to make vert.x answer faster if the server has not received requests for a while
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3086
Unable to create new native thread · Issue #3086 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to manage 10k connections with a 100ms blocking code in a worker verticle.
Then I'm trying to create a worker pool with 10k size but It can't create 10k native threads.
Am I missing something? Am I doing it wrong? Is it possible to switch from worker verticle to Akka's Actors?
Thanks to advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3087
immutable Json in Vertx · Issue #3087 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For future releases, it could be great to be able to work with an immutable Json in Vertx, with a more declarative and functional API than the current. I think that performance would improve because no defensive copy of a Json would be needed before sending a message to the bus.
I propose to consider json-values as an alternative to the current Json object.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3093
java.lang.NoClassDefFoundError:: io/vertx/lang/rxjava/TypeArg · Issue #3093 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While updating from 3.5.4 to 3.8.1 i am getting
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3094
CompositeFuture.java, Future deprecation · Issue #3094 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
But CompositeFuture.java still makes heavy use of Futures.
To be more precise, I'm am trying to use microservices based on https: and it involves CompositeFuture
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3095
Vertx Graphql Preview Status warning - is it not production ready yet? · Issue #3095 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was thinking to use Graphql along with Vertx but then I saw above warning.
Vertx Graphql Tech Preview Status warning - when will it be stable or production ready?
Are there any major upgrade or drastically new api changes are coming?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3096
Promise: Shall we remove `succeededPromise` and `failedPromise`? · Issue #3096 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When return an immediate result, I will use Future.succeededFuture/failedFuture and find nowhere to use Promise.succeededPromise/failedPromise.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3097
Want a way to custom usage of SniHandler · Issue #3097 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I noticed that SniHandler accept a param of type AsyncMapping in public constructor. Any way to use it in SNI duration to get key&certs asynchronously?
My idea is to pass an custom AsyncMapping object in NetServerOptions so pipeline can use it, as alternative to inner class AsyncMappingAdapter, which did nothing about async. This AsyncMapping.map() may return a Promise immediately and try to load key&certs asynchronously.
This AsyncMapping may co-work with the KeyCertOption, to make sure SSLHelper.map will get the key&certs for sni name.
Or is there a way to change the channel pipeline from user code?
Sure this issue is related to let's encrypt certs, or likely usage.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3098
caller blocked in custom KeyCertOptions implement · Issue #3098 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version
KeyCertOptions mechanism used in SNI process.  if a long run process needed to load the new certs, such as asking for new key&certs from remote server, the caller will be blocked.
now(3.8.0) inner class SniHandler.AsnycMappingAdapter will call SslHelper.map to make the KeyCertOptions work. but it will bolck the caller untill KeyManager ruturns. so either KeyManager will blocked caller, or just fail current request. code of SniHandler:161-171 below:
it return a promise, but it actually is not async.
SniHandler is part of netty. it have another constructor to support async loading by SniHandler(AsyncMapping). The one used in vert.x NetServerImpl:209 or HttpServerChannelInitializer:102 is SniHandler(Mapping). so the issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3099
Vert.x should run base operations without requiring Jackson · Issue #3099 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In some scenario where Vert.x is embedded and used for base operation such as HTTP server and HTTP client, Jackson should not be required as long as there is no actual JSON operation such as encoding or decoding involved.
In this case, users can exclude Jackson from the classpath and have these operation still work fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3102
Vert.x should be able to run with another json parser/generator than Jackson · Issue #3102 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vert.x 4 we want to be able to run most Vert.x operation with another json parser/generator than Jackson with the following constraints:
jackson-core is still the default implementation present on the classpath, which means it needs to be excluded and users don't need to add it out of the box
jackson-databind is now an optional dependency on the classpath which means users need to explicitly add it to the classpath to benefit from json/object mapping facilities . Regular usage of json encoding/decoding now works with jackson-core out of the box.
the async JsonParser requires jackson-core because other json framework won't provide an implementation for it at the moment. So using the JsonParser with another implementation will likely result in a classloading error
there is a Service Provide interface for the JsonCodec that allows replacement of Jackson when it is provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3103
when sender  many msg before consumer register,after register consumer , send msg but bus dont work  · Issue #3103 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3104
HeadersEndHandler no longer include all headers · Issue #3104 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 3.6.3 it was possible to add a HeadersEndHandler that will work on the headers AFTER SessionHandler's set-cookie header has been added. This is needed to add SameSite=Lax and Max-Age to the header since the SessionHandler doesn't offer these attributes.
After 3.8.1 this doesn't work anymore because CookieHandler stopped being anything more than a next() call:
This can't be achieved by manipulating the cookie since custom attributes isn't an option.
In the end I hacked my way around it by making a ServerCookie wrapper:
I would like to again have the option to view and change headers AFTER every handler has already chipped in; including the SessionHandler.
Ideally I would also like to be able to add custom attributes to cookies.
Ideally times two I would like to be able to add custom attributes to SessionHandler so I don't have to fish out any cookie or header.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3105
Old session not removed from session-map on session-regeneration · Issue #3105 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there a reason why old sessions aren't removed on regeneration? The client shouldn't be using the old session id anymore at that point.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3106
Azure B2C requires a parameter for the ".well-known" discovery address · Issue #3106 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using AzureADAuth.discover to load the JWKs array.
Azure AD B2C requires the "profile" also as a query parameter like this:
Unfortunately the configuration "site"
will get appended with ".well-known/openid-configuration" unconditionally, therefore it is not possible to use OAuth2 discovery with Azure AD B2C.
As a hack, I've added "&x=" to the end of the above line, this way the added suffix is handled as a parameter and the service returns the right profile.
It would be good to either check for ".well-known" before appending the path or make it possible to append query parameters from the config.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3108
Deprecate Json elements referencing Jackson types · Issue #3108 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We deprecate and provide replacement for these elements of the Json API referencing directly Jackon's types.
These are available in Vert.x 4
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3109
SPI Factory cleanup · Issue #3109 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are a few factories in Vert.x SPI which are not really useful. We should remove them in Vert.x 4 as there is very little interest for them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3111
HttpServer process  proxy CONNECT method build absoluteURI strange result · Issue #3111 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpServerRequest's "absoluteURI()" method return result maybe incorrect when client call by proxy mode.
ie.
Client call URL is:
Server snippet code:
Client snippet code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3112
Update documentation eventBus.request missing deprecated · Issue #3112 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3113
Missing documentation on website for the "magical" usage of ReplyException in EventBus? · Issue #3113 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I cannot seem to find documentation about the magical usage of ReplyException.class for the event bus.  I came across it from looking at the ServiceProxy code.
This exception seems to be HUGELY important to sane usage of the event bus for what is considered a successful response from the event bus...
typically you would have to write:
I have found that this pattern COMPLETELY changes the way you build on the EB and the way data is moved around.
Why is this seemingly not documented on the mains docs as a pattern to follow?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3115
Attach a handler to HttpClientRequest without using a deprecated method ? · Issue #3115 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello !
I am setting up some test code using the HttpClient class. Here is what I came up with, following the documentation :
However i got an exception saying that i did not attached a handler to my request.  I used .Handler<HttpClientResponse> handler) to work around it, but it is a deprecated method.
What is the correct / recent way to do it ?
Also, the vertx.core manual suggest using the deprecated method and I did not find an up to date example here.
Thanks !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3116
null value header getting into request and validateHeaderValue throwing NullPointerException · Issue #3116 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a problem with a proxied request with additional headers which somehow allows a header with null value to get into the request and subsequently the validateHeaderValue will throw a nullpointerexception which is only handled in the vertx exception handler.
The proxy is mapping headers from clientRequest to the proxyRequest and adding an null header (our fault). Vertx will later trigger an exception.
I have been trying to reproduce this using a unit test in vertx-core, realizing that there are null guards that should prevent this from happing. In VertxHttpHeaders.set0(CharSequence name, CharSequence strVal) a null header value is normaly silently ignored and should prevent this from happening.
I have however not been able to get a null value into one MultiMap and then add all headers to another VertxHeaders to be able to reproduce the issue.
As a fix I would propose to cause the issue earlier, in the HttpUtils validateHeader method throwing a IllegalArgumentException as it is implemented now for illegal characters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3119
Websocket compression seems broken · Issue #3119 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the latest vertx milestone 4.0.0-milestone3 and it seems that websocket compression is not working.
ChannelRead of WebSocketServerExtensionHandler responsible for deciding whether to enable compression is not being called (I assume its because its added late to the netty pipeline)
Most probably this happened due to this commit 713c1a8 that moved initializeWebsocketExtensions inside HttpHandlers which is applied via executeFromIO (Hence my assumption that its added late to the pipeline)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3121
Issues with GraalVM and Alpine Linux · Issue #3121 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
I have a DNS issue with Vert.x in combination with GraalVM and Alpine Linux (works with Debian-9-slim)
The project branch can be found here:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3122
Cannot remove server cookies without getting cookie list first · Issue #3122 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
#3050 introduced a regression in cookie handling for the HttpServerResponseImpl#removeCookie() method. It is not using the HttpServerResponseImpl#cookies() accessor and therefore skips parsing of cookies.
The cookie map is then null and the method behaves as if the cookie is not found, failing silently by returning null.
The same bug is present in Http2ServerResponseImpl#removeCookie().
I'm working around it by first calling getCookie() to initialize the cookie map, then remove it.
As far as I can see the provided session handler might be affected, because it uses removeCookie.
I'd like to provide a PR to address this, but cannot give an ETA unfortunately due to time constraints 🤷‍♂️ .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3124
Deadlock in ASyncFileImpl/PipeImpl (using vertx-web-client and request.sendStream(asyncFile)) · Issue #3124 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Using vertx 3.8.1
Using something like (kotlin+coroutine) :
It happens that the call never return, but it's random (Never when I tried to extract a reproducer, almost always in the real context, of course).
To investigate, I've copied PipeImpl and ASyncFileImpl and added some trace. (Modified version in attached files with output)
It's seems like at some time, something has kept the monitor of ASyncFileImpl instance, preventing the resume call  to execute the method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3125
Using native transport and a UNIX domain socket with the HTTP server causes netty warnings · Issue #3125 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
When binding an HTTP server to a UNIX domain socket, Netty prints out warnings upon each connection as so:
This appears to be caused by one of the configure functions in EpollTransport, which always set the TCP_QUICKACK and TCP_CORK options, even on a UNIX domain socket.
This occurred with netty-transport-native-epoll version 4.1.39.Final (same version as vert.x imports) and with vert.x version 3.8.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3126
Clustered Lock is not released if more locks are requested than available worker threads · Issue #3126 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am facing this issue while migrating from vertx 3.5.4 to 3.7.x.
If I am requesting more locks than available workers, then lock is not released in vertx versions 3.6.x and 3.7.x. Please find the reproducer below:
Above same code works if I change vertx version to 3.5.4.
Also if I reduce numTestEvents in dataprovider(for above reproducer code) to a number less than 20 then also everything seems to be working.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3127
WebClient request not fail when connection reset · Issue #3127 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I send a get request use webClient. (Over socks5 proxy) before server response( It's a long poll.) I shutdown socks5. Console print a fatal error: 远程强制关闭连接( I'm using zh-cn locale, English means: Remote peer force reset connection)
But the callback not called. No more log on console ( I use log4j DEBUG level )
How to get the exception and retry the request?
Thank you.
(I am too tired to fix-up the issues format and syntax error. Sorry)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3128
Discard old messages · Issue #3128 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have written simple test. One verticle (reply) is service that process some complex jobs (modelled with simple Thread.sleep(10000) => 10 seconds). Other verticle (sender) sends 2 messages to be processed with 5 second timeout. So when reply verticle receives second message sender is not interested in response (because all timeouts gone) but those messages still come and we need to do "hard job" to process it.
How can we discard old messages (which have been timeouted on sender end)? So that message ping2 will not be processed.
If we look at code of message sender it creates HandlerRegistration and unregister it on timeout (in sendAsyncResultFailure). So the task is to check on reply verticle if reply address is still registered on event bus. But I haven't found any API to do it.
The problem is getting more important if sender will try to repeat request on timeout. So we will end up with service bloated with old messages and while we process old messages new messages wil also be timeouted!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3129
Blocking Code vs Fibers · Issue #3129 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello authors and coders,
although this is  not an issue, I am interested in what would be your opinion on calling ExecuteBlocking for  small blocking code vs running  the code on Vertx Sync Fibers..
Running vertx instances using AbstractVehicle (event-loop), and running other vertx instances on SyncVerticle (quasar fibers) on same  server. Would it be more efficient to run the small blocking code (aritmetic operations and rounding.. BigDecimal, etc) on SyncVerticle and returning the result via event-bus to the  AbstractVerticle instances,
or simply running executeBlocking{} on AbstractVerticle instance to run this small blocking code? Which is better for large scale?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3130
Should we detect kotlin envirionment and register Jackson-Kotlin module automatically? · Issue #3130 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Maybe we can detect Jackson-Kotlin module and register it automatically?
Let's make Kotlin greate again! :XD
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3131
NPE on WebSocket reject · Issue #3131 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A minor regression has been introduced with the WebSocket header feature that will print an NPE when the WebSocket could not handshake.
Unhandled exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3134
Can not close file when upload file body without the end delimiter · Issue #3134 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Step:
create a vertx server, use Content-Type: multipart/form-data, accept file(s).
send a post request, and modify the request raw.
Use abnormal body to request, it will be wating to timeout.
I find the NettyFileUpload#addContent param-last is false, it will not into if branch to execute end() method, so the file will not close in endHandler after open by HttpServerFileUploadImpl#streamToFileSystem.
I try to modify code to solve.such as:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3136
Regression mount sub router from 3.8.1 to 3.8.2 · Issue #3136 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that there is a regression from 3.8.1 to 3.8.2, when we mount subrouter with regex route request
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3137
ServerWebSocket asynchrone handshake method should consume a future instead of a promise · Issue #3137 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The newly introduced ServerWebSocket#setHandshake(Promise<Integer>, Handler<AsyncResult<Integer>>) method should instead consume a Future instead of a Promise.
The following method is changed void setHandshake(Promise<Integer>) → void setHandshake(Future<Integer>,Handler<AsyncResult<Integer>>)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3138
EventBus consumer should register pending replies context close hooks when the context is associated with a deployment · Issue #3138 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the EventBus implementation will register more context close hook than necessary because they are only not registered when the current thread is not associated with a context.
In practice this is not a bug because such close hook are unregistered when the registration is removed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3139
Remove succeeded/failed Promise creation · Issue #3139 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When Promise has been introduced, the creation of succeeded/failed future has been duplicated in the Promise interface with the behaviour or updating the state of this promise to throw an IllegalStateException or return false.
In practice such promises are not needed and one should use the same method for Future instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3140
Do not lock the handler calls in AsyncFile · Issue #3140 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the AsyncFile implementation calls the file handlers in a synchronized block. This synchronization is only useful for reading the handler and should not be used when calling them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3142
Deadlock when deploying several instances of a verticle a starting net server · Issue #3142 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a regression on 3.8.2 due to #3117
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3144
Extend Future#compose to allow remapping errors · Issue #3144 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Future#compose(Function<T, Future<U>>) allows to remap a success into an future and the Future#recover(Function<Throwable, Future<U>>) allows to remap a failure into a future. We should extend the compose method to allow simultaneous mappings with two mappers: compose(Function<T, Future<U>>, Function<Throwable, Future<U>>)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3145
rovide the Future#flatMap method as alias of Future#compose method · Issue #3145 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We currently provide the flatMap operation named as compose. We should add a flatMap alias that delegates to compose for people that prefer this naming.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3146
Netty upgrade to 4.1.42.Final · Issue #3146 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3147
Delay vert.x shutdown till Hazelcast AsyncMap remove operation is completed · Issue #3147 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am using vert.x version 3.7.1 and stuck in an issue while triggering cleanup during vert.x shutdown.
I am gracefully shutting down vert.x process(soft kill using kill 9 ). I have called closeHandler with a handler on ServerWebSocket which gets invoked while graceful shutdown.
In Handler, I am triggering a remove operation on clustered AsyncMap of Hazelcast. As remove() is asynchronous call, handler completes execution and eventually MainVerticle is stopped(including stopping Hazelcast on node).
Because of above scenario, I am getting below error in callback of remove operation and I could not complete cleanup of connected users.
com.hazelcast.core.HazelcastInstanceNotActiveException: State: PASSIVE Operation: class com.hazelcast.map.impl.operation.RemoveOperation
I was thinking of using setTimer() in MainVerticle's stop method to simulate some constant delay but that sounds ugly.
Can someone suggest a better way to handle this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3148
Handle gracefully HttpClient protocol switches · Issue #3148 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient is able to handle protocol switches but requires the NetSocket method to be called. When this method is not called the client will handle the protocol buffers by throwing an IllegalStateException in Http1xClientConnection#handleMessage method.
We should handle this better, one of
create a NetSocket on a 101 response and make it available even if the user does not call the HttpClientResponse#netSocket() method
ignore it
close the connection
It can be reproduced using any server doing a protocol switch and with an HttpClient request that does a proper HTTP protocol switch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3149
JsonParser improvements · Issue #3149 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
place holder for improvements:
throwing an exception when there is no exception handler seems dubious
handle parsing reentrancy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3150
Hostname resolution does not handle answers set in additional section instead of answers section · Issue #3150 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to create websocket client, but DNS resolution fails.
It doesn't fails consistently, sometimes it succeeds.
I'm using vertx 3.8.2 on OpenJDK 11 on Arch Linux.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3151
Test fully native epoll profiles when upgrading to Netty 4.1.43.Final or above · Issue #3151 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently we only test a subset due to a regression that slows down tests with epoll native. See netty/netty#9678
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3152
Rename io.vertx.core.impl.NetSocketInternal to io.vertx.core.net.impl.NetSocketInternal · Issue #3152 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No particular issues, it is simply in the wrong package.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3154
JsonObjectMessageCodec has inconsistent behavior in handling local vs. remote message sending & receiving. · Issue #3154 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonObjectMessageCodec has inconsistent support for JsonObjects depending on whether they are being passed through the event bus locally or remotely (through the wire).
If a JsonObject contains a BigDecimal or List field, it will encounter issues when going through the event bus locally. For BigDecimal fields, an error will be thrown. For List fields, it will be converted into a JsonArray instead. This is inconsistent from the behavior if the same JsonObject is passed through the wire/remotely.
We've found the root cause to be in how the encodeFromWire() / decodeFromWire() and transform() methods were implemented in JsonObjectMessageCodec. The relevant source is reproduced below:
For remote sending/receiving of messages, the JsonObject is encoded into a byte buffer and decoded back into a new JsonObject, which results in a byte-perfect copy of the message.
For local sending/receiving of messages, JsonObject.copy() is used to create a deep copy of the object instead. This, however, has some side effects that result in the above highlighted issues with certain field types, resulting in either an error, or an inconsistent copy of the original message.
Digging further, the issue seems to be that JsonObject.copy() in turn uses Json.checkAndCopy(), which has processing logic that affects the List & BigDecimal handling. Snippet reproduced here:
Based on this, BigDecimal values will throw an IllegalStateException, Map becomes JsonObject and List becomes a JsonArray. I can understand the rationale here, as Vert.x is meant to be a polyglot framework and these types are Java-specific.
However, this results in JsonObjectMessageCodec having behavior that is inconsistent, depending on if the verticles are co-located locally or are clustered remotely.
The reason why we discovered this is because we went through a refactoring exercise to consolidate certain related services together, and the first step was to combine previously-remote verticles into a group of child verticles under the same main verticle. Suddenly, event bus calls that used to be working fine were throwing errors.
As JsonObjectMessageCodec is a baked-in codec for handling JsonObject messages in CodecManager, we couldn't override it or replace it. What we ended up doing was to register a custom codec whose transform() method mimics the byte buffer logic in encodeFromWire() / decodeFromWire():
However, this also means we need to ask all our services to register this custom codec.
I'm raising this issue because I think it's worth reviewing the implementation for JsonObjectMessageCodec and consider if there are any improvements to be made, especially in the consistency of local v remote message handling. Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3155
Should we make Future.result() throw cause() when failed? · Issue #3155 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3156
3.8.3 - redeploy on linux fails · Issue #3156 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running  the demo server with run/start works - that is, the server displays text in the browser.
With start, executing vertx list results with;
Listing vert.x applications...
With run, executing vertx list results with;
Listing vert.x applications...
No vert.x application found
With run and redeploy ;
Starting vert.x application...
executing vertx list results with;
And the browser gets a Unable to connect.
While the redeploy is executing, changing code results with;
Starting vert.x application...
And the browser still gets a Unable to connect.
The Server code;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3159
Not pause at any breakpoint when debug a vertx project · Issue #3159 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I debug a vertx project created by Vert.x Starter, execution will not pause at any breakpoint.
Any one can help me? Thanks very much.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3161
Maven surefire plugin · Issue #3161 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I created a vert.x project using https. I  tried  build project using ./mvnw clean package command .  ı get an exception .
Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.1:test (default-test) on project starter: There are test failures.
I changed  surefire plugin version and it worked . vert.x project default version hava a problem . 2.19.1 working perfectly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3162
Error on  build a vert.x native image with graalvm · Issue #3162 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the bug
Error on  build a vert.x  (v3.8.3) native image with graalvm.
Log
Environment:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3163
Context promise/future · Issue #3163 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vert.x 3, promise/future are not associated to Vert.x concurrency model.
Callback is performed when both the promise is resolved and the handler is set, consequently the callback thread cannot be predicted when the promise/future is used outside Vert.x event-loop, e.g when the callback handler is set on a resolved future by a non event-loop thread, this handler is called on the current thread.
Handler failure are also propagated to the thread resolving the promise or setting the callback handler.
This feature gives the opportunity to create a promise/future associated with a Vert.x context to provide the alleviate these issues.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3164
Use context futures in Vert.x API · Issue #3164 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the API returns a future, it should return a context future instead of a context-less one. Such futures provides a better support for concurrency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3165
Can not set default encoding as UTF-8 for  http response · Issue #3165 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Similar questions like ：
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3166
Update cluster manager to return a Future instead of using a callback · Issue #3166 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cluster manager updates will be done as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3168
Launcher.getMainVerticle() value is not being passed to custom commands · Issue #3168 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've created a set of new commands extending BareCommand.
In my launcher class, that is extending io.vertx.core.Launcher, I've overrode the getMainVerticle()  since all commands should deploy this root verticle. But this information are not being passed thru the command instances.
Seems that the problem occurs because io.vertx.core.impl.launcher.VertxCommandLauncher.dispatch(Object, String[]) is calling the command (line 382) before the mainVerticle be evaluated (line 395).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3169
Suggestion: Improving ReactiveX APIs · Issue #3169 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given a scenario, I want to make some legacy synchronous API calls. In this example, I will simply call Thread.sleep() to represent that.
In order not to block the event-loop, I will need to use rxExecuteBlocking api provided by vertx
In order to achieve this, we wrapped the rxExecuteBlocking with our own spin, replacing Handler<Promise<T>> with Callable (and also overload it with Runnable that so that it can return void)
I think it would make these rx APIs slightly more align with the Reactive programming paradigm. But that's just my two cents. It's not a deal-breaker.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3170
Bug: in JsonObject.equals · Issue #3170 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3171
Feature Request: JsonArray.add(int index, Object value) · Issue #3171 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
this is easy to add and is available in most json libs
PS: and for JsonArray.set(int index, Object value)
methods add and set have the same semantics as in java's List
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3173
AsyncMap.put that returns a future re-curses indefinitely · Issue #3173 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3174
Future should handle multiple handlers instead of a single · Issue #3174 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the Future type has a single handler value making it not suitable when a future needs to have multiple listeners unless the developers handles it manually.
We need to support multiple listeners per future.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3175
Terminal Future method callbacks · Issue #3175 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Future type allows to set a callback using the setHandler(...) method. We should improve the API naming and provide finer grained callbacks.
setHandler(...) will likely be deprecated or at least discouraged to use.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3177
Intermittent MetricsTest testDatagram failure · Issue #3177 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MetricsTest#testDatagram1 and/or MetricsTest#testDatagram2 fail intermittently in at least one out of five runs:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3178
why vert.x implements Buffer with netty Unpooled instead of PooledByteBuf · Issue #3178 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I review vert.x code, i have a question why vert.x implements Buffer with netty Unpooled instead of PooledByteBuf? If request body is too big, this can cause high gc frequency?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3180
Vert.x 3 Python Native Support · Issue #3180 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting that vert.x 3 official doc doesn't have any documentation for Python.
We are trying to use our Python projects into Vert.x system.
Python system are Machine Learning based projects.
Can anyone help us, how can we use Python ML projects using Vert.x 3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3181
SocketAddressImpl constructor leads to NullPointerException if the InetSocketAddress is unresolved · Issue #3181 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As reported here quarkusio/quarkus#5247, the stacktrace shows that constructing a io.vertx.core.net.impl.SocketAddressImpl leads to a NullPointerException if the passed InetSocketAddress is "unresolved".
This is due to the code in SocketAddressImpl which looks like:
The address.getAddress() can return null (as stated in its javadoc) if the address is unresolved. I think a better/safer way to instantiate this would be to:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3183
Set periodic in Vertx does not getting triggered every time · Issue #3183 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Below is my setPeriodic code
I am running in Vertx 3.5.3 in Kubernetes. There is a logger inside myHandler but the log does not get printed every 5 minutes (time is in milliseconds). The pod is serving request properly throughout the day but the log line in myHandler does not get printed every 5 minutes. Logs gets printed for 1 hour and then stops for sometime. The behaviour is random.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3184
High contention on Worker thread pool queue · Issue #3184 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In VertxImpl, a 'Executors.newFixedThreadPool' is created for the worker thread pool ;
LinkedBlockingQueue shows up as a scalability bottleneck when heavily contended in systems where there are many cores (32 in our test case), the tasks delegated to the worker pool are fast and do not make blocking calls. We were unable to saturate 32 CPU cores with current implmentation.
Swapping the implementation to a data structure that scales better with high contention, we observed max throughput increase from 182k req/sec to 290k req/sec, and CPU cores became saturated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3185
Cache ConnectionBase localAddress / remoteAddress instances · Issue #3185 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently ConnectionBase localAddress() and remoteAddress() are computed on each call. We should cache the allocated objects as it might be called multiple times for the same connection when using HTTP/1.1 keep-alive or HTTP/2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3187
Vertx Sync support with ea-async or other frameworks · Issue #3187 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have used vertx Sync + Quasar and that is an awesome mix. but there are cases that implementing with quasar is hard obviously its java agent and transformation.
I think this can be a good feature to implement it with a simpler case like ea-async or other library for the same job.
I dont know is Vertx.Sync possible support to make a native image with GraalVM also or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3188
Could you tell me how to support Socket.IO？ · Issue #3188 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Previously, using Socket.IO in Node.js was a very convenient way to implement a chat room, but now I want to use Vert.x, and I don't know how to integrate Socket.IO into Vert.x, to see a project netty-socketio. Can you integrate it into Vert.x?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3190
I want to integrate with other libraries · Issue #3190 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to integrate some libraries into Vert.x, such as netty-socket.io,. I don't see in the documentation how to wrap a library as a mod, for Vert.x. Where should I start?
Sent from PPHub
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3192
Change the Closeable contract to provide a promise instead of an handler · Issue #3192 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Closeable interface defines a close(Handler<AsyncResult<Void>>) to call when the call when close is completed. It would be better to use instead Promise<Void> instead of an Handler to signal the close operation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3194
NPE in Http1xClientConnection · Issue #3194 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Have an application that executes a ton of outbound requests to various endpoints in a number of different ways. With vertx 3.7.1 I have no issues. After upgrading to 3.8.3 I started getting NPEs in the Http1xClientConnection class. I see the stacktrace in a couple different ways but they all end up in Http1xClientConnection.java:187. It doesnt happen very often but at 100k->200k requests a second across many boxes those add up quick. I havent been able to trace it down to any certain endpoint or particular post/get secure/non-secure scenario. Of course I have already made all the Promise/Future changes so its not an easy revert.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3195
VerticleFactory creation refactor · Issue #3195 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the VerticleFactory provides a synchronous contract for instantiating a Verticle. We are changing this contract to become asynchronous and provide instead a Callable<Verticle> instead of a single Verticle, allowing the deployment phase to call this method once and later on invoke the returned callable many times for creating instances.
The blockingCreate() setting that instruct the deployer to execute the factory creation within executeBlocking is not necessary anymore as the VerticleFactory can itself perform the executeBlocking execution when it needs it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3196
HTTP/1 stream should synchronise when updating the connection stream · Issue #3196 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when sending the request the HTTP/1 stream will update the connection state without synchronisation which can lead to race conditions. We should synchronise properly so the other parts reading the state will see the correct state.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3198
Context duplicate breaks equality check · Issue #3198 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In many parts of vertx (vertx-sql-client) a context equality check (context == Vertx.currentContext) is done in order to know if we are running in the same event loop else runOnContext
With the introduction of context duplicate this equality check is not functioning correctly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3199
Annotate EventBus body parameters with Nullable · Issue #3199 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3200
deleteRecursive does not need a recursive parameter · Issue #3200 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since we are changing the API i am not sure if it should be considered a breaking change
Do you want me to make a PR?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3203
HTTP/1 client connection should clear the next the request in progress when it ends · Issue #3203 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently a HTTP/1 stream keeps a reference to the next stream for pipelining. This reference field is used for tracking the list of request in progress and the list of response in progress. For a given request, this next field is currently cleared when it is sent and promoted to be the next response in progress (directly or as a next reference of the current response in progress). This field is cleared when the stream request headers are sent so it can be used for tracking the response in progress. In some cases the field should not be cleared:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3204
Unify HTTP/1 client connection progress queues · Issue #3204 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A HTTP/1 client connection maintains two queue of stream request in progress and stream response in progress using the same field. Sometimes this field can be updated twice leading to race issues. We should instead use a single queue of all streams created by the connection. The queue is pushed when a new stream is created and popped when the stream response ends.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3205
JsonPointer issues · Issue #3205 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is this correct?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3207
HTTP client asynchronous NetSocket connect · Issue #3207 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClientResponse#netSocket has some design flaws (it is synchronous and does not report errors). It works correctly in Vert.x 3.x at the expense of a few work around but should not be left as it is.
Instead, the requester should provide a socket handler on the request that will be called when the correct response is received.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3208
Rsocket Support · Issue #3208 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Folks,
As vert.x platform growing adding to external services are needed.
This is very interested feature to add RSocket to vert.x to use great potentials of it in microservices architecture
Do you have any plan for protocols this ?
Thank You.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3209
Error "Failed to remove sub" while shutting down clustered Vertx · Issue #3209 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that the reason is that EventBusImpl#unregisterAll calls HandlerRegistration#unregister with null doneHandler. This leads to the cluster leaving before the EventBus is shutted down.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3210
HTTP/1.1 client requests should use their own context · Issue #3210 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP client does callback on the HTTP connection context event-loop. When the client is used from another event-loop. In Vert.x 4 we want to have a client connection to be usable from any event-loop
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3211
Call HTTP client connection handler before service · Issue #3211 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently HttpClient connection handlers are called when the client request obtains the client connection. Such handlers should be called before the connection is provided to client request. The ability to set such handler on the client request is also a problem as it can be racy and the client request context might not be the same than the connection itself and thus should be removed. Instead application should use the gobal HttpClient connection handler to keep track of connections or set handlers on it. This removal will be deprecated in 3.x
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3212
Deprecate HTTP client request connection handler · Issue #3212 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClientRequest#connectionHandler is removed in Vert.x 4 and deprecated in 3.x (see #3211).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3213
HttpClientRequest sendHead method should callback with an async result · Issue #3213 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClientRequest#sendHead(Handler<HttpVersion>) method will only call back when the head has been successfully sent and not when there is an error. We need to change this method in Vert.x 4 to be instead HttpClientRequest#sendHead(Handler<AsyncResult<HttpVersion>>).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3214
HttpClientRequest sendHead method will call before headers have been written · Issue #3214 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current implementation of HttpClientRequest#sendHead method will call the handler when the client stream has been created by the connection and provided to the client request. Instead the callback should be done in the HttpClientConnection#sendHead callback so the header is called when the header has been sent and it can also report send failures.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3215
HTTP/2 client requests should use their own context · Issue #3215 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP client does callback on the HTTP connection context event-loop. When the client is used from another event-loop. In Vert.x 4 we want to have a client connection to be usable from any event-loop
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3216
Support HTTP/2 server worker processing · Issue #3216 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP/2 server now supports worker processing. The implementation uses now message passing between the connection event loop and its streams.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3217
Duplicate context ordered task queue · Issue #3217 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently duplicate contexts use the original ordered task queue of the original context. Concurrent duplicate worker context will have their task serialised on the same queue.
Instead we need each duplicate to maintain its own queue so that worker context execution is serialised per duplicate to deliver the expected concurrency.
This is also valid for duplicate event loop context using executeBlocking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3218
Vertx cannot open multiple domain socket-bound HTTP servers · Issue #3218 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When attempting to bind more than one HTTP server to (different) UNIX domain sockets, only the first socket will be opened and all none of the others will be opened.
Some sample code to replicate this (in Kotlin, but this exact code isn't particularly important):
The servers are cached by the unique combination of their port and hostname. Since domain sockets always have a host of localhost and a port of -1, only the first socket be created and all subsequent domain sockets will be found in the map.
I'm on Vertx 3.8.4, and while I haven't tried building from source it appears the relevant code is identical in master.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3219
Is that right? · Issue #3219 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry my English is not good enough.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3220
How about to make`CompositeFuture#all` accept `List<Future<?>>`? · Issue #3220 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I use CompositeFuture#all(List<Future> futures), it's really boring to add @SuppressWarnings("rawtypes").
How about to change the argument to List<Future<?>> futures, just like that of CompositeFutureImpl's?
And same to CompositeFuture#any and CompositeFuture#join.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3225
IllegalArgumentException when using HttpClient with domainSocketAddress · Issue #3225 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Getting an error that suggests that I'm not allowed to use Domain Socket at all - which is not what I expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3227
JacksonCodec fail to encode Json with Enum · Issue #3227 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When jackson-databind is not available in class path, it falls over to use JacksonCodec, but the following tests will fail in case Enums are in the JsonObject:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3229
eventbus cluster  in docker  Connection refused · Issue #3229 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when i use eventbus cluster in docker  in the same computer, i got a Connection refused error
this is my config
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3230
Remove clustered boolean option · Issue #3230 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the options to build Vertx provide a clustered boolean with the following behavior:
calling vertx(options) with clustered set to false builds a non clustered instance
calling vertx(options) with clustered set to true throw an IllegalArgumentException
calling clusteredVertx(options) with clustered set to true builds a clustered instance
calling clusteredVertx(options) with clustered set to false does set clustered to true and then builds a clustered instance
Given this behaviour, the usefulness of this setting seems very low and instead it could be removed in Vert.x 4 with no actual impact other than not throwing an IllegalStateException when clustered is set to true and the vertx(options) method is called.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3232
Vertx#close Future will not callback the handler · Issue #3232 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Future returned by vertx.close() never completes because the thread pool has been shut down.
The first of these works, the second doesn't:
Sync.await is just a blocking method that waits for a future to complete using setHandler.
The output from that is:
and it never completes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3233
General errorHandler does not allow me send my own response · Issue #3233 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following allows me to log any uncaught exception in a route, but it does not allow me to send the response I would like. Instead I get an IllegalState exception about response already having been send.
What can I do so that I'm in control of the response?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3234
WebSocket  API renaming · Issue #3234 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x 3.x provides an inconsistent naming concerning for WebSocket, it is often spelled as Websocket. We should address this in Vert.x 4 whenever possible and provide deprecation for incorrect names.
We can fix all of them but the WebsocketVersion that would be breaking. In 3.x we provide deprecations along with correctly spelled equivalents:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3235
WebSocket API cleanup · Issue #3235 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x 3.x provides an inconsistent naming concerning for WebSocket, it is often spelled as Websocket. We are addressing this in Vert.x 4
We can fix all of them but the WebsocketVersion that would be too breaky. In 3.x we provide deprecations along with correctly spelled equivalents and in Vert.x 4 we remove them:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3236
Fairness in SharedData Lock · Issue #3236 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi authors and developers,
I have a use-case in which ordering of locks requested is required. It seems vert.x does not support fairness provided by java.util.concurrent.locks.Lock . It also seems among different cluster manager providers, ignite supports fairness while hazelcast does not support it.
I wanted to confirm if my understanding is correct and in case it is correct, then are there any chances of vert.x introducing fairness concept in distributed locks?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3238
fileUpload & sendFile in HTTP2  ,  · Issue #3238 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code works correctly in HTTP1.X
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3240
NPE in Http1xClientConnection · Issue #3240 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
We get rare NPE's on high load in Http1xClientConnection
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3241
Sequential composition in vertx from list of items · Issue #3241 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to execute sequential composition of futures in Vertx Java. I have an array (it could also be a list with unknown number) that I need to loop through and call the db server via reactive mysql (that is on vertx) This is the code:
I need to chain every call from dbSaveData sequentially,so if one of the calls to db fails, a handler should be called to clean up (rollback) the data. The documentation is very limited. I could not find how to create sequential composition from list, and I could not understand it enough from the information I found on stackoverflow and the internet. Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3242
CompositeFuture multiple handlers not working · Issue #3242 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like CompositeFuture is not supporting multiple handlers as implemented for "regular" futures in #3174
Reproduced on both 3.8.4 and 4.0.0-milestone4
The following code is calling the onSuccess handler (because it is the last that was added) and is not calling the onFailure handler.
The following code is calling the onFailure handler (because it is the last that was added) and is not calling the onSuccess handler.
The invoked handlers do not print anything on screen because of these guards (example for onSuccess):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3243
Updating from 3.x to 4.x breaks · Issue #3243 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to upgrade vertx-core from 3.x to 4.x. The following code breaks.
The code should pass, but it throws an error:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3245
HttpServer continues processing requests after closing httpconnection · Issue #3245 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like httpserver will continue processing requests after closing httpconnection in #2542
We closes the connection in connectionHandler when a new connection happens above the limit. But the requestHandler will continue processing.
So for the client side, it won't get any response because of the closed connection but the httpServer has already handled the request, which is out of our expectations.
I want to stop processing any request after the httpconnection closed, any good idea?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3246
HttpMethod is an interface · Issue #3246 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vert.x 2 and 3, the HttpMethod is declared as an enum. This leashes the extensibility of HTTP and prevents modelling other HTTP methods with this type unless using HttpMethod#OTHER in addition with the rawMethod attribute on HttpServerRequest and HttpClientRequest.
We can turn this enum into an interface in Vert.x 4 with a few benefits:
non predefined HTTP methods are now handled like others without special handling
one can define its own HTTP method constant for other protocols (like
And at the expanse of 2 breakages:
the enum cannot be used as is dispatching a call with a switch construct. Instead the switch must be done on the HttpMethod#name() string value.
the rawMethod property is removed because now the HttpMethod can model the raw value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3248
OpenSSLEngineOptions Parameters · Issue #3248 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
How can we configure OpenSSLEngineOptions in a way that it calls specific openssl-engine ( such as pkcs11 from a configuration) and is it possible to give option that it establishes ssl connection with the private key stored in the hsm device.
More information about the problem can be found in the link:
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3249
Connection should not process messages when in closed state · Issue #3249 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently connections can process messages when the connection is closed. Since channels become inactive asynchronously, closing a channel when handling messages will deliver the signal after the messages are processed. We need to keep track of the closed status within the connection and avoid processing messages when the connection is closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3253
io.vertx.core.VertxException: Thread blocked · Issue #3253 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3254
Vert.x 4 JSON Regression, byte primitive breaks JsonObject/JsonArray.toString() · Issue #3254 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When you add a byte as JsonObject field or a byte as JsonArray element, it breaks the encode() method.
It should throw java.lang.UnsupportedOperationException:
Same for:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3256
Default param value in HttpServerRequest.getParam() method · Issue #3256 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
Is it possible to extend HttpServerRequest.getParam method so it takes default value for request parameter and returns it if parameter is not there. I'm happy to create a PR for that.
Thanks,
Tim
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3257
Vertx need await / async feature java side · Issue #3257 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Currently you have the choice between callback hell, ending with complex business code at tabulation 8192, or to rely on complex future headaches.
In both cases, you may/will end up, even with best efforts, with un-readable and/or un-maintainable complex business code.
I assume vertx, java server side, critically need this.
I didnt find any clues about this, so i open this bug. Feel free to do what you want with it, but i assume bypassing this may be a very bad idea for vertx.
Do you have a reproducer?
Link to github project/gist
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3258
HttpClient improvements · Issue #3258 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A set of improvements done to improve the usability of the bare HTTP client.
Usual methods will send the request
In Vert.x 3.x most HttpClient methods will return an HttpClientRequest that is yet to send. There are a few alternate methods named *Now that will actually send the request on behalf of the user: getNow, optionsNow and headNow.
Vert.x 4 assumes that now the most usual methods behave like the *Now methods and will send the request allowing the user to pass the necessary information to perform the request.
The HttpClient#request methods will create an HttpClientRequest that is yet to send, like in Vert.x 3.x . This allow to perform lower level interactions such as
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3259
When the debug mode is running, the breakpoint does not take effect. · Issue #3259 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I downloaded the kotlin project on the official starter, and then I set breakpoints in IDEA with gradle, which did not take effect when debug mode was running. Could you tell me how to solve it?
Version
Do you have a reproducer?
Anything that can be relevant such as OS version, JVM version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3260
JsonObject decodes first object in a list of objects (in invalid json string) instead of throwing an error · Issue #3260 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
When creating a new JsonObject by passing in a json string, which contains more than one object separated by comma then JsonObject parses the first one and drops the rest.
Expected behaviour: JsonObject throws a DecodeException as the input json is invalid (missing surrounding parenthesis).
Background
This issue arises also in Vert.x web when retrieving the body of a request as json via: RoutingContext.getBodyAsJson() because it uses JsonObject for parsing under the hood.
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3261
Vert.x transport should gracefully handle unresolved socket address conversion · Issue #3261 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sometimes the channel will provide an unresolved socket address, when this happens calling remoteAddress() on an HttpConnection will lead to an NPE since the code assumes that the address will always be resolved.
We should handle this case and provide a best effort support.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3262
Feature Request : Add support for jceks keystore in KeyStoreHelper · Issue #3262 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
JCEKS is now the default format for java keytool. Adding support for it in io.vertx.core.net.impl.KeyStoreHelper will avoid keystore file proliferation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3263
JsonObject.copy() does not create an identical internal map · Issue #3263 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run the following unit test:
The test fails with an error:
I encountered this issue when integrating Pebble template processor into Knot.x. I passed a map returned by JsonObject.getMap(), but the Engine failed to process the context. Then I noticed a copy() operator was used before. Removing the copy() operator fixes the issue, but is not feasible in the project.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3265
SocketAddress enhancements · Issue #3265 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Improve Vert.x SocketAddress API to provide a better access to the relevant information. Currently it provides host and port for inet addresses.
The new hostName and hostAddress will provide specific portions of an inet address whereas the host might return one or the other depending on whether the address is resolved or references an IP.
The implementation also now checks whether an host String represents an IP address so it can be used to avoid unnecessary host resolution when the host is an IP address.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3266
Avoid name resolution when providing an IP host for server bind operation · Issue #3266 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a server is bound we can avoid name resolution when the binding host is an IP address, even though the resolver will resolve it trivially.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3267
MultiMap#set operation with a null value shall remove the entry · Issue #3267 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently setting a null value on a MultiMap#set operation depends on the implementation. CaseInsensitiveMultiMap and VertxHttpHeaders accept the value and the map will contain an entry with such null value. Headers adaptors for HTTP/1 and HTTP/2 will throw a NullPointerException.
Setting such value should instead remove the entry in all cases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3268
CaseInsensitiveHeaders deprecation · Issue #3268 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The CaseInsensitiveHeaders is the implementation of MultiMap obtained by MultiMap#caseInsensitiveMultiMap(). Users should never use the type CaseInsensitiveHeaders nor instantiate it, instead they should use MultiMap and MultiMap#caseInsensitiveMultiMap().
This class is deprecated in 3.8 and moved in 4.0 in an implementation package.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3269
Make CaseInsensitiveHeaders internal · Issue #3269 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The CaseInsensitiveHeaders implementation of MultiMap is deprecated in Vert.x 3.x and moved in the io.vertx.core.http.impl.headers package in Vert.x 4. This class does not expose more than the MultiMap contract.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3270
Eventbus error is not reported anymore to the metrics SPI · Issue #3270 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I "fixed" a broken integration test in micrometer metrics because it expected an eventbus error to be reported in metrics: vert-x3/vertx-micrometer-metrics#94
This "fix" is necessary to not block builds on master, but the root cause is not fixed and is probably in vertx-core.
To reproduce, we can just revert my change on VertxEventBusMetricsTest.java and run the test.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3271
NetSocketImpl Bug · Issue #3271 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
class NetSocketImpl.handler(Handler handler) handler throw Exception and  no print Exception on console
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3272
NetSocket data handler should report runtime failures to context exception handler · Issue #3272 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently NetSocket data handler will ignore any runtime failure. Those should be reported to the NetSocket context so they can be logged by default and handled by the context exception handler when set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3274
Isolated loading restricted to Java 8 · Issue #3274 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x has provided isolated class loading support in Vert.x 3 . This option cannot be properly supported above Java 8 due to the evolution of the Java runtime. In Vert.x 4 we continue provides a best effort support of this option for Java 8.
This relies on Multi-Release Jar support supporting this support for Java version < 11 exclusively. The DeploymentOptions class for Java >= 11 will not provide anymore the class loading related fields and the class loader manager implementation is a no-op implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3276
Message filtering on event bus · Issue #3276 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The event bus currently provides interceptors, but there are situations where to intercepting a message is not enough and it would be really useful to be able to prevent a consumer from getting executed and maybe replies can / should be produced on a central point.
IMHO the event bus is a really proper alternative to rest as general communication solution, but e.g. authentication / authorization is one of the missing features. I think such a possibility to filter message would be a good base to solve scenarios like that and may others as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3277
Simplify EventBusMetrics message delivery callback · Issue #3277 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently when a message is delivered to an handler, two callbacks are done (before and after). This is simplified to a single callback (messageDelivered) to simplify since there practically not much value having two callbacks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3281
Metrics SPI not informed of messages discarded during unregister · Issue #3281 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
When looking at the values reported for the "credit" EB addresses I noticed that they frequently got "stuck" with a non-zero value.  The cause of this is that the Micrometer implementation (and perhaps others) is not clearing the gauges during handlerUnregistered (I've logged vert-x3/vertx-micrometer-metrics#95 for this).  However, it would be a bit cleaner if the SPI were told about the discarded messages explicitly, rather than having to infer this.
Do you have a reproducer?
Simply running an application which uses a message producer (and thus the credit side-channel) at any reasonable scale will illustrate the issue.  You can also see that in HandlerRegistration.java between lines 168 and 177, any pending messages are discarded, but the SPI is not called (mainly because it lacks the entry point).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3284
Vert.x 4 milestone 4 Web Client maxPoolSize · Issue #3284 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using Vert.x 4 milestone 4, I am using Web Client.
My server program needs to request a third-party HTTP service in a request, and the performance index of my server program is: Requests per second: 9.44 [# / sec] (mean). In the stress test.
I checked the configuration parameters of Web Client. Found the maxPoolSize parameter, I set it to 20 (I did not find the upper and lower limit of this value), there is no significant improvement in the performance metrics, what can I do to support more HTTP requests at the same time?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3285
Upgrade Netty to 4.1.45.Final to fix CVE-2020-72381 · Issue #3285 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Version
Context
Running snyk against my app, gives this vulnerability report: https://app.snyk.io/vuln/SNYK-JAVA-IONETTY-543490
Basically it says there is invalid HTTP handling in Netty that has been fixed in 4.1.44.Final.
Do you have a reproducer?
Run sync monitor on any app that has vert.x 3.8.5 in the pom.xml file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3286
HTTP/2 client clear text upgrade might corrupt the connection data with streamed bodies · Issue #3286 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
All.
Context
When using the Vert.x HttpClient with the HTTP/2 protocol in clear text, the default setting will perform an HTTP/1 connection upgrade with the first request. The connection is corrupted when the client receives the connection preface before the request is fully sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3287
HTTP/2 client clear text upgrade should send the preface after the upgrade request · Issue #3287 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HttpClient will send the connection preface when it receives the server connection preface. This works when the upgrade request is sent in a single HTTP message but corrupts the connection when the request is not fully sent since the preface will be sent and will be interpreted as HTTP data by the server.
Adding the Http2ConnectionHandler to the pipeline has two effects:
it is required to process the server preface
it will send the request preface to the server
The Http2ConnectionHandler is added to the pipeline when we receive the 101 response from the server. This might send the client preface before the initial HTTP request (doing the upgrade) is fully sent, resulting in corrupting the protocol (the server might interpret it as an corrupted connection preface).
To properly solve this we should be able to process the server response (i.e the server preface and the server HTTP/2 traffic) while delaying the client preface write. Currently this does not seem possible because processing the server preface is done by the handler that will sent the client preface as soon as it is added to the pipeline.
Therefore we must buffer all pending messages until the request is fully sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3288
CassandraClient.executeWithFullFetch doesn't return all rows · Issue #3288 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I have a Cassandra database with 7000 rows. When I query them all only 2000 are returned. I've tested with different fetch sizes. When using fetch size >= 7000 it works fine.
It is the last 2000 rows that are returned.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3289
Rename Buffer toJsonXXX() to mapToJsonXXX() · Issue #3289 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Buffer interface defines these methods:
These methods are actually mapping methods a JSON element or value according whose type depends on the content of the buffer. The toJson() method convention is actually used to encode data objects to their JSON representation. e.g for a buffer it would actually encode a base 64 representation of the content like JsonObject does. The toJson() method will likely be changed in Vert.x 4 to return an encoded base 64 String.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3290
Websocket ping message shouldn't trigger handler · Issue #3290 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Seems that vertx websocket ping message handling changed with 3.8.0 release.
Before 3.8.0  - ping messages weren't triggering handler to be called.
After 3.8.0 - when websocket ping message received websocket handler would be called.
Is it a bug or an intended change?
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3291
WebSocket should delay all handlers when paused · Issue #3291 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the WebSocket implementation will deliver frame and pong to the respective handlers when it is in paused state. The implementation will only queue the frame containing application buffers when in paused state. We should instead manage a queue of frames instead of application buffers and the queue handler should dispatch those messages to the respective handlers, applying the queue processing state to all handlers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3295
io.vertx.core.file.impl.FileResolver.resolveFile() has a bug · Issue #3295 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
io.vertx.core.file.impl.FileResolver.resolveFile(fileName) use a ClassLoader to resolve resource. It always return null when getResource() has been called. Because the fileName which send to resolveFile alway starts with '/'.
The resolveFile method will been used in StaticHandler and HttpServerResponse.
It will cause an error when sending the file to the client, the first time it is called, and the subsequent time it will not see an error because it reads from the cache and did not execute getResource
This leads to program instability.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3298
JsonObject does not exist in node_modules/@vertx/core · Issue #3298 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to follow any basic example here:
If I do the following:
I will get an error that JsonObject is not found.
If I look at the @vertx/core/index.js file I can clearly see it missing.
FWIW I tried another way and seem to have gotten a workaround, but JsonObject should still be exposed for other use cases.
The workaround can be found here: #3308
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3299
JsonArray constructor produces objects that violate `equals` contract · Issue #3299 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonArray should obey the condition that two arrays having same toString() representations are considered equal. This issue provides a counterexample to that.
The reason behind this is that the JsonArray constructor taking a list does not check the actual types of objects. Provided with a json-unfriendly type, it is being converted when reading. If the types of the objects were validated , IllegalArgumentException would be thrown - this would prevent confusion caused by implicit conversion on reading from array.
The issue was encountered when implementing unit tests for an utility class transforming metadata to a custom Json representation. See Knotx/knotx-fragments#92
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3300
Adding context-euality-check-methods · Issue #3300 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx 4
this topic is related to this one: #3198
We should have methods like this:
its true if the context is related to otherContext, cause one of them is a duplicated one of the other one
its true if both live in/on the same-eventloopthread/same-thread.
it capsulate code like this: ctx.nettyEventLoop().inEventLoop()
if it changes in the future, we dont have to adjust these code snippet in x-files of the vertx project, but only in one^^
And also its a better code design, not relying on concrete implementations but on abstractions^^
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3301
One verticle context, other and different contexts on each http-request to that verticle · Issue #3301 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
vertx 4
if i instantiate a verticle and start a http-server in it.
Each request is executed on a other context (not the verticle context itself)
So context-equality checks breaks and i cant use the context-locals
For the context-equality-checks there would be a documentation good, what we should use then.
Maybe a solution i referenced here: #3300
But that solves not the context-locals-problem.
We need there more clarification.
lg knotenpunkt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3302
Adding a second and faster runOnContextTWO() · Issue #3302 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
actually we have the contextA.runOnContext(Handler h)-method that do something like this:
it switch to the contextA and switch the eventloop to that in which contextA lives.
it does this that way without exception.
here it should do that context switch to contextA also without exception.
But if the program sees here that eventloopThread from currentContext is the same as the eventloopThread of contextA then it should not do that eventloop-switch (do not a push to that mpsc-queue). Here in that case it should run the code directly, after "switching" the context.
Why we need both?
the first runOnContext is more fair. If i call in a forloop 1000times the runOnContext, thousand mpsc-queue-pushes are done. So other "events" have the chance to run, before the 1000 completed.
In the secound one (runOnContextTwo), if i call this method in a for-loop 1000times and the caller-eventloop is the same as the contextA-loop, then the 1000events are executed without a break. No other events have the chance to run in between. So its not so fair. But in sum faster.  (Cause i dont have 1000 expensive mpsc-queue pushes)
So the use case later decides, if the user want to use the fair or unfair runOnContext()-solution
Maybe the secound solution is also interessting for some internal stuff
Where we want to change the context, but dont do an expensiver one eventloop-switch to the same eventloop (if the eventloops from contextA and callerContext are the same^^)
lg knotenpunkt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3303
Adding runOnContext() with results · Issue #3303 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Both methods are methods from the context-class and both should do the same:
They should run on that context. The result in case (1) can be fetched with the help of a future on the callerContext. In case (2) its similar to the method executeBlocking(..) The result can be fetched in that callbackmethod callerRunner.
Why these functionalitly?
The user dont have to write this code on his own; cause vertx have it^^
More informations and details you can get here:
in that Google-Forum-Topic you find links to a example-implementation by me of that functionality
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3304
Invalid docs for passing options to createHttpServer · Issue #3304 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to follow the basic example here:
Which shows:
I am using Vue, and I place that code in my index.js file.  When I do an npm run build;npm start; I see the following error in the logs
Failed in deploying verticle caused by TypeError: invokeMember (createHttpServer) on JavaObject[io.vertx.core.impl.VertxImpl failed due to: no applicable overload found
It seems to work when I do:
I suggest updating the docs to reflect the correct way to do it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3305
Error: JksOptions is not a constructor · Issue #3305 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to add jks options to my vertx server in javascript like so.
FWIW I am using GraalVM 19.2.1 CE (Which has NPM 6.9.0/ OpenJDK v 1.8.0_232), Vertx 3.8.5 and ES4X-pm 0.10.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3306
Big Bug: Future/Promise-context-binding shall be on onComplete()-time not constructor-time · Issue #3306 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Actually im some cases a context is injected to the Future/Promise.
Later the resultHandler(s) is/are executed on that context.
The context is injected at Constructor-Time. Its the context of the caller, so that the handler is later executed on the right context.
actually it is also so that there exists cases, in which no context is injected.
So this is very inconsistenst and error-prone.
So the solution of that bug can be the following:
No-Context-Constructor-Injection, BUT
at the time the handler is registered to that future/promise, the context should be captured.
So i get the following benefits:
if i register a handler to that future on a other context, where the future is created, the result is executed in that case on the right context.
if i register different handlers from different context, each handler then is called on the correct context.
These two benefits i dont have in the acutally future-constructor-context-injection-solution.
in that Google-Forum-Topic you find links to a example-implementation by me of that.
lg knotenpunkt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3307
Adding Timeout-(handler-based)-method to Future/Promise · Issue #3307 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the following method we should add to the Future-Interface:
its easy to implement. We wrap in that method the handler into a TimeoutHandlerWrapper.
lg knotenpunkt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3308
Invalid docs for ConfigRetriever · Issue #3308 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It appears that the config retriever is passing futures by default.  I don't see anything in the docs about this:
The code below works, and the docs may want to change to reflect something similar
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3309
ConfigRetriever incorrectly parses numbers · Issue #3309 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a myVertxConfig.properties file. In it I have:
If I load the properties file using the following code as example (#3308) I will see an output of 8080.0  (It adds a dot and then a zero)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3310
NPE in Http1xServerConnection · Issue #3310 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are getting these rare errors (happened around 9 times in the last 90 days).
Not exactly sure how to reproduce these but it seems like this happens during high load.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3311
Handle unsolicited HTTP messages in client · Issue #3311 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the HTTP client will assume that all HTTP messages are received in response of a request it sent which is correct. Some servers might send unsolicited message (e.g upon a connection close) and are misbehaving this way.
Such messages will trigger NullPointerException in the client because it is in a state assuming no message can be received.
The client needs to handle unsolicited messages to avoid such errors polluting the logs and potentially creating  performance issues.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3317
Behavior of setHandler is not consistent · Issue #3317 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Do you have a reproducer?
... Run the two samples above
Extra
When the "complete" method is called after setting up the two handlers, only one handler is being called:
When complete is called before setting up the handler, both handlers get called:
My expectation would be that, now matter when the future gets completed, always the same handlers get called.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3318
Bug: In existing FutureImpl: Wrong exception-handling · Issue #3318 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
thats the existing doDispatch-Method in your Future-Implementation.
The Problem is in the else-path.
if the handler throws an exception, the caller-side in the if-path is not abborted, cause the exception is caught anywhere in the context.dispatch......
in the else-path the exception abborts the caller-side.
So we have there a different behaviour in the cases if in the promise/Future is a context registered or not.
I guess we need here something like this:
that should not abbort the caller-side
lg knotenpunkt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3321
Critical CVEs in jackson-databind · Issue #3321 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Found via OWASP dependency check
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3323
Static resources are not served when browsing through SSL/TLS · Issue #3323 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
At work, I'm developing a web application based on Vert.x: a main verticle that spawns 2 verticles. One for a RESTful API (with internal and public endpoints), and one for UI (static resources, among which a bundled ReactJS front app).
An end-user request transits through those architecture tiers: (HTTPS) 1x Microsoft IIS SSL-enabling frontend --> (HTTP) 1x authentication gateway --> (HTTP) 1x Vert.x app.
When upgrading from Vert.x 3.7.1 to Vert.x 3.8.4 with minimal compilation-required changes (i.e. resolving the new Vert.x Promises into app well-known Futures), I observe a consistent regression when accessing https from outside the Vert.x app host machine:

Firefox states a PR_CONNECT_RESET_ERROR, therefore gets no response from the server
Visually in the browser taskbar, the SSL handshake phase seems to enter a looping-behavior ("Establishing TLS connection..", "TLS connection established.", looping ~5 times, what is observed only once when page loads properly)
(may be unrelated) In the browser network monitoring tools: the TLS handshake phase takes longer than usual, and HSTS (HTTP Strict Transport Security) appears disabled (in our setup, it's enabled when page loads properly)
In the Vert.x app request logs, I see the request, I see an HTTP 200 Ok response status, and I see the proper response size
(may be unreliable due to logging misconfiguration in my app) The app logs state no error message nor exception stacktrace. Parameterizing logging to full-verbose outputs nothing more in logs
Reverting changes and downgrading to 3.7.1 extinguishes the issue.
Alternatively, regression is worked around by replacing the StaticHandler (i.e. router.route().handler(StaticHandler.create());) with this impl: CustomStaticHandlerServiceImpl_java.txt
Do you have a reproducer?
Steps to reproduce
Build and deploy a Vert.x app using the StaticHandler and having a foofileinsidewebroot.html file dropped in the Vert.x default webroot directory
Have a Microsoft IIS front with SSL-enabled (may reproduce with any web server), ideally on another host
Have this front pointing to your Vert.x app HTTP (non-secured) URL
Extra
I realize this issue is not fully narrowed down and debugged, therefore not easily reproductible most probably. It's intended as an "heads up" ticket, in case the Vert.x developers may think of anything related to that regressive behavior
Updating to Vert.x 3.8.5 didn't solve the issue
When running the Vert.x app locally and accessing it directly (i.e. http), issue is not reproduced. The same observation is made when performing a local attempt from the deployment machine. As such, issue is definitely SSL-related
When running in the bug context, where the UI static resource URL is not reachable, the public API endpoints still are: so the app-defined Vert.x router routes didn't fully regressed
The suggested workaround duplicates parts of the StaticHandler (reading the static files directory, writing the HTTP response headers, writing a file in the HTTP response body). As such, it disqualifies a regression cause in Netty?
In the Vert.x revisions, I see no changes made to the StaticHandler between version 3.7.1 and 3.8.4, so the problem would occur deeper in the Vert.x classes?
Due to a tight schedule, I didn't go deeper:
Didn't attempt to configure app into a debug mode in order to remotely attach a debugger, having our operations team to manage security/access/routing for the debugging port
Didn't attempt with in-between Vert.x releases (3.8.0, 3.8.1, 3.8.2 and 3.8.3) in order to identify when it regressed
Didn't attempt to monitor the network trafic on the architecture tiers (with Wireshark or any other monitoring tool)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3324
setHost/setPublicHost and WARN i.v.c.e.i.clustered.ConnectionHolder - Connecting to server localhost:xxx failed · Issue #3324 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Trying to set eventbus options so that bidirectional messaging is possible between to members.
Do you have a reproducer?
Steps to reproduce
Start member verticles e.g. with CarServer or DukesFx App on a Mac OS laptop
Start member verticles on Raspberry PI
Use Echo functionality.
Message on Raspberry is received. Publishing a reply fails with different error messages depending on eventbus configuration. There is no known working configuration at this time.
Issue
The issue here is that there seem to be hidden features that lead to the situation.
is
Sets the host.
Which is not sufficient to explain what is going on.
_Set the public facing hostname to be used for clustering. Sometimes, e.g. when running on certain clouds, the local address the server listens on for clustering is not the same address that other nodes connect to it at, as the OS / cloud infrastructure does some kind of proxying. If this is the case you can specify a public hostname which is different from the hostname the server listens at.
The default value is null which means use the same as the cluster hostname._
but does not describe why e.g.
Which does not explain why 0.0.0.0 is a valid value and how this should work. I tried it and it leads to the other member to not know what to do with 0.0.0.0 ...
adds to the confusion instead of resolving it.
also adds more input that does not lead to clarification
Where is the reproducer that proves that things are not systematically broken?
I am in the process of modifying RemoteCar.java to allow specifying Host and ClusterPublicHost via command line. Do I also need to be able to modify the ports? Which is the valid setting that should work and where is this documented?
Please do not close this as a question - i have the feeling that there are quite a few people out there which ran into similar issues due to missing documentation/examples and clarification.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3325
Client pool and connection manager improvements · Issue #3325 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the client connection Pool although takes care of closing the pool when it becomes empty in order to remove itself from the ConnectionManager. The ConnectionManager is actually coupled to the HTTP protocol and the Pool making it impossible to reuse for other purpose than HTTP connection management.
We want to decouple the ConnectionManager from HTTP and from the Pool and give flexibility by allowing a endpoint management. The manager will only now maintain of map of endpoint keys to Endpoint where the Endpoint is responsible for managing the connections, eventually with a Pool. It will also be responsible for maintaining managing the endpoint lifecycle relieving the pool from this responsibility.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3326
WebSocket client connection improvements · Issue #3326 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently WebSockets are pooled like other HTTP connections and therefore are naturally associated with the Context of the Pool. We actually want to remove this coupling such as opening a WebSocket from a context will use that context. We could have a specific Context for WebSocket and perform message passing between the underlying channel and the user context, however this adds un-necessary complexity and potential bugs because WebSocket are closed after usage and thus not pooled.
We implement a different policy for WebSocket management that maintains a maximum set of connections for a given endpoint in order to satisfy the max pool size management as well as a list of waiters for connections, however we will not use a pool because connections are simply closed when the WebSocket closes the connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3327
HTTP client per pool context · Issue #3327 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClient will maintain a single context for the client. This requirement is quite strong and actually be relaxed to maintain a context per endpoint for pooled connections. This will improve the shared client in the future as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3328
Deprecate the Future setHandler method · Issue #3328 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x supports multiple handler per future since the 3.8.4 release. The setHandler method does convey the meaning that a single handler per future can be set and unset and the onComplete, onSuccess, onFailure methods shall be used instead.
The setHandler method usage should be replaced by the onComplete method, e.g
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3329
Remove the Future setHandler method · Issue #3329 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x supports multiple handler per future in 4.0. The setHandler method does convey the meaning that a single handler per future can be set and unset and the onComplete, onSuccess, onFailure methods shall be used instead.
The setHandler method usage must be replaced by the onComplete method, e.g
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3331
AsyncFileImpl - flush() and close() use the internal ordered task queue · Issue #3331 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Performing flush and close on multiple AsyncFiles results in each one being closed synchronously, one by one, since they are submitted to the internal ordered task queue. This results in performance degradation.
Originally these operations were executed on the event loop, but were moved since they are blocking operations that can take a while. However, I don't think the intention was to execute them one by one - though there could be something I am missing.
and
I think it would be more appropriate to send them to an unordered task queue / worker pool so that they can be flushed or closed in parallel.
Do you have a reproducer?
Obtain multiple references of AsyncFile by using fileSystem().open() and call flush or close on each one.
Steps to reproduce
See above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3333
Event bus metrics reports discarded messages · Issue #3333 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a consumer discards a message (i.e unregistration, message overflow) it will drop messages.
A metrics implementation may maintain count pending message (incremented when a message is scheduled / decremented when a message is delivered). On a message discard, this value will not reflect the actual value.
Signalling an implementation that a message is discarded allows to maintain a correct count and also enables this implementation to be aware of it (i.e it could trigger a warn, etc...)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3334
a future should support cancellation · Issue #3334 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I like the introduced state splitting between promises and futures in the upcoming 4.x version. I was just reasoning how we can escalate an exception back to the code that is running/backing the future without a signature to ask for it.
Reference to Java
We are currently (miss) using the tryFail signature to signal an exception to the executing code and ask for an interrupt.
Possible use cases
resource management to abort non relevant processes
graceful shutdown of running processes
Do you have a reproducer?
Migration to 4.x would lead to a compilation error
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3335
FileSystemImpl.existsInternal can block event loop thread · Issue #3335 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Invoking vertx.filesystem().exists() can block the event loop thread. This is because resolveFile() runs in the event loop thread instead of in the worker thread:
Do you have a reproducer?
You can mock calls to resolveFile() to sleep for any amount of time or set a breakpoint on the resolveFile call as a test runs. Wait up to the blocked thread checker interval and unpause execution. BlockedThreadChecker will report that the thread has been blocked.
Steps to reproduce
See above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3336
HttpClientRequest set timeout when request begins · Issue #3336 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClientRequest timeout is created when upon call of setTimeout method. This may trigger the timeout when the request is not yet begun (i.e before it is in internal connecting state) causing timeout miss, leading to a racy situation.
We should create the timeout after the request has begun (i.e after it is set connecting or has a stream).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3337
Disable EDNS by default · Issue #3337 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
EDNS is an extension mechanism for DNS (http) that should be disabled by default. It might cause unwanted issue such as #3150 .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3339
Event bus metrics schedule event should be delivered when message is received · Issue #3339 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The EventBusMetrics#scheduleMessage event in 3.x is called when the message will be scheduled for delivery by the registration handler. Most metrics implementations will increase a pending count on this event. However there is no guarantee that the message will actually be processed, e.g the message is scheduled on a registration but this registration is unregistered before it receives the message leading to an incorrect metric value.
The scheduleMessage method should be called within the registration handler before the message is added to the internal pending list or processed or discarded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3340
Improve JavaDocs for `Future.otherwise` and `Future.recover` · Issue #3340 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
When attempting to use Future.otherwise and Future.recover it was not clear what the intended differences were meant to be.
Do you have a reproducer?
I intend to submit a PR with a proposed update to the JavaDocs and perhaps the Vert.x documentation in order to make the use of these methods more clear in a broader context.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3341
NPE in SSLHelper · Issue #3341 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to use AmqpClient with a keystore and am getting a nonhelpful message of
What is happening is that the catch block inside createContext is swallowing the stacktrace of the NPE, so I have no idea where/how it's originating inside that method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3344
Clustered start failure does not close resources · Issue #3344 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a clustered vertx instance fails to start (i.e event bus start failure, cluster join failures, etc...), resources allocated in the vertx instance are not released.
On a start failure, the created vertx instance should be closed to release resources.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3346
HttpServerRequest multipart expectation should fail when request say otherwise · Issue #3346 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpServerRequest only setup the request decoder when the content-type header and the method say so. When it does not it should fail instead of being a no-op.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3351
Add a method to the RoutingContext to allow cleanup whenever a request ends · Issue #3351 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
When a request is received in a Vert.x server, you might open clients to perform tasks related to the call that was made. Those clients need to be closed when the response is sent or something goes wrong to prevent leaks. The solution could be implemented as discussed in
which is:
on vertx web RoutingContext we can add a method:
This handler would attach to 3 core HttpServerResponse handlers:
closeHandler when the client just closes the connection
exceptionHandler when there's a socket IO error
endHandler when the response cleanly ends
This way it would behave just like the other addXXXHandler() methods already listed on the RoutingContext.
Currently using endHandler is insufficient as it gets overwritten if used somewhere else in the codebase for the same routingContext. Leading to the add terminology and behaviour
Use cases
A request comes in, and a client is opened to do some processing with the request. As soon as the client is opened routingContext.addEndHandler(v -> client.close()) is called, so now the client is guaranteed to be closed when handling of the routingContext ends. the handler for this context then calls next() and the next handler opens a different client and again calls routingContext.addEndHandler(v -> client.close()), so that the second client is also guaranteed to be closed.
@gmcrobert and I can work on implementing it with some guidance from someone more experienced with the codebase
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3352
Remove Future#getHandler · Issue #3352 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
and check the entire stack because it might be used
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3353
Vert.x doesn't handle Transfer-Encoding properly · Issue #3353 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
When a client sends "Transfer-Encoding: gzip, chunked", Vert.x resets the client connection without sending a response.
Do you have a reproducer?
Steps to reproduce
Start it using mvn clean compile java:exec
Make a POST request using the following curl command:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3359
Add `then` method in Promise for GraalJS  · Issue #3359 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Contribution
I will do it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3360
AbstractVerticle not havr starrt(Promise<Void> startPromise) · Issue #3360 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
AbstractVerticle start method not have promise version.
The docs says breaking changes that future is deprecatedm, and tell us to change to Promise. but the AbstractVerticle class still use Future
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3361
Shared HttpClient support · Issue #3361 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A few Vert.x clients (e.g. JDBC, Cassandra, Mongo) have createShared methods. The purpose of these creation methods is that, when you deploy multiple verticle instances, a single resource (JDBC datasource, Mongo client, Cassandra session) is created and reused.
While this requirement was obvious for Vert.x clients wrapping existing libraries, most built-in clients don't have them. So if a user has to open at most C connections to an HTTP backend, and deploys V verticle instances, it is advised to create an HttpClient with C/V as max pool size.
On the upside, the user will get maximum performance because the HttpClient will be operated on the verticle context. On the downside, the configuration process is not straightforward.
For Vert.x 4, HttpClient (and some other built-in clients too) have been made safe to use on different contexts. So it is possible to add createShared methods now.
The benefit is simplified configuration. The drawback is that this will require an extra hop between the context that actually created the HttpClient and the context using it. This should be acceptable by most apps though (the user pays at least this price when sending messages over the eventbus).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3362
SslHandskaheTImeout is not applied on HttpServer · Issue #3362 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3363
SslHandshakeCompletionHandler should use Netty promise · Issue #3363 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since SslHandshakeCompletionHandler is a netty handler it should use netty promises instead of vertxHandler
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3367
Provide Automatic-Module-Name attribute in MANIFEST.MF · Issue #3367 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Feature Description
Provide Automatic-Module-Name attribute in MANIFEST.MF file.
Use cases
Provides a reliable module name, instead of using the name derived from the JAR file, without having to target Java 9+ and/or use module-info java/class file. This can be used until there is a module-info file.
Contribution
If this feature request were to be approved I would be happy to work on it.
I believe that this change would require some additional configuration in the pom.xml maven jar plugin, something of this sort:
The 'io.vertx.core' name seems most intuitive to me, but that is just my opionion. There are some rules to take into accout when deciding on the module name to use.
Additional notes
I apologize if some issue/discussion already exists for this. I was not able to find an issue for this topic. I did find discussions about JPMS support (module-info, split packages, moditect, etc), but not automatic module name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3368
ServerWebSocket does not expose host() and scheme() · Issue #3368 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ServerWebSocket exposes  headers, query, path and uri but does not expose host and scheme
Following is answers to some questions that might be asked :)
Why dont you get host and scheme before upgrading
There are cases that we dont have control over the upgrade request. One case is graphql-subscriptions.
Why dont you get the host from the headers
Since vertx 4 supports parsing X-FORWARD headers getting host from headers directly, might not return the valid result
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3371
ctrl+c not working correctly · Issue #3371 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In all my abstract verticles I have logging in the stop method and none of that shows up when I press ctrl+c
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3372
Doubled paths using the file resolver on Windows · Issue #3372 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See:
On windows, something has changed in the file resolver between 3.8.5 and 3.9.0:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3373
TCP server lifecycle unification · Issue #3373 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Rework TCP server implementation to share server lifecycle and management code between NetServer and HttpServer, noticeable changes:
TCP server metrics are instantiated a single time per server instead of several times like it used to be
TCP server does not maintain anymore a connection map and instead uses a ChannelGroup to close open sockets
the HandlerManager class has been reworked in a ServerChannelLoadBalancer that will do the actual channel initialisation and close open sockets
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3374
Async client close · Issue #3374 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient and NetClient don't provide asynchronous result of the client close operation. We should add them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3375
Does EventBus have a unified message decoder for non-clustered environments · Issue #3375 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Now I have to write an encoder for each pojo, but they are only used in a non-clustered environment. Is there a better way? Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3376
File resolver should not cache cacheable entries with an invalid name · Issue #3376 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The file resolver assumes URL returned by the current class loader leads to valid cache names. A class loader might returns an URL for an un-cacheable file name and in this situation we should assume such file does not exist because we cannot cache it.
We could attempt to cache the file and replace the faulty char with another one, e.g replace \u0000 by _ on unix, but that would lead to potential collision and lead to security issues. For the moment such issues mostly never happen in practice and it is therefore better this way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3377
An infinite loop in VertxHttpHeader while add and remove entry in iterator · Issue #3377 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
As the title said,if you remove a entry and then add another one in a iterator loop, you will encounter with an infinite loop.
Do you have a reproducer?
a simple example to reproduce this issue :
I think this issue is caused by the circular linked list,just break the circular and this issue could be solved.
I would like to provide a PR if you don't mind.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3378
Clarify that HTTP keep alive value 0 means no eviction · Issue #3378 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently it is unclear about what setting HTTP keep alive value to 0 means. This specific value should imply that the connection is not evicted from the pool until it is closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3379
Pool delegates the validity check for checking connection closing · Issue #3379 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the Pool manages the expiration time stamp and use a clock to check the connection shall be closed when it remains too long in the pool. The pool now delegates this check to the ConnectionProvider allowing the provider to provide a custom policy.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3380
Async file drain handler shall not be cleared after drain · Issue #3380 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The AsyncFile implementation clears the drain handler after it has been called assuming the caller will set it each time WriteStream#writeQueueFull() returns true which is not always the case. Other implementations behave this way and AsyncFile shall align on this (less racy) behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3382
HTTP/1.x client connection shutdown · Issue #3382 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP/2 supports a graceful connection shutdown that relies on go away frames. We can provide a degraded support for HTTP/1.x for client connection that will have a similar effect since the client initiates the requests.
A HTTP/1.x client connection shutdown evicts the connection from the pool and waits until all current requests are terminated to close the connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3385
wmic deprecated in win10 · Issue #3385 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
In method io.vertx.core.impl.launcher.commands.StopCommand.terminateWindowsApplication:
since WMIC is about to sunset in future, and already deprecated in Win 10, one of our interns are using win 10 and found this issue, so should we use Get-CimInstance to replace it?
We are using Windows 10 & vertx-maven-plugin to build vert.x project and it breaks when redeploying the project using vertx-maven-plugin
while it works in macOS
Contribution
@tsegismont may help solve this issue
original issue: reactiverse/vertx-maven-plugin#205
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3387
ALPN not available for JDK SSL/TLS engine · Issue #3387 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I created a simple grpc application with ssl on vertx  but got error (my mac osx:v10.14.16, openssl : v1.1.1f, vertx 3.9.0)
the sample code:
the jks file is copied from vertx-examples and pom.xml looks like below(I just modified some senseitive info):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3389
Message consumer is not anymore a write stream · Issue #3389 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vert.x 3, the MessageProducer interface extends the WriteStream interface and provides limited support for message back-pressure. In practice credit leak might happen leading to a depletion of credits in the producer that won't allow to emit messages.
The MessageConsumer will continue to extend ReadStream and will drop messages when the consumer is paused and the pending message queue is full. This allows to continue supporting the nice integration with Rx generators for building message consuming pipelines.
Point to point message streaming over the event-bus will be introduced in Vert.x 4 to provide a supportable solution to replace this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3391
OpenJDK 8 ALPN support · Issue #3391 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Recent OpenJDK versions do provide ALPN support which was back-ported. Vert.x do not support this, nor the version of Netty it uses.
Netty supports it in 4.1.49.Final and we should upgrade to this version in Vert.x
A possible work around is to override the Netty dependency with 4.1.49.Final in Vert.x 3.8.5 and 3.9.0 although this has been tested only with Vert.x core.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3394
Json.encode(pojo) throw UnsupportedOperationException · Issue #3394 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I write a simple pojo class，and then call Json.encode but throw UnsupportedOperationException
Context
test vertx JsonObject usage
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3395
Vertx AddressResolverOptions TTL issue · Issue #3395 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am setting VertxOptions for AddressResolverOptions TTL to reduce the default Max TTL to 30 seconds.
While testing the TTL change, I am seeing an issue where if the Min TTL is not set or set to lesser than Max TTL value, MaxTTL does not take effect.
For testing, I alternate between the host entry with two different ip addresses but the change in IP does not reflect without application restart.
for e.g. This does not reflect the host change after 30 sec,
Whereas, if I set min TTL > max TTL, host ip change gets reflected, without application restart.
for e.g. These values work: cacheMaxTimeToLive =30, cacheMinTimeToLive=35
Here is the code snippet:
AddressResolverOptions addressResolverOptions = new AddressResolverOptions().setCacheMaxTimeToLive(cacheMaxTimeToLive).setCacheMinTimeToLive(cacheMinTimeToLive); vertxOptions.setAddressResolverOptions(addressResolverOptions);
and setting Vertx Options Vertx.vertx(getVertxOptions())
Which version(s) did you encounter this bug ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3396
File descriptor leak when sending files for H2 and Net · Issue #3396 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Send file of Http2ServerResponseImpl and VertxHttp2NetSocket do not close the file when sending is complete thus resulting in a file descriptor leak
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3397
Improve JSON handling in Java · Issue #3397 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
JsonObject and JsonArray don't share a common Base which makes the handling of JSON that could be either of it a little painful. With a few enhancements Json processing could be smoother
The shared interface
and then:
as well as getJsonBase in both classes
Contribution
I could give it a stab, which branch should I fork. Only interested in 4.0 ff
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3398
Expose the decoder via HttpRequest API · Issue #3398 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Currently, HttpServerRequest provides setExpectMultipart(boolean) to allow for application developers to configure the request to be parsed using a multipart parser. However, this is currently tied to a specific decoder configuration[1][2]. The decoder itself is configurable via the io.netty.handler.codec.http.multipart.HttpDataFactory.
Proposal : Rather than tying the decoder to a certain implementation, I propose that we should expose the ability to set a custom decoder to parse the body.
Use cases
Allows the application developer to plugin application logic into the parsing steps exposed by the io.netty.handler.codec.http.multipart.HttpPostRequestDecoder (using a custom io.netty.handler.codec.http.multipart.HttpDataFactory) or even supply a custom io.netty.handler.codec.http.multipart.InterfaceHttpPostRequestDecoder.
I have seen a use case for this where my application logic requires reading the parts that are read so far. I could hook into the parsing logic to collect this information as the parts are read. This could allow for validation throughout the parsing process rather than doing it at the end. Also, allows for using the data/parts received so far to parse the data/parts that follow.
Currently, part of multipart processing logic is exposed via the upload handler (in HttpServerRequest). This update would allow more freedom to parse the non file parts as well.
One other situation I ran into is where some of my file uploads were coming in with an unexpected charset encoding in the part's Content-Type header. The default factory would fail processing such attributes (In this case, it was a bad charset value which the application does not care about). So, ability to configure the decoder with a custom HttpDataFactory could allow bypass such scenarios in an application friendly way.
Contribution
If we get a consensus here, I can make the required changes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3399
Timeout Errors · Issue #3399 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We have few services exposed over vertx and there is a read timeout of 1s.
Whenever a service becomes slow due to issues on the backend, we get timeout errors which is expected: The error message is: The timeout period of 1000ms has been exceeded while executing GET .... for host ...
But even after the service recovers, we keep getting timeout errors continuously and now the requests do not even reach the service. Seems the requests are timing out from some internal queue. It's only after a restart that the issue gets resolved.
Extra
Basically, we are using apiman (https) as an api gateway to expose services and it is built on top of Vertx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3400
HTTP/2 requests pending after connection crash · Issue #3400 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
In a microservices application, we are doing an HTTP call from Gateway to specific service which is streaming a file directly back to HTTP response. When a user crashes its connection while streaming, a Vertx exception (io.vertx.core.VertxException: Connection was closed) is not caught immediately. We can see this error in logs only after the WebClient idle timeout ends. By the time, if WebClient is configured with HTTP/2, the next HTTP requests are pending. If WebClient is configured by default with HTTP1, it is fine, the next requests are ending.
Full description is here.
Do you have a reproducer?
Yes.
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3402
Build failure on PowerPC ppc64le architecture · Issue #3402 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to build the master branch of vert.x on Ubuntu:16.04 ppc64le. I have built netty, netty-tcnative, hawtjni from source, however the build fails with 361 failures, and 659 errors.
Following is the detailed error-ed log:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3403
CompositeFuture all(List<Future> futures) do not call onsuccess method. · Issue #3403 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At present, CompositeFuture#all only a handler is passed in setHandler. When all Future is finished, the Handler. is called. Because CompositeFuture inherits Future, there is onSuccess method. Do we consider calling onSuccess after all Future is completed?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3404
4.0.0-milestone4 on Ubuntu 18.04 · Issue #3404 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Context
I encountered an exception which looks suspicious while unit testing on Ubuntu; however it works fine using macOS Catalina Version 10.15.4
Do you have a reproducer?
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3406
Event-bus protocol versioning / scoping · Issue #3406 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x 4 will ship with a new version of the event-bus wire protocol as well as cluster manager topology usage. We should have a way to isolate / detect invalid protocols.
An approach could be to have each event-bus node declare the protocol it handles when it publish its node in the cluster manager.
A solution leveraging an initial handshake at the wire level would be more difficult to implement because the initial version does not have such handshake. The cluster manager declarative solution would have the benefit to detect invalid nodes earlier too.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3407
setExpectedMultipart  error · Issue #3407 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in vertx-core document:
but in prev version work truly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3412
Fail Message:RedisClusterClient does not handle command ping, use non cluster client on the right node. · Issue #3412 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3414
HTTP/2 header frame missing flush · Issue #3414 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP/2 connection is missing an explicit flush when writing an header frame that might cause in not sending fully a response when a trailer frame is used for ending a stream.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3415
Cluster manager leave method invoked before all unregistrations completed · Issue #3415 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When Vert.x is closed, all its event bus registrations are removed.
But the EventBusImpl#unregisterAll method does not take a callback nor return a future.
So it happens that the method returns, then later the cluster manager leave method is invoked before all unregistrations are completed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3416
java.lang.IllegalStateException: Result is already complete: failed · Issue #3416 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Description
We got new exception after updating Vert.x from 3.9.0 to 3.9.1
Tested with:
On the Vert.x 3.9.0 there is no this exception (with Netty 4.1.49.Final/4.1.50.Final).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3417
Resource lifecycle improvements · Issue #3417 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The core client lifecycle (HttpClient and NetClient) is correctly not bound to the Vert.x instance, i.e some clients might be not closed after a Vert.x instance is closed. This can raise an issue when a client is closed afterward and the related resources (event-loop) are not available anymore resulting in tasks rejections (exceptions).
Such exceptions can also be triggered by client finalisation that attempt to close a client when it is not referenced anymore.
any client will be closed when the creating scope is closed which can be
the verticle that created this client
the vertx instance
the event-bus (that creates net client)
the referenced client should not prevent GC gc-ing them when they are not reachable anymore which imply that the close hooks should use weak references
a few useless finalisers are removed because there is no need to clean anything
non deployment context do not need to create a close hooks because they will not be closed and thus we don't need to create useless objects
TCP servers don't need to to be closed anymore in the vertx close process as they can be added as shutdown hooks of the vertx instance (that is a simplification)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3419
Restore ability to measure number of scheduled, but not yet run, EventBus handlers. · Issue #3419 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
This lies somewhere between bug and feature.  In Vert.x 3.9.x the call to EventBusMetrics.scheduleMessage was moved from EventBusImpl.deliverToHander to HandlerRegistration.handle.  The call to EventBusMetrics.beginHandleMessage remains where it was before.
With the old placement it was possible to measure the number of EventBus messages that had been received and turned into Netty tasks, but which had not yet been run by Netty (since the call to scheduleMessage occurred before the task was created and the call to beginHandleMessage occurs only once the task has started running).
With the new placement this is no longer possible.  The only thing you can measure is the depth of the internal pending queue, which will only be used if the event consumer is paused for some reason (which our application never does).
If possible we would like the old capability restored in some fashion.  If it isn't feasible to move the call to schedule back where it was, then perhaps a new entry point to EventBusMetrics could be added to replace it.  The inability to measure the number of backlogged tasks hampers our performance analysis.
Use cases
Understanding (in detail) how work is flowing through the system when running at high throughput rates (>100K/s) is critical to both application tuning and provisioning.  The Netty task backlog is an important metric in understanding when and where incoming work is overwhelming the system's ability to process it.  Netty itself provides very little in the way of instrumentation so measuring it via Vert.x was the best we could do.
Contribution
I would be happy to contribute this change, though I've never done any work on the actual Vert.x core (I do have a current Eclipse contributor agreement).  Beyond that I don't know who the appropriate person might be to do the implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3420
HttpClient/WebClient not closing connection after request done. · Issue #3420 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I am using ServiceDiscovery to publish httpclient/webclient record. But find out connections is not closed. And it consume all my client ports rapidly and report "cannot assgin address" error.
Version
reproducer
Steps to reproduce
refresh browser, see "open-connections" counter, it grow every refresh and no release at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3421
Extend AsyncMap supported key/values types with codecs · Issue #3421 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
At the moment AsyncMap-s provided by SharedData have key and value type restrictions: primitive types, java.io.Serializable and io.vertx.core.shareddata.impl.ClusterSerializable. None of these could be used for POJO objects that doesn't implement Serializable (ClusterSerializable is internal interface - so it's very unlikely someone to implement it).
Support for AsyncMap key.value types could be extended using the same approach used in EventBus - by registering codecs. Codecs in both cases could even use the same interface - after all they would serve single concept - serialize and deserialiize custom objects.
Note: If such support is added, vertx could auto register codecs for JsonObject/JsonArray/Buffer instead of implementing ClusterSerializable (which is not public class and seems little strange in the documentation) . Probably ClusterSerializable could be even removed.
I don't see in current SharedData doc any notice which types are supported. And it would be little hard to explain because of internal ClusterSerializable.
Note: Event bus supports byte[]. There's no reason for AsymcMap to do not support byte[] as value type (at least to have similar supported types for event bus and AsyncMap)
Use cases
Having a cluster wide async map with key.value types that are legacy or not in developer control e.g. POJOs.
Contribution
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3422
Jackson Databind is still required for parsing json file · Issue #3422 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
java.lang.UnsupportedOperationException: Mapping is not available without Jackson Databind on the classpath
Seems like JsonObject.mapFrom operation still need jackson databind dependency while vertx-core won't automatically import this dependency for 4.0 - m4
if we manually add this dependency, it won't throw exceptions
Do you have a reproducer?
it happens in our open source project:
if we place a json config file(config.json) and main verticle will load the file and then parse it into json format and it will fail without jackson-databind dependency
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3426
Provides feature that can be implemented using a customize Clustered-EventBus · Issue #3426 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The "VertxImpl.java" constructor method force to create default ClusteredEventBus implementation, there is no way to create my specific implementation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3427
Ensure EventBusMetrics message schedule event is called before the event-loop action · Issue #3427 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The EventBusMetrics#scheduleMessage method was changed to be called on the event-loop in order to avoid incorrect counter in metrics implementations (that needed to compensate and correct the counter value) when a message consumer is unregistered.
It is more interesting to have the event delivered on the thread scheduling the delivery action on the event-loop as it provides a better observation of the latency of a message dispatch after is has been received.
We should compensate a consumer unregistration with a discard message event so the metrics implementation will be aware of this and compensate the actual value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3430
Context affinity for non Vert.x thread · Issue #3430 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x 3 creates a new instance of io.vertx.core.Context each time it is called from a non Vert.x thread. In Vert.x 4 we use a future model and this model does not work well for code wrapping Vert.x objects and compose them, e.g
When this is executed from a non Vert.x thread, two contexts will be created and the final result might be on either context.
This feature associates non Vert.x threads with a context the first time a context is created, hence allowing:
This does is not a breaking change per se, since the getOrCreateContext() method either create or return an existing context. The only affected code will be code that relies on this implementation detail to create contexts instead of using a Verticle.
The implementation uses weak references to keep track of the context in the thread local to allow releasing contexts when the thread ends, although this is not a realistic use case.
Consequently, the trick in the event-bus that uses a specific contexts for ordering messages sent from a non Vert.x thread is not necessary anymore and it can simply use the context without worrying of this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3432
Prune verticle deployement metrics · Issue #3432 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Remove the metrics SPI verticleDeployed / verticleUndeployed events. Such events are not really in the scope of what metrics should measure. They are removed in Vert.x 4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3433
Vertx http client endAwait function hangs execution · Issue #3433 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Calling endAwait on the vertx http client causes the program execution to hang and not proceed
Do you have a reproducer?
It does work if I change the endAwait to just end - which might be ok? Not sure if I can call end directly in a suspend function [blocking?]
But even if I call endAwait - after finishing the code in the handler it should proceed to the next line
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3434
Enable service loadable external ExecutorService Factory via SPI · Issue #3434 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Provide an SPI Interface for an executor service that can be used to fulfill executeBlocking requests and Java service load and use an implementation of the SPI that is found on the classpath at runtime.
I want to be able to run a Vert.x application in a managed environment that makes use of Vert.x in its implementation to run 'blocking' work asynchronously but I need to be able to control various aspects of the threads and threadpool that is used in order to be able to maintain my requirements on system management, tuning and so on.
As I do not have direct control of the application source code I want to be able to get
Vert.x to use my executor service without making changes to the current Vert.x APIs
or requiring the application to call any new APIs.
I do not want to have a large surface area of new API's for tuning and thread control in Vert.x that I have to get approved, implement and then call and I also want to ability to handle more than one Vert.x application that issues executeBlocking calls in the JVM at one time. I want to be able to externalize my configuration in a way that is idiomatic to my environment and this can be acheived by encapsulating this in my own implementation of the SPI.
Similarly, I do not think I have a requirement to interject at the level of the Context class
(or the class that implements executeBlocking). I want to continue to have Vert.x handle
such issues as 'ordered', metrics plug-in points, handler callbacks and so on.
However, SPI insertion 'after' task queueing is too low level, as to maintain recognisable interfaces in the SPI we would probably 'wrap' any Callable/Runnable that gets submitted inorder to retrieve what contexts we needed when it was run.
It may make sense to have the SPI as a vanilla ExecutorService and leave in place
the Vert.x WorkerPool in order for that to handle metrics or other related requirements
but have WorkerPool::executor return the service loaded ExecutorService that has
been loaded off the classpath.
OpenLiberty embedding Vert.x
The first use case I have for this is to use it to enable the @Blocking annotation in
SmallRye Reactive Messaging 2.0+ in the context of the Liberty application server.
Note that as the service loaded ExecutorService may have a thread pool that grows
and shrinks, although Vert.x may schedule ordered=true blocking tasks one at
a time it may not be possible to run all tasks from a single Vert.x context on a the
same thread from the pool.
The SPI could be the standard j.u.c.ExecutorService but it is probably better to have
a Vert.x specific interface that can be used to obtain the ExecutorService as well as to provide better support for 'named' worker pools being backed by the external ExecutorService.
All being well with my employer, I would be happy to implement a PR for this feature along with the normal level of test and documentation assets using the standard Vert.x processes.
This is different from #1539 (apologies for typing so much text in that issue)
as this feature is simpler and explicitly avoids API changes in Vert.x
which is a useful feature for our use case.
Of interest is that Netty 5 will switch to using a Executor/ExecutorFactory  in place of a ThreadFactory which would enable the loaded ExecutorFactory to be used for all Netty tasks.
( /netty/netty#2250 ). However, according to this "There is currently no clear timeline for Netty5"!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3435
`listenMulticastGroup` is not ready when the handler succeeds, tests exhibit flakiness · Issue #3435 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
listenMulticastGroup isn't ready the first time it is invoked on a vertx instance when its future completes. Delaying for an unusually long time seems to work around the issue.
Do you have a reproducer?
Steps to reproduce
Listen to a multicast group.
Send a packet from another udp socket to that group (socket "sender").
Observe that sometimes, the recipient does not receive the message even though the future indicating it is listening has completed.
Observe that injecting the vertx instance using vertx-junit5 100% reproduces the issue on the first invocation when no delay is used between completing the listening future and sending the packet.
Observe that the next invocation, which also uses no delay, even when a different port (multicast group) is listened to, the test passes.
Observe that on my machine, the minimum delay for the first invocation appears to be about 952 +/- 3ms. Not sure of the significance of this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3436
`listenMulticastGroup` doesn't work with a null NetworkInterface · Issue #3436 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
listenMulticastGroup throws a NullPointerException when it is called with the listenMulticastGroup(string multicastAddress, Handler<AsyncResult<DatagramSocket>> handler) signature.
Do you have a reproducer?
Steps to reproduce
Create a udp socket (socket "receipient").
Listen to a multicast group with the specified overload.
Observe a null pointer exception (see below).
Observe that heuristically choosing an interface works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3437
Java 14: Failed to create a new resolver · Issue #3437 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Which version(s) did you encounter this bug ?
I encountered an exception which looks suspicious while ...
Do you have a reproducer?
This is my test code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3438
Race Condition in HttpClientImpl.getConnectionForRequest, ConnectionManager.getConnection · Issue #3438 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the Vert.x 4.0.0-SNAPSHOT stack with an AdoptOpenJDK 11.0.7 on Ubuntu 20.04. The first time I encountered this was with a Hazelcast-managed distibuted Vertx system (with only one node) with both a standard HTTP server and a vertx-grpc server running on two different ports (both with TLS/SNI enabled). After making a few successful calls to both, I closed the client (cleanly) and I let it rest for a few minutes. Then the console started to output that same error at what seems to be a sub-second interval :
Now I get it everytime I let the system run overnight. I'm the sole user of the system.
Does this ring a bell ? I can't try to use it with the 3.x stack because the Vertx-grpc has a completely different codebase fo 4.0.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3440
Router path matching does not match documentation · Issue #3440 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx-web 3.9.1, but it seems present since 3.8.3
The documentation in https mentions that a route with path /some/path/* should match a request to /some/path but it does not. It did match before (at least in version 3.7.1) and thus this bug introduces a backwards incompatible change, in addition to the mismatch with the documentation.
I believe this was introduced in vert-x3/vertx-web@628f49c
Do you have a reproducer?
Make a request to /some/path
Nothing relevant
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3444
testListenInvalidPort fails on OSX  · Issue #3444 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On the master branch but also on 4.0 milestones and 3.9.1
mvn clean install fails as the testcase testListenInvalidPort assumes that it is
not possible to bind to port 7 (echo). It is possible on OSX.
Do you have a reproducer?
on OSX 'mvn clean install' on the master branch of this project
Will fail.
Steps to reproduce
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3448
Vertx web client sends server cookies back in multiple COOKIE headers and not anymore in a single semicolon separated field. · Issue #3448 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
Context
Vertx web client sends server cookies back in multiple COOKIE headers and not anymore in a single semicolon separated field.
As a result server handle only one cookie. It cause authentication/session issue.
Do you have a reproducer?
There is cookieTest which fails as server handle only one cookie ("testName", "testValue")
Steps to reproduce
clone test project
execute cookieTest. Check that web client sends to server http endpoint "/cookieCheck" cookies back in multiple COOKIE headers and not anymore in a single semicolon separated field.
As a result server handle only one cookie ("testName", "testValue").
It is implemented with Vertx server. But external production server do the same - handle only one cookie
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3449
Ignored WebSocket sub protocols in http client · Issue #3449 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Which version(s) did you encounter this bug ? 3.9.1
When using the setSubProtocols method defined in WebSocketConnectOptions and passing those options to rxWebSocket, I expect the websocket request to contain the sub protocols I specified. However, vert.x does instead send the sec-websocket-protocol header in the handshake set to null.
Do you have a reproducer?
No, but should be trivially reproduced in a test.
Steps to reproduce
Define WebSocketConnectOptions with websocket sub protocol.
Establish WebSocket connection with some server.
Print headers in server, you'll see "sec-websocket-protocol" -> "null" among other valid WebSocket handshake headers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3450
Add control over websocket header case · Issue #3450 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Add control over websocket headers case
Version
I use quarkus 1.4.1.Final
And it uses the netty-all:5.0.0.Alpha2
Context
Netty set all the headers with the lower case. e.g : sec-websocket-key.
I have a PHP websocket server the handle the header with a specific case :
This is why I got  : original problem
This is related to this post
An interesting read about headers case : this post
Do you have a reproducer?
Steps to reproduce
Have a WebSocket server which handle the headers is specific case way (PHP in my case)
Create a websocket client with vert.x
Try to make a connection
In whireshark I ve seen that I don't get the 101 Switch Protocol response as expected.
This is due to the wrong header case
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3451
Worker executors should be created with specified time unit · Issue #3451 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 3.9.1
I set the max worker execution time at Vertx creation as such:
but then found these warnings in the logs:
on a worker executor created with default options:
This is because the short version of the createSharedWorkerExecutor method uses the specified time amount, but the default time unit. This can be fixed by applying the patch below.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3452
Same password is used for KeyStore and entry · Issue #3452 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Using the io.vertx.core.net.PfxOptions it is possible to provide a "password". However, later on, in io.vertx.core.net.impl.KeyStoreHelper.create(VertxInternal, KeyCertOptions) this single password is being used for both opening the "key store" as well as opening the "entry" in the key store. However, this can be two different passwords.
So it is not possible to use an existing keystore, which has a different (or missing) password for one of the entries.
Do you have a reproducer?
Steps to reproduce
Run the reproducer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3453
vertx4m5 service proxy codegen error on windows · Issue #3453 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3454
Remove CaseInsensitiveMultiMap · Issue #3454 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The CaseInsensitiveMultiMap implementation duplicates the logic currently in VertxHttpHeaders. The VertxHttpHeaders class is renamed to HeadersMultiMap and uses an optional validator for the entries and can be used instead CaseInsensitiveMultiMap.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3457
Consider failing when number read from JsonObject would overflow · Issue #3457 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
When reading a big number from a JsonObject the result may overflow.
I expect it to fail when it happens. Currently it succeeds silently with wrong value returned.
I believe this is dangerous for the majority of the use-cases. Same applies for JsonArray.
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3460
Add Http PATCH support to HTTPClient · Issue #3460 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Currently, HttpClient does support PUT, POST DELETE and GET. the PATCH method is not supported.
Use cases
Use the HTTPClient to submit patches through the JSON Patch format, using the corresponding HTTP verb.
Contribution
Pr incoming
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3464
M5: Prometheus uses call no longer supported in Prometheus 1.5.1 · Issue #3464 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We use Prometheus both for vert.x and application metrics. So our POM includes:
With micrometer.version = 1.3.5 all works, when upgrading to 1.5.1 (current version) vert.x start fails:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3465
Mix between HTTP/1.1 and HTTP/2 weight in HttpChannelConnector · Issue #3465 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think there is an typo-kind of error in HttpChannelConnector when assigning http1Weight and http2Weight. HTTP/1.1 weight is using the HTTP/2 pool size, and things are inverted for HTTP/2 as well.
3.9.1 but seems 3.8.5 has the same code so maybe earlier versions are impacted
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3467
Client metrics · Issue #3467 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The metrics SPI supports metrics reported by Vert.x HTTP client. We should abstract this interface so any kind of client performing a request/response can report events that can be derived to compute request/response latencies.
The HTTP client metrics will be reworked to use this generic client metric interface. The endpoint lifecycle is replaced by the usage of the ClientMetrics interface and thus ClientMetrics are created and destroyed when endpoint are created / destroyed by the HTTP client.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3468
Thread blocked in io.vertx.core.net.impl.clientconnection.ConnectionManager.getConnection · Issue #3468 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While upgrading https from Vert.x 4.0.0 milestone 4 to milestone 5, we noticed a serious issue with HttpClient connections being thread blocked.. It seems to appear when connection can not be made to a remote host. Using same client and issuing another request that also fails results in a thread blocked warning and a halt of the event loop..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3469
HTTP client retry on same host can self deadlock · Issue #3469 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP client retrying the same host on a failure can self deadlock because it will close the pool after it performs the callback. It should close the pool before so when it retries and fail it does not retry indefinitely.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3470
There is a bug with multi-file uploads · Issue #3470 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
There is a bug with multi-file uploads.It may be changed the length of a boundary token.Occasional.
Example
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3471
HttpClient not able to send multiple POST request to HTTP/2 server · Issue #3471 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
We want to use vert.x for HTTP/2 client to connect to a HTTP/2 service.
We are using a single HttpClient's instance to send multiple requests to HTTP/2 service. We observe that if we send multiple GET requests, they get processed but if we send multiple POST requests, only the first one gets processed and the latter ones fail.
Do you have a reproducer?
Please read "Steps to reproduce" section  to see how to reproduce this issue from this project
Link to github project/gist
Steps to reproduce
Open the project "vertxpoc" in intellij
Under the project, open "Application" class and run it. This will bring up a HTTP/2 enabled server : http. We are using Micronaut framework, which brings up the server with self signed certificate.
Goto chrome and perform a quick check to see if HTTP/2 is enabled or not : Open a new tab in chrome, press F12 and open Network tab After this, type in "https" in address bar and hit enter.
After this, hit "Advanced" and "Proceed to localhost (unsafe)". You should see the response "Test succeeded on GET" and on you should also see the protocol "h2" being used in the Network tab.
Open VertxGetClient class and run it. This class sends 2 GET requests and they get processed all fine -- this is good enough.
Open VertxPostClient class and run it. This class sends 2 POST requests and the first one gets processed but the second one does not. We get :
Jul 01, 2020 7:31:01 AM io.vertx.core.http.impl.HttpClientRequestImpl
SEVERE: io.vertx.core.VertxException: Connection was closed
In the documentation "https:", under "HTTP/2 multiplexing", its stated that :
"HTTP/2 connections will not be closed by the client automatically. To close them you can call close or close the client instance."
So, in our use case also, we do not want to close the connection.
We want to have single connection to send multiple requests, i was hoping this could be achieved by using single client to send multiple requests as shown the project but its not working
Extra
We are using openjdk1.8
Question :
Please confirm if this is a bug. If this is not a bug, please let us know what are we doing wrong in terms of configurations etc.
Please tell us how we can have single connection to send multiple requests. We were hoping this could be achieved by using single client to send multiple requests as shown the project but its not working.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3472
HTTP client redirection does not correctly resolve percent encoded redirections · Issue #3472 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The default HTTP client redirection strategy will decode the redirect location and interpret any percent encoded URL. It should keep the redirect location intact when resolving the URI reference.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3473
Annotated data object should always be considered as data object · Issue #3473 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently @DataObject annotated are only considered as data object when they provide both a serializer and deserializer which leads to incorrect error message reporting. When a class is annotated and does not provide serializer + deserialized then it should still carry a data object with null serializer and deserializer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3474
Thread blocked with drainHandler, writeQueueFull  · Issue #3474 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
POSTing many buffers to an echoing server gives thread blocked failures when we use drainHandler+writeQueueFull approach.
The same POST with write and a completion handler does not.
Write with handler is a much simpler strategy, but from documentation it's not clear whether it's an alternative for drainHandler. In any case we cannot explain our thread blocked problems with drainHandler.
What's the best strategy for writing?
Environment
Below is a unit test with test methods drainHandler and  writeHandler. Each test sends 10 times 2 GB to an echoing server (part of unit test).
always completes and memory usage is low.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3476
File Upload failed when Content-Disposition has a "filename*" field · Issue #3476 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
when upload a nonascii named file, there's a field "filename*" in "Content-Disposition" header , then vertx will throw IllegalCharsetNameException
Version
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3477
ClassCastException in VertxHttpHeaders.add  · Issue #3477 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
I encountered a suspicious "500 Internal Server Error" when trying to add a "vary" response header with multiple header names in the value using the method add(CharSequence name, Iterable<CharSequence> values) of the MultiMap interface. Trying to create a reproducer (see below) revealed the following exception:
Do you have a reproducer?
master contains the default starter project - please take care to checkout the branch reproducer-multimap-add. In this branch, I have only modified the request handler..
Steps to reproduce
Check out the branch reproducer-multimap-add of the Github repository linked above.
Run it with mvn compile exec:java (see below about using test)
The request will hang and you'll see the exception on the console.
Even simpler: if you use mvn test exec:java the exception will already show up in the test, but the test will then be hanging indefinitely.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3478
Why does vert.x core use jdk "Files" api which are blocking? · Issue #3478 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.nio.channels.AsynchronousFileChannel (with callback) is faster
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3479
VertxHttpHeaders add(CharSequence, Iterable<CharSequence>) casts to String instead of CharSequence · Issue #3479 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of Vertx#add(CharSequence, Iterable<CharSequence>) casts the iterable elements to String instead of CharSequence leading to class cast exceptions when adding CharSequence which are not String
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3482
Expand getters of io.vertx.core.http.Cookie · Issue #3482 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to be able to read the following attributes of my Cookie object (io.vertx.core.http.Cookie):
Improves consistency with existing get/set methods on other attributes.
Enables cleaner testing of code that uses vertx for cookie construction.
Contribution
I can open a PR.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3485
Unmaintained or buggy cluster managers need to be removed · Issue #3485 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
My application uses locks with long timeouts and may scale up and down. Previously, I used a forked version of AtomixClusterManager brought into my tree. atomix appears to have the best API and cleanest semantics for clustering.
However, atomix appears to have a showstopping bug (see atomix/atomix#1077) that I reproduced when doing integration tests with my app. Long ago, I had tried the Hazelcast cluster manager, but it had many mysterious issues, sometimes related to vertx-sync, sometimes bugs, and sometimes performance regressions.
Today, I tried migrating to both vertx-zookeeper:3.9.1 and vertx-ignite:3.9.1, neither of which worked.
It uses an out of date version of org.apache.curator and org.apache.zookeeper, bringing in Netty 3. This has been fixed for 3 years.
It has bugs like vert-x3/vertx-zookeeper#100 and vert-x3/vertx-zookeeper#99
It does not appear that locks by the same name can be waited on concurrently, regardless of how many internal event loop threads are made.
It also uses a version of Ignite so out of date it does not run on Java 11.
ignite TCP discovery does not work when two or more instances are started simultaneously on the same JVM, a normal thing to attempt in an integration test.
Its locks implementation is really badly broken.
I know you are migrating to a new SPI. So maybe that will help. But overall I think the cluster managers are falling into disrepair. You may consider adopting something like atomix or building on top of etcd (like everyone else) and just fixing it as a standard feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3487
Null pointer exception in MultiMap.set · Issue #3487 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While upgrading Okapi to latest Vert.x core we encounter null pointer exceptions in io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry.remove(HeadersMultiMap.java:494)
Here's a test case that demonstrates the issue .. can be added to VertxHttpHeadersTest.java.
We get a null pointer exception in last mmap.set, due to MapEntry.before == null.
The for loop is added to get a hash collision for value of "k".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3490
Add ability to safely add path fragments to HttpRequest · Issue #3490 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Add ability to safely add path params to io.vertx.ext.web.client.HttpRequest
When coming from Spring, it's possible to use uri variables / path parameters / fragments like this:
It's achieved internally in Spring by using org.springframework.web.util.UriComponentsBuilder
It escapes non-ASCII symbols.
Suggestion is to add methods:
Use cases
When the path fragment might need to be encoded or might contain / (slash symbol), we want to safely encode it instead of unsafely concatenate the string.
Contribution
I'm volunteering.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3492
Coherence cluster implementation · Issue #3492 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
https is now open source. I'm not aware of their licence but a cluster implementation using it seems to be very interesting.
I know Vert.x 4 redesigned clustering SPI. I will study how to implement it but anyway I'd like to give this suggestion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3493
Wildcard port (i.e. port 0) should be shared when created by several instances of the same Verticle · Issue #3493 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The full details are in this Quarkus issue, but as far as I can see this is only vert.x code so I don't think the Quarkus part is relevant: quarkusio/quarkus#9890
If you set the HTTP port to 0 the every IO thread will open its own HTTP port, but only the last opened one will be reported as the actual port. For HTTPS this causes other problems as the binding is relativity expensive and happens in a sync block, so if you have lots of IO threads they all wait at the sync block and the blocked thread detector prints a warning.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3499
Interested in a Redisson-based Cluster Manager? · Issue #3499 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
For my Vertx-based application I authored a cluster manager based on Redisson (redis). It passes 100% of the tests specified in vertx-core:3.9.1:tests-jar, in addition to the currently disabled testLockReleasedForClosedNode and testLockReleasedForKilledNode tests, for both graceful and ungraceful (connection lost) node shutdowns.
I initially started with https and rewrote all of that repo since that repo did not work and was based on an outdated Redisson feature set.
I am not good with Maven; setting up a repo in the Vertx Maven pattern; or even publishing to Maven central with gradle. My experience with all of that is quite bad, so that's really all I can't do.
Additionally, once 4.0.0 is done I would migrate to its new cluster SPI after migrating my application. However this would be a vertx task probably.
Use cases
It's a cluster manager that works for all 100% of your tests.
It's integration tested with a large, live, clustered application.
It's super simple because most of the hard work is done by Redisson.
Redisson is async and netty-based, so it doesn't tie up blocking threads like Hazelcast does
Redis is easy to run and test (with Testcontainers).
Redis is very high performance.
RedisRaft was written in cooperation with the Jepsen folks.
Needs more testing around transient network issues
The approach to getting an ordered node list is not based on a proven TTL list primitive. It's likely an HA test can be authored that will not pass.
Serialization / deserialization story not great (uses something ad-hoc from the source I was adapting).
I have implemented this feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3500
HTTP client eager connect · Issue #3500 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP client design creates HTTP requests before they are actually connected which means they can be used before a request is connected or obtained from the pool. This design forces to buffer request data before leading to extra complexity in the code and race bugs.
Removing this might seem like removing some usability in the client, the impact is fine because most users seeking for usability are using the Web client that provides a different model where the stream is actually managed by the client.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3501
Decouple HTTP client stream from API request/response · Issue #3501 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The internal implementation of the HTTP client stream is coupled with the API request/response interfaces. We should clean this up and instead provide handlers to decouple both. This allow the connection to communicate with the streams using message passing more easily.
This will also introduce io.vertx.core.spi.observability.HttpRequest and io.vertx.core.spi.observability.HttpResponse used by metrics and tracing to obtain the info it needs from the request and the response without leaking the API (which can lead to reentrancy bugs). This improve the metrics & tracing contracts by providing a clear contract between the SPI and the implementations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3502
Log4j 1 removal · Issue #3502 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Log4j 1 is now very old and is an inactive project, that will not fix security issues.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3504
ClusteredEventBus 3.9 incorrectly reports No handlers for address when event bus nodes in subs map could not be connected to · Issue #3504 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Using vertx in a cloud, containerized environment, I did not set EventBusOptions#clusterPublicHost and EventBusOptions#host. Consequently I was seeing traces for eventBus.send that read (NO_HANDLERS,-1) No handlers for address.
The actual issue was that the ClusteredEventBus was silently failing to deliver locally because:
For all nodes, the hostname localhost was used as the cluster host name so
ClusterNodeInfo was equal for all nodes, so
A local delivery was attempted instead of throwing a connection error
Do you have a reproducer?
No, but the correctness issue can be see here, in 3.9 but not 4.+
Consider what happens when all server IDs are the same:
Observe that in 3.9 vertx will incorrectly try to deliver the message locally instead of trying to sendRemote and failing.
4.0.0:
Conversely here we will see a connection error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3505
Doc typo at https Wiki verticle initialization phases: void -> Void · Issue #3505 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Context
Do you have a reproducer?
Steps to reproduce
Anythig that can be relevant such as OS version, JVM version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3507
WebSocket writing prevents Idle timer timeout · Issue #3507 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Sending data on a WebSocket client prevents the idleTimeout from triggering. According to the Vertx dock, Setting idleTimeout on HttpClientOptions should trigger a connection closed if:
"This determines if a connection will timeout and be closed if no data is received within the timeout."
However to me it looks like the behavior is if no data is neither received nor sent.
In the Vertx HttpChannelConnector class in the applyHttpXXConnectionOptions method on row 171 and 176:
Looking through the Netty dock for the IdleStateHandler class:
I.e. reader idle time and write idle time is set to 0 and all Idle Timeout is set to the specified value which comes from the HttpClientOption. This should then result in that either writing or reading from the channel will reset the timer and prevent timeout.
Changing the constructor call in the HttpChannelConnector class to:
We had a production incident where we didn't understand that the peer WebSocket server was down. This seams to have been triggered by that we send WebSocket ping frames that then prevents the idle timeout from triggering. We didn't validate that we were actually receiving WebSocket pong frames since we thought we didn't need to with the idle timeout set.
Do you have a reproducer?
Yes, it is not 100%, we believe our production issue was caused be a dropped tcp session on the network and not that we sent data as in the unit test but according to the Netty code this test should trigger the same behavior:
Either writing data or sending ping frames (which was what we were doing) prevents the test from succeeding.
Steps to reproduce
clone the repo
The test will fail after 4 seconds from a unit test timeout
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3508
Distributed transaction · Issue #3508 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently I am tring to choose some reactive framwork to rebuild my springboot project.
What I am care about is: porformance, transaction.
Before Vert.x I already do some research about AxonFramword and Lagom.
Both of them are reactive and distributed-transaction supported.
Vert.x have more user and stars then them.
But seems there is no topic about distribted-transaction with Vert.X.
I don't know why?
Does Vert.x going to provide some distributed-transaction features in the future?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3510
Proper defaults for cache directory · Issue #3510 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The default cache directory has two issues regarding system integration on Linux.
Issue 1: It falls back to /tmp/vertx-cache, which is absolutely in the correct directory for temp files, but being solely static binds the directory to the user being first on the system to start up any vert.x based Java. Every follow-up user is being denied write-access (as is policy and correct) and greeted with a cryptic message (which does not contain the directory having the issue).
Issue 2: This even creates a persistent problem, since vert.x seems to not care to remove the directory when its process is shutting down.
My proposal is as follows:
a) using a dynamic & unique component to the name used, like /tmp/vertx-cache-$(md5($USER$PID$TIME))
b) specifying the directory in the error message, if there's an access issue and
c) removing it in the end, for /tmp is not a trashheap, even if it is cleaned during system boot
Why $USER, $PID and $TIME?
Systemd is able to start processes simultaneously, so only using $USER and $TIME is likely to produce hash collisions. $PID is guaranteed to be different, so in theory it would be sufficient to just add the PID, but then forgetting to delete the directory during termination (or being killed with -9 and not being able to) might result in future processes reusing the PID and have the problem again. Adding $USER would mitigate that or at least only lead to the new process finding ancient stuff, but since that might not be desireable, $TIME adds that extra safety clip on top. Hashing the whole shebang is just to not blatantly giving everyone the information which process is using the directory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3513
Doc 3.9.x deprecate the Future setHandler and it is always in the dev doc · Issue #3513 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Version
Context
Do you have a reproducer?
A reproducer is a simple project hosted on GitHub (or another forge supporting git clone operation) that has a build file that can be executed to reproduce the issue.
Reproducers are very helpful for contributors and will likely help them fixing your bug faster.
Link to github project/gist
Steps to reproduce
Anything that can be relevant such as OS version, JVM version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3514
Attach metrics to an existing Vert.x instance · Issue #3514 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
It could be interesting to provide a way for users to attach their metrics configuration on an existing Vert.x instance instead of requiring to create the Vert.x instance with the appropriate options.
Use cases
The Launcher
The first use-case is the lack of ability to use the Launcher class out of the box when wanting to set-up metrics.
There are a few workarounds to this use-case (JSON, or extending the Launcher class) described below.
A verticle deploying another verticle
Verticle A deploys Verticle B.
Verticle A has no metrics configuration. Maybe was created by the launcher.
Verticle B needs to publish metrics (a web server, database access, etc.)
There's no way for verticle B to "hook" onto the existing vertx instance to register its metrics. Vert.x has NOT been configured to publish metrics.
Issues?
Not sure what should happen if we change a little bit use-case number 2: Verticle A registers metrics, deploys Verticles B that registers a different set of metrics (let's say it discards event bus metrics in favor of HTTP or TCP metrics). That would need a kind of "merge mechanism" (or reconciliation algorithm, or something like that)  hopefully not complicated (but... could be).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3515
When the NUMBER of TCP connections exceeds the number of logical cores, it is always in a waiting state · Issue #3515 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I have some old project code that uses tcp, and I want to use vertx-tcp to proxy them.
I use tcp server and client as a Proxy,tcp-server is running at 8080,tcp-client is running at random port.
when set the verticle instance number greater than or equal to logical cpu number,tcp connection is always waiting.
In my environment, the number is 12, when set the TestVerticle instance number < 12,it can proxy tcp.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3516
Caused by: org.jvnet.mimepull.MIMEParsingException: Reached EOF, but there is no closing MIME boundary · Issue #3516 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Vertx Webclient is throwing the above exception for multipart/form-data content-type
Version
The service receives the multipart request from mobile client and passes on the request to downstream service for uploading the image. Service is throwing
Do you have a reproducer?
A reproducer is a simple project hosted on GitHub (or another forge supporting git clone operation) that has a build file that can be executed to reproduce the issue.
Code snippet of WebClient code
API signature of my downstream service
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3517
HTTP client request/send/process flow · Issue #3517 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClient returns Future<HttpClientResponse> in the API and such design can lead to racy situations. Rather than preventing this with a work-around we want instead to disable them by design at the expense of usability.
Instead we provide only the request method that returns a Future<HttpClientRequest> that helps to avoid such situation:
Note the new send method which has been introduced to send a request (overloaded with a body) and lead to an HttpClientResponse. The write/end methods are considered lower level as they return async result only for their own operation as this is inherited from the WriteStream interface.
NOTE 1: this is not a silver bullet and writing this can exhibit the same behavior
NOTE 2: when the client is confined within a Verticle then this behavior does not happen.
NOTE 3: we clearly assume that users that want an high level API will or are already using the WebClient, however some users are using the HttpClient when they need low level operation and fine grained control (like writing a proxy).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3520
[DNS Client] Access to more DNS features via Default DNS Client · Issue #3520 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Have the ability to send DNS queries with additional records (e.g OPT).
I am using vertx's DNS client to retrieve a list of servers. I noticed that via the client, I received a maximum of 3 servers even if there are more (with each DNS request, the IPs change).
I can achieve this with the section DnsSection.ADDITIONAL and the record DefaultDnsOptEcsRecord in the private io.vertx.core.dns.impl.DnsClientImp.Query class
But this class is not available... The only way to achieve this is rewrite the original DnsClient.
Use cases
Increase the max payload size for responses (and get more than 3 servers)
Add any available records
Contribution
If this feature is interesting for the community, I can draft something
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3521
HTTP server response reset for HTTP/1.1 · Issue #3521 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Stream reset is defined for HTTP/2 only. However in HTTP client we provide a best effort implementation of this method that will close the connection or release it to the pool when it is possible (e.g the response has been already received or the request has not yet been sent).
We should do something similar for HTTP server and close the connection when the response has not been yet sent and nothing after the response has already been sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3522
HttpServerResponse reset should return a boolean instead of throwing an IllegalStateException · Issue #3522 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpServerResponse#reset throws an IllegalStateException when the response has already been sent. Instead we should return a boolean indicating whether the stream was reset. This is the current behavior for HttpClientRequest.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3523
[DNS Client] Wrong IP when resolving many domain names (conflict) · Issue #3523 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I encountered an unexpected response from the DNS Client while requesting ip for 4 domain names. Every x seconds, I'm checking the IP for 4 domaine names...
Sometimes I got an error DNS query timeout for xxx and the IP for the domain xxx is affected to another domain yyy
This is due to inProgressMap and the random id.
DNS is using UDP, so the only way to know which answers corresponds to which query is by using id... So here we are caching queries in a map by their id.
But with random ids, we can possibly find the same twice in a row...
And in this case, the previous query will be overridden.
Do you have a reproducer?
Yes, MainVerticle.java
Steps to reproduce
Start your onw DNS server (do not DDoS Official DNS servers...) I'm using consul
Start the MainVerticle
In general the issue appear between 1 and 5 minutes. You will see something like Wrong ip due to id conflict, received 10.0.0.3 instead of 10.0.0.4
So the common usage is to use both the ID and address.
First solution:
Move inProgressMap from <Integer, Query> map to <String, Query> map. The string can be something like ${id}/${address}
Second solution:
Move inProgressMap from <Integer, Query> map to <Pair<Integer, String>, Query> map. This one requires more code but may be easier to maintain ?
When your query looks like one.service.consul in the response (DnsResponse) it will be one.service.consul. with a final dot.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3524
Stream pipe should use write failures instead of relying on the write stream exception handler · Issue #3524 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The actual implementation of Pipe relies on the WriteStream#exceptionHandler to be aware of a failure. Since the stream can be obtained before the pipe is created (e.g in an HTTP proxy), an exception can flow through the handler and the pipe will not be aware of it.
As now WriteStream reports write failures, it is better to instead rely on this as each operation instead of relying on stream exception handler. This will get a proper feedback for each write operation involved in the pipe operation.
ReadStream does not exhibit this issue because the pipe can be created as soon as the stream is obtained.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3525
Change HTTP/1.x invalid request version handling · Issue #3525 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the handling of invalid HTTP/1.x version is done in Http1xServerRequest#version that will send a 501 status response and close the connection when called. Sending the appropriate response is performed as a side effect of checking the HTTP version which means it is done only if the application will check the HTTP version. This version check will also send an IllegalStateException instead of returning the version.
This should be changed so it is always performed and the application checking the HTTP version will always get either HTTP/1.1 or HTTP/1.0 . The application will not need to do this and in addition there is no exception thrown anymore when checking the version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3526
Request JSON body sent from client not matching with request  JSON body received on Server. · Issue #3526 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Request body sent from client Http2 Client not matching with request  body received on Http2 Server at 15k TPS on Load.
To reproduce increase the size of request body more than 2 KB  and the data should be in JSON.
Getting the following exception .
Ended flag true
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3527
Websocket end handler not called anymore when idle timeout occurs · Issue #3527 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Actually, it seems the problem is on vert.x-core, in relation with the commit linked to this issue : #3291. Reverting this commit fixes the problem. Anyway, I am proposing a pull request.
Do you have a reproducer?
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3529
WebSocket exception handler should report abrupt closing · Issue #3529 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The WebSocket should report when a WebSocket is closed but no closing frame has been received. It means that the WebSocket was not cleanly closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3530
vertx webserver issues: request handler called not stable  && increased response time for concurrent requests · Issue #3530 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
we have been using vertx for 3 years. And its grateful that vertx helped our business expand. Recently we've found following issues in our production as we have our requests increased ...
Please help ...
1 request handler called not stable
vertx 3.6, 3.9 + (earlier versions not tested ...)
Context
We have used vertx webserver as our web in production. But it seemed that its eventloop cannot call its handler at a stable rate even for the simplest handle function.
In our production envinronment, several non-blocking requests are delayed but without any pressure on CPU.
Therefore, we have implemented following code to reproduce the issue.
0, the whole reproducer java project with gradle could be found here
2 start the client for 10 sequential requests to localhost:8000 and check the timestamp for request received at server console.
3, you will get following log in console
4, From client log, we found that the requests have different time cost, especially request 6.
From server log, we found that:
But its handler was called by eventloop on 17:19:53.424
So I doubt why is this request delayed? Is it because its single thread of the eventloop for this WebServer?
2 increased response time for concurrent requests
Context
We've found that the request will be much more slower when vertx receive concurrent requests.
Therefore, we have implemented following code to reproduce the issue.
Reproducer
0, the whole reproducer java project with gradle could be found here
4, when we compare this result to sequential requests in first issue. We found that its strange that response time rises from 3s to 300s on average while server handler does nothing special.
So I doubt why is this request time increase? Is it because its single thread of the eventloop for this WebServer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3531
WebSocket closing handshake improvements · Issue #3531 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The WebSocket close handshake is not implemented according to the RFC:
the server will close the TCP connection right away after sending the close frame
both sides will close the TCP connection when emitting an echo frame
instead the server should close the TPC connection after receiving the close frame, the client should not close the connection.
We introduce a client closing timeout of 10 seconds after which a client will close the TCP connection when it receives an echo frame.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3533
Add support for X-Forwarded-Host header · Issue #3533 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
We're using Vert.x for a while now and we'd like to thank you for the great work that you put into this amazing project.
We recently came across an issue related to the fact that Vert.x does not handle the X-Forwarded-Host header when calling context.request().host().
The role of this header is to keep the original host specified by the client code. If the request goes through multiple proxies, the Host header may change, but the X-Forwarded-Host header should store the original specified by the client.
We're also using Jetty and we saw that it takes this header into account (basically if you have both Host and X-Forwarded-Host header on the same request, it will consider the value of the X-Forwarded-Host header)
I'd be more than happy to contribute for that feature, but first I'd like to know your opinion about it (if it makes sense to add support for it).
Thank you,
Cosmin
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3534
Future related context emission should only happen when calling final handlers · Issue #3534 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the future are generic and when a future attached to a context is transformed, the completion flow performs a lot of un-necessary context dispatches leading to long stack traces.
We should avoid context dispatches for internal purposes and only perform context dispatch for final handlers set by the user.
Transformations like compose or using a Promise<T> as an Handler<AsyncResult<T>> should perform direct invocation and bypass the context attached to the future.
To solve this we split FutureImpl into FutureImpl and PromiseImpl and we add an internal Listener interface that FutureImpl will deliver the event to.
calling onComplete(Handler<AsyncResult<T>>) wraps the handler as a Listener which either calls directly the handler or perform the context event emission.
PromiseImpl extends FutureImpl and implements the Listener interface
future transformation are now subclasses of FutureImpl and also implement the Listener interface
Here is an example with transformation:
With a patch we are aiming to have instead:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3536
Unexpected behavior of Promise.future() in Groovy · Issue #3536 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I use vertx 3.9.2 and run the same code bellow in Java : the console print 1, but in Groovy it prints 4 (Each time calling the future() will create a new Future)
Some time Groovy still prints 1, let run gradle clean.
I think it's Groovy's problem but also posting it here so that everyone can check and avoid unnecessary bugs.
You can clone and run at my repo .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3537
New method: AsyncMap::setTtl · Issue #3537 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In addition to the existing method AsyncMap::put(K k, V v, long ttl, Handler<AsyncResult<Void>> completionHandler) it is very useful to add a new method AsyncMap::setTtl(K k, long ttl, Handler<AsyncResult<Boolean>> completionHandler). There is a corresponding method in hazelcast's IMap, for other implementations we can return false.
I can try to prepare a PR if it is approved
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3538
Remove future factory · Issue #3538 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x provides a FutureFactory SPI.
With Vert.x 4 using relying more on futures, we need to precisely control the implementation of io.vertx.core.Future in order to deliver the most performing and reliable model.
Therefore we remove this SPI in Vert.x 4.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3540
DatagramSocket multicast group listen improvement · Issue #3540 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The DatagramSocket#listenMulticastGroup(String, Handler<AsyncResult<DatagramSocket>>) is almost impossible to use because it will not be able to select a valid network interface, ending up with:
Vert.x delegates the call to the Netty datagram channel joinGroup(InetAddress) which fails. This method is actually not tested in Netty, which makes me think that it is error prone.
We should either
1 keep it and do a better job at finding a valid network interface
2 an issue should be opened in Netty to improve the behavior of this method (perhaps it is not possible)
3 the method should be deprecated in Vert.x 3 and removed in Vert.x 4 to force users to provide a network interface
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3541
HTTP with TLS should disable H2C · Issue #3541 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
H2C is restricted to plain text, the HTTP server should not configure any H2C handler (direct or with HTTP upgrade) when running a TLS configured server. Currently it configures Http1xUpgradeToH2CHandler but not Http1xOrH2CHandler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3542
Server WebSocket close operation should not throw IllegalStateException when already closed · Issue #3542 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Like WebSocket client, also there is strong point for doing this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3543
HTTP client request timeout will not reschedule a timer when response data has been received · Issue #3543 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The handling of the HTTP client request internal for request timeout might be not rescheduled when the timer fires and data has been received. This happens because the timer handling will not reset the request timer state and will reschedule a timer that will cancel the timer that has just been reset.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3544
Broken link on https · Issue #3544 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On https, there is a broken link at the bottom of the page: on the JUnit 5 additional extensions, the
link to Vert.x Junit 5 Web Client leads to a 404
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3545
Enabling Micrometer metrics while using a UNIX native domain socket causes NPE · Issue #3545 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
If having enabled MicrometerMetrics while connecting to an UNIX native domain socket it result in an NPE when io.vertx.core.net.impl.SocketAddressImpl is instantiated. The SocketAddress is instantiated with a port, host constructor but the host argument is null and it has a require not null check in the constructor.
The issue can be avoided by turning off Micrometer but a more precise solution is to disable NET_CLIENT Metrics domain.
The stack trace:
3.9.2 (and all down to 3.9.0). Haven't tested 3.8.X because the Redis client that we use for the native socket was added in 3.9.
I ran into the issue when combining the Vertex Redis client to connect via UNIX domain socket while having Vertx Micrometer active.
Do you have a reproducer?
Run the unit test and the test will crash with NPE. Uncomment the .addDisabledMetricsCategory(MetricsDomain.NET_CLIENT) line in the test when setting MetricsOptions and the case will succeed (to prevent Micrometer client from attempting to log the connection event on the domain socket).
The unit test just use the the NetClient directly on a domain socket. We initially discovered this when using the Redis client but this works as well more directly.
Steps to reproduce
Activate Vertx micrometer
Activate native transport and attempt connecting to a UNIX domain socket. The connection will throw a NPE.
Extra
Observed on Ubuntu 18.04 and 20.04 both running Adoptopenjdk 13 hotspot.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3546
`RecordParser` issue in Vert.x 3.9.2 · Issue #3546 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Unfortunately this commit broke something for us after upgrading to 3.9.2. We use a RecordParser to parse a chunked http response. The RecordParser is trying to re-use the input buffers for parsing but when using ssl, the response buffers returned by netty have their internal maxCapacity set to the length of the chunk, which means nothing can be added to these buffers. As a consequence, the following exception occurs:
Reproducer
Here is a reproducer that succeeds with Vert.x 3.9.1 but fails with Vert.x 3.9.2:
So in a nutshell the RecordParser now expects the buffers that it is given to be writeable which was not the case in the previous version. Was that change intentional?
Here's another reproducer that demonstrates how we ran into this issue. The following test also passes with Vert.x 3.9.1 and fails/hangs with Vert.x 3.9.2 (we use H2 but it happens for both protocols):
Our workaround for now is to copy the buffers before passing them to the RecordParser but I think it'd be better for the RecordParser to treat its input as read-only and manage the buffers it needs for parsing internally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3546
RecordParser issue in Vert.x 3.9.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unfortunately this commit broke something for us after upgrading to 3.9.2. We use a RecordParser to parse a chunked http response. The RecordParser is trying to re-use the input buffers for parsing but when using ssl, the response buffers returned by netty have their internal maxCapacity set to the length of the chunk, which means nothing can be added to these buffers. As a consequence, the following exception occurs:
So in a nutshell the RecordParser now expects the buffers that it is given to be writeable which was not the case in the previous version. Was that change intentional?
Here's another reproducer that demonstrates how we ran into this issue. The following test also passes with Vert.x 3.9.1 and fails/hangs with Vert.x 3.9.2 (we use H2 but it happens for both protocols):
Our workaround for now is to copy the buffers before passing them to the RecordParser but I think it'd be better for the RecordParser to treat its input as read-only and manage the buffers it needs for parsing internally.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3548
Verticles deployed with multiple instances do not scale processing evenly over the event loop threads · Issue #3548 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Observation
Observed during profiling cpu processing that vertx event loop threads are not evenly utilized in the scenario where multiple verticle instances are deployed.
Expected that with multi-reactor pattern, the event loop thread processing could be delegated evenly over the number of processing cores of the server.
Context
During performance testing with vertx http servers listening and created over multiple verticle instances, we see in profiling that only 1 of the vert event loop threads are using for processing incoming http requests handled on the Router.
Steps to reproduce
Start a http server using code similar to below test listeing on port 8080.
Start http traffic into the server with a client tool.  I used 5 requests per second with client written using vertx and http2 protocol.  I can show the code for this client if needed.
With a profiler (used yourkit), observe the threads cpu utilization and filter out the vertx event loop threads.
Observe only 1 of the threads is used while the others are used in processing.
Related question on stack overflow:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3549
HttpServerResponse send method · Issue #3549 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClientRequest has a new send method in 4.0 to simplify sending a stream and providing a Future<HttpClientResponse>. We should the same method in HttpServerResponse.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3551
WebSocket handshake issue when enabling ALPN on the client with an HTTP2 server · Issue #3551 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get the following error when I do setup an HttpClient with ALPN enabled, talking with TLS to an HTTP2 server:
This can be reproduce with the following test case (in WebSocketTest.java):
I must admit, I was a bit surprised to see that HTTP/2 going on for the websocket connection establishment, IIRC the websocket ConnectionManager in the HttpClient is explicitely configured to mandate HTTP/1.1.
So I was wondering, given that the Vert.x websocket client is bound to HTTP/1.1 (no RFC 8441 support yet), if ALPN should also be disabled automatically for websocket connections...
BTW, I tried this test on the master branch of this repo (Vert.x 4), but I'm seeing the exact same message on Vert.x 3.9.2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3552
`Http1xServerResponse.setStatusCode()` doesn't check `headerWritten` · Issue #3552 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
Today I noticed that if you set status code after writing to Http1xServerResponse, the status code will be discarded silently. Seems like Http2ServerResponseImpl does check if the header is already written before setting status code:
This confuses me a lot. I think an early exception would be better in this case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3553
Stream based DSL · Issue #3553 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Feature description
Provide a DSL (domain specific language) that can be used to execute chain sync and async methods on a context object.  The context object contains the state and provides business methods to manipulate that state.
Sync logic is provided in a classical methods, with the constraint that methods returns void and the outcome is reflexed in the state of the context object.
Async logic is split in 2 business methods.  The first method contains all logic leading up to the async call that gets a Handler<AsyncResult> that is needed to execute the 'technical' async method and in general stops when the technical methods is called.  The second business method is invoked when the result is ready and should processes it, not returning any value but reflex it in the state of the context object.
An example of such an context object:
Vert.x provides a interface, with implementation, to chain the operations as a simple sequence but also in more complex ways like loops, conditional, ...
An example of such a chaining:
Async programming is complicated, handlers do not make for very readable code.  Async Coordination helps, but has it limitations.  RxJava2 is a more complete solution but (to my personal flavor) is a little too complex; both when it comes to writing code and understanding the result.
The proposed DSL aims to simply but rich async programming by levering the capabilities of Vert.x core.  The objective is to protect the developer using Vert.x from the difficulties of async programming and result in code that resembles regular programming as much as possible.
Contribution
As you can see from the examples, I have an implementation that I'm willing to share but it definitely needs some refinement and feedback on naming and extra features.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3554
Vert.x should copy buffers before wrapping them · Issue #3554 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current implementation does copy ByteBuf when it is a direct buffer or a composite buffer. This can produce buffer with a bound max capacity in some cases (e.g chunked encoded HTTP/1 over SSL that slices the HTTP/1 buffer to produce ByteBuf chunks). Such buffers cannot be appended to resulting in trying to write a bounded buffer and throwing a java.lang.IndexOutOfBoundsException.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3555
Buffer wrapped a ByteBuf with a bound max capacity should copy them when necessary · Issue #3555 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Buffer wrapping a ByteBuf with a bound maxCapacity (usually obtained from a slice operation) should copy the ByteBuf on any operation requiring to increase the capacity larger than the maxCapacity.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3556
Buffer optimisation of the internal ByteBuf · Issue #3556 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We can perform several optimisation of the Buffer usage of the internal ByteBuf.
The Buffer implementation holds a reference on an unreleasable wrapper of the original ByteBuf. The getByteBuf() implementation returns a duplicate of this reference that will duplicate the original ByteBuf and then wrap it with an unreleasable wrapper again. The Buffer can instead hold directly a reference to the original ByteBuf and have the getByteBuf() method returns an unreleasable wrapper of the duplicate, the returned ByteBuf will be the same than in the current case (an unreleasable wrapper of a duplicate). This avoid to instantiate an unreleasable wrapper then a Buffer is created. In addition most Buffer operations will be faster as they will operate on the original ByteBuf instead of the unreleasable wrapper.
In addition the Buffer implementation can optimistically cast Buffer arguments when possible (e.g Buffer#appendBuffer(Buffer)) and use the ByteBuf references instead of calling getByteBuf() resulting in less faster operations and avoid unnecessary unreleasable wrapper duplication.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3557
Error 500 when trying to call GraphQL subscription query · Issue #3557 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Trying to implement a GraphQL subscription I'm getting the following error when executing the query (and recieving a 500)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3560
Optimize heap buffers · Issue #3560 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Heap Buffer created with Unpooled.buffer(...) are instrumented and maintain a reference counting. This reference counting requires to wrap the current ByteBuf duplicate with an unreleasable wrapper so that the returned duplicate will not affect the actual ByteBuf hold by BufferImpl.
We can optimize these buffers by using instead custom subclasses of UnpooledHeapByteBuf and UnpooledUnsafeHeapByteBuf instead to avoid un-necessary operations. Such classes will be un-instrumented and reference counting methods can be overridden to disable reference counting which avoids to wrap the ByteBuf duplicate with an unreleasable wrapper.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3562
HTTP server TCP tunnelling API rework · Issue #3562 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The 3.x NetSocket upgrade API is not entirely satisfying.
This API is synchronous on the server and performs pipeline modifications. This can be racy when using a worker server processor as the pipeline might be decoding buffers while the request handler decides to obtain a NetSocket. We should offer an asynchronous API for this feature.
The HTTP/1.x implementation works for arbitrary requests and the HTTP/2 is restricted to HTTP/2 . The HTTP/1.1 should follow the HTTP/2 behavior, since the API should be used creating TCP tunnels with the client and should not be used otherwise. We might offer in the future to turn an HttpConnection into a NetSocket allowing such behavior instead.
The method will be renamed toNetSocket and back-ported in 3.x as a simple delegate to the existing API. The existing API will be deprecated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3564
HTTP server WebSocket upgrade improvements · Issue #3564 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The 3.x WebSocket API upgrade is not entirely satisfying.
This API is synchronous on the server and performs pipeline modifications. This can be racy when using a worker server processor as the pipeline might be decoding buffers while the request handler decides to obtain a WebSocket. We should offer an asynchronous API for this feature.
The implementation shall also be improved to buffer the upgrade request in the toWebSocket method instead of being done in Http1xServerRequestHandler. This allow request handlers set to receive all HTTP events when the application decides to not call toWebSocket.
The method will be renamed toWebSocket and back-ported in 3.x as a simple delegate to the existing API. The existing API will be deprecated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3565
Deprecate HttpServerRequest#upgrade removed in 4.0 in favor of HttpServerRequest#toWebSocket · Issue #3565 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See #3564
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3566
Deprecate HttpServerRequest#netSocket removed in 4.0 in favor of HttpServerRequest#toNetSocket · Issue #3566 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See #3562
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3568
HTTP server response methods impacting the response head should be guarded against head sent · Issue #3568 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are a few methods impacting the HTTP response head (like setStatusCode(int)), such methods should throw an exception when the response head has already been written.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3569
WebSocket should not use ALPN when configured from HTTP client options · Issue #3569 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP client WebSocket configuration inherits from the client options configuration. When the client options configures ALPN, the WebSocket configuration will therefore try to establish an HTTP/2 connection, when it succeeds it will not work since WebSocket assumes HTTP/1.1 to be used.
The WebSocket configuration should force the usage of ALPN to false.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3570
Evict local lock timed out waiters · Issue #3570 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Shared data local lock maintains a list of waiters, entries are evicted from this list when on lock release. When a lock times out, it does not remove the entry from the list and instead relies on the cooperation of the lock owners to remove the entry from the list. We can improve this and evict the waiter from the waiters list when the timeout fires.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3573
HttpClientOptions SSL setServerNameIndication API missing · Issue #3573 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Observation
When using vertx HttpClientOptions with the SSL setForceSni option, the server name indicated in the first message of the SSL handshake is the host as specified on the request.
Shall be possihble to indicate the server name explicitly.  Example API usage below with "setServerNameIndicator".  This allows a single address to be used with multiple individual server certificates, while avoiding DNS server changes to provision all the different server names.
Running secure HTTP2 requests into HttpServer with SNI.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3576
Dont call client metrics reset when the request has not been sent · Issue #3576 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When an HTTP client request has been reset soon after it was scheduled, the client will assume that the request was sent and emit a reset event to the metrics implementation. The metrics implementation truthfully assume that a request begin event was previously emitted and it might not be the case leading to an unexpected state. We should only emit a reset event when an HTTP request object has been created.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3577
End handler not invoked when Websocket is closed on server side (without receipt of close frame) · Issue #3577 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Websocket converted to a FlowableReadStream no longer signals completion if the socket is closed without the receipt of a close frame.  We noticed this because our metrics told us that we were "leaking" web socket connections after we switched to Vert.x 3.9.x.  The decrement of the value used for this gauge occurs when the FlowableReadStream created from a web-socket (using FlowableHelper.toFlowable) completes for any reason.  However, this is no longer occurring when the socket is closed due to an idle timeout in our Nginx layer.
Do you have a reproducer?
The referenced test passes on 3.8.5 and fails on 3.9.2.
This behavior change is due to the fact that the "endHandler" is no longer invoked as part of explicit close processing.  That change was made in commit -- 763b9b5.  Note that prior to this the endHandler was invoked during handleClosed, now it is only invoked on the receipt of an explicit close frame.
If the new behavior is expected/correct, then the FlowableReadStream will need to be modified so that it can terminate when a close occurs in this manner (I'm not sure if it can since I don't see any place to hook when that happens).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3579
Add some form of attribute storage to HttpServerRequest · Issue #3579 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the moment there is no way to attach arbitrary data to the HttpServerRequest. If you are using Vert.x Web the RoutingContext has the ability to store arbitrary data in the context, it would be very helpful if this was also added to the HttpServerRequest (with the routing context changed so it's attributes are backed by the request, so you don't have two attribute maps).
Some of the use cases we have for this in Quarkus:
The metrics object that is created by io.vertx.core.spi.metrics.HttpServerMetrics#requestBegin is not available to any handlers that want to add data to it, and there is no way to propagate it to these handlers. If we had an attribute map we could store it as an attribute.
We have a QuarkusRequestWrapper that adds some extra functionality (such as configurable SameSite support for cookies), but there is no way to access this object once it has been passed into the router (as the router also wraps the request). If there was an attribute map this would be much easier (at the moment we use a fake Cookie implementation and use the cookies map as an attribute map).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3580
Integrate DSL-Json in vertx for default data binding instead of Jackson  · Issue #3580 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Team ,
please look DSL-JSON library as default option for data binding instead of jackson , its quite faster for serialization/deserialization
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3582
Expect to configure decoders when using NetServer · Issue #3582 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
When I use the following code
The objects I receive are always of type Buffer,Is it possible to add a configuration item to be able to add netty decoders,and adding a method to the NetSocket interface to receive the decoded object.
Or is there a way to implement this feature in the current version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3584
Vert.x HTTP server on port 0 and MQTT client issue · Issue #3584 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
This issue has been reproduced in Quarkus, but looks Vert.x specific.
In this use case, the HTTP verticle (start the HTTP server) instances (depending on the machine, but 8 in my case) are configured to listen on the port 0 (so dynamic binding). At the same time as the HTTP verticle start, an MQTT client is created and connect to an MQTT server.
The HTTP server cannot bind to the port, failing with a Bind exception.
The code works with Quarkus 1.7 (Vert.x 3.8.5) and fails with Quarkus 1.8.1 (Vert.x 3.9.2).
Do you have a reproducer?
Reproducer available on:
Steps to reproduce
Download an unzip
mvn compile quarkus:dev
You can override the Vert.x version by declaring a dependency in the pom.xml file.
if you start the MQTT client before or after it works
if you debug, it works - probably a timing exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3585
HTTP streamed read/write event metrics reporting · Issue #3585 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of read/write metric events reports a single event with the total length when the stream lifecycle ends. While this is a correct way to proceed, it lacks of accuracy when streaming happens.
We can improve this behavior and instead report a read/write metric event when the accumulated value gets above a threshold (4K). e.g instead of reporting 17K at once, we might instead report (4K, 8K, 4K, 1K).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3590
Multiple web client connections created instead of utilizing existing initial connection · Issue #3590 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
If we set the server to a larger number of max concurrent threads like 250 streams, and only send 100 requests on the webclient, which is using a max pool size of 8, it seems that 8 connections are created instead of using the single connection for all the streams.
Context
See reproducer
Do you have a reproducer?
A reproducer is a simple project hosted on GitHub (or another forge supporting git clone operation) that has a build file that can be executed to reproduce the issue.
Reproducers are very helpful for contributors and will likely help them fixing your bug faster.
Steps to reproduce
Run the test above, note the failure on the assertion for expecting 1 connection instead of 8.
Anything that can be relevant such as OS version, JVM version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3591
Generic keystore based KeyCert/Trust options · Issue #3591 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x provides specialized usage of KeyStore for loading KeyCertOptions and TrustOptions as JksOptions and PfxOptions.
Sometimes it can be desirable to use another implementation such as the ones provided by Bouncy Castle. We can add a more generic KeyStoreOptions to serve that purpose.
Fixes also #3262
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3593
Set appropriate permissions for cache directory · Issue #3593 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3596
Allow to specify use setInstances in deployVerticle for non default Constructor · Issue #3596 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Currently it is only possible to pass DeploymentOptions().setInstances(int x) when deployVerticle(String var1, DeploymentOptions var2) is used. In other words if you have a verticle that has non default empty constructor you can not deploy multiple instaces using DeploymentOptions().setInstances(int x) as you will get error: Can't specify > 1 instances for already created verticle
To bypass this you can create a for loop like this:
Also if you are using javarx2 you can do something like this:
I would suggest to allow this via DeploymentOptions().setInstances(int x) as clearly end result is same and I don't see the point having this exception.
Expected to work after enhancement:
@pmlopes mentioned on gitter that it is possible to achieve in vertx 4 with Supplier API.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3597
Server/client bypassing the WebSocket close frame · Issue #3597 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClient and HttpServer are omitting to send a WebSocket close frame when a connection a WebSocket. When an HTTP connection is closed, the connection should close the underlying WebSocketBase in order to send the close frame instead of merely closing the HTTP connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3598
WebClient HttpRequest.sendStream() hangs when server close connection · Issue #3598 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
We have noticed that WebClient HttpRequest.sendStream() hangs when Server close connection
There are a few steps to catch it:
Execute WebClient HttpRequest.sendStream (https://vertx.io/docs/kdoc/vertx/io.vertx.ext.web.client/-http-request/send-stream.html) to send body as stream to external server. In our case it is Vertx HttpServer.
After some time external HttpServer close connection by some reason (machine restarted/fall down or idleTimeout is reached).
We expect to see that client will catch error "connection was closed". But there are no any errors and client simply hangs... and waiting for response...
That is really strange for us because other method HttpRequest.sendBuffer catch it.
Reproducer
See project on github. Class WebClientSendStreamTest.java and method uploadStreamRequestTest()
Execute method uploadStreamRequestTest() of class WebClientSendStreamTest.java
After 2 sec HttpServer will close connection
Client will hangs on it...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3600
Vertx.deployVerticle(…); calls completion handler on different context · Issue #3600 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using io.vertx:vertx-core:3.9.3 and I have some code in a Verticle that looks similar to this:
The second assertion sometimes fails. I expect deployVerticle(…) to always call the completion handler in the context from where it was called. Was this assumption wrong or is this a bug in Vert.x? The Javadoc does not say anything about it but here is a quote from the manual:
When you call any other methods that takes a handler on a core API from an event loop then Vert.x will guarantee that those handlers, when called, will be executed on the same event loop.
I also noticed that the assertion only seems to fail when the deployment fails with the following reason.
Verticle deployment failed.Could not be added as child of parent verticle
In my experience, this means that the Verticle where I call the method was stopped. When the assertion fails, the context returned by Vertx.currentContext() outside and inside the completion handler are named like EventLoopContext@35d0ced2 and io.vertx.core.impl.WorkerContext@1bf4c13e respectively. (Maybe Vert.x calls the handler from the context of the worker which was about to be started?)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3601
eventbus inboundInterceptor event executed out of context · Issue #3601 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As part of contextual data flow we found that insight inboundInterceptor event, vertx context is null. Following unit test that reproduce the issue:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3602
Worker thread pool name doesn't work well with Graphite · Issue #3602 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Graphite uses a dot . to separate metric paths into folders. So a metric such as vertx.http.servers.<host>:<port> will be separated into vertx / http / servers / <host>:<port>.
The problem is with the worker thread pool name that is being set in io.vertx.core.impl.VertxImpl:
PoolMetrics workerPoolMetrics = metrics != null ? metrics.createPoolMetrics("worker", "vert.x-worker-thread", options.getWorkerPoolSize()) : null;
Because it uses "vert.x" instead of "vertx" like in other places, it will create the wrong folder structure -
It would be much better if the dot can be removed from names that are used in metrics.
I am using vertx-dropwizard-metrics.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3606
Verticle deployment class loader · Issue #3606 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Verticle deployment has been using the implicit thread context classloader for the VerticleFactory and the io.vertx.core.Context class loader. This classloader is used indirectly by code that needs to resolve file in some places (e.g HttpServerResponse#sendFile(String)). Until now the only possibility to use a specific classloader was the set a temporary thread context classloader in some places (such as deploying a verticle or sending a file).
The DeploymentOptions will now hold an optional classloader that will be passed to the VerticleFactory and associated with the Context. When no classloader is provided, the current thread context classloader is used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3609
Allow JsonObject.put(Entry) - or - let MultiMap.forEach return (key, value) · Issue #3609 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Small improvement to code readability when dealing with Maps/Multimaps
When I want to store a map (after filter, map etc) into a JsonObject I can write
JsonObject result;
with a MultiMap I need to write:
JsonObject result;
Letting JsonObject.put accept an Entry<String, Object> would make code for Map and Multimap look similar/nicer
Of course having MultiMap emit (k,v) would be more universal, but a breaking change (which might not be worth it_
Use cases
Contribution
I could give it a stab
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3610
Issue on vertx4 milestone 5 replacement of VertxFactory class. · Issue #3610 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am trying to upgrade my vertx 3.6.3 app to vertx 4 and I noticed that there is one issue that might be a problem in this vertx change.
It moved io.vertx.core.spi.VertxFactory to io.vertx.core.impl.VertxFactory, but the file in META-INF/ is still called io.vertx.core.spi.VertxFactory, so, whenever I call ServiceHelper.loadFactory(VertxFactory.class); I get
Cannot find META-INF/services/io.vertx.core.impl.VertxFactory on classpath
Shouldn't the file be renamed too?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3612
Reverse proxy solution from Vertx · Issue #3612 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is there any reverse proxy solution available from Vertx like Netflix zuul?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3613
Enhance `RecordParser` to support customer protocols · Issue #3613 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Enhance RecordParser to support customer protocols
just like what LengthFieldBasedFrameDecoder in netty does
I have used this way to parser my customer protocol that contains length fields in the header
Use cases
A more elegant way to parse it
Contribution
I don't have the ability to finish it，sorry
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3614
Cut 4.0.0.Beta4 release  · Issue #3614 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Hey folks, I've seen there have been some important fixes in latest master regarding WebSockets -- I think some of the latest fixes fix some issues I've seen in production. Would it be possible to cut a new beta release? The last one, 4.0.0.Beta3, was released almost two months ago.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3615
CVE-2019-17640 is marked as resolved but there is no release with a fix · Issue #3615 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
The CVE affects vertx 3.4 through 3.9.4 and all 4.x pre-GA releases including beta1, beta2 and beta3
Context
The CVE was issued on Oct 15th. We need to upgrade our dependency to a version that has a fix. The related ticket https shows status resolved but there isn't a release with a fix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3616
Don't disable resource leak detector if netty property is set · Issue #3616 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Don't disable resource leak detector in netty if the netty system property for the resource leak detector is set. Vertx disables it in a static initializer and it would be best that before disabling it checks if io.netty.leakDetection.level is set. If it is set, then vertx won't disable the resource leak detector.
Use cases
This is useful for those folks that want to check that no resource leaks are ever found in their code using the current vertx release as well as future releases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3617
Support for setting local source port on WebClientOptions · Issue #3617 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As a user of WebClient, I would like the ability to configure the local source port in addition to the local address, in cases where a ephemeral source port is not acceptable in deployed production environment.
Describe the feature
Addition of setLocalPort on WebClientOptions
Use cases
Some servers may have firewall rules in place that limit certain ports or ranges by the source port of the request.
Contribution
It would be best if the vertx team could implement the feature.  If you need assist for us to contribute please let me know, and provide a pointer or brief description of where this addition is most appropriate for implementing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3618
Vert.x Session issue set-cookie header at per request after session.regenerateId() method invoked · Issue #3618 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Vert.x Session issue set-cookie header at per request after session.regenerateId() method invoked
Context
next request protected restful api always issue set-cookie header
Extra
I think SessionHandlerImpl flush session after remove old session, should set session.renewed = false.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3619
Allow users to change the vert.x context propagation through unmanaged threads · Issue #3619 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
The VertxImpl implementation uses a ThreadLocal called stickyContext to propagate the context when getOrCreateContext or getContext are called outside of a pool of vert.x threads.
However, there are other ways that the state can be propagated in other executor pools. For example, effect libraries such as Monix have their own way of propagating state local to an execution with TaskLocal -- this is an equivalent mechanism to the context locals that vert.x uses internally to work around the limitation that handlers can be run in different handlers and yet be part of the same semantic execution trace.
I'd like to request that vert.x allows users to bring their own mechanism to propagate the vert.x context.
That can be achieved in two ways:
Making getContext part of the Vertx API just like getOrCreateContext is -- this way, I can create a WrappedVertx extending Vertx, wrapping the default vertx: VertxImpl and overriding getContext and getOrCreateContext.
Adding a new abstraction LocalManager, similar in name and spirit to ClusterManager, that I can implement as a service and that vertx loads through SPI. The default instance of LocalManager will use the thread local sticky context implementation with the weak reference.
I prefer the second solution over the first one. Do you have any thoughts?
Contribution
I can open a pull request implementing this feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3621
Vertx http client with http2 on worker verticle · Issue #3621 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am looking for suggestion on how to solve the problem we are facing.
We have a compute which is combination of CPU and IO and we do this in worker thread.
IO is basically an http call over http2 - now due to known limitation of http2 call not supported on worker verticle we do this on event loop verticle. We had to create new vertx instance just for http client.
Entire task code is written with rxjava2 for obvious reasons.
We did 1 more experiment where we made a blocking IO call in step 2 - it holds the worker thread and resumes from same when IO call completes. But we do not want to go with approach as it has other limitations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3623
Redeploy doesn't work on Windows 10 · Issue #3623 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
On linux everything works fine.
On Windows 10 redeploy doesn't work. When changing the code it appears on terminal that the app is getting rebuilt and redeployed, however the changes aren't applied and the app that running is still the same as the initial. Also, after pressing ctrl+c the app isn't terminated, but it keeps on running on background and you have to kill it by command or task manager in order to stop it.
Do you have a reproducer?
Problem appears on my projects but it is also reproducible with a starter project.
Steps to reproduce
Redeploy not working:
Use Windows 10
Run from powershell .\gradlew.bat run
Open url localhost:8888 to check message
Change message and see from the terminal that it seems to be re deploying the app
Refresh web browser and see that message didn't change.
Ctrl+c doesn't terminate app:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3624
Blocked thread checker improvements · Issue #3624 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In order to provide a listener to allow reporting via other means that logging.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3625
SLF4J LoggerFactory should not load when no implementation is available · Issue #3625 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When SLF4JLogDelegateFactory is present on the class path without an implementation, it will be considered as the LoggingFactory implementation over JULLogDelegateFactory.
Instead we should check that it can delegate to an actual implementation in order to use it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3626
Documentation rework · Issue #3626 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x documentation is based on callbacks.
While the documentation mentions futures, those are introduced mainly for composition purpose.
We need to rework the introduction to introduce futures early.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3629
Vertx4 HttpServerRequest.uploadHandler() erases context. · Issue #3629 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a code snippet (link to the github repo below) that works on vertx4 milestone4, but not with vertx4 >= milestone5.
At first I thought it could be related to #3601, but this does not seem to be the case.
Expected behavior
Code example
As I said, with vertx4 milestone 4, both context and context2 are not null, while from milestone 5 onward, context2 is null.
Github project with reproducible test
The test ATest#start_server will fail, but if you downgrade to vertx milestone 4, it passes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3630
Filesystem.readDir fail on file with space in filename · Issue #3630 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Filesystem methods for read directory failing when directory contains file with space character in filename.
Root cause
The code is failing in FileResolver.getValidClassLoaderResource because isValidCachePath returns false
In isValidCachePath
Steps to reproduce
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3631
Remove future types from being generated · Issue #3631 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Future and CompositeFuture interfaces are not anymore generated (i.e not anymore annotated by @VertxGen) since such types should actually be handled directly by the shims, e.g using Future in RxJava does not make sense.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3632
HAManager does not have checks on enabled flag, causing Verticles to always run in High Availability Mode  · Issue #3632 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Context
We have a use case for running our verticles with disabled High Availability mode, despite setting the HAEnabled as false via
inside beforeStartingVertx override, it was observed that the Verticle is still running in HA Mode.
Steps to reproduce
Start vertx with the option to setHAEnabled as false
It will be observed that vertx starts in High Availability.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3635
HAManager does not have checks on enabled flag, causing Verticles to always run in High Availability Mode · Issue #3635 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We have a use case for running our verticles with disabled High Availability mode, despite setting the HAEnabled as false via
options.setClusterManager(clusterManager) .setHAEnabled(false) .setQuorumSize(20);
inside beforeStartingVertx override, it was observed that the Verticle is still running in HA Mode.
Steps to reproduce
Start vertx with the option to setHAEnabled as false
options.setClusterManager(clusterManager) .setHAEnabled(false) .setQuorumSize(20);
It will be observed that vertx starts in High Availability.
This PR fixes the above issue-> #3636
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3637
Multiple Verticles deployed in isolation If a verticle is undeployed and then deployed again 50% of the requests work · Issue #3637 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
If a container has multiple verticle deployed in isolation, if we restart one of those verticles, It was noticed that two handlers registered locally at the exact same address. It turns out that the restarted vertcile did not remove the handler registration from the address, On further debugging it was noted that the registration flow of ClusteredEventBus was not matching the unregistration flow.
Steps to reproduce
Deploy multiple verticles under a single container
Restart one of the verticles.
Then only 50% of the  request would work, two handlers registered locally at the exact same address
This PR fixes the above issue->  #3636
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3638
ClusteredEventBus.removeRegistration does not call completionHandler on failure · Issue #3638 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
3.9.3, present in last 3.9, it seems to be fixed in master
Context
Closing clustered Vert.x with custom-provided Infinispan cluster manager. The CM is closed in VertxInternal.addCloseHook(...) handler.
In method ClusteredEventBus.removeSub the completionHandler is invoked if and only if the subs.remove(...) succeeds; if that fails only an error is logged but the handler is not invoked. Consequently the handler for vertx.close(...) is never called.
In my case the call fails because the cluster manager is already closed when the eventbus is being unregistered.
Steps to reproduce
Extra
If there is a way to properly close the CM upon Vert.x close please let me know.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3645
HTTP server streaming file upload cancellation · Issue #3645 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current API does not allow to gracefully cancel a streaming file upload.
We should provide a cancel operation that cancels the file upload in progress.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3646
HTTP server file upload should delete incomplete uploads · Issue #3646 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP server file upload should delete the created file upload when a streaming operation is aborted either due to a stream failure or if it was purposely cancelled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3647
Pipe operation should always end the write stream asynchronously · Issue #3647 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the pipe operation ends the write stream, it only uses the async operation on a success. On a failure the asynchronous version should be also used to complete to pipe completion future.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3649
Run GitHub Action CI on windows · Issue #3649 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently a few tests are failing and we should fix them to have windows based CI.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3650
java.lang.IllegalStateException: Illegal type in JsonObject: class java.time.LocalDateTime · Issue #3650 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3652
Options are not redirected to redeploy · Issue #3652 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I was developing a vertx verticle using redeployment. When adding metrics, it seemed to not honor options properties. If I removed redeploy, it started working.
Do you have a reproducer?
Steps to reproduce
Add dependencies io.vertx.vertx-micrometer-metrics and io.micrometer.micrometer-registry-prometheus
In the start of the verticle create an httpServer and add this:
It does work and you can see the metrics.
I found this could be a missing in io.vertx.core.impl.launcher.commands.RunCommand.startAsBackgroundApplication method. It copies "allArguments", but options are not included (maybe because they are in BareCommand), as others like ha, cluster, conf, etc. Those others are added manually, but not options.
I tried debugging to add options (just like conf, as two arguments) and it works. I suggest to added, don't know about what could imply, but seems to be reasonable to me.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3654
File resolver does partial cached class path directory listing · Issue #3654 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation takes care of unpacking the full content of an file's parent directory to ensure that listing this directory will return all the entries in the class path.
This works only for a single level and therefore the issue happens with 2 directories, e.g resolving the file /foo/bar/juu leads to listing /foo/bar to be correct but /foo will only contain /foo/bar.
There are several possible strategies to solve this:
simply unpack everything recursively: this is simple but can lead to performance issues, i.e it might introduce some spikes when cache is populated
add some state to record whether the listing is full or partial, this could be saved on disk (a dot file)
we only cache file and not directories, so directory listing would trigger a class path resolution and content listing, note this impacts the FileResolver API that always returns a File for a directory or a file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3656
File resolver should replace the file separator before parent file class loader lookup · Issue #3656 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The FileResolver replaces the file separator for a ClassLoader lookup however it does not do it for the parent file ClassLoader leading to issues on Windows.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3658
Race condition throws an unhandled exception in CompositeFuture.all · Issue #3658 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
3.9.2, but this is likely in newer versions as well.
Context
When at least two futures executing on different threads are passed to CompositeFuture.all(), there is a race condition throwing an unhandled and unexpected exception if the futures both fail at virtually the same time.
The gap between this synchronized block in all method reached when a future fails
and the synchronized block in doComplete method
can create a situation where a subsequent future/thread sees that composite.isComplete() is false, yet making it to doComplete method, returning false after seeing result is not null.
After returning from tryFail method, this then throws the unhandled and unexpected exception in fail method
Steps to reproduce
Here is a simple test with @RunWith(VertxUnitRunner.class) treating unhandled exceptions as unit test failures.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3661
Generated Converters ignore base classes - JSON cannot be used to configure RabbitMQ · Issue #3661 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Steps to reproduce
Create a JsonObject containing reconnectAttempts.
Create a RabbitMQOptions from it.
See that the reconnectAttempts is set to the default value (which is no reconnects)
Extra
From a RabbitMQ point of view this means that PR 106 breaks JSON configuration quite terminally.
I think this is a fundamental problem with the generated Converters, but it might be felt that the fix should just be in RabbitMQOptions (calling each converter in turn).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3662
Clustered consumer keeps local registration when unregistered · Issue #3662 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A method name was changed in EventBusImpl but not updated in ClusteredEventBus while re-working the clustering SPI.
This might have happened while rebasing #3132 on master.
The bug was not caught because we didn't have a test for unregistration.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3664
WebClient/HttpClient timeouts randomly · Issue #3664 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We've built a "reverse proxy" that routes the incoming requests to a cluster of backend services based on a request header (X-Target-Host & Port).
The code is pretty simple and straightforward. We created an HttpServer that receives the connections on port 8080, and then a request handler with a single WebClient instance creates a new request and forwards it to the backend service.
On Mac OS:
When testing locally with jmeter, whenever we reach a total 8171/8170 requests, the WebClient timeouts for the in-flight requests. After a few timeouts it recovers and works again for another 8000 requests or so.
The backend service is mocked. We mocked it by creating another verticle, and we also tested with "mockserver".
On Windows:
It seems to work just fine.
On our production env on debian:slim:
In here we are using a real backend service. We noticed that these timeouts occur after just a 30, 40 requests. It seems that the error is more frequent when the response time of the backend service is higher.
What we tried so far:
We originally wrote the code with Vertx 3.9.4. We migrated to 4.0.0.CR1 but the error persists.
We also reimplemented it several times using Webclient and HttpClient.
We also wrote it using just callbacks, futures and promises.
We tried deploying 3 instances of our verticle instead of 1.
We tried with jdk8 and 11.
Tried on two different macs, and the same error occurs.
We extended the connection pools.
Tried with native transport.
Played a bit with keep-alive, notcpdelay, etc.
We wrote the entire buffer to the requests. We tried streaming. The behaviour is always the same.
Do you have a reproducer?
Yes
Link to github project/gist
Inside the project there is a .jmx file with the jmeter test prepared.
This is a convoluted version of the code after many trials and errors. We wrapped everything inside a circuit breaker, we also tried executeBlocking, we tried creating one instance of webclient per request, etc...
Even with the simplest version of the code (without circuit breaker, without executeBlocking, etc.), we got the same error.
Steps to reproduce
On Mac:
Compile & package the project: mvn clean package:Run jmeter, import the project .jmx file, and press play (or use the batch version).
It is currently configured with 2 threads and 5000 loops (it should die after 8170 requests aprox.)
There is also a JFR file included in the project generated with JDK8.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3665
CompositeFuture concurrent races · Issue #3665 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of CompositeFuture#all, CompositeFuture#any and CompositeFuture#join has races leading to throwing an exception to the caller when it should not. Those races don't affect the correctness of the future outcome.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3668
Connection pool exhausted when proxying with Pump and client closes connection prematurely · Issue #3668 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Connection pool exhausted when proxying requests with Pump and application client closes connection before it is fully processed by the server.
Do you have a reproducer?
Steps to reproduce
To reproduce I run
and stop it in the middle of execution. After that connection pool is exhausted and any request to demo app just hangs forever.
Output of lsof -i shows that there are unclosed by the app connections that eventually have CLOSE_WAIT status
This issue seems to be exact duplicate of #1244 . The issue was closed however I doubt it was fixed.
Relevant discussions in google groups:
As far as I understand my possible solutions are a) stop using Pump or b) stop using connection pooling. I do not like both
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3670
Throws IllegalStateException("cacheDir is null") when using filesystem in JVM shutdown hook · Issue #3670 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
When using vertx filesystem operation in a JVM shutdown hook, it throws  java.lang.IllegalStateException: cacheDir is null.
My code is :
Version
When runing this test with vert.X 4.0.0.CR2 or 4.0.0.CR1, it happens;
But it runs normally with 4.0.0-milestone5, with console output as below:
Context
None
Do you have a reproducer?
Refer to the code above...
Steps to reproduce
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3671
An exception occurred processing Appender Console · Issue #3671 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
When I set Log4j2's pattern of Console with "%highlight" or "%style", a NullPointerException was threw.
Version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3672
HttpServer is still listening after close() if there is 2 instance listened on the same port · Issue #3672 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
If main verticle deploy just one sub verticle, the server will be closed successfully. But it will failed if there is more than one sub verticle.
Steps to reproduce
I deploy a main verticle and it will start a http server listening on the port 8000.
The main verticle will deploy 2 sub verticle after I request  "/strart".
Each sub verticle will start a http server listening on the port 9000, and now I can request "/hello".
Request "/stop" to stop the 2 sub verticle, but I can still get a response when I request "/hello".
Version
The version of vertx-core and vertx-web is 3.9.0
Code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3673
Generic KeyStoreOptions · Issue #3673 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x provides specialized usage of KeyStore for loading KeyCertOptions and TrustOptions as JksOptions and PfxOptions.
Sometimes it can be desirable to use another implementation such as the ones provided by Bouncy Castle. We can add a more generic KeyStoreOptions to serve that purpose.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3674
streamId missing in HttpServerRequest · Issue #3674 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As simple as that.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3675
Header Guard not compatible with the Server-Sent Events specification · Issue #3675 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Regarding the specification for Server-Sent Events multiple EventSource objects can share the same HTTP2 stream:
"It's possible for one active network connection to be shared by multiple EventSource objects and their fetch algorithms,"
I have inspected the HTTP2 stream of the vert.x server and I can approve that the Browsers (both Chromte and Firefox) use the same HTTP2 streamId for multiple EventSource objects.
The new Header guard as implemented in the HTTP2ServerResponseImpl prevents the browser to share multiple EventSource objects on the same stream. The vert.x server throws an exception "Header already sent" (more details in the linked issue )
For the EventSource to complete the handshake the server should respond with a specific header which in turn would conflict the HTTP protocol. I guess that the browsers should not share the same HTTP stream for multiple EventSource objects. What do you think?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3676
Native image: Issues with VertxUnsafeHeapByteBuf · Issue #3676 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
My native-image.properties are
and I have the following error:
However, if I add all listed classes to -initialize-at-run-time, I get the following error:
Version
Do you have a reproducer?
Steps to reproduce
Check out project
Build again
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3681
HTTP client max WebSockets · Issue #3681 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The max number of WebSocket is defined by the HTTP client pool size (HttpClientOptions#maxPoolSize). In Vert.x 4 there is no pooling of WebSocket TCP connections (since those are closed after usage) and they use a different pool than HTTP connections used for request/response. Both use maxPoolSize.
We should have a different setting with a better name : maxWebSockets with a default of 50 per endpoint instead of 4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3682
FutureBase should additionally check if the context belongs to a closed vertx instance · Issue #3682 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These checks should also check if the context does not belong to a Vertx instance that has been close (i.e. a shut down event loop). vertx.close().onComplete( ... ) will create a Future referencing a context on the Vertx instance that was just closed. Then, the lambda passed to onComplete will execute in that closed context, which throws a RejectedExecutionException since the context's event loop group is shut down.
This is very puzzling, because vertx.close() creates a promise without a context.
This crops up in tests of mine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3684
publish,send not work · Issue #3684 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
EventBus publish send not work. consumer nerver target.
Version
Context
EventBus publish send to the address, the handler never target. but request can work.
Do you have a reproducer?
Reproducers are very helpful for contributors and will likely help them fixing your bug faster.
Link to github project/gist
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3685
Future eventually transformation · Issue #3685 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Future type is missing an async transformation that is called independently of the result.
This type already have:
We are missing
This is useful for applying a finally semantic, e.g we have currently in SQL client pool the following code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3687
Connection pool can create connections which ignore keep alive settings · Issue #3687 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
3.9.1 but this also happens on latest commit
Context
Since some time we've seen WebClient throwing Connection reset error on first request after a period of inactivity. I know that our gateway closes inactive connections after some time. The question was why WebClient doesn't close such connections, the default keep alive settings should remove inactive connections after 60 seconds. After some debugging I tracked the issue down to Pool having connections that don't have expirationTimestamp set. I believe there's some race condition with how connections are created and consumed. The flow is like this:
First request is started. First connection will be created but it takes significant time for it to be connected.
In the same time a second request is started. A second connection will be created but this one connects instantly.
Second request finishes.
Second connection is now available and it's used to complete the first request.
First connection has finished connecting but the waiter list is empty. It will sit unused in the pool. expirationTimestamp is not set so keep alive settings are ignored.
After some time our gateway closes the inactive connection by sending RST packet.
Third request is started, it will use that first connection (now closed on the gateway side) and throw Connection reset error.
Do you have a reproducer?
See here.
Note that I added a delay in HttpChannelConnector to simulate slow first connection. This reproduces the issue reliably. Of course in our environment I can reproduce the issue with unchanged vertx 3.9.1 and 3.9.4.
Steps to reproduce
A pool now has a connection that won't be removed even if its keep alive time passes (expirationTimestamp of this connection is 0).
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3688
No message codec for type should probably return a Future.failedFuture not throw · Issue #3688 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Sending a message on the event bus with a missing codec throws an exception instead of returning a failed future.
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3689
Context close hooks need some kind of priority to prevent closing e.g. a PgPool used for undeployment · Issue #3689 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context and Reproduction
Depending on when you create e.g. a PgPool, its close hook may run before or after a verticle stop in a way that is unexpected. In particular there are closeable resources you almost always want to run last. This is the case with the clustered event bus, for example, but is not well defined for things like database pools.
In this example, the verticle tries to use the pool while closing. This is okay:
In one case, the pool is closed after the verticle's stop is complete. In another case, the pool is closed before the verticle's stop is complete, and its stop will fail with Pool is closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3690
interface io.vertx.ext.auth.User · Issue #3690 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
so what method should i use in inteface User to authorise
the entire classpath is io.vertx.ext.auth.User
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3691
An event bus consumer handler's Message<> could benefit from a .reply() promise · Issue #3691 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Observe it ought to infer the arguments by the Future<V> returned by doAsyncWork().
It also gives you a handy way to tap into enhancements to Future, like reifying the stack for tracing or transmitting error messages via VertxException, the more APIs that look like this the better!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3692
HTTP 1.x client connection can get invalid keep alive value · Issue #3692 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of the HTTP 1.x client connection assumes that a client connection will always be used and thus the expiration timestamp is computed when the connection is recycled. In some case, a connection can be created but not used and then immediately stored in the pool. When this happen, the connection in the pool will have a different validity expectation as it will be considered as forever valid.
The connection validity should return a valid value before the connection gets recycled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3694
HTTP/2 server request stream identifier · Issue #3694 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A getter for the HTTP/2 stream id of a server request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3697
Future eventually returns the wrong Future · Issue #3697 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The new eventually method on Future returns an incorrect future:
As we want to have a finally like semantic, the outcome of the future returned by the mapper function should not override the outcome of the original future on which eventually is called. The fixed signature is:
The returned future will get the outcome of the original future when the future returned by the mapper function completes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3698
Future transform method · Issue #3698 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Future type can be improved with this transform method:
This method is syntactic sugar for compose(Function<T, Future<U>>, Function<Throwable, Future<U>>).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3700
Security addition on proxy protocol (real remote and source addresses) · Issue #3700 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Get an access to the real remote address when using Proxy Protocol. In the current implementation of proxy protocol, the field remoteAddress is replaced by the source IP from the proxy protocol request (and that shouldn't change). We should add the original source and destination IP somewhere in the context.
Use cases
The proxy protocol is used between a Load Balancer and servers. For security, servers should only accept requests from the Load Balancers to avoid malicious requests. Anyone familiar with this protocol can create requests and pretend to have a different IP.
Here is a plain text example of the protocol:
In this example, allowed requests from IP x.x.x.x should be something like :
But a hacker can build wrong requests, for example a requests from h.h.h.h to y.y.y.y (he stole the IP x.x.x.x). The application will think that it was x who made the request. Which is wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3701
sendForm(MultiMap) does not include Content-Length header leading to hung request · Issue #3701 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I have a vertx+rxjava webclient trying to POST to a PHP application
Caddy config:
Do you have a reproducer?
Results in this HTTP request as seen from Wireshark:
I never get a response, wireshark never logs a response, the Single never completes, an XDEBUG breakpoint on the first line is never hit, and neither PHP nor Caddy log the request.
I believe the lack of content-length in the request is leaving the PHP server waiting. It appears to tie-up one of the FPM workers as running numerous requests like this concurrently results in an error:
And all subsequent requests, no matter what the client, hang, at least until I quit the vertx app and wait for all the TCP timeouts to timeout.
I've tried changing the content type to multipart/form-data or using rxSendMultipartForm() but no luck. I did try posting to google.com and I immediately get an error but I think it's because its seeing the POST and rejecting it early.
Changing the request to be a simple POST via rxSend() works fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3702
Docs: there is no start(Future<Void>) in the AbstractVerticle · Issue #3702 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a start(Future<Void>) in the Vertx Core docs.
But in Vertx 4.0, the start method in the AbstractVerticle and Verticle only accept a Promise<Void> paratmeter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3703
ByteBuf leak reported by netty's ResourceLeakDetector · Issue #3703 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Is this a false positive?
how to supress this warning?
Recent access records:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3704
rxjava2: reactive Vertx should be injected in Junit 5 · Issue #3704 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vertx Rxjava 2 sample, I tried to use all vertx-rx-rxjava2 APIs instead of the vertex core.
But the io.vertx.reactivex.core.Vertx can not be injected in the JUnit 5 methods like the normal Vertx.
My application is based on the following stack:
I have to wrap it myself like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3705
rxjava2: ValidationHandler builder `build` method should return a rxjava2 specific ValidationHandler · Issue #3705 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I added web validaiton and rxjava 2 in my Rxjava project.
I used the  io.vertx.reactivex.ext.web.validation.ValidationHandler.
But the build() method returns io.vertx.ext.web.validation.ValidationHandler. I think it should be  io.vertx.reactivex.ext.web.validation.ValidationHandler.
Before applying it to the routing handlers, I have to wrap it again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3706
The official website is not accessible · Issue #3706 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cannot access vertx.io
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3709
ConfigRetriever doesn't load properties file + small typo in factory name · Issue #3709 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I have a verticle with example code for loading properties from documentation but nothing is loaded.
code in verticl
After handling of configRetriever.getConfig() the result is empty.
I do have another configuration config.json in resources/conf folder and that one is loaded properly by default.
I have also tried with Directory config store and "*.properties" pattern but with no luck.
Also during investigation I found a typo in io.vertx.config.impl.spi.FileConfigtoreFactory (missing 'S').
Lastly, I found it a bit difficult to use json files as properties source because in case of try/catch situations you can't just quickly comment out the setting if needed or add comments which describes each setting because json doesn't allow comments. That's also reason why I need loading of standard properties. There you can easily comment out the line and have the property loaded from another file due to overloading.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3710
Multipart attributes corrupted after upgrading netty to 4.1.51 · Issue #3710 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
After upgrading the netty to 4.1.51, multipart form attributes is corrupted when file size is larger than buffer size in the netty.
Seems the attribute value is replaced by the file content
Link to github project/gist
Steps to reproduce
start the server from gist
post with multipart and attribute test + a big file afterward (around 10MB is fine)
it returns bytes from binaries in the file with the same length of the sent attribute length, but not the correct value just sent in step 2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3711
Vertx4 HttpServerRequest.uploadHandler() erases context. (2) · Issue #3711 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is the same issue as #3629 , where the UploadHandler erases the context.
The reproducer from the original ticket
https is still reproducing the issue.
I am researching to add any new findings on this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3713
JsonObject.getInstant() doesn't work for timezone other than Z · Issue #3713 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
The JavaDoc of the functions says it complies with RFC-7493 so it assumes the date is encoded ISO 8601. RFC-7493 refers to RFC-3339 for definition of ISO 8601, which allows for offset timezones (time-zone = "Z" / time-numoffset).
I see in the code that ISO_INSTANT is used for formatting and parsing. Looks like it cannot parse anything other than Z for timezone. Seems to me that ISO_OFFSET_DATE_TIME would work better for parsing, but I'm not sure I understand all the subtle details between the two.
If the change can't be done, the JavaDoc should change to make it explicit that only dates formatted with the 'Z' timezone are accepted.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3714
WebSocket server connection close timeout · Issue #3714 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a WebSocket is closed by the server, it sends a close frame and  waits until it receives the echo close frame to close the TCP connection. We should have a timeout to close the TCP connection to prevent a server from keeping a WebSocket without receiving a close frame.
NOTE: this will not happen when an idle timeout is configured on the server which is a recommended practice.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3715
Incorrect default WebSocket client timeout value · Issue #3715 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClientOptions#DEFAULT_WEBSOCKET_CLOSING_TIMEOUT is 10000, however the value is in seconds and it should be 10 instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3716
Close WebSocket connection when the timeout value is zero · Issue #3716 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HttpClientOptions#webSocketClosingTimeout timeout is disabled when the value is zero or negative. It can be useful to immediately close the connection when the value is set to 0 instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3720
Support for generic Key and Trust material · Issue #3720 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
While using the webclient of vertx from the following project: https I discovered that vertx core has couple of options to enable ssl. It should be of the type KeyCertOptions and TrustOptions. The core library already provides utilities to help the end-user by providing JksOptions, KeyStoreOptions, PemTrustOptions and PfxOptions.
It is providing a-lot ways for the end-user, but I had the feeling that it was missing one option. What if someone wanted to supply a KeyManagerFactory or KeyManager as KeyCertOptions? Or if someone wanted to supply a TrustManagerFactory or TrustManager? That would not be possible out of the box. The end-user needs to implement KeyCertOptions and TrustOptions and provide a custom logic to enable it.
Use cases
This will enable the end-user to supply their own custom constructed key and trust material, for example a trust manager which is able to use multiple different keystore files, for example: Stackoverflow - Registering multiple keystores in JVM
In an existing environment where someone wants to migrate to vertx and has already a keymanager/trustmanager, by just supplying it it doesn't need to use JksOptions, KeyStoreOptions, KeyStoreOptons, PemTrustOptions or PfxOptions to configure vertx. They would be able to supply just only KeyManager, KeyManagerFactory, TrustManager or TrustManagerFactory and adapt much easier.
Contribution
I am volunteering! See here for the PR: #3719
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3721
HttpClientRequest.send(ReadStream<Buffer> body, Handler<AsyncResult<HttpClientResponse>> handle) not calling the completionHandler provided · Issue #3721 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
When using the mentioned send function the completion handler provided never gets called, as a result if using the generated rxSend(..) function there's never a response provided even if the call succeeds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3723
A broken link in the `RxJava interoperability documentation` section (in `vertx-lang-kotlin-coroutines` doc page) · Issue #3723 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The link Guide to reactive streams with coroutines in the RxJava interoperability is broken.
Broken link: RxJava interoperability
Version: 4.0.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3724
HttpServer replys nothing when it failed to decode the http request · Issue #3724 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
The server will close the connection without any response.
It should reply 400 bad request before close the connection.
It's vulnerable if we put the servers behind nginx.
should reply the HttpResponseStatus.BAD_REQUEST too.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3725
cluster event bus failed to send event to other verticle. · Issue #3725 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
i upgraded my project from 3.9.4 to 4.0.0, but i encountered a problem that clustered eventbus cannot work.
Context
i upgraded my project from 3.9.4 to 4.0.0, but i encountered a problem that clustered eventbus cannot work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3726
[Regression in 4.0.0] RabbitMq consumer does not reconnect when rabbit crashes · Issue #3726 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We had a test in our system that simulates a connection disruption between our system and rabbitMq.
After migrating to vertx 4, the test is broken.
It passes with 3.9.5, but fails with all 4.0.0.X versions.
The first commit is vertx 4 with the failing test, the second is vertx 3.9.5 with the same testing passing.
Explaining the test:
The test starts up a rabbitmq docker container
The test sets up a consumer and a producer
Both will be configured to reestablish the connection to rabbitmq in case of failures
The producer will send messages periodically (every 1s)
The consumer will receive the messages. Upon the reception of the first message, RabbitMq docker container is shutdown and then started up again.
Upon the reception of a second message, which happens after rabbit was restarted, the test completes
Notice how the producer will complain about connection errors until you see the message Container rabbitmq:3.8.6-alpine started in XXX, then it will stop logging the error messages (but you can change the success message log level or add a CLI consumer to check that it is still sending) but the test will not complete.
Downgrade to 3.9.5 and see that the test completes successfully.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3732
Propagate HttpRequest/HttpResponse to HttpServerMetrics requestEnd/responseEnd · Issue #3732 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Vert.x version 3.9.2 io.vertx.core.spi.metrics.HttpServerMetrics.responseEnd method had a parameter httpResponse which was removed and replaced by bytesReadin 4.0.0 version. This was done in "Update HttpServerMetrics to use observability HttpRequest/HttpResponse" (#3587).
In our application we have a custom SPI and responseEnd is used to measure time of whole request process with additional info such as status code. In version 4.0.0 this information is available only in responseBegin method, which forces us to "change state" of requestMetric parameter for propagating information to responseEnd.
It would be very helpful if instance of new HttpResponse was available in responseEnd. This could be done simply by adding response in Http server implementations or generally by passing custom state between responseBegin/responsePushed and reponseEnd method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3735
config.json RequestOptions mapping no longer working in Vertx 3.9.5 and Jackson 2.10.4 or 2.11.3 · Issue #3735 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Vertx 3.9.5 and Jackson 2.10.4 or 2.11.3
Context
I encountered an exception which looks suspicious while upgrading from Vertx 3.6.3 and Jackson 2.9.3
Do you have a reproducer?
A reproducer is a simple project hosted on GitHub (or another forge supporting git clone operation) that has a build file that can be executed to reproduce the issue.
Reproducers are very helpful for contributors and will likely help them fixing your bug faster.
Link to github project/gist
Steps to reproduce
create unit tests as follows and run:
Error results:
Conflicting setter definitions for property "all": io.vertx.core.MultiMap#setAll(1 params) vs io.vertx.core.MultiMap#setAll(1 params)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3736
A clash in the https· Issue #3736 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Grammar is not correct about Verticles, docs 4.0.0 vertx.core link
Version
I couldn't use that in my project,  Future<Void> startFuture param not in AbstractVerticle
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3737
Tracing and span are not propagated and recorded when EventBusProxies or EventBus is used to communicate between multiple microservices · Issue #3737 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Testing zipkin tracing repository, I discovered that the traceId and spanId generated when an HTTP request is received on the server are not propagated and stored when communication between microservices are done through EventBusProxies/EventBus.
Steps to reproduce
create vertx project, enable tracing and import io.vertx:vertx-zipkin:4.0.0
send a request to vertx http server
forward request to microservices through EventBusProxies or Eventbus
monitor recorded traces, request sent through Eventbus will not be recorded
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3738
SockJSHandler return a strange bad response under CORS · Issue #3738 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I had created a webshell with SockJSHandler, In some reason, It should be CORS, So I created a preprocessor to change the origin, The code like this.
The route
The preprocessor
Init the handler
I have bind the sockjs channel with local SSH channel ,so I setRegisterWriteHandler(true)，to get an id。
It works well on Vertx 3.9.5  but failed with a strange error when handshake on 4.0.0。
How to fix this?  Thanks a lot.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3739
uploadHandler invoked on connection context · Issue #3739 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
uploadHandler should be invoked on the same context as the requestHandler of the HttpServer.
This works as expected with HTTP/2 servers but not with HTTP 1.x servers.
One possible impact is the loss of local context data (support of tracing).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3741
isNativeTransportEnabled is always false · Issue #3741 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use vert.x 4.0.0 java 14 and os x 11.1.
That's a reproducer:
Also I have a gradle build with dependencies:
During my investigations I found out my app caught: could not load a native library:
Do I need something else to add in dependencies or it's a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3743
Service requests distribution in cluster Vertx 3.9.5 · Issue #3743 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Should service requests be distributed over cluster in round robin fashion?
Version
In real project I had a problem that after node fails (stopped) requests are still going to it and 1/2 of requests are timeouted. To reproduce this situation I tried to make a toy project with hazlecast, one service verticle and one http verticle.
The service verticle is started as worker with one instance per node. Http is strated in 4 instances per node. I found out that all service requests were handled in one node (main or backup) and requests were not distributed over cluster.
Do you have a reproducer?
Http verticle simply calls service and responds with its reply.
Service vericle makes fake sleep to pause execution and responds with its node name and current time.
Main class startes with two verticles with parameters from command line
Steps to reproduce
Open two tabs in browser and developer tools. Try two issue request from two tabs nearly at the same moment
See that request comes from the same node. One request takes 2 seconds and the second takes 3 seconds. But two request should take nearly 2 seconds as we have two workers in cluster.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3748
Unexpected IllegalStateException in HttpClientResponseImpl.java:150 · Issue #3748 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With Vert.x 4.0.0, I have a function that reads:
This results in IllegalStateException .. checkEnded in HttpClientREsponseImpl.java:150.
The error happens at random.. Sometimes I have to run 10+ times or more.
Of course, there's a server behind an all that.
Here's a very similar method which works fine:
To me it seems like that HttpClientRequest (req) goes out of scope.. something bad may happen. Is the first implementation really faulty?
Can make a unit test upon request, if this really appears to be a bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3750
Respond with a 400 status to invalid HTTP requests · Issue #3750 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When Netty's HttpObjectDecoder encounters an invalid message it will create an HttpRequest that follow the same pattern (method: GET, version: 1.0, uri: /bad-request). On such message we should always respond with a 400 status response when no other response was decided before.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3753
CompositeFuture toString gives stack overflow for completed composite future · Issue #3753 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I get a stack overflow exception while logging a completed CompositeFuture
Do you have a reproducer?
The code above gives a stack overflow exception
Steps to reproduce
Run program above
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3755
When does vert.x support http3? · Issue #3755 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When will vert.x support http3? Do you have a plan yet?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3756
Still have ... undecoded bytes, should not call 'feedInput' · Issue #3756 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Working with a JSON Stream via the Vert.x Web Client, I get a com.fasterxml.jackson.core.JsonParseException with the message Still have ... undecoded bytes, should not call 'feedInput'.
I dug a bit deeper into io.vertx.core.parsetools.impl.JsonParserImpl and was just wondering if it could be an issue:
JsonParserImpl#handle just calls parser.feedInput() without checking parser.needMoreInput() first.
However, com.fasterxml.jackson.core.async.ByteArrayFeeder, states that "caller must ensure data remains stable until it is fully processed (which is true when needMoreInput returns true)".
Could it be that we need to call needMoreInput() first?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3757
P12 Keystore for Signing JWTs · Issue #3757 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am running into issues using a P12 keystore to generate a JWT:
I am using Java11, Gradle 6.6 with the following dependencies:
I have a simple verticle that is attempting to write out a user credential JSON to a JWT. I configure the JWTAuth as such:
Any suggestions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3758
You think you can get away without putting one out for scala? · Issue #3758 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3760
Form upload attribute might get corrupted · Issue #3760 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current server form upload processing will create the form multi-map when the HTTP server request ends. Some attributes might use ByteBuf that can be recycled by the request decoder overwriting the attribute value. We should capture the request form attribute value as a string to avoid this case.
This issue was found when upgrading to Netty 4.1.52.Final, this version changes the implementation of the post request decoder and this situation happens with very large file upload (32M) and was found in vertx-web-client tests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3763
clientRequest not available in Interceptor · Issue #3763 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
In my interceptor, I want to know (once the request was done) what the request method was. To me it looks like I should retrieve the clientRequest from the HttpContext and from that object i can ask getMethod(). But the clientRequest method always returns null (although according to documentation, this should only happen during PREPARE_REQUEST phase, not in later phases.
Reproducer
this test prints
ignore the rest of the project, that was for another issue.
Extra
I debugged a bit. in HttpContext line 558, clientRequest field is assigned, and I figured that cool, it must be working. But when i let the code continue to execute, breakpoint at line 549 is hit and clientRequest is again set to null. So looks like there is a race condition or so between the request's onComplete handler and the continuation handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3766
Indeterministic JsonCodec lookup  · Issue #3766 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At the moment the lookup for implementation of the JsonCodec SPI is indeterministic and depends on the classpath ordering and packaging of the application. Thus, the same application may end up with the built-in Jackson code or with a custom one.
In my case, I must ensure that it loads the custom one regardless of the classpath ordering and packaging.
I can see two approaches:
have the possibility to ignore the built-in codec, if there is another one available
have a smarter way to load the SPI sorting the implementation by priority
In my case, the first approach is enough, but the second one allows handling situations where 3 or more implementations are available.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3767
Vertx thread customization · Issue #3767 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In some environment in which Vert.x is embedded it can be desirable to customize or subclass the base thread used by Vert.x (VertxThread).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3769
Performance problem in EventBus messages dispatch implementation · Issue #3769 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
I found a performance related problem in the class ReplyHandler: the message decoding of my message codecs always happen inside the event loop, regardless on where I call .body().
When a message gets big, this bug can block the event loop for a moment.
Do you have a reproducer?
No, the bug can be easily fixed, it involves changing just one line of code.
Steps to reproduce
Create a custom MessageCodec for the event bus
Set a breakpoint on the decodeFromWire function
See from where the call originates
Extra
This bug can be fixed by not calling "reply.body()" in line 89 of ReplyHandler.
That code in ReplyHandler checks if the decoded message is "ReplyException", but it can't be a ReplyException if the message codec is a custom one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3770
SyntaxError: /@vertx/core/options.js:17:65 Expected ; but found SSLEngineOptions KeyCertOptions · Issue #3770 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a syntax error which is causing things like es4x to barf.  It is:
If you open the @vertx/core/options.js file on line 17 , you will notice the semi-colons are missing before SSLEngineOptions and before TrustOptions
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3772
Vertx SPI configuration and loading · Issue #3772 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A Vertx instance is configured with a set of service (cluster manager, metrics, tracer, name resolver, etc...)
When a Vertx instance is created:
some of these are loaded using the Java service loading mechanism (e.g cluster manager)
some are hard wired (e.g transport or file resolver)
some can be provided programmatically (e.g cluster manager)
We shall provide a clear and controllable mechanism to create a Vertx instance that is used by Vert.vertx() or the CLI (BareCommand), but that also could be used directly to override services before or after the initialization has been performed, e.g to specify an alternative transport configuration or a different file resolver when Vert.x is embedded.
It also provides a unified way to load service providers and replace the existing Java service loading mechanisms.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3773
EventBus Tracing: change message tag name to message_bus.destination · Issue #3773 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MessageTagExtractor uses peer.service tag name for eventbus address. According to the conventions doc, it should be message_bus.destination.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3775
Buffer get by index should check against the buffer length · Issue #3775 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The default implementation of the Buffer by index accessors (e.g getInt(int)) relies on ByteBuf to check the index respects the upper bound. Since this is an absolute operation for this buffer, the ByteBuf capacity is used instead which allows to access data beyond the Buffer length.
We need this implementation of Buffer to perform a check against the ByteBuf writer index to ensure the correctness.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3779
Service verticle factory does not rested worker setting · Issue #3779 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 4.0
I deploy most of the vertices as services with a json service descriptor.
When moving from 3.x to 4  I noticed that services that are marked as 'worker:true' are not being deployed as worker vertices and are executed in a even loop thread.
How to reproduce:
1 Deploy any service verticle as a worker verticle (worker:true in the json descriptor in the 'options' section)
2 The easiest way to verify if it is a worker verticle is to log something and check the thread name. Otherwise, you can use VertxThread.isWorker()
Seems to be an issue with the code in the service Factory, when it merges the config from the context.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3780
TLS Certificates hitless rotation · Issue #3780 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
We need a way to automatically reload certificates from files when they're expired.
Use cases
Possible solutions
Every time a certificate is requested during the TLS handshake, Vert.x could check if the actual certificate is expired and, if that's the case, it can try reload it from file.
Another solution could be a more generic method like GetCertificate in Golang that is invoked every time a new certificate is requested. Inside it, the user can do whatever it wants (reload every time from file, have some cache that refreshes the certificate asynchronously, etc)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3783
Flood control · Issue #3783 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I built RestEasy server under Netty and Vert.x
Now I transfer a huge file from the server's database to the client wia java stream
Client and network too slow for this huge file, and Netty consume all memory while allocating io.netty.channel.ChannelOutboundBuffer$Entry. It occured because RestEasy and Vert.x don't communicate with Netty about flood control.
Maybe exists some techniques for such flooding?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3784
 Why did Connection was closed appear after NoStackTraceTimeoutException · Issue #3784 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
HttpClient encounters io.vertx.core.http.impl.NoStackTraceTimeoutException (the timeout I set is 3 seconds) when sending a request. After being caught by the exceptionHandler, this exception is printed in the exceptionHandler, but then io.vertx.core is captured. VertxException: Connection was closed (the idle time I set was 10 minutes), which caused me to print two exceptions. Why did Connection was closed appear after NoStackTraceTimeoutException?
Version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3785
WebSocket closeHandler not invoked when call close() when network  barrier between client and server · Issue #3785 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
when network  barrier between client and nginx.   and server call WebSocet close() function, closeHandler will not be invoked.
in previous version, it will invoked, and i notice this issue: #3531
this will be fine when network is OK.  in my secene (network barrier, cannot ping to client), this will not work, due to no close frame echo back.
can i have some other close() funciton to invoke clsoeHandler directly?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3786
Shared worker pool terminated after verticle undeployment · Issue #3786 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This applies to Vert.x 4.0.0
Reproduction steps:
deploy a verticle with shared worker pool name set in DeploymentOptions
do some work
Expected:
The shared worker pool name can be reused
Actual:
The shared worker pool is terminated and remains in the shared worker map.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3787
Missing ByteBuf releases · Issue #3787 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are a few places where Vert.x does not release ByteBuf.
We should release those ByteBuf to avoid leaks and return them to the pool or free the direct memory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3790
DuplicatedContext can cause unexpected behavior · Issue #3790 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code will run a bunch of blocking tasks all with ordered=true
Given that ordered=true, the output is odd, as conventional wisdom (and the documentation) would say that for any Task n start the message that should always follow it is Task n done. Of course ordering is only the case when the calls take place within the same context, and they all are called from the same context. Right?
I know that's not the case, but for any person that hasn't read the implementation, they should reasonably expect that everything that I wrote above is all run from the same context. That's the core of this issue, certain handlers are called with a DuplicatedContext and it causes unusual behavior because it creates a view of the parent context with the blocking TaskQueue being independant of the parent. Also, these side effects are completely undocumented.
I understand why DuplicatedContext exists, and I also know why we made the DuplicatedContext use its own TaskQueue, but I don't think the different TaskQueue was a good idea. It will cause issues for developers that will not be discovered immediately and in its current form make implementing the scheduler for RxJava imposible (For reasons why see: vert-x3/vertx-rx#245 (comment)) Personally I think it should be removed, and jdbc-client should revert back to the old solution (it appears to be the only thing that should use TaskQueue, but it doesn't look like it was properly implemented, see:  vert-x3/vertx-jdbc-client#203 (comment)). Even though that is what I think, I don't think that is something that is going to happen, so I have a simpler solution. Do not create a seperate TaskQueue unless explicitly specified. This way the DuplicatedContext behaves exactly like its parent for all actions (though of course the localData map is not preserved between the two)
I'm already busy on a PR to make a couple of changes around DuplicatedContext
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3791
SLF4JLogDelegateFactory is going to leak forever · Issue #3791 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
System.setErr(new PrintStream(new ByteArrayOutputStream())) has to leak. The ByteArrayOutputStream has a buffer buf which limit would always grow. In order to prevent the buffer from growing infinitelly you have to override the write(int b) and write(byte b[], int off, int len) methods to be empty.
IMO you used ByteArrayOutputStream because you did not want to crearte a new class. I am the Apache developer who develops Surefire Plugin. My recommendation for you is to follow the hint in Surefire and implement the same NullOutputStream and use it instead of ByteArrayOutputStream.
Version
Context
I am going to implement my own DelegateFactory for slf4j-simple and I have found the implementation of SLF4JLogDelegateFactory in the JAR of the core.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3792
HTTP server request should provide access to the context it is associated to · Issue #3792 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpServerRequest should provide a way to access the server request it is currently associated with.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3794
Form attribute size is limited to 1024 in Vert.x 4 · Issue #3794 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Processing of forms with large attribute values is not possible in Vert.x 4 because maximum attribute size is hardcoded to 1024 in NettyFileUploadDataFactory / VertxAttribute class. It works without problems in Vert.x 3.9.5 or when setMaxSize() argument is changed to bigger value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3795
Set proxy per request · Issue #3795 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
We ported our service to use Vert.x awhile ago. While using Vert.x we still used Apache HTTP client without problems. However, now I tried to port also this functionality to Vert.x and I hit a problem.
It seems that Vert.x HttpClient does not allow to set a proxy per request, only on the client level. We use 1000+ proxies simultaneously to scrape websites.
Is there any workaround? How feasible is to create an instance per request?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3796
TCP metrics, Active server connections with negative values · Issue #3796 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We noticed that one of our positive-only metric is having negative values on several instances.
Using micrometer library, metric is named vertx_http_server_active_connections
This problem is however related to vertx-core metric abstraction. More precisely, how vertx-core handles connection opening and active connections metric increase.
Steps to reproduce
We've been able to easily reproduce metric going into negative values using vertx HTTP/2.0 server with SSL enabled.
But I believe this issue is relevant for all types of connections.
Idea how to reproduce is to close the TCP connection right after it was initialized, but connection number wasn't increased yet.
Connections metric decrease is abstracted inside class io.vertx.core.net.impl.ConnectionBase, so even when the connection count wasn't increased on connection open, it would still be decreased on connection close.
Start HTTP/2.0 vertx server over SSL
Run a client of this service, with io.vertx.core.net.TCPSSLOptions#sslHandshakeTimeout of ~100-200ms (for local run) - this might take multiple tries, as client closing connection must hit precisely timeframe within server processing, when connection was already established, but metrics not yet increased
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3797
EventBus consumer and localConsumer scalability when deployed clustered · Issue #3797 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Change clustered registration model
Context
Clustered application crashes in production since upgrading to VertX 4.0.1.
This application uses a WebSocket to EventBus bridge creating MessageConsumers 1:1 to websocket connections.
These Websockets are used by end-user UI and therefore has to scale on both establishing connections and active connection dimensions.
In VertX 3.9.5 up to M5 this was not an issue because registration only happend on a per node basis.
Do you have a reproducer?
Steps to reproduce
create consumers / localConsumers or unregister them - both trigger the issue
previously ClusteredEventBus ignored localOnly
a) this seems useless to me because Selector filters localOnly out again
b) because of this there is no easy way to simply avoid the cluster-overhead
Selectors implementation evaluates all registrations on update - does not scale if adding more consumers
also in case of adding nodes / startup of the entire cluster this approach seems wasteful ?
when one node is running and another starts up the first node would get each created consumer via update - reading the entire clustered map for each update.
So if we create 10 consumers in an application it would
and because the clustered Map is based on address it reads every node
so if you have a cluster of 10 nodes - add node 11 - you fetch data from all 11 nodes.
Update Event only allows updating all registrations
SubsMapHelper does not scale - uses a LOT of network / cpu
While only adding a few consumers this is fine.
But if you either need "a lot" of consumers or need to create them dynamically (as is our case) this simply does not scale
for every single added consumer the entire map is read and triggers the update.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3798
A single Verticle consumer is processing messages concurrently for a worker thread pool · Issue #3798 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Which version did you encounter this bug? 4.0.2
I'm using Vert.x Verticles to process messages sequentially per given address, up to 3.9.5 a consumer would only process messages in a sequential order but now they seem to be doing that concurrently.
Do you have a reproducer?
Yes, here is a simple unit test, it passes with 3.9.5 and fails with 4.0.2:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3799
VertxThread factory · Issue #3799 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A runtime embedding might want to have Vert.x uses a specific subclass of VertxThread. This is a port of #3749 using the Vert.x 4 service provider mechanism and with a simplification of the factory responsibility.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3803
Support for passing URL in RequestOptions · Issue #3803 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
The io.vertx.core.http.RequestOptions in Vert.x 4.0.0 allows to set up instance with absolute Uri as a String via RequestOptions().setAbsoluteUri(...).  Could be this extended also for providing Uri as a java.net.URL ?
Use cases
In our calls we have a request uri directly in java.net.URL . For creating RequestOptions instance, we have to convert URL to String, enabling us to call setAbsoluteUri. But inside of this String is immediately parsed back to URL via RequestOptions.parseUrl() which is ineffective (as parseUrl correctly mentions it in Note).
Contribution
I have zero experience with contributing to any library but this could be easy done via splitting setAbsoluteUri into parsing and processing method:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3804
Cannot modify metrics options via sysprop or custom Launcher  · Issue #3804 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A custom Launcher is often used when you want to setup things like metrics options programmatically before Vert.x is started.
Since #3771 , it is no longer possible to do this because the builder init method is invoked before the Launcher callback.
Then it's too late to customize the metrics implementation.
This applies to other special options too, I think (e.g. tracing, cluster manager).
EDIT: actually, it's no longer possible to activate some metrics options with sysprops. From Dropwizard docs:
-Dvertx.metrics.options.enabled=true -Dvertx.metrics.options.jmxEnabled=true
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3805
httpclient connectTimeout does not work expected · Issue #3805 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
httpclient sets connecttimeout, when the connection fails (possibly due to network jitter or upstream performance issues), the duration of connect failed callback may be less than the connecttimeout.
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3814
HttpClientRequest hangs on subsequent requests in worker verticle. · Issue #3814 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
vertx-core 4.0.2
Context
We have encoured an issue whereby after a variable amount of subsequent reqeuests using HttpClientRequest, it appears that the subsequent response handlers are not called, and the request hangs.
We had used a variation of this pre vertx-core 4.0.0 which we cannot reproduce the issue on.
It appears to fail quicker when keep-alives are enabled, and quicker with a larger response size (256K and above).
This appears to only happen when running in a worker verticle, it is not reproducable when DeploymentOptions has worker set to false.
Do you have a reproducer?
Steps to reproduce
it will hang on the request after 2/3rd run
Extra
Java 11, but also reproducable with Java 15.
Running on RHEL 8, but also reproducable on Arch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3815
Does vertx support Transaction, like akka's STM feature? · Issue #3815 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,  I am new to vert.x, and I want to  find out Transaction on vert.x.
In akka's can do this. user STM, Coordinated transactions.
Scenario:
A user tranfers 100$ to B user. A's account deduct 100$, B's account increase 100$.
When B's increase fail, roll back A 's 100$.
I think transaction is very important for a reliable system. Does vertx miss this feature?
How can I do with Vertx, please help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3816
config().getString is not perfect · Issue #3816 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Question
when i do not use "put("raw-data", true)"  ,if my config is :
I get a value "123456.0" by this method config.getString("password");
but
when I use  "put("raw-data", true)", this problem is ok ，but i have an other config
I get an error  when i use config.getInteger("port")，because it was not supported.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3817
prepared query in conjunction with stream doesn't work for Oracle · Issue #3817 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Context
We tried to migrate our services from Legacy JDBC Client or SqlClient. For Postgres dbms everything works fine as expected, but with Oracle the following exception is signaled:
A similar error was described here: https
Do you have a reproducer?
A reproducer is a simple project hosted on GitHub (or another forge supporting git clone operation) that has a build file that can be executed to reproduce the issue.
Reproducers are very helpful for contributors and will likely help them fixing your bug faster.
Steps to reproduce
Unpack archive
The program is configured for a postgres database. Configure it for an Oracle Database
Extra
Testet under MacOS and some linux (oracle testing has been done by another party
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3818
Request options copy constructor does not copy followRedirects property · Issue #3818 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3821
Round Robin load balancing when DNS returns multiple addresses · Issue #3821 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add a config property to AddressResolverOptions.
When round robin is enabled, use Netty's RoundRobinInetAddressResolver to enable load balancing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3822
JsonParser NullPointerException · Issue #3822 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I used JsonParser.pause() and JsonParser.resume() methods between time-consuming operations with Vert.X v. 3.9.4.
Since I upgraded to v. 4.0.0 I started to get NullPointerException.
I've checked out latest snapshot version 4.0.3 but the problem is still there.
Do you have a reproducer?
Link to github project/gist
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3823
Implementation of JSON RFCs introduced inconsistency to Json{Object|Array} API · Issue #3823 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
The implementation of the JSON RFCs (#3197) removed the type checking from methods JsonObject.put(String, Object) and JsonArray.add(int, Object) in order to allow future POJO mappings. Nevertheless the methods Json{Object|Array}.copy() are still checking types. This leads to the situation that developers are able to successfully create Json{Object|Array}s that cannot be copied afterwards.
When using the following piece of code for creating valid JsonObjects
which are copied afterwards, #3197 breaks that piece of code and is not backward compatible.
Do you have a reproducer?
A small reproducer can be found at https. The test fails with Vert.x 4.0.0 and runs successful using Vert.x 3.9.5.
Steps to reproduce
Clone the reproducer mentioned above.
Change Vert.x dependency in build.gradle to io.vertx:vertx-core:3.9.5 and run again gradlew test.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3826
HTTP server request max form upload attribute size should be configurable · Issue #3826 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP server request has an hardcoded bound of 1024 bytes for form upload attributes. It should be configurable in HTTP server options and have a greater default value (2048).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3828
BodyReadStream.exceptionHandler should return this instead of null · Issue #3828 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3829
VertxOptions copy constructor doesn't copy TracingOptions 's tracer field · Issue #3829 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Cloning a vertx options that sets the tracer object fails.
Do you have a reproducer?
Steps to reproduce
Create a VertxOptions with a tracing agent set in OpenTracingOptions.
Copy it using the new VertxOptions(existingOptions)
Construct an vertx from the copied options.
Observe it fails with the below exception because the tracer field in OpenTracingOptions is not copied.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3831
HTTP/1.x client connection should be closed when a message is received with no request in progress · Issue #3831 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current HTTP/1.x client connection simply ignores any message that is received when there is no request in progress to handle this message. When it happens the connection should be closed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3832
Support RxJava2 API in Vert.x OpenAPI  · Issue #3832 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
In version 4.0.2 the Vert.x Web API Contract is deprecated and the document suggested using Vert.x OpenAPI but I noticed it has no support for RxJava2 API.
If you consider this as a feature, please give me some information about it so I can implement and contribute.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3833
why WebSocketFrame do not have type()? · Issue #3833 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Read me
the interface WebSocketFrame do not have type(),when i need to judge if a frame was a PingFrame,i can only do it like this:
Describe the feature
i expect to add method type() in WebSocketFrame, if i want to know pingframe i can use type() to judge.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3834
Exception if Parameters values in posted forms exceed 1024bytes  · Issue #3834 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I get an IOException when handling long attributes values in POSTed forms, which I had not on 3.9
Context
When using BodyHandler I get an IOException on long parameters values
This seems to be a regression, I had not the problem on 3.9.X
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3835
the prefix of empty string in the router leading  to a blocking without any info when the server is on starting? · Issue #3835 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Extra
this will leading to block on start ,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3844
Documentation site crash when visiting 3.9.6 API's · Issue #3844 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Go to:
the page shows:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3848
Provide configuration option for outgoing websocket frame size · Issue #3848 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently the option setMaxWebSocketFrameSize applies to both incoming messages and is also used when splitting outgoing messages into fragments.  I have a use case where I would like to accept large frames when receiving, but send relatively small frames outbound.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3849
HTTP/1.x client connection pause/resume race · Issue #3849 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Http1xClientConnection is resumed and paused by the connection and individual streams. When those streams are dispatched on a different context than the connection context, there can be races due to miss notifications and the channel auto-read status remains paused preventing other HTTP streams to be received.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3851
WebSocket frame API improvements · Issue #3851 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Expose the internal FrameType and WebSocketInternal#type(), also add a isPing() missing method for consistency.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3852
Provide JSON element copy with a cloner function to copy unknown elements · Issue #3852 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JsonObject and JsonArray provide a copy() method that can fail on unknown elements when they cannot be copied by throwing an IllegalStateException.
We can provide an overloaded version that uses a Function<Object, ?> to copy unknown elements and avoid failing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3855
Upgrade Netty to 4.1.59.Final or later to address CVE-2021-21290 · Issue #3855 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
According to maven https:, vert.x 4.0.2 is still using netty version 4.1.52.Final which is vulnerable to this CVE https
Are there any plans to upgrade to 4.1.59.Final or later to address this issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3856
filesystem api: expose file locking operations · Issue #3856 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The lock and tryLock methods of AsynchronousFileChannel should be made available for AsyncFile wrappers, so one can perform proper file locking operations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3858
SQLException: Unsupported feature: getMetaData with the new vertx-jdbc-client with Oracle DB 11g · Issue #3858 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx version: 4.0.3
I'm using Oracle DB 11g
To connect to it I'm using:
I tried the ojdbc8-production and still gave me the same error
Executing either a SELECT or a DELETE with a where clause it triggers this exception:
I found this that could explain why is happening https
The legacy client does work btw
To reproduce it:
Here is a docker-compose for the database:
The configuration config:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3859
Exceptions after updating to 4.0.3 under load · Issue #3859 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Under high load, and after updating to 4.0.3 I'm seeing the following error in the logs, which I don't know where it's coming from or how to isolate to reproduce.
The service in questions does a high number of HTTP client request and the services on the other side may fail from time to time. Don't know if this is somehow related, but wondering that this exception actually means and if it is harmful or not.
Thanks in avance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3860
Blocked thread anomaly · Issue #3860 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following message implies the thread has been blocked for several times longer than the JRE has been running.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3861
DNS server list not refreshed · Issue #3861 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The DNS server list should get refreshed, particularly after network interface changes, but this does not seem to happen.
An egregious case is when you start a vertx process that tries to periodically connect to a httpclient, with no network uplink (wifi disabled). The resolver selects google's IPv6 address (a questionable choice itself, but not the bug described here). When the network connection is restored, it keeps trying to use google's IPv6 address, even though there's no IPv6 on the uplink and the current configuration specifies a different list of IPv4 . Changing caching TTLs on vertx AddressResolverOptions does not make a difference, the process never figures out the correct DNS configuration and keeps failing with the exception below.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3862
Event bus reply failure result can be completed twice · Issue #3862 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The reply handler result promise can be completed more than one time resulting in internal failures, this promise should be completed only once. The reply handler delivery performs a lookup on the reply handler and then schedule the message delivery on its event loop. There is a race happening when the reply timeout fires after the lookup and before the message delivery.
Such failures does not have side effect and mostly pollutes logging.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3865
Incompatibility between Vertx 3.9 and Netty 4.1.60.Final (the changes made to address CVE-2021-21295) · Issue #3865 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I'm in the process of upgrading an existing application that uses Vertx 3.9.  Part of the work includes a CVE remediation for CVE-2021-21295 Netty 4.1.60.Final.
I've discovered an incompatibility between the new Netty version and Vertx 3.9.  If the application receives a PUT that includes a Content-Length header, the request fails now within Vertx.   Rolling back to Netty 4.1.59, the problem disappears.  I'm not seeing an error in the logs, but by debugging I found the exception:
Do you have a reproducer?
I don't have a standalone reproducer, but I'd be happy to make one.
Steps to reproduce
Extra
If I upgrade to Vertx 4.0, the problem disappears.  I notice that the HeadersMultiMap class (which seems to replace VertxHttpHeaders) handles non CharSequence header types.  Upgrading to Vertx 4.0 is not viable for me at this time, so I'm hoping for a defect fix on the 3.9 line.  WIth this in mind, I raised a PR against the 3.9 branch for consideration.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3869
How to have a customized security handler in vertx4? · Issue #3869 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
How to have a customized security handler in vertx4?
Context
I am migrating to vertx4 and have a question about securityHandler (using openapi security scheme). In version 3.9.0 I was using OpenAPI3RouterFactory and with calling addSecurityHandler was able to pass my own customized security handler like:
where permission1, permission2, permission3 are security schemes in api.yaml file and permission1Handler, permission2Handler, and permission3Handler are my customized security handler. For example one of my apis has permission1 and permission2 in the yaml file as follows:
If both permission1Handler and permission2Handler succeed, then the rest of the logic for that api get executed. Simply in each of the permission handlers if all the conditions are met I will call routingContext.next() otherwise routingContext.response().setStatusCode().end(). This is a very simple and convenient way of having security handlers.
But in version 4 I don't know how I can do that? In the documentation it says Use the RouterBuilder.securityHandler() method instead. But this method only accepts io.vertx.ext.web.handler.AuthenticationHandler as a handler. How can I have customized security handlers?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3870
MongoDB Client should support change streams · Issue #3870 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The MongoDB client API does not have the new feature of change streams that was introduced in MongoDB 3.6+ and is included in MongoDB Reactive Streams Driver. Would be very useful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3871
HttpClientOptions.setConnectTimeout not work in version vertx-core 4.0.3 · Issue #3871 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i try to set the HttpClient connect timeout as follow、but don't work、also 60 second
in actually、the connect timeout use the NetClientOptions in NetClientImpl constructed as temp var we can't control it as follow debugger details
then i debugger the source code with HttpClient.request
find the way to create tcp connection
in HttpChannelConnector.connect can find NetClientOptions as follow image:
then apply config to netty Bootstrap object as follow:
finally create tcp connection with bootstrap
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3872
HttpClientOptions.setConnectTimeout not work in version vertx-core 4.0.3 · Issue #3872 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
i try to set the HttpClient connect timeout as follow、but don't work、also 60 second
Version
Extra
in actually、the connect timeout use the NetClientOptions in NetClientImpl constructed as temp var we can't control it as follow debugger details
i debugger the source code with HttpClient.request
find the way to create tcp connection
in HttpChannelConnector.connect can find NetClientOptions as follow image:
then apply config to netty Bootstrap object as follow:
finally create tcp connection with bootstrap :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3873
JsonArray of enums stream() emits Strings instead of Enums · Issue #3873 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
JsonArray stream emits expected results for all boxed primitives and String, but not for enums.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3875
TracingOptions handled differently in VertxOptions · Issue #3875 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
4.0.3
Context
Reviewing Tracing SPI and usage I encountered a discrepancy between how MetricsOptions and TracingOptions are handled within VertxOptions.
TracingOptions is not initialized with a new instance on creation, see but MetricsOptions is.
Also, TracingOptions is not present in toString(), see
Do you have a reproducer?
No
Extra
Happy to contribute a PR to fix, but want to make sure there aren't reasons for the differences?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3877
Expose pending size of MessageConsumerImpl · Issue #3877 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
The goal is to expose the message pending queue size of a message consumer.
Use cases
Automatically deploy verticles when size has reached a limit
Contribution
I'm volunteer for implementing this feature if you need it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3878
JsonObject and JsonArray in Java streams causing ClassCastException · Issue #3878 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue
While trying to sort a stream of JsonObjects I encountered a ClassCastException, due to missing interface Comparable and thus missing implementation of compareTo on JsonObject (and also JsonArray).
Without knowing if this interface was omitted on purpose from those two datatypes, I am raising the question, if a simple implementation of Comparable on both JsonObject and JsonArray could be provided, so at least we don't get a ClassCastException, when working with Java Streams and alike?
Version
Reproduce JsonObject ClassCastException
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3880
Bug: Header names must be case insensitive · Issue #3880 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP header names are not case sensitive. The current behaviour of vert.x is that the header name is not found if there is a "difference in the case".
The issue affects this code (already tested the issue)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3881
NetServer and NetClient Communication too slow · Issue #3881 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I’ve build a simple Projekt with vertx for testing NetClient/NetServer Projekt to Test the Performance and the duration. It’s on my pc so on localhost. Sending and receiving takes 50-100ms, that way too slow and I don’t think this should be the case. I could not find any hint why this is the case. Example code below.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3882
ClusteredEventBus publishes local subscription topics on the cluster · Issue #3882 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Migrating socket application from stand alone to cluster mode using Zookeper. I have noticed that all socket write IDs are being published to the cluster, which seemed suspicious and possible scalability problem for very busy network applications.
Further reviewing to the code showed that NetSocket registration should only expose it's write ID locally, which makes sense to me.
Do you have a reproducer?
I have not created a reproducer, but I have been reviewing the code and comparing Vert.X 3.9.6 and 4.0.3. Comparing the two branches the behavior is not consistent and it seems to me there is a bug.
When adding a new registration I see that the event bus, when clustered resolves to the following interactions in order.
Call  overridden addRegistration in ClusteredEventBus.java. This call explicitly looks at the localOnly flag and does not register the address in the cluster if its local only.
Call  overridden onLocalRegistration in ClusteredEventBus.java. This call does not take a localOnly flag and ends up registering the address in the cluster always.
Start application in clustered mode with Zookeper.
Create local consumer event handler with a subscription or open a NetSocket.
Local addresses or socket write IDs are published.
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3885
Expose cluster manager from Vert.x instance · Issue #3885 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Expose the cluster manager instance from Vert.x Instance. Today, we must cast Vertx with VertxImpl in order to access to the cluster manager instance.
Use cases
Avoid to pass multiple parameters in method signature
When the cluster manager is created and configured by external file and system properties, there is no way to retrieve instance
Contribution
I'm volunteering for implementing this feature
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3886
JsonParserImpl fails after resume · Issue #3886 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
It is regression bug, it works well with 3.9.4
Context
We pipeTo(WriteStream<T> dst) method in JsonParser to implement batching of items, which are returned from web service. When the drainHandler is called, it calls resume() in JsonParserImpl. These methods are called at random time.
Steps to reproduce
Run the reproducer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3889
NullPointerException when create websocket · Issue #3889 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I wonder what will be the correct usage in this case?
Version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3890
Verticle deployment hangs up application if config is missed · Issue #3890 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I try to deploy Verticle which is waiting for some config data.
No config was provided during deployment.
Verticle is hanging without any errors.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3891
Unwrapping a promise internal from an handler should always return a promise with a context · Issue #3891 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When the user provides a Promise as an Handler<AsyncResult<>> (which does not have a context), code expecting a context will throw an NPE. VertxInternal.promise(Handler<AsyncResult<T>>) should check when the promise does not have a context and act as if the promise was only an handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3892
AsyncFile: allow access to file size · Issue #3892 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In quarkusio/quarkus#16286 we realised that AsyncFile does not provide access to the file count, so if we're using it to pump bytes into a response we can't set the Content-Length header. We can't trust the getReadLength() method as it defaults to Long.MAX_SIZE if not set, and does not reflect the file size. We also can't access the file size by asking the file system, since we have no access to the file path.
Could we get access to the file size, or if not, at least to the path?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3895
HttpServer.exceptionHandler lacks basic information about attempted connection · Issue #3895 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
When an exception is thrown before a connection is established you can react to it by setting a HttpServer.exceptionHandler. Here it would be nice to be able to get the IP on the other end so it can be included in the log.
Use cases
Nice to have IP information about a DOS attack.
Contribution
It's a suggestion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3896
Issues with FileUpload  · Issue #3896 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
i am uploading file through any library or package (RestTemplate , okHttp or any other ) i am getting different size of file than actual file size .
whenever i tried to upload file from any of the resttemplate or any module i am getting this behavior.
Whenever i tried with postman or curl behaviour is fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3897
Cannot invoke Http1xServerRequest.metric() because "request" is null · Issue #3897 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
In the logs of one server instance (that hosts a vertx-web based rest api) i see the following NPE every second with some pauses in between where the exception is not logged:
As the StackTrace contains only classes from vertx and netty I don't know what to do about it or what might cause it, and as it's a NPE I think it might be interesting.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3898
NullPointerException while handling HTTP message · Issue #3898 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I encountered an exception while processing an HTTP request.
Do you have a reproducer?
Steps to reproduce
See a NullPointerException:
Extra
As far as I can tell, the issue is caused by io.vertx.core.http.impl.Http1xServerConnection#handleMessage comparing the DecoderResult by value. With netty/netty@3f23f59 (released with Netty 4.1.61), Netty now creates its own HttpMessageDecoderResult instance, which is no longer value-equal to DecoderResult.SUCCESS.
This is not (yet) an issue with the netty version referenced in your project, but when used in combination with Spring boot 2.4.5, which pulls Netty 4.1.63, the issue arises.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3899
upgrading from 3.9.4 to 3.9.7 got NullPointerException for test case · Issue #3899 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
upgrading from 3.9.4 to 3.9.7
Context
A unit test case to deploy two vertical
and cause application hang in second deployment.
Do you have a reproducer?
Steps to reproduce
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3900
Vert.x IO threads ending up with null TCCL · Issue #3900 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We noticed an odd ClassLoading failure when running the MP Rest Client TCK against Resteasy Reactive, on investigation it turned out that the TCCL of the Vert.x thread was null.
Do you have a reproducer?
If you checkout Quarkus you can uncomment microprofile-rest-client-reactive in tcks/pom.xml and run e.g.
If you debug and set a breakpoint for ServiceConfigurationError you will see the TCCL is null. If you set <vertx.disableTCCL>true</vertx.disableTCCL> the test will pass.
Extra
The offending code seems to be in io.vertx.core.impl.AbstractContext#endDispatch(), which will null out the TCCL if the previous context is null, instead of returning it to the previous value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3902
Log (LoggerHandlerImpl) gets swallowed if client closes connection. · Issue #3902 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Log is not logged
Do you have a reproducer?
Steps to reproduce
Add LoggerHandlerImpl to your route as early as possible. Make sure immediate is false, so that the log gets loged at the end of the request to ensure that context.addBodyEndHandler(v -> log(context, timestamp, remoteClient, version, method, uri)); is used.
Have client connect and drop close the connection before response is returned.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3905
HttpServer exceptionhandler error · Issue #3905 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
when i deploy an httpserver like this:
it sometimes give an error like this:
Version
Context
I encountered an exception which looks suspicious while ...
Do you have a reproducer?
step 1：Add breakpoint at IllegalStateException line 44
step 2：Add breakpoint at CloseHooks line 82
step 3：start application
Extra
when i remove exceptionHandler,the error is gone,like this
and How did I find this problem？i deploy it in Linux ，the server cannot start，so i find this problem. but in my computer, i must Add breakpoint to reproducer this problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3906
Add cookie maxAge getter · Issue #3906 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
The Cookie Interface should have a method to access the maxAge property of a cookie. Right now, one can only set the max age of a cookie. but not read it.
Use cases
Give complete access to the wrapped netty default cookie. This is the only attribute one cannot read/write.
We would use this feature in a http proxy, where only a session cookie should be sent to the user agent and all other cookies from proxied requests/responses are stored in the proxy. To comply with RFC6265, we have to remove cookies from the storage when the maxAge is set to 0.
Contribution
I'd volunteer to implement this feature.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3907
Remove System.setProperty("io.netty.noJdkZlibDecoder", "false") · Issue #3907 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Following the discussion in the following google group thread:
I would like to remove the redundant System.setProperty("io.netty.noJdkZlibDecoder", "false")
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3909
RoutingContextImpl requires a request of type HttpServerRequestInternal and not HttpServerRequest as defined on the constructor · Issue #3909 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On version 4.0.3, the constructor of the class RoutingContextImpl requires an HttpServerRequest object but this one will be cast later to HttpServerRequestInternal throwing a ClassCastException.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3911
Consume all tokens of the internal parser of the JsonParser · Issue #3911 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of JsonParser is not able to handle parsing of several json objects when the parser is paused since we might not have consumed all the input of the internal parser.
The JsonParser instead should consume all tokens of the internal parser and buffer the corresponding events.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3914
Support jrt protocol in io.vertx.core.file.impl.FileResolver#unpackUrlResource · Issue #3914 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Read me
Read this first before creating an issue:
do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
you shall create a feature request only when it is general purpose enough.
make sure that the feature is not already
Describe the feature
Add the jrt protocol to FileResolver.unpackUrlResource() method, so that vert.x can read files from resources when the app is a (jlink) run-time image.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3915
Semantic versioning for Vert.x releases · Issue #3915 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As a user of Vert.x (in Java) it would make things a lot easier if Vert.x followed a semantic versioning policy. Excuse me if if that is already the policy.. If it is, it is not followed. Vert.x currently deprecates APIs and changes behavior within a patch release. And also bug fixes are not fixed in patches but moved to feature releases.
I know it's hard to do and there are always corner cases, where it's hard to judge whether a bug fix is really a breaking change or major change.. a bug fix is a deliberate change  - for a better behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3916
Wrong implementation of how to identify cookies · Issue #3916 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
RFC 6265 HTTP State Management Mechanism, 5.3 Storage Model, Step 11 defines the tuple (name, domain, path) as the cookie identifier.
However, the implementation of Http1xServerResponse and Http2ServerResponse use only the cookie name as identifier.
Steps to reproduce
Set two cookies with the same name but different path in a response header with
Expect 2 cookies on the client, but only get 1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3918
JsonObject.hashCode() and JsonArray.hashCode() do not conform to contract · Issue #3918 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Steps to reproduce
The implementation of hashCode() in JsonObject and JsonArray just returns the underlying list or map's hashCode() value. However, the corresponding equals() function in each class doesn't just return the underlying list or map's equals() value. Instead, a custom implementation is used. Specifically, numerical values have special handling in the equals() function in order to allow, e.g., Float and Integer objects to compare as equal if their underlying primitive values are equal. CharSequence objects are also have special handling.
This means that two objects could compare equal via equals() but return different hashCode() values. This violates the Java contract for equals() and hashCode(). This can be an issue when storing JsonObject and JsonArray objects in a HashSet or HashMap collection, since these collections assume that objects with different hashCode() values are not equal.
The recommended solution is to create a custom hashCode() implementation in both JsonObject and JsonArray that mimics the equals() implementation and so returns the same hashCode() value for any two objects if equals() returns true when called on those two objects.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3920
worker verticle executed by multi thread concurrently · Issue #3920 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Hi, I deploy a worker verticle,, but i find that the worker verticle is execute by multi thread concurrently,
I am not sure if it is a multi-thread worker verticle or else.
follow is the description of worker verticle from vertx
Worker verticle instances are never executed concurrently by Vert.x by more than one thread, but can executed by different threads at different times.
Version
Context
here is my code, the count is less than 10000, does my code have error?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3921
EventBus cannot handle received message when using Future inside · Issue #3921 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I encountered an exception which looks suspicious while executeBlocking when handling received message in EventBus MessageConsumer
Do you have a reproducer?
This is a test you can add it in LocalEventBusTest
It is exception when I debug in my project, hope this help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3923
about future tryComplete · Issue #3923 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
When complete error is regarded as a normal result, the Listener's complete result is inconsistent
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3925
Clustered eventbus not removing old node/pod on kubernetes rolling deployment · Issue #3925 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have two vertx micro services running in cluster and communicate with each other using a headless service(link) in on premise cloud. Whenever I do a rolling deployment I am facing connectivity issue within services. When I analysed the log I can see that old node/pod is getting removed from cluster list but the event bus is not removing it and using it in round robin basis. I am pretty sure that event is passed to hazelcast but not to event bus. I am not sure if there is any listener that I could listen and remove dead pods.
Below is the member group information before deployment
When deployment is started, pod 2 gets removed from the member list,
I have two vertx micro services running in cluster and communicate with each other using a headless service(link) in on premise cloud. Whenever I do a rolling deployment I am facing connectivity issue within services. When I analysed the log I can see that old node/pod is getting removed from cluster list but the event bus is not removing it and using it in round robin basis.
When deployment is started, pod 2 gets removed from the member list,
And new member is added,
But when a request is made to the deployed service, event though old pod is removed from member group the event bus is using the old pod/service reference
I am using vertx 4.0.3 and hazelcast kubernetes 1.2.2. My verticle class is extending AbstractVerticle and deploying using,
Sorry for the long post, any help is highly appreciated.
As mentioned earlier this happens only on deployment and if I restart the pods the issue is not getting reproduced.
This happens only on vertx4 4.0.3 and with vertx3 i haven't seen this issue.
Also I am not able to find event bus functionality that I can use it to removes the node info.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3926
Please enhance JksOptions to support selection of SSL key in keystore using an alias property · Issue #3926 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For context, I asked this question originally for Quarkus and was asked to raise an issue for a Vert.x change.
There is currently no way to choose the SSL key alias for cases where a java key store may contain more than one key, thus no way to ensure the correct key is used when presenting the server certificate for SSL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3927
Equality comparison of DecoderResult instances · Issue #3927 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
In the latest version of Netty, these can be two different instances of DecoderResult and therefore may not be equal even if they are both SUCCESS.
DecoderResult.SUCCESS is of type DecoderResult. request.decoderResult is of type HttpMessageDecoderResult. Two instances of different classes cannot be the same.
Do you have a reproducer?
Could make one if it would be helpful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3928
Add ability to enable/disable compression on a per request basis · Issue #3928 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
At the moment you can enable compression for HTTP responses, however this will compress every response. This means that responses that are already compressed such as images or videos will be doubly compressed, wasting lots of CPU cycles.
Use cases
This will allow end users to control which responses are compressed.
I propose that when compression is enabled we use a virtual header: X-Vertx-Disable-Compression. We can override beginEncode in `HttpChunkContentCompressor, and if this header is present remove it and disable compression.
Contribution
I can do it if you are ok, with the implementation. I don't particularly like the suggestion however I don't really see any other way to pass this info to Netty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3929
HTTP redirect handler should remove the content-length header · Issue #3929 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current HTTP direction handler needs to remove the content-length header of the next HTTP request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3930
HTTP redirect handler must propagates request headers to the next request · Issue #3930 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An HTTP redirected request will have its headers propagated by the client after the redirect handler has provided the next request options. Instead the redirect handler needs to take care of the headers propagation so the redirect handler has full control over the next request.
This is a breaking change for existing handlers that should propagate the headers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3934
Modify ExecutorServiceFactory API to provide a way to distinguish between pool types · Issue #3934 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
When ExecutorServiceFactory.createExecutor() is called, provide a method on the API to distinguish the type of executor being created. Maybe it's as simple as passing the name the ThreadFactory is created with?
Use cases
In Quarkus we want the ability to replace the default Executor in some situations, such as the Vert.x worker thread pool, with a shared pool we've created, but other pools create their own Executor instance.
Contribution
Happy to contribute a PR once it's determined the best way to provide an indicator to differentiate the pool types
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3935
Incorrect sec-websocket-location header scheme value for WebSocket V00 · Issue #3935 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The sec-websocket-location header value sent by the server during the handshake of WebSocket V00 protocol has an incorrect scheme (wss and ws are swapped).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3937
Deprecate peerCertificateChains method · Issue #3937 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java has deprecated SslSession#peerCertificateChains method for a long time. Recent Java versions will thrown an exception when calling it. These methods are deprecated in favor of peerCertificates() which return a List<java.security.cert.Certificate> on HttpConnection, WebSocketBase and NetSocket.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3938
Build passing for Java 16 · Issue #3938 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Ensure that Vert.x core (as part of the stack) build and is tested for Java 16. This is preparation work for the next Java 17 LTS.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3939
New peerCertificates method that returns a list of java.security.cert.Certificate · Issue #3939 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3940
Netty 4.1.65.Final · Issue #3940 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3941
Make some function in command launcher is extendable · Issue #3941 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Use cases
To extend configuration and CLI option in BareCommand and RunCommand without rewrite too much code, then I'd like to make some function is more flexible and able to extend in sub class.
Also, configuration must be processed in nature order as almost the common CLI:
If I want to add some CLI option like cluster-conf in BareCommand and make it works, I have to override method startVertx.
It is too long for implementation and if vertx changed any line this method, I will have to update over and over.
I can do a trick to update VertxOptions in beforeStartingVertx method but it is not nice when split build configuration in several places.
Also, if I want to do configureFromSystemProperties, I need to rewrite also, due to "private lock"
Then I provide a set of methods to easy buildVertxOptions in sub class, and users can decide which part they want to override:
I will open a PR
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3943
Register Jackson module automatically? · Issue #3943 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Can we use ObjectMapper::findModules() to register Jackson module automatically? (Instead of just new ObjectMapper())
Use cases
Now the default jackson mapper io.vertx.core.json.jackson.DatabindCodec.prettyMapper() and io.vertx.core.json.jackson.DatabindCodec.mapper() without any module registered.
When we use vertx-lang-kotlin, the jackson kotlin module will be added, but we have to register manually.
Contribution
I can create a pr for it, if it's ok.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3949
After uprading to 4.0.3 and above uploading multiple files/form datas  fail randomly · Issue #3949 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
In our applicatioin, we all upload multiple files using http and using Pump to write contents to HttpClientRequest. And we upgrade from vert.x 3.9.4 to 4.0.3(also tried 4.1.0.RC1) the tests case fails randomly.  The updated code to write multiple files
I guess the problem happends because vert.x 4.x change
writeStream.write(data);
to asynchronouse and not make sure if the data is actually written. And in our context, previously we check if a file successfully by ReadStream endHanlder, now the check can not make sure if the upload is successfully and cause the problem.
Do you have a reproducer?
Steps to reproduce
see questions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3950
Context duplicate should use the delegate task queue for ordering · Issue #3950 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a change that done in Vert.x 4 as we considered that ordering could be achieved on the duplicate context (which is correct in most situations) but can be unexpected for some.
We should change to the previous behavior and possibly later introduce an option to order on the duplicate context (e.g per HTTP request).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3951
Regression VertX 4.1.0-SNAPSHOT - HttpClient - HTTP/2 TLS - client dead when server closes socket · Issue #3951 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Using VertX HttpClient to execute Http Requests via HTTP 2.
Do you have a reproducer?
Steps to reproduce
execute first request against WireMock returning a Fault (throws exception as expected)
execute second request against WireMock returning 200 OK also throws Exception
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3952
Allow other types beyond String being used as key to store state in Context · Issue #3952 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
In class io.vertx.core.Context : methods getLocal, putLocal, removeLocal all require a key of type String.
Would be great to relax this requirement and accept any object types (Object?).
Use cases
We have to store a custom object with sub-scope identifiers as well; the current API is forcing us to encode additional scope as post-fixes on a shared root String, but this implies we have to allocate new String instances on each access.
Being able to use a composite object would still require allocation, but encoding of parts of scoping would be really cheap. Not leat, String comparison isn't very efficient when we have to use a shared prefix.
Contribution
I'm happy to contribute, if I can be guided towards which solutions are acceptable. It seems it might just be a matter of changing the signature on the API, but I'm not sure of the implications or additional requirements. For example, is this state supposed to be serializable?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3954
Duplicated context executeBlocking will always order task execution · Issue #3954 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The implementation of DuplicatedContext#executeBlocking(Handler<Promise<T>> block, boolean ordered) ignores the ordered value and always order blocking task execution.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3956
VerticleGroup is a list of verticle that share the same context. · Issue #3956 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when you haved a list of verticle that hope to run on the same context to avoid data race, you can used VerticleGroup
VerticleA, VerticleB, VerticleC and CompositeVerticleGroup will run on the same context.
Contribution
yes, I haved create an pr
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3958
Resource not found · Issue #3958 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm developing a web application base on Vertx-v4.0.3，
It is normal when running in the development environment of Intelli idea, but after packaging it into a jar, it reports an error Resource not found. The following is my configuration and package detail
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3959
Local consumer gets distributed event if a non-local consumer with same address is present · Issue #3959 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
In short, if a local consumer and non-local consumer with same address are registered, the local consumer also receives message from other Vertx cluster node.
Steps to reproduce
This is reproducible with both ZK and Hazelcast cluster manager, so I think it's more likely to be a Vertx core issue.
In another terminal, run PORT=8081 app/build/install/app/bin/app to start the event producer.
No message displayed in event consumer. This is expected because now only local consumer is registered.
Now kill the consumer and producer.
Now you can see the local consumer gets a message from distributed event bus.
Now you can see the local consumer gets a message from distributed event bus.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3960
Unable to initialize BouncyCastleAlpnSslUtils during GraalVM native-image build · Issue #3960 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Do not use this issue tracker to ask questions, instead use one of these channels. Questions will likely be closed without notice.
Version
I encountered an exception which looks suspicious while I was building my application with Graal 21.1,0 using native-image:
Do you have a reproducer?
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3961
does vertx support java16? · Issue #3961 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
does't vertx support java16?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3962
Provide elliptic curve key delimiter execution path · Issue #3962 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to load an ECDSA key that is formatted using the following delimiter:
This is what I'm getting as a result:
As you can see from the stack trace, this is from a Quarkus application that is running on java-11-openjdk.
From the enhancement request #2547, I see that support for parsing ECDSA key is already there, so I guess it would be just a matter of adding the relevant switch execution path.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3965
vertx 4.0.1 OAuth2AuthHandler.create(Vertx vertx, OAuth2Auth authProvider) && OAuth2AuthHandlerImpl.setupCallback · Issue #3965 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
the method invokes:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3966
Event loop thread affinity · Issue #3966 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Allow users to define Netty event loop threads cores affinity.
Given that Vert-x use long-living threads bound to specific selectors, being able to bind it to a specific core can increase performance (and its stability) of both I/O and non I/O tasks because of a reduced amount of context-switches and a better usage of cache, given that the event loop data won't "migrate" across cores (and caches) anymore.
This feature, thanks to the symmetric nature of event loop threads, could be implemented by allowing users to specify at startup
a preference set of cores and the application will take care to "distribute" such cores to the existing event loop threads.
A good candidate for a POC implementation is http, while a final version can use an ad-hoc JNA affinity util a-la hazelcast/hazelcast#17435 to save "OpenHFT lib to be on the classpath and libffi.so to be loadable too" as mentioned in the HZC PR.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3967
java.lang.IllegalStateException: Result is already complete · Issue #3967 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Description
After upgrading to from 4.0.3 to 4.1.0 some of our instances end up in a failure-state where most http-calls timeout or fail.
The only similarity between them is the occurrence of the exception shown below. However we do have a few of these exceptions without ending up in that failure-state.
Version
With netty 4.1.65.Final (as specified by vertx)
StackTrace
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3968
blockingHandler of WorkerVerticle did not perform as expected · Issue #3968 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
blockingHandler of WorkerVerticle did not perform as expected.
Context
blockingHandler is always executed on the same thread, whether or not ordered is true.
Do you have a reproducer?
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3969
Non-exitent KeyStore alias is not reported as an error · Issue #3969 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
While integrating the alias feature (#3926/#3933, thanks for that!) in Quarkus (quarkusio/quarkus#17884), I noticed that I can specify a bogus alias via io.vertx.core.net.KeyStoreOptions.setAlias(String) and vert.x just doesn't mind.
This makes it unecessary user-unfriendly to find configuration mistakes.
Do you have a reproducer?
I don't have a small and simple reproducer but the problem can be observed in Quarkus.
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3970
Introduce support for key password (not store password!) in KeyStoreOptions · Issue #3970 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
There is io.vertx.core.net.KeyStoreOptions.setPassword(String) for the store and .setAlias(String) to select a specific key from the store, but there is nothing to set the password for a specific key.
#3452 seems closely related.
Use cases
In "enterprisy setups"™, more often than not you have multipe key pairs in a single key store and each of it is protected by an individual password. In such cases, just having a keystore password is not sufficient.
FWIW: Spring and WildFly both have something like key-password in config.
Btw, something like .setKeyPassword(String) would make sense to me.
In that context, maybe .setAlias(String) should be renamed to .setKeyAlias(String) to make things clearer.
See also this discussion over at Quarkus: quarkusio/quarkus#17884 (comment)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3971
blockinghandler set order to false is not work · Issue #3971 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I set Request to BlockingHandler and Order to False.But the tasks are still executed serially, not in parallel
Version
Which version(s) did you encounter this bug ? 4.1.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3972
Make Serializer as Public or Module with (de)serializer · Issue #3972 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Make serializer as public
SerializationInclusion#Include.NON_NULL mus be set before register serializers, but with DatabindCodec, this not possible
To do that, we need to redefine serializers use on DatabindCodec because they aren't define as public  https
Other better solution is to add a vertx jackson Module with serializers ?
Use cases
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3973
Protocol error on H2C Server with compression enabled and blocking handler · Issue #3973 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
Following error is thrown by curl when performing h2c upgrade to the server configured with compression enabled and a blocking handler
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3976
Can not handle exception in thread "vert.x-eventloop-thread-*" io.vertx.core.impl.NoStackTraceThrowable: Redis waiting Queue is full · Issue #3976 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Context
The following is invalid
Hope to get your help, thank you。
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3977
Let VertxInternal#sharedTCPServers  allow other server to be used · Issue #3977 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
purpose
Write netty code directly in vert.x  Reuse both vert.x threading model and vert.x components
because
So you can't do it
Describe the feature
Contribution
I can contribute this feature
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3979
Event Bus: Fail discarded requests · Issue #3979 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you unregister a MessageConsumer, pending messages (including requests) are discarded. As a result, the following test takes 30 seconds until the request runs into a timeout.
I propose that instead of waiting for the timeout, the discard handler could reply a failure for every message that has a replyAddress. I guess ideally it would be a specific failure type but ReplyFailure.TIMEOUT might have better backwards compatibility. Note that this issue relates to #2488 since #2488 might allow users to implement the proposed behavior on their own.
The main advantage of this change is to avoid unnecessary delay while waiting for the timeout.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3980
Websocket connection error with Metrics activated results in NPE · Issue #3980 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
This bug is present on the master branch since this commit : 4f23ce2#diff-41d7eec89a678b91bc16fd2525dd321474c95dea17d742af46392c4feb2697c2R721
Context
I encountered this exception while trying to handle websocket exceptions with metrics activated.
Do you have a reproducer?
No.
Steps to reproduce
enable vertx metrics
fail a websocket handshake
see following NPE :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3983
Asciidocs for Vertx Core Http can improve · Issue #3983 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Vertx Core docs on the topic of Http have various mistakes which reduce readability.
Examples:
A paragraph with the heading "Reading the request body" refers to the response body:
The first code block of this paragraph exemplifies incorrect usage, but isn't labelled as such:
Aside from that there are some minor verb conjugation flubs. Easily fixed, but understandably dull. I might correct those down the road
I'm working on streaming the body of a response using Smallrye Mutiny, and between these libraries' documentation,  it got a little confusing trying to keep track of the various mappings.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3984
add OAuth2Auth.logout(User) · Issue #3984 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
OAuth2API provides a logout method. However this method, nor the api object, are not accessible from OAuth2AuthHandler.
I think there is currently no way to logout a OAuth2 user, than invoking
Contribution
I sugest adding the following implementation to OAuth2AuthProviderImpl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3985
Http2ServerResponse#write(ByteBuf, boolean, Handler<AsyncResult<Void>>) should take empty trailers into consideration · Issue #3985 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As part of the processing within io.vertx.core.http.impl.Http2ServerResponse#write(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler<io.vertx.core.AsyncResult<java.lang.Void>>), the trailers variable is checked for null but not also if it is empty, which can lead to some parts of the response end processing to not complete as expected and no END_STREAM flag being sent.
This can occur when io.vertx.core.http.impl.Http2ServerResponse#trailers is called but no trailers are actually added.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3987
Vert.x should not load its classes in IsolatedClassLoader · Issue #3987 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I encountered the below exception when deploying two different verticles at the same time
A parent verticle deploys two others using Maven Service Factory
The exception occurs when trying to access any external dependency
Do you have a reproducer?
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3988
H2C upgrade server initial settings might not be sent when compression is enabled · Issue #3988 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An HTTP server performing an H2C upgrade when compression is enabled might not send the HTTP/2 initial settings frame. The upgrade handler will correctly remove the compression deflater and the chunked write handler will only be removed later. When the H2 connection handler writes the initial settings frame, the frame remains buffered in the chunked write handler and is lost when the frame is removed. The chunked write handler should be removed along with the compression deflater before the connection is upgraded.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3990
Able to change the DefaultFullHttpResponse & behavior of HTTP response (414 and others) · Issue #3990 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
By default, if we have HTTP response and status 414 Request-URI Too Long, There is no headers, and no body in the response apart from status 414 Request-URI Too Long.
Currently we do not have way to change the default response behavior, where one might want to add headers or response body.
Minimalist reproducer
Code and Postman Collection for test
Use cases
This will allow to change, have more control over the default behavior and to have specific headers like Content-Type: application/json and certain payload in these default responses.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3991
HTTP client redirection should perform redirect after the response has been received · Issue #3991 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current HTTP client redirection performs the HTTP redirection immediately after the response headers have been received. In some situation (server sends a redirection with a large response body) the client will consume more requests than the pool defines and lead to timeout situations.
We should perform the redirection after the response has been received instead, it will improve this situation and has no impact on regular redirections with a small body.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3992
HTTP server invalid request handler · Issue #3992 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP server uses a custom policy to handle invalid HTTP requests. Users should be able to use a specific policy to handle such invalid requests.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3994
Two distinct HttpServer creations with port 0 yield the same random port (usually) · Issue #3994 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Summary
Two individual calls to vertx.createHttpServer(...) with port 0 yield the same random port (usually, see note on race condition futher down).
In context of Quarkus, this is irritating for users because Quarkus will print something like:
Furthermore, something seems to break after a very special sequence of QuarkusTests (that I'm not allowed to share due to closed source) in Quarkus 2.0.0 which uses vert.x 4.1, but that doesn't happen with Quarkus 1.13.7 which uses vert.x 3.something.
See quarkusio/quarkus#18154 for details.
This problem vanishes if I use a fixed port for https (my tests are using http anyway, not https).
While debugging/adding logging, I think I have also found a concurrency issue in TCPServerBase that I have described here:
Do you have a reproducer?
See Quarkus based reproducer in quarkusio/quarkus#18154
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3996
restore support for creating (new) SqlClient from existing DataSource · Issue #3996 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Pls restore the functionality to: create an SqlClient from an existing DataSource (so that I can use the oracle ucp pool).
but, it doesn't seem to exist in the new io.vertx.jdbcclient, io.vertx.sqlclient pkgs
pls, restore this feature so that I can stay modern.
See also
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3997
Eventbus websocket registration - repeated registration of the same address via the same websocket causes memory leak · Issue #3997 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Eventbus websocket registration - repeated registration of the same address via the same websocket causes memory leak
Version
Which version(s) did you encounter this bug ? 3.9.4, 4.0.2
Context
I encountered an situation which looks suspicious when I was investigating problems with sockjs / eventbus intergation. Testing was done using jmeter / websocket.
Do you have a reproducer?
yes - see below
Steps to reproduce
Extra
if metrics are enabled - this will be visible under vertx_eventbus_handlers (for micrometer)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3998
Random port server sharing · Issue #3998 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x provides a server sharing facility that lets a verticle to be deployed with several instances and share the same underlying socket event-loop group. This does not work well with randomly assigned port and Vert.x has introduced a sketch of this feature when the port 0 is used within a verticle but this has several drawbacks:
a verticle is limited to binding one random port (the second server will join the first one)
this feature is only available within a verticle
This feature can be improved by reverting the port 0 to the previous behavior and use negative port numbers to implement random port sharing (independently of the deployment being a verticle or not) grouped at the index of the port, e.g two servers bounds on port -1  will use the same shared random port.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4000
local address  are registered to the cluster · Issue #4000 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I use websocket through vertx and enable the cluster (zookeeper). I noticed that when a websocket connection is created, an address will be generated and registered to the zookeeper. When the registration is cancelled, only the data in the address will be cleared, not clear the address, causing the zookeeper node to increase indefinitely,Many nodes like this:
i read the source code,found this :
the handlerHolder，isReplyHandler() is false，but localOnly is true，
so the address  is registered to the clusterManager。
I think this address should not be registered to the clusterManager,because  the address is registered with localConsumer method,
Maybe it should be so?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4001
NetClient local connectTimeout support · Issue #4001 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
NetClient now use a global connectTimeout by NetClientOptions.
is that possible set a local connectTimeout when use NetClient.connect(xx) method ?
Use cases
so we can use a shared NetClient for tcp health check with difference upstream connect timeout.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4002
Unnecessary HttpClient socket event bus registration · Issue #4002 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since the HttpClient uses a NetClient to manage sockets, the NetClient does register an event bus handler for the NetSocket. In such situation we should avoid this as this is not necessary.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4006
Standard verticles with worker pool name setted are not properly assigned event loop · Issue #4006 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Multiple standard verticles are assigned only the half of all event loops, and another half of event loops are always idle.
Version
When deploying one verticle with worker pool name setted, vertx object's createSharedWorkerExecutor method is called, and in this method getOrCreateContext method is called to add close hook. and out of createSharedWorkerExecutor method the second time getOrCreateContext is called.
getOrCreateContext method returns event loop one after another, and in current scenario deploying one verticle vertx looped two event loops, and verticle is assigned the second event loop.
Unfortunately default event loop pool size is core*2, this means no matter how many verticle instances are deployed, they are assigned only the half of all event loops.
Steps to reproduce
Create vertx with default VertxOptions, and default event loop pool size is core*2.
Deploy verticles with worker pool name.
Analyze by VisualVM, and we will see the relations between verticles and eventloop is like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4008
MetricsOptions Enabled Doesn't Work with SysProps · Issue #4008 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
while keeping beforeStartingVertx(options); in the current location appears to fix the issue.
Do you have a reproducer?
Add to LauncherTest#testCustomMetricsOptions() assertTrue(launcher.getVertx().isMetricsEnabled()); and you will see that the assert fails. After moving the builder.init() back to the previous location, that assert will pass.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4009
Close long running connection · Issue #4009 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have implemented k8s health checks(readiness and liveness) to ensure healthy containers. The problem I am facing is that when the liveness probe fails for 2 times, I want to close all the connected connections (some of them might be long running connections) before I can restart the containers. Is there any way I get get the list of all connected connections and close/terminate them. I am using vertx-web 4.x .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4010
Vert.x WebClient should support Content-Encoding: gzip/deflate on POST/PUT · Issue #4010 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Vert.x WebClient at the moment does not support automatic decompression if the http response has Content-Encoding : gzip on POST/PUT Request.
If we add below code while creating Vert.x client, we only get below header in http response.
Use cases
This automatic decompression of http response header and body should also work with other response compression algorithms [Accept-Encoding:gzip, deflate, br].
This feature needs to be implemented in vert.x core.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4011
Deployment named worker pool should not create a worker executor · Issue #4011 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A deployment using a named worker pool will create a worker executor and then unwraps the internal worker pool. The worker executor creation might create an extra vertx context potentially interfering with the deployment of multiple instance of the verticle that will be assigned only a portion of all available event loops.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4012
webSocket  EventBus  Timed out after waiting 30000(ms) for a reply · Issue #4012 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Timed out after waiting 30000(ms) for a reply.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4016
requests to io.vertx.core.http.impl.Http1xServerRequest.trace() are throwing NullPointerException · Issue #4016 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
After upgrading to Vert.x 4.1.1 we started experiencing these errors on our logs
Do you have a reproducer?
We found out that this snippet throws the exception:
but this one doesn't
thanks in advance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4017
a file download bug of static handler · Issue #4017 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
StaticHandler Bug!
Version
Context
My project is running on vert.x 4.1.0.
Some mp3 files need to be downloaded by url, /donwload/*.mp3, which is a static-handler router.
But the file downloaded by /downlaod/*.mp3 has a wrong file size and failed to read.
If rename the mp3 files as jpg，the client can get the right size files.
When i change vertx form 4.1.* to 3.9.*, all run good.
Do you have a reproducer?
Steps to reproduce
test.mp3 and test.jpg are the same files expcept names.
but client gets two different size files.
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4018
ConfigRetrieverImpl use equal() to compare two JsonObject · Issue #4018 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
ConfigRetrieverImpl use equal() to compare two JsonObject,thus it will be always be false.
Version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4019
Event Loop Thread Pool Size with Hyperthreading on Linux · Issue #4019 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
While testing out Vert.x i noticed that the size of the default Event Loop Thread Pool was 32-Threads on my linux-system.
However i have only 16 logical CPU's (8 physical-cores x 2 threads).
Shouldn't the default number of Event Loop Thread Pool be twice the number of physical CPU-Cores instead of logical CPU's (so 16 instead of 32)?
I checked
and the value of 'Cpus_allowed' inside '/proc/self/status' seems to be the number of logical cpu's (so 16 for me), so hyperthreading was already calculated there. Therefore in my opinion it is not correct to double that size again.
Java Version: 11
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4020
Server WebSocket handshake should set the HttpServerResponse as written · Issue #4020 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The server WebSocket handshake sends directly a Netty response through the handshaker, it sets the responseInProgress field of the Http1xServerConnection appropriately but leaves the Http1xServerResponse as is.
When Http1xServerResponse is used after the handshake it might fail (see #4016), instead the response should be updated to become written and throw IllegalStateException when response write operations are performed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4022
Rename HTTP client option tryUseCompression to decompressionSupported · Issue #4022 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The client tryUseCompression option seems misleading as it implies that it will try to compress the request and instead it means that it will send a request with an accepting-encoding header set to a compression algorithm to tell the server that it supports a compressed body and will inflate it.
The server can decompress HTTP client bodies and the option is named decompressionSupported. We could deprecate tryUseCompression and rename it decompressionSupported.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4023
add a method in HttpClientReuqest to get the request metric · Issue #4023 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
We are reporting metrics using VertxMetrics， and get metric object through
This is fine to get TCPMetrics.
Request metric is accessable  in HttpClientStream, but it is a protected member of HttpClientRequest, and we can not get the request metrics.
Use cases
Report request metrics like time taken in request begin and end.
I am not sure if it is suitable to add a method Object metric() in HttpClientRequest, and I can create a PR if it is fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4024
Concurrency issue in listener of TCPServerBase#listen · Issue #4024 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I stumbled upon a concurrency issue while debugging TCPServerBase in context of #3994:
There is a race between what's happening in that listener that is registered via bindFuture.addListener(...) and the code that is running directly in that listen method after doBind() is done.
That listener is setting the "outer" field id with the actual port but that field is also pre-set before that listener with port 0.
So dependening who is faster (the listener or the outer method code), the final sharedNetServers.put(id, this); will either pick up the id with the actual port or the one with 0. This is even less predictable due to id not having volatile or synchronized.
The effect while debugging was that if I waited before sharedNetServers.put(id, this);, I was getting another random port for each verticle (correct term?) while without debugging all got the same random port.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4025
Quarkus needs the ability to change the ClassLoader · Issue #4025 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Quarkus Development mode works by dropping and re-creating a class loader every time code is changed. As this is triggered by a HTTP request vert.x is not restarted each time, so the HTTP requests work as expected.
This is causing issues such as quarkusio/quarkus#18299 where vert.x is hanging onto the original ClassLoader that was passed in at creation time. With Vert.x 3 we worked around  this by manually scheduling a task on each IO thread that updated the Thread context ClassLoader, however this no longer works in Vert.x 4, as Vert.x is resetting the CL each time.
For now we are likely going to work around it via vertx.disableTCCL=true and filtering out the resulting warnings.
In terms of implementation I was thinking maybe instead of Vert.x taking a ClassLoader it could take a Supplier, and this could be use to obtain the correct TCCL each time.
I can implement it if there is consensus on what it should look like.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4027
For vertx core of  Promise maybe offer a abstract Promise Impl · Issue #4027 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Use promise  every time，i will new an anonymous class， it's not so easy to use,just this:
For vertx core of  Promise maybe offer a abstract Promise Impl to simplification
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4031
PKCS12 Keystore format when running in a FIPS-restricted JRE · Issue #4031 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
3.9.8, but later versions appear to have the same issue.
Context
We are developing a number of applications that need to be able to run in a JRE that has all non-FIPS compliant encryption formats disabled/removed. We have a BCFKS KeyStore, and we are able to read it in, however, we get an error because Vert.x then tries to initialize an internal PKCS12 KeyStore, which is not present in our environment:
We traced the issue to the createEmptyKeyStore function in /src/main/java/io/vertx/core/net/impl/KeyStoreHelper.java, which hard-codes the new empty keystore to the PKCS12 format. We verified that we could create a custom build of Vert.x with the hard-coded value changed to BCFKS, and Vert.x then successfully runs on the affected environment, however this is not a practical long-term solution.
Do you have a reproducer?
To reproduce, you will need to remove the PKCS12 KeyStore format from the JRE's lib/security/java.security file. To do this, find the list of providers and comment out the line containing com.sun.net.ssl.internal.ssl.Provider. Save the file, and then read in a (non-PKCS12) KeyStore using Vert.x.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4032
Promises/futures with context do not always use context exception handler · Issue #4032 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Description
If a promise is completed or failed, any handler attached to the associated future may throw an exception. How that exception is handled currently depends on several factors:
The behavior of situation 2 should match 1. But it currently matches 3. This behavior is due to the if() statement at
See #1568 for the discussion that led to the creation of this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4033
Metric "vertx.eventbus.messages.pending" is not decreasing. · Issue #4033 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Metric vertx.eventbus.messages.pending is not decreasing in some cases.
In my application, it seems exact number of handlers going up and down well as time goes. while some of pending handlers seem to forget to decrease themselves metric.
At the end of the cliff, I had restarted the application.
I think this mismatch supposed to happen at the point of rapidly unregistering consumers... maybe?
I made a reproducer for it. @vietj
check http://localhost:8080 with browser which shows weird prometheus metrics. You can see vertx.eventbus.messages.pending is stuck.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4035
Disable TCCL propagation at the Vertx instance level · Issue #4035 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vertx provides the vertx.disableTCCL property to disable thread context classloader propagation on context actions. Sometimes it is desirable to achieve the same behavior without relying on a system property.
We should introduce a disableTCCL property on VertxOptions to control this behavior and have the default value being set to false or configured to vertx.disableTCCL when present.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4036
Remove legacy TCCL check log · Issue #4036 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This log is not really helpful, in addition it is possible to disable TCCL and have a TCCL set to the non system classloader.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4038
Add support for Unix domain datagram sockets when using native epoll/kqueue transport · Issue #4038 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Now possible in Netty : netty/netty#11423
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4042
Vert.x 4.x swallows exceptions in UDP listenMulticastGroup · Issue #4042 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
When running the following code under 3.9.x I see the NullpointerException print out to the console.
However, when I use the same code under 4.1.2 the exception is swallowed and the "failed" method of the result is not called. I had to step through the debugger to find the exception.
I would like to listen on ALL interfaces without having to loop through the interfaces on my machine. I've done this in the past with other frameworks but was hoping that just using this method would do it.
I just wanted to make you aware of the exception handling differences between the two versions...
Do you have a reproducer?
Steps to reproduce
Run the above code under both 3.9.x and 4.1.x codebase and observe the differences in exception handling
Extra
I found this issue which shows the NullPointer issue on MacOs.
listenMulticastGroup doesn't work with a null NetworkInterface
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4043
Raise default value for maxFormAttributeSize on HttpServerOptions · Issue #4043 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
The default value for maxFormAttributeSize on HttpServerOptions is very low (2048 bytes), and can cause issues for those upgrading from Vert.x versions without a default (e.g. Vert.x 4.0.0). It personally was very unhelpful to me, and needed to be immediately raised. I recommend at least 5120 bytes, since that seems a more reasonable limit for modern machines. 5kb won't be a value large enough to fill up the memory of a machine with a reasonable amount of memory.
For those who did not set maxFormAttributeSize like myself, seeing a cryptic error like:
is confusing and does not give any useful keywords to work with on what to do. I only found out about maxFormAttributeSize after Googling the exact error and finding an answer on StackOverflow. In the Vert.x Discord, @vietj mentioned that a warning might be a good idea for dealing with this issue. Personally, I think it would be helpful if a warning was printed if a value is not specified for the size in Vertx.createHttpServer. I think this is justified because leaving such a value up to defaults that could change from version to version is a very bad practice and will end up in applications breaking.
I also believe maxFormAttributeSize should be used in the Vert.x Core docs, as well as the Vert.x Web docs because it is very relevent for those learning to use them.
@vietj was the one who brought up changing the default in the Discord, and I think he would be the best person to implement this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4046
RoutingContextImpl always logs failures · Issue #4046 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
io.vertx.ext.web.impl.RoutingContextImpl#fail(int, java.lang.Throwable) will always log a failure at INFO. This is a problem as it means that later failure handlers can't choose to log or not to log.
I think this should be changed to a 'last resort' approach, where logging at error level only happens if it is not handled by the error routes.
In addition IMHO this should be logged at DEBUG for 4xx responses, and ERROR for 5xx responses. 4xx responses can be trivially caused by the client, and it is not a good idea to allow clients to generate arbitrary amounts of log messages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4048
vertx-health-check does not respond properly if using mountSubRouter() · Issue #4048 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The health check returns {"message": "Not found"} if you use sub-router with the application path '/'.
Prometheus is has a very similar programming approach but it is not buggy and it works as expected with any path in the main router.
Version
My code looks like this:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4049
io.vertx.core.impl.logging.Logger should support parameterized messages · Issue #4049 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The slf4j supports the log format e.g. {} then {} and {}, where you may log the message with var-args LOG.info("{}{}{}", "1", 2, 3).
Can we have the same programming paradigm in  Vert.x?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4050
Multicast join/leave group network interface improvements · Issue #4050 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Joining / leaving a multicast group without a specified network interface will most of the time result in an uncaught NullPointerException. In this case the implementation could try reusing the multicast network interface when it is set otherwise guess the network interface from the bind address, otherwise properly report that no network interface could be used for membership management.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4054
Provide metric hand-back after event bus consumer unregistration · Issue #4054 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The event-bus consumer clears the metric hand-back object on unregistration causing event-bus metrics event to signal events (messageDelivered and discardMessage) with a null hand-back leading to potential metric corruption.
We should avoid to eagerly set the metrics hand-back to null and instead let the garbage collector handle it when the message consumer is garbaged.
This is the root cause of #4033
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4058
Use Vert.x WebClient component under macOS operating system to request warning log · Issue #4058 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the WebClient component to send a request and the following log occurs. How can I solve the problem?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4059
MacOS IPv6 UDP - No Route to Host (Works on Linux and Windows) · Issue #4059 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
I encountered an exception which looks suspicious while trying to use UDP packet sending on MacOS.
Do you have a reproducer?
Yes, I hope it is helpful. I spent a lot of time to make it configurable and to try to demonstrate the scenario I'm trying to accomplish and show you the error I am getting.
I tried to give as much documentation as possible..
All information is in the README
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4060
Document MacOS native Netty DNS resolver · Issue #4060 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also use it for vertx-core tests
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4061
HTTP/2 client connection handling might leak when receiving an immediate GO_AWAY frame · Issue #4061 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The handling of a pooled HTTP/2 client connection might race and leak a connection when the server sends immediately a GO_AWAY frame. The client pool integration might set the eviction handler after the connection has been evicted when the connect action is done outside of the event-loop thread.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4065
Enable custom host name verifier · Issue #4065 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
NetClientOptions now support specific algorithm for host name verification.
Is it possible to support custom host name similar to the uses of javax.net.ssl.HostnameVerifier?
Use cases
Besides the default verification which compares the common name in the SubjectDN in the SSL server's digital certificate with the host name of the SSL server, one would want to verify other behaviors.
My uses case is that we use a vertx client to talk to a server whose cert's common name isn't a valid host name. So we want to verify one fixed field in the SubjectDN. Currently we disable the host name verification to skip this because vertx asks a specific algorithm for the verification, but our case needs a more complex logic.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4066
Issue with spring application shutdown · Issue #4066 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 4.1.0
I have created a mock server which is running at 8000 port while my application runs at 8090 port. I did below to start the mock server,
So before closing the spring boot application, i executed the below
However, if I remove this mock server and try shutting down, it went gracefully.
Could you help me with this ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4067
Provide a mean to disable error loggin in RoutingContextImplBase · Issue #4067 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
In vertx 3.x RoutingContextImplBase did not log at error/info level when an exception occurred in a handler, now it logs twice:
This is too much noise in the logs. Now i could disable the whole logger from logging but it is slightly an overkill. Furthermore i do not need these logs since i have an error handler on a router which logs already everything i need the way i need.
Use cases
Reduce noise in logs
If error is already properly handled these logs provide little value
Also it logs failures and stacktraces everytime there is a call to fail() which also pollutes logs, disabling this logger is the only solution i am aware right now
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4069
Deadlock when closing Vertx and WorkerExecutor concurrently · Issue #4069 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I met a deadlock issue recently on Vertx version 4.1.1 and after investigated and looked into the VertxImpl, CloseFuture, WorkerExecutorImpl, it looks like the deadlock happened in Vertx, please take a look:
In my case, the deadlock issue is hit when the vertx.close and workerExecutor.close happened to be called at same time, one from main thread and another from eventloop thread. (the workerExecutor is created by the vertx.createSharedWorkerExecutor)
Backtrace printed by jstack:
Found one Java-level deadlock:
Found 1 deadlock.
Checked vertx 4.1.1 code and find:
When closing WorkerExecutor, it will do:
Lock self (WorkerExecutorImpl)
Remove self from CloseFuture
Close SharedWorkerPool, which require lock Vertx
When closing Vertx, it will do:
Lock self (VertxImpl)
Close CloseFuture, which synchronized copy the list of callbacks and invoke them outside of the synchronized block, one of the callback is to close the same WorkerExecutorImpl instance as above
So, when the copy of callbacks in CloseFuture happened before removing the WorkerExecutorImpl from CloseFuture, it will still be called and cause deadlock
T1
Start close Vertx, locked VertxImpl instance
T2
Start close WorkerExecutor, locked WorkerExecutorImpl instance
T3
In CloseFuture, the list of callbacks are copied
T4
Remove WorkerExecutorImpl instance from CloseFuture. But since the callback is already copied in T3, this doesn't prevent the callback from being called
T5
The callback of close WorkerExecutorImpl instance is called. This require lock on the WorkerExecutorImpl instance, which was acquired by eventloop thread at T2. So it is waiting for the lock to be released by eventloop thread
T6
Close SharedWorkerPool, and this require lock on the VertxImpl instance, which was acquired by main thread at T1. So it is waiting for the lock to be released by main thread
Deadlock
Deadlock
The issue seems still exist in 4.1.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4072
NPE when trying to get body of a chunked HTTP response in client · Issue #4072 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I try to create a server streaming a chunked response, and test it using the Vertx HTTP client. The client throws NullPointerException on receiving response if no headers were added in the Request.
If any header is set, then the test hangs infinitely – the HttpClientResponse never ends and receives the body.
In the first case, this is the NPE’s stack trace:
NPE stack trace
Do you have a reproducer?
Here’s a simple test-case written in Kotlin, test without the header hack, with header hack to avoid NPE, and another one using async-http-client. Only the async-http-client one passes.
Steps to reproduce
Clone the repo linked above.
The code is in src/test/kotlin/chunked/reproducer/ChunkedTest.kt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4074
HTTP client tunnel without request headers triggers NPE · Issue #4074 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClient tunnel creation assumes when it gets the server response that the request always sent headers and the headers multimap is never null which leads to an NPE when no headers was sent.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4075
HTTP client tunnel establishment failure prevents HTTP response end event to be signaled · Issue #4075 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When an HttpClient tunnel cannot be established the connection should switch the isConnect field to false so that the response will be normally processed. Otherwise the response will be processed as if a tunnel was established and the last HTTP chunk event will not be signaled to the response end handler.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4076
HTTP/1.1 client stream might be closed twice · Issue #4076 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP/1.1 client stream close handler can be called twice leading to recycling the connection to the pool more than it should triggering the pool guard against it
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4082
Use of NoStackTraceThrowable · Issue #4082 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using kotlin coroutines the use of NoStackTraceThrowable causes problems that are really hard to find.
This code will not catch the error
to catch the error we would need to catch Throwable which forces us to check if it's an Error.
When using futures directly, this isn't as much of a problem I guess.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4084
setTimer should not throw when delay < 1 · Issue #4084 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
4.1.2
Context
When setTimer is called with delay <1, it will throw IllegalArgumentException.
This behavior is unacceptable as it can easily take down the whole service.
Instead, it simply needs to do max(delay, 1).
Note that node.js doesn't throw in this case. There is no sane argument why it should throw. setTimer(0) simply means execute as soon as possible.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4087
Change `EventBus.registerDefaultCodec` from `MessageCodec<T, ?>` to `MessageCodec<? super T, ?>` · Issue #4087 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Read me
Describe the feature
EventBus.registerDefaultCodec currently allows to register a default message coded for a given class T. We would like to reuse the same message codec to send them over the wire. However EventBus.registerDefaultCodec does not have a MessageCodec<? super T, ?> and thus does not allow it.
Use cases
Imagine having multiple "Ducks" that you want to send via the wire:
All ducks implement the Duck interface and a toJson method.
The idea would be to implement one DuckMessageCodec which can handle any duck by calling the toJson object. Currently you cannot register this one codec for all the ducks, because:
Contribution
It is a one line change thus it could be contributed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4090
Incorrect observability events when processing pipelined HTTP server requests · Issue #4090 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP server request events will notify observability events incorrectly when processing pipelined requests. The request begin event will be omitted and the request end event will be emitted independently of the application request handling.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4092
Test Vertx with Java 17 on CI · Issue #4092 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Java 17 (LTS) will be released soon, do you know if Verx 4.X is supported under this JDK version.
Related to: #3961
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4094
Improve Handler<Promise<T>> · Issue #4094 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
The Handle() method definition does not throw an exception, which sometimes makes the code look verbose and cumbersome.
Exception catching seems redundant here, because the promise can be automatically set to fail when the program is error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4095
openapi gives 400 http status code, when uploading file with multipart/form-data · Issue #4095 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
Vertx openapi gives 400 http status code, when uploading file with multipart/form-data
Do you have a reproducer?
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4097
doc: DEFAULT_CACHE_MIN_TIME_TO_LIVE/DEFAULT_CACHE_MAX_TIME_TO_LIVE documentation is incorrect? · Issue #4097 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Latest 4.x
Steps to reproduce
Observe this says
Observe that
is actually a positive cache TTL (positive=cache hit) to cache successful responses
I believe that the negative part was just left over from copying and pasting the comment, it's for cache hits. DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE is the only constant that's actually a negative TTL for cache misses
Desired Behavior
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4100
Provide configurability of various compresssion HTTP algorithms beyond deflate/gzip · Issue #4100 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4101
Add promise.resolve and promise.reject · Issue #4101 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
In javascript, the Promise API provides two useful utility methods Promise.resolve and Promise.reject for quickly turning a value into something wrapped by a promise. It would be nice to have this feature included with the core Promise.java class.
Use cases
For example, I've seen the following code snippet used in the codebase
which is rather verbose. It would be nice if I could just write
for those last three lines.
Contribution
Who should implement this feature ? are you volunteering for implementing this feature or
do you know that is able and willing implement this feature ?
TBD
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4102
Provide a way to access the vert.x file cache directory  · Issue #4102 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Vert.x uses a file cache to hold resources from the class path. This allows vert.x to get better performance on file IO and users to safely pack resources with their applications.
Given that such cache is per vert.x instance, we cannot rely on system properties to know where is the location of the instance cache. For this, users have been using a non specified behavior VertxInternal#resolveFile("") to compute the location.
This has several problems:
It is not guaranteed to work when cache is disabled
It doesn't respect the vertx.cwd variable
it is expensive as it may go over the classpath file resolution
For this we should add an internal API to return the path or null if cache is disabled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4103
Reduce the classpath lookups on misses · Issue #4103 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When resolving resources from the classpath, vert.x needs to make use of class loaders. This can be an expensive task. When a resource exists, it gets extracted to the cache and any further resolution is just a simple file system access.
However if there are misses, they always go over the classpath. To reduce the number of classpath scans, the resolver should make use of a inverted bloom filter. On each miss the miss is added to the filter. Given that the filter can return possible false negatives the consistency of the valid cases is guaranteed and we may end doing a few redundant checks which already is a good improvement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4104
WorkerExecutor.executeBlocking sometimes holds a lock on the WorkerExecutor after the blocking call has completed · Issue #4104 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran into a Java deadlock in a large application, and based on the stack trace of the blocked threads, it seems to be caused by each thread running WorkerExecutor.executeBlocking on the same two WorkerExecutor instances, but in a different order. One thread looked like this:
And the other like this:
If that fut.onComplete call runs after the blockingCodeHandler has finished, the asyncResultHandler will be executed right away on the current thread. This means that we stay inside of the synchronized block as we continue on. If one thread does
we1.executeBlocking(...) followed by we2.executeBlocking(...), and another thread does it in the reverse order, and the first call each thread makes ends up running asyncResultHandler right away, you deadlock.
Do you have a reproducer?
Here is a simple JUnit test that reproduces it:
Note that you also need to add a breakpoint on this line in WorkerExecuteImpl.executeBlocking, to ensure that the blockingCodeHandler always finishes before fut.onComplete runs:
I used the Intellij "Evaluate and log" breakpoint option to insert a 200ms sleep on this line, which lead to consistent reproductions when executing the above test.
Steps to reproduce
I suspect this is hard to reliably reproduce outside of a carefully constructed test, because the timing requirements are so specific.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4106
Client loses first body chunks if future is converted to java CompletableFuture · Issue #4106 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Again testing a server streaming a chunked response. When using Vertx HTTP client, if the futures from .connect() call and the one from .body() call are converted to java.util.concurrent.CompletableFuture by .toCompletionStage().toCompletableFuture(), then the client loses a few (2–3) first chunks of the response body. The same happens with just .toCompletionStage() – but I have included the .toCompletableFuture() step in the test too, as I do use that in the actual code where I first noticed this.
Do you have a reproducer?
A modified version of the reproducer from #4072 – with new test added that does the conversion. The old tests all pass, but the new one fails on body assertions because of the lost chunks with something like
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4112
vertx websocket WebSocket connection attempt returned HTTP status code 403 · Issue #4112 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
When I try to connect a public server with no auth required, it always throws an exception with:
"WebSocket connection attempt returned HTTP status code 403"
Version
4.0.3
Context
I encountered an exception which looks suspicious while ...
Steps to reproduce
the code above will throws:
Extra
and in my nodejs code, it is working without any problem with following code:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4115
No Stack Trace In core exception logging · Issue #4115 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to the lack of signature Logger.error(Throwable t) but Logger.error(Object message), all the logs that written like log.error(ex) do not output stack trace.
example:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4116
EventBus.localConsumer and EventBus.consumer interfer with each other · Issue #4116 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
The problems occurs with versions 3.8.5, 3.9.9 and 4.1.4
Context
When handlers are registered at the eventBus for the same address with localConsumer() and consumer(), the behaviour is not as expected:
When the localConsumer() is registered first, the consumer() will never get called for messages, which were published on other cluster nodes.
When the consumer() is registered first, the localConsumer() will always get called even for messages, which are not local, but were published on other cluster nodes.
The expected behaviour would be, that a localConsumer() only gets called for local messages and the consumer() gets called for all messages, even if registered for the same address.
Message Receiver:
Start the Message Receiver
Wait until the message receiver prints "Awaiting messages"
Start the sender
Sender will print "Sending messages" and then publish two messages
Receiver will handle the second message with both the localConsumer and the consumer, but will not handle the first message at all
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4118
Vertx version 3.9.7, set periodic stops working after 14, 15 days of service uptime. · Issue #4118 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have build cron framework in our service to run some task at particular time durations.
We have used set vertx.setPeriodic for to schedule these tasks. But we are observing strange behaviour after upgrading to 3.9.7. set periodic stops working after 14, 15 days of service uptime.
Earlier we were on 3.5.2 and everything were working fine
Which version(s) did you encounter this bug?
Version 3.9.7
Discussion on this bug.
We are using Open JDK Java 15
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4120
EventBus body codec lookup performs super class lookup · Issue #4120 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Motivation
Vert.x EventBus codec manager resolves a body codec based on the type of the body returned by getClass(). Registering a codec to multiple java types based on inheritance is not support and requires the user to register the same codec for each class or interface object with multiple instances of the same codec (since the code name needs to be unique).
Proposal
Modify the body codec resolution based on the type returned by getClass() to lookup the codec with the class or interface defined by the class or its parent class.
Resolution is performed after system codec resolution, e.g a codec for Number will not be used to encode java.lang.Integer because there is a system codec for this type
Binding java.lang.Object is forbidden
The change should not introduce regression since this was not supported previously and sending a message with a body resolved with a codec on a parent class of the body would either fail or work because the class for this body is registered already.
Non goals
resolution based on implemented interfaces rather than classes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4121
Allow to omit the origin header in the WebSocket handshake request · Issue #4121 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The client adds an origin header to the WebSocket handshake request. Some servers will not accept this and respond with an handshake failure. For such servers we need the ability to omit this header.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4123
Pool default connection selector should match connection on the same event-loop instead of same context · Issue #4123 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The pool currently selects a connection when it has the same context, instead it should match on the same event-loop as different contexts can share the same event-loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4124
Server File Upload counts the upload twice if client provides content length header · Issue #4124 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Source: vert-x3/vertx-web#1928
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4128
ConcurrentModificationException in clustered eventBus · Issue #4128 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
After the below exception, eventbus do not send portion of message(s). NO exception throw (only log).
In case of EventBus.request, fired io.vertx.core.eventbus.ReplyException: Timed out after waiting 30000(ms) for a reply.
Do you have a reproducer?
I don't have a simple reproducer (part of high concurrency mesh of microservice), but I think thats make sense:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4131
FileResolver SPI · Issue #4131 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4132
Provide read/write idle timeout granularity for TCP options · Issue #4132 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4133
Support filtering of insecure CipherSuits when using TLS · Issue #4133 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In order to remove insecure cipher suits from secure TLS versions.
Netty the underlying transport for VertX supports this via  io.netty.handler.ssl.CipherSuiteFilter
This needs to be exposed to VertX so insecure ciphers can be removed.
This was discussed in #1507 but a solution was not proposed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4136
Read only buffer implementation copy optimisation · Issue #4136 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a buffer wraps a read-only ByteBuf the implementation of copy() can safely return this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4137
java.util.ConcurrentModificationException when creating localConsumer · Issue #4137 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
4.1.5 (or 4.1.+)
Context
Vertx is created with a Zookeeper Cluster manager, ZK 3.5 running locally.
If a create a set of verticles in which I setup a localConsumer in the start() method, I nearly always endup with a hidden exception:
As a consequence, some messages sent to the same local address endup with a timeout exception, probably because the handler is not correctly registered.
If I do not a ZK manager, no problem.
If I use consumer() instead of localConsumer(), no problem
If I create the localConsumer outside a verticle, no problem
Note that sending the messages from a new thread does not help
Do you have a reproducer?
Please use the tiny java project attached:
Setup a VertX cluster with ZK Manager
Create a batch of verticles and create a localConsumer() in the start() method
Send a batch of messages to those consumers
Thanks,
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4138
readStream mapping to other type of readStream to support pipe · Issue #4138 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Read me
readStream mapping to other type of readStream to support pipe
Describe the feature
when ReadStream of sub type and WriteStream of  sub type do not match,  Pipe cannot be performed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4139
Example code of Hibernate reactive Docs might create another new Vertx instance · Issue #4139 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Hibernate reactive Docs seems non-rigorous.It will create a new Vertx instance when I run the example code,and it might cause some operations to be not thread-safe.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4140
NullPointerException in ZKMap · Issue #4140 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
4.0.3
Context
In development, when nodes of the (Zookeeper) cluster are started and stopped often, we randomly receive this exception:
Just before this, we have this logged by Vertx:
Do you have a reproducer?
Not really, it happens randomly, not gracefully killing servers increases the odds.
An easy fix would just be to add some code to check if the "k" argument of the ZKPath::keyPath(k) method is null and, maybe, in ZKSyncMap::get(k) when keyPath returns null (?).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4141
File resolver resolves classpath resources for absolute file names · Issue #4141 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This should not happen per the documentation. This was fixed by https://github.com/eclipse-vertx/vert.x/pull/4099/files and it might be perceived as a breaking change for applications that were relying on this behaviour.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4144
unrecoverable java.util.ConcurrentModificationException when sending / publishing eventbus messages from Worker Verticle in clustered deployment. · Issue #4144 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
4.1.0 and also in 4.2.0-SNAPSHOT
Context
We switched deployment of a Verticle in one of our existing services to worker and encountered it in a stresstest.
Investigation showed it boils down to send/publish of messages from a Worker Verticle while beeing deployed clustered.
Do you have a reproducer?
Steps to reproduce
send / publish EventBus messages from a Worker Verticle
deploy Vertx clustered (e.g.: ignite)
it looks like the Serializer instance having a HashMap is beeing shared somehow between eventloop threads.
Extra
adoptium openJdk 17
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4146
Is not possible to redeploy a shared MailClient Verticle · Issue #4146 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to redeploy a Verticle with Mail Client, trying to change the configuration of the client without restarting the application.
I'm getting this error:
What would be the correct way to close a shared MailClient and open a new one?
I tried with creating an individual client (not shared), and works perfectly
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4147
Add small native image build project to the repo to catch regressions · Issue #4147 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
The latest vert.x release didn't compile against GraalVM 21.1.0, 21.2.0 and 21.3.0 (the three latest releases) because of some internal changes in the project. In particular, I think changes in VertxInternal are causing static initializers that require netty's PooledByteBufAllocator to be initialized at build time.
I fixed this issue in vertx-howtos/graal-native-image-howto#11 but I was wondering that to avoid future regressions it would be wise to:
Add native-image.properties to the vertx project so that GraalVM automatically picks up the native image settings and downstream consumers don't need to specify them themselves.
Add a small native-image project that uses those settings to compile an http server to native and runs a small workload to force most of vert.x to be initialized and guarantee that it works.
As a result, if a new change that alters how static initializers work was to happen and compiling to native failed, then the CI would also fail and it would be on the vert.x contributor to fix it before merging.
Use cases
These two changes should hopefully prevent any future regressions from happening again and would allow downstream consumers to compile to native automatically without any configuration.
Contribution
I don't currently have the time to implement this but can provide guidance if needed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4149
Starter Gradle project fails to start with java.lang.ClassNotFoundException · Issue #4149 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Unpacked it and ran ./gradlew clean run
It failed to start:
Steps to reproduce
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4150
Automatically set `Content-Length` header on HEAD requests · Issue #4150 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Automatically set Content-Length header on HEAD requests to what the body size would have been.
Use cases
I'm using the following code:
As far as I know, Vert.x (or Netty?) will not send a body on a HEAD request (even though I'm using end with a non-empty buffer) which is great but I would expect the Content-Length to be automatically defined on the response since we provide a non-empty buffer.
Please note that we should preserve an explicit value:
If both a non-empty buffer and an Content-Length value are provided, I think we should keep the explicit value.
Contribution
I'm willing to contribute this feature. After a quick search, I think I will need to update the following chunks of code:
Related issue: #2630
content-Length should not be set automatically to 0 or this header can be set to what the body size would have been
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4151
Need explicit support for multipart/related in vertx web · Issue #4151 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Vertx web dose not support content-type multipart/related currently.
If client send post with multipart/related content-type, only respond error with
"Request must have a valid content-type header to decode a multipart request".
We can send multipart/form-data and application/json as two separate post,
but single post is better in most cases, if it is possible.
Use cases
Http apis to communicate json message and file at the same time.
Contribution
Who should implement this feature ? are you volunteering for implementing this feature or
do you know that is able and willing implement this feature ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4154
HTTP headers multimap caseInsensitive method implementation inverts the caseInsensitive flag  · Issue #4154 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
e.g server.headers().contains("connection", "upgrade", true) is actually server.headers().contains("connection", "upgrade", false)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4155
Retrofit HTTP server WebSocket disable flag as an HTTP server options · Issue #4155 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It can be useful sometimes to have the server ignore WebSocket and let it handle HTTP WebSocket upgrades itself, e.g a reverse proxy implementation can disable Vert.x HTTP Server WebSocket handling and simply handle it at the wire level and let the inbound server (the server reached by the proxy) handle it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4156
HTTP/1.1 client connection upgrade incorrectly compares headers with specific connect API · Issue #4156 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP client provides an API to connect to a server and perform an opaque conversation after the connect is successful. It supports HTTP CONNECT method and HTTP connection upgrade. The HTTP connection upgrade assumes that the header value is Upgrade sensitively, it should be insensitive instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4158
HTTP/1.1 client metric is reset for allocated but non sent requests · Issue #4158 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The client calls the HTTP client metrics SPI for HTTP/1.1 requests which have been allocated but not yet sent: every request that is created by HttpClient#request that has not yet been sent calls back the SPI when it should not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4163
Support IO_URING transport · Issue #4163 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm implementing support for https on Vert-x Transport, see https for some initial experiment.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4165
IllegalStateException: File handle is closed · Issue #4165 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Unexpected error IllegalStateException: File handle is closed.
Version
Context
We have a web server which is built on top of vertx-web. The web server uses BodyHandler to handle file uploads. It looks like if the upload is using HTTP/1.1 protocol, sometimes the following error occurs. It looks like the AsyncFileImpl was already closed when the BodyHandlerImpl tries to cancel the upload.
Do you have a reproducer?
I don't have a readily available reproducer.
Extra
It happens on both JDK 14 and JDK 17, so it should not be JDK version specific.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4166
Trace operation override for HTTP client requests · Issue #4166 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An HTTP client request begins a trace with the HTTP method as trace operation, we can provide in RequestOptions an override for this value, so the user can set the operation to use instead of the HTTP method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4168
vertx.cacheDirBase semantics has changed from vert.x 3.9 to 4.0 · Issue #4168 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In vert.x 3.x the value set via the vertx.cacheDirBase Java system property had been used to create a temporary directory for resolving files from the classpath as follows:
In vert.x 4.x the semantics has changed to now create a directory as:
With vert.x 3.x it was possible to e.g. provide the vert.x process with write access to /tmp and set -Dvertx.cacheDirBase=/tmp so that vert.x would create a sub-directory under /tmp during startup.
Using the same system property value under vert.x 4 will fail during startup if the vert.x process does not have write access to the root file system (/) because vert.x will try to create folder /tmp-UUID instead of /tmp/file-cache-UUID in this case.
The online documentation regarding this system property and how its value is being used is also wrong for versions 3.9.10, 4.0.3, 4.1.6 and 4.2.1
This (breaking) change also hasn't been documented in the Migration Guide for upgrading to vert.x 4.
I see two ways of dealing with this. Either keep the breaking change in the code base and amend the Migration Guide accordingly or reinstate the vert.x 3 behavior in the vert.x 4 code base. I can provide a pull request for any of these options as you see fit.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4170
Connection closed exception expected instead of timeout · Issue #4170 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Which version(s) did you encounter this bug ?
Context
When a vertx server is closed gracefully in a clustered vertx (all consumers unregistered, verticles undeployed, vertx closed), there are consumers in other servers that receive a timeout ReplyException. We would have expected that those consumers did not have to wait for the timeout to expire, and immediately receive an other error such as VertxException : Connection was closed.
I assume that when a verticle (or a consumer) is unregistered, vertx knows what are the pending requests, would it be possible to make them fail with an adequate exception instead of letting them expire in the sender ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4171
Webclient not using all event loop · Issue #4171 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am running this code on 8 core machine with 16 event loop. However the webclient is not using all the event loop and all webclient request are running on single event loop. Am I doing it incorrectly or is it a bug ?
Also there was some documentation I read long back on how to use Vertx to create standalone application (not using verticles). Can someone share the link for that ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4173
"Result is already complete" exception in case of timeout · Issue #4173 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
4.0.3 (Java), Clustered
Context
When a request is send to the cluster with a timeout set in the options, it might happen (especially when heavily loaded) that vertx issues a "Result is already complete" exception when applying the response to its internal promise, if the timeout has been triggered at the same time.
Here's the stack trace:
I suppose that the "complete" statement in the reply handler should be replaced by a tryComplete() or should detect that it already timed out
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4174
jvm startup args setting ‘-Dvertx.options.warningExceptionTime=1000000000’ is invalid · Issue #4174 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I used gravitee api gateway, The production environment encountered a block problem, "[vertx-blocked-thread-checker] [] WARN ivcore.impl.BlockedThreadChecker-Thread Thread[vert.x-eventloop-thread-10,5,main] has been blocked for 2075 ms, time limit is 2000" I want to change warningExceptionTime 1 second print VertxException StackTrace, Please help me
Version
Do you have a reproducer?
2：Gravitee process request main thread sleep(3000)
3：Console log still none print VertxException StackTrace Information, due to sleep time less than VertxOptions.DEFAULT_WARNING_EXCEPTION_TIME
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4175
HTTP client fixed event loop pool · Issue #4175 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTTP client uses event loops provided by actual requests to assign connection event-loops. In some case it is desirable to have the client use its own event loop as a pool, like when it is shared between verticles or statically.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4176
Depolying verticle by name can't initialize non-static field of the verticle class · Issue #4176 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When deploying verticle in Vert.X, if we want to deploy multiple instances of the specified verticle, we can only deploy by name of the verticle, otherwise an exception like this will be thrown: "can't specify > 1 instances for already created verticle".
However, the way of deploying by name calls the constructor without parameters of the verticle instance by default. In this way, if there are non static field in the verticle instance, they will not be initialized correctly as expected. In this case, we can only change the field in the verticle instance to static, but if we want to deploy multiple verticle instances with different values of one of itself non-static field, how should we implement this in the current Vert.x 4.x? I look forward to your response. Thanks in advance!
Here is my sample code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4177
Contex data didn't clean before return to thread pool · Issue #4177 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
All data that previously has been persisted in the context, available in next iteration of thread.
Following test:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4178
Contextual data not copied in Context.runOnContext · Issue #4178 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside runOnContext handler of Context, all previously persisted contextual data are not available.
Following test:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4180
Eventbus - Contextual data shared between different contexts · Issue #4180 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Friends, After investigations of miss behavior of contextual tracing, I think that we found regression.
Following details:
Several eventbus events have a single (shared) context local data.
This happened in worker verticle and in inboundInterceptor of Reply.
Following the reproduce test:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4181
Issue with webclient in 4.1.0 · Issue #4181 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Facing issue with webclient
Having following stackstrace
above error logs are printed in production logs
it was clearly working with 3.9.1.
When same api tried from local env it works. no errors are returned.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4182
Clustered event-bus shutdown frame · Issue #4182 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a clustered event-bus is shutdown, it will close all its connection to its peers. We could introduce a shutdown sequence, that sends a close frame before TCP connection close that indicates the server will not be available anymore.
This would allow peers to fail eagerly the pending requests and perhaps other use cases.
This would require a modification of the event-bus protocol so it would be a breaking change.
See #4183
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4183
Proper event-bus protocol version negotiation. · Issue #4183 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current event-bus protocol is versioned but does not allow to versions to interoperate. It should be improved in a way that a server can operate with an older version and remain compatible with its peer.
When the peer connects to another peer, it sends the version but it should receive a frame that indicates the version that was agreed between the peers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4185
Metric vertx_net_client_active_connections not being decreased · Issue #4185 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Values for gauge metric vertx_net_client_active_connections are not being decreased on http connection closed.
Do you have a reproducer?
Reproducer submits single http request and ends afterwards.
vertx_net_client_active_connections keeps showing value of 1, http metric vertx_http_client_active_connections is correctly decreased to 0.
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4186
Allow more types as shared data keys and values · Issue #4186 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following types can be allowed as any other Number type of the platform:
The following types can be allowed as a convenience:
Indeed, it is possible to make a copy of them using object streams or buffers, but the developer should consider implementing Shareable (if possible).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4187
addCookie method does not replace existing cookie (from browser) and fails when calling RoutingContext.cookieMap() · Issue #4187 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We were using (in version 3.9.9) HttpServerResponse.addCookie to set cookie irrespective of whether the cookie was already present (came from browser) and when we iterate over cookies using RoutingContext.cookieMap() we would get a single cookie with that name (i.e. cookie info was updated)
After upgrading to 4.2.1, calling RoutingContext.cookieMap() fails with this exception stack trace
This method assumes cookies are unique by name. However the implementation for addCookie() always adds a cookie to collection (this seems to be a feature request).
Do you have a reproducer?
No.
Steps to reproduce
Create sample web app that renders simple form and addCookie("test", "somevalue"). On form submit, call addCookie("test", "anothervalie") to modify the cookie value without removing it first. Then invoke RoutingContext.cookieMap() to get all cookies.
Extra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4188
NPE on Http1xServerRequest.handleException · Issue #4188 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
when Http1xServerRequest.reportRequestBegin() throw exception. will cause a NPE on Http1xServerRequest.handleException (line 621),
because response not initialized.
Steps to reproduce
startup http server .
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4189
Chrome don't use http/2.0 to get resources from vertx-server · Issue #4189 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Inspecting with developer tools Chrome uses http/1.1 when getting resources from my vert.x server even though https states http/2.0 should be prioritized.
I haven't been able to find any information about Chrome doing something weird and when checking other sites h2 (i.e. http/2.0) is used.
I also haven't been able to find any information in the vert.x documentation about configuring the server-side for http/2.0. Only the client-side.
Am I missing something or is it a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4192
why lindex function required two string arguments in RedisAPI class? · Issue #4192 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the title, Lindex command requires only one redis key to be passed in. Why does lindex function in RedisAPI class requires two String parameters to be passed in? Is there anything MISSING in my understanding, or is there a defect in the design of the RedisAPI? I will appreciate your response, Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4193
NetClientOptions toJson method does not merge the specific NetClientOptions · Issue #4193 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
e.g options.toJson().getLong("reconnectInterval") returns null instead of the actual value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4194
WebClient with http2 can't recover after StreamResetException · Issue #4194 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
After an http2 connection is reset the WebClient that uses that connection can't recover and I see no way to fix this besides recreating the WebClient instance but that goes against the recommendation to create a single webclient instance.
Do you have a reproducer?
No.
Steps to reproduce
I'm using the native transport (I'm not sure that it matters).
Run WebClient that does periodic http2 call
Reset the http2 server
WebClient will not recover from this error
I'm using vertx in a scala app.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4198
vert.x 4.1.6 build issue · Issue #4198 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
Cannot find the symbol with vert.x 4.1.6
Context
Trying to upgrade the vertx homebrew formula to the latest (4.1.6 or 4.2.1), but run into some test failure for the build.
Do you have a reproducer?
Extra
Anything that can be relevant such as OS version, JVM version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4200
HTTP client will not update correctly the underlying TCP client metrics · Issue #4200 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HTTP client will create a TCPMetrics and a HttpClientMetrics and only update the HttpClientMetrics, leaving an incorrect TCPMetrics.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4206
Method in `CompositeFuture` missing the wildcard type parameters · Issue #4206 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Some methods in CompositeFuture missing the wildcard type parameters, such as:
In java, raw use of parameterized class is not suggested, maybe those methods should append a wildcard type parameters?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4208
Have a dedicated exception on timed out connections · Issue #4208 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Description
Using the Vert.x HTTP client, when a connection takes too long and reaches its time out, we get this exception :
This does not help in understanding the connection timeout has been reached.
So I would prefer to have either :
a dedicated Exception carrying this information (so we can react accordingly)
an explicit error message to be able to investigate easily
Use cases
Easier bug investigation
Ability to react to timed out connection accordingly
Contribution
I've investigated a bit and found out the issue was at the interface of Netty and Vertx : io.vertx.core.net.impl.ConnectionBase. On Idle connection event, Vert.x simply closes the connection.
Maybe something like that would be better :
I may try to implement this solution. Let me know whether my solution sounds interesting to you or not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


4209
`executeBlocking` throw exception instead of return a failed future after the `workerPool` closed, thus caused `RejectedExecutionException`  · Issue #4209 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
When using HazelcastClusterManager, it would thrown RejectedExecutionException sometimes after closed the vertx instance:
The executeBlocking method throw the exception at ContextImpl#L179 when failed to execute the command (because the workerPool closed earlier then the netty event loop, the timer on netty eventloop still works and called executeBlocking after workerPool closed, according  VertxImpl.java#L809-L813), is it works as intended? Maybe we should wrapped the exception with a failed future instead, thus the caller could handle the exception or just ignore it.
Version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4210
How to execute get operation using Redis client in synchronization way in Vert.x 4.x  · Issue #4210 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As the title, I am using caffeine with Vert.x 4.x, I want to load the value from redis and then put it into caffeine cache after the cache vale was out of time. But All provided API in the Redis Client are asynchronous, however the load function in LoadingCache return the value of Generic V, it was synchronization operation, how can I to do that I can load the redis value using the Vert.x Redis Client API? Anyone's response will be greatly appreciated.
Here is my code as blow:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4211
HTTP/2 max header list size setting is ignored · Issue #4211 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Http2Settings max header list size setting is ignored by the conversion to the actual Netty settings.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4215
The asyncResult.succeeded() always return false after depoly a verticle. · Issue #4215 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I create a AutoDeployCustomVerticle to depoly other verticle with customized @verticle annotation, but after depoly the other verticles, the asyncResult.succeeded() returned by callback function handler was always false, I am wonder how it happends.
Here's my code to reproduce the problem：
This is the code of @verticle annotation
When System starts up, it will initinalize the Vertx instance, meanwhile, deploy the AutoDeployCustomVerticle Verticle.
I will appreciate your response, thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4216
Prompted "failed to create ssl connection" after webClient.getAbs() was executed · Issue #4216 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is a screenshot of the stacktrace information as blow:
It always thrown the exception: failed to create ssl connection, after I request the url: https
I have set ssl to true, trustAll to true and verifyHost to false for WebClientOptions, why it still thrown the same exception, Can anyone tell me why this happended, and how to figure out this problems? It may also be something I have misunderstood, please feel free to enlighten me. Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4217
OAuth2AwareInterceptor always performs refresh token if user is expired is wrong when using client_credentials type · Issue #4217 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
The OAuth2WebClient will always do a refresh if the current user is expired. But that is not correct in case of OAuth2FlowType.CLIENT.
I will like to see that when there is no refresh token or  type OAuth2FlowType.CLIENT that it will just authenticate itself again to get the new token.
The code that needs to be changed is al in OAuth2AwareInterceptor class.
Version
Context
I encountered an exception which looks suspicious while ...
Do you have a reproducer?
Not needed
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4218
when websockets handshake failed, the client send another request from the pooled TCP connection, the server can not be notified. · Issue #4218 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
when WebSockets handshake failed, the client send another request from the pooled TCP connection, the server can not be notified.
Version
Context
if a WebSockets handshake failed, the TCP connection becomes unreadable.
Do you have a reproducer?
Steps to reproduce
Extra
My service is used behind an Nginx server, they use TCP connection pool connects to me, it has the same issue 😂.
Anything that can be relevant such as OS version, JVM version
mac os 12.1 and Linux
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4219
Add configuration options to set the ByteBufFormat of the request payload logging · Issue #4219 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
In the io.vertx.core.datagram.impl.DatagramSocketImpl the following code is used:
This means the netty request payload is always using the ByteBufFormat.HEX_DUMP.
Would be very nice if we could set this ByteBufFormat to SIMPLE as well.
Use cases
We don;t want the request payload to include a hex dump
Contribution
I could.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4220
NPE in io.vertx.core.http.impl.HttpClientImpl · Issue #4220 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
We get rare NPE's on high load in Http1xClientConnection
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4221
Pool can deliver lease with null connection · Issue #4221 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A race can happen in the pool when it delivers a lease. Leases are created as pool post actions and sometimes can read a connection from a slot that became null in the meantime the post action is executed.
This leads in an NPE in the HttpClient that instead should not get non null closed connection, instead of a null connection. (reported here #4220 (comment))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4224
Pool waiter list removal does not check correctly the waiter is in the list · Issue #4224 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The pool implementation checks incorrectly whether the waiter is enqueued in the list leading to an incorrect waiter list size.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4227
Failed to load netty_tcnative when open ssl enabled · Issue #4227 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
After upgrading from netty 3.9.8 to 3.9.12, an error accured to load netty_tcnative .
From the stack trace, seems the error casused by
I am not sure if this error caused by netty or vert.x. From the stack trace, problem may related to vert.x ContextClassLoader or netty implementation.
I run other branch test cases using vert.x 4.1.7 + netty 4.1.72, do not have this problem. (In same machine and test case)
I run other branch test cases using vert.x 3.9.8 + netty 4.1.67, do not have this problem. (In same machine and test case)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4228
Invalid header name should return an HTTP 400 by default · Issue #4228 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
According to the HTTP/1.1 specification, header names must be encoded in ASCII and a server should return a HTTP 400 on ill-formatted header. This is indeed enforced by io.vertx.core.http.impl.HttpUtils#validateHeaderName.
On invalid header, the validateHeaderName method throws an IllegalArgumentException, and this exception is wrapped and eventually handled by io.vertx.core.http.HttpServerRequest.DEFAULT_INVALID_REQUEST_HANDLER. But since the wrapped exception is a simple IllegalArgumentException the method will simply close the underlying TCP connection without sending any HTTP response.
Since this is the default behavior, I would rather expect to check if the exception is an IllegalArgumentException and to return a HTTP 400.
Create a simple http server using vertx :
Then run this command :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4230
ShutdownHook · Issue #4230 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The vertx internal ShutdownHook calls vertx.close();
The problem here is, that it is not waiting on finish, because the internal returned Future is not blocked.
So i thought to make my own ShutdownHook, but then it is race between my ShutDownHook and the Vertx internal.
If i call vertx.close() after the internal hook called it already, then I get a new Future.
So maybe here would be two improvments good:
The option to configure Vertx to gracefully shutdown, so that its internal ShutdownHook waits untill the Future completes (.toCompletionStage().toCompletableFuture().join())
After vertx.close() is called once, an second call recieve the same, a cached Future
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4231
Make formatting and imports consistent across IDEs and editors · Issue #4231 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Subtle IDE differences
Depending on IDE or editor (Eclipse, VSCode, IntelliJ) files are saved with subtle difference. E.g. sort order of imports, allowing wildcard imports, number of empty space to preserve, line breaks / merges
Use cases
enforce unified code layout
reduce "noise" in pull request due to white space / import changes
Implementation details
Create code style file (based on Google style, but merge lines switched off)
Create workspace file for VSCode
Update pom.xml to include the spotless plugin
document usage incl. how to setup a githook
Contribution
Happy to implement
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4232
HttpClient's uncatchable exception on illegal HTTP header name · Issue #4232 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
I use vert.x 4.2.3
Context
When trying to send an invalid header name with the Vert.x HTTP Client, an exception is thrown by this line and the exception is not catchable at the HTTP Client level but at the event loop level.
Proposed solution
This error should be either :
I think the first option is the best to aim for as it's easier to achieve. But it could be interesting to have any exceptions hapenig during this process redirected to client.request(...) future result.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4233
Future returned by Http2ServerResponse#end() does not complete. · Issue #4233 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
Writing a simple HttpServer where i have to wait for completed Http 1 / 2 responses.
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4237
HttpClientRequest response AsyncResult must be failed on invalid response header · Issue #4237 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
I use vert.x 4.2.3
Context
When a server answers an HTTP response containing invalid header line like "aaaa" Netty throws an error which is not caught by vert.x.
This exception should be caught and dispatched to the HttpClientRequest response handler.
Reproducer
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4238
Link in documentation is incorrect · Issue #4238 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the "Templates" section here:
There is a link in "Please consult the MVEL templates documentation for how to write MVEL templates." where the link is pointing to an invalid resource.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4243
ClusteredEventBus/ClusteredMessage : Missing codec failure is silently ignored · Issue #4243 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
When using message sending/consuming mechanism with Clustered Vertx instances, if the MessageCodec used by the sender is not registered in the consumer's EventBus then a failure will be set in ClusteredMessage state (OK) ClusteredMessage#L154
But this failure is only traced and in default behavior it will be silently ignored : ClusteredMessage#L278
I do not know if it it would be revelant to handle this failure by the Handler specified in MessageConsumer.exceptionHandler(Handler<Throwable>); but it does not.
Same behavior with 'Invalid wire protocol version' failure : ClusteredMessage#L141
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4245
Timeoutable Futures and timeoutable promises · Issue #4245 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@vietj i know its a old idea, but maybe you think its a good idea now?^^
What do you think about having timeoutable Futures?
If the timeout is over the future is finished with an exception-cause
On the other side we could have also timeoutable promises.
in that case all registered listeners and listeneres in the future get an timeout exception-cause, if it is not finished in someTime
So you don't need to wrap it into bigger classes with also other functionality you not really want to have -> Circuit-breakers and so on.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4246
Support vfs protocol in the default FileResolver implementation · Issue #4246 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Read me
When an embedded Vertx is used for a war deployment which reads resources in the bundle, and it is deployed to a WildFly server, it fails to read with error message: Invalid url protocol: vfs.
It is more like a feature than a bug from Vert.x point of view.
Describe the feature
The default FileResolver implementation supports several URL protocols to resolve the file path, I would like to add the support of vfs.
vfs comes from jboss-vfs project, which is used inside of WildFly server for managing the files of the deployed applications, any resource loaded by the class loader(ModuleClassLoader) is a vfs URL in the server.
Using a customized FileResolver implementation looks too much than just one line modification in the default implementation, so it is great to have it supported in Vert.x.
Use cases
When embedded Vertx is used in web application, and it is deployed to WildFly server, it faces this problem.
Like when PropertyFileAuthentication is used to read authentication properties from the bundle.
Contribution
I can send PR for this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4248
HttpClientMetrics is closed twice · Issue #4248 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HttpClientMetrics is closed by HttpClientImpl and NetClientImpl.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4252
Feature Request: Only-Onetime-Caching in SharedData API · Issue #4252 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Im not sure if you are interested in something like that, but i'll just throw it into the ring.
The problem is the following:
Often you have there something expensive to calculate or something you load from the database.
This goes then into the vertx Local-Map/asynchronous shared maps.
But now different eventloops get the same or similar-request, what could follows that you have calculate that expensive result twice or load it twice or more from the database, if the requests are relatively simultaneous.
So @thced had the idea of using vertx locks here. Yes this would work.
I had the idea putting then futures/promises into the Local-Map/async shared map.
So the first caller sees that there is no future in the Map. He creates one promise and put it into the map. After that he checks if it is his Future/promise. If yes, then he do the expensive work/database-load. After that, he completes the promise.
All others, which sees there the Future in the map, register there the onComplete() or something similar listener to get the result.
I think it should work quite similar as the lock-solution?
And now we don't need to calculate the same more than one time.
The things is now the following: There is a little bit overhead we have there, if the normal vertx-user should implement this on himself.
I think it is a feature, which is needed a lot out there. So I think we could integrate it into Vertx directly. What do you think about that?
It could be something like (in pseudo-code)
I can imagine that it could be a little bit tricky for the clustered version?!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4254
Uncaught exception with HTTP Client on HTTP/2.0 connection failure  · Issue #4254 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
I use vert.x 4.2.4
Context
I was playing with the vert.x HTTP client, trying to use it to send an unencrypted HTTP/2.0 request with prior knowledge, but the HTTP server I reached out was only serving HTTP/1.1 requests.
Then, the HTTP/2.0 connection failed but none of my exception handlers have been notified of this failure. I only have these log lines :
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4255
HTTP header values verifier is laxer than what's advised in the RFCs · Issue #4255 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
I use Vert.x 4.2.4
Issue description
The header field value validation does not follows the HTTP/1.1 and HTTP/2.0 specification. Thus it accepts illegal characters.
The RFCs
The HTTP 1.1 spec says :
In the ABNF RFC, we can read that :
And the HTTP/2.0 spec says :
Similarly, HTTP/2 allows header field values that are not valid.
While most of the values that can be encoded will not alter header
field parsing, carriage return (CR, ASCII 0xd), line feed (LF, ASCII
0xa), and the zero character (NUL, ASCII 0x0) might be exploited by
an attacker if they are translated verbatim.  Any request or response
that contains a character not permitted in a header field value MUST
be treated as malformed (Section 8.1.2.6).  Valid characters are
defined by the "field-content" ABNF rule in Section 3.2 of [RFC7230].
Conclusion from the RFCs
For both HTTP/1.1 and HTTP/2.0 versions, bytes allowed for header value are : CR (0x0D), LF (0x0A), SP (0x20), HTAB (0x09) and ranges 0x21 to 0x7E and 0x80 to 0xFF (although considered as obsolete)
Moreover the structure is important too.
What's existing
When received from the wire : they are read, byte by byte, as Latin-1 (ISO-8859-1) encoded and put into a Java String. Otherwise ... well header values are stored into java Strings.
Header values are checked thanks to io.vertx.core.http.impl.HttpUtils#validateHeaderValue which is only verifying a subset of the RFC's limitations.
When sending over the wire : they are encoded from Java String to Latin-1 (ISO-8859-1) to be sent over the wire and any character not fitting in 1 byte is transformed to '?' (0x3F).
Conclusion from the existing
The Latin-1 conversion is OK, that's been obsoleted but it's here for historical reasons.
The multibyte character conversion to '?' seems legitimate, although Vert.x could choose to fail to send the request/response instead (or to specify that in some doc/javadoc)
But the character validation is not strict enough according to RFCs.
How to reproduce
This method : io.vertx.core.http.impl.HttpUtils#validateHeaderValue is accessible for testing, so one can unit test it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4258
why vertx not support unix domain socket? · Issue #4258 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
there should return EpollServerSocketChannel ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4259
get transaction information  just by `SqlConnection` · Issue #4259 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I hope 'SqlConnection' can disclose 'transaction()' and 'autoCommit().
No extra place is needed to store  transaction
Thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4263
executeBlocking how to run in myself defined thread pool? · Issue #4263 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4264
HttpClient handles HTTP/2 connection closing more gracefully · Issue #4264 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
We are using Vertx HttpClient and we noticed that when a server closes the connection via a GOAWAY frame, the in flight streams with id lower than the Last-Stream-Id returned in the GOAWAY frame are closed and a CONNECTION_CLOSED exception is thrown for each one of them.
As from our understanding this flow is triggered also from Netty's channelInactive method, so from a high level it is not clear if there was an actual error, such as an ECONNRESET, our it is just normal operation of HTTP/2 connection closing.
So, we are thinking of 2 options:
Maybe the HttpClient should retry these requests itself? i.e. sending them on another connection, as it is normal operation, no exceptional behaviour.
Or at least to throw another exception which will clearly state the reason why the given stream was not correctly processed. This is important because it will let the developer know that it can safely retry it, as the stream was not processed by the other part. Where in case of an ECONNRESET you cannot know if the other part received the stream and processed it successfully.
What do you think?
Use cases
Depending on the chosen solution:
providing more clarity
easier developer implementation by not requiring retry for normal HTTP/2 operation
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4268
"Not yet implemented" exception when using WebClient with HTTP/2 on connection concurrency decrease · Issue #4268 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We are using a WebClient (with mutiny) for sending http2 request with following configuration:
Sometimes we get a UnsupportedOperationException with the message Not yet implemented when sending a request, but most times it works correctly. Probably the error has something to do with the connection getting closed?
Java 17
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4269
Support connection concurrency decrease in pool · Issue #4269 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The pool implementation should support connection concurrency decrease instead of throwing an unsupported operation exception failure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4270
Incorrect initial local HTTP/2 settings · Issue #4270 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Connection local HTTP/2 settings are initialised with default settings, instead they should be initialised with the settings sent to the remote endpoint.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4271
Pool implementation should store the connection concurrency as a long value · Issue #4271 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
So connections sending the default max concurrent stream are correctly handled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4273
vertx webroot doesn't work if it was deployed by springboot jar · Issue #4273 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
when using springboot deploying static web by webroot, it doesn't work, 404 Not Found would be throwed.
error message:
Resource not found
Which version(s) did you encounter this bug ?
Context
I encountered an exception which looks suspicious while ...
Do you have a reproducer?
A reproducer is a simple project hosted on GitHub (or another forge supporting git clone operation) that has a build file that can be executed to reproduce the issue.
Reproducers are very helpful for contributors and will likely help them fixing your bug faster.
Anything that can be relevant such as OS version, JVM version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4275
ConnectionBase exception handler should not be called within the synchronized block · Issue #4275 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
No description provided.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4278
ArrayList concurrency error when deploying the verticles · Issue #4278 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
We have an intermitent problem with the startup of our applications, in a few attempts I can reproduce so it it quite often to occur.
This is the error:
method: registerVerticleFactory
The exception is thrown by ArrayList.sort, here is the code
So from my analysis the ArrayList is being modified while it is being sorted.
We have 20 verticles in this application, so we iterate over the collection of class names and invoke the method below from
rxDeployVerticle(String name, DeploymentOptions options)
Please let me know if any additional information is required.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4279
SSLSession not being reused in Vertx 4.x when multiple instances of verticle is deployed · Issue #4279 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
When the client is sending a ClientHello with the previously negotiated SessionID, the Vertx HTTP server is not reusing the existing session and sending back a new SessionID leading to a Full SSL Handshake which is a performance hit for us.
This is because SSLHelper instance is not being shared by the HttpServerWorker instances when multiple instances of the verticles are deployed.
A sample project to reproduce the issue is attached. Steps:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4281
ConnectionManager for HttpClient disregards proxyOptions · Issue #4281 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Context
Since the merge of my PR I realized that wrong connections are picked when changing proxy per request as per this PR
During my investigation my assumption is that due to EndpointKey not checking proxyOptions in equals methods causes the wrong connection to be matched which leads to the wrong proxy being used
Steps to reproduce
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4284
Closed pool connect failure should notify the connection slot future · Issue #4284 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The pool state machine implementation does not notify the connection slot promise on a connect failure after the pool is closed. It is necessary to resolve this promise so pool implementation using the state machine can progress.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4285
ConnectionBase discards incoming message when it has been proactively closed · Issue #4285 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ConnectionBase discards incoming message when the connection has been marked as closed, we should always accept such messages otherwise we might lose messages when a connection is closed proactively when a message read is in progress.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4289
java.lang.NullPointerException: Cannot invoke "io.vertx.core.http.impl.HttpClientConnection.createStream(io.vertx.core.impl.ContextInternal, io.vertx.core.Handler)" because "conn" is null · Issue #4289 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
It seems to happen randomly on very busy server inside docker container (I don't know if this is relevant). There is a timer (actually vertx.setTimer which sets up another setTimer when completes) which triggers every minute and performs two HTTP requests one by one using WebClient.
The CompletionStage with HTTP request is neither resolved nor rejected. The timer seems to be stopped after that (I guess setTimer never completes so it cannot set up the next execution 1 minute later). We normally handle errors in timers using whenComplete/onFailure/onComplete to set up next execution anyway, but this time it seems not to reach that point.
Do you have a reproducer?
Unfortunately, I don't have a reproducer. It occurs randomly after some time (hours), usually when server is under heavy load. The same code runs totally fine on production (much stronger) server. If this description alone doesn't click I may try to construct simplified code which could at least show the approach we are taking.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4290
On Trailer error Vert.x HttpClientResponse still logs an error although an errorHandler is set · Issue #4290 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
I used Vert.x 4.2.5
Context
The issue I encounter is that Vert.x HttpClientResponse logs an exception at ERROR level (at the TCP level :  ConnectionBase) although I've registered an exception handler. The exception handler is called, but the application will still have an ERROR printed in the logs even though I've managed the issue.
Reproducer
I've set up a simple HTTP server returning an invalid trailer (regarding its name) :
Then a test with the Vert.x HttpClient and a logger configuration :
Then the output is :
The ConnectionBase error handler is called before I've been able to react to the exception (why not)
BUT it logs something as error, which will appear in my users logs even though I'm handling it
Then the exception ends up in my error handler (as expected)
Last thing to note : Since the HttpServer I've set up is buggy, my exception handler is called one more time noticing the connection closure. It seems wrong to be called twice on the same error handler, but maybe that's expected (just raising the question here)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4291
The method "beforeStoppingVertx" in Launcher has not been invoked. · Issue #4291 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
I write a custom Launcher in my application, when I debug the lifecycle hooks I saw the "beforeStoppingVertx" has not been invoked. Here is my Launcher:
The info log "beforeStoppingVertx" never be printed.
I made some debug and tests, I found this issue may be caused by the CloseFuture's hooks type, it's WeakHashMap:
The "addCloseHook" method be called successfully when application start
, but then the hook be removed so it is actually not worked.
Don't know whether I'm right or not, need help, please.
Version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4294
JsonObject.put() throws UnsupportedException when initialized with Immutable Map from Kotlin · Issue #4294 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
I encountered an exception when using JsonObject class from vertx and Kotlin. Specifically, when initializing a JsonObject() with an immutable Map.
Do you have a reproducer?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4295
The log disk is full.Thread of eventloop disappears  · Issue #4295 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Questions
The log disk is full.Thread of eventloop disappears
Version
Context
I encountered an exception which looks suspicious while ...
Do you have a reproducer?
A reproducer is a simple project hosted on GitHub (or another forge supporting git clone operation) that has a build file that can be executed to reproduce the issue.
Reproducers are very helpful for contributors and will likely help them fixing your bug faster.
Anything that can be relevant such as OS version, JVM version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4296
HttpClient supports request on a specified HttpConnection · Issue #4296 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Describe the feature
Allows HttpClient send a request on a specified HttpConnection.
Use cases
for reversed proxy we could bound the client connection to upstream connection (load balance or keeping the authentication context).
Contribution
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4297
Race condition when use RecordParser with concatMapCompletable and observeOn · Issue #4297 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
vertx 4.1.7
Context
I encountered some issues when using RecordParser with concatMapCompletable and observeOn like the following code to process records one by one on worker thread:
The issues including:
Sometime the RecordParser will suddenly stop emitting record, there's no error and not reached end of file and it is not disposed... it just stuck there.
Sometime a MissingBackpressureException is thrown
After investigated and tried create a unit test for this issue, it looks like a race condition on RecordParserImpl:
Usually the record is emitted from RecordParserImpl on event loop thread. (RecordParserImpl.handle)
However, when backpressure exists (concatMapCompletable here), it can be the thread running on downstream to request item from upstream. (RecordParserImpl.fetch)
In my case, the inner stream of concatMapCompletable is switched to a worker thread using observeOn, so it will be the worker thread requesting item from RecordParserImpl during backpressure.
When the RecordParserImpl.handle running on event loop thread and the RecordParserImpl.fetch running on worker thread are called at same time, race condition happens because RecordParserImpl is not written in thread-safe way.
The race condition includes but not limited to:
In RecordParserImpl.handleParsing(), both thread may passed the parsing check and do the parsing concurrently
demand could be modified concurrently and result in unexpected value
When RecordParserImpl.handle has filled all demand and paused upstream, but before parsing is set to false, the RecordParserImpl.fetch could add demand and exit quickly due to parsing is true, and then it will stuck - upstream is paused so RecordParserImpl.handle will not be called again, downstream has requested item and is waiting for next item.
Steps to reproduce
Here's a unit test that could reproduce the issue:
In the printed log, we can see the xx: Read record yy log can sometime be printed on event loop thread (RecordParserImpl.handle) and sometime be printed on shared worker thread (due to backpressure, RecordParserImpl.fetch)
The backtrace for issue 1 looks like:
The source did not signal an event for 5 seconds and has been terminated.java.util.concurrent.TimeoutException: The source did not signal an event for 5 seconds and has been terminated.
The backtrace for issue 2 looks like:
Not sure if it is a problem in RecordParser or concatMapCompletable (is it expected for upstream to be requested on worker thread in this case?) or maybe it is not a desired to use them in this way?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4298
Handling SSLHandshakeException with ip information on vertx · Issue #4298 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi i am using vertx mutual authentication mechanism.
Client and server , both of them requires SSL cert to access server.
But i want to log "ip" address of SSLHandshakeException.
also i want to log "ip" address of http socket connections.
I can handle cert requirement with , SSLHandshakeException , i catch
But i want to catch the ip address of the user like.
It would be good feature
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4299
Websockets serving cached/wrong responses and potentially have incorrect headers in websocket · Issue #4299 · eclipse-vertx/vert.x · GitHub
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version
Context
We use NGINX 1.19.9 to proxy requests to our services in Kubernetes. One such service is a client manager that creates web sockets. For paths where the user in unauthorized, we call client.reject(403).
Let's say client 1 connects to the service using wss://myuri.com/api and gets a valid 403. Great.
Now when client 2 connects to the service, the request handler appears to be re-using the request headers from client 1. The same is true for client 3, 4, 5, etc. Now all of our clients are in a bad state.
We've determined that it seems to be an interplay between nginx and vertx/netty. When we change upstream-keepalive-timeout to 0, the issue goes away. Only client 1 gets the 403. When we get rid of nginx entirely, the issue is also gone.
Do you have a reproducer?
Note this won't work if you try and repro locally, only if using nginx with keepalive set to > 0 (we have 60s). It could actually just be the headers nginx is adding to the request though
Instead of clients receiving headers from the existing web socket connection (like in 3.6.3), now the connections just hang and the websocket handler isn't even called.
Extra
Are we supposed to be closing websockets after rejecting them?
Java 11, Adopt openJDK
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

