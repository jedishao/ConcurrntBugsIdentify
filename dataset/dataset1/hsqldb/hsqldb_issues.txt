

https://sourceforge.net/p/hsqldb/bugs/
https://sourceforge.net/p/hsqldb/bugs/1
HyperSQL Database Engine (HSQLDB) / Bugs / #1 Error in Build
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
When i try to execute the script build (build the jar 
archive) i can't because the javac give me the 
following error : 
I can't find the class org.hsql.Map (used in class 
jdbcconnect) 
My version of JVM is 1.1.8 
Please send me the correct source 
Best Regards 
Joao Luis
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/2
HyperSQL Database Engine (HSQLDB) / Bugs / #2 Please Support multiple ResultSets!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the jdbcStatement class does NOT support 
multiple ResultSets. (This is clearly documented in 
the javadocs, and is also obvious from looking at the 
source code.) 
However, this makes this class USELESS for executing 
general stored procedures (which OFTEN do mutiple 
queries -- doing complex stuff like this is usually 
the whole point behind using stored procedures).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/3
HyperSQL Database Engine (HSQLDB) / Bugs / #3 bug in the getMoreResults() method
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The getMoreResults() method of org.hsql.jdbcStatement 
class fails to follow the Statement interface specs 
exactly. This causes problems with code that should 
work. 
The basic problem is that getMoreResults() fails to 
advance the current ResultSet. (It also fails to close 
the current ResultSet, which is also a violation of 
the spec.) 
Since HypersonicSQL currently does not support 
multiple ResultSets, what SHOULD happen if the specs 
are to be exactly followed is that the next ResultSet 
should be advanced to null after closing the initial 
one when getMoreResults() is called. 
Below is the current (and buggy) implementation of 
getMoreResults(): 
-------------------------------------------------------
----------- 
public boolean getMoreResults() { 
if(Trace.TRACE) Trace.trace(); 
return false; 
} 
And here is a simple patch which corrects the above 
bug: 
-------------------------------------------------------
public boolean getMoreResults() throws SQLException { 
if (Trace.TRACE) Trace.trace(); 
if (rSet != null) { 
rSet.close(); // MUST do this to satisfy Statement 
interface spec! Good idea anyways 
rSet = null; // advances to the next RS, which is 
always null for now 
} 
return false; 
} 
To illustrate the current bug, and also to test that 
the above patch actually solves the probelm, consider 
the following code which works with any properly 
written JDBC Statement implementation (but fails in 
HypersonicSQL): 
// ********************************************* 
String sql; 
Statement s = null; 
boolean isResultSet; 
ResultSet rs = null; 
int updateCount; 
boolean moreResults; 
&lt;&lt;some code here which estables a database connection, 
etc&gt;&gt; 
//The following code executes a generic SQL statment 
and marches thru all the possible results: 
isResultSet = s.execute(sql); 
rs = s.getResultSet(); 
updateCount = s.getUpdateCount(); 
// process the first result for sure, and also any 
additional results: 
do { 
// handle the current result: 
if (isResultSet) 
processResultSet(rs); 
else 
processUpdate(updateCount); 
// get the next result: 
isResultSet = s.getMoreResults(); 
rs = s.getResultSet(); 
updateCount = s.getUpdateCount(); 
// determine if the loop should continue: 
moreResults = !( !isResultSet &amp;&amp; (updateCount == -
1) ); 
} 
while ( moreResults ); 
/* 
From the Javadoc on Statment: 
s.getResultSet() SHOULD be null if the result is 
actually an update count or there are no more results 
s.getUpdateCount() SHOULD be -1 if the result is 
actually a ResultSet or there are no more results 
*/ 
// ********************************************* 
The above code fails with updates (but not queries) 
because the loop never ends. This happens because 
getUpdateCount() 
fails to return -1 the second time that it is called. 
If the above patch to getMoreResults() 
were in place, then getUpdateCount() WOULD recognize 
that the current RS is null and then would return -1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/4
HyperSQL Database Engine (HSQLDB) / Bugs / #4 DatabaseMetaData.getExportedKeys broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am writting a java program that analizes the 
relations among the different tables in the database. 
When I create a table using FOREIGN KEY, Hypersonic 
classes don't write to the SYSTEM_EXPORTEDKEYS table. 
Then, when I call to the getExportedKeys method, I 
obtain no data. 
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/5
HyperSQL Database Engine (HSQLDB) / Bugs / #5 DatabaseMetaData.getExportedKeys() inop
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am writting a java program that analizes the 
relations among the different tables in the database. 
When I create a table using FOREIGN KEY, Hypersonic 
classes don't write to the SYSTEM_EXPORTEDKEYS table. 
Then, when I call to the getExportedKeys method, I 
obtain no data. 
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/6
HyperSQL Database Engine (HSQLDB) / Bugs / #6 LONGVARBINARY error using setObject
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using hsql version 1.42 
When using setObject to set the value of a binary 
column a class cast error occurs. 
I have made the following changes that solved the 
problem: 
line 1048 of jdbcPreparedStatement.java: 
case Types.BINARY: 
case Types.VARBINARY: 
case Types.LONGVARBINARY: 
// setBytes(parameterIndex,(byte[])x); 
setBytes(parameterIndex,((org.hsql.ByteArray)
x).byteValue()); 
break; 
--------------------------------------------------- 
line 565 of Column.java -&gt; method modified to 
static Object convertObject(Object o,int type) throws 
SQLException { 
if(o==null) { 
return null; 
} 
switch(type) { 
case BINARY: 
case VARBINARY: 
case LONGVARBINARY: 
if( o instanceof byte[]) 
return new ByteArray( (byte[])o); 
else 
return convertString(o.toString(),type); 
default: 
return convertString(o.toString(),type); 
} 
} 
------------- 
ByteArray.java -&gt; added new constructor 
ByteArray(byte []a) { 
data=a; 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/7
HyperSQL Database Engine (HSQLDB) / Bugs / #7 Fix for &amp;amp;quot;SELECT x, SUM(y)&amp;amp;quot; &amp;amp;amp; &amp;amp;quot;GROUP BY x
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following sql does not work correctly: 
CREATE TABLE T(N VARCHAR,I INTEGER) 
INSERT INTO T VALUES('a',1) 
INSERT INTO T VALUES('a',2) 
INSERT INTO T VALUES('b',3) 
INSERT INTO T VALUES('b',4) 
SELECT N, SUM(I) FROM T GROUP BY N 
It returns a single null row. 
The bug is in Select.java, getResults() method 
if(eCondition==null || eCondition.test()) { 
Object row[]=new Object[len]; 
for(int i=0;i&lt;len;i++) { 
row[i]=eColumn[i].getValue(); 
} 
count++; 
if(aggregated) { 
updateAggregateRow(agg,row,len); 
// *** rows are not being added to r at this point 
// *** if I comment out the else, it appears to work 
// *** } /*else*/ { 
// *** I don't know if I'm missing other stuff 
} else { 
r.add(row); 
if(simple_maxrows &amp;&amp; count&gt;=maxrows) { 
break; 
} 
} 
} 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/8
HyperSQL Database Engine (HSQLDB) / Bugs / #8 Fix for &amp;amp;quot;SELECT x, SUM(y)&amp;amp;quot; &amp;amp;amp; &amp;amp;quot;GROUP BY x
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following sql does not work correctly: 
CREATE TABLE T(N VARCHAR,I INTEGER) 
INSERT INTO T VALUES('a',1) 
INSERT INTO T VALUES('a',2) 
INSERT INTO T VALUES('b',3) 
INSERT INTO T VALUES('b',4) 
SELECT N, SUM(I) FROM T GROUP BY N 
It returns a single null row. 
The bug is in Select.java, getResults() method 
if(eCondition==null || eCondition.test()) { 
Object row[]=new Object[len]; 
for(int i=0;i&lt;len;i++) { 
row[i]=eColumn[i].getValue(); 
} 
count++; 
if(aggregated) { 
updateAggregateRow(agg,row,len); 
// *** rows are not being added to r at this point 
// *** if I comment out the else, it appears to work 
// *** } /*else*/ { 
// *** I don't know if I'm missing other stuff 
} else { 
r.add(row); 
if(simple_maxrows &amp;&amp; count&gt;=maxrows) { 
break; 
} 
} 
} 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/9
HyperSQL Database Engine (HSQLDB) / Bugs / #9 Code transition and standards
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On 2001-04-04 nobody@nowhere screamed in frustrationa 
and said:
&quot;I'd like to supply some fixes we made to HSQL over 
the time. However, we need to be able to reconcile 
those changes with whatever you did to HSQL. 
This is _impossible_ to do, since all files changed 
due to your formatting changes. There's no way to find 
out what changed between 1.43 and 1.60RC2. 
Do you have any kind of change history documenting the 
changes you made? 
I can't even just grab the newest sources - I added 
some testing framework to HSQL that I'd hate to lose. 
Is there any way to merge stuff back?&quot;
This is an ongoing issue and will be cross-posted as 
an open bug as we transition our customers to the new 
code base.
For the future of this project, NOTHING IS MORE 
IMPORTANT THAN THIS! At least until we get the CVS 
tree in place. Mark has offered to do this on an 
individual basis but we need two things from the 
developers:
a) someone to volunteer to be trained by Mark to do 
this for customers/users (could be - SHOULD BE - 
multiple someones (ideally 3))
b) someone to ride herd on this in the future (again, 
should be more than one) and assist me in this 
specifically, keeping me aware and honest - THIS KIND 
OF QUALITY CONTROL CAN MAKE OR BREAK A PROJECT. AGAIN, 
NOTHING -NOTHING!- IS MORE IMPORTANT.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/10
HyperSQL Database Engine (HSQLDB) / Bugs / #10 No docs on DB transition
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OPENED IN RESPONSE TO CUSTOMER SERVICE REQUESTS:
Need to add documentation on transition issues from 
other RDBMS's, the strengths and weaknesses of HSQLDB 
in various use-cases and other new-user documentation 
to next point release
CUSTOMERS AFFECTED/REPORTING:
ETIENNE GAUDY
JAN PLOSKI
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/11
HyperSQL Database Engine (HSQLDB) / Bugs / #11 PreparedStatement Timestamps
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using hsqldb-v1.6 for unit testing my code, and I've lately run into trouble
with java.sql.Timestamp in PreparedStatement. Our code will be using PreparedStatement
all the time, and there will be lots of timestamp columns, so I really hope this works out.
The problem is basically that I create a PreparedStatement from a hsqldb driver connection,
then call setTimestamp(int,Timestamp) on it, and when I call executeUpdate, I get the following 
error:
&quot;java.sql.SQLException: General error java.lang.NumberFormatException: 01 05:00:00.0 in 
statement [insert into date_t (begin_date) values ('2000-01-01 05:00:00.0')]&quot;
It appears from the error message, as well as from the hsqldb source, that the Timestamp
object gets converted into a string (&quot;2000-01-01 05:00:00.0&quot;), and then the stringified SQL is 
processed by the hsqldb engine. But apparently it doesn't parse the string. I'm guessing it's the 
nanoseconds, because in the self-tests included in hsqldb (which make good examples), there are 
things like '2000-02-29 10:00:00', but nothing with nanoseconds. I don't really need nanoseconds, 
it's always going to be 0, but I at least need JDBC compliance: if I pass a Timestamp value, the 
driver must support it.
Please let me know what the status of this is. I'll gladly post this elsewhere on the SourceForge 
site if there's a more appropriate place, and I'll also send source code if it helps.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/12
HyperSQL Database Engine (HSQLDB) / Bugs / #12 single quote in statements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If string field contains single quote it throws 
exception !
Can anyone here help me patching this problem ?
I am using HypersonicSQL which is being closed i guess.
TIA
Nitin
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/13
HyperSQL Database Engine (HSQLDB) / Bugs / #13 Infinite loop while executing DELETE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a sample tiny hsqldb 1.60 database on which the following statement:
DELETE FROM folder WHERE isDeleted='y'
causes an infinite loop in method TableFilter.findFirst.
The database uses tables created with the CACHED modifier (leaving out this modifier seems to fix the problem, but is not an acceptable work-around).
As the database is taken from a closed-source project, I would prefer not to upload the file publicly. Please e-mail me for the test data + code which demonstrates the bug (jpljpl@gmx.de)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/14
HyperSQL Database Engine (HSQLDB) / Bugs / #14 not null fails on primary key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe without looking this is ansi 89 to have
create table foo {
x int primary key not null
}
even though the not null is implied by being a primary 
key. It is acceptable by oracle 8i, MS SQL Server, MS 
Access, and hsql 1.43.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/15
HyperSQL Database Engine (HSQLDB) / Bugs / #15 canonizing column names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can understand why you may take this shortcut to 
capitalize all column names internally to the 
database, but it sucks if you want to use reflection 
to instantiate records off of the database.
You may not consider this a bug since oracle does 
this, but you won't find it in hsql 1.43, mysql, ms 
sql, or access.
The mysql database appears to rely on the application 
programmer being case sensitive in all cases instead 
of hashing mixed and upper case names. This is the 
other extreme, but I still prefer it to just 
capitalizing everything.
Please reconsider.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/16
HyperSQL Database Engine (HSQLDB) / Bugs / #16 bit types only take 'true' and 'false'
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
You should be able to change a bit value by setting it 
to 0 or 1. Don't know if this is ansi sql or not, but 
it is accepted in oracle, ms sql, ms access, mysql.
I can only change bit values by setting it to 'true' 
or 'false'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/17
HyperSQL Database Engine (HSQLDB) / Bugs / #17 followups don't work on sourceforge
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
btw, ms sql server does not take 'true' and 'false' in 
update statements for bit types. And oracle does not 
have a bit type, closest type was smallint.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/18
HyperSQL Database Engine (HSQLDB) / Bugs / #18 now() getting parsed as timestamp
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the now() function to put timestamps on 
records. I have an insert that has a value for each 
column in the record, no nulls that works just fine, 
and includes one formatted date, and one call to now().
Later I do an update with a record that has many 
nulls, so the columns do not appear, and two calls to 
the now() function. For some reason it is dropping 
into:
java.lang.IllegalArgumentException: Timestamp format 
must be yyyy-mm-dd hh:mm:ss.fffffffff
at java.sql.Timestamp.valueOf(Timestamp.java:137)
at org.hsqldb.Column.convertString
(Column.java:1001)
at org.hsqldb.Expression.getValue
(Expression.java:670)
at org.hsqldb.Parser.getValue(Parser.java:836)
at org.hsqldb.Parser.processInsert(Parser.java:417)
at org.hsqldb.Database.execute(Database.java:252)
at org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:994)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:721)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:686)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:85)
Sounds like alternate paths through the sql parser..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/19
HyperSQL Database Engine (HSQLDB) / Bugs / #19 problem with 'SHUTDOWN COMPACT'
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running HSQLDB v1.60 and am having no luck getting 
the &quot;SHUTDOWN COMPACT&quot; query working. No matter what I 
do, the JVM never exits properly if I use this 
query... my application is always left &quot;hanging open&quot; 
at the end. I finally stripped the code down to it's 
bare bones... please take a look at the following code 
and let me know what's wrong. 
---------------------------------------------- 
import java.sql.*;
public class SimpleHSQLDBTest {
public static void main(java.lang.String[] args) {
try { 
Class.forName(&quot;org.hsqldb.jdbcDriver&quot;); 
String conName = &quot;jdbc:hsqldb:file&quot;; 
Connection con = DriverManager.getConnection
(conName, &quot;sa&quot;, &quot;&quot;); 
Statement stmt = con.createStatement(); 
stmt.execute(&quot;SHUTDOWN COMPACT&quot;); 
// stmt.execute(&quot;SHUTDOWN&quot;); 
stmt.close(); 
con.close(); 
System.out.println(&quot;DONE&quot;); 
} catch (Exception e) { 
System.out.println(&quot;EXCEPTION&quot;); 
}
}
}
---------------------------------------------- 
It doesn't matter whether the 'file.script' database 
is brand new, has tables in it, is 'script mode' 
or 'cached mode'... the above app never exits. Notice 
the commented out 'normal' SHUTDOWN line... it works 
properly when used. 
It appears that the 'SHUTDOWN COMPACT' query executes 
properly and that no exception is thrown. Any ideas? 
I also tried the &quot;CHECKPOINT&quot; query, which seems like 
the way to go, but it didn't compact the database like 
I thought it would... actually, I don't know what it 
did. I ran &quot;CHECKPOINT&quot; on a cached database with 
deleted rows that were still &quot;hanging around&quot; after 
deletion... but the rows were still around after 
the &quot;CHECKPOINT&quot; was issued and the database was 
closed. It didn't seem to do anything. Is 'CHECKPOINT' 
also a problem?
DEV ENVIRONMENT:
I'm running VA Java Enterprise, patched to v3.5.3. 
under Win2k. I imported the HSQLDB v1.60 java files 
(not the class files) into it's own VAJ project. This 
HSQLDB project is the only thing included in 
the 'project path' of the above class. The workspace 
classpath is empty. The code doesn't work properly 
under the IDE, nor does the VAJ compiled version work 
properly from the command line under SUN JDK v1.3.1.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/20
HyperSQL Database Engine (HSQLDB) / Bugs / #20 SA: User not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Occassionally, I get this exception saying that SA 
is not a valid user(something along those lines). 
Since, sa is the default user and I haven't created 
any other users, the only choice I have while 
accessing this database is to drop and recreate the 
whole database since it doesnt let me login. Any 
suggestions? Any one reported this problem before?
Thanks for the great product. 
-Xtrimity
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/21
HyperSQL Database Engine (HSQLDB) / Bugs / #21 Subselect fails when using functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider following situation:
&gt;&gt;&gt; snip
create table test ( _id integer, _text varchar);
insert into test values ( 0, 'blah 0');
insert into test values ( 1, 'blah 1');
insert into test values ( 2, 'blah 2');
insert into test values ( 3, 'blah 3');
select * from test where
_id = (select max(_id) from test)
&gt;&gt;&gt; end snip
This fails reporting:
java.sql.SQLException: Column not found: _ID in 
statement [select * from test where _id = (select max
(_id) from test)]
No progress when trying to use test._id in all 
places... It seems it doesn;'t find the column for 
the &quot;select max(_id) from test&quot; part.
&quot;select max(_id) from test&quot; alone works GREAT!
Hope I'll see this fixed soon.
Walk-around:
select max(_id), * from test
Notice: If the table is sorted by ID, otherwise 
returns the last inserted row :(
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/22
HyperSQL Database Engine (HSQLDB) / Bugs / #22 Insert statements misbehave in this case
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
No exception is thrown when I do an insert using the 
wrong statement:
Create table varchar_test(id varchar(100) null, tstamp 
bigint null);
insert into varchar_test values(tstamp);
Values are silently inserted into id column and tstamp 
is 0.
regards,
Xtrimity
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/23
HyperSQL Database Engine (HSQLDB) / Bugs / #23 like &amp;quot;text%&amp;quot; does not use index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in hsqldb 1.6 the like statement does not use the 
index so queries take a lot of time. It would be good 
if statements:
- like 'begin%'
- like 'begin%something'
would use the index.
For the first one there is a workaround which can be 
used:
instead of:
select * from table where col like 'test%'
try the following:
select * from table where col&gt;='test' and col&lt;'tesu'
..which is with index 100 times faster!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/24
HyperSQL Database Engine (HSQLDB) / Bugs / #24 issues with storing objects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am not very sure if the following is bug or not. 
I have attached a java file. Please execute it and u 
will find the bug or error. I will try to explain the 
four cases of my program
My motive is to store a string as an object type 
of the hsql database.
Case 1:
1.) create table temp (name varchar(25), data object)
2.) stored a string in first column of table and 
hashtable in the second column. 
3.) works fine
Case 2:
1.) create table temp (name varchar(25), data varchar
(20))
2.) store string in first column of table and store 
another string using setString() of preparedstatement 
class.
3.) works fine.
Case 3:
1.) create table temp (name varchar(25), data object)
2.) store string in first column of table and store 
another string using setString() of preparedstatement 
class.
3.) Behaviour not understood. (Please see output to 
understand)
Case 4:
1.) create table temp (name varchar(25), data object)
2.) store string in first column of table and store 
another string using setObject() of preparedstatement 
class.
3.) I get an error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/25
HyperSQL Database Engine (HSQLDB) / Bugs / #25 multiply doesn't seem to work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm migrating my MySQL application to use HSQLDB. I 
already fixed most of the problems but one still 
remains. I try to multiply values in a simple SQL 
statement 'select *,(count*price) from purchase'. This 
statement however throws me :
or This function is not supported: 12 in statement
or a NumberFormatException
Anyway, keep up the VERY good work guys
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/26
HyperSQL Database Engine (HSQLDB) / Bugs / #26 Several Date/Time Functions Fail
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Most of the date/time methods -- year, month, 
dayofyear, dayofweek, hour, minute, and second -- fail 
with java.lang.NumberFormatException when used with a 
DATETIME column.
CREATE TABLE Test (c1 DATETIME)
INSERT INTO Test VALUES ({ts '2001-07-31 01:23:45'})
SELECT {fn year (c1)} FROM Test
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/27
HyperSQL Database Engine (HSQLDB) / Bugs / #27 Long.MIN_VALUE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a row of type BIGINT and I submit a SQL 
statement putting Long.toString(Long.MIN_VALUE) into 
that row.
Then the following exception happens.
I suspect, that the Tokenizer steals the values sign 
to apply it after parsing, so that 
java.lang.Long.parseLong ends up parsing the negative 
of Long.MIN_VALUE, which is just out of range for long 
(Long.MAX_VALUE+1).
Sorry, I have no idea, where to look for the version. 
I just have the hsql.jar here, and ther is nor version 
in the MANIFEST
java.lang.NumberFormatException: 9223372036854775808
at java.lang.Long.parseLong(Unknown Source)
at java.lang.Long.&lt;init&gt;(Unknown Source)
at org.hsql.Tokenizer.getAsValue
(Tokenizer.java:139)
at org.hsql.Parser.read(Parser.java:753)
at org.hsql.Parser.readTerm(Parser.java:680)
at org.hsql.Parser.readFactor(Parser.java:646)
at org.hsql.Parser.readSum(Parser.java:629)
at org.hsql.Parser.readConcat(Parser.java:619)
at org.hsql.Parser.readCondition
(Parser.java:549)
at org.hsql.Parser.readAnd(Parser.java:525)
at org.hsql.Parser.readOr(Parser.java:515)
at org.hsql.Parser.parseExpression
(Parser.java:510)
at org.hsql.Parser.getValue(Parser.java:491)
at org.hsql.Parser.processInsert
(Parser.java:219)
at org.hsql.Database.execute(Database.java:122)
at
org.hsql.jdbcConnection.executeStandalone
(jdbcConnection.java:693)
at org.hsql.jdbcConnection.execute
(jdbcConnection.java:543)
at org.hsql.jdbcStatement.fetchResult
(jdbcStatement.java:499)
at org.hsql.jdbcStatement.executeUpdate
(jdbcStatement.java:52)
at
org.hsql.jdbcPreparedStatement.executeUpdate
(jdbcPreparedStatement.java:114)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/28
HyperSQL Database Engine (HSQLDB) / Bugs / #28 Double.NaN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use a row of type DOUBLE and put in the value 
Double.NaN, via the JDBC interface. This results in an 
exception complaining that NaN is not a valid row 
name. We think that Double.NaN should mapped to SQL 
value NULL and vice versa.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/29
HyperSQL Database Engine (HSQLDB) / Bugs / #29 ResultSet incomplete - lying ?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
i was verry happy when I found HSQLDB, looked through 
the documentation and was even more happy.
I tested it and requested a Updateable, srollable 
Result Set and got no error.
Then I tried to used the promided functionality and 
got something like &quot;Sorry not implemented yet!&quot; for 
features like lastRow(), firstRow() or setRow().
In my opinion that's essential for a scrollable Result 
Set and it felt like lying to me when HSQLDB excepted 
the request for an Srollable ResultSet and didn't 
provide the elementary functionality.
First I thought I'm doing something wrong but after a 
while I looked into the Source code and all the 
functions where Documented with what they should do 
but implemented as a simple Return of &quot;Not Yet !&quot;.
I took a deeper look and I don't know how to implement 
the functionality without reading a lot of the sources.
So the question is:
When will the implementation of ResultSet keep the 
Prommise to be Scrollable maybe Updateable ?
It would make things a lot easyier for me ... .
Sugestion: Till then you should shange the Code so 
that it gives an error if someone is requesting a 
ResultSet with not implemented Features (Scrolable, 
Updateable). That's the way other Databases handle 
that ... .
You should mention it in the Docu to, that would have 
saved me a lot of time ;-).
Anyway: Good work, seams to be quiet complete and the 
docu is really good (Ok, not always if it comes to the 
Javadocs ...).
Knut Pape
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/30
HyperSQL Database Engine (HSQLDB) / Bugs / #30 Droping tables drops the database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The sequence of the database CREATE TABLE statements 
determine the order of INSERT statatements. This is 
dependant on Referential Integrity within the created 
tables.
I have a table which is in the heart of the database 
(holds the core PK) and desire to add an additional 
column at a later date (which has arrived), the 
existing DB has been populated so the procedure would 
be to:
1. create a tmp table that includes the new column
2. do an INSERT SELECT to copy the existing data over 
to the tmp table, but adding the default value for the 
new column at the same time
3. DROP the old table
4. CREATE a new table with the old table name but with 
the additional column
5. do an INSERT SELECT to copy the tmp data over to 
the new table 
6. DROP the tmp table
Right, now the bug - when re-creating the new table 
(point 4) the statement is inserted at the end of all 
the other CREATE TABLE statments; this means that the 
INSERT (point 6) statements are also at the end of the 
INSERT statements.
And because of that sequence HSQL DB thinks the DB is 
currupt because the INSERT statements prior to newly 
inserted ones a refering to something that does not 
come into existances until it reaches the bottom of 
the script. The result is a NullPointerException.
Do you have a way to re-order the script file while it 
is in memory?
You help is much appreciated.
Keith
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/31
HyperSQL Database Engine (HSQLDB) / Bugs / #31 [TIMESTAMP]second function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
&quot;SECOND&quot; function return 0 from DATE and TIMESTAMP 
fields and throws an IllegalArgumentException from 
TIME fields.
Try:
CREATE TABLE TEST (C1 DATE,C2 TIME ,C3 TIMESTAMP)
INSERT INTO TEST VALUES
('2001-08-22', '10:00:05','2001-08-22 10:00:06.20')
SELECT SECOND(C1) FROM TEST -&gt; return &quot;0&quot;
SELECT SECOND(C2) FROM TEST -&gt; IllegalArgumentException
SELECT SECOND(C3) FROM TEST -&gt; return &quot;0&quot;
In Library.java the method &quot;second&quot; expect a Date 
parameter.
If you change:
public static int second(java.sql.Date d) {
return getDateTimePart(d, Calendar.SECOND);
}
with:
public static int second(java.sql.Time t) {
return getDateTimePart(t, Calendar.SECOND);
}
the results are:
SELECT SECOND(C1) FROM TEST -&gt; IllegalArgumentException
SELECT SECOND(C2) FROM TEST -&gt; return &quot;5&quot;
SELECT SECOND(C3) FROM TEST -&gt; return &quot;6&quot; (if apply 
fix for bug 446415 else return NumberFormatException)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/32
HyperSQL Database Engine (HSQLDB) / Bugs / #32 Error in the jdbc documentation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the 'operating modes' documentation page (/hsqldb_v.1.61/doc/internet/hSql.html), the URL to connect to the hsql server in &quot;Server&quot; mode is written as
jdbc:hsqldb:hsqldb://hsqldbsrv
it should be
jdbc:hsqldb:hsql://hsqldbsrv
Ź
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/33
HyperSQL Database Engine (HSQLDB) / Bugs / #33 TINYINT: ClassCastException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I ran into a problem when converting a mySQL databse 
to hsqldb with the Transfer tool. The mySQL database 
has columns of type TINYINT, which cause a 
ClassCastException. I tracked down the problem to 
(what appears to me) an inconsistency between the 
jdbcPreparedStatement class and the Column class. The 
Column class uses a Short for both a TINYINT and 
SMALLINT, while the jdbcPreparedStatement class uses a 
Byte for TINYINT and a Short for SMALLINT. The 
jdbcPreparedStatement.setObjectIntype(..) then 
receives a Short where it expects a Byte, causing the 
ClassCastException.
For now, I patched the jdbcPreparedStatement to also 
use a Short for both TINYINT and SMALLINT, however I 
am not sure if this is the right procedure. I could 
also patch the Column class to use a Byte for TINYINT.
If anyone could give me advice on the way to go, I 
will submit a patch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/34
HyperSQL Database Engine (HSQLDB) / Bugs / #34 Problem with CONSTRAINT PRIMARY KEY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have been testing the 1.6.1 version of the HSQL 
database and have come across a problem. The steps to 
replicate the problem are:
1. Run the DBManager and select a database URL 
something like &quot;jdbc:hsqldb:message&quot;
2. Execute the following SQL statements in order:
CREATE CACHED TABLE MESSAGE ( 
ID_message int IDENTITY, 
CD_guid varchar NULL, 
XM_message varchar NULL, 
CONSTRAINT PK_MESSAGE PRIMARY KEY (ID_message) );
CREATE CACHED TABLE MESSAGE_AUDIT ( 
ID_message_audit int IDENTITY, 
ID_message int NULL, 
DS_status_message varchar NULL, 
CONSTRAINT PK_MESSAGE_AUDIT PRIMARY KEY 
(ID_message_audit), 
CONSTRAINT FK1_MESSAGE_AUDIT FOREIGN KEY 
(ID_message) REFERENCES MESSAGE (ID_message) );
INSERT INTO MESSAGE VALUES(1, '1', NULL);
3. Check the inserted record:
SELECT * FROM MESSAGE
4. Close the DBManager
5. Open the DBManager again selecting the same JDBC 
URL as before
6. At this point, a stack trace should appear in the 
DBManager window, complaining about a string index out 
of bounds exception.
7. Check for the previously inserted record:
SELECT * FROM MESSAGE
No records will be returned from this query.
I have found a work-around, which is to specify a 
primary key using the syntax 
CREATE CACHED TABLE MESSAGE ( 
ID_message int IDENTITY PRIMARY KEY, ...
instead of using the CONSTRAINT PRIMARY KEY syntax.
I assume that what I have found is actually 2 bugs, 
because if you repeat the process and create the 
message table only, no stack trace appears, but the 
previously inserted data is still lost.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/35
HyperSQL Database Engine (HSQLDB) / Bugs / #35 Minor typo in build.bat
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Build.bat contains following line:
@echo example: classpath=c:\jkd1.1.8\lib\classes.zip
It should be:
@echo example: classpath=c:\jdk1.1.8\lib\classes.zip
This may sound like a minor detail, but it caused me 
some gray hair as the (Finnish?) saying goes... :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/36
HyperSQL Database Engine (HSQLDB) / Bugs / #36 Java 1.1 error in Log.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Log.java contains a non-conditional call of 
setProperty function, which doesn't compile on JDK 
1.1.8:
pProperties.setProperty(&quot;version&quot;, 
Is should be:
//#ifdef JAVA2
pProperties.setProperty(&quot;version&quot;, 
jdbcDriver.VERSION);
//#else
pProperties.put(&quot;version&quot;, jdbcDriver.VERSION);
//#endif
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/37
HyperSQL Database Engine (HSQLDB) / Bugs / #37 Recovery commits broken transactions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When HSQL restarted after a system crash, it will made 
the changes made by the last *uncommited* -- thus 
possibly inclompete -- transaction permanent. HSQL 
should drop all changes after the last succesfull 
commit from the log (providing that auto commit was 
set to off).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/38
HyperSQL Database Engine (HSQLDB) / Bugs / #38 SOUNDEX
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
Soundex function is not complaint with Soundex Algorithem.
According to the Algorithem,
The vowels are not used. 
If two or more adjacent (not separated by a vowel) letters have the same numeric value, only one 
is used.
But in your implementation it is using same numeric value.
If there are not three digits after the consonants are convert, the code is filled out with zeros. The 
name Lee has no consonants after the L, so the soundex code would be L000. 
But in your implementatiion it will give only &quot;L&quot;, basically is not padding with Zero's.
It can be easily fixed. I modified the soundex function and attached to it. you can check in to 
the repository.
you are doing good work.
Regards
Aravilli Srinivasa Rao
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/39
HyperSQL Database Engine (HSQLDB) / Bugs / #39 Soundex 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i, 
Soundex function is not complaint with Soundex Algorithem.
According to the Algorithem,
The vowels are not used. 
If two or more adjacent (not separated by a vowel) letters have the same numeric value, only one 
is used.
But in your implementation it is using same numeric value.
If there are not three digits after the consonants are convert, the code is filled out with zeros. 
The 
name Lee has no consonants after the L, so the soundex code would be L000. 
But in your implementatiion it will give only &quot;L&quot;, basically is not padding with Zero's.
It can be easily fixed. I modified the soundex function and attached to it. you can check in to 
the repository.
Regards
Aravilli Srinivasa Rao 
I had problem with attachment i.e why i am attaching code function here)
---------------------------------------------------------------------
public static String soundex(String s) {
if (s == null) {
return s;
}
s = s.toUpperCase();
int len = s.length();
char b[] = new char[4];
b[0] = s.charAt(0);
int j = 1;
for (int i = 1; i &lt; len &amp;&amp; j &lt; 4; i++) {
char c = s.charAt(i);
if (&quot;BFPV&quot;.indexOf(c) != -1) {
if (b[j-1] != '1')
b[j++] = '1';
} else if (&quot;CGJKQSXZ&quot;.indexOf(c) != -1) {
if (b[j-1] != '2')
b[j++] = '2';
} else if (c == 'D' || c == 'T') {
if (b[j-1] != '3')
b[j++] = '3';
} else if (c == 'L') {
if (b[j-1] != '4')
b[j++] = '4';
} else if (c == 'M' || c == 'N') {
if (b[j-1] != '5')
b[j++] = '5';
} else if (c == 'R') {
if (b[j-1] != '6')
b[j++] = '6';
}
}
String result = new String(b, 0, j);
while(result.length() != 4) {
result +=&quot;0&quot;;
}
return result;
}
----------------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/40
HyperSQL Database Engine (HSQLDB) / Bugs / #40 JDBC URL for server documented incorrect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the 1.61 release, the file doc/internet/hSql.html
states
that the URL for a Server connection is:
jdbc:hsqldb:hsqldb://hsqldbsrv
This should be:
jdbc:hsqldb:hsql://hsqldbsrv
This is expected in the source code file
jdbcConnection.java line 675, which is:
} else if (s.toUpperCase().startsWith(&quot;HSQL://&quot;))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/41
HyperSQL Database Engine (HSQLDB) / Bugs / #41 Group by
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have a table with two column that pile data 
(serAccess, month). i am triyng to count the number of 
serAccess by month by doing the following SQL command:
SELECT month, count(serAccess)
FROM statistique
GROUP BY month;
When i run it using the demo application it run ok but 
when i run from my JSP application, i only get 1,0 as 
result!
Please help!
Nicaud Bourgault
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/42
HyperSQL Database Engine (HSQLDB) / Bugs / #42 GROUP BY in 1.6.1 still broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following forum thread indicates that the GROUP BY 
with aggregate functions bug was fixed:
http://sourceforge.net/forum/message.php?msg_id=177086
Based on the results of some of my queries, it looks 
like it's still not working correctly.
My db table is as follows:
CREATE TABLE jiveMessage (
messageID INTEGER NOT NULL,
parentMessageID INTEGER NULL,
threadID INTEGER NOT NULL,
forumID INTEGER NOT NULL,
userID INTEGER NULL,
subject VARCHAR(255) NULL,
body LONGVARCHAR NULL,
modValue INTEGER NOT NULL,
rewardPoints INTEGER NOT NULL,
creationDate VARCHAR(15) NOT NULL,
modifiedDate VARCHAR(15) NOT NULL,
CONSTRAINT jiveMessage_pk PRIMARY KEY (messageID)
);
The query I'm running is:
SELECT threadID, count(1) AS msgCount FROM jiveMessage 
WHERE modifiedDate &gt; ? GROUP BY threadID ORDER BY 
msgCount DESC
Results in hsqldb:
threadID | count
1 2
2 4
in mysql:
threadID | count
2 4
1 2
What appears to be happening is that the grouping 
logic is done last in the order of events, but done 
first in mysql.
Has anyone else noticed this problem in the 1.6.1 
codebase?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/43
HyperSQL Database Engine (HSQLDB) / Bugs / #43 Applet is incompatible with Java Plug In
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just got this mail from a contractor of Sun:
Dear Thomas,
We are about to release a new version of Java Plug In 
which supports all Java applets, including those based 
on older versions of Java. We expect this version to 
be widely distributed and to replace all older 
versions of Java. After extensive testing of existing 
applets, we have done our best to fix all 
compatibility issues. However, we have found the 
following problem in running your applet, which cannot
easily be fixed on our end. Whenever available, we 
suggest a solution that will allow your applet to run 
with this new version of Java Plug-in.
You can find the early-access version of Java Plug-in 
at
http://developer.java.sun.com/developer/earlyAccess/j2s
dk131_01a/
in order for you to do your own testing.
Thank you,
The Java Plug-in Team
Sun Microsystems
URL
http://javaboutique.internet.com/HypersonicSQL/ 
Problem
access denied
Suggested solution
Broken because of security model changes in Java 2. 
Migrate the applets to Java 2 security model.
Jennifer.Lozzio@Sun.COM
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/44
HyperSQL Database Engine (HSQLDB) / Bugs / #44 GROUP BY FAILS WITH ALIAS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 143
GROUP BY on a column select alias fails but works if 
the actual column name is used (order by works using 
an alias).
Ex. FAILS
select customer.name as customer_name, place.name as 
customer_addr
from customer, place
where customer.place = place.code
group by customer_addr
Ex. WORKS
select customer.name as customer_name, place.name as 
customer_addr
from customer, place
where customer.place = place.code
group by place.name
Ex. WORKS
select customer.name as customer_name, place.name as 
customer_addr
from customer, place
where customer.place = place.code
order by customer_addr
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/45
HyperSQL Database Engine (HSQLDB) / Bugs / #45 Connection is broken for objects &amp;gt; 32k
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After creating a prepared statement and using it's setObject() method with an Object (size&gt; 32k) I receive a &quot;SQLException: Connection is broken&quot; error
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/46
HyperSQL Database Engine (HSQLDB) / Bugs / #46 poor INSERT INTO implementation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When processing:
SELECT select_expression INTO tablename FROM table_list
...
statements, Database.linkTable() is not performed until
after inserting data into new INTO table. This means
that a very large selection operation may be performed,
only to fail due to the fact that a table with the same
name as the INTO table already exists. 
Example:
Suppose TEST exists and contains 1,000,000 rows, then:
SELECT TEST.* INTO TEST FROM TEST
will select all 1,000,000 rows from the existing table
named TEST, create a new table called TEST, insert the
1,000,000 rows in the new table, and only then attempt
to link the table into the database, at which point the
operation will fail due to the restriction on duplicate
table names that Database.linkTable() imposes.
With a simple change to the code, that is: attempting
to link the new table into the database immediately
after it is created and before the selection result is
retriveived, the example statement will return
immediately with a &quot;TABLE ALREADY EXISTS&quot; SQL
exception, saving much time and overhead.
-- Will be provding patch, including support for
equivalent CREATE TABLE AS syntax extention.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/47
HyperSQL Database Engine (HSQLDB) / Bugs / #47 StringIndexOutOfBoundsException: -10
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running Standalone mode from JBoss I get this from 
time to time. After this has occurred the database 
needs to be deleted to avoid hanging on further use. 
How do you properly shutdown in standalone mode? I 
assume that the DB file are being left corrupted by 
not closing down properly with a shutdown hook?
[Default] java.lang.StringIndexOutOfBoundsException: 
String index out of range: -10
[Default] at java.lang.String.substring
(String.java:1503)
[Default]
[Default] at org.hsqldb.Table.setIndexRoots
(Table.java:483)
[Default]
[Default] at org.hsqldb.Database.processSet
(Database.java:1179)
[Default]
[Default] at org.hsqldb.Database.execute
(Database.java:274)
[Default]
[Default] at org.hsqldb.Log.runScript
(Log.java:837)
[Default]
[Default] at org.hsqldb.Log.open(Log.java:223)
[Default]
[Default] at org.hsqldb.Database.&lt;init&gt;
(Database.java:96)
[Default]
[Default] at 
org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:926)
[Default]
[Default] at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
[Default]
[Default] at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:517)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:177)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:118)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:151)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAConnectionFactory.createObject
(XAConnectionFactory.java:267)
[Default]
[Default] at 
org.jboss.pool.ObjectPool.createNewObject
(ObjectPool.java:842)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:587)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:538)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAPoolDataSource.getConnection
(XAPoolDataSource.java:178)
[Default]
[Default] at 
org.jboss.jdbc.XADataSourceLoader.startService
(XADataSourceLoader.java:407)
[Default]
[Default] at 
org.jboss.util.ServiceMBeanSupport.start
(ServiceMBeanSupport.java:107)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at 
org.jboss.configuration.ConfigurationService$ServicePro
xy.invoke(ConfigurationService.java:836)
[Default]
[Default] at $Proxy0.start(Unknown Source)
[Default]
[Default] at org.jboss.util.ServiceControl.start
(ServiceControl.java:81)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at org.jboss.Main.&lt;init&gt;(Main.java:210)
[Default]
[Default] at org.jboss.Main$1.run(Main.java:116)
[Default]
[Default] at 
java.security.AccessController.doPrivileged(Native 
Method)
[Default]
[Default] at org.jboss.Main.main(Main.java:112)
[Default]
[Default] java.lang.StringIndexOutOfBoundsException: 
String index out of range: -7
[Default] at java.lang.String.substring
(String.java:1503)
[Default]
[Default] at org.hsqldb.Table.setIndexRoots
(Table.java:483)
[Default]
[Default] at org.hsqldb.Database.processSet
(Database.java:1179)
[Default]
[Default] at org.hsqldb.Database.execute
(Database.java:274)
[Default]
[Default] at org.hsqldb.Log.runScript
(Log.java:837)
[Default]
[Default] at org.hsqldb.Log.open(Log.java:223)
[Default]
[Default] at org.hsqldb.Database.&lt;init&gt;
(Database.java:96)
[Default]
[Default] at 
org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:926)
[Default]
[Default] at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
[Default]
[Default] at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:517)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:177)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:118)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:151)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAConnectionFactory.createObject
(XAConnectionFactory.java:267)
[Default]
[Default] at 
org.jboss.pool.ObjectPool.createNewObject
(ObjectPool.java:842)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:587)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:538)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAPoolDataSource.getConnection
(XAPoolDataSource.java:178)
[Default]
[Default] at 
org.jboss.jdbc.XADataSourceLoader.startService
(XADataSourceLoader.java:407)
[Default]
[Default] at 
org.jboss.util.ServiceMBeanSupport.start
(ServiceMBeanSupport.java:107)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at 
org.jboss.configuration.ConfigurationService$ServicePro
xy.invoke(ConfigurationService.java:836)
[Default]
[Default] at $Proxy0.start(Unknown Source)
[Default]
[Default] at org.jboss.util.ServiceControl.start
(ServiceControl.java:81)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at org.jboss.Main.&lt;init&gt;(Main.java:210)
[Default]
[Default] at org.jboss.Main$1.run(Main.java:116)
[Default]
[Default] at 
java.security.AccessController.doPrivileged(Native 
Method)
[Default]
[Default] at org.jboss.Main.main(Main.java:112)
[Default]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/48
HyperSQL Database Engine (HSQLDB) / Bugs / #48 Self Referencing Table bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Initial Comment:
This create table statement should be legal. I need to 
create a hierarchical set of entities. As a workaround 
I suppose I could modify the table after creation but 
this shouldn't be necessary! Is this possible even? 
How do I add a foreign key as an afterthought?
create cached table TNODE
(
ID INT IDENTITY PRIMARY KEY,
PARENT_ID INT,
NAME VARCHAR(64) NOT NULL,
FOREIGN KEY (PARENT_ID) REFERENCES TNODE(ID),
CONSTRAINT NAME UNIQUE(NAME, PARENT_ID)
);
java.sql.SQLException: Table not found: TNODE in 
statement [create cached table TNODE
(
ID INT IDENTITY PRIMARY KEY,
PARENT_ID INT,
NAME VARCHAR(64) NOT NULL,
FOREIGN KEY (PARENT_ID) REFERENCES TNODE(ID),
CONSTRAINT NAME UNIQUE(NAME, PARENT_ID)
)]
at org.hsqldb.Trace.getError(Trace.java:180)
at org.hsqldb.jdbcResultSet.&lt;init&gt;
(jdbcResultSet.java:2645)
at org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:994)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:721)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:686)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:85)
at 
com.borland.dx.sql.dataset.Database.executeStatement
(Unknown Source)
at com.borland.dbtools.jdbcx.sqlpanel.SqlBean.a
(Unknown Source)
at com.borland.dbtools.jdbcx.sqlpanel.SqlBean.a
(Unknown Source)
at com.borland.dbtools.jdbcx.sqlpanel.SqlBean.b
(Unknown Source)
at 
com.borland.dbtools.jdbcx.sqlpanel.b.actionPerformed
(Unknown Source)
at 
javax.swing.AbstractButton.fireActionPerformed
(AbstractButton.java:1450)
at 
javax.swing.AbstractButton$ForwardActionEvents.actionPe
rformed(AbstractButton.java:1504)
at 
javax.swing.DefaultButtonModel.fireActionPerformed
(DefaultButtonModel.java:378)
at javax.swing.DefaultButtonModel.setPressed
(DefaultButtonModel.java:250)
at 
javax.swing.plaf.basic.BasicButtonListener.mouseRelease
d(BasicButtonListener.java:216)
at java.awt.Component.processMouseEvent
(Component.java:3717)
at java.awt.Component.processEvent
(Component.java:3546)
at java.awt.Container.processEvent
(Container.java:1164)
at java.awt.Component.dispatchEventImpl
(Component.java:2595)
at java.awt.Container.dispatchEventImpl
(Container.java:1213)
at java.awt.Component.dispatchEvent
(Component.java:2499)
at 
java.awt.LightweightDispatcher.retargetMouseEvent
(Container.java:2451)
at 
java.awt.LightweightDispatcher.processMouseEvent
(Container.java:2216)
at java.awt.LightweightDispatcher.dispatchEvent
(Container.java:2125)
at java.awt.Container.dispatchEventImpl
(Container.java:1200)
at java.awt.Window.dispatchEventImpl
(Window.java:912)
at java.awt.Component.dispatchEvent
(Component.java:2499)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:319)
at java.awt.EventDispatchThread.pumpOneEvent
(EventDispatchThread.java:103)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:93)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:84)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/49
HyperSQL Database Engine (HSQLDB) / Bugs / #49 supporting &amp;quot;default&amp;quot; in create table?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in 1.6.0, the following sql command fails because of 
the &quot;default&quot; keyword:
CREATE TABLE Objects (
title varchar(255),
owner varchar(100),
created timestamp(14),
last_modified timestamp(14),
path varchar(255),
mime_type varchar(255),
annotation varchar(2048),
thinking_type int(11),
object_id varchar(100) default '' ,
PRIMARY KEY (object_id)
);
possible to support?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/50
HyperSQL Database Engine (HSQLDB) / Bugs / #50 LIMIT limitations
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.61 LIMIT does not work together with DISTINCT. 
Has now been fixed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/51
HyperSQL Database Engine (HSQLDB) / Bugs / #51 SELECT .. IN from same table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.61 queries in the form of SELECT .... FROM atable 
WHERE x IN (SELECT y FROM atable WHERE ...) do not 
work, reporting &quot;Column y not found&quot;. Has now been 
fixed, pending more thorough testing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/52
HyperSQL Database Engine (HSQLDB) / Bugs / #52 Java MIN VALUE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get a NumberFormatException when trying to insert a 
Java Long.MIN_VALUE into the normal sql mapping column.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/53
HyperSQL Database Engine (HSQLDB) / Bugs / #53 join/condition bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
following problem:
with the hsql sample data (Database manager), execute 
the following statement:
select * from address adr left outer join document doc 
on (adr.id=doc.addressid )
the problem arises if you add another condition like 
(OR 1=0) which should not change anything, but 
unfortunatly the statement
select * from address adr left outer join document doc 
on (adr.id=doc.addressid OR 1=0 )
will now product a different resultset with less 
recordsets (exactly all records without NULL values in 
addressid)
This definitly seems like a bug, or? 
Any ideas?
/thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/54
HyperSQL Database Engine (HSQLDB) / Bugs / #54 Extraneous quote corrupts database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you include an extraneous single quote (') in an 
insert or update statement value, the entire database 
is corrupted. Every record is overwritten with the 
value up to the quote. 
Example:
INSERT INTO FOO F1 VALUES ('It isn't time.')
Result:
Every record is set to 'It isn'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/55
HyperSQL Database Engine (HSQLDB) / Bugs / #55 Server crash after logging DISCONNECT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use hsqldb 1.61
In the situation where the dbengine is running as a 
server, I open a connection via jdbc and close it.
At that moment, the database engine logs a DISCONNECT 
statement in the script file.
If I close the database at that point and restart it,
I get a NullPointerException on the screen:
Server.run/init: java.lang.NullPointerException
java.lang.NullPointerException
at org.hsql.Channel.checkAdmin(Channel.java:69)
at org.hsql.DatabaseInformation.getScript
(DatabaseInformation.java:451)
at org.hsql.Database.getScript
(Database.java:222)
at org.hsql.Log.scriptToFile(Log.java:238)
at org.hsql.Log.writeScript(Log.java:494)
at org.hsql.Log.close(Log.java:148)
at org.hsql.Log.open(Log.java:128)
at org.hsql.Database.&lt;init&gt;(Database.java:47)
at org.hsql.Server.run(Server.java:69)
at org.hsql.Server.main(Server.java:33)
And the server won't ever respond again normally to 
connections.
This crash can be recovered manually by removing the 
DISCONNECT statement from the .script file.
Of course that will be a big problem in production 
environments. :)
For myself I have solved the problem in Log.java
by adjusting the
void write(Channel c,String s) throws SQLException {
method, so that it doesn't write a DISCONNECT to the 
script file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/56
HyperSQL Database Engine (HSQLDB) / Bugs / #56 double column names are allowed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to an error in my create table script I created a 
table with 2 columns with the same name.
I don't know what the effects of this are, but I think 
it should not be allowed.
Only imagine select .. from .. where a=x
with a the double column name
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/57
HyperSQL Database Engine (HSQLDB) / Bugs / #57 combined conditions don't work correctly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Okay, here is an example:
Create some tables (I stripped off everything you do 
not need to see the problem).
create cached table USERGROUPS
(
ID integer
);
create cached table USERS
(
ID integer
);
create cached table UG
(
FK_USER integer,
FK_USERGROUP integer,
TEST  bit,
foreign key (FK_USER) references USERS(ID),
foreign key (FK_USERGROUP) references USERGROUPS(ID),
unique (FK_USER, FK_USERGROUP)
);
Now insert some test data.
insert into USERGROUPS values (0);
insert into USERS values (0);
insert into UG values (0, 0, true);
Well, now if you do an
- select * from UG where FK_USER=0 and FK_USERGROUP=0 -
or 
- update UG set TEST = true where FK_USER=0 and 
FK_USERGROUP=0 -
there is no result!
If you use just one of the conditions
- select * from UG where FK_USER=0 -
or
- select * from UG where FK_USERGROUP=0 -
it works. If you don't create the foreign key FK_USER 
or the UNIQUE clause, everything is just fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/58
HyperSQL Database Engine (HSQLDB) / Bugs / #58 Version 1.62 patch breaks selftest
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The suggested patches for version 1.62 includes a 
patch for bug 471711 by fredt. This patch generate a 
column not found error when running the selftest 
program.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/59
HyperSQL Database Engine (HSQLDB) / Bugs / #59 EOFException executing UPDATE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(HSQLDB v1.61)
I was running an application making lots of inserts,
selects and updates and got the following stack dump. 
I know this is not a lot to go on, but I have only seen
it once. This happened while executing a query like
the following:
UPDATE profile SET last_time = now() WHERE id IN
(1944,1887,1876,1876,1957,1957,1886,1886,1921,
1921,1893,1849,1849)
The number of ids in the query varies.
I will post again if I get any more information.
Thanks,
Stack dump:
java.io.EOFException
at
java.io.RandomAccessFile.readInt(RandomAccessFile.java(Compiled
Code))
at org.hsqldb.Cache.getRow(Cache.java(Compiled Code))
at org.hsqldb.Row.getNode(Row.java(Compiled Code))
at org.hsqldb.Index.delete(Index.java(Compiled Code))
at org.hsqldb.Index.delete(Index.java(Compiled Code))
at org.hsqldb.Table.deleteNoCheck(Table.java:965)
at org.hsqldb.Table.deleteNoCheck(Table.java:949)
at
org.hsqldb.Parser.processUpdate(Parser.java(Compiled Code))
at
org.hsqldb.Database.execute(Database.java(Compiled Code))
at
org.hsqldb.jdbcConnection.executeStandalone(jdbcConnection.java:994)
at
org.hsqldb.jdbcConnection.execute(jdbcConnection.java:721)
at
org.hsqldb.jdbcStatement.fetchResult(jdbcStatement.java:686)
at
org.hsqldb.jdbcStatement.executeUpdate(jdbcStatement.java:85)
at
com.myco.ADBConnection.executeUpdate(ADBConnection.java:337)
at
com.myco.server.HSQLDatabase.updateQueuedAProfiles(HSQLDatabase.java:471)
at
com.myco.server.StandardDatabase$DBInsertDaemon.run(StandardDatabase.java(Compiled
Code))
at java.lang.Thread.run(Thread.java:498)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/60
HyperSQL Database Engine (HSQLDB) / Bugs / #60 Inserting Objects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having problems storing java.lang.Integer and 
java.lang.String objects in hsqldb 1.60. 
Here is the table I have created: 
CREATE CACHED TABLE PREFERENCE 
( 
User_Id INTEGER NOT NULL, 
Pref_Name VARCHAR(30) NOT NULL, 
Pref_Value OBJECT NOT NULL, 
DateCreated DATETIME NOT NULL, 
PRIMARY KEY(User_Id, Pref_Name), 
FOREIGN KEY(User_Id) REFERENCES USER(User_Id) 
) 
I am inserting Objects using a PreparedStatment. All 
other objects I insert (user defined objects that is) 
seem to work fine. No exceptions are being thrown 
while inserting. When I open the database in 
DatabaseManager, The preference name has been written, 
but the serialized object field is blank.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/61
HyperSQL Database Engine (HSQLDB) / Bugs / #61 Null Pointer thrown from jdbcResultSet
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The method getBinaryStream() throws a NullPointer 
exception if the data in the database is null. This 
is because it tries instantiate a ByteArrayInputStream 
with a null value (the result from getBytes())
This should be changed so that the method retuns null 
and does not throw the exception.
See line 438 of jdbcResultSet.
Maybe something like this...
public InputStream getBinaryStream(int column) 
throws SQLException
{
InputStream returnStream = null;
byte[] bytes = getBytes(column);
if (bytes != null)
returnStream = new ByteArrayInputStream(bytes);
return returnStream;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/62
HyperSQL Database Engine (HSQLDB) / Bugs / #62 NPE on connect.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
v1.61
We got the following stack trace once while our 
application was trying to connect to HSQL.
java.lang.NullPointerException
at org.hsqldb.Log.writeLine(Log.java:904)
at org.hsqldb.Log.write(Log.java:355)
at org.hsqldb.Database.connect
(Database.java:155)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:937)
at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
at java.sql.DriverManager.getConnection
(DriverManager.java:523)
at java.sql.DriverManager.getConnection
(DriverManager.java:152)
...
at java.lang.Thread.run(Thread.java:498)
It looks like w was null:
private static void writeLine(Writer w, String s) 
throws IOException {
w.write(StringConverter.unicodeToAscii(s) 
+ &quot;\r\n&quot;);
}
We only saw this once, so I was not able to narrow it 
down at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/63
HyperSQL Database Engine (HSQLDB) / Bugs / #63 Extraneous sleep  in Log class
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In version 1.61 of hsqldb in the Log.isAlreadyOpen() method there is a 3 second sleep that seems to be there to do some sort of concurrency checking. I could not find anyplace where the lock file is actually created. I believe this is unnecessary code and can be removed. It would significantly improve start-up time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/64
HyperSQL Database Engine (HSQLDB) / Bugs / #64 Unprotected system tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here's a good chuckle for anyone who's interested:
- open the DatabaseManager against any hsql(db)
database (you don't even have to be an admin user for
this)
- create a table SYSTEM_CONNECTIONINFO( ID INT )
- refresh tree
Ha, ha, ha...wimper... (:-(
Here's another good one:
- in same session, now drop table SYSTEM_CONNECTIONINFO
- refresh tree (all is good again)
- create table SYSTEM_TABLES(int id)
- create table TEST(int id)
- refresh tree
Hey! Where did test go? I just created it, but it
doesn't show up in the treeeeeeee.
The fix is simple:
hsql(db) needs to disable creation of user tables with
the same names as system tables. A really naive
implementation only needs to do a
getSystemTable(create_table_name) != null to check
this, although it is a waste to do it that way.
BTW
inserts, updates, deletes are also allowed against
system tables, but since the tables are regenerated on
each use, the DML is completely without observablke
effect (but does consume processing time). These
actions should be disabled too, if not too expensive...
Campbell
PS
yes: I know that nobody with even a little hsqldb
knowlege is going to do this (on purpose or
otherwise). But what about the case where someone is
migrating to hsqldb, they are fairly green, and their
previous naming conventions were *unfortunate*? What
about automated environments, where software chooses
the names for table creation?
PPS
I've known about this one for ~6 months now (basically,
since I first downloaded the product and took my first
skim through the source). Sorry about not posting
earlier
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/65
HyperSQL Database Engine (HSQLDB) / Bugs / #65 Exception while shutdown compact
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello we use HSQL in a production system.
The usage is very heavy msg traffic.
When we try to shutdown immediately from the Admin
console 
We observed the following exception:
ava.lang.NullPointerException
at org.hsql.Channel.checkAdmin(Channel.java:69)
at org.hsql.Database.processShutdown
(Database.java:642)
at org.hsql.Database.execute(Database.java:156)
at org.hsql.ServerConnection.run
(ServerConnection.java:58)
ava.lang.NullPointerException
at org.hsql.Log.writeLine(Log.java:493)
at org.hsql.Log.write(Log.java:197)
at org.hsql.Database.execute(Database.java:168)
at org.hsql.ServerConnection.run
(ServerConnection.java:58)
Then the server does not quit.
We have to hit ctrl C and then edit the properties
file to modified = NO and restart the server to 
run.
How does one restore from a previous backup file.
Thank you
--
Raman
rkannan@govpx.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/66
HyperSQL Database Engine (HSQLDB) / Bugs / #66 problem inserting data &gt;30k
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a problem when I want to insert data &gt;30kb into 
a longvarbinary field. For inserting I use a 
preparedStatement and the setBytes() method. There is 
no error code, the program &quot;stops&quot; only...
The error occurs when hsql runs in &quot;server&quot;-mode. I 
tried the same insert of large data with the hsql 
standalone version and it works!
Please help me, if you know a solution or hint.
Peter
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/67
HyperSQL Database Engine (HSQLDB) / Bugs / #67 NumberFormatException DECIMAL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is this a bug ?
http://sourceforge.net/forum/forum.php?
thread_id=623572&amp;forum_id=73674
I am using hsqldb_v.1.61
Boerries
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/68
HyperSQL Database Engine (HSQLDB) / Bugs / #68 commit does not work with multiple con.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are not sure if this is a limitation of hsqldb or a
bug. Please clarify:
We use 3 connections:
connection1.setAutoCommit(false); 
//connection1.commit(); 
connection2.setAutoCommit(false); 
//connection1.commit(); 
connection3.setAutoCommit(false);
//connection1.commit(); 
con3: INSERT INTO TABLE Row with ID 2
con1: SELECT * FROM TABLE 
-&gt; shows Row with ID 2
connection2.commit();
connection3.commit(); 
connection1.commit();
If we reread the TABLE after finishing this test
program, the new Row is not in the TABLE anymore!
If we do one of the following changes, all works as
expected (Row stays in the TABLE):
- Remove comment from the lines connection1.commit()
OR
- Change commit statements at the end of the program
to:
connection3.commit(); 
connection2.commit();
connection1.commit();
Can you please clarify this issue? 
Thanks a lot!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/69
HyperSQL Database Engine (HSQLDB) / Bugs / #69 foreign key problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Suppose:
table B has a foreign key on table A field nr 1 (both
tables are cached)
If table A is dropped, it is still possible do to
selects in table B, but when the database is stopped
and restarted table B is deleted.
In my opinion here is something wrong. I have 3 options :
1. It should not be possible to drop table A. At the
moment it is not possible to delete records in table A
which are referenced in table B.
2. If you can drop table A, table B should be impacted
immediatly, not after a restart of the database.
3. In my opinion the best would be to put table B in a
mode not accessible to the users, (but it should not be
deleted, as it happens now), until table A is recreated
with the correct foreign keys. If table A is recreated
table b should be again accessible for select/update by
the users.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/70
HyperSQL Database Engine (HSQLDB) / Bugs / #70 {fn hour ()} Returns 0 through 11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The hour function returns zero through eleven, instead 
of zero through twenty-three, because the hour method 
in Library.java used Calendar.HOUR instead of 
Calendar.HOUR_OF_DAY. I've made this mistake many 
times myself. Source fix:
public static int hour(java.sql.Time t) {
return getDateTimePart(t, Calendar.HOUR_OF_DAY);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/71
HyperSQL Database Engine (HSQLDB) / Bugs / #71 {fn month()} returns 0 through 11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The month function returns zero through eleven instead 
of one through twelve. It's always seemed odd to me 
that the Calendar.MONTH returns zero through eleven 
instead of one through twelve. Here's a source fix to 
Library.java:
public static int month(java.sql.Date d) {
return getDateTimePart(d, Calendar.MONTH) + 1;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/72
HyperSQL Database Engine (HSQLDB) / Bugs / #72 Memory problems with cached tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've been using HSQL for a little while for internal 
testing and such. However, we've had some trouble 
loading large quantities of data to cached tables.
Since the HSQL code uses integer values to perform its 
seeks into the data file, theoretically you should be 
able to store a gig or more of data. In practice, 
however, it seems that all the data you load remains 
in memory, even when using cached tables.
I've attached a Java class written by one of my co-
workers that demonstrates this. No matter how large 
or small the row size, it always craps out after 
consuming the available memory. It appears that the 
Cache class is supposed to maintain a limited number 
of rows in memory and persist the rest to disk, but I 
don't think it really performs that function. I've 
tried changing the value governing the size of the 
cache (even setting it as low as 20 rows), but the 
amount of memory consumed remains the same. In 
addition, running an analyzer reveals that Row objects 
are never garbage collected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/73
HyperSQL Database Engine (HSQLDB) / Bugs / #73 Shutdown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Im trying to use HSQL. I've configured it and it seems to meet my needs in all but one respect.
I'd like to create a JRun-style admin tool which allows the user to start and stop the database 
server at the click of a button. I've done this with McKoi, another Java database. 
The problem I'm having with HSQL is restarting the database server after the user has shut it 
down. The SQL &quot;Shutdown&quot; command appears to mean something other than shutdown for HSQL.
After issuing the shutdown command on it, attempting to restart it causes it to issue the 
following...
java.net.BindException: Address already in use: JVM_Bind
... and kill whatever process it's in. 
I'm no expert in this area but I think this is possibly an indication that the server port is still in use.
I think it might mean that the database never fully shuts down. This hurts me in the admin tool 
scenario because I'm running the database server as a thread within the admin tool process. When 
the above exception is thrown the entire admin tool process is killed. The user just sees his admin 
tool disappear. The exception is flagged, the user hits OK, the database dies and says I'm going to 
kill everybody near me. AAAAAAAAARRRRRRRRRRRGGGGGGGGHHHHH!!!!!!!!!
Any thoughts on this would be greatly appreciated.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/74
HyperSQL Database Engine (HSQLDB) / Bugs / #74 *must* fix logging w.r.t. object names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It has come to my attention that there are several 
outstanding issues w.r.t. case preservation, 
extraneous quotes corupting the log, etc.
My latest experiment shows that yet another case is 
not handled correctly
Say one issues the statement:
CREATE TABLE &quot;test&quot;&quot;er&quot;(ID INTEGER)
which is perfectly legal and reults in a table named:
test&quot;er
then the statement is logged as:
CREATE TABLE test&quot;er(ID INTEGER)
When the database is restarted, all statments 
pretaining to this table, of course, fail.
My suggestion is that (if we continue with the current 
log format) we should double-quote all object names in 
the log and escape internal double-quotes in the 
standard manner by doubling them, as in:
CREATE TABLE &quot;test&quot;&quot;er&quot;(&quot;ID&quot; INTEGER)
INSERT INTO &quot;test&quot;&quot;er&quot;(&quot;ID&quot;) VALUES(1)
...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/75
HyperSQL Database Engine (HSQLDB) / Bugs / #75 StringIndexOutOfBound Exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I got the following Exception with HSQL v1.61:
java.lang.StringIndexOutOfBoundsException: String 
index out of range: -7
at java.lang.String.substring(String.java:1503)
at org.hsqldb.Table.setIndexRoots
(Table.java:483)
at org.hsqldb.Database.processSet
(Database.java:1179)
at org.hsqldb.Database.execute
(Database.java:274)
at org.hsqldb.Log.runScript(Log.java:837)
at org.hsqldb.Log.open(Log.java:223)
at org.hsqldb.Database.&lt;init&gt;(Database.java:96)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:926)
at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
at java.sql.DriverManager.getConnection
(DriverManager.java:517)
at java.sql.DriverManager.getConnection
(DriverManager.java:146)
at com.ibm.ivj.eab.dab.DatastoreJDBC.connect
(DatastoreJDBC.java:255)
with the following database schema:
CREATE CACHED TABLE amov (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255),
dname VARCHAR (5) ,
mountext VARCHAR (255) ,
CONSTRAINT PK___8__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE dappli (
primkey CHAR (10) NOT NULL ,
pgname VARCHAR (255) ,
param VARCHAR (255) ,
CONSTRAINT PK___8__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE docfile (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255) ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE filedb (
primkey CHAR (10) NOT NULL ,
cod CHAR (1),
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
filename VARCHAR (255) ,
data LONGVARBINARY ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE mailfile (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255) ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE maildb (
primkey CHAR (10) NOT NULL , 
cod CHAR (1), 
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
filename VARCHAR (255) ,
data LONGVARBINARY ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE docurl (
primkey CHAR (10) NOT NULL ,
urlstr VARCHAR (255) NOT NULL ,
CONSTRAINT PK___9__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE hierar (
elemkey CHAR (10) NOT NULL ,
parekey CHAR (10) ,
chilnb INT ,
sallekey CHAR (10) ,
armkey CHAR (10) ,
doskey CHAR (10) ,
claskey CHAR (10) ,
interkey1 CHAR(10),
interkey2 CHAR(10),
interkey3 CHAR(10),
interkey4 CHAR(10),
interkey5 CHAR(10),
interkey6 CHAR(10),
interkey7 CHAR(10),
interkey8 CHAR(10),
foldkey CHAR (10) ,
creation date NOT NULL ,
modif date NOT NULL ,
lastacc date NOT NULL ,
tlastacc time NOT NULL,
dupcop date NOT NULL ,
tdupcop time NOT NULL ,
tmodif time NOT NULL ,
etat CHAR (1) NOT NULL ,
protacc CHAR (1) ,
CONSTRAINT PK___5__11 PRIMARY KEY (elemkey));
CREATE CACHED TABLE task (
primkey CHAR (10) NOT NULL ,
etat CHAR (1) NOT NULL ,
debut date NOT NULL ,
fin date NOT NULL ,
intitule VARCHAR (255) ,
description VARCHAR (255) ,
resultat VARCHAR (255) ,
CONSTRAINT PK___3__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE telem (
primkey CHAR (10) NOT NULL ,
type CHAR (1) NOT NULL ,
nicon SMALLINT NOT NULL,
name VARCHAR (255) NOT NULL ,
dirname VARCHAR (255) ,
typelem VARCHAR (40) ,
ref1 VARCHAR (40) ,
ref2 VARCHAR (40) ,
ref3 VARCHAR (40) ,
nbcont INT NOT NULL ,
postit VARCHAR (255) ,
objet VARCHAR (255) ,
modest CHAR (1) NOT NULL ,
cod CHAR (1) NOT NULL ,
CONSTRAINT PK___4__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE prgname (
configname CHAR (20) NOT NULL ,
extension CHAR (10) NOT NULL ,
directoryname VARCHAR (255) ,
filename VARCHAR (255) NOT NULL,
nicon SMALLINT NOT NULL ,
CONSTRAINT PK___7__11 PRIMARY KEY 
(configname,extension));
CREATE CACHED TABLE tacces (
primkey CHAR (10) NOT NULL ,
acckey CHAR (10) NOT NULL ,
urlnm VARCHAR (255) ,
CONSTRAINT PK___9__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE tusnber (
depcod CHAR (2) NOT NULL ,
usercod CHAR (3) NOT NULL ,
CONSTRAINT PK_tusnber_1__11 PRIMARY KEY(depcod));
CREATE CACHED TABLE tkeynber (
depcod CHAR (2) NOT NULL ,
usercod CHAR (3) NOT NULL ,
serialcod CHAR(5) NOT NULL,
CONSTRAINT PK_tkeynber_1__11 PRIMARY KEY
(depcod,usercod));
CREATE CACHED TABLE tperson (
type CHAR (1) ,
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
fonction VARCHAR (60) ,
company VARCHAR (60) ,
streetaddress VARCHAR (70) ,
zipcode VARCHAR (10) ,
city VARCHAR (30) ,
adstate VARCHAR (30) ,
country VARCHAR (30) ,
e_mail VARCHAR (70) ,
tel1 VARCHAR (20) ,
tel2 VARCHAR (20),
fax VARCHAR (20) ,
extension VARCHAR (6) ,
CONSTRAINT PK___2__11 PRIMARY KEY (name, 
firstname));
CREATE CACHED TABLE admbox (
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
elemkey CHAR (10) NOT NULL ,
type CHAR (1) NOT NULL ,
title VARCHAR (60) ,
CONSTRAINT PK_admbox_1__11 PRIMARY KEY 
(name,firstname,elemkey));
CREATE CACHED TABLE accesright (
elemkey CHAR (10) NOT NULL ,
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
typ CHAR (1) NOT NULL,
cod CHAR (1) NOT NULL,
lastacc date NOT NULL ,
tlastacc time NOT NULL ,
CONSTRAINT PK_right_1__11 PRIMARY KEY 
(elemkey,name,firstname));
CREATE CACHED TABLE author (
elemkey CHAR (10) NOT NULL ,
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
typ CHAR (1) NOT NULL,
titre VARCHAR (40),
e_mail VARCHAR (70) , 
maildate date , 
mailkey CHAR (10) ,
CONSTRAINT PK_author_1__11 PRIMARY KEY 
(elemkey,name,firstname,typ),
CONSTRAINT FK___8__11 FOREIGN KEY (elemkey) 
REFERENCES telem (primkey));
CREATE CACHED TABLE persongroup (
teamname VARCHAR (40) NOT NULL ,
teamfirstname VARCHAR (30) NOT NULL ,
membername VARCHAR (40) NOT NULL ,
memberfirstname VARCHAR (30) NOT NULL ,
notes VARCHAR (40),
CONSTRAINT PK_group_1__11 PRIMARY KEY (teamname, 
teamfirstname, membername, memberfirstname),
CONSTRAINT FK___4__11 FOREIGN KEY 
(teamname,teamfirstname) REFERENCES tperson 
(name,firstname),
CONSTRAINT FK___5__11 FOREIGN KEY 
(membername,memberfirstname) REFERENCES tperson 
(name,firstname));
CREATE CACHED TABLE taskelem (
elemkey CHAR (10) NOT NULL ,
taskkey CHAR (10) NOT NULL ,
CONSTRAINT PK_taskelem_1__11 PRIMARY KEY 
(elemkey,taskkey),
CONSTRAINT FK___1__11 FOREIGN KEY (taskkey) 
REFERENCES task (primkey),
CONSTRAINT FK_taskelem_2__11 FOREIGN KEY (elemkey) 
REFERENCES telem (primkey));
CREATE CACHED TABLE taskpers (
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
typ CHAR (1) NOT NULL,
taskkey CHAR (10) NOT NULL ,
etat CHAR (1) NOT NULL,
CONSTRAINT PK_taskpers_1__11 PRIMARY KEY
(taskkey,name,firstname),
CONSTRAINT FK___2__11 FOREIGN KEY (taskkey) 
REFERENCES task (primkey));
CREATE CACHED TABLE userconfig (
name CHAR (40) NOT NULL ,
firstname CHAR (30) NOT NULL ,
depcod CHAR (2) NOT NULL ,
usercod CHAR (3) NOT NULL,
bcasekey CHAR (10) NOT NULL ,
bcase1key CHAR (10) NOT NULL ,
trashkey CHAR (10) NOT NULL ,
homekey CHAR (10) NOT NULL,
rmailkey CHAR (10) NOT NULL ,
smailkey CHAR (10) NOT NULL ,
logsmailkey CHAR (10) NOT NULL ,
panel1 CHAR (10) ,
panel2 CHAR (10) ,
panel3 CHAR (10) ,
panel4 CHAR (10) ,
panel5 CHAR (10) ,
modest CHAR NOT NULL ,
cod CHAR NOT NULL ,
useright INT NOT NULL ,
basedir VARCHAR (255) ,
configname CHAR (20) ,
ckey VARCHAR (50) NOT NULL ,
mailuserid VARCHAR (40),
mailpsw VARCHAR (50) , 
mailstorser VARCHAR (70),
mailtransser VARCHAR (70), 
mailstorprot CHAR(10),
mailtransprot CHAR(10),
mailstorclas VARCHAR(70), 
mailtransclas VARCHAR (70),
edition CHAR(10) ,
rfu CHAR(10) ,
CONSTRAINT PK___1__10 PRIMARY KEY (name,firstname));
CREATE CACHED TABLE tquery (
queryname VARCHAR (150) NOT NULL , 
name VARCHAR (40) NOT NULL , 
firstname VARCHAR (30) NOT NULL , 
display CHAR (1) NOT NULL , 
querystring1 VARCHAR (255) NOT NULL , 
querystring2 VARCHAR (255) , 
querystring3 VARCHAR (255) , 
querystring4 VARCHAR (255) , 
CONSTRAINT PK_tquery_1__11 PRIMARY KEY ( queryname, 
name, firstname));
To reproduce the exception:
1- Launch database Manager and execute all the CREATE 
SQL commands to create the database
2 - Quit Database Manager
3 - Launch Database Manager again and connect to the 
database just created. 
Could you help me ?
Thanks a lot.
Rene Levantinh
visual@club-internet.fr
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/76
HyperSQL Database Engine (HSQLDB) / Bugs / #76 SHUTDOWN fails under JVM 1.4.0. beta 3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issuing a SHUTDOWN command to the database does not 
shut it down under version 1.4.0 beta 3 of the JVM.
The server just hangs in some sort of limbo state 
where the server is not accepting queries but is not 
actually shut down either. SHUTDOWN works fine under 
JVMs 1.3.0 and 1.3.1.
Sometimes, SHUTDOWN will work after repeated attempts 
to shutdown/connect to the server from a client.
When this eventually happens, (if run with &quot;-silent 
false&quot;) the message &quot;The database is shutdown&quot; is 
issued once for each time you attempted to shutdown 
the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/77
HyperSQL Database Engine (HSQLDB) / Bugs / #77 ABS function unknown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
unknown function: ABS
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/78
HyperSQL Database Engine (HSQLDB) / Bugs / #78 right join throws SQLException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SEE:
http://sourceforge.net/forum/forum.php?
thread_id=643937&amp;forum_id=73674
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/79
HyperSQL Database Engine (HSQLDB) / Bugs / #79 Parser error in nested query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version : HSQLdb1.61
The parser has some problems with nested queries that 
are combined via 'where in'
try the following :
create table t(id integer not null, name char)
create table u(id integer not null, name char)
insert into u values(1,'Jim')
insert into u values(2,'Pete')
insert into t select * from u where u.id in (select 
u.id from u where u.id=1)
Gives as result :
SQL 
Error 
Column not found: ID in statement [insert into t 
select * from u where u.id in (select u.id from u 
where u.id=1)] / Error Code: 0 / State: S0022 
while
select u.id from u where u.id=1
and
insert into t select * from u where u.id in(1,36)
work both fine.
By the way,
I could work around the problem by rewriting the query.
Alexander
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/80
HyperSQL Database Engine (HSQLDB) / Bugs / #80 Compatability Issues in J2SDK1.4.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
assert is now a keyword within Java2 v1.4.0 and so 
the program will no longer compile.
Thanks
J
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/81
HyperSQL Database Engine (HSQLDB) / Bugs / #81 Updates not being applied
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I send an SQL Update command using executeUpdate
(), I do not get a JDBC error, but the updates are not 
applied. I am issing a commit after the SQL Update.
If close the JDBC connection, or issue a CHECKPOINT, 
the update is applied.
Any ideas?
Thanks,
Dave Connerth
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/82
HyperSQL Database Engine (HSQLDB) / Bugs / #82 Literals in SELECT, not enough results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 1.61
I'm trying to insert data using a INSERT INTO ... 
SELECT ... GROUP BY ... statement. As part of the 
statement, I need literal values. If the literals are 
placed before a SUM() expression, I only get a single 
row returned. If after the expression, I get how every 
many the SUM() returns. MSSQL returns the same number 
in either case.
Example:
create table x ( oid integer, value integer );
insert into x values ( 1, 1 );
insert into x values ( 1, 2 );
insert into x values ( 1, 3 );
insert into x values ( 2, 1 );
insert into x values ( 2, 2 );
insert into x values ( 2, 3 );
select sum(value) from x
group by oid;
3
1
4
3
1
select 'x', sum(value) from x
group by oid
12
select sum(value), 'x' from x
group by oid
3 x
1 x
4 x
3 x
1 x
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/83
HyperSQL Database Engine (HSQLDB) / Bugs / #83 GROUP BY returns row of NULLs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using a INSERT INTO ... SELECT ... GROUP BY ...
statement. Getting 'Cannot insert NULL' when SELECT
should return nothing. It appears that the GROUP BY
clause causes the SELECT return a row of NULLs when 
nothing is found.
eg.
create table x ( oid integer );
select oid
from x;
OID
---------
&lt;nothing&gt;
select oid
from x
group by oid;
OID
------
(null)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/84
HyperSQL Database Engine (HSQLDB) / Bugs / #84 Index names not local to table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1.7.0 RC 1 alpha
CREATE TABLE x ( oid INTEGER, value VARCHAR(80) );
CREATE TABLE y ( oid INTEGER, value VARCHAR(80) );
CREATE INDEX name_index on x ( value );
-- OK
CREATE INDEX name_index on y ( value );
-- Index already exists: S0011 ...
This problem did not exist in 1.61!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/85
HyperSQL Database Engine (HSQLDB) / Bugs / #85 probs with CodeSwitcher
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to run CodeSwitcher to switch to JDK11 on
hsqldb_v_1_70_RC1alfa
(I am not sure whether it is still allowed to use
CodeSwitcher. I havent installed Ants yet.)
I got the following errors:
~/hypersonicsql/hsqldb_v_1_70_RC1alfa&gt; java -classpath
$CLASSPATH:. org.hsqldb.util.CodeSwitcher . -JAVA2
-TRACE -TRACESYSTEMOUT
................................
ERROR: '#endif' without '#ifdef'
in file ./org/hsqldb/jdbcResultSet.java !
..........................................
ERROR: '#ifdef' not allowed inside '#ifdef'
in file ./org/hsqldb/util/Transfer.java !
.....
And there is a double //#endif JAVA2 in line 1263 of
jdbcResultSet.java.
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/86
HyperSQL Database Engine (HSQLDB) / Bugs / #86 multiple null values violate unique cons
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As far as I know, NULL values should not be considered
when checking if an insert satisfies the unique
constraints defined on a table. For instance:
create table test (
x integer not null primary key,
y integer,
constraint uniq_y unique (y)
)
The following should be allowed:
insert into test(x, y) values (1, null)
insert into test(x, y) values (2, null)
However, with hsqldb (v 1.61), the second insert fails
because of the unique constraint on y. 
Will this be corrected in a future version?
Kind regards,
Tijmen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/87
HyperSQL Database Engine (HSQLDB) / Bugs / #87 NullPointerException in getBinaryStream
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to access a column that has been set to NULL
with getBinaryStream, I get a NullPointerException.
Obviously HSQLDB tries to create a ByteArrayInputStream
from a null-Pointer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/88
HyperSQL Database Engine (HSQLDB) / Bugs / #88 compile errors with J2SDK 1.4.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
with hsqldb 1.61 and J2SDK 1.4.0, I did the following
steps:
1. ant switchtojdk11 - no problem
2. ant -verbose jar
Ant version 1.4.1 compiled on October 11 2001
Buildfile: build.xml
Detected Java version: 1.4 in: /usr/lib/j2sdk1.4.0/jre
Detected OS: Linux
parsing buildfile
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/build.xml
with URI =
file:/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/build.xml
Project base dir set to:
/home/ulrivo/hypersonicsql/hsqldb_v.1.61
Build sequence for target `jar' is [init, prepare,
classes, jar]
Complete build sequence is [init, prepare, classes,
jar, codeswitcher, switchtojdk12, switchtojdk11, help,
clean, cleanall]
init:
prepare:
classes:
Property ${build.debug} has not been set
Property ${build.optimize} has not been set
[javac] hsqlServlet.java added as
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes/hsqlServlet.class
is outdated.
....[ the list of outdated files] ....
[javac] org/hsqldb/util/TriggerSample.java added as
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes/org/hsqldb/util/TriggerSample.class
is outdated.
[javac] Compiling 54 source files to
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes
[javac] Using modern compiler
[javac] Compilation args: -d
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes
-classpath
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes:/home/ulrivo/hypersonicsql/hsqldb_v.1.61:/home/ulrivo/hypersonicsql/hsqldb_v.1.61/lib:/usr/local/jakarta-ant-1.4.1/lib/jaxp.jar:/usr/local/jakarta-ant-1.4.1/lib/crimson.jar:/usr/local/jakarta-ant-1.4.1/lib/ant.jar:/usr/lib/java:/usr/lib/java/lib/tools.jar
-sourcepath
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src -g:none
[javac] Files to be compiled:
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/hsqlServlet.java
....[ the list of files to be compile ] ....
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/util/TriggerSample.java
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/Cache.java:382:
warning: as of release 1.4, assert is a keyword, and
may not be used as an identifier
[javac] Trace.assert(!r.bChanged);
[javac] ^
.... [ and a lot of error messages more concerning
Trace] ....
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcConnection.java:76:
org.hsqldb.jdbcConnection should be declared abstract;
it does not define createStatement(int,int) in
org.hsqldb.jdbcConnection
[javac] public class jdbcConnection implements
Connection {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcResultSet.java:95:
org.hsqldb.jdbcResultSet should be declared abstract;
it does not define getColumnClassName(int) in
org.hsqldb.jdbcResultSet
[javac] public class jdbcResultSet implements
ResultSet, ResultSetMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcDatabaseMetaData.java:61:
org.hsqldb.jdbcDatabaseMetaData should be declared
abstract; it does not define supportsResultSetType(int)
in org.hsqldb.jdbcDatabaseMetaData
[javac] public class jdbcDatabaseMetaData
implements DatabaseMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcStatement.java:53:
org.hsqldb.jdbcStatement should be declared abstract;
it does not define setFetchDirection(int) in
org.hsqldb.jdbcStatement
[javac] public class jdbcStatement implements
Statement {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcPreparedStatement.java:115:
org.hsqldb.jdbcPreparedStatement should be declared
abstract; it does not define getBigDecimal(int) in
org.hsqldb.jdbcPreparedStatement
[javac] public class jdbcPreparedStatement extends
jdbcStatement
[javac] ^
[javac] Note: Some input files use or override a
deprecated API.
[javac] Note: Recompile with -deprecation for
details.
[javac] 5 errors
[javac] 37 warnings
BUILD FAILED
Same error messages appear when I did in advance
ant switchtojdk12
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/89
HyperSQL Database Engine (HSQLDB) / Bugs / #89 no compile for JDK11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I tried with hsqldb 1.61 and JDK 1.3
ant switchtojdk11
ant jar
and got the following error messages:
Buildfile: build.xml
init:
prepare:
classes:
[javac] Compiling 54 source files to
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcConnection.java:76:
org.hsqldb.jdbcConnection should be declared abstract;
it does not define createStatement(int,int) in
org.hsqldb.jdbcConnection
[javac] public class jdbcConnection implements
Connection {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcResultSet.java:95:
org.hsqldb.jdbcResultSet should be declared abstract;
it does not define getColumnClassName(int) in
org.hsqldb.jdbcResultSet
[javac] public class jdbcResultSet implements
ResultSet, ResultSetMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcDatabaseMetaData.java:61:
org.hsqldb.jdbcDatabaseMetaData should be declared
abstract; it does not define supportsResultSetType(int)
in org.hsqldb.jdbcDatabaseMetaData
[javac] public class jdbcDatabaseMetaData
implements DatabaseMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcStatement.java:53:
org.hsqldb.jdbcStatement should be declared abstract;
it does not define setFetchDirection(int) in
org.hsqldb.jdbcStatement
[javac] public class jdbcStatement implements
Statement {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcPreparedStatement.java:115:
org.hsqldb.jdbcPreparedStatement should be declared
abstract; it does not define getBigDecimal(int) in
org.hsqldb.jdbcPreparedStatement
[javac] public class jdbcPreparedStatement extends
jdbcStatement
[javac] ^
[javac] Note: Some input files use or override a
deprecated API.
[javac] Note: Recompile with -deprecation for
details.
[javac] 5 errors
BUILD FAILED
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/90
HyperSQL Database Engine (HSQLDB) / Bugs / #90 setProperty() in Log.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
just as a reminder:
There is still the quick hack for version 1.61 in the
code of 1.70 at line 182: setProperty() which is not
defined for JDK 1.1
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/91
HyperSQL Database Engine (HSQLDB) / Bugs / #91 IF EXISTS in hsqldb 1.70
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to submit
DROP TABLE foo IF EXISTS
leads to
SQL
Error 
Unexpected token: IF in statement [DROP TABLE Bad IF
EXISTS] / Error Code: 0 / State: 37000 
or without a defined table foo to
Table not found: FOO in statement [DROP TABLE foo IF
EXISTS] / Error Code: 0 / State: S0002 
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/92
HyperSQL Database Engine (HSQLDB) / Bugs / #92 SUM() + GROUP BY give unwanted NULL rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Similar to previously raised bug re: GROUP returning a 
single row of NULL(s) when its corresponding SELECT 
returns nothing.
Although 1.7 RC 2 fixes that bug, the following causes 
the same problem:
CREATE TABLE x ( oid INTEGER );
SELECT oid FROM x GROUP By oid;
OID
---
&lt;nothing&gt;
SELECT SUM(oid) FROM x GROUP By oid;
OID
---
NULL
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/93
HyperSQL Database Engine (HSQLDB) / Bugs / #93 Transfer corrupted / Error Code: -19 / State:40001
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
v1.7 RC1 &amp; RC2 both have the following bug:
Operating in client/server mode on localhost
After executing the select statement
select id, code, name, administrator_yn from dj_users 
order by code
I get an exception:
Transfer corrupted / Error Code: -19 / State: 40001
java.sql.SQLException: Transfer corrupted
at org.hsqldb.Trace.getError(Trace.java:205)
at org.hsqldb.Trace.error(Trace.java:256)
at org.hsqldb.Result.&lt;init&gt;(Result.java:176)
at org.hsqldb.jdbcConnection.executeHSQL
(jdbcConnection.java:1007)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:815)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:741)
at org.hsqldb.jdbcStatement.executeQuery
(jdbcStatement.java:125)
at 
org.hsqldb.jdbcPreparedStatement.executeQuery
(jdbcPreparedStatement.java:196)
If I leave out the order by it works OK.
The table was created with the following script:
CREATE CACHED TABLE dj_users (
id decimal(15, 0) NOT NULL ,
code varchar (30) NOT NULL ,
name varchar (50) NOT NULL ,
administrator_yn varchar (1) NOT NULL
,CONSTRAINT PK_dj_users PRIMARY KEY
(
id
)
);
-----
You can reproduce the error by executing the table 
create, and then
insert into dj_users (id, code, name, administrator_yn)
values (1, 'sa', 'admin', 'Y');
followed by
select * from dj_users order by code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/94
HyperSQL Database Engine (HSQLDB) / Bugs / #94 delete problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i tried to use HSQLDB 1.7.0..
there was a delete problem.
when i restart the HSQLDB Server after i delete rows,
all the rows which have the same data were deleted.
for example,
there were rows like below:
no name
1 car
2 plain
2 plain 
i deleted the second row only.
i looked i did work fine.
but when i reatsrted the server ,
the rows were changed like below:
no name
1 car
two rows were deleted which have the same data.
colud you please consider of this problem...?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/95
HyperSQL Database Engine (HSQLDB) / Bugs / #95 V1.70RC3: build error with jdk 1.1.8 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I downloaded v1.70RC3 and found the new build.xml great
(thanx to Fred).
The build runs without any problems with 
java version &quot;1.3.0&quot;
Java(TM) 2 Runtime Environment, Standard Edition (build
1.3.0)
Classic VM (build 1.3.0, J2RE 1.3.0 IBM build
cx130-20000623 (JIT enabled: jitc))
and without problems with
java version &quot;1.4.0&quot;
Java(TM) 2 Runtime Environment, Standard Edition (build
1.4.0-b92)
Java HotSpot(TM) Client VM (build 1.4.0-b92, mixed
mode)
But, I got an error when building for/with JDK 1.1.8
under Linux:
-------------------------------------------------------------
ulrivo@ulrivo:~/hypersonicsql/v170rc3/build&gt; ant
-verbose jar
Ant version 1.4.1 compiled on October 11 2001
Buildfile: build.xml
Detected Java version: 1.1 in: /usr/lib/java
Detected OS: Linux
parsing buildfile
/home/ulrivo/hypersonicsql/v170rc3/build/build.xml with
URI =
file:/home/ulrivo/hypersonicsql/v170rc3/build/build.xml
Project base dir set to:
/home/ulrivo/hypersonicsql/v170rc3
Build sequence for target `jar' is [init, javaversion,
prepare, util, codeswitcher, switchtojdk11,
switchtojdk12, switchtojdk14, classes12, classes14,
classes, jar]
Complete build sequence is [init, javaversion, prepare,
util, codeswitcher, switchtojdk11, switchtojdk12,
switchtojdk14, classes12, classes14, classes, jar,
preparedoc, javadoc, test, jartest, clean, cleanall,
help, jarmain]
init:
javaversion:
[available] Unable to load class java.util.Set to set
property ant.java.iscjava12
[available] Unable to load class java.nio.Buffer to set
property ant.java.iscjava14
prepare:
[mkdir] Created dir:
/home/ulrivo/hypersonicsql/v170rc3/classes
util:
Property ${build.debug} has not been set
Property ${build.optimize} has not been set
[javac] CodeSwitcher.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/CodeSwitcher.class
doesn't exist.
[javac] ConnectionDialog.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/ConnectionDialog.class
doesn't exist.
[javac] DatabaseManager.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/DatabaseManager.class
doesn't exist.
[javac] Grid.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/Grid.class
doesn't exist.
[javac] jdbcSystem.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/jdbcSystem.class
doesn't exist.
[javac] QueryTool.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/QueryTool.class
doesn't exist.
[javac] ScriptTool.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/ScriptTool.class
doesn't exist.
[javac] Transfer.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/Transfer.class
doesn't exist.
[javac] Tree.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/Tree.class
doesn't exist.
[javac] Compiling 9 source files to
/home/ulrivo/hypersonicsql/v170rc3/classes
[javac] Using classic compiler
[javac] Compilation args: -d
/home/ulrivo/hypersonicsql/v170rc3/classes -classpath
/home/ulrivo/hypersonicsql/v170rc3/classes:/usr/local/jakarta-ant-1.4.1/lib/jaxp.jar:/usr/local/jakarta-ant-1.4.1/lib/crimson.jar:/usr/local/jakarta-ant-1.4.1/lib/ant.jar:/home/ulrivo/hypersonicsql/v170rc3:/usr/lib/java:/usr/lib/java/lib/classes.zip:/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util
[javac] Files to be compiled:
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/CodeSwitcher.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/ConnectionDialog.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/DatabaseManager.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Grid.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/jdbcSystem.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/QueryTool.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/ScriptTool.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Tree.java
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/jdbcSystem.java:88:
Method setLogWriter(java.io.PrintWriter) not found in
class java.sql.DriverManager.
[javac] 
DriverManager.setLogWriter(newPrintWriter);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:307:
No variable ARRAY defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.ARRAY), &quot;ARRAY&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:308:
No variable BLOB defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.BLOB), &quot;BLOB&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:309:
No variable CLOB defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.CLOB), &quot;CLOB&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:310:
No variable DISTINCT defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.DISTINCT), &quot;DISTINCT&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:311:
No variable JAVA_OBJECT defined in class
java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.JAVA_OBJECT), &quot;JAVA_OBJECT&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:312:
No variable REF defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.REF), &quot;REF&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:313:
No variable STRUCT defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.STRUCT), &quot;STRUCT&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:1653:
No variable BLOB defined in class java.sql.Types.
[javac] if (t == Types.BLOB) {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:1654:
Class org.hsqldb.util.Blob not found in type
declaration.
[javac] Blob b = r.getBlob(i + 1);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:1654:
Method getBlob(int) not found in interface
java.sql.ResultSet.
[javac] Blob b = r.getBlob(i + 1);
[javac] ^
[javac] Note: 3 files use deprecated APIs. 
Recompile with &quot;-deprecation&quot; for details.
[javac] 11 errors, 1 warning
BUILD FAILED
--------------------------------
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/96
HyperSQL Database Engine (HSQLDB) / Bugs / #96 GROUP BY with ORDER BY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
after inserting the test data in DatabaseManager, I
submitted the
following query:
select productid, name, sum(quantity)
from position, product
where productid = id
group by productid
order by name
But, the result set is NOT ordered by name.
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/97
HyperSQL Database Engine (HSQLDB) / Bugs / #97 Int &amp; Double problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: hsqldb_v.1.61.
Here is script
CREATE TABLE sometable ( int_col INTEGER, doub_col 
DOUBLE );
INSERT INTO sometable ( int_col, doub_col ) VALUES ( 
2, 4.0 );
UPDATE sometable SET doub_col=int_col/2.0 WHERE 
int_col=2;
which cause a problem:
java.lang.NumberFormatException: 2.0
at java/lang/Integer.parseInt
at java/lang/Integer.&lt;init&gt;
at org/hsqldb/Column.convertString
at org/hsqldb/Expression.getValue
at org/hsqldb/Expression.getValue
at org/hsqldb/Expression.getValue
at org/hsqldb/Parser.processUpdate
at org/hsqldb/Database.execute
at org/hsqldb/jdbcConnection.execute
at org/hsqldb/jdbcStatement.fetchResult
at org/hsqldb/jdbcStatement.execute
at org/hsqldb/util/DatabaseManager.execute
at 
org/hsqldb/util/DatabaseManager.actionPerformed
at java/awt/Button.processActionEvent
at java/awt/Button.processEvent
at java/awt/Component.dispatchEventImpl
at java/awt/Component.dispatchEvent
at java/awt/EventDispatchThread.run
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/98
HyperSQL Database Engine (HSQLDB) / Bugs / #98 ASC / DESC  with DISTINCT does not work.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ASC / DESC functions when used with DISTINCT have 
no effect. 
To reproduce..
SELECT DISTINCT x FROM y ORDER BY z ASC;
or
SELECT DISTINCT x FROM y ORDER BY z DESC;
This bug seems to have been present for quite some 
time, and hopefully will be fixed with 1.7.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/99
HyperSQL Database Engine (HSQLDB) / Bugs / #99 server.properties file not accessed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
server.properties file is not loaded.
I downloaded 1.7 release candidate to work on long var 
strings. Database would not read our current script 
file because the server.properties file was being 
ignored.
Recommend modifying Server.java to load properties 
from server.properties.
1. change &quot;server.properties&quot; to &quot;server&quot;
2. add serverProperties.load();
Code fragments:
//Current Server.java:
void setProperties(HsqlProperties props) {
serverProperties = new HsqlServerProperties
(&quot;server.properties&quot;);
serverProperties.addProperties(props);
//Suggested Server.java
void setProperties(HsqlProperties props) {
serverProperties = new HsqlServerProperties
(&quot;server&quot;);
try{
serverProperties.load();
}catch(Throwable theError){
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/100
HyperSQL Database Engine (HSQLDB) / Bugs / #100 Win2000 - Multi-byte char. issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL latest stable version is garbling the multi-byte 
characters in the following scenario.
Platform:
Win2000 Japanese Edition
1. Start HSQL server by using runHSQLDB.bat.
2. Start Database manager by using &quot;run 
DatabaseManager&quot;.
+ HSQL :Standalone DB or WebServer DB
+ URL : jdbc:hsqldb:http://localhost:9001
3. Insert a data with Japanese character into any 
sample table,say, EMPLOYEE.
4. Check the table data by using &quot;SELECT * FROM 
EMPLOYEE&quot;. The data has no problem till now.
5. Stop the Server and Database manager.
6. Re-start the Server and Database manager (Same 
as 1 and 2).
7. Check the table of EMPLOYEE.
The first multi-byte character has changed to 
unicode as &quot;\uxxxx&quot; format. 
This is reproducible always and is happening 
continuosly. Please contact me at 
sanjayag@india.hp.com for more details.
Thanks
Sanjay
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/101
HyperSQL Database Engine (HSQLDB) / Bugs / #101 jdbcConnection.getAutoCommit broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
jdbcConnection.getAutoCommit fails to take into 
account SET AUTOCOMMIT statments, reflecting only the 
last value passed to jdbcConnection.setAutoCommit.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/102
HyperSQL Database Engine (HSQLDB) / Bugs / #102 Wrong update decomposition in script
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I recently installed the hsqldb 1.7.0RC3. After some 
time of testing/using it I found the following bug (?):
In some cases (couldn't find out under which 
circumstances exactly) when hsqldb writes the UPDATE 
command into the script file and decomposes it into 
DELETE, INSERT sequence, it distorts the WHERE clause. 
This happens in the following way: it compares the 
correct column, but with incorrect value, ie. with 
value of the first updated column (or the first column 
in the table definition?). As the value is of 
different type, the next time hsqldb is started, it
throws the &quot;java.sql.SQLException: Unexpected token: 
37000 Unexpected token: 08&quot; exception.
Here is some example:
This command is called upon hsqldb server (hsqldb 
console printout):
3:UPDATE custom_kniekniha SET evidence = '966', autor 
= 'Osif Michal', nazev =
'Windows 95', keywords = 'Windows 95', dat_vydani 
= '1955', dat_porizeni = '
1996', cena = '161,90', poznamka = 'pokus', p_read 
= 'transoft', p_modify = 'k
nihovna', g_muser='ts.martin', g_mdatetime = '2002-04-
09 09:36:14.6', g_deleted
= 0 WHERE id=16
And these are corresponding rows from the script file:
/*C4*/DELETE FROM CUSTOM_KNIEKNIHA WHERE ID=2002-03-26 
08:20:41.0
INSERT INTO CUSTOM_KNIEKNIHA VALUES('2002-04-09 
09:36:14.6',16,'1996','knihovna','transoft','966','Wind
ows 95','Windows 95','161,90','Osif 
Michal','1955',0,'ts.martin','pokus')
Martin Stepanek
(abrasax@wo.cz)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/103
HyperSQL Database Engine (HSQLDB) / Bugs / #103 Connection reset by peer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In client/server mode of RC4:
When my client closes the connection (and then 
terminates) I get the following exception on the 
server side console:
java.net.SocketException: Connection reset by peer: 
JVM_recv in socket input stream read
at java.net.SocketInputStream.socketRead
(Native Method)
at java.net.SocketInputStream.read
(SocketInputStream.java:86)
at java.io.BufferedInputStream.fill
(BufferedInputStream.java:186)
at java.io.BufferedInputStream.read
(BufferedInputStream.java:204)
at java.io.DataInputStream.readInt
(DataInputStream.java:338)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:163)
at java.lang.Thread.run(Thread.java:484)
This is new in RC4, the previous RC's did not have 
this trace.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/104
HyperSQL Database Engine (HSQLDB) / Bugs / #104 bug in reading LONGVARCHAR
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JavaDocs in jdbcResultSet.getAsciiStream says:
&quot;This method is particularly suitable for retrieving 
large LONGVARCHAR values.&quot;
getAsciiStream makes internal call to getUnicodeStream
and here is the definition of that method:
public InputStream getUnicodeStream(int column) 
throws SQLException {
return new ByteArrayInputStream(getBytes
(column));
}
Now the source of getBytes method:
public byte[] getBytes(int column) throws 
SQLException {
Object o = getColumnInType(--column, 
Types.BINARY);
return o == null ? null
: ((ByteArray) o).byteValue();
}
Did you saw the problem?
When I try to invoke getAsciiStream it will throw 
SQLException because I'll try to field, defined as 
LONGVARCHAR but I'm actually reading it as BINARY.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/105
HyperSQL Database Engine (HSQLDB) / Bugs / #105 SELECT -- an invisible value?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've encountered a strange behavior of hsqldb, first 
in the RC3, but I didn't pay attention to it then. Now 
with the hsqldb 1.7.0RC4a, I have to face it again and 
I believe, it's a bug.
I have a table Hierarchy with a column named Path. One 
of the rows in this table has Path='/intranet'. When I 
execute the following query:
SELECT * FROM Hierarchy WHERE Path='/intranet'
I get an empty result set.
However, when I use the LIKE clause:
SELECT * FROM Hierarchy WHERE Path LIKE '/intranet%'
I get really all the paths beginning with '/intranet', 
including the '/intranet' one.
It seems like the string '/intranet' would have added 
some invisible character(s) in the end, but this can't 
be the case, bacause of the result of the following 
query:
SELECT LENGTH(Path) FROM Hierarchy WHERE Path 
LIKE '/intranet%'
which is 9 for '/intranet'.
Please, consider the possible sources of this. I can 
send the database on demand (I don't wanna to send it 
here to public).
Thanks
Martin Stepanek
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/106
HyperSQL Database Engine (HSQLDB) / Bugs / #106 Subselect error with same column names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This was sent to me by David Moles and applies to 1.61 
and to all RC releases of 1.7.0 up to RC4. (has not 
yet been fixed):
I discovered another interesting quirk. Say I have the
following two tables:
create table trees
(
id integer primary key,
name varchar not null
);
create table fruits
(
id integer primary key,
name varchar not null,
tree_id integer not null,
foreign key (tree_id) references trees(id)
);
And say further that I have the following records:
insert into trees (id, name) values (1, 'apple');
insert into fruits (id, name, tree_id) values 
(1, 'pippin', 1);
insert into fruits (id, name, tree_id) values 
(2, 'granny smith, 1);
If I do the following query:
select id from fruits where tree_id in
(select id from trees where name = 'apple');
I get no records. But if I change it to:
select id from fruits where tree_id in
(select id from trees where trees.name = 'apple');
It works, and I get 2 records, same as if I just id
select id from fruits where tree_id = 1;
or even
select id from fruits where tree_id in (1);
Apparently, the problem is some kind of collision 
between fruits.name and trees.name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/107
HyperSQL Database Engine (HSQLDB) / Bugs / #107 Duplicate index names rejected
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have just downloaded hsqldb version 1.7rc4a. 
I notice that I may not create indexes with duplicate 
names. This behaviour is different to the previous 
version of hsqldb that I was using (1.6) where I could 
do just that. I am attempting to do this through the 
database manager application supplied.
So, the following will work in 1.6, but not in 1.7rc4a:
create table foo (col1 int)
create table bar (cola varchar)
create index ix1 on foo (col1)
create index ix1 on bar (cola)
The error message is:
Index already exists: S0011 Index already exists: IX1 
in statement [create index ix1 on bar(cola)]/Error 
Code: -23/State: S0011
Chris Cockrell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/108
HyperSQL Database Engine (HSQLDB) / Bugs / #108 Trouble with Jakarta Avalon Apps 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've tried to simply upgrade the jakarta avalon apps
from the 1.6 to the last release (1.7RC5pre2) and I'm
getting some troubles with the
HsqlSocketRequestHandler.handleConnection(socket);
It seems that the SocketHandler doesnt handle the
connection...
Here is a short synospis of the code:
m_DatabaseName =
&quot;C:\JabberServer\apps\avalon-hsql\JabberDB&quot;;
m_HsqlSocketRequestHandler =
HsqlServerFactory.createHsqlServer(m_DatabaseName,
true, false);
// I get the usual &quot;server.properties not found, using
command line or default properties&quot; ...
/// ... (avalon stuff here, to get a socket listener) ...
m_HypersonicSocketRequestHandler.handleConnection(socket);
When I use a client with server jdbc connection, the
connection process get thru the 'handleConnection' but
I get a &quot;Connection is broken&quot; in the demo/runManager.
Also when I use the demo/runServer with the runManager
its works.
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/109
HyperSQL Database Engine (HSQLDB) / Bugs / #109 Server mode &amp;  Access denied
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Good evening from France,
My web app opens a connection to an existing Hsqldb 
database (server mode, hsql protocol).
But when a query is executed, I get the 
SQLException &quot;Access denied&quot;. I don't understand why 
because I've kept &quot;sa&quot; as username and &quot;&quot; as password
bertrand
(rougierb@users)
NB : another class creates and fills the Hsql DB from 
Oracle but its execution is terminated before (and 
without error!)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/110
HyperSQL Database Engine (HSQLDB) / Bugs / #110 &quot;SELECT x.y AS z&quot; DOESNT WORK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Is there any reason why statements such as the 
following dont work properly?
SELECT CUSTOMER.NAME AS CNAME FROM CUSTOMER
The alias is completely ignored and the result is an 
error stating 'column CNAME not found'.
I cant find anything anywhere regarding this but i 
apolagise if i have missed something.
Regards,
Mark Raynes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/111
HyperSQL Database Engine (HSQLDB) / Bugs / #111 select count(distinct field) .... 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following request doesn't work :
select count(distinct O.ID) as COUNT from (...)
What I get :
Unexpected token: 37000 Unexpected token: DISTINCT in 
statement [select count(distinct O.ID) as COUNT from 
(...)
bertrand
(rougierb@users.sourceforge.net)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/112
HyperSQL Database Engine (HSQLDB) / Bugs / #112 Join-syntax documentation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using 1.7rc4a.
1/ The syntax documentation reads that the pattern of 
a tablelist in a SELECT statement is tableList: 
table [ { INNER | LEFT [OUTER] } JOIN table ON 
Expression ] [, ...] 
I may be reading it wrong, but that seems to imply 
that the 'OUTER' is optional in 'LEFT OUTER JOIN', but 
that is not accepted when I try it. I find that
'INNER JOIN' and 'LEFT OUTER JOIN' only are accepted.
Also, the error message reads:
Unexpected token: 37000 Unexpected token: corrent 
syntax is: OUTER JOIN table ON....
but using OUTER on its own is also rejected, so that 
is a little misleading.
2/ I also got the impression (from the source) that 
brackets could be used around the expression , so that 
either
... LEFT OUTER JOIN table on ( col_a = col_b) OR
... LEFT OUTER JOIN table on col_a = col_b 
could were acceptable. In fact only the second 
(without brackets) is accepted.
3/ This is just a question - am I correct in thinking 
that hsqldb intentionally only supports expressions of 
the type 'col_a = col_b' when specifying the join 
expression? When I try 'col_a &gt; col_b', for instance, 
that is rejected. Also, it seems that only ONE join 
expression of the form: 'col_a = col_b' can be made, 
and that 'col_a = col_b AND col_c = col_d' is not 
allowed. Is that intentional?
Thanks for your help
Chris Cockrell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/113
HyperSQL Database Engine (HSQLDB) / Bugs / #113 compile errors for jdk1.1.8 with v170rc5
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
when compiling v170rc5pre2, I got an error concerning
SwingCommon.java which should not be compiled for jdk
1.1.8
So, I changed line 118 from
&lt;exclude name=&quot;*Swing.java&quot;/&gt;
to
&lt;exclude name=&quot;*Swing*.java&quot;/&gt;
to exclude SwingCommon.java from being compiled.
But I got some more errors later, see the messages
below.
Regards,
Ulrich
cd /home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/
ant
-Dbuffer=/home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml
-emacs jar -find
/home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml 
Searching for
/home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml
...
Buildfile:
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml
init:
javaversion:
prepare:
codeswitcher:
switchtojdk11:
..........
switchtojdk12:
switchtojdk14:
util:
Compiling 22 source files to
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/classes
Note: 3 files use deprecated APIs. Recompile with
&quot;-deprecation&quot; for details.
1 warning
classes12:
classes14:
classes:
Compiling 8 source files to
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/classes
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcConnection.java:1702:
class org.hsqldb.Map is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Map.java&quot;.
public Map getTypeMap() throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4432:
Class java.util.Map not found in type declaration.
public Object getObject(int i, java.util.Map map)
throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4468:
class org.hsqldb.Ref is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Ref.java&quot;.
public Ref getRef(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4501:
class org.hsqldb.Blob is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Blob.java&quot;.
public Blob getBlob(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4534:
class org.hsqldb.Clob is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Clob.java&quot;.
public Clob getClob(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4567:
class org.hsqldb.Array is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Array.java&quot;.
public Array getArray(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4613:
Class java.util.Map not found in java.lang.Object
getObject(java.lang.String, org.hsqldb.Map).
return getObject(findColumn(colName), map);
^
2 errors, 5 warnings
BUILD FAILED
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml:153:
Compile failed, messages should have been provided.
Total time: 16 seconds
Compilation exited abnormally with code 1 at Fri May 10
20:39:58
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/114
HyperSQL Database Engine (HSQLDB) / Bugs / #114 DELETE fails ArrayIndexOutOfBoundsEx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb 1.7.0 RC5
CLIENT (Servlet) STACK TRACE:
java.sql.SQLException: General error: S1000 General 
error java.lang.ArrayIndexOutOfBoundsException in 
statement [DELETE FROM ADDRESSBOOK_CATEGORY WHERE 
USER_ID = 0 AND CATEGORY_ID = 1 ]
at org.hsqldb.Trace.getError(Trace.java:220)
at org.hsqldb.Result.(Result.java:154)
at org.hsqldb.jdbcConnection.executeHSQL
(jdbcConnection.java:2809)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:2524)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1795)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:227)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(jdbcPreparedStatement.java:419)
(a record with the specified key exists)
SERVER STACK TRACE:
java.lang.ArrayIndexOutOfBoundsException
at org.hsqldb.Index.comparePartialRowNonUnique
(Index.java:940)
at org.hsqldb.Index.findSimple(Index.java:572)
at org.hsqldb.Constraint.findFkRef
(Constraint.java:434)
at org.hsqldb.Table.checkCascadeDelete
(Table.java:1430)
at org.hsqldb.Table.delete(Table.java:1489)
at org.hsqldb.Parser.processDelete
(Parser.java:470)
at org.hsqldb.Database.execute
(Database.java:438)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:211)
at java.lang.Thread.run(Thread.java:536)
Table defs:
CREATE TABLE USER (
USER_ID INTEGER NOT NULL,
LOGIN_ID VARCHAR(128) NOT NULL,
USER_NAME VARCHAR(254) DEFAULT ' ' NOT NULL,
// some fields omitted...
CREATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
UPDATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
LAST_ACCESS_DATE TIMESTAMP,
CONSTRAINT ixuq_LOGIN_ID0 UNIQUE (LOGIN_ID),
PRIMARY KEY (USER_ID)
);
CREATE TABLE ADDRESSBOOK_CATEGORY (
USER_ID INTEGER NOT NULL,
CATEGORY_ID INTEGER DEFAULT '0' NOT NULL,
CATEGORY_NAME VARCHAR(60) DEFAULT '' NOT NULL,
PRIMARY KEY (USER_ID, CATEGORY_ID),
CONSTRAINT fk_ADRBKCAT1 FOREIGN KEY (USER_ID)
REFERENCES USER (USER_ID) ON DELETE CASCADE
);
CREATE TABLE ADDRESSBOOK (
USER_ID INTEGER NOT NULL,
ADDRESSBOOK_ID INTEGER NOT NULL,
CATEGORY_ID INTEGER DEFAULT '0' NOT NULL,
FIRST VARCHAR(64) DEFAULT '' NOT NULL,
LAST VARCHAR(64) DEFAULT '' NOT NULL,
// some fields omitted
NOTE VARCHAR(128) DEFAULT '' NOT NULL,
PRIMARY KEY (USER_ID, ADDRESSBOOK_ID),
CONSTRAINT fk_ADRBOOK1 FOREIGN KEY (USER_ID, 
CATEGORY_ID)
REFERENCES ADDRESSBOOK_CATEGORY 
(USER_ID, CATEGORY_ID) ON DELETE CASCADE
);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/115
HyperSQL Database Engine (HSQLDB) / Bugs / #115 ALTER TABLE ADD COLUMN modifies indexes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ALTER TABLE ADD COLUMN command seems to be 
modifying the definition of existing indexes on the 
table.
For example, create a table and an index:
CREATE CACHED TABLE TEST (PK BIGINT NOT NULL PRIMARY 
KEY, F1 INTEGER)
CREATE INDEX TESTF1 ON TEST(F1)
Then, add a column:
ALTER TABLE TEST ADD COLUMN F2 TIMESTAMP
Now, the definition of the index includes both 
columns F1 and PK.
If another column is added, PK is added to the index 
again:
ALTER TABLE TEST ADD COLUMN F3 VARCHAR(255)
Now, the index definition is TEST(F1, PK, PK). This 
results in an invalid index definition and the 
database cannot be opened.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/116
HyperSQL Database Engine (HSQLDB) / Bugs / #116 Swing - DatabaseManager &amp; Transfer Tool
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I could not get either the DataBaseManagerSwing or 
TransferSwing to work from the 1.70RC5 distribution 
jar file. I traced it down to the loading of the icon 
image in both classes. After commenting out the 
getIcon method call and rebuilding the jar, they both 
worked. The gif image in the distribution is also no 
good. I couldn't load it into any graphics program.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/117
HyperSQL Database Engine (HSQLDB) / Bugs / #117 Text Tables - 1.70 RC5
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've spent several hours debugging text table support 
in the 1.70 RC5 distribution. I was trying to create 
a temporary text table with the following statements:
create temp text table ImportTemp (f1 varchar, f2, 
varchar, f3 varchar)
set table ImportTemp source &quot;c:/temp/app/import.csv&quot;
When the set table statement was executed, it returned 
the following SLQException:
java.sql.SQLException: Table not found: S0002 Table 
not found in statement [set table ImportTemp 
source &quot;C:/temp/app/import.csv&quot;]
By removing &quot;temp&quot; from the create staement, all 
worked well.
I also noticed that after dropping the table and doing 
a shutdown compact, the &quot;csv&quot; file was deleted from 
it's directory. I'm not sure what the rationale for 
this behavior might be. If this is the planned 
default behavior, I would like to see a database 
property where it could be turned off, much like the 
property for setting the absolute path to the text 
files (i.e. not in the same folder as the database).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/118
HyperSQL Database Engine (HSQLDB) / Bugs / #118 Error in creating text table with PK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With hsqldb-rc5, I tried the following statement
(trying the text table functionality)
CREATE TEXT TABLE B (id integer not null primary key, 
name varchar)
And this gave the following error :
Attempt to define a second primary key: S0011 Attempt 
to define a second primary key in statement [CREATE 
TEXT TABLE B (id integer not null primary key, name 
varchar)] / Error Code: -24 / State: S0011 
When I omit the 'TEXT' keyword it works fine.
Alexander
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/119
HyperSQL Database Engine (HSQLDB) / Bugs / #119 ByteArray needs to be Serializable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example:
stmt.executeUpdate(
&quot;CREATE MEMORY TABLE y (a VARCHAR, b OBJECT)&quot;);
PreparedStatement ps = conn.prepareStatement(
&quot;INSERT INTO y VALUES (?, ?)&quot;);
ps.setString(1,&quot;key1&quot;);
ps.setObject(2, new Integer(1), Types.OTHER);
ps.executeUpdate();
This fails because ByteArray does not implement 
java.io.Serializable. Making ByteArray implement 
Serializable does seem to solve the problem, at least 
for the example above.
Otherwise a *nifty* tool.
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/120
HyperSQL Database Engine (HSQLDB) / Bugs / #120 backslash not escaped in script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Try this: Write this string to any table with varchar
&quot;\á&quot;
Note the backslash and the icelandic á character
(ascii E1)
This is what gets written in the script file:
'\\u00e1'
Stop the program and restart it
The script file now contains:
'\\u005cu00e1'
And everytime you start the program another u005c 
gets appended.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/121
HyperSQL Database Engine (HSQLDB) / Bugs / #121 functions, operators fail in create view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
You probably know, but ...
your new implementation of views (RC5C) does
not support caluclated column values.
That is (assuming persons) ...
create view xxx as select pid, pid + 10 from persons
results in error:
SQL Error 
---------
Table not found: S0002 Table not found: in statement 
[create view xxx as select pid, pid + 10 from 
persons] / Error Code: -22 / State: S0002 
1 row(s) in 10 ms
This seems to be a parsing error where there is 
anything present in the select clause except columns
from the referenced tables.
Is what you plan for the 1st view implementation?
Thanks,
Joe
------------------------------------
CREATE TABLE PERSONS(PID INTEGER PRIMARY KEY,MOTHER 
INTEGER,FATHER INTEGER,LNAME VARCHAR,FNAME 
VARCHAR,MNAME VARCHAR,ONAME VARCHAR,OCHAR 
VARCHAR,ANAME VARCHAR,SEX CHAR,BORN TIMESTAMP,DIED 
TIMESTAMP,NICKNAME VARCHAR,MOBIL VARCHAR,EMAIL 
VARCHAR,OID INTEGER)
INSERT INTO PERSONS VALUES
(34,41,42,'Haggerty','Thomas','Eugene',NULL,NULL,'Hagge
rty','M','1875-01-01 
00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(35,41,42,'Haggerty','Edward','Charles',NULL,NULL,'Hagg
erty','M','1872-01-01 
00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(38,41,42,'Haggerty','Francis','Joseph',NULL,NULL,'Hagg
erty','M','1870-01-01 
00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(39,41,42,'Haggerty','William','R.',NULL,NULL,'Haggerty
','M','1868-01-01 00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(40,41,42,'Hassett','Katherine',NULL,NULL,NULL,'Haggert
y','F','1854-01-01 00:00:00.0',NULL,NULL,NULL,NULL,71)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/122
HyperSQL Database Engine (HSQLDB) / Bugs / #122 LEFT OUTER JOIN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Following is a bug report for a bug that happens on 
hsqldb 1.7.0 RC5c but no problem on hsql1.6.1
I have two tables defined as folows:
create CACHED table prod (
id int not null,
name varchar(200) not null,
price numeric(18,2) not null,
group_id int not null
);
create unique index prod_pk on prod ( id );
create CACHED table prod_detail (
id int not null,
prod_id int not null,
name varchar(200) not null
);
create unique index prod_detail_pk on prod_detail ( 
id );
For hsqldb version 1_7_0_RC5c 
When I did a qury as
SELECT 
prod.id,prod.name,prod.price,prod.group_id,prod_detail.
id FROM prod LEFT OUTER JOIN prod_detail ON
(prod.id=prod_detail.prod_id) WHERE prod.id = 4
I got an error message as
java.sql.SQLException: Unexpected token: 37000 
Unexpected token: correct syntax is: OUTER JOIN table 
ON table.col=tab2.col in statement [SELECT 
prod.id,prod.name,prod.price,prod.group_id,prod_detail.
id FROM prod LEFT OUTER JOIN prod_detail ON
(prod.id=prod_detail.prod_id) WHERE prod.id = 4]
It works fine for hsqldb version 1.6.1
This query is automatically generated by Castor (A 
Object to Relation DB mapping tool) in its 
examples/jdo/Test.java.
Anyway You have done a greate job on the hsqldb 
project. Thanks a lot.
hl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/123
HyperSQL Database Engine (HSQLDB) / Bugs / #123 org.hsqldb.DatabaseInformation.getSystem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm working on migrating my MS access database to 
hsql with JBuilder 5 but when I get this error
when I try to run the code hsql-1.7.0.rc5:
$ java.lang.NullPointerException
at 
org.hsqldb.DatabaseInformation.getSystemTable
(DatabaseInformation.jav
a:516)
at org.hsqldb.Database.getTable
(Database.java:629)
at org.hsqldb.Parser.parseTableFilter
(Parser.java:1141)
at org.hsqldb.Parser.parseSelect
(Parser.java:872)
at org.hsqldb.Parser.processSelect
(Parser.java:132)
at org.hsqldb.Database.execute
(Database.java:426)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:211)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/124
HyperSQL Database Engine (HSQLDB) / Bugs / #124 Total Loss of Data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be a spontaneous re-intitialization of 
the .script file Still occuring :(
I'm getting a 
*** java.sql.SQLException: User not found: ***
exception on an increasingly regular basis.
When I check the .script file, the data itself is gone, 
leaving the CREAT ALIAS stuff.
I haven't been able to force this error to occur; either 
locally or on mycgiserver.
Anybody else had this problem again lately?
Any comments most welcome
Cheers - Stan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/125
HyperSQL Database Engine (HSQLDB) / Bugs / #125 SELECT LIMIT 0 10 * INTO ....
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When you do a statement like &quot;SELECT LIMIT 0 10 * 
INTO newtable FROM oldtable where blah blah&quot; it 
ignores the limit clause and adds all records that meet 
the blah blah caluse instead of limiting them like it 
should.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/126
HyperSQL Database Engine (HSQLDB) / Bugs / #126 &quot;SELECT * INTO&quot; not writing CREATE TABLE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just noticed that in the newest version it doesn't write 
the CREATE TABLE entry on a SELECT * INTO
Here's the code that it wrote in the .script file
INSERT INTO ESG_CONCEPTS VALUES(52,20118)
/*C1*/CONNECT USER sa PASSWORD &quot;&quot;
drop table ESG_CONCEPTS
/*C2*/CONNECT USER sa PASSWORD &quot;&quot;
INSERT INTO ESG_CONCEPTS VALUES(34,20118)
I drop the table using:
drop table ESG_CONCEPTS
Then I create the new table using
select CS.CONCEPTID, CS.SENTENCETEXTID into 
ESG_CONCEPTS from CONCEPT_SENTENCE CS 
where CS.CONCEPTID in 
(34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,
58)
and it write the above code, but it should write:
INSERT INTO ESG_CONCEPTS VALUES(52,20118)
/*C1*/CONNECT USER sa PASSWORD &quot;&quot;
drop table ESG_CONCEPTS
CREATE TABLE ESG_CONCEPTS(CONCEPTID 
INTEGER,SENTENCETEXTID INTEGER)
/*C2*/CONNECT USER sa PASSWORD &quot;&quot;
INSERT INTO ESG_CONCEPTS VALUES(34,20118)
because it freaks out when ESG_CONCEPTS doesn't 
exist.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/127
HyperSQL Database Engine (HSQLDB) / Bugs / #127 NullPointerException when using IN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
You guys should love me for this. I made a nice 
simple test case and everything.
create table test1 (id int not null, testa varchar);
create table test2 (t1id int not null, testb varchar);
insert into test1 (id, testa) values (1, '1');
insert into test2 (t1id, testb) values (1, null);
select distinct testa, testb from test1 t1 left join 
test2 t2 on t1.testa = t2.testb where t2.testb in 
( '0', '1' );
-mike
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/128
HyperSQL Database Engine (HSQLDB) / Bugs / #128 jdbc primary key query failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use the version hsqldb_1_7_0_RC5c
The error arises, if I query over jdbc the primarykeys of a 
table;
The same if i try it with the dababase manager
select * from system_primarykeys
The origin is the line 515 in the file DababaseInformation
it returns a null
Index index = table.getIndex(&quot;SYSTEM_PK&quot;);
And following line failed with null pointer exception
int cols[] = index.getColumns();
java.lang.NullPointerException
at org.hsqldb.DatabaseInformation.getSystemTable
(DatabaseInformation.java:516)
at org.hsqldb.Database.getTable
(Database.java:629)
at org.hsqldb.Parser.parseTableFilter
(Parser.java:1141)
at org.hsqldb.Parser.parseSelect(Parser.java:872)
at org.hsqldb.Parser.processSelect
(Parser.java:132)
at org.hsqldb.Database.execute(Database.java:426)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:211)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/129
HyperSQL Database Engine (HSQLDB) / Bugs / #129 Errror when creating table with UNIQUE a
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following schema raise 37000 Unexpected 
token...error:
CREATE CACHED TABLE amov (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255),
dname VARCHAR (5) ,
mountext VARCHAR (255) ,
UNIQUE(primkey));
CREATE CACHED TABLE lickey (
primkey CHAR (10) NOT NULL ,
originkey CHAR (10) NOT NULL ,
type CHAR (1) NOT NULL ,
release CHAR (1) NOT NULL,
version CHAR (1) ,
name CHAR (40) ,
firstname CHAR (30) ,
globalkey VARCHAR (30) NOT NULL UNIQUE,
UNIQUE (primkey));
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/130
HyperSQL Database Engine (HSQLDB) / Bugs / #130 quoting problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Quoting in SQL statements is somewhat
buggy. I believe that the user should be able to
single-quote 
any table name or file name to escape munging/normalizing,
but several times I
have had to settle with the munged entity name because
hsqldb can't find out where a quoted string begins and
ends. Examples:
create table 't3' (i1 int, c1 varchar) 
Unexpected token: 37000 Unexpectred token: 't3 in
statement... 
set table t2 source 't2.csv' 
beyla$ ls
't2.csv T2.TXT db1.data db1.properties db1.script
beyla$ 
Notice that in the first sample I did not type 't3, I
typed 't3'; and in the second, the database created the
file &quot;'t2.csv&quot; instead of &quot;t2.csv&quot;.
I do not know if this is an engine problem. That's just my
first guess. If nobody else jumps in, I'll troubleshoot it
farther and/or make a fix once I make some headway with
my other hsqldb work.
Problem experience with 1.7.0rc5.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/131
HyperSQL Database Engine (HSQLDB) / Bugs / #131 Ungraceful In-Memory Text Table File err
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With in-memory database:
SET TABLE mynewtable SOURCE filename.csv
General error: S1000 General error
java.lang.NullopinterException in statement [SET ...
Error Code -40
Trace shows:
java.lang.NullPointerException
at
org.hsqldb.Database$Logger.openTextCache(Database.java:2777)
at
org.hsqldb.TextTable.openCache(TextTable.java:80)
at
org.hsqldb.TextTable.setDataSource(TextTable.java:162)
at
org.hsqldb.Database.processSet(Database.java:2114)
at org.hsqldb.Database.execute(Database.java:446)
at
org.hsqldb.jdbcConnection.executeStandalone(jdbcConnection.java:2915)
at
org.hsqldb.jdbcConnection.execute(jdbcConnection.java:2504)
at
org.hsqldb.jdbcStatement.fetchResult(jdbcStatement.java:1777)
at
org.hsqldb.jdbcStatement.execute(jdbcStatement.java:728)
at
org.hsqldb.util.DatabaseManager.execute(DatabaseManager.java:725)
at
org.hsqldb.util.DatabaseManager.actionPerformed(DatabaseManager.java:453)
at
java.awt.Button.processActionEvent(Button.java:381)
at java.awt.Button.processEvent(Button.java:350)
at
java.awt.Component.dispatchEventImpl(Component.java:3526)
at
java.awt.Component.dispatchEvent(Component.java:3367)
at
java.awt.EventQueue.dispatchEvent(EventQueue.java:445)
at
java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:190)
at
java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:144)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:130)
at
java.awt.EventDispatchThread.run(EventDispatchThread.java:98)
I do realize that trying to set a file path with an
in-memory 
DB engine is a bad thing to do. I'm just suggesting
that IMO some checking should be done to prevent
misleading 
runtime errors like this.
1.7.0rc5
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/132
HyperSQL Database Engine (HSQLDB) / Bugs / #132 doc errors in TextTables.html
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I come to these opinions empirically. I've verified
that WRT
1.7.0rc5, the following statements are wrong.
SET TABLE SOURCE &lt;&quot;file&quot;&gt; {DESC}
The table name must appear between &quot;TABLE&quot; and
&quot;SOURCE&quot;.
SELECT &lt;&gt; INTO TEXT TABLE &lt;tablename&gt;
The command fails if you use the keyword &quot;TABLE&quot;.
In addition, a SET command specifies the file and the
separator character that the Text table uses:
SET TABLE SOURCE &lt;&quot;file&quot;&gt; {DESC}
This is not &quot;wrong&quot;, just incomplete. I GUESS that &quot;DESC&quot; 
stands for description, but I have no clue how to set the
delimiter character(s).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/133
HyperSQL Database Engine (HSQLDB) / Bugs / #133 minor doc error in hSqlSyntax.html
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The file says
The types on the same line are equivalent
and VARCHAR_IGNORECASE and VARCHAR are on the
same line. A few lines latter the document says
VARCHAR_IGNORECASE is a special case-insensitive 
type of VARCHAR.
Are VARCHAR and LONGVARCHAR equivalent in hsqldb?
(According to hSqlSyntax.html they are different).
In any case, for hsqldb-specific stuff (like custom
datatype
such as VARCHAR_IGNORECASE, and size limitations) it
would be good to give the users enough information to make
use of the types.
I notice that VARCHAR_IGNORECASE does not store case-
insensitive data, as one could imply by the name, but that
the behavior of some test expressions (at least) is
altered.
No problem with that, as long as it is disclosed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/134
HyperSQL Database Engine (HSQLDB) / Bugs / #134 Tools throw null ptr ex if disconnected
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Both DatabaseManager and QueryTool will give a null 
pointer trace stack upon exiting the programs if the user
happens to have given the SQL command &quot;disconnect&quot;.
java.lang.NullPointerException
at org.hsqldb.Session.checkAdmin(Session.java:230)
at
org.hsqldb.Database.processShutdown(Database.java:2285)
at org.hsqldb.Database.execute(Database.java:500)
at
org.hsqldb.jdbcConnection.executeStandalone(jdbcConnection.java:2915)
at
org.hsqldb.jdbcConnection.execute(jdbcConnection.java:2504)
at
org.hsqldb.jdbcConnection.closeStandalone(jdbcConnection.java:2873)
at
org.hsqldb.jdbcConnection.close(jdbcConnection.java:1040)
at
org.hsqldb.util.QueryTool.windowClosing(QueryTool.java:602)
at
org.hsqldb.util.QueryTool.actionPerformed(QueryTool.java:647)
at
java.awt.MenuItem.processActionEvent(MenuItem.java:588)
at
java.awt.MenuItem.processEvent(MenuItem.java:548)
at
java.awt.MenuComponent.dispatchEventImpl(MenuComponent.java:285)
at
java.awt.MenuComponent.dispatchEvent(MenuComponent.java:273)
at
java.awt.MenuComponent.dispatchEventImpl(MenuComponent.java:288)
at
java.awt.MenuComponent.dispatchEvent(MenuComponent.java:273)
at
java.awt.EventQueue.dispatchEvent(EventQueue.java:447)
at
java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:190)
at
java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:144)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:130)
at
java.awt.EventDispatchThread.run(EventDispatchThread.java:98)
SQLException: SQLState(S1000) vendor code(-40)
1.7.0rc5. Standalone engine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/135
HyperSQL Database Engine (HSQLDB) / Bugs / #135 Buggy getImportedKeys
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First, thanks for a great product!
I saw that there is now finally better metadata support in 
hsqldb_1_7_0_RC6c:
http://sourceforge.net/tracker/index.php?
func=detail&amp;aid=556366&amp;group_id=23316&amp;atid=378134
However, it seems the implementation is buggy. I have 
three tables:
CREATE TABLE persons(
person_id INT NOT NULL,
first_name VARCHAR(32) NOT NULL,
last_name VARCHAR(32) NOT NULL,
PRIMARY KEY( person_id )
) TYPE=INNODB;
CREATE TABLE flights(
flight_id INT NOT NULL,
name VARCHAR(32) NOT NULL,
departure_utc DATETIME NOT NULL,
arrival_utc DATETIME NOT NULL,
PRIMARY KEY( flight_id )
) TYPE=INNODB;
CREATE TABLE reservations(
reservation_id INT NOT NULL,
person_id_fk INT NOT NULL,
flight_id_fk INT NOT NULL,
registration_utc DATETIME NOT NULL,
comment TEXT,
PRIMARY KEY(reservation_id,person_id_fk,flight_id_fk),
INDEX person_ind(person_id_fk),
INDEX flight_ind(flight_id_fk),
FOREIGN KEY (person_id_fk) REFERENCES persons
(person_id),
FOREIGN KEY (flight_id_fk) REFERENCES flights
(flight_id)
) TYPE=INNODB;
When I call getImportedKeys on the reservations table, I 
get an empty resultset. If I call getImportedKeys on the 
flights table, I get a resultset with one row. (the same 
happens for flights).
I'm quite sure this is wrong. A correct implementation of 
getImportedKeys would do the opposite. There should 
be a resultset with two rows for reservations and an 
empty resultset for persons and flights. (At least that's 
what all other drivers I've seen do).
Aslak
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/136
HyperSQL Database Engine (HSQLDB) / Bugs / #136 cannot create table with DEFAULT values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The create script below worked with 
1.7.0RC5 but not with 1.7.0 RC6c
java.sql.SQLException: 
Wrong data type or data too long in DEFAULT 
clause: 37000 Wrong data type or data too long 
in DEFAULT clause: - in statement [
CREATE TABLE MAIL_USER(
USER_ID INTEGER NOT NULL PRIMARY KEY,
LOGIN_ID VARCHAR(128) NOT NULL,
IMAP_USER_ID VARCHAR(254) NOT NULL,
IMAP_PASSWORD VARCHAR(100) NOT NULL,
USER_NAME VARCHAR(254) DEFAULT ' ' NOT 
NULL,
REPLY_TO VARCHAR(254),
LOCALE VARCHAR(40) DEFAULT 'en' NOT 
NULL,
FOOTER VARCHAR(200),
REPLY_LINE_PREFIX VARCHAR(20) 
DEFAULT '&gt; ' NOT NULL,
SHOW_FULL_HEADERS CHAR(1) DEFAULT 'N' 
NOT NULL,
PREF_ITEMCOUNT_PER_PAGE INTEGER 
DEFAULT 30 NOT NULL,
PREF_ADDRESSCOUNT_PER_PAGE INTEGER 
DEFAULT 20 NOT NULL,
PREF_USERCOUNT_PER_PAGE INTEGER 
DEFAULT 30 NOT NULL,
PREF_ADDRESS_CATEGORY INTEGER 
DEFAULT -1 NOT NULL,
PREF_SEND_CHARSET VARCHAR(30),
PREF_ATTACHMENTS_PER_MAIL INTEGER 
DEFAULT 3 NOT NULL,
PREF_SAVE_COPY_TO_SENT CHAR(1) 
DEFAULT 'Y' NOT NULL,
CREATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
UPDATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
LAST_ACCESS_DATE TIMESTAMP,
CONSTRAINT IXUQ_LOGIN_ID0 UNIQUE
(LOGIN_ID)
)
]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/137
HyperSQL Database Engine (HSQLDB) / Bugs / #137 script corrupt: negative DEFAULT values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL 1.7.0 RC5, RC6c
(this bug is related to bug 565189)
A table column with a negative default value
will cause the .script file to be unusable:
negative integer or double values are written to
the .script file *without* quotes. After a 
shutdown of the database, the .script file cannot
be parsed anymore.
eg. This will corrupt the .script file:
DROP TABLE QUOTED IF EXISTS;
CREATE CACHED TABLE QUOTED (
COL_NEGATIVE INTEGER DEFAULT '-1' NOT NULL
)
-- not stop the database and reconnect: 
gives error &quot;37000 Wrong data type or data too long in 
DEFAULT clause&quot;
I believe the root cause lies with the Tokenizer
class. Instead of treating every single '-' character
as a SPECIAL, maybe only a sequence of two '-'
characters are SPECIAL (a line comment)?
Or a '-' character followed by a numeric character
could be parsed as being part of a numeric value?
I am not sure if this would be correct (I'm not sure
if line comments are the only reason why
'-' characters are SPECIALS)
Instead of fixing the Tokenizer class, how about
patching the DatabaseScript class to surround
*all* DEFAULT values with quotes? (See below)
Or would that cause other problems?
---------
org/hsqldb/DatabaseScript.java
line
399 if (column.getDefaultString() != null) {
400 a.append(&quot; DEFAULT &quot;);
401 a.append(Column.createSQLString
(column.getDefaultString(),
402 column.getType()));
403 }
patch:
if (column.getDefaultString() != null) {
a.append(&quot; DEFAULT &quot;);
String value = Column.createSQLString(
column.getDefaultString(), column.getType
());
if (!value.startsWith(&quot;'&quot;)) {
a.append('\'');
}
a.append(value);
if (!value.endsWith(&quot;'&quot;)) {
a.append('\'');
}
}
-----------
I've attached a JUnit test that identifies the
problem. The test fails with RC5 and RC6c.
The test works after applying the patch.
You can run the test inside JUnit or standalone with
java -cp .;hsqldb.jar;junit.jar 
org.hsqldb.test.TestGrammarKeywordDefault
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/138
HyperSQL Database Engine (HSQLDB) / Bugs / #138 cannot compile the db
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When compiling with jdk1.4 the compiler gives the 
following error:
C:\Program Files\hsql\hsqldb_v.1.61\src&gt;javac -O -
classpath ;.;..\lib *.java org
\hsqldb\*.java org\hsqldb\util\*.java
org\hsqldb\Cache.java:382: warning: as of release 1.4, 
assert is a keyword, and
may not be used as an identifier
Trace.assert(!r.bChanged);
^
org\hsqldb\Channel.java:319: warning: as of release 1.4, 
assert is a keyword, an
d may not be used as an identifier
Trace.assert(!
bNestedTransaction, &quot;beginNestedTransaction&quot;);
^
org\hsqldb\Channel.java:338: warning: as of release 1.4, 
assert is a keyword, an
d may not be used as an identifier
Trace.assert
(bNestedTransaction, &quot;endNestedTransaction&quot;);
^
org\hsqldb\Constraint.java:98: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(cmain.length == cref.length);
^
org\hsqldb\Constraint.java:172: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(false, &quot;could not replace&quot;);
^
org\hsqldb\Database.java:236: warning: as of release 
1.4, assert is a keyword, a
nd may not be used as an identifier
Trace.assert(!channel.isNestedTransaction());
^
org\hsqldb\Expression.java:640: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(false, &quot;Expression.swapCondition&quot;);
^
org\hsqldb\Expression.java:845: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(eArg2 == null, &quot;Expression.test&quot;);
^
org\hsqldb\Expression.java:906: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(false, &quot;Expression.test2&quot;);
^
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/139
HyperSQL Database Engine (HSQLDB) / Bugs / #139 SELECT MAX(ID) not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi !
I tested the latest version: HypersonicSQL 1.7.0 RC6
with this piece of code (which works with hsqldb_v.1.61 )
ResultSet rs = stat.executeQuery(&quot;SELECT MAX(ID) 
FROM cdType&quot;);
if(rs.next()){
maxCDTypesID = rs.getInt(1);
}
It gives -1 all the time (it returns &gt;0 with the other 
version)
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/140
HyperSQL Database Engine (HSQLDB) / Bugs / #140 Problems under Linux and different JDK's
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I had this exception on linux only (it's ok on windows os):
java.sql.SQLException: General error: S1000 General 
error java.lang.NullPointerException in statement 
[INSERT INTO jahia_filemgr_files(id_jahia_file, 
filemgrid_jahia_file, fldid_jahia_file, uploaduser_jahia_file, 
pageid_jahia_file, is_public_jahia_file, 
realname_jahia_file, storagename_jahia_file, 
lastmodifdate_jahia_file, size_jahia_file, type_jahia_file, 
title_jahia_file, descr_jahia_file) VALUES(1, 1, 
1, 'siteadmin:1', 1, 
1, 'JahiaAdministrationGuide.pdf', 'FILEB81ZEWo2Z1Jahi
aAdministrationGuide.pdf', 1021543854000, 
913397, 'application/pdf', '', '')]
I think that there is a limit for the instruction size, 
because there is no problems with instruction 
INSERT INTO jahia_filemgr_files VALUES(1, 1, 
1, 'siteadmin:1', 1, 
1, 'JahiaAdministrationGuide.pdf', 'FILEB81ZEWo2Z1Jahi
aAdministrationGuide.pdf', 1021543854000, 
913397, 'application/pdf', '', '')
For you info, the structure of this table is 
CREATE TABLE jahia_filemgr_files(id_jahia_file 
INTEGER,filemgrid_jahia_file INTEGER,fldid_jahia_file 
INTEGER,uploaduser_jahia_file 
VARCHAR,pageid_jahia_file 
INTEGER,is_public_jahia_file 
INTEGER,realname_jahia_file 
VARCHAR,storagename_jahia_file 
VARCHAR,lastmodifdate_jahia_file 
BIGINT,size_jahia_file BIGINT,type_jahia_file 
VARCHAR,title_jahia_file VARCHAR,descr_jahia_file 
VARCHAR)
Cheers,
Philippe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/141
HyperSQL Database Engine (HSQLDB) / Bugs / #141 JSDK 1.4 Compliance
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As some may have noticed, HSQLDB wont compile on 
JSDK1.4. This should be easy to fix as only a few 
methods are added to driver. I am also getting lots of 
deprecation warnings - the methods with deprecated 
tags are used in the code itself!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/142
HyperSQL Database Engine (HSQLDB) / Bugs / #142 calculated values for substr etc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
In 170rc6g ... Statemets like:
select substr(dbname,1,length(dbname)-1), * from sets
produce:
This function is not supported: IM001 This function is not 
supported: org.hsqldb.Library.substring: 
java.lang.IllegalArgumentException: argument type 
mismatch in statement [select substr(dbname,1,length
(dbname)-1), * from sets] / Error Code: -20 / State: 
IM001 
This seems to stem from the fact that the substring
and other functions are looking for Integer and
that was not passed ... or top level did not reduce
to Integer.
Thanks,
Joe
p.s. sets was:
CREATE TEXT TABLE SETS(SET CHAR,ATTRIBUTE 
CHAR,SEQ INTEGER,DBNAME CHAR,DBTYPE 
CHAR,DBATTRIB CHAR,REFTYPE CHAR)
SET TABLE SETS 
SOURCE &quot;sets.csv;ignore_first=true;quoted=true&quot;
SET TABLE SETS INDEX '0 0'
Set,Attribute,Seq,DBName,DBType,DBAttrib,RefType
Meals,Meal ID,1,MID,int,identity,pk
Meals,Meal Name,2,Name,char(64),not null,
Meals,Type of Meal,3,MealType,int,not null,fk
Meals,Author,4,AID,int,not null,fk
Meals,Description of Meal,5,Description,longvarchar,,
Meals,Reference/Version Date ,6,AsOf,date,,
Meals,PK,7,MID,,,
MealCourseDishes,Meal ID,1,MID,int,not null,&quot;pk, fk&quot;
MealCourseDishes,Course,2,CID,int,not null,&quot;pk, fk&quot;
MealCourseDishes,Recipe ID,3,RID,int,not null,&quot;pk, fk&quot;
MealCourseDishes,PK,4,&quot;MID, CID, RID&quot;,,,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/143
HyperSQL Database Engine (HSQLDB) / Bugs / #143 Missing things for views
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi again,
During our testing we noted:
Views show in SYSTEM_TABLES as tables
and there is no ALTER VIEW xxx RENAME to yyy
Joe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/144
HyperSQL Database Engine (HSQLDB) / Bugs / #144 timestamp bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It seems that timestamp columns still have 
problems.
In version 1.7.1RC6 I did the following:
- create table t (name varchar, time timestamp)
- instert into t values('a', 2002-12-23)
-&gt; generates a date but not the correct one
as I saw, the parser does not recognize that this 
is a date format
- instert into t values('a', 2002-12-23 12:00:00.00)
-&gt; throws an exception
This problem was reported earlier in
http://sourceforge.net/tracker/index.php?
func=detail&amp;aid=423114&amp;group_id=23316&amp;atid=3
78131
he also fixed the source! But it still is not in the 
current version :(((
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/145
HyperSQL Database Engine (HSQLDB) / Bugs / #145 NT -Database is already in use
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I have more than one process accessing the 
database I get the following error.
The stackTrace is 
ERROR - Failed to get JDBC connection
java.sql.SQLException: The database is already in use 
by another process
at org.hsqldb.Trace.getError(Trace.java:225)
at org.hsqldb.Trace.error(Trace.java:276)
at org.hsqldb.Log.open(Log.java:290)
at org.hsqldb.Database$Logger.openLog
(Database.java:2603)
at org.hsqldb.Database.&lt;init&gt;(Database.java:203)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:2849)
at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:2428)
at org.hsqldb.jdbcDriver.connect(jdbcDriver.java:176)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at com.prismt.jdbc.a.l(Unknown Source)
at com.prismt.util.v.h(Unknown Source)
at com.prismt.util.v.g(Unknown Source)
at com.prismt.jdbc.a.s(Unknown Source)
at com.prismt.jdbc.c.getPooledConnection(Unknown 
Source)
at 
com.prismt.j2ee.connector.jdbc.ManagedConnectionImpl
.for(Unknown Source)
at 
com.prismt.j2ee.connector.jdbc.ManagedConnectionImpl
.new(Unknown Source)
at 
com.prismt.j2ee.connector.jdbc.ManagedConnectionImpl
.getConnection(Unknown Source)
at com.prismt.j2ee.connector.jdbc.g.allocateConnection
(Unknown Source)
at 
com.prismt.j2ee.connector.jdbc.ConnectionFactoryImpl.g
etConnection(Unknown Source)
at com.prismt.jdbc.Database.case(Unknown Source)
at com.prismt.jdbc.Database.void(Unknown Source)
at com.prismt.jdbc.Database.&lt;init&gt;(Unknown Source)
at com.prismt.j2ee.jndi.a.a(Unknown Source)
at com.prismt.j2ee.jndi.cache.JDBCCacheAdapter.a
(Unknown Source)
at 
com.prismt.j2ee.jndi.cache.JDBCCacheAdapter.&lt;init&gt;
(Unknown Source)
at com.prismt.j2ee.jndi.OpenFusionSPI.a(Unknown 
Source)
at com.prismt.j2ee.jndi.OpenFusionSPI.&lt;init&gt;(Unknown 
Source)
at 
com.prismt.j2ee.jndi.OpenFusionCtxFactory.getInitialCon
text(Unknown Source)
at javax.naming.spi.NamingManager.getInitialContext
(Unknown Source)
at javax.naming.InitialContext.getDefaultInitCtx
(Unknown Source)
at javax.naming.InitialContext.init(Unknown Source)
at javax.naming.InitialContext.&lt;init&gt;(Unknown Source)
at com.prismt.j2ee.jms.Management.a(Unknown 
Source)
at com.prismt.j2ee.jms.Management.a(Unknown 
Source)
at com.prismt.j2ee.jms.Management.init(Unknown 
Source)
at com.prismt.j2ee.jms.Management.init(Unknown 
Source)
at com.prismt.openfusion.orb.JavaObject.a(Unknown 
Source)
at com.prismt.openfusion.orb.Service.byte(Unknown 
Source)
at com.prismt.openfusion.orb.Service.new(Unknown 
Source)
at com.prismt.openfusion.orb.Service.main(Unknown 
Source)
ERROR - Retring ...
From the Hsqldb-developers mail list the following thread 
http://www.mail-archive.com/hsqldb-
developers@lists.sourceforge.net/msg00085.html
discusses the problem.
From: Kevin A. Burton 
Subject: [Hsqldb-developers] MORE The database is 
already in use by another process 
Date: Thu, 07 Mar 2002 13:19:16 -0800 
--------------------------------------------------------------------------------
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1
OK...
I spent some type patching isAlreadyOpen and 
distributing updates .jar files to
my users.
Here is what I learned.
- - it isn't a synchronization issue in isAlreadyOpen. I 
created a synchronized
block around Log.class and it still fails.
- - the file DOES exist.
- - the delete() == false call is what is causing this.
- - canRead and canWrite both return true :(
I think the problem is the way that the file is opened.
Java states that on
some systems an open file is exclusive.
I think the problem is that on Windows, file operations in 
Java under Windows
are exclusive.
Maybe we should rewrite (make sense) Log.java to 
make sure that we don't try to
load the properties file while we are trying to save it.
Looking at the current
code, it appears that someone could call open in one 
thread (DBConnection) while
isAlreadyOpen is trying to be called in another thread.
Under UNIX/Linux... these are not exclusive and at least 
from Java, there is no
way to make them operate so.
So... my thinking (no suggestion yet) is that we just use 
a static synchronizer
so that the properties file is not written to during another 
write/read
operation.
Does that make sense? It looks like we only have to 
modify isAlreadyOpen,
loadProperties and saveProperties...
As an aside. Could a DB connection pool raise this 
issue? It seems that it
might. I am using Turbine's DB connection pool with 20 
connections. This
seems to work fine under Linux... obviously not find 
under Windows :)
Kevin
- -- 
Kevin A. Burton ( burton@apache.org, 
burton@openprivacy.org, burtonator@acm.org )
Location - San Francisco, CA, Cell - 
415.595.9965
Jabber - burtonator@jabber.org, Web - 
http://relativity.yi.org/
I have downloaded the latest 1.7 candidate and the 
problem still exists. I have had a look for the bug on the 
HSQLDB bug list but can't find it, but I would have 
thought that it would have been raised previously as it is 
discussed on the HSQLDB developers mail list.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/146
HyperSQL Database Engine (HSQLDB) / Bugs / #146 Simple SQL query equaling two columns fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create a table
CREATE TABLE taxon ( tax_id INTEGER PRIMARY 
KEY, tax_par_id INTEGER );
Insert data
INSERT INTO taxon { VALUES ( 1, 1 ) };
INSERT INTO taxon { VALUES ( 2, 1 ) };
INSERT INTO taxon { VALUES ( 3, 2 ) };
INSERT INTO taxon { VALUES ( 4, 2 ) };
INSERT INTO taxon { VALUES ( 5, 3 ) };
Check data
SELECT * FROM taxon;
Test following query
SELECT * FROM taxon WHERE tax_id = tax_par_id;
Returns the following error:
SQL Error: Column not found: S0022 Column not 
found: TAX_PAR_ID in statement [SELECT * FROM 
taxon WHERE tax_id = tax_par_id;] / Error Code: -28 / 
State: S0022 
But should work!
Workaround:
SELECT * FROM taxon WHERE tax_id + 0 = 
tax_par_id + 0;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/147
HyperSQL Database Engine (HSQLDB) / Bugs / #147 Can not store objects &gt; 64 Kb
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I'm using JBoss 3.0 application server with embedded 
HSQL database (I do not know, what version of hsql 
JBoss uses).
I have a troubles when I want to store CMP entity bean 
that have a field &gt; 64 Kb.
Thats, I have no troubles, when I'm storing StringBuffer 
object with capacity = 15000 (~62Kb), or empty 
ImageIcon, but I receive such message, when want to 
store StringBuffer with capacity = 20000 (or ImageIcon 
with image data):
java.sql.SQLException: Connection is broken
at org.hsqldb.Trace.getError(Trace.java:180)
at org.hsqldb.Trace.getError(Trace.java:144)
at org.hsqldb.Trace.error(Trace.java:205)
at org.hsqldb.jdbcConnection.executeHSQL
(jdbcConnection.java:904)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:718)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:686)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:85)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(jdbcPreparedStatement.java:152)
at 
org.jboss.resource.adapter.jdbc.local.LocalPreparedState
ment.executeUpdate(LocalPreparedStatement.java:308)
at 
org.jboss.ejb.plugins.cmp.jdbc.JDBCCreateEntityComman
d.insertEntity(JDBCCreateEntityCommand.java:196)
at 
org.jboss.ejb.plugins.cmp.jdbc.JDBCCreateEntityComman
d.execute(JDBCCreateEntityCommand.java:131)
at 
org.jboss.ejb.plugins.cmp.jdbc.JDBCStoreManager.create
Entity(JDBCStoreManager.java:450)
at 
org.jboss.ejb.plugins.CMPPersistenceManager.createEntit
y(CMPPersistenceManager.java:253)
at 
org.jboss.resource.connectionmanager.CachedConnectio
nInterceptor.createEntity
(CachedConnectionInterceptor.java:270)
at 
org.jboss.ejb.EntityContainer.createLocalHome
(EntityContainer.java:579)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at 
org.jboss.ejb.EntityContainer$ContainerInterceptor.invoke
Home(EntityContainer.java:1116)
at 
org.jboss.ejb.plugins.AbstractInterceptor.invokeHome
(AbstractInterceptor.java:73)
at 
org.jboss.ejb.plugins.EntitySynchronizationInterceptor.inv
okeHome(EntitySynchronizationInterceptor.java:257)
at 
org.jboss.resource.connectionmanager.CachedConnectio
nInterceptor.invokeHome
(CachedConnectionInterceptor.java:215)
at 
org.jboss.ejb.plugins.EntityInstanceInterceptor.invokeHo
me(EntityInstanceInterceptor.java:134)
at 
org.jboss.ejb.plugins.EntityLockInterceptor.invokeHome
(EntityLockInterceptor.java:79)
at 
org.jboss.ejb.plugins.EntityCreationInterceptor.invokeHo
me(EntityCreationInterceptor.java:44)
at 
org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext
(AbstractTxInterceptor.java:98)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.runWithTransacti
ons(TxInterceptorCMT.java:167)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.invokeHome
(TxInterceptorCMT.java:52)
at 
org.jboss.ejb.plugins.SecurityInterceptor.invokeHome
(SecurityInterceptor.java:104)
at 
org.jboss.ejb.plugins.LogInterceptor.invokeHome
(LogInterceptor.java:109)
at org.jboss.ejb.EntityContainer.invokeHome
(EntityContainer.java:487)
at 
org.jboss.ejb.plugins.local.BaseLocalContainerInvoker.inv
okeHome(BaseLocalContainerInvoker.java:227)
at 
org.jboss.ejb.plugins.local.LocalHomeProxy.invoke
(LocalHomeProxy.java:110)
at $Proxy23.create(Unknown Source)
at 
ru.narod.kimerinn.galaxy.earth.core.EarthManagerBean.r
egisterServer(EarthManagerBean.java:109)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at 
org.jboss.ejb.StatefulSessionContainer$ContainerInterce
ptor.invoke(StatefulSessionContainer.java:823)
at 
org.jboss.ejb.plugins.SecurityInterceptor.invoke
(SecurityInterceptor.java:129)
at 
org.jboss.resource.connectionmanager.CachedConnectio
nInterceptor.invoke
(CachedConnectionInterceptor.java:186)
at 
org.jboss.ejb.plugins.StatefulSessionInstanceInterceptor.i
nvoke(StatefulSessionInstanceInterceptor.java:266)
at 
org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext
(AbstractTxInterceptor.java:96)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.runWithTransacti
ons(TxInterceptorCMT.java:167)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.invoke
(TxInterceptorCMT.java:61)
at org.jboss.ejb.plugins.LogInterceptor.invoke
(LogInterceptor.java:166)
at 
org.jboss.ejb.StatefulSessionContainer.invoke
(StatefulSessionContainer.java:380)
at org.jboss.ejb.Container.invoke
(Container.java:705)
at 
org.jboss.mx.server.MBeanServerImpl.invoke
(MBeanServerImpl.java:491)
at 
org.jboss.invocation.jrmp.server.JRMPInvoker.invoke
(JRMPInvoker.java:362)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at sun.rmi.server.UnicastServerRef.dispatch
(UnicastServerRef.java:261)
at sun.rmi.transport.Transport$1.run
(Transport.java:148)
at java.security.AccessController.doPrivileged
(Native Method)
at sun.rmi.transport.Transport.serviceCall
(Transport.java:144)
at 
sun.rmi.transport.tcp.TCPTransport.handleMessages
(TCPTransport.java:460)
at 
sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.r
un(TCPTransport.java:701)
at java.lang.Thread.run(Thread.java:536)
This bug prevents me to store ImageIcons with picture 
data and a large objects as a table fields :(( Is there a 
way to win this bug?
Kimerinn
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/148
HyperSQL Database Engine (HSQLDB) / Bugs / #148 Transfer Tool - no target in v1.61
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hSQL: v1.61
jdk: 1.3.1_03
OS: Windows2000 5.00.2195 Svc Pak 2
RAM: 512MB (in case it matters)
I noticed that if you launch the Transfer Tool directly it 
will only give you a window to select the Source, you do 
NOT get one to select the Target.
If you launch this from the DB Manager, you will get 
both windows in the proper order. 
Any questions: drop me a line at paul.m.boos@saic.com
Paul
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/149
HyperSQL Database Engine (HSQLDB) / Bugs / #149  powerbuilder connect to HSQL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using powerbuilder connect to HSQL Database by 
jdbc,arises &quot;memory can't read &quot;err,why?
Do you try powerbuilder connect to HSQL?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/150
HyperSQL Database Engine (HSQLDB) / Bugs / #150 Types with functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using RC6i
Trying 
select substr(ci, 1, (locate(',', ci) + 2) ), * from holdfile 
works
trying
select substr(ci, 1, (locate(',', ci) - 1) ), * from holdfile 
gives
SQL Error -------------------------------------------------------------------
----------------------------------------------------------------------------------
------------------------------------------------------------------------- 
This function is not supported: IM001 This function is not 
supported: org.hsqldb.Library.substring: 
java.lang.reflect.InvocationTargetException in statement 
[select substr(ci, 1, (locate(',', ci) - 1) ), * from holdfile] / 
Error Code: -20 / State: IM001 
1 row(s) in 10 ms
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/151
HyperSQL Database Engine (HSQLDB) / Bugs / #151 limit on size of sql for view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like the select statement for a view can only be 
about 840 characters --- runs ok on create but stored 
truncated. Tried something like:
create view pass1 as
select casewhen( locate(',',ci) &lt; 1, 
ci, 
substr(ltrim(ci), 1, locate(',',ci)-1) 
) lname,
casewhen( locate(',',ci) &lt; 1, 
' ', 
substr(rtrim(ci), locate(',',ci)+1) 
) fname,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
right(rtrim(cm), 2), 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
right(rtrim(cl), 2), 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
right(rtrim(ck), 2), 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
right(rtrim(cj), 2), 
'' 
)
)
)
) st,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
substr(cm, 1, length(rtrim(cm))-3),
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
substr(cl, 1, length(rtrim(cl))-3),
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
substr(ck, 1, length(rtrim(ck))-
3),
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
substr(cj, 1, length(rtrim
(cj))-3),
'' 
)
)
)
) city,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
3, 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
2, 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
1, 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
0, 
0 
)
)
)
) li,
* 
from holdfile
union
select casewhen( locate(',',ci) &lt; 1, 
ci, 
substr(ltrim(ci), 1, locate(',',ci)-1) 
) lname,
casewhen( locate(',',ci) &lt; 1, 
' ', 
substr(rtrim(ci), locate(',',ci)+1) 
) fname,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
right(rtrim(cm), 2), 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
right(rtrim(cl), 2), 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
right(rtrim(ck), 2), 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
right(rtrim(cj), 2), 
'' 
)
)
)
) st,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
substr(cm, 1, length(rtrim(cm))-3),
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
substr(cl, 1, length(rtrim(cl))-3),
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
substr(ck, 1, length(rtrim(ck))-
3),
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
substr(cj, 1, length(rtrim
(cj))-3),
'' 
)
)
)
) city,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
3, 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
2, 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
1, 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
0, 
0 
)
)
)
) li,
* 
from hold3
union
select casewhen( locate(',',ci) &lt; 1, 
ci, 
substr(ltrim(ci), 1, locate(',',ci)-1) 
) lname,
casewhen( locate(',',ci) &lt; 1, 
' ', 
substr(rtrim(ci), locate(',',ci)+1) 
) fname,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
right(rtrim(cm), 2), 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
right(rtrim(cl), 2), 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
right(rtrim(ck), 2), 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
right(rtrim(cj), 2), 
'' 
)
)
)
) st,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
substr(cm, 1, length(rtrim(cm))-3),
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
substr(cl, 1, length(rtrim(cl))-3),
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
substr(ck, 1, length(rtrim(ck))-
3),
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
substr(cj, 1, length(rtrim
(cj))-3),
'' 
)
)
)
) city,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
3, 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
2, 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
1, 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
0, 
0 
)
)
)
) li,
* 
from hold3
in DB script was:
CREATE VIEW PASS1 AS select casewhen( locate
(',',ci) &lt; 1, ci, substr(ltrim(ci), 1, 
locate(',',ci)-1) ) lname, casewhen( locate(',',ci) 
&lt; 1, ' ', substr(rtrim(ci), locate
(',',ci)+1) ) fname, casewhen( right(replace
(rtrim(cm),',',' '), 3) like ' __', right(rtrim(cm), 
2), casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', right(rtrim(cl), 
2), casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', right
(rtrim(ck), 2), casewhen( right
(replace(rtrim(cj),',',' '), 3) like ' 
__', right(rtrim(cj), 2),
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/152
HyperSQL Database Engine (HSQLDB) / Bugs / #152 Exception reconnecting / foreign key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Everytime I reconnect to a database created with the
following statements, I get an exception. It seems to
be due to the foreign key
constraint originating from a non-primary key-attribute.
I'm using the binary version from the web-site of
HSQLDB 1.7.0 RC6 Revision i with JDK1.4-01 under linux.
create cached table VEREIN
(
VCODE CHAR(10) not null,
primary key (VCODE)
);
create unique index VEREIN_PK on VEREIN (VCODE);
create cached table BEWERB
(
VCODE CHAR(10) 
not null,
ID SMALLINT not null ,
primary key (ID)
);
create unique index BEWERB_FK2 on BEWERB(ID);
create unique index BEWERB_FK1 on BEWERB(VCODE);
alter table BEWERB
add constraint bv foreign key (VCODE) references VEREIN
(VCODE);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/153
HyperSQL Database Engine (HSQLDB) / Bugs / #153 getColumnName (continued)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello all!
I had once outlined that getColumnName() in the 
jdbcResultSet class returned the column name instead 
of the alias of the column (which is the way most jdbc 
drivers use).
A patch has been done for that (thanks, by the way), but 
it doesn't work in a client/server environment.
- Problem:
The patch has been applied at the Jdbc client level.
On the other hand, it uses a *database* property named 
jdbc.get_column_name.
In a client/server environment, the client and the 
database are in two separate JVMs (and possibly on 
two different machines), so the client doesn't see the 
database property (which is on the server).
So, as a result, even if you set the property to false on 
the server, the getColumnName on the client still returns 
the real column name, and not the alias. And you 
cannot set the property on the client because there is 
no server and no database there (and you can set the 
property only if you start a database).
Fix:
I have two main ways of fixing this.
It involves a bit of thinking about the design. Should the 
*database* be patched to behave in the way we want to 
(i.e. return the label instead of the column name), or 
should the *jdbc client* only be patched to behave like 
that?
These are completely different designs. With the second 
one, each client might behave differently on the same 
database.
So let's have a look at the first solution (database patch):
the jdbc.get_column_name property should affect the 
getColumnName() method in class Expression. To 
make that work, the &quot;get_column_name&quot; boolean in 
jdbcResultSet should be moved to Expression. Then, 
the getColumnName() method in Expression should be 
patched to return the label instead of the column name if 
the get_column_name boolean is false.
Right, let's have a look at the second solution (jdbc 
client patch): we need the client to get properties 
somewhere. I don't mind where these properties should 
come from (another configuration file, or simply in the 
url), but the setGetColumnName(boolean) method 
should be called within the jdbc driver itself (while 
initializing the driver, or while connecting with the URL).
Note that the best fix might be a combination of both 
solutions: have a parameter on the database AND 
another parameter on the jdbc client.
I let you see what's best from your point of view. As for 
me, I think that the patch should be applied at the 
database level (and not at the jdbc level). Anyway, this 
affects only people who set the property to false.
Thanks!
JY.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/154
HyperSQL Database Engine (HSQLDB) / Bugs / #154 Bugs in test suites
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The classes in org.hsqldb.test (v1.7.0RC6i) contain a 
couple of bugs.
The main methods of the classes 
org.hsqldb.test.TestSqlPersistent and 
org.hsqldb.test.TestSql are useless since they don't report 
the failures. If junit.*ui.TestRunner is used instead of the 
main methods, then class org.hsqldb.test.TestSqlPersistent 
should additionally define a suite() method, since otherwise 
the TestRunner detects the test*() methods inherited from 
the superclass, which I think is not intended.
The last statement of org.hsqldb.test.TestSql.testMetaData() 
should read assertEquals(result3, result4); instead of 
assertEquals(result2, result4);
Method org.hsqldb.test.TestSqlPersistent.testInsertObject(): 
the arrays arrayValue and arrayValueResult cannot be 
compared with arrayValue.equals(arrayValueResult). Must 
iterate over their elements or use java.util.Arrays.equals
((Double[]) arrayValue, (Double[]) arrayValueResult).
Class org.hsqldb.test.TestSubselect: Resource dataset-
subselect.xml is missing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/155
HyperSQL Database Engine (HSQLDB) / Bugs / #155 Oracle chokes on &quot;;&quot; at end of select 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using the transfer tool with 1.7 RC6i and oracle 8i as
the source DB.
The semi-colon added to the select statement on line
126 of TransferTable.java cause Oracle to throw an
exception with an &quot;Invalid character&quot; message. Removing
the semi-colon solves the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/156
HyperSQL Database Engine (HSQLDB) / Bugs / #156 Missing servlet.jar in classpath
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in buildJDK14.bat you seem to be missing the servlet.jar 
file in the classpath even though that jar is included in 
the distribution. Here's my corrected version.
This is from 1.70RC6. Perhaps other scripts have this 
issue also?
@echo HSQLDB build file for jdk 1.4
@echo *** we recommend the use of the ANT build.xml 
instead of this method
@echo for all jdk's include the path to jdk1.x.x\bin in 
your system path statement
cd ..\
md classes
del /s classes\*.class
cd src
javac -O -nowarn -d ../classes -classpath %
classpath%;../classes;../lib;../lib/servlet.jar;. ./*.java 
org/hsqldb/*.java org/hsqldb/lib/*.java 
org/hsqldb/util/*.java
cd ..\classes
copy ..\src\org\hsqldb\util\hsqldb.gif org\hsqldb\util
jar -cf ../lib/hsqldb.jar *.class org/hsqldb/*.class 
org/hsqldb/lib/*.class org/hsqldb/util/*.class
cd ..\build
pause
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/157
HyperSQL Database Engine (HSQLDB) / Bugs / #157 Typo in getIndexInfo (ORDINAL_POSITON)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
getIndexInfo returns ORDINAL_POSITON not 
ORDINAL_POSITION (the third 'I' is missing).
P.S. This bug was found in the project LDBC, see also 
http://ldbc.sourceforge.net
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/158
HyperSQL Database Engine (HSQLDB) / Bugs / #158 Missing hsqldb.gif
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The batch commands for building are missing 
the ...../util/hsqldb.gif for the swing DatabaseManager
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/159
HyperSQL Database Engine (HSQLDB) / Bugs / #159 Primary key should not allow null values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The standard says (at least, most if not all other 
databases do that), the primary keys columns don't 
allow null values. HSQLDB allows null values. I think this 
behaviour should be changed.
This bug was found in the LDBC project.
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/160
HyperSQL Database Engine (HSQLDB) / Bugs / #160 DELETE FROM does not update database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After a DELETE FROM order on a table, records stay visible (and selectable) until database is closed.
When re-openning database, records are correctly deleted.
Here my code :
Connection conn = DriverManager.getConnection(...)
PreparedStatement st = conn.prepareStatement(&quot;DELETE FROM MYTABLE WHERE ID=?&quot;);
st.setString(1,sId);
int ret = st.executeUpdate();
// here, ret is equal to 1, that is expected
conn.commit(); // not needed, as far as AUTO_COMMIT is set to TRUE
now, this returns the deleted row
PreparedStatement st = conn.prepareStatement(&quot;SELECT ID FROM MYTABLE WHERE ID=?&quot;);
st.setString(1,sId);
ResultSet rs = st.executeQuery();
Any idea ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/161
HyperSQL Database Engine (HSQLDB) / Bugs / #161 SELECT COUNT(...) with no rows fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you select the count of column in a table that has no 
rows, it throws a &quot;No data available&quot; SQLException 
rather than returning 0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/162
HyperSQL Database Engine (HSQLDB) / Bugs / #162 Error processing SET INDEX on script
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some of the SET INDEX clauses that are generated by the
engine in the [DB]script file are throwing a
NumberFormatException in the setIndexRoot method of the
Table class when the engine is started. It seems that
there is an inconsistency between the internal index
count for a table, and the entries generated for those
indexes in the aforementioned clause.
For example if the internal index count is 1 and the
set index clause goes like &quot;SET TABLE [table] INDEX '-1
-1 -1 0'&quot;, an attempt is made to parse &quot;-1 -1 0&quot; to get
the identity index root, throwing the indicated Exception.
I just try-catched the problematic line, and set the
identity index root to 0 (as far as I have tested, no
problems are generated for this patch, but I don't know
if the solution is entirely correct).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/163
HyperSQL Database Engine (HSQLDB) / Bugs / #163 when shutdown compact is issued server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.lang.ArrayIndexOutOfBoundsException: 5 &gt;= 5
at java.util.Vector.elementAt(Vector.java:417)
at org.hsqldb.Server.closeAllServerConnections
(Server.java:283)
at org.hsqldb.Server.update(Server.java:306)
at java.util.Observable.notifyObservers
(Observable.java:142)
at org.hsqldb.ServerConnection.close
(ServerConnection.java:144)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:228)
at java.lang.Thread.run(Thread.java:484)
---------
when shutdown compact is issued server throws an
exception as shown above.
Sometimes script is flushed and is in good
condition sometimes it is not.
Sometimes it works properly.
version 1.7.1
DB hsqldb
Thank you very much 
Raman Kannan
rkannan@govpx.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/164
HyperSQL Database Engine (HSQLDB) / Bugs / #164 create view problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create view allows for ...
select ... into xxx ...
this causes a race condition.
Don't know if you should stop or just say don't do it
cause it hurts.
Fix if you do it is to edit .script file and delete view.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/165
HyperSQL Database Engine (HSQLDB) / Bugs / #165 ClassCastException in preparedStatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using v1.7.0 , ( v 1.7.1ALPHA also bugged)
I found a bug in the method 
static Object convertObject(Object o, int type)
in Column class, when sqltype is SMALLINT or TINYINT ,
this method return a Integer object.
And when, I call a preparedStatement.setObject(int
parameterIndex, Object x, int targetSqlType) 
with 'x' intanceof java.lang.Byte and targetSqlType
equals to java.sql.Types.TINYINT ( or 'x' intanceof
java.lang.Short and targetSqlType equals to
java.sql.Types.SMALLINT ), I get the error :
java.lang.ClassCastException: java.lang.Integer
at
org.hsqldb.jdbcPreparedStatement.setObjectInType(jdbcPreparedStatement.java:4994)
at
org.hsqldb.jdbcPreparedStatement.setObject(jdbcPreparedStatement.java:1130)
at HSQLbug.main(HSQLbug.java:73)
I modify Column.java to return the correct type ( just
put a line for converting Integer to Byte / Short )
and my program runs fine ( driver workes, but I don't
know if this patch add bugs to server )
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/166
HyperSQL Database Engine (HSQLDB) / Bugs / #166 Win98 crash can corrupt script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Windows 98, HSQLDB v1.7.0, Java 1.3.1
1. Start database server
2. Perform a minimum of activity, it appears not to 
matter what exactly
3. Pull the power plug from the machine
4. Database refuses to start on reboot
We have not had this problem on Win 2000 which struck 
us as odd, but it happens every time on 98.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/167
HyperSQL Database Engine (HSQLDB) / Bugs / #167 LENGTH(NULL) should return NULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It currently returns 0, that is not ANSI standard.
The bug is in Library.java:
public static int length(String s) {
return ((s == null) || (s.length() &lt; 1)) ? 0 : s.length();
}
Should be something like:
public static Integer length(String s) {
return s==null ? null : new Integer(s.length());
}
This bug was found in the LDBC project 
(ldbc.sourceforge.net)
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/168
HyperSQL Database Engine (HSQLDB) / Bugs / #168 IN fails with BIGINT literal values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For a table defined as follows:
CREATE TABLE RESOURCES(VALUE BIGINT NOT 
NULL,UNIQUE(VALUE))
The following SQL fails:
SELECT * FROM RESOURCES R WHERE R.VALUE 
IN (225216536312565046, 5117217460229781974)
The Exception is as follows:
java.sql.SQLException: Unexpected token: 
225216536312565046 in statement [SELECT * FROM 
RESOURCES R WHERE R.VALUE IN 
(225216536312565046, 5117217460229781974)]
The workaround is to enclose the BIGINT literals within 
single quotes, but this compensates my cross-platform 
SQL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/169
HyperSQL Database Engine (HSQLDB) / Bugs / #169 poolman cannot connect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When i try to connect with poolman to the 1.7.0 version 
of hsqldb i get the error:
SQLException occurred in JDBCPool: 
java.sql.SQLException: This function is not supported
params: org.hsqldb.jdbcDriver, 
jdbc:hsqldb:hsql://localhost. Please check your 
username, password and other connectivity info.
java.sql.SQLException: SQLException occurred in 
JDBCPool: java.sql.SQLException: This function is not 
supported
params: org.hsqldb.jdbcDriver, 
jdbc:hsqldb:hsql://localhost. Please check your 
username, password and other connectivity info.
at com.codestudio.util.JDBCPool.create
(Unknown Source)
at com.codestudio.util.ObjectPool.checkOut
(Unknown Source)
at 
com.codestudio.util.JDBCPool.requestConnection
(Unknown Source)
at 
com.codestudio.util.SQLManager.requestConnection
(Unknown Source)
at com.codestudio.sql.PoolMan.connect
(Unknown Source)
When i use version 1.6.1 with the exact same settings 
this works fine.
poolman.xml:
.........
&lt;dbname&gt;agenda&lt;/dbname&gt;
&lt;jndiName&gt;jndi-agenda&lt;/jndiName&gt;
&lt;driver&gt;org.hsqldb.jdbcDriver&lt;/driver&gt;
&lt;url&gt;jdbc:hsqldb:hsql://localhost&lt;/url&gt;
&lt;username&gt;sa&lt;/username&gt;
&lt;password&gt;&lt;/password&gt;
&lt;initialConnections&gt;1&lt;/initialConnections&gt;
........
Regards,
Edwin Eversidjk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/170
HyperSQL Database Engine (HSQLDB) / Bugs / #170 Insert Not Working Consistently
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We are using HSQL 1.61. Through SQL scripts we first 
create a schema. Then with another script we attempt 
to populate the database. When I run the full population 
script it fails with the message &quot;Try to insert into a non-
nullable column in statement ...&quot; on the very first insert.
If I run insert statements in isolation they execute just 
fine. Thanks.
Andy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/171
HyperSQL Database Engine (HSQLDB) / Bugs / #171 Trigger classes not loading
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bug in HSQL:
Loading a trigger class from anywhere except %
JAVA_HOME%\jre\lib\ext doesn't
work. Example stack trace:
java.lang.ClassNotFoundException: TriggerSample
at java.net.URLClassLoader$1.run
(URLClassLoader.java:198)
at java.security.AccessController.doPrivileged
(Native Method)
at java.net.URLClassLoader.findClass
(URLClassLoader.java:186)
at java.lang.ClassLoader.loadClass
(ClassLoader.java:306)
at java.lang.ClassLoader.loadClass
(ClassLoader.java:262)
at java.lang.ClassLoader.loadClassInternal
(ClassLoader.java:322)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:130)
at org.hsqldb.Database.processCreateTrigger
(Database.java:1131)
at org.hsqldb.Database.processCreate
(Database.java:838)
at org.hsqldb.Database.execute(Database.java:468)
at org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:2927)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:2516)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1786)
at org.hsqldb.jdbcStatement.execute
(jdbcStatement.java:728)
at org.hsqldb.util.DatabaseManager.execute
(DatabaseManager.java:741)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(DatabaseManager.java:
461)
at java.awt.Button.processActionEvent
(Button.java:381)
at java.awt.Button.processEvent(Button.java:350)
at java.awt.Component.dispatchEventImpl
(Component.java:3526)
at java.awt.Component.dispatchEvent
(Component.java:3367)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:445)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarc
hy(EventDispatchTh
read.java:191)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(EventDispatchThre
ad.java:144)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:138)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:130)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:98)
Reason is that the class loader used is 
sun.misc.Launcher$ExtClassLoader@f38798
in Database.processCreateTrigger().
To fix, use:
Class cl = Class.forName(sClassName, true, 
ClassLoader.getSystemClassLoader());
The system class loader is then: 
sun.misc.Launcher$AppClassLoader@2f6684.
Environment:
- Windows 2000, SP3
- HSQLDB 1.7.0
- JDK 1.4.0_01-b03
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/172
HyperSQL Database Engine (HSQLDB) / Bugs / #172 server.dbname or server.database key?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After lookin at the sourcecode and noticed the the 
following use pattern on database property.
Should HsqlServerFactory use &quot;server.database&quot; 
property name as well?
HsqlServerFactory.createHsqlServer method:
props.setProperty(&quot;server.dbname&quot;, dbFilePath);
Server.setProperties method:
serverProperties.setPropertyIfNotExists
(&quot;server.database&quot;, &quot;test&quot;);
Server.openDB() method:
String database = serverProperties.getProperty
(&quot;server.database&quot;);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/173
HyperSQL Database Engine (HSQLDB) / Bugs / #173 getScale returns wrong value
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug refers to release 1.7.0-RC3.
Suppose you have a table with a field like this:
quantity decimal(10,4)
If you do a select on this table and look into the 
ResultSetMetadata you can find that the getScale 
method returns always 0 instead of 4 (the getColumns 
method in DatabaseMetadata reports the correct value of 
4)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/174
HyperSQL Database Engine (HSQLDB) / Bugs / #174 ArrayIndexOutOfBoundsException in RC2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JBuilders Database Pilot came up with this exception
(recreated by the attached script):
java.lang.ArrayIndexOutOfBoundsException: 0 &gt;= 0
at java.util.Vector.elementAt(Vector.java:427)
at org.hsqldb.Table.getIndex(Table.java:1479)
at org.hsqldb.DatabaseInformation.getSystemTable
(DatabaseInformation.java:557)
at org.hsqldb.Database.getTable 
Database.java:656)
at org.hsqldb.Parser.parseTableFilter
(Parser.java:1162)
at org.hsqldb.Parser.parseSelect(Parser.java:882)
at org.hsqldb.Parser.processSelect
(Parser.java:134)
at org.hsqldb.Database.execute(Database.java:442)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:203)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/175
HyperSQL Database Engine (HSQLDB) / Bugs / #175 jdbc.get_column_name=false in 1.7.1RC3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Don't think jdbc.get_column_name=false is
working in rc3, did work in 1.7.0
Joe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/176
HyperSQL Database Engine (HSQLDB) / Bugs / #176 org.hsqldb.Library.left
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
call left('hello',2)
SQL 
Error 
-----------------------------------------
-----------------------------------------
--------- 
Unexpected token: LEFT in statement [call left
('hello',2)] / Error Code: -11 / State: 37000 
1 row(s) in 0 ms
This is using 1.7.1 RC1. Is this still an issue in 
RC3?
I assume this is a collision between LEFT JOIN and 
the left(s,count) library method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/177
HyperSQL Database Engine (HSQLDB) / Bugs / #177 Wrong results in LEFT OUTER JOIN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A LEFT OUTER JOIN does deliver wrong results when 
filtering for IS NULL. The example is using the following 
simple ER and data: 
CREATE TABLE a (id INTEGER PRIMARY KEY);
CREATE TABLE b (id INTEGER, aid INTEGER);
ALTER TABLE b ADD CONSTRAINT fk FOREIGN 
KEY (aid) REFERENCES a (id);
INSERT INTO a VALUES (0, 'aName0');
INSERT INTO a VALUES (1, 'aName1');
INSERT INTO b VALUES (0, 'bName', 0);
The following SQL works fine:
SELECT * FROM a LEFT OUTER JOIN b ON (a.id = 
b.aid);
and returns:
0, 0, 0
1, &lt;NULL&gt;, &lt;NULL&gt;
The following doesn't:
SELECT * FROM a LEFT OUTER JOIN b ON (a.id = 
b.aid) WHERE b.id IS NULL;
returns:
0, &lt;NULL&gt;, &lt;NULL&gt;
1, &lt;NULL&gt;, &lt;NULL&gt;
I would expect:
1, &lt;NULL&gt;, &lt;NULL&gt;
Leaving off ALTER TABLE, PRIMARY KEY does not 
change anything.
Using v1.7.1rc1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/178
HyperSQL Database Engine (HSQLDB) / Bugs / #178 RC3 and &quot;Statement Unreachable&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
classes14:
[javac] Compiling 2 source files to C:\hsqldb\classes
[javac] C:\hsqldb\src\org\hsqldb\Session.java:431: 
unreachable statement
[javac] return bReadOnly || 
dDatabase.bReadOnly;;
[javac] ^
[javac] Note: Some input files use or override a 
deprecated API.
[javac] Note: Recompile with -deprecation for details.
[javac] 1 error
JDK 1.4.1 FCS, ANT 141.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/179
HyperSQL Database Engine (HSQLDB) / Bugs / #179 Forte 4: SQLState exception in 1.7.1RC3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get this exception when Forte 4 starts up. I don't know
what I can do to get some more detailed information about
the exception.
0:trying to connect user
SQLException: SQLState(S1000) vendor code(-37)
1:trying to connect user sa
1:DISCONNECT
2:trying to connect user sa
2:DISCONNECT
1:disconnected sa
2:disconnected sa
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/180
HyperSQL Database Engine (HSQLDB) / Bugs / #180 Including null in select with where &gt;or&lt;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb seems to include rows with null value for 
attributes with a WHERE equal/smaller/bigger operation 
as in this example:
create table testme ( a INTEGER );
insert into testme values ( -1 );
insert into testme values ( 0 );
insert into testme values ( 1 );
insert into testme values ( null );
select count(*) from testme where ( a &lt; 0 );
Both Oracle as well as mySQL return 1 (the -1 value) 
and do not include the &quot;null&quot; value, which &quot;seems 
logical&quot; as well. However, hsqldb returns 2. I believe 
this is a bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/181
HyperSQL Database Engine (HSQLDB) / Bugs / #181 default_pk name &quot;SYSTEM_ID&quot; problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i have do test hsqldb version 1.7.0 with eXist (xml db) 
but when eXist use RDBMS as storage for itself,
eXists create a table named &quot;documents&quot;.
In this &quot;documents&quot; table has &quot;SYSTEM_ID&quot; column for 
XML Document's doc-type id.
followings are the DDL for this table.
Create CACHED TABLE documents (
name varchar(100) DEFAULT '' NOT NULL,
doc_id integer DEFAULT '0' PRIMARY KEY,
children integer DEFAULT '0' NOT NULL,
doctype varchar(200),
public_id varchar(250),
system_id varchar(250),
);
you can see system_id column of this....
can i ask to change org.hsqldb.Table.DEFAULT_PK 's 
value with other value can not have chance to conflict... 
next version of hsqldb...?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/182
HyperSQL Database Engine (HSQLDB) / Bugs / #182 hsqlServlet not working with Resin
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had some problems using the hsqlServlet in the Resin 
application server. 
See:
http://www.caucho.com/quercus/bugtrack/view.xtp?
bugreport_id=658
It seems that the servlet code is not correct. I already 
included the code that fixes the problem.
I hope it can be fixed.
regards,
Dennis
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/183
HyperSQL Database Engine (HSQLDB) / Bugs / #183 1.7.1 RC 4: type conversion no longer works
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sqlline&gt; create table foo (id int)
0 rows affected
sqlline&gt; insert into foo values (10)
1 rows affected
sqlline&gt; select * from foo where id=10
---
ID 
---
10 
---
2 rows selected
sqlline&gt; select * from foo where id=10.0
Error -16: Wrong data type: 37000 Wrong data type: 10.0
in statement [select * from foo where id=10.0]
(state=37000)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/184
HyperSQL Database Engine (HSQLDB) / Bugs / #184 shutdown compact destroys database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
During a SHUTDOWN COMPACT; I get the following 
error;
Error: java.sql.SQLException: File input/output error: 
File input/output error: reading: java.io.EOFException in 
statement [SET TABLE EDGES INDEX '1981936 
1461232 2430320 9578'] in statement [SET MAXROWS 
100;shutdown compact]
The error occurs in very particular circumstances, when 
a ALTER TABLE is used to add a CONSTRAINT to an 
existing table, and something (?) with the order of table 
generation is not as HSQLDB might expect. 
It took me some time to deduce a reproducible example. 
So the following test, creating TABLE vertices, then 
TABLE edges, works find:
--- BEGIN TEST_OK.SQL ---
DROP TABLE vertices IF EXISTS;
DROP TABLE edges IF EXISTS;
CREATE CACHED TABLE vertices (
id INTEGER IDENTITY,
name VARCHAR NOT NULL,
rank INTEGER NOT NULL,
type VARCHAR NOT NULL
);
CREATE CACHED TABLE edges (
id INTEGER IDENTITY,
parent_id INTEGER NOT NULL,
child_id INTEGER NOT NULL,
role_id INTEGER,
recursive_id INTEGER,
rank INTEGER
);
ALTER TABLE edges 
ADD CONSTRAINT fk_parent 
FOREIGN KEY (parent_id) 
REFERENCES vertices (id)
;
INSERT INTO vertices (name, rank, type) { 
VALUES ('v1', 0, 't1') 
};
INSERT INTO vertices (name, rank, type) { 
VALUES ('v2', 0, 't2') 
};
INSERT INTO edges (parent_id, child_id) { 
VALUES (0, 1) 
};
SHUTDOWN COMPACT;
--- END TEST_OK.SQL ---
However, the following case, making edges first, then 
vertices, leads to a corrupted db:
--- BEGIN TEST_BUG.SQL ---
DROP TABLE vertices IF EXISTS;
DROP TABLE edges IF EXISTS;
CREATE CACHED TABLE edges (
id INTEGER IDENTITY,
parent_id INTEGER NOT NULL,
child_id INTEGER NOT NULL,
role_id INTEGER,
recursive_id INTEGER,
rank INTEGER
);
CREATE CACHED TABLE vertices (
id INTEGER IDENTITY,
name VARCHAR NOT NULL,
rank INTEGER NOT NULL,
type VARCHAR NOT NULL
);
ALTER TABLE edges 
ADD CONSTRAINT fk_parent 
FOREIGN KEY (parent_id) 
REFERENCES vertices (id)
;
INSERT INTO vertices (name, rank, type) { 
VALUES ('v1', 0, 't1') 
};
INSERT INTO vertices (name, rank, type) { 
VALUES ('v2', 0, 't2') 
};
INSERT INTO edges (parent_id, child_id) { 
VALUES (0, 1) 
};
SHUTDOWN COMPACT;
--- END TEST_BUG.SQL ---
They both sould work as expected.
I am using 1.7.1rc5, but I met this bug already before in 
version 1.7.0, but was not able to deduce it at that time.
Thanks
Daniel Frey
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/185
HyperSQL Database Engine (HSQLDB) / Bugs / #185 Function invocation error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The invocation on stored procedures -
Function.getValue() - convert its data members using
the the Column.convertObject(Object, int) method. 
There are two problems with this invocation.
First: All numeric SQL types gets passed into the
reflection as Integers. Every attempt to use a stored
procedure that has byte, short or float arguments will
fail with a 'Function not supported' error. 
Secondly: Byte arrays gets passed passed to the
invocation as org.hsqldb.ByteArray objects instead of
byte[] instances. (This error can easily be
circumvented with a type check immediately before
invocation in the Function.getValue() method.)
Thanks for your good work
- Lars J. Nilsson
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/186
HyperSQL Database Engine (HSQLDB) / Bugs / #186 issue with system id column visibility
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Fred. Not sure if this should be considered a 
bug or a patch suggestion. I provide no code, but a 
discussion of the motivation, so here it is on Bugs:
Was just thinking a tiny bit about what you said re: 
hiding SYSTEM_ID column by renaming it to: &quot;&quot;
Here's my little test:
create table sysid_test(id int)
insert into sysid_test values(1)
select &quot;&quot; as SYSTEM_ID, * from sysid_test
SYSTEM_ID ID 
--------- -- 
0 1 
create table system_id_test ( &quot;&quot; int, id int)
SQL 
Error 
-----------------------------------------
-----------------------------------------
----------------------------------- 
Column already exists: in statement [create table 
system_id_test ( &quot;&quot; int, id int)] / Error Code: -27 / 
State: S0021 
So, its still not completely hidden: do we want to 
take the next step to unsure that it really is fully 
hidden from SQL? 
I realize that it is now pretty unlikely that anyone in 
their right mind will &quot;discover&quot; the above 
undocumented &quot;features&quot; (unless they read this ;-).
But, I presume the column still has all the quirks it 
had when it was named SYSTEM_ID and visible, so, 
in the interest of attaining true closure, I am 
wondering if there is not some very brief and 
simple additional code we could add to truly make 
it innaccessible from SQL. My initial thought on 
the matter is that one could assign the column a 
null HsqlName.name. I'm reasonably sure there is 
no way to assign or get a match to a null column 
name from SQL, so this would permanently hide it 
as well as allowing &quot;&quot; as a column name on tables 
with a system id column in the same way that it is 
allowed on tables without a system id column (yes: 
I know that is ridiculous, but at least it is 
consistent behaviour), without having to add some 
silly crutch rules to the column expression 
resolution mechanism. Are there caveats to this 
approach? If not, this is not much more than a one-
liner patch that shuts the door permanently on the 
issue, so I think we should do it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/187
HyperSQL Database Engine (HSQLDB) / Bugs / #187 wrong value from HOUR( date )
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Have table with create_dt DATE NOT NULL column. 
Note: The time is around 10:50am machine time.
First:
update table
set create_dt = NOW();
Then did:
select CREATE_DT
, HOUR( CREATE_DT ) 
, HOUR( NOW() ) from table;
returns 2002-10-16, 19, 10
The return of 19 from the HOUR( CREATE_DT ) looks 
like a bug. 
HsqlSyntax.html documentation shows HOUR(time) but 
has no indication that function is overloaded as 
HOUR(date). I would think it should be.
--------CONDITIONS
For select, I was using HSQL Database Manager as SA 
user, autocommit: true, readonly: false
Was hsqldb version, hsqldb_1_7_1_RC5 inside of hsql-
avalon application.
Machine Windows 2000 2.0 ghz
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/188
HyperSQL Database Engine (HSQLDB) / Bugs / #188 Text or mem. tables, read only db files
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using text or memory tables if *.data file is missing
and database files are read only causes errors even if
tables are small and are not modified.
In Standalone mode,
If &quot;readonly&quot; property is false, error message pops up:
File input/output error: tests/database1.properties
java.io.FileNotFoundException:
tests\database1.properties (Access is denied)
If &quot;readonly&quot; property is true, error message pops up
(depending on table type):
File input/output error: File input/output error: error
java.io.FileNotFoundException: tests/database1.data
(The system cannot find the file specified) opening
tests/database1.data in statement
[CREATE [TEXT] TABLE ...]
Workaround is to add 0 length *.data file and set
&quot;readonly&quot; to true
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/189
HyperSQL Database Engine (HSQLDB) / Bugs / #189 ? trace in CachedRow
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While testing 1.7.1 release ...
init would fail on inputstream error for
text table ...
the same db was o.k. with 1.7.1 RC5
change in CachedRow (339)
n = n.nNext;
}
oData = in.readData(tTable.getColumnTypes());
Trace.check(in.readIntData() == iPos, 
Trace.INPUTSTREAM_ERROR);
iLastAccess = iCurrentAccess++;
}
}
was commented out and tests ran o.k. ...
Did not try to figure out what the trace was for ...
Please advise.
Thanks,
Joe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/190
HyperSQL Database Engine (HSQLDB) / Bugs / #190 Outer join syntax fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following SQL statement works fine in HSQL 1.6.1 
but it fails in HSQL 1.7.x.
The statement:
SELECT 
ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_ST
RUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HI
DDEN,ULS.UNREMOVABLE,ULS.IMMUTABLE,USP.ST
RUCT_PARM_NM,USP.STRUCT_PARM_VAL
FROM 
UP_LAYOUT_STRUCT ULS 
LEFT OUTER JOIN UP_LAYOUT_PARAM USP ON 
ULS.USER_ID = USP.USER_ID AND ULS.STRUCT_ID 
= USP.STRUCT_ID
WHERE ULS.USER_ID=1 AND ULS.LAYOUT_ID=1 
ORDER BY ULS.STRUCT_ID
The error message:
Unexpected token: AND in statement [SET MAXROWS 
1000;SELECT 
ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_ST
RUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HI
DDEN,ULS.UNREMOVABLE,ULS.IMMUTABLE,USP.ST
RUCT_PARM_NM,USP.STRUCT_PARM_VAL
FROM 
UP_LAYOUT_STRUCT ULS 
LEFT OUTER JOIN UP_LAYOUT_PARAM USP ON 
ULS.USER_ID = USP.USER_ID AND ULS.STRUCT_ID 
= USP.STRUCT_ID
WHERE ULS.USER_ID=1 AND ULS.LAYOUT_ID=1 
ORDER BY ULS.STRUCT_ID]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/191
HyperSQL Database Engine (HSQLDB) / Bugs / #191 Incorrect resultsetmetadata
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All numeric types have all scale factors and displaywidths 
set to 0 when retrieved as their types. Work fine when 
retrieved as string.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/192
HyperSQL Database Engine (HSQLDB) / Bugs / #192 values in date fields change values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I compiled hsqldb v. 1.7.1 on linux with Sun's jdk
1.4.1_01 and javac. I created 3 tables with one column
of type Date and insert 2 rows.
On MS Windows 98 with Sun's jre 1.4.1_01 and produced 
database when i change time zone stored dates changes
values.
On linux GMT+2
1-1-2002 (dd-MM-yyyy)
On Windows GMT+1 (or GMT+3, but not the same as on linux)
31-12-2002
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/193
HyperSQL Database Engine (HSQLDB) / Bugs / #193 Text Table Bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have been testing the CREATE Text Table. When I enter
all INTEGER colums and shutdown the database and again
restart it , the values of the last column keeps
increasing by 7 in every row. 
My Jdk is 1.4.1 
OS Windows 2000 professional
SQL Statements were generated using the Database Manager
Hsql was started in Server mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/194
HyperSQL Database Engine (HSQLDB) / Bugs / #194 cannot select from Text Table in1.7.1 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've used Text Tables with versin 1.7.0 in a small project.
All works fine (except outer join bug).
After switching to current 1.7.1 using Text Tables no 
more 
possible. I've experimented with several different settings
without better results.
I can create an new Text Table using &quot;select * into text 
xxx from yyy&quot;
and select data from new table. (I think all doing is in 
memory until here.)
But after disconnect/connet receiving this Error 
&quot;File input/output error: reading: java.sql.SQLException: 
InputStream error in statement [SET MAXROWS 
100;select * from CCCVCCC]&quot;
when I use sthe same select.
On the other hand the meta- data of the table can be 
shown.
My Jdk is 1.3.1 
OS Windows NT
SQL Statements were generated using the Database 
Manager 
Hsql was started in Standalone mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/195
HyperSQL Database Engine (HSQLDB) / Bugs / #195 Referential integrity check fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The referential integrity check fails when a column with a 
FK is updated!
Create these tables:
CREATE TABLE A (
NAME VARCHAR(32) NOT NULL,
CONSTRAINT PK_A PRIMARY KEY (NAME)
);
CREATE TABLE B (
NAME VARCHAR(32) NOT NULL,
REF VARCHAR(32),
CONSTRAINT PK_B PRIMARY KEY (NAME),
CONSTRAINT FK1_B FOREIGN KEY (REF) 
REFERENCES A (NAME)
);
and insert these data:
INSERT INTO A VALUES ('a');
INSERT INTO B (NAME) VALUES ('b');
then HSQLDB accepts this
UPDATE B SET REF='b' where NAME='b';
but that violates the FK constraint in table B
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/196
HyperSQL Database Engine (HSQLDB) / Bugs / #196 implicit type conversion ?!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've expected that the result of following statements
in all cases will return 3.3
select 33/10 from test; fails 3
select (33-0.1+0.1)/10 from test; o.k. 3.3
select 33/10-0.1+0.1 from test; fails 3.0
select 33*0.1 from test; o.k. 3.3
Im using v1.7.1 in standard or memory mode
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/197
HyperSQL Database Engine (HSQLDB) / Bugs / #197 transaction not rolled back
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using Hsqldb 1.7.1 (latest stable). The database is
in multi-user mode with the following flags:
-trace &quot;true&quot; -silent &quot;false&quot;
If a JDBC client is interrupted abruptly then his
undergoing transaction(autocommit = false) is not
aborted (rolled back), although the server displays the
fact that it has disconnected this interrupted client!
So, the server is aware of the transaction voidness but
doesn't roll it back.
There's another thing to add here. The DatabaseMetaData
for hsql says that it supports ONLY the READ_UNCOMMITED
level of transaction isolation.
Isn't it a pitty? I personally like Hsql for it's light
load in terms of memory and cpu time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/198
HyperSQL Database Engine (HSQLDB) / Bugs / #198 features webpage needs update
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One of your online documentation pages - 
http://hsqldb.sourceforge.net/2/DocsandDev/features.html -
states that a range of _current_ restrictions _will_ be
solved by summer _2002_ (I put that paragraph at the
end of this posting).
By now, it is December-2002.
Some visitors might draw false conclusions from that
with regard to the health of this project. One might
think, that work stopped, or that work proceeds much
slower now, or that documentation is out of date. 
Eitherway, this doesn't add to the visitors (especially
hasty ones) trust into this project positively. 
BTW, from looking at various indicators I can see that
this project is proceeding very well indeed.
Additionally some visitors might be left
confused/insecure as to what restrictions there
_really_ are currently.
Thanks for your works.
Best regards.
&lt;snip&gt; 
Current restrictions are:
* GROUP BY is limited (solved by June, 2002)
* HAVING, ANY, ALL are currently not implemented
(solved by August, 2002)
* No triggers and views (some functionality here
for v .1.7 of hsqldb, coming within days)
* The size of Binary data is limited to about 32 KB
(because UTF is used) (solved by June, 2002)
* No server side cursors (here is a workaround for
selecting big results) (may already be solved)
* Empty space in the database file is not always
reused (here are the details and a workaround) (solved
by June, 2002)
* Does not yet conform to ACID or true SQL-92 or
JDBC 2 or 3 (targeted for June, 2002) 
&lt;/snip&gt;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/199
HyperSQL Database Engine (HSQLDB) / Bugs / #199 Column.java  BINARY type bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is wrong:
hTypes.put(&quot;B[&quot;, new Integer(Types.BINARY));
it should be:
hTypes.put(&quot;[B&quot;, new Integer(Types.BINARY));
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/200
HyperSQL Database Engine (HSQLDB) / Bugs / #200 Strange problem with text table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to create a text table with following code:
public static void main(String[] args) throws Exception {
Class.forName ( &quot;org.hsqldb.jdbcDriver&quot; );
Connection userDBConn = 
DriverManager.getConnection(&quot;jdbc:hsqldb:&quot; 
+ &quot;userTestDB&quot;, &quot;SA&quot;, &quot;&quot;);
Statement stmt = userDBConn.createStatement();
stmt.execute(&quot;CREATE TEXT TABLE ACCOUNT
(USERNAME CHAR(20) NOT NULL,&quot; +
&quot;PASSWORD CHAR(20) NOT NULL, &quot; +
&quot;PRIMARY KEY(USERNAME))&quot;);
stmt.execute(&quot;SET TABLE ACCOUNT SOURCE&quot; 
+ &quot;\&amp;quot;testAccounts.db;fs=|\&amp;quot;&quot;);
stmt.execute(&quot;insert into ACCOUNT&quot; 
+ &quot;(USERNAME,PASSWORD) values('foo','bar')&quot;);
ResultSet rs = stmt.executeQuery(
&quot;select * from ACCOUNT&quot;);
while(rs.next()) {
System.out.println(&quot;Row: &quot; + rs.getString(1) + 
rs.getString(2));
}
stmt.close();
userDBConn.close();
}
Table is created ok and value foo/bar is added to the 
table. After code is executed, size of testAccounts.db is 
5 bytes, it contains only text foo and line change after it. 
Password column's value bar is not added to the file. If I 
select * from account after that code is executed, it 
returns only foo for username and 0 for password. If I 
use memory table (remove &quot;text&quot; from create table 
command) everything works ok.
I have tested this with hsqldb version 1.7.1 and 1.7.2 
alpha H. Same problem with both versions. Is this just a 
stupid user error?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/201
HyperSQL Database Engine (HSQLDB) / Bugs / #201 Text file sql infinitely slow response
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was excited about the text file sql capabilities. so I decided 
to try v 1.7.1 on a 28000 record file and noted the response 
time for a select count(*) at about 4 secs on a 384MB 
850Mhz NT machine; HOWEVER, on a 350000 record file 
the response time was ghastly - the query never returned 
after 5 minutes. 
Anybody have similar problems?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/202
HyperSQL Database Engine (HSQLDB) / Bugs / #202 VIEWS and aggregate function no results (172_I)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have discovered this fast/small SQL engine yesterday - 
this is exactly I would like to use in home projects. This 
will prevent me using Access for which I have to log with 
ODBC. An other good alternative would be to choose 
mySQL but I think it too big for such a small project !
Great product - I immediately thought trying my small 
application over it transfering data (it is easy with 
transfer even if there is no Views support).
Unfortunately I was using &quot;Having&quot; and &quot;aggregate&quot; 
functions (SELECT X1,sum(X2) as Y FROM Z HAVING 
sum(X2) &gt; 0) - in 1.7.2_I you can define views with those 
functions but they don't show anything when run !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/203
HyperSQL Database Engine (HSQLDB) / Bugs / #203 Exception on insert with select from..
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unexpected token: ( in statement [insert
test case:
create table test_table
( num integer, str varchar)
create table test_table_src
( num_src integer, str_src varchar)
insert into test_table_src
( num_src, str_src)
values
(123, 'qwe')
insert into test_table
( num, str)
(select 123, str_src from test_table_src )
and result is
SQL 
Error  
Unexpected token: ( in statement [insert into test_table
( num, str)
(select 123, str_src from test_table_src )
] / Error Code: -11 / State: 37000 1 row(s) in 0 ms
Serg
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/204
HyperSQL Database Engine (HSQLDB) / Bugs / #204 dup idx name on diff. tbls not allowed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the following 4 SQL commands are issued via JDBC the
last one will result in an SQLException. Since the 2nd
index is on the table bar it should not conflict with
one of the same name on foo.
CREATE TABLE foo (myColumn int, foocol int, primary
key (myColumn, foocol));
CREATE TABLE bar (myColumn int, barcol int, primary
key (myColumn, barcol));
CREATE INDEX IdxMyCol on foo (myColumn);
CREATE INDEX IdxMyCol on bar (myColumn);
Error:
SQLException(Index already exists in statement [CREATE
INDEX IdxMyCol on bar (myColumn)])
Details:
Server was started out of the box using the
runServer.bat on a Win2K machine. 2 tests were
conducted. Both the in memory database and the on disk
database. For the on dist test a database name of
&quot;test&quot; was used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/205
HyperSQL Database Engine (HSQLDB) / Bugs / #205 previous() does't work when afterlast
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When you do this:
...
System.out.println(&quot;next next next&quot;);
while(rset.next())
System.out.println(...);
System.out.println(&quot;previous previous previous&quot;);
while(rset.previous())
System.out.println(...);
the output must be:
next next next
1
2
3
4
...
previous previous previous
...
4
3
2
1
It doesn't work because previous returns false when 
afterLast condition ocurrs.
I think the problem is the order of condition evaluation at 
jdbcResultSet.java. 
If you move up afterlast condition evaluation (before 
Empty resultset or no valid row) and recompile the 
output is OK. I don't know why.
HSQLDB version is 1.7.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/206
HyperSQL Database Engine (HSQLDB) / Bugs / #206 GROUP BY with SUM() returns fantom row
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using ALPHA-J on Win2K, Sun JDK 1.4.1_01
When the GROUP BY and SUM() are used on an empty table
a row of nulls is returned.
create table foo (word varchar(20), fooi integer);
select word, sum(fooi) from foo group by word;
returns... (null,null)
select word from foo group by word;
returns an empty result set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/207
HyperSQL Database Engine (HSQLDB) / Bugs / #207 Boolean object failed to be serialized
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey I guess Fred,
the following tests failed with the exception down.
Class.forName(&quot;org.hsqldb.jdbcDriver&quot;);
Connection conn = DriverManager.getConnection
(&quot;jdbc:hsqldb:hsql://localhost&quot;, &quot;sa&quot;, &quot;&quot;);
String sqlStatement = &quot;insert into AVMerkmalszustand 
(ID_Parent, ID_AttributeDefinition, Value, 
SerializedObject) Values (?, ?, ?, ?)&quot;;
PreparedStatement stat = conn.prepareStatement
(sqlStatement);
stat.setObject(1, new Integer(1)); // ID_Parent
stat.setObject(2, new Integer(1)); // 
ID_AttributeDefinition
stat.setObject(3, new String (&quot;Ein Test&quot;));
stat.setObject(4, new Boolean (true)); // OTHER
stat.execute();
The coloumn 4 is from type Other.
The exception is:
java.sql.SQLException: Invalid escape character: 
hexadecimal string contains non hex character in 
statement [insert into AVMerkmalszustand (ID_Parent, 
ID_AttributeDefinition, Value, SerializedObject) Values 
(1, 1, 'Ein Test', TRUE)]
If I use a 
stat.setObject(4, new Boolean (true), Types.OTHER);
It works fine.
Alex
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/208
HyperSQL Database Engine (HSQLDB) / Bugs / #208 GRANT before CREATE VIEW + ISNULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my test application, I have re-written some fine views - 
and noticed these 2 points :
1-In script file, GRANT SELECT ON view_XY TO 
PUBLIC is done before CREATE VIEW view_XY AS ... 
this means, I got often errors and I've to correct the 
script file before starting database server (I am running in 
server mode).
2. How is working ISNULL(x,y) - as I didn't make it - I've 
used CASEWHEN(x,y,z) ! What do you think ? Is this 
command broken or I should exercice a bit more ?
Yours
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/209
HyperSQL Database Engine (HSQLDB) / Bugs / #209 Slow query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have provided a DB and query. The query executes 
very slowly. However, if I break it up into several smaller 
queries that do the same thing, they execute much 
faster (also included). Both queries create only 448 
rows. My assumption is that the query optimizer isn't 
working correctly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/210
HyperSQL Database Engine (HSQLDB) / Bugs / #210 Incorrect number of rows in GROUP BY query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A query with a MIN() aggregate function and a GROUP BY 
clause, where there are no rows that qualify for the 
WHERE clause, returns one row with only null values.
According to ISO 9075:1999, part 2, subclause 7.11,
&quot;&lt;query specification&gt;&quot;, general rule 1bI, such a query 
should return no rows:
&quot;If T has 0 (zero) groups, then the result of the &lt;query 
specification&gt; is an empty table&quot;.
Example:
SELECT id, MIN(date_of_birth)
FROM person
GROUP BY id
This query returns a row with two null values, when table 
&quot;person&quot; is empty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/211
HyperSQL Database Engine (HSQLDB) / Bugs / #211 Unhappy with group by
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Technically this is a bug, because of the documentation, but
it may be an oversight:
our SQL generator uses &quot;...group by x...&quot; where x is a 
column number containing an expression. 
Under HSQLDB if the expression is a date operator (e.g 
quarter(&lt;date&gt;) ) this does not work (SQL error).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/212
HyperSQL Database Engine (HSQLDB) / Bugs / #212 Index not dropped when table dropped.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have an application that will periodically drop and
recreate a table. I find that in one particular case
this seem to fail regularly as an index gets left behind. 
When I execute the following script it will
consistantly fail.
create table WordTable( excludeWord INTEGER(1), soundex
varchar(4), word varchar(215), primary key( word ));
create index WTsoundexIdx on WordTable( soundex );
create index WTexcludeIdx on WordTable( excludeWord );
drop table WordTable;
create table WordTable( excludeWord INTEGER(1), soundex
varchar(4), word varchar(215), primary key( word ));
create index WTsoundexIdx on WordTable( soundex );
create index WTexcludeIdx on WordTable( excludeWord );
I get the following when the above is executed...
01:38:22] Using Driver Class(org.hsqldb.jdbcDriver)
Version 1.7
[01:38:22] Driver States that it is not JDBC Compliant,
Some Functions May Not Work Correctly
[01:38:23] Connection to iSQL Service [hsqldb] is
sucessful.
[01:38:37] Executing Statement (create table WordTable(
excludeWord INTEGER(1), soundex varchar(4), word
varchar(215), primary key( word ))).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create index
WTsoundexIdx on WordTable( soundex )).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create index
WTexcludeIdx on WordTable( excludeWord )).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (drop table WordTable).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create table WordTable(
excludeWord INTEGER(1), soundex varchar(4), word
varchar(215), primary key( word ))).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create index
WTsoundexIdx on WordTable( soundex )).
[01:38:37] frmiSQLMain::handleSQLException()
[01:38:37] Exception :: SQLException(Index already
exists in statement [create index WTsoundexIdx on
WordTable( soundex )])
[01:38:37] Executing Statement (create index
WTexcludeIdx on WordTable( excludeWord )).
[01:38:37] Rows Affected (0).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/213
HyperSQL Database Engine (HSQLDB) / Bugs / #213 foreign-key constraint test failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following foreign-key constraint test failed:
// hsqldb version Version 1.7.1 released on 5 October 
2002 
// overview test:
// create table person
// insert row
// create table address
// insert row
// insert row
// -- start test--
// insert row which should fail 
// update row which should fail, turns out to be 
successful !
// -- end test --
// drop table Address;
// drop table Person;
create table Person (
personID INTEGER,
firstname VARCHAR(30),
lastname VARCHAR(30),
dateOfBirth DATE,
constraint person_pk primary key (personID),
constraint person_sk1 unique(firstname, lastname)
);
insert into person (personID, firstname, lastname, 
dateOfBirth)
values (1, 'albert', 'everts', '1961-01-01');
create table Address (
addressID INTEGER,
streetname VARCHAR(30),
housenumber INTEGER,
city VARCHAR(30),
personID INTEGER,
constraint address_pk primary key (addressID),
constraint address_sk1 unique(streetname, 
housenumber, city),
constraint address_person_fk foreign key (personID) 
references person(personID)
);
insert into address (addressID, streetname, 
housenumber, city, personID)
values (1, 'street', 123, 'amsterdam', 1);
insert into address (addressID, streetname, 
housenumber, city, personID)
values (2, 'lane', 987, 'amsterdam', 1);
SET AUTOCOMMIT FALSE;
SET READONLY FALSE;
SET REFERENTIAL_INTEGRITY TRUE;
-- this should fail because personID 123 does not exist
insert into address (addressID, streetname, 
housenumber, city, personID)
values (3, 'square', 456, 'amsterdam', 123);
-- OK : Integrity constraint violation: 
ADDRESS_PERSON_FK
-- this should fail because personID 123 does not exist
update address 
set
personID = 123
where addressID = 1;
-- FAIL: the test failed, because the update was 
successful !!!
COMMIT;
CHECKPOINT;
Can you please solve this issue? 
(btw: other tests concerning foreign keys I tried, were 
successful ! )
Thanks!
Regards,
Albert
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/214
HyperSQL Database Engine (HSQLDB) / Bugs / #214 Binary data and 'in' operator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Actually, I've found two bugs. Please, see the following 
script:
-------------------------------------------------------------------
--Create two tables (same structure)
create table test_a (oid BINARY(2),data varchar(10));
create table test_b (oid BINARY(2),data varchar(10));
--Insert data into table_a
insert into test_a values('0001','A' );
insert into test_a values('0002','B' );
insert into test_a values('0003','C' );
insert into test_a values('0004','D' );
--Insert data into table_b (first and second rows of 
table_a)
insert into test_b values('0001','A' );
insert into test_b values('0002','B' );
-------------------------------------------------------------------
The following statements must produce the same
results (each statement must produce two rows):
-------------------------------------------------------------------
-- Set 1
select * from test_b where data in (select data from 
test_a);
select * from test_a where data in (select data from 
test_b);
-- Set 2
select * from test_b where oid in (select oid from test_a);
select * from test_a where oid in (select oid from test_b);
-- Set 3
select * from test_b where rawtohex(oid) in (select 
rawtohex(oid) from test_a);
select * from test_a where rawtohex(oid) in (select 
rawtohex(oid) from test_b);
-- Set 4
select * from test_b where rawtohex(test_b.oid) in 
(select rawtohex(test_a.oid) from test_a);
select * from test_a where rawtohex(test_a.oid) in 
(select rawtohex(test_b.oid) from test_b);
-------------------------------------------------------------------
However, the output is:
Set 1 (works fine)
-------------------------------------------------------------------
OID DATA 
--------- ---- 
[B@158bb8 A 
[B@7f4ec B 
2 row(s) in 10 ms
OID DATA 
--------- ---- 
[B@1836ed A 
[B@3e0ebb B 
2 row(s) in 10 ms
-------------------------------------------------------------------
Set 2 (doesn't work. Problem with binary data and using 
of 'in'? BUG 1!):
-------------------------------------------------------------------
OID DATA 
--- ---- 
0 row(s) in 0 ms
OID DATA 
--- ---- 
0 row(s) in 0 ms
-------------------------------------------------------------------
Set 3 (Trying to work arround set 2. Works horrible. 
I think rawtohex confuses the inner select &quot;oid&quot; with the 
outer &quot;oid&quot; and allways returns true. BUG 2!)
-------------------------------------------------------------------
OID DATA 
--------- ---- 
[B@158bb8 A 
[B@7f4ec B 
2 row(s) in 10 ms
OID DATA 
--------- ---- 
[B@1836ed A 
[B@3e0ebb B 
[B@39443f C 
[B@2fae45 D 
4 row(s) in 0 ms
-------------------------------------------------------------------
Set 4 (trying to work around Set 3 + Set 1 problem) 
works fine (output == set 1)
-------------------------------------------------------------------
OID DATA 
--------- ---- 
[B@158bb8 A 
[B@7f4ec B 
2 row(s) in 10 ms
OID DATA 
--------- ---- 
[B@1836ed A 
[B@3e0ebb B 
2 row(s) in 20 ms
-------------------------------------------------------------------
Ok, that's all. I hope you solve this soon as possible.
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/215
HyperSQL Database Engine (HSQLDB) / Bugs / #215 Text Table Problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using text tables, the last column doesn't (on my 
system) get persisted to the files. When the server is 
shutdown and restarted, the missing column causes an 
exception.
My System:
Win2k SP3
Java 1.4.1
HSQLDB 1.7.1
To Reproduce Bug:
Start attached DB in Server Mode
Open Manager and send CHECKPOINT cmd
Shutdown DB
Examine the CSV and note the absence of the last 
column.
Start DB
Open Manager app
SELECT * FROM groupone
Exception thrown in server window:
java.lang.ClassCastException
at org.hsqldb.DatabaseRowOutput.writeData
(Unknown Source)
at org.hsqldb.Result.getBytes(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/216
HyperSQL Database Engine (HSQLDB) / Bugs / #216 Text Table Field Concatenation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 1.7.2 Alpha L 
Zero-length characters fields when concatenated with 
non-null fields yield result in null or zero-length string.
For example:
SELECT (Brand + Description + Info) AS Descr from 
MODEL
If any of the concatenantion fields are zero-length then 
Descr will be zero-length.
Using the parameter: empty_is_null=false
Thank You
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/217
HyperSQL Database Engine (HSQLDB) / Bugs / #217 shutdown compact corrupts data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After doing a &quot;shutdown compact&quot; in Version 1.72aL I 
read the lines
error in /project/db/mp3.script line: 2
General error in statement [CREATE CACHED TABLE 
ARTIST ...
at System.out.
After that all data files are gone and the unprocessed 
tables are not in the script any more.
It was possible to track it somewhat down; it seems an 
index gets inserted which wasn't removed in
org.hsqldb.Database$DatabaseObjectNames.addName
DDL to reproduce:
CREATE CACHED TABLE base (
base int not null primary key,
name varchar not null,
path varchar not null,
removable bit not null
);
CREATE CACHED TABLE artist (
artist int not null primary key,
name varchar not null,
simplename varchar not null,
unique (name)
);
CREATE INDEX artistsimplename ON artist
(simplename);
CREATE CACHED TABLE title (
title int not null primary key,
name varchar not null,
simplename varchar not null,
unique (name)
);
CREATE INDEX titlesimplename ON title(simplename);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/218
HyperSQL Database Engine (HSQLDB) / Bugs / #218 dates are not being normalized in CURDATE()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the DATE SQL type is being treated exactly 
like the TIMESTAMP type. Instead, the DATE data 
should be &quot;normalized&quot;, as per the java.sql.Date class 
documentation:
&quot;To conform with the definition of SQL DATE, the 
millisecond values wrapped by a java.sql.Date 
instance must be 'normalized' by setting the hours, 
minutes, seconds, and milliseconds to zero in the 
particular time zone with which the instance is 
associated.&quot;
The function curdate() is not normalizing the dates it 
returns. This allows for an &quot;invalid&quot; date to be created. 
Here is an example of this bug:
create table date_bug( date DATE )
insert into date_bug values ( curdate() )
select * from date_bug where date &lt;= curdate()
-- should return 1 row - works ok
select * from date_bug where date &gt;= curdate()
-- should return 1 row - returns none
select * from date_bug where date &lt;= '2003-01-23'
-- manually specifying today´s date should yield one 
row, but instead none are returned
select * from date_bug where date &gt;= '2003-01-23
-- manually specifying today´s date should yield one 
row, works ok
Hope this helps. If you need further information, 
contact me at sieira@usa.net.
Thanks for the great program.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/219
HyperSQL Database Engine (HSQLDB) / Bugs / #219 Group By returning null values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a simple table like this:
create table test (a varchar(100),b numeric)
and then you execute this:
select a, sum(b)
from test
group by a
you will get a single row with null values. The expected 
result is no rows.
If you execute 
select a, sum(b)
from test
you will get a single row with null values. The expected 
result is a SQL error like this &quot;not a single-group group 
function&quot;.
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/220
HyperSQL Database Engine (HSQLDB) / Bugs / #220 LEFT JOIN regression from Alpha J =&gt; L
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Alpha J, I had built several queries using LEFT JOIN 
to detect inequality in table1.id = table2.id such a way 
table2.id is returned null !
On application testing with (Alpha L), I got bad results 
(null are not shown) : Alpha K, Alpha L and even latest 
Alpha M !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/221
HyperSQL Database Engine (HSQLDB) / Bugs / #221 now() doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Whats happened with now()? It doesn't work in alpha_m.
Some changes at Tokenizer.wasValue() are in conflict 
with &quot;now()&quot;. If you execute:
select now() from dual
will get:
Unexpected token: ( in statement [select now() from 
dual] / Error Code: -11 / State: 37000
To solve this problem I removed sToken.equals(&quot;NOW&quot;) 
from return (at line 253 of Tokenizer.java). It works but I 
don't know the effects of this change.
Why &quot;NOW&quot; is there? Future features like Oracle's 
SYSDATE?
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/222
HyperSQL Database Engine (HSQLDB) / Bugs / #222 Log-Thread not exiting if any connect fails before
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
Using the henplus JDBC Shell 
&lt;http://henplus.sourceforge.net/&gt; 
I noticed, that the Logger thread in hsqldb is not exiting 
properly, if any of the connect attempts to a database 
failed because of user/password failure for instance. 
Why I noticed this with henplus is, because henplus first 
tries to connect to the database just with the JDBC-URL 
alone and if this fails, prompts for the password. 
This means, that the first connect will always fail, while 
the second will succeed, if the user/password is right. 
The problem is, that hsqldb starts the Logger thread with 
the first attempt to connect to the database and 
increments the usage count .. however that connection 
never gets used, because connecting fails and throws 
an SQL-Exception (see 
jdbcConnection::openStandalone()). This means, that the 
usage count is always the number of all _attempted_ 
connects not real connects. 
I did a simple fix, see attached patch. This patch 
initializes the usage count with zero and _after_ the 
connect is successful (i.e. if no Exception has been 
thrown), the usage count is incremented. This will make 
sure, that the last active connection, that is close()ed, 
will shut down the Logger thread correctly. 
Note, however, that this is not a complete fix to the 
problem. If we get _any_ connection that connection that 
connects correcly, then this solution will work, since the 
database is removed and the Logger thread is closed in 
the close() of that very connection if the usage count 
turns out to be zero. However, if _no_ connection will 
succeed, then we will still have one database in the 
hashtable since no close() will run through (this is 
another problem: in finalize(), close() is called; however if 
this is a jdbcConnection that failed to connect, then the 
session is 'null' and executing a shutdown on that 
session will fail as well -- so the finalizer thread throws a 
NullPointerException. The finalaizer-Thread better should 
catch any Throwable instead of only a SQL-Exception).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/223
HyperSQL Database Engine (HSQLDB) / Bugs / #223 LEFT JOIN AND Null Values (ALPHA J)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example :
DROP TABLE T_BOSS IF EXISTS;
DROP TABLE T_EMPLOYEE IF EXISTS;
CREATE TABLE T_BOSS (FIRST VARCHAR,LAST 
VARCHAR);
CREATE TABLE T_EMPLOYEE (FIRST 
VARCHAR,LAST VARCHAR);
INSERT INTO T_BOSS VALUES ('Ludovic','ANCIAUX');
INSERT INTO T_EMPLOYEE VALUES 
('Ludovic','ANCIAUX');
INSERT INTO T_EMPLOYEE VALUES ('Bill','GATES');
SELECT * FROM T_EMPLOYEE LEFT JOIN T_BOSS 
ON 
T_EMPLOYEE.FIRST = T_BOSS.FIRST WHERE 
T_BOSS.FIRST is Null;
You should have
&quot;Bill&quot;,&quot;Gates&quot;,Null,Null
but instead you got :
&quot;Ludovic&quot;,&quot;Anciaux&quot;,Null,Null
&quot;Bill&quot;,&quot;Gates&quot;,Null,Null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/224
HyperSQL Database Engine (HSQLDB) / Bugs / #224 Error with aggregate functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The statement 
select sum(field1) * sum(field2) from table1 
..works if field1 and field2 is of type FLOAT, but if it is of 
type BIGINT, it does not work. The I get this error: 
S1000 General error java.lang.ClassCastException: 
java.lang.Long in statement ...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/225
HyperSQL Database Engine (HSQLDB) / Bugs / #225 Strange Exceptions with Alpha M
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey,
I'm using the 1.7.2 since a couple of days in my test 
enviorment. So far everything fine.
Since yesterday I'm getting strange exceptions:
java.sql.SQLException: General error
at 
sun.jdbc.odbc.JdbcOdbc.throwGenericSQLException
(JdbcOdbc.java:6235)
at sun.jdbc.odbc.JdbcOdbc.SQLFreeEnv
(JdbcOdbc.java:2776)
at sun.jdbc.odbc.JdbcOdbcDriver.closeConnection
(JdbcOdbcDriver.java:839)
at sun.jdbc.odbc.JdbcOdbcConnection.close
(JdbcOdbcConnection.java:733)
at 
de.tc.base.datasourceManager.DatasourceConnection.cl
ose(DatasourceConnection.java:129)
at 
de.tc.base.datasourceManager.DatasourceConnection.fi
nalize(DatasourceConnection.java:156)
at java.lang.ref.Finalizer.invokeFinalizeMethod
(Native Method)
These General error exceptions occours too if I try to 
run the following script at once. If I do it in two steps it 
works.
drop table Literaturreferenz if exists;
create cached table Literaturreferenz
(
ID int not null identity,
ID_Literaturverweis int not null,
ID_Merkmalsgruppe int not null,
ID_Taxonomie int not null,
ID_Qualifier int null
);
alter table Literaturreferenz ADD CONSTRAINT 
fkLiteraturverweis foreign key (ID_Literaturverweis) 
references Literaturverweis (ID) on delete cascade;
alter table Literaturreferenz ADD CONSTRAINT 
fkMerkmalsgruppe foreign key (ID_Merkmalsgruppe) 
references Merkmalsgruppe (ID) on delete cascade;
alter table Literaturreferenz ADD CONSTRAINT 
fkTaxonomie foreign key (ID_Taxonomie) references 
Taxonomie (ID) on delete cascade;
alter table Literaturreferenz ADD CONSTRAINT 
fkQualifier foreign key (ID_Qualifier) references Qualifier 
(ID) on delete cascade;
If I do the constraints into the create table definition the 
whole create won't work.
These general Exception seemed not to be very 
important becauseI can still work with the database and 
be happy. But these exception above occoured after an 
insert of 32.000 records and that's was strange because 
all records are in the database (for my luck)
Alex
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/226
HyperSQL Database Engine (HSQLDB) / Bugs / #226 Driver.connect not verifying user/password
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Build: 1.7.2 
Email: kyle@lucentradius.com
If I connect to the Server with an invalid user or
invalid password (with a good username) I get a
connection, but the next db access via the connection
fails with a:
java.sql.SQLException: User not found: SAS
This exception should be thrown from the connect method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/227
HyperSQL Database Engine (HSQLDB) / Bugs / #227 Transaction, UK constraint, Rolback produce lost of data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I found some problems while using last stable version of 
hsqldb (1.7.1.).
Transaction and Unique Constraint violation and 
Rollback could produce unreliable db, and lost of data.
I try this (from Database Manager):
CREATE TABLE TUKR(
ID integer NOT NULL PRIMARY 
KEY,
NAME varchar(20) NOT NULL,
VALUE integer,
CONSTRAINT TUKR01
UNIQUE (NAME)
);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(1, 'Name 1', 1);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(2, 'Name 2', 2);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(3, 'Name 3', 3);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(4, 'Name 4', 4);
SET AUTOCOMMIT FALSE;
UPDATE TUKR
SET NAME='Name 1'
WHERE ID=4;
// unique constraint violation occures
// off course in general case try:
ROLLBACK;
//S1000 General error java.lang.NullPointerException 
in ... Code -40/S1000
After that depend of the amount and type of data in 
destination table (in this case TUKR), some data would 
be lost, additonaly many other commands produce 
same S1000 error (including SHTUDOWN).
From JDBC connection behaviour is exactly the same.
PK violation lads to similar results.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/228
HyperSQL Database Engine (HSQLDB) / Bugs / #228 DatabaseManagerSwing
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I recently downloaded/installed hsqldb(1_7_1). I 
tried running the DatabaseManagerSwing class and 
get the following:
Exception in thread &quot;main&quot; 
java.lang.NullPointerException at 
javax.swing.ImageIcon.&lt;init&gt;(ImageIcon.java:138)
at org.hsqldb.util.CommonSwing.getIcon(Unknown 
Source)
at org.hsqldb.util.DatabaseManagerSwing.main
(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.main
(Unknown Source)
It apppears&quot;hsqldb.gif&quot; is not in the jar. Where did I 
go wrong or was it mistakenly left out of the package?
Thanks,
Frank
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/229
HyperSQL Database Engine (HSQLDB) / Bugs / #229 Foreign key constraint error with trees
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The foreign key constraint does not work correctely
when used within one table.
Example: The table A below is used to create a tree
structure in a database table.
DROP TABLE A;
CREATE TABLE A (
ID INTEGER PRIMARY KEY,
ID_PARENT INTEGER,
PAYLOAD VARCHAR( 100 ),
CONSTRAINT TREE_CONST FOREIGN KEY( ID_PARENT )
REFERENCES A( ID )
);
It should be possible to fill the table with the nodes
of the tree:
INSERT INTO A VALUES (1,1,'ROOT');
INSERT INTO A VALUES (2,1,'NODE 1' );
INSERT INTO A VALUES (3,1,'NODE 2' );
...
Though the first insert would create a legal table
contents, it creates an SQL Error: 
--------------------------------------------------------------------------------------------------------------------------------------
Integrity constraint violation: TREE_CONST table: A in
statement [INSERT INTO A VALUES (1,1,'ROOT');
] / Error Code: -8 / State: 23000 
Workaround:
insert the first line directely into the hsqldb.script
file, restart hsqldb. This creates the root node, all
other inserts work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/230
HyperSQL Database Engine (HSQLDB) / Bugs / #230 error 23000 after alter table with PK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I am using HSQLDB version 1.7.1.
I am running the following:
//-----------------------------------------------------
//drop table b;
//drop table a;
create table a
(
id integer primary key
);
create table b 
(
id integer, 
id_a integer,
CONSTRAINT constraint1 
FOREIGN KEY(id_a) REFERENCES a(id)
);
insert into a (id) values (1);
insert into a (id) values (2);
insert into b (id,id_a) values(100,1);
alter table a add column amount integer default 0 not 
null;
insert into b (id,id_a) values(100,2);
//-----------------------------------------------------
The last insert to table b fails with error 23000 - Integrity 
constrains Violation.
Only stopping HSQLDB, and starting it again will allow 
that insert to work properly.
It looks like a BUG to me.
Any suggestions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/231
HyperSQL Database Engine (HSQLDB) / Bugs / #231 IDENTITY skips numbers when table updated
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think I found a bug in ALPHA M:
I have noticed in my application that a table with an 
IDENTITY column skips numbers when any row of the 
table is updated. Here is an example:
CREATE CACHED TABLE Test
(
id INTEGER IDENTITY
str VARCHAR(80)
)
INSERT INTO Test (str) VALUES ('foo')
CALL IDENTITY() --- reports 0
INSERT INTO Test (str) VALUES ('foo')
CALL IDENTITY() --- reports 1
UPDATE Test SET str='bar' WHERE id=0
INSERT INTO Test (str) VALUES ('foo')
CALL IDENTITY() --- reports 4 instead of 2
Here is the final contents of the table:
ID STR 
-- --- 
0 bar 
1 foo 
4 foo 
Contact me at sieira@usa.net if further clarifications 
are needed.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/232
HyperSQL Database Engine (HSQLDB) / Bugs / #232 Foreign-key constraint fails on update
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have encountered a problem with foreign keys. I´ve 
read that others have mentioned this problem before me 
and that it has been fixed in later versions.
I first used hsqldb_1_7_1 and then tried the same in 
hsqldb_1_7_2_alpha but with the same result.
I´ve created to tables:
CREATE TABLE team(name VARCHAR(20) NOT NULL 
PRIMARY KEY)
CREATE TABLE user(username VARCHAR(15) NOT 
NULL PRIMARY KEY,level INTEGER NOT 
NULL,password VARCHAR(20) NOT NULL,teamname 
VARCHAR(20) NOT NULL, CONSTRAINT fk_teamname 
FOREIGN KEY(teamname) REFERENCES team(name))
I then add a team and some users (on inserts-
statements the constraint works fine), when I try to 
update a user and changing his team to one that does 
not exist, it still works. That is the constraint has no 
effect.
Questions:
Is there any way I can work around this problem, or 
write the syntax in another way?
Is this problem supposed to be solved in the 
1_7_2_alpha-version?
Best regards / Philip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/233
HyperSQL Database Engine (HSQLDB) / Bugs / #233 DatabaseManagerSwing misses Icon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When starting org.hsqldb.util.DatabaseManager I get a
NullPointerException:
java.lang.NullPointerException
at javax.swing.ImageIcon.&lt;init&gt;(ImageIcon.java:134)
at org.hsqldb.util.CommonSwing.getIcon(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.main(Unknown
Source)
at org.hsqldb.util.DatabaseManagerSwing.main(Unknown
Source)
The reason is quite simple: There is no hsqldb.gif
under org/hsqldb/util in the JAR file (or anywhere else
in the 1.7.1 release distribution).
Could you please add that image file (and maybe even
add that icon to the AWT Database Manager)?
Otherwise your database is great. I currently use it to
replace a big fat Oracle database during development
work and regression testing :-)
Hendrik Wördehoff
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/234
HyperSQL Database Engine (HSQLDB) / Bugs / #234 NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello 
we are using Hsqldb 1.7.2. The database is 
in multi-user mode with the following flags: 
-trace &quot;true&quot; -silent &quot;false&quot;
We are getting NullPointerException in database 
window.The following test condition is observed:
To reproduce the bug, make sure HSQL database is 
running for very long time and DB is quite big.ie size of 
the database is 
FileName Size
Database.backup---&gt;22.8 MB
Database.script-----&gt;10.3 MB
Database.data------&gt;40.2 MB 
Logged in to DB as Administrator
We are using Connection pool to update 3 hsqldb 
database using type 4 driver of hsqldb.
Right below the line &quot;Listening for connections... we get..
java.lang.NullPointerException
at org.hsqldb.Session.check(Unknown 
Source)
at org.hsqldb.Parser.parseTableFilter
(Unknown Source)
at org.hsqldb.Parser.parseSelect(Unknown 
Source)
at org.hsqldb.Parser.processSelect(Unknown 
Source)
at org.hsqldb.Database.execute(Unknown 
Source)
at org.hsqldb.serverconnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java.484)
The above error occurs even for latest alpha versions 
too..
Database.properties contents are shown below:
#HSQL database
#Sat Feb 22 23:23:40 GMT+05:30 2003
sql.strict_fk=true
readonly=false
sql.strong_fk=true
hsqldb.version=1.7.2
hsqldb.log_type=0
version=1.7.2
hsqldb.cache_scale=14
sql.compare_in_locale=false
sql.month=true
hsqldb.log_size=200
modified=yes
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.2
hsqldb.compatible_version=1.7.2
sql.enforce_size=false
Is there any workaround to solve this. 
Thanks in advance
Neppo/Srini
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/235
HyperSQL Database Engine (HSQLDB) / Bugs / #235 ClassLoader problem causing file lock error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you attempt to open a connection on Windows 
through two seperate ClassLoader(CL) who each have 
their parent set to null you will get the &quot;DB in use by 
another process error&quot;. This occurs even if the first CL 
has been null'd because either the lock hasn't been 
GC'd or it has to do with Windows not releasing the lock 
properly.
The easiest way to reproduce this is to create two JUnit 
tasks which both attempt to open a connection then run 
those JUnit tasks through ANT.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/236
HyperSQL Database Engine (HSQLDB) / Bugs / #236 PowerBuilder 8.01 crashed when trying to connect to Hsqldb
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The issue could be PowerBuilder itself, but I post it here 
to see if it rings any belt.
From PowerBuilder 8 IDE, I can connect to Oracle 8,
Informix 7, and SqlAnywhere (ASA) 6 JDBC drivers.
But, when I connect to Hsqldb 1.72 rev M, then PB will 
crash.
Is it because Hsqldb does not implement 
getColumnDisplaySize nor schema? I don't know.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/237
HyperSQL Database Engine (HSQLDB) / Bugs / #237 Problems Running on NetWare 6
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
O/S: Novell NETWARE v.6.0SP2 patched to updates (noted
below)
JVM: JVM Version 1.3.1_06 patched to level noted below.
First confirmed as a JVM (*see below*) problem by
original submitter, Dick Hildreth, in the Open
discussion forum and currently under study. Mr.
Hildreth's detailed report of the problem follows,
followed by further posts from Mr. Hildreth and
Maintainer. Original Forum thread is at:
https://sourceforge.net/forum/message.php?msg_id=1912883
Problem report follows:
Background
Rows were disappearing from the hSQLdb 1.7.1 run
database. When a record was updated, all records with
key values (char type key) lexically before the
selected one would disappear. No deletes were found in
the .script file yet after doing a SELECT query, the
records would be missing. Also, running a script
command in the DatabaseManager and looking at the
resultant file, the records
would also be missing. This only occurred when the
hSQLdb client was running on the NetWare server (either
a calling program or hSQLdb's DataBaseManager program
running in the NetWare GUI). A client running on a
Windows box could run the update without exhibiting the
problem.
Running System
The above occurred on a Netware 6.0 server patched to
service pack level 2. Two post sp2 patches had been
applied: the NSS patch dated 02-01-2003/11:37AM and the
TCP patch version 6.15o. The JVM was version 1.3.1
service pack level 3 which showed the following
information under the Netware command module
java:
ˇ JVM Version 1.3.1_06
ˇ Build 03011414
ˇ Version 1.31c
ˇ Dated January 14, 2003
The problem was replicated on another server with the same 
configuration with the exception of the two post sp2
patches.
Fix
Applying a different JVM has removed this problem from
the server. The new 1.4.0 JVM (and the required new
LIBC from March 2003) has the following attributes
displayed under the Netware command module java:
ˇ JVM Version 1.4.0_02
ˇ Build 03012714
ˇ Version 1.40.03
ˇ Dated January 27, 2003
With this sole change, the loss of records ceased.
Bug report filed by dedmike.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/238
HyperSQL Database Engine (HSQLDB) / Bugs / #238 InputStream error with unique indexes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.7.1 with Sun JDK 1.4.0.03 on Windows 2000:
I'm getting inputStream errors and sometimes 
numberformat exceptions on startup of a database.
To reproduce create a new database run the attached 
create.sql script in the manager and restart the 
database. I get this error :
Server.run/init: java.sql.SQLException: InputStream 
error: InputStream error in
statement [SET TABLE IMAGE INDEX '128 128 128 1']
java.sql.SQLException: InputStream error: InputStream 
error in statement [SET TA
BLE IMAGE INDEX '128 128 128 1']
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.Log.runScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Database$Logger.openLog(Unknown 
Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.Database.&lt;init&gt;(Unknown Source)
at org.hsqldb.Server.openDB(Unknown Source)
at org.hsqldb.Server.run(Unknown Source)
at org.hsqldb.Server.main(Unknown Source)
Sometimes I get Numberformat-Exceptions when SET 
TABLE IMAGE INDEX '-1 0 -1 0' contains negative 
numbers.
If i leave out the unique index it is running fine.
Achim
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/239
HyperSQL Database Engine (HSQLDB) / Bugs / #239 Thread SQL Scripts in Help Forum
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Enclosed is the SQL Script that I do not manage to have
run by the ScriptTool. It is the same that produces the
&quot;Wrong data type or data too long in DEFAULT clause&quot;
error from my DatabaseManager thread.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/240
HyperSQL Database Engine (HSQLDB) / Bugs / #240 Wrong math
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using hsqldb 1.71.
Following is an example that the engine can produce
wrong math. This may be the result of data type (or
data precision/scale) conversion error:
drop table test4
create table test4 (id integer, cost numeric (12,2))
insert into test4 values (1, 1)
insert into test4 values (2, 2.0)
insert into test4 values (3, 3.81)
select sum(cost), sum(cost)/3 wrong, sum(cost)/3.0 
right from test4
COST WRONG RIGHT 
**** ***** ***** 
6.81 1.97 2.27 
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/241
HyperSQL Database Engine (HSQLDB) / Bugs / #241 Problem with &quot;UPDATE ...&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I haven't had time to investigate this fully, so apologies 
for the lack of detail.
I have some code which uses the HSQLDB in stand-alone 
mode. I find that when I use UPDATE to modify an entry 
in a table and subsequently COMMIT it, the modification 
is visible only for the life time of the run time. Closing 
the application and reloading it causes the pre-UPDATE 
data to be retrieved. I have tried switching to CACHED 
tables which had no effect. Looking at the .script file 
produced when the tables were uncached seemed to 
imply that the behaviour for UPDATE was implemented 
through the use of DELETE followed by INSERT and that 
the SQL that did this was not produced correctly 
(DELETEd all records in table then INSERTed the same 
record three times!).
By changing my code to use DELETE and INSERT instead 
of UPDATE. I can now get data to remain modified. I 
may have missed something here.
I look forward to seeing the inclusion of 
CONCUR_UPDATABLE. This would have made the coding 
much easier. Not complaining though. I currently have a 
RDMS for an application and it saves me from the 
nightmare of using JDBC-ODBC -&gt; Microsoft JET... which 
didn't really appeal. Keep up the good work guys!
Jon S
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/242
HyperSQL Database Engine (HSQLDB) / Bugs / #242 echo_ scripts not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't know what system you use to develop hsqldb but
echo_failure, echo_warning and similar commands are not
present on my GNU/Linux Debian system. I'm using stable
hsqldb version.
Regards,
Max
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/243
HyperSQL Database Engine (HSQLDB) / Bugs / #243 BIGINT corrupts very big negative long values.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all:
I can't store very big negative long values 
(generated by a hash function) into bigint column 
data type.
Please test it:
sql&gt; create table zz (key bigint);
sql&gt; insert into zz values (-
1514143584757176268);
sql&gt;insert into zz values (-
2578977450198231102);
sql&gt; select * from zz;
Result zz:
-1818449868
1295062978
Very big positive longs seem to be work OK.
I solve my problem storing long values as String, 
but long stored in native form will be better.
Best regards, Marcelo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/244
HyperSQL Database Engine (HSQLDB) / Bugs / #244 SQL SELECT IN operator does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
IN operator used as part of expression in SELECT sql
statement does not work with 1.7.1.a version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/245
HyperSQL Database Engine (HSQLDB) / Bugs / #245 standalone is not exclusive
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I'm using hsqldb 1.7.1 and don't figure out what's
wrong with the standalone database url.
Why is it possible to connect with DatabaseManagerSwing
to a hsql database in STANDALONE (IN-PROCES) mode
several times simultaneously??? And I can also start a
server for the same database, simultaneously , too?
Looks like a bug (the database is the same for sure).
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/246
HyperSQL Database Engine (HSQLDB) / Bugs / #246 database script file order error 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i don't know if there's any special reason why in the 
class DatabaseScript, more exactly in the method 
getScript(), the first thing you do is to iterate the vector 
tTable, ignoring temps and views....
then you dump users, and their grants to the script file
and finally you iterate one more time on tTable, to dump 
the views creation script
the problem is:
suppose sa creates tables, views, and a user, then 
grants permission for the new user on a view
if you connect as the new user you can access the 
view, but if you shutdown the engine, the next time you 
start it up it finds the grant .... on &lt;view&gt; statement 
before it finds the create view statement, so an error 
appears saying that the view is an unknown table
i suppose there's a reason about not dumping the views, 
when you dump the tables (there's a line saying &quot;// 
fredt@users 20020221 - patch 513005 by 
sqlbob@users (RMP)&quot;)
hope you fix it soon... actually i'm changing the order in 
the script manually
thanks in advance
Alejandro Gomez
agomez@cibermatica.net
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/247
HyperSQL Database Engine (HSQLDB) / Bugs / #247 ResultSetMetaData getColumnType error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ResultSetMetaData.getColumnType() returns null 
pointer exception when called, but however returns 
correct value sometimes (in another test program). 
The application program was checked using jdb to 
ensure that the correct parameter was passed to 
getColumnType. The metadata was used to implement 
the Java Swing AbstractTableModel. Other metadata 
functions also failed to return a proper value except 
getColumnCount() which returned the correct count. 
Another short program was written to test 
ResultSetMetaData.getColumnType(i) shows that the 
function worked perfectly in this case.
lks@webpres.com.my
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/248
HyperSQL Database Engine (HSQLDB) / Bugs / #248 Column size ignored
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I created a table with a char(1) column and the DB had 
no problem to insert values of much greater length.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/249
HyperSQL Database Engine (HSQLDB) / Bugs / #249 out of memory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also I created the tabled as &quot;cached&quot; the database ran 
out of memory (test.data ~25MB)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/250
HyperSQL Database Engine (HSQLDB) / Bugs / #250 count distinct rolls back when no records counted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
executing a count distinct query, when there are no 
records counted, fails. a rollback is executed an null is 
returned.
trace when there are records:
1049962192937|0|0|statement|SELECT count(distinct 
A0.ID) FROM IBANX_PERMIT A0|SELECT count
(distinct A0.ID) FROM IBANX_PERMIT A0
1049962192937|0|0|commit||
trace when there are no records:
1049962192781|16|0|statement|SELECT count(distinct 
A0.ID) FROM IBANX_PERMIT A0|SELECT count
(distinct A0.ID) FROM IBANX_PERMIT A0
1049962192796|0|0|rollback||
roger janssen
roger.janssen@ibanx.nl
iBanx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/251
HyperSQL Database Engine (HSQLDB) / Bugs / #251 Failure to fire trigger on table insert
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Operating System: Windows 2000
Service Pack: Service Pack 3
HSQL 1.7.1
IDE: Oracles JDeveloper 
JDK 1.3
Jave Compiler: Oracles's 
Hi,
I have created a database that has 2 triggers that 
should be fired on deletes and inserts operations on a 
table called FILE. The trigger for deletions works fine, 
however the trigger for insertion fails to be fired. I have 
tried various combinations i.e. be fired before and after 
insertion - but the trigger for insertion never gets fired.
I have enclosed a zip file that have the following 
directories:
.../mywork/Slide/database - conatins the HSQL 
database files. The *.bat are what is used to startup the 
database. 
../mywork/slide/slidebank/src/... all database related 
java source files for commicating to the database. 
Any further information or help - please email me
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/252
HyperSQL Database Engine (HSQLDB) / Bugs / #252 cannot have foreign key constraint on same table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is it possible to have cascading records? Each record has 
a parent record. The root record references itself.
Consider the create table statement below (which 
works), however you cannot insert the first record 
because cnt_parentid is defined not null.
create table confignodetype (
cnt_nodetypeid numeric(10) not null primary key
,cnt_parentid numeric(10) not null
,cnt_name varchar(40) not null
,constraint fk_cnt_parentid foreign key (cnt_parentid) 
references confignodetype(cnt_nodetypeid));
This does not work:
INSERT INTO confignodetype VALUES (-1,-1,'prj');
The foreign key is violated, because record id -1 does not 
exist.
Thanks
tomsk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/253
HyperSQL Database Engine (HSQLDB) / Bugs / #253 cannot use self join on unique column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found in production 1.7.1 and in ALPHA_M.
This bug is related to #722442
To reproduce do the following:
* create a table with two text fields
CREATE TABLE CONFIGUSER(USR_USERID NUMERIC NOT 
NULL PRIMARY KEY,USR_USERNAME VARCHAR NOT 
NULL,USR_PASSWORD VARCHAR NOT NULL)
* insert some values
INSERT INTO CONFIGUSER VALUES(-5,'guest','guest')
INSERT INTO CONFIGUSER VALUES(-4,'user','user')
INSERT INTO CONFIGUSER VALUES(-3,'owner','owner')
INSERT INTO CONFIGUSER VALUES(-2,'admin','xxx')
INSERT INTO CONFIGUSER VALUES(-1,'sadmin','xxx')
* select all users with their username as password
select * from configuser where usr_username = 
usr_password
OK: 3 rows selected
* create a unique index on one column
CREATE UNIQUE INDEX IDX_USERNAME ON 
CONFIGUSER(USR_USERNAME)
* select all users with their username as password
select * from configuser where usr_username = 
usr_password
ERROR: Column not found USR_PASSWORD
-------------------------------------------
I have cascading records in several tables - each record 
has a parent record in the same table - the root has 
itself as parent.
I cannot define the parent id as foreign key of the id from 
the same table.
Thanks 
tomsk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/254
HyperSQL Database Engine (HSQLDB) / Bugs / #254 CHECKPOINT DEFRAG fails on Alpha_J
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If there was no prior data activity in the script file as in:
GRANT ALL ON CLASS &quot;java.lang.Math&quot; TO PUBLIC
GRANT ALL ON CLASS &quot;org.hsqldb.Library&quot; TO PUBLIC
CREATE USER SA PASSWORD &quot;&quot; ADMIN
CREATE ALIAS MINUTE FOR &quot;org.hsqldb.Library.minute&quot;
CREATE ALIAS MONTHNAME 
FOR &quot;org.hsqldb.Library.monthname&quot;
CREATE ALIAS RIGHT FOR &quot;org.hsqldb.Library.right&quot;
CREATE ALIAS LOG10 FOR &quot;org.hsqldb.Library.log10&quot;
CREATE ALIAS BITOR FOR &quot;org.hsqldb.Library.bitor&quot;
CREATE ALIAS HEXTORAW 
FOR &quot;org.hsqldb.Library.hexToRaw&quot;
CREATE ALIAS CONCAT FOR &quot;org.hsqldb.Library.concat&quot;
CREATE ALIAS BITAND FOR &quot;org.hsqldb.Library.bitand&quot;
CREATE ALIAS MOD FOR &quot;org.hsqldb.Library.mod&quot;
CREATE ALIAS FLOOR FOR &quot;java.lang.Math.floor&quot;
CREATE ALIAS TAN FOR &quot;java.lang.Math.tan&quot;
CREATE ALIAS RTRIM FOR &quot;org.hsqldb.Library.rtrim&quot;
CREATE ALIAS CEILING FOR &quot;java.lang.Math.ceil&quot;
CREATE ALIAS UPPER FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS PI FOR &quot;org.hsqldb.Library.pi&quot;
CREATE ALIAS DEGREES FOR &quot;java.lang.Math.toDegrees&quot;
CREATE ALIAS YEAR FOR &quot;org.hsqldb.Library.year&quot;
CREATE ALIAS EXP FOR &quot;java.lang.Math.exp&quot;
CREATE ALIAS SIGN FOR &quot;org.hsqldb.Library.sign&quot;
CREATE ALIAS NOW FOR &quot;org.hsqldb.Library.now&quot;
CREATE ALIAS SPACE FOR &quot;org.hsqldb.Library.space&quot;
CREATE ALIAS DAYOFYEAR 
FOR &quot;org.hsqldb.Library.dayofyear&quot;
CREATE ALIAS ROUND FOR &quot;org.hsqldb.Library.round&quot;
CREATE ALIAS USER FOR &quot;org.hsqldb.Library.user&quot;
CREATE ALIAS RAND FOR &quot;java.lang.Math.random&quot;
CREATE ALIAS ATAN2 FOR &quot;java.lang.Math.atan2&quot;
CREATE ALIAS LEFT FOR &quot;org.hsqldb.Library.left&quot;
CREATE ALIAS ACOS FOR &quot;java.lang.Math.acos&quot;
CREATE ALIAS DATABASE 
FOR &quot;org.hsqldb.Library.database&quot;
CREATE ALIAS ASIN FOR &quot;java.lang.Math.asin&quot;
CREATE ALIAS DAYOFMONTH 
FOR &quot;org.hsqldb.Library.dayofmonth&quot;
CREATE ALIAS INSERT FOR &quot;org.hsqldb.Library.insert&quot;
CREATE ALIAS SQRT FOR &quot;java.lang.Math.sqrt&quot;
CREATE ALIAS SUBSTRING 
FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS TRUNCATE 
FOR &quot;org.hsqldb.Library.truncate&quot;
CREATE ALIAS LENGTH FOR &quot;org.hsqldb.Library.length&quot;
CREATE ALIAS RAWTOHEX 
FOR &quot;org.hsqldb.Library.rawToHex&quot;
CREATE ALIAS RADIANS FOR &quot;java.lang.Math.toRadians&quot;
CREATE ALIAS LOG FOR &quot;java.lang.Math.log&quot;
CREATE ALIAS ROUNDMAGIC 
FOR &quot;org.hsqldb.Library.roundMagic&quot;
CREATE ALIAS WEEK FOR &quot;org.hsqldb.Library.week&quot;
CREATE ALIAS REPEAT FOR &quot;org.hsqldb.Library.repeat&quot;
CREATE ALIAS LCASE FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS COT FOR &quot;org.hsqldb.Library.cot&quot;
CREATE ALIAS IDENTITY FOR &quot;org.hsqldb.Library.identity&quot;
CREATE ALIAS CURDATE 
FOR &quot;org.hsqldb.Library.curdate&quot;
CREATE ALIAS COS FOR &quot;java.lang.Math.cos&quot;
CREATE ALIAS LOCATE FOR &quot;org.hsqldb.Library.locate&quot;
CREATE ALIAS ABS FOR &quot;org.hsqldb.Library.abs&quot;
CREATE ALIAS LTRIM FOR &quot;org.hsqldb.Library.ltrim&quot;
CREATE ALIAS ASCII FOR &quot;org.hsqldb.Library.ascii&quot;
CREATE ALIAS HOUR FOR &quot;org.hsqldb.Library.hour&quot;
CREATE ALIAS DIFFERENCE 
FOR &quot;org.hsqldb.Library.difference&quot;
CREATE ALIAS SECOND FOR &quot;org.hsqldb.Library.second&quot;
CREATE ALIAS SIN FOR &quot;java.lang.Math.sin&quot;
CREATE ALIAS DAYOFWEEK 
FOR &quot;org.hsqldb.Library.dayofweek&quot;
CREATE ALIAS SOUNDEX 
FOR &quot;org.hsqldb.Library.soundex&quot;
CREATE ALIAS QUARTER 
FOR &quot;org.hsqldb.Library.quarter&quot;
CREATE ALIAS SUBSTR 
FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS CURTIME 
FOR &quot;org.hsqldb.Library.curtime&quot;
CREATE ALIAS DAYNAME 
FOR &quot;org.hsqldb.Library.dayname&quot;
CREATE ALIAS UCASE FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS ATAN FOR &quot;java.lang.Math.atan&quot;
CREATE ALIAS MONTH FOR &quot;org.hsqldb.Library.month&quot;
CREATE ALIAS POWER FOR &quot;java.lang.Math.pow&quot;
CREATE ALIAS CHAR FOR &quot;org.hsqldb.Library.character&quot;
CREATE ALIAS LOWER FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS REPLACE 
FOR &quot;org.hsqldb.Library.replace&quot;
set autocommit false
commit
The &quot;checkpoint defrag&quot; statement fails as follows:
java.lang.NullPointerException
at org.hsqldb.Log.checkpoint(Unknown Source)
at org.hsqldb.Database$Logger.checkpoint(Unknown 
Source)
at org.hsqldb.Database$Logger.access$000(Unknown 
Source)
at org.hsqldb.Database.processCheckpoint(Unknown 
Source)
at org.hsqldb.Database.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:536)
Unfortunately this is a tough one to figure a workaround for.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/255
HyperSQL Database Engine (HSQLDB) / Bugs / #255 Delete not commited
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqldb version 1.7.1 as standalone database and 
JDBC driver to access. Java application is single-user, so only 
one connection is created at program start and its shared (no 
threads) until the end of application. After deleting more than one 
record from some table, only one is deleted, others can be 
visible in next select. Database is in (default) auto commit mode 
and to making me sure, I have added conn.commit() after delete 
operation. But &quot;delete problem&quot; appears again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/256
HyperSQL Database Engine (HSQLDB) / Bugs / #256 CREATE ALIAS issues for java.lang.Math.(min,max)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
see next comment
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/257
HyperSQL Database Engine (HSQLDB) / Bugs / #257 HAVING exception using TAG: latest pre ALPHA_N updates 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Fred.
I ran into a defect that I thought initially I had 
caused with the code tagged &quot;pre ALPHA_N 
refactored code&quot;
The incident does NOT manifest in the ALPHA M 
files download.
However, after some frustrating work and not being 
able to find anything in my added/refactored code 
that would cause this defect, I decided to do a 
checkout that consists of a snapshot of what was 
in the hsqldb-dev CVS, just prior to the &quot;pre 
ALPHA_N refactored code&quot; tagged updates. Lo and 
behold, the same defect manifests as in my local 
working checkout.
there are a few related defects, but the following 
illustrates the biggest part of the problem, which I 
believe is related to Expression.setTrue() or 
possibly an incorrectly calculated iHavingIndex and 
some unwanted interaction with aggregating value:
Say, after performing the database manager &quot;insert 
test data,&quot; I do a select like:
select firstname, count(*) as &quot;count(*)&quot; from 
Customer group by firstname
This is fine. I get the expected result:
FIRSTNAME count(*) 
--------- -------- 
Laura 5 
Susanne 5 
Anne 2 
Michael 3 
Sylvia 4 
James 4 
Andrew 4 
Julia 4 
George 3 
Bill 5 
John 2 
Janet 3 
Bob 2 
Mary 2 
Robert 2 
However, say I issue the same query but with 
a &quot;having&quot; clause involving the &quot;count(*)&quot; term (any 
operator and value will do...perhaps any aggregate 
expression as well...I haven't tested that far yet).
Then I get:
select firstname, count(*) from Customer group by 
firstname having count(*) &gt; n 
SQL 
Error 
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-------------------------------- 
S1000 General error java.lang.ClassCastException: 
java.lang.Boolean in statement [select firstname, 
count(*) from Customer group by firstname having 
count(*) &gt; 1] / Error Code: -40 / State: S1000 
With a stack trace like this:
java.lang.ClassCastException: java.lang.Boolean
at org.hsqldb.Column.compare
(Column.java:945)
at org.hsqldb.Expression.getAggregatedValue
(Expression.java:1418)
at org.hsqldb.Select.buildResult
(Select.java:561)
at org.hsqldb.Select.getResult(Select.java:327)
at org.hsqldb.Parser.processSelect
(Parser.java:135)
at org.hsqldb.Database.execute
(Database.java:495)
at 
org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:3122)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:2661)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1768)
at org.hsqldb.jdbcStatement.execute
(jdbcStatement.java:728)
at org.hsqldb.util.DatabaseManager.execute
(DatabaseManager.java:776)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(DatabaseManager.java:472)
at java.awt.Button.processActionEvent
(Button.java:382)
at java.awt.Button.processEvent
(Button.java:350)
at java.awt.Component.dispatchEventImpl
(Component.java:3614)
at java.awt.Component.dispatchEvent
(Component.java:3476)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:456)
at 
java.awt.EventDispatchThread.pumpOneEventForHie
rarchy(EventDispatchThread.java:201)
at 
java.awt.EventDispatchThread.pumpEventsForHierar
chy(EventDispatchThread.java:151)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:145)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:137)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:100)
So this proves that the defect was in the pre Alpha 
N CVS *BEFORE* the last update.
I would list the stack trace using the latest CVS, so 
that you don't have to translate the line numbers, 
except that I can't build the latest hsqldb-dev CVS 
due to its missing the Token.java file in 
org/hsqldb. Would you please commit this to the 
CVS? 
Thanks,
Campbell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/258
HyperSQL Database Engine (HSQLDB) / Bugs / #258 Error on using full qualified column names in insert command
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to update a table by using full qualified column 
names like &lt;table name&gt;.&lt;column name&gt; we get 
a &quot;Column not found&quot; error. Example code:
db.update(&quot;INSERT INTO sample_table
(sample_table.str_col, sample_table.num_col) VALUES
('Ford', 100)&quot;);
java.sql.SQLException: Column not found: 
SAMPLE_TABLE.STR_COL in statement [INSERT 
INTO sample_table(sample_table.str_col,num_col) 
VALUES('Ford', 100)]
Is this a bug? Do you think this syntax could be 
supported in future?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/259
HyperSQL Database Engine (HSQLDB) / Bugs / #259 Serialization failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi.
Here is bug scenario:
0) I'm starting application with in-process hsqldb server.
1) I'm creating sample table (REGISTRATIONS).
2) I'm inserting sample object into it.
3) I'm shutdowning hsqldb server using &quot;SHUTDOWN&quot;
command and exciting application;
4) Second time, when I trying to start application with
existing database, a &quot;java.sql.SQLException:
Serialization failure&quot; exception occurs while creating
a connection to database.
I have debugged hsqldb code and checked that method
&quot;readLongVarString()&quot; in TextDatabaseRowInput.readOther
probably returns incorrect value. It reads object's
binary data only until first carriage return in binary
data occurs.
I've created demo which is packed into errorSample.zip.
Here is full error stacktrace:
java.sql.SQLException: Serialization failure
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.Trace.error(Unknown Source)
at org.hsqldb.ByteArray.deserialize(Unknown Source)
at org.hsqldb.TextDatabaseRowInput.readOther(Unknown
Source)
at org.hsqldb.DatabaseRowInput.readData(Unknown Source)
at org.hsqldb.CachedRow.&lt;init&gt;(Unknown Source)
at org.hsqldb.TextCache.makeRow(Unknown Source)
at org.hsqldb.Cache.getRow(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.TextTable.openCache(Unknown Source)
at org.hsqldb.TextTable.setDataSource(Unknown Source)
at org.hsqldb.Database.processSet(Unknown Source)
at org.hsqldb.Database.execute(Unknown Source)
at org.hsqldb.Log.runScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Database$Logger.openLog(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.Database.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcConnection.openStandalone(Unknown
Source)
at org.hsqldb.jdbcConnection.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at hsqldbtest.ErrorSample.main(ErrorSample.java:12)
java.sql.SQLException: File input/output error: File
input/output error: reading: java.sql.SQLException:
Serialization failure in statement [SET TABLE
REGISTRATIONS SOURCE &quot;REGISTRATIONS.csv&quot;]
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.Log.runScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Database$Logger.openLog(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.Database.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcConnection.openStandalone(Unknown
Source)
at org.hsqldb.jdbcConnection.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at hsqldbtest.ErrorSample.main(ErrorSample.java:12)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/260
HyperSQL Database Engine (HSQLDB) / Bugs / #260 PreparedStatement.execute(sql) works but should not
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to the specs, &quot;If any of the
PreparedStatement execute methods is called with an SQL
string as a parameter, an SQLException is thrown.&quot; See
jdbc-3_0-fr-spec.pdf, page 101, 13.2.4 Executing a
PreparedStatement Object. (-fr- stands for Final
Release, not France). You can get this document here:
http://java.sun.com/products/jdbc/download.html.
Currently, HSQLDB executes the statement, but it should
throws an Exception. This bug was found using LDBC
(ldbc.sourceforge.net).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/261
HyperSQL Database Engine (HSQLDB) / Bugs / #261 OutOfMemoryError when inserting into LONGVARBINARY column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I create a table that has a LONGVARBINARY 
column and try to insert data from a file in the file 
system, the java.lang.OutOfMemoryError exception 
occurs.
The documentation says that the max size of a 
LONGVARBINARY column is Integer.MAXVALUE, but 
the problem is happening for me with a Word document 
that is about 2.8 MB.
The attached Java program shows how to reproduce the 
bug. When the JFileChooser dialog shows up, just 
make sure you pick a large Word document or 
Powerpoint presentation file.
Unfortunately, the OutOfMemoryError exception is not 
propogated properly, meaning, I am unable to &quot;catch&quot; it. 
I simply see the error reported in the Java console.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/262
HyperSQL Database Engine (HSQLDB) / Bugs / #262 Problem with &quot;NOT NULL&quot; constraints on UPDATE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version : HSQLDB 1.7.2 Alpha M
The &quot;NOT NULL&quot; constraints don't work in update 
statements.
Test :
CREATE CACHED TABLE THEME
(
idTheme integer IDENTITY,
libelle VARCHAR NOT NULL,
description VARCHAR
);
insert into theme(libelle, description) values
('ESSAI', 'ESSAI');
Data -&gt; 1 ESSAI ESSAI
update theme set libelle = null where idtheme = 1;
Data -&gt; 1 (null) ESSAI
This problem was not in 1.7.1 version of HSQLDB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/263
HyperSQL Database Engine (HSQLDB) / Bugs / #263 LEFT JOIN not work with 2 primary keys in a table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For example:
create table emp(company_id varchar(10),id varchar
(20),supervisor_id varchar(20), primary key 
(company_id,id));
insert into emp values ('01','1000',null);
insert into emp values ('01','1001','1000')
select id,supervisor_id from emp e left join emp s on 
e.company_id = s.company_id and e.supervisor_id = s.id
will return
1001,1000
should be
1000,null
1001,1000
I tried with only one key and it works.I am using 1.7.2 
ALPHA M
-andy santosa
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/264
HyperSQL Database Engine (HSQLDB) / Bugs / #264 Connection.close() does not release TCP/IP port
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using Connection.close() to close a connection
with a HSQLDB server, the TCP/IP connection is not
closed until the client JVM is terminated. 
This can easily be checked using netstat under Windows.
Open a connection (Keep the client running)
-&gt; connection to port 9001 is visible in netstat /a
Close the connection (keep the client JVM running!)
-&gt; connection to port 9001 is still visible in netstat /a
Any attempt to issue a statement using the Connection
inside the Java client will result in an error
close client JVM 
-&gt; connection disappears
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/265
HyperSQL Database Engine (HSQLDB) / Bugs / #265 error selecting primary key column with itself
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create the following table
CREATE CACHED TABLE qss_function (
object_id int NOT NULL,
name varchar(200));
then you can issue the followings select
select * from qss_function where object_id = object_id
And it works!
But now create the following table with object_id as a
PRIMARY KEY
CREATE CACHED TABLE qss_function_p (
object_id int NOT NULL PRIMARY KEY,
name varchar(200))
and issue the same command
select * from qss_function_p where object_id = object_id
and get the following error
Column not found: OBJECT_ID in statement [select * from
qss_function_p where object_id = object_id] / Error
Code: -28 / State: S0022
hsqldb version 1.7.1
mel@1it.com.au
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/266
HyperSQL Database Engine (HSQLDB) / Bugs / #266 CASEWHEN bug (with hibernate)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
With Hibernate &quot;joined-subclass&quot;, a statement like this
one is generated:
select parent.id as id, casewhen(parent_1.id is not
null, 1, casewhen(parent.id is not null, 0, null)) as
clazz_, parent.name as name0_, parent.address as
address0_, parent.phone as phone0_, parent_1.toy as
toy1_ from PARENT parent left outer join CHILD parent_1
on parent.id=parent_1.id
The problem comes with the 3rd argument of the inner
casewhen function (null): the data type returned is
always set to 0 and the switch in
DatabaseRowOutput.writeData(int l, int types[], Object
data[]) falls into:
default :
throw Trace.error(Trace.FUNCTION_NOT_SUPPORTED, t);
This error occur in HSQL mode (not in STANDALONE mode).
I have patched Expression.resolve(TableFilter f) this way:
instead of,
case IFNULL :
case CASEWHEN :
iDataType = eArg2.iDataType;
break;
I'm using,
case IFNULL :
case CASEWHEN :
iDataType = (eArg2.iDataType == 0) ? eArg.iDataType :
eArg2.iDataType;
break;
Everything works fine with this modification (but they
are maybe some side effects I cannot figure out).
Regards,
F. Wolff.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/267
HyperSQL Database Engine (HSQLDB) / Bugs / #267 assert is a keyword
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
warning: as of release 1.4, assert is a keyword, and
may not be used as an identifier
Example:
Trace.assert(!bNestedTransaction,&quot;beginNestedTransaction&quot;);
A simple solution is to change the 'assert' to
'cassert' in all files. That is what I did to solve
the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/268
HyperSQL Database Engine (HSQLDB) / Bugs / #268 Count Aggregate function  is giving wrong results sometimes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am using HSQL database in my project.
I am using following SQL query to retrieve count
of packets in database.
The database contains two tables RSPPdu0 and
RSPSegment0.
I need to retrieve the number of pdus( pduKey) per
output port
Select RSPPdu0.outputport As outputPort,
Count(RSPSegment0.pduKey) As SegmentCount From
RSPSegment0,RSPPdu0 where
RSPSegment0.pduKey=RSPPdu0.pduId and
RSPPdu0.outputport &lt;&gt; -1 Group By RSPPdu0.outputport
The above query works fine in most of the cases. But
for two different samples it is giving incorrect
count of packet
In one case it gives
68002 instead of giving 68000
In other case
12802 instead of 12800
Also, this behavior is inconsistent on Solaris/Linux
and window platform. Sometimes the same query gives
correct results , sometimes incorrect.
It is highly unpredictible when it will give correct
result
Can u please help me in this regard ? Is this a bug
related to HSQL database or am I wrong somewhere in
forming SQL query.
An immediate response will be helpful.
Contact id : riti@agere.com
Thanks
Riti
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/269
HyperSQL Database Engine (HSQLDB) / Bugs / #269 Error with UPPER() in ORDER BY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was using 1.7.2 Alpha M and I did this SQL:
&quot;SELECT ct.concepttypeid, tc.textcontent FROM 
concepttype ct, (select textid,textcontent from 
textcontent where languageid=1) tc WHERE 
ct.nametextid = tc.textid ORDER BY ct.SORTORDER, 
upper(tc.textcontent)&quot;
And it gave me this error even though it's valid SQL and 
works in version 1.7.1:
Here's the stacktrace:
java.sql.SQLException: Cannot be in ORDER BY clause: 
FUNCTION org.hsqldb.Function@19ee8a in statement 
[SELECT ct.concepttypeid, tc.textcontent FROM 
concepttype ct, (select textid,textcontent from 
textcontent where languageid=1) tc WHERE 
ct.nametextid = tc.textid ORDER BY ct.SORTORDER, 
upper(tc.textcontent)]
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.jdbcResultSet.&lt;init&gt;(Unknown 
Source)
at org.hsqldb.jdbcConnection.executeStandalone
(Unknown Source)
at org.hsqldb.jdbcConnection.execute(Unknown 
Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown 
Source)
at org.hsqldb.jdbcStatement.executeQuery
(Unknown Source)
at 
com.tallgroup.util.DataMain.executeThrowableSelect
(DataMain.java:933)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/270
HyperSQL Database Engine (HSQLDB) / Bugs / #270 1.7.1 Engine's LEFT method does not work.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The use of the &quot;LEFT&quot; alias doesn't work:
SQL Error
------------------------------------------------------
------------------------------------------------- 
Unexpected token: LEFT in statement [select left('mike', 
3) from test] / Error Code: -11 / State: 37000 
1 row(s) in 0 ms
If we create a new alias w/ a different name:
CREATE ALIAS LEFTSTR FOR &quot;org.hsqldb.Library.left&quot;
it works just fine:
select leftstr('mike', 3) from test
--- 
mik 
mik 
mik 
3 row(s) in 10 ms
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/271
HyperSQL Database Engine (HSQLDB) / Bugs / #271 Group By and Binary columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
HSQL has a problem comparing binary columns in 
grouped queries.
I use binary columns to represent object IDs. Check this:
select &quot;oid&quot;,sum(&quot;amount&quot;) as &quot;result&quot;
from &quot;test&quot;
group by &quot;oid&quot;
If you have 30 rows with te same oid (a binary column) 
you will get a result set with 30 rows.
I think the problem is related to HsqlHashMap. It uses a 
HashTable in order to store groups. Unfortunately two 
byte arrays with the same content will have a difrent 
hashcode. HsqlHashMap assumes different groups.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/272
HyperSQL Database Engine (HSQLDB) / Bugs / #272 Incorrect SQL execution
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug has been described in the help forum -- please
see
https://sourceforge.net/forum/forum.php?thread_id=886130&amp;forum_id=73674
Attached is a .tgz file containing the database in
question. Its user/password is sa/admin.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/273
HyperSQL Database Engine (HSQLDB) / Bugs / #273 negative BIGINT are wrong
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi I tried the following:
create table test (id BIGINT)
insert into test values(-1000000000000000000)
and
select * from test
gives back the following:
id
1486618624
the value which I gave to id is a valid java.lang.Long
value. Is there a fix to that already ?
Thanks
Michele Laghi
laghi@swissinfo.org
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/274
HyperSQL Database Engine (HSQLDB) / Bugs / #274 erroneous fk constraint violation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqldb 1.7.1.
Attached to this message is a db that exhibits
erroneous (as far as I can
tell) behaviour. It's a little difficult for me to
strip out all of the
superfluous (for this problem) tables, so please just
consider the
PX_IDENTITY, PX_MEMBERSHIP and PX_CONTACT tables. There
are only 3 rows total
in the entire db, so it's fairly easy to see the issue.
PX_MEMBERSHIP is a simple many-to-many join table that
has fk constraint from
PX_IDENTITY to PX_IDENTITY. PX_MEMBERSHIP is
***empty****. However, if I:
1) delete from PX_CONTACT; commit;
2) delete from PX_IDENTITY; commit;
I get:
Integrity constraint violation: FK3BE8AA6D6968D5F
table: PX_MEMBERSHIP in
statement [delete from PX_IDENTITY] / Error Code: -8 /
State: 23000
How can this be, when PX_MEMBERSHIP is empty??
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/275
HyperSQL Database Engine (HSQLDB) / Bugs / #275 BIG script works on standalone but server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to insert some data by using a BIG script.
It was working for standalone database but failed in 
server mode database.
HSQLDB : 1.7.1, virgin, no patches
Java : IBM J2SDK 1.4.0
Linux : redhat 8.0
How I did it:
* Run demo/runManager.sh
* Open connection, standalone or server mode 
accordingly
* Made a new table.
CREATE TABLE kuisikon (
id IDENTITY PRIMARY KEY,
topik CHAR(20), 
tingkat INTEGER,
kuis VARCHAR(255), 
ikon VARCHAR(100), 
pilihan VARCHAR(100));
CREATE INDEX topik ON kuisikon (topik);
CREATE INDEX tingkat ON kuisikon (tingkat);
* Open the script (attached) and execute it.
* Try to execute select * from kuisikon.
Submitted by:
k0c1l@hotmail.com
PS: the database information is in Indonesian language, 
I'm sorry for not translating it, but I hope it does not 
matter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/276
HyperSQL Database Engine (HSQLDB) / Bugs / #276 Connection Problems in standalone mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hypersonic DB when running in standalone(In-process - 
not in memory) mode does not allow the Process which 
created the DB to use nested transcation(nested 
connection) or transcation across threads and throws 
the below Error
ERROR: The database is already in use by another 
process
ERROR: Cannot open connection
java.sql.SQLException: The database is already in 
use by another process
Let me explain the scenario.
1. Gets the DB connection with security user 
(Username=security1, pwd=&quot;pwd&quot;, 
url=jdbc:hsqldb:myDB&quot;). Get all the necessary data. 
close the connection. 
2. Now get the DB connection with real user 
(Username=real, pwd=&quot;123&quot;, url=jdbc:hsqldb:myDB&quot;). Do 
a lot of initialization.
3. Now I have this part of code which executes a nested 
transaction. And I get the above error when the inner 
transcation is executed.
{
getConnection() 
beginTranscation()
doWork
{
some work......
getConnection() --------
--- fails here with above mentioned error. 
beginTranscation()
doWork
{
some work.....
} 
} 
So when i tried to debug hsqldb, I found the following 
bug with the implementation.
1. org.hsqldb.jdbcConnection holds a static instance of 
HashTable-tdatabase(url,org.hsqldb.Database Objects). 
When closing connection the corresponding entry is 
removed and the Database objects goes out of scope.
2. Now when i reconnect to the same DB, it creates an 
entry in tdatabase. And if the finalizer for the previously 
freed Database objects is called now the entry in the 
tdatabase(jdbcConnection class) is removed and if you 
try to get any more connection it reports with the above 
bug as it tries to create a new instance of DB instead of 
creating a new connection(openStandalone(...) method 
in jdbcConnection Class).
Solution.
1. We must not depend on the finalizer method as we 
have no controll over it.
2. never call close to a connection(will be a bad 
solution).
3. As a temporary solution i have commented method 
lines in removeDatabase(...) in jdbcConnection Class and 
everything appears to work fine for me. 
Other Details.
jdk - 1.4.1_01
hiberate - 2.0 --- which gives a connection pool
hypersonic - 1.7.1
my stack trace example.
Creating DB : org.hsqldb.Database@1594a88 -- 
jdbc:hsqldb:myDB user-security1 pwd-pwd
Closing DB org.hsqldb.Database@1594a88 in thread 
Thread[main,5,main] -- -- jdbc:hsqldb:myDB user-
security1 pwd-pwd
Creating DB : org.hsqldb.Database@11d2066 ---- 
jdbc:hsqldb:myDB user-real pwd-123
Closing DB org.hsqldb.Database@1594a88 in thread 
Thread[Finalizer,8,system]
TW1 -- Top level Transcation started
Trying to start inner Transcation 
ERROR: The database is already in use by another 
process
ERROR: Cannot open connection
java.sql.SQLException: The database is already in 
use by another process
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/277
HyperSQL Database Engine (HSQLDB) / Bugs / #277 Column not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Executing the below query and when getting the result 
the below error occurs.
ResultSet rs = query.execute(&quot;select c.configid as 
configid, c.name as name, c.description as descript3_ 
from ks_configs c where (c.name='Basic' )&quot;);
String conf = rs.getString(&quot;configid&quot;);
throws the below exception
java.sql.SQLException: Column not found
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcResultSet.findColumn
(Unknown Source)
at org.hsqldb.jdbcResultSet.getString(Unknown 
Source)
Solution.
findColumn(..) in jdbcResultSet.java uses equals(..) in 
line number 3631 instead of equalsIgnoreCa
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/278
HyperSQL Database Engine (HSQLDB) / Bugs / #278 ResultSet down not move backwards!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was able to move in both directions when using 
resultset in hsqldb1.7.1, but with the code from hsqldb-
dev throws the below exception when attempted to 
move backwards... I am using hibernate 2.0 to access 
hypersonic.
java.sql.SQLException: ResultSet was set to forward only
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcResultSet.previous(Unknown 
Source)
Solution.
jdbcResultSet.rsType can be set to 
jdbcStatement.rsType when creating the ResultSet. This 
will enable movement in both direction of the ResultSet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/279
HyperSQL Database Engine (HSQLDB) / Bugs / #279 NPE on SHUTDOWN when created by HsqlServerFactory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the HSQLDB Server is created using the
HsqlServerFactory then its internal socket instance
variable is never set. If a &quot;SHUTDOWN&quot; command is then
issued, a NPE will be thrown within the Server.notify
method on the &quot;socket.close()&quot; command. The code just
needs to check to see whether or not socket is set
before attempting to close it. See the patch to fix
this below. This is in the current release version 1.7.1
Cheers,
Leif
Index: Server.java
RCS file:
/cvsroot/hsqldb/hsqldb/src/org/hsqldb/Server.java,v
retrieving revision 1.8
diff -u -r1.8 Server.java
--- Server.java 18 Oct 2002 14:07:19 -0000 1.8
+++ Server.java 17 Jul 2003 15:11:54 -0000
@@ -310,11 +310,14 @@
closeAllServerConnections();
- // fredt@users - this is used to exit the loop
in this.run()
- try {
- socket.close();
- } catch (IOException e) {
- traceError(&quot;Exception when closing the
main socket&quot;);
+ // The server's socket is not created if the
server is created by the HsqlServerFactory.
+ if (socket != null) {
+ // fredt@users - this is used to exit the
loop in this.run()
+ try {
+ socket.close();
+ } catch (IOException e) {
+ traceError(&quot;Exception when closing the
main socket&quot;);
+ }
}
serverProperties = null;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/280
HyperSQL Database Engine (HSQLDB) / Bugs / #280 SQLEx closing Connection that is closed by server.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have been working on getting HSQLDB running within my
application in server mode. The database is then
connected to using a pool of JDBC Connections. 
Everything works great until I call SHUTDOWN as the
server is shutting down.
As the server shuts down, one if its tasks is to go
through and close all of the Connections in the JDBC
pool. The problem is that the HSQLDB JDBC driver
throws and SQLException with the message, &quot;Connection
is broken&quot; for each connection as it is closed. This
is because the socket has already been closed by HSQLDB
on the server side. It makes sense to throw this
exception if a query is being made. I know this is a
matter of opinion. But if the client is
attempting to close the connection and the JDBC driver
detects that the connection is already closed. It
seems like it should just fall through gracefully as
the desired outcome was achieved.
The following patch modifies jdbcConnection.java to do
this.
This is with the current released version 1.7.1
Cheers,
Leif
Index: jdbcConnection.java
RCS file:
/cvsroot/hsqldb/hsqldb/src/org/hsqldb/jdbcConnection.java,v
retrieving revision 1.8
diff -u -r1.8 jdbcConnection.java
--- jdbcConnection.java 18 Oct 2002 14:07:21 -0000 
1.8
+++ jdbcConnection.java 17 Jul 2003 15:32:25 -0000
@@ -1052,7 +1052,17 @@
if (iType == STANDALONE) {
closeStandalone();
} else {
- execute(&quot;DISCONNECT&quot;);
+ try {
+ execute(&quot;DISCONNECT&quot;);
+ } catch (SQLException e) {
+ String msg = e.getMessage();
+ if ((msg != null) &amp;&amp;
(msg.indexOf(&quot;Connection is broken&quot;) &gt;= 0)) {
+ // This just means that the server
already closed the connection. No
+ // problem since we wanted to
close it anyway.
+ } else {
+ throw e;
+ }
+ }
}
bClosed = true;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/281
HyperSQL Database Engine (HSQLDB) / Bugs / #281 Strange results in UNION
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, UNION seems to work fine with not null values:
create table dual (x varchar(1))
insert into dual values('x')
--Query 1
select 'aaa' as A, 'ddd' as B from dual
union all
select 'ccc' as A, 'bbb' as B from dual
A B
aaa ddd
ccc bbb
However, nulls produce strange results:
--Query 2
select 'aaa' as A, null as B from dual
union all
select 'ccc' as A, 'bbb' as B from dual
A B
aaa &lt;null&gt;
ccc &lt;null&gt; (why???)
--Query 3
select 'aaa' as A, 'ddd' as B from dual
union all
select 'ccc' as A, null as B from dual
A B
aaa ddd
ccc &lt;null&gt;
The strangest thing: [Query 2] breaks server 
connections!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/282
HyperSQL Database Engine (HSQLDB) / Bugs / #282 CREATE VIEW + GRANT failes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found in 1.7.1
If you execute the attached script and then restart the
database, you get an error and the database cannot be
used anymore, because the CREATE VIEW will be after the
GRANT in the script file
CREATE TABLE BF_DOMAIN(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,NAME VARCHAR(100) NOT NULL,DESCRIPTION
VARCHAR(1024),CREATION_DATE TIMESTAMP NOT
NULL,MODIFICATION_DATE TIMESTAMP NOT NULL,CONSTRAINT
BF_DOM_UQ UNIQUE(NAME))
CREATE TABLE BF_USER(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,FIRST_NAME
VARCHAR(50) NOT NULL,LAST_NAME VARCHAR(50) NOT
NULL,PHONE VARCHAR(20) NOT NULL,FAX VARCHAR(20) NOT
NULL,ADDRESS VARCHAR(1024) NOT NULL,EMAIL VARCHAR(50)
NOT NULL,LOGIN_NAME VARCHAR(30) NOT NULL,PASSWORD
VARCHAR(50) NOT NULL,LOGIN_ENABLED INTEGER DEFAULT '0'
NOT NULL,SUPER_USER INTEGER DEFAULT '0' NOT
NULL,INTERNAL_USER INTEGER DEFAULT '0' NOT
NULL,CREATION_DATE TIMESTAMP NOT NULL,MODIFICATION_DATE
TIMESTAMP NOT NULL,CONSTRAINT BF_USR_LOGIN_UQ
UNIQUE(LOGIN_NAME),CONSTRAINT BF_USR_EMAIL_UQ
UNIQUE(EMAIL),CONSTRAINT BF_USR_FK FOREIGN
KEY(DOMAIN_ID) REFERENCES BF_DOMAIN(ID) ON DELETE CASCADE)
CREATE TABLE BF_BFSESSION(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,USER_ID INTEGER
NOT NULL,GEN_CODE VARCHAR(50) NOT NULL,CLIENT_IP
VARCHAR(20) NOT NULL,BROWSER_TYPE
VARCHAR(100),CREATION_DATE TIMESTAMP NOT
NULL,CONSTRAINT BF_SESS_UQ UNIQUE(GEN_CODE),CONSTRAINT
BF_BFSESS_DID_FK FOREIGN KEY(DOMAIN_ID) REFERENCES
BF_DOMAIN(ID) ON DELETE CASCADE,CONSTRAINT
BF_BFSESS_UID_FK FOREIGN KEY(USER_ID) REFERENCES
BF_USER(ID) ON DELETE CASCADE)
CREATE VIEW BF_BFSESSION_VIEW AS select
BF_BFSESSION.ID as ID, BF_USER.ID as USER_ID,
BF_USER.DOMAIN_ID as DOMAIN_ID, BF_USER.FIRST_NAME,
BF_USER.LAST_NAME, BF_USER.LOGIN_NAME, BF_USER.PHONE,
BF_USER.FAX, BF_USER.EMAIL, BF_USER.LOGIN_ENABLED,
BF_USER.SUPER_USER, BF_BFSESSION.GEN_CODE,
BF_BFSESSION.CLIENT_IP, BF_BFSESSION.BROWSER_TYPE,
BF_BFSESSION.CREATION_DATE from BF_BFSESSION, BF_USER
where BF_USER.ID = BF_BFSESSION.USER_ID and
BF_USER.DOMAIN_ID = BF_BFSESSION.DOMAIN_ID
GRANT ALL ON BF_BFSESSION_VIEW TO SA
COMMIT
produces script file
CREATE TABLE BF_DOMAIN(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,NAME VARCHAR(100) NOT NULL,DESCRIPTION
VARCHAR(1024),CREATION_DATE TIMESTAMP NOT
NULL,MODIFICATION_DATE TIMESTAMP NOT NULL,CONSTRAINT
BF_DOM_UQ UNIQUE(NAME))
CREATE TABLE BF_USER(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,FIRST_NAME
VARCHAR(50) NOT NULL,LAST_NAME VARCHAR(50) NOT
NULL,PHONE VARCHAR(20) NOT NULL,FAX VARCHAR(20) NOT
NULL,ADDRESS VARCHAR(1024) NOT NULL,EMAIL VARCHAR(50)
NOT NULL,LOGIN_NAME VARCHAR(30) NOT NULL,PASSWORD
VARCHAR(50) NOT NULL,LOGIN_ENABLED INTEGER DEFAULT '0'
NOT NULL,SUPER_USER INTEGER DEFAULT '0' NOT
NULL,INTERNAL_USER INTEGER DEFAULT '0' NOT
NULL,CREATION_DATE TIMESTAMP NOT NULL,MODIFICATION_DATE
TIMESTAMP NOT NULL,CONSTRAINT BF_USR_LOGIN_UQ
UNIQUE(LOGIN_NAME),CONSTRAINT BF_USR_EMAIL_UQ
UNIQUE(EMAIL),CONSTRAINT BF_USR_FK FOREIGN
KEY(DOMAIN_ID) REFERENCES BF_DOMAIN(ID) ON DELETE CASCADE)
CREATE TABLE BF_BFSESSION(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,USER_ID INTEGER
NOT NULL,GEN_CODE VARCHAR(50) NOT NULL,CLIENT_IP
VARCHAR(20) NOT NULL,BROWSER_TYPE
VARCHAR(100),CREATION_DATE TIMESTAMP NOT
NULL,CONSTRAINT BF_SESS_UQ UNIQUE(GEN_CODE),CONSTRAINT
BF_BFSESS_DID_FK FOREIGN KEY(DOMAIN_ID) REFERENCES
BF_DOMAIN(ID) ON DELETE CASCADE,CONSTRAINT
BF_BFSESS_UID_FK FOREIGN KEY(USER_ID) REFERENCES
BF_USER(ID) ON DELETE CASCADE)
GRANT ALL ON CLASS &quot;org.hsqldb.Library&quot; TO PUBLIC
GRANT ALL ON CLASS &quot;java.lang.Math&quot; TO PUBLIC
CREATE USER SA PASSWORD &quot;&quot; ADMIN
GRANT ALL ON BF_BFSESSION_VIEW TO SA
CREATE ALIAS DAYNAME FOR &quot;org.hsqldb.Library.dayname&quot;
CREATE ALIAS SPACE FOR &quot;org.hsqldb.Library.space&quot;
CREATE ALIAS SUBSTRING FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS HEXTORAW FOR &quot;org.hsqldb.Library.hexToRaw&quot;
CREATE ALIAS SQRT FOR &quot;java.lang.Math.sqrt&quot;
CREATE ALIAS ABS FOR &quot;org.hsqldb.Library.abs&quot;
CREATE ALIAS POWER FOR &quot;java.lang.Math.pow&quot;
CREATE ALIAS CHAR FOR &quot;org.hsqldb.Library.character&quot;
CREATE ALIAS CONCAT FOR &quot;org.hsqldb.Library.concat&quot;
CREATE ALIAS PI FOR &quot;org.hsqldb.Library.pi&quot;
CREATE ALIAS RAWTOHEX FOR &quot;org.hsqldb.Library.rawToHex&quot;
CREATE ALIAS SECOND FOR &quot;org.hsqldb.Library.second&quot;
CREATE ALIAS TRUNCATE FOR &quot;org.hsqldb.Library.truncate&quot;
CREATE ALIAS MONTH FOR &quot;org.hsqldb.Library.month&quot;
CREATE ALIAS LOWER FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS ATAN2 FOR &quot;java.lang.Math.atan2&quot;
CREATE ALIAS REPEAT FOR &quot;org.hsqldb.Library.repeat&quot;
CREATE ALIAS DAYOFMONTH FOR &quot;org.hsqldb.Library.dayofmonth&quot;
CREATE ALIAS TAN FOR &quot;java.lang.Math.tan&quot;
CREATE ALIAS RADIANS FOR &quot;java.lang.Math.toRadians&quot;
CREATE ALIAS FLOOR FOR &quot;java.lang.Math.floor&quot;
CREATE ALIAS NOW FOR &quot;org.hsqldb.Library.now&quot;
CREATE ALIAS ACOS FOR &quot;java.lang.Math.acos&quot;
CREATE ALIAS DAYOFWEEK FOR &quot;org.hsqldb.Library.dayofweek&quot;
CREATE ALIAS CEILING FOR &quot;java.lang.Math.ceil&quot;
CREATE ALIAS DAYOFYEAR FOR &quot;org.hsqldb.Library.dayofyear&quot;
CREATE ALIAS LCASE FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS WEEK FOR &quot;org.hsqldb.Library.week&quot;
CREATE ALIAS SOUNDEX FOR &quot;org.hsqldb.Library.soundex&quot;
CREATE ALIAS ASIN FOR &quot;java.lang.Math.asin&quot;
CREATE ALIAS LOCATE FOR &quot;org.hsqldb.Library.locate&quot;
CREATE ALIAS EXP FOR &quot;java.lang.Math.exp&quot;
CREATE ALIAS MONTHNAME FOR &quot;org.hsqldb.Library.monthname&quot;
CREATE ALIAS YEAR FOR &quot;org.hsqldb.Library.year&quot;
CREATE ALIAS LEFT FOR &quot;org.hsqldb.Library.left&quot;
CREATE ALIAS ROUNDMAGIC FOR &quot;org.hsqldb.Library.roundMagic&quot;
CREATE ALIAS BITOR FOR &quot;org.hsqldb.Library.bitor&quot;
CREATE ALIAS LTRIM FOR &quot;org.hsqldb.Library.ltrim&quot;
CREATE ALIAS COT FOR &quot;org.hsqldb.Library.cot&quot;
CREATE ALIAS COS FOR &quot;java.lang.Math.cos&quot;
CREATE ALIAS MOD FOR &quot;org.hsqldb.Library.mod&quot;
CREATE ALIAS SIGN FOR &quot;org.hsqldb.Library.sign&quot;
CREATE ALIAS DEGREES FOR &quot;java.lang.Math.toDegrees&quot;
CREATE ALIAS LOG FOR &quot;java.lang.Math.log&quot;
CREATE ALIAS SIN FOR &quot;java.lang.Math.sin&quot;
CREATE ALIAS CURTIME FOR &quot;org.hsqldb.Library.curtime&quot;
CREATE ALIAS DIFFERENCE FOR &quot;org.hsqldb.Library.difference&quot;
CREATE ALIAS INSERT FOR &quot;org.hsqldb.Library.insert&quot;
CREATE ALIAS SUBSTR FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS DATABASE FOR &quot;org.hsqldb.Library.database&quot;
CREATE ALIAS MINUTE FOR &quot;org.hsqldb.Library.minute&quot;
CREATE ALIAS HOUR FOR &quot;org.hsqldb.Library.hour&quot;
CREATE ALIAS IDENTITY FOR &quot;org.hsqldb.Library.identity&quot;
CREATE ALIAS QUARTER FOR &quot;org.hsqldb.Library.quarter&quot;
CREATE ALIAS CURDATE FOR &quot;org.hsqldb.Library.curdate&quot;
CREATE ALIAS BITAND FOR &quot;org.hsqldb.Library.bitand&quot;
CREATE ALIAS USER FOR &quot;org.hsqldb.Library.user&quot;
CREATE ALIAS UCASE FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS RTRIM FOR &quot;org.hsqldb.Library.rtrim&quot;
CREATE ALIAS LOG10 FOR &quot;org.hsqldb.Library.log10&quot;
CREATE ALIAS RIGHT FOR &quot;org.hsqldb.Library.right&quot;
CREATE ALIAS ATAN FOR &quot;java.lang.Math.atan&quot;
CREATE ALIAS UPPER FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS ASCII FOR &quot;org.hsqldb.Library.ascii&quot;
CREATE ALIAS RAND FOR &quot;java.lang.Math.random&quot;
CREATE ALIAS LENGTH FOR &quot;org.hsqldb.Library.length&quot;
CREATE ALIAS ROUND FOR &quot;org.hsqldb.Library.round&quot;
CREATE ALIAS REPLACE FOR &quot;org.hsqldb.Library.replace&quot;
CREATE VIEW BF_BFSESSION_VIEW AS select
BF_BFSESSION.ID as ID, BF_USER.ID as USER_ID,
BF_USER.DOMAIN_ID as DOMAIN_ID, BF_USER.FIRST_NAME,
BF_USER.LAST_NAME, BF_USER.LOGIN_NAME, BF_USER.PHONE,
BF_USER.FAX, BF_USER.EMAIL, BF_USER.LOGIN_ENABLED,
BF_USER.SUPER_USER, BF_BFSESSION.GEN_CODE,
BF_BFSESSION.CLIENT_IP, BF_BFSESSION.BROWSER_TYPE,
BF_BFSESSION.CREATION_DATE from BF_BFSESSION, BF_USER
where BF_USER.ID = BF_BFSESSION.USER_ID and
BF_USER.DOMAIN_ID = BF_BFSESSION.DOMAIN_ID
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/283
HyperSQL Database Engine (HSQLDB) / Bugs / #283 Max Aggregate Causes null row to be returned
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the query...
select max(t1.col_a), t2.col_a
from Table1 t1, Table t2
where
(t1.col_b = t2.col_b) and
(t1.col_a &gt;= t2.col_a)
group by t2.col_a
... the max aggregate causes a single row of nulls to be 
returned when Table1 and Table2 are empty.
nathanila@hotmail.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/284
HyperSQL Database Engine (HSQLDB) / Bugs / #284 Some problems with last alpha
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I had some problems with Timestamps in alpha_M (you 
save 00:00 and retrieve 03:00 -- I'm at GMT-3 --). I've 
downloaded last cvs tree and that problem has been 
solved.
However, I've found new big problems:
- I can't start a server with &quot;-database &lt;dbname&gt;&quot; 
command line argument. (The server always uses &quot;test&quot;)
- I can't load my old database files (created by alpha_M).
- Prepared statements can't execute DDL statements 
(ie.: UNEXPECTED TOKEN: CREATE)
- Problems with Binary columns: I use binary(20) 
columns as Object ID. The error is:
S1000 General error java.lang.ClassCastException: 
org.hsqldb.Binary in statement [insert into &quot;MyTable&quot; 
(&quot;oid&quot;,&quot;dummy&quot;) values (?,?)]
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/285
HyperSQL Database Engine (HSQLDB) / Bugs / #285 Cannot use IDENTITY and PRIMARY KEY together
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When specifying a column as an IDENTITY column, it
leads to an exception when the same column is also
specified as a PRIMARY KEY:
java.sql.SQLException: Attempt to define a second
primary ke
y in statement [CREATE TABLE A ( ID integer IDENTITY,
PRIMARY KEY(ID) )]
This is especially troublesome when using Torque to
generate the sql code as Torque does generate both
IDENTITY and PRIMARY KEY (which is the usual
combination with other databases, e.g. MySQL).
Since in this case the column is only overspecified, at
most a warning (if at all) should be issued, but no error.
This error occurs for both the 1.7.1 release and the
1.7.2 alpha (M)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/286
HyperSQL Database Engine (HSQLDB) / Bugs / #286 Error when storing a String object in a LONGVARBINARY column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to store a String object in a LONGVARBINARY
column while using a prepared statement, a exception
java.sql.SQLException: invalid character encoding
is issued (1.7.2 Alpha M; a similar exception is issued
in 1.7.1). A quick look in the code revealed that it is
tried to convert a string that is assumed to contain
hex-encoded byte s into a byte array (Column:
convertObject -&gt; convertString -&gt; hexToByteArray).
However there is no hex string in the object, just a
normal string, so the conversion is not successful.
This exception is probably raised for BINARY and
VARBINARY, as well (judging from Column.convertObject).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/287
HyperSQL Database Engine (HSQLDB) / Bugs / #287 nulls in prepared statements (alpha_n)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I use hsql to store Tomcat passwords. JDBCRealm seems 
to prepare a statement setting a null value when the 
user tries to access to a protected resource the first 
time.
The cause of this bug (I'm trying to guess) is at 
ValuePool:127 (ValuePool.getString(String val)). This 
method is used to set Strings in 
jdbcPreparedStatement.java.
Rewritting getString like this:
public static synchronized String getString(String val)
{
if(val==null) //added by me
return null; //added by me
if (val.length() &gt; maxStringLength) {
return val;
}
return stringPool.getOrAddString(val);
}
seems to work. 
I don't know if this problem will ocurr with all 
ValuePool.getXXX() methods (I've not tried yet). 
Previous versions of hsql accept null values. 
Please include this bug. (I don't want to rewrite Tomcat 
code.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/288
HyperSQL Database Engine (HSQLDB) / Bugs / #288 SAVEPOINT and ROLLBACK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SAVEPOINT savepoint_name ;
and
ROLLBACK TO SAVEPOINT savepoint_name ;
Are not document in hsqlSyntax.html but exists in
javadoc class org.hsqldb.jdbcConnection. 
Affected versions 1.7, 1.7.1, 1.7.2-alpha M.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/289
HyperSQL Database Engine (HSQLDB) / Bugs / #289 NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This happens in 1.7.1 and can be seen in DBManager or 
through JDBC
CREATE TABLE ROLLBACK_TEST
( TEST_COLUMN VARCHAR(50) NOT NULL,
CONSTRAINT TEST_COLUMN_UQ UNIQUE 
(TEST_COLUMN)
)
--- now set auto commit off and execute step by step
--- Just to make sure I set the autocommit off before 
each step since the menu doesn't show it
insert into ROLLBACK_TEST (TEST_COLUMN) values 
('miro')
insert into ROLLBACK_TEST (TEST_COLUMN) values 
('peter')
commit
update ROLLBACK_TEST set TEST_COLUMN = 'peter' 
where TEST_COLUMN = 'miro'
rollback
You get NullPointerException here
java.lang.NullPointerException
at org.hsqldb.Index.child(Unknown Source)
at org.hsqldb.Index.balance(Unknown Source)
at org.hsqldb.Index.insert(Unknown Source)
at org.hsqldb.Table.indexRow(Unknown Source)
at org.hsqldb.Table.insertNoCheck(Unknown 
Source)
at org.hsqldb.Transaction.rollback(Unknown 
Source)
at org.hsqldb.Session.rollback(Unknown Source)
at org.hsqldb.Database.processRollback(Unknown 
Source)
at org.hsqldb.Database.execute(Unknown Source)
at org.hsqldb.jdbcConnection.executeStandalone
(Unknown Source)
at org.hsqldb.jdbcConnection.execute(Unknown 
Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown 
Source)
at org.hsqldb.jdbcStatement.execute(Unknown 
Source)
at org.hsqldb.util.DatabaseManager.execute
(Unknown Source)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(Unknown Source)
at java.awt.Button.processActionEvent
(Button.java:381)
at java.awt.Button.processEvent(Button.java:350)
at java.awt.Component.dispatchEventImpl
(Component.java:3639)
at java.awt.Component.dispatchEvent
(Component.java:3480)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:450)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarch
y(EventDispatchTh
read.java:197)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(EventDispatchThre
ad.java:150)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:144)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:136)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:99)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/290
HyperSQL Database Engine (HSQLDB) / Bugs / #290 Group By and Binary columns II
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Group by is not working with binary columns in alpha_n. 
Please, test this:
create table test (oid BINARY(2),data numeric);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0002',2);
insert into test values ('0002',2);
insert into test values ('0002',2);
insert into test values ('0002',2);
insert into test values ('0002',2);
select oid,sum(data) from test
group by oid;
The result must be:
0001 5
0002 10
However, it shows:
0001 1
0001 1
0001 1
0001 1
0001 1
0002 2
0002 2
0002 2
0002 2
0002 2
This was fixed previously but the bug is here again.
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/291
HyperSQL Database Engine (HSQLDB) / Bugs / #291 saveSorted ... negative seek offset
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm using HSQL 1.7.1 with JRE1.3.1_03 in a Windows 
2000 environment. My database contains only one table 
with 8,000,000 rows which used to work fine (database 
size is 1.3 GB). But when I try to create a new index or 
drop an existing index I get the following error message 
after some minutes:
&quot;File input/output error: saveSorted java.io.IOException: 
Negative seek offset in statement [...]&quot;
where statement can be 
&quot;CREATE INDEX idxDevice ON tbl300_DEVICE_LOGS 
(lng_refIDDevice)&quot; or 
&quot;DROP INDEX idxTimeStamp&quot;.
Is there any limitation in database size, table size, row 
count, or index size?
Greetings
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/292
HyperSQL Database Engine (HSQLDB) / Bugs / #292 implicit DATETIME value change
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, 
I'm using HSQL 1.7.1 with JRE1.3.1_03 in a Windows 
2000 environment. My database contains only one table 
with 8,000,000 rows (database size is 1.3 GB) and an 
indexed DATETIME column. After months of working fine 
the following strange phenomenon occured:
Sometimes all values in the DATETIME column were 
normalized to a value between 0:00 and 1:00, that is 
the time was divided by 24. The date part was kept 
correctly, new values were inserted correctly, too. It 
seems that this occured during recovery procedure after 
killing and restarting the database process.
More greetings 
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/293
HyperSQL Database Engine (HSQLDB) / Bugs / #293 On delete cascade
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
There is a problem with foreign key constraints with 'on 
delete cascade' option.
Please try this:
---------------------------------------------
drop table testB if exists;
drop table testA if exists;
create table testA(id integer, primary key(id));
create table testB(id integer, parent integer, ref integer, 
data varchar(200),primary key (id),foreign key (parent) 
references testB(id) on delete cascade,foreign key (ref) 
references testA(id) on delete cascade);
insert into testA values(1);
insert into testB values(100,null,1,'xxxx');
insert into testB values(101,100,1,'xxxx');
insert into testB values(102,101,1,'xxxx');
delete from testA where id=1;
---------------------------------------------
The self reference of tableB works fine without the 
reference to tableA. 
The reference to tableA works fine without the self 
reference of table B. 
If both references are present, the script doesn't work.
The error is: AssertFailed/Error code: -38
The stack trace (note: jar with debug info):
org.hsqldb.Trace$TraceException: Trace
at org.hsqldb.Trace.printStack(Trace.java:767)
at org.hsqldb.Trace.doAssert(Trace.java:550)
at org.hsqldb.Trace.doAssert(Trace.java:534)
at org.hsqldb.MemoryNode.getData
(MemoryNode.java:101)
at org.hsqldb.Table.checkCascadeDelete
(Table.java:1983)
at org.hsqldb.Table.delete(Table.java:2357)
at org.hsqldb.Table.delete(Table.java:2325)
at 
org.hsqldb.CompiledStatementExecutor.executeDeleteSta
tement(CompiledStatementExecutor.java:214)
at 
org.hsqldb.CompiledStatementExecutor.executeImpl
(CompiledStatementExecutor.java:128)
at org.hsqldb.CompiledStatementExecutor.execute
(CompiledStatementExecutor.java:89)
at org.hsqldb.Session.sqlExecuteCompiled
(Session.java:836)
at 
org.hsqldb.DatabaseCommandInterpreter.executePart
(DatabaseCommandInterpreter.java:229)
at 
org.hsqldb.DatabaseCommandInterpreter.execute
(DatabaseCommandInterpreter.java:165)
at org.hsqldb.Session.execute(Session.java:784)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1670)
at org.hsqldb.jdbcStatement.execute
(jdbcStatement.java:680)
at org.hsqldb.util.DatabaseManager.execute
(DatabaseManager.java:776)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(DatabaseManager.java:472)
at java.awt.Button.processActionEvent(Unknown 
Source)
at java.awt.Button.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl
(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown 
Source)
at java.awt.EventQueue.dispatchEvent(Unknown 
Source)
at java.awt.EventDispatchThread.pumpOneEvent
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown 
Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/294
HyperSQL Database Engine (HSQLDB) / Bugs / #294 PreparedStatements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Try this script:
------------------------------------------------------
drop table testA if exists;
drop table testB if exists;
create table testA(oid binary(2), data integer);
create table testB(oid binary(2), data integer);
insert into testA values('0001',1);
insert into testB values('0001',1);
select * from testA as ttt,(select oid,data from testB) 
as tst 
where (tst.oid=ttt.oid)
and (tst.oid='0001');
------------------------------------------------------
The result is:
DATA
------
1
The same script with JDBC:
------------------------------------------------------
Connection con=(...);
Statement stm=con.createStatement();
stm.execute(&quot;drop table testA if exists&quot;);
stm.execute(&quot;drop table testB if exists&quot;);
stm.execute(&quot;create table testA(oid binary(2), data 
integer)&quot;);
stm.execute(&quot;create table testB(oid binary(2), data 
integer)&quot;);
PreparedStatement pstm;
byte[] oid=new byte[]{0,1};
pstm=con.prepareStatement(&quot;insert into testA 
values(?,1)&quot;);
pstm.setBytes(1,oid);
pstm.execute();
pstm=con.prepareStatement(&quot;insert into testB values
(?,1)&quot;);
pstm.setBytes(1,oid);
pstm.execute();
pstm=con.prepareStatement(
&quot;select data from testA as ttt,(select oid,data from 
testB) as tst &quot;
+&quot; where (tst.oid=ttt.oid)&quot;
+&quot; and (tst.oid=?)&quot;
);
pstm.setBytes(1,oid);
ResultSet rset=pstm.executeQuery();
System.out.println(&quot;DATA\n----&quot;);
while(rset.next())
System.out.println(rset.getInt(1));
rset.close();
------------------------------------------------------
The result is:
DATA
-----
(Please note there are no rows).
Why? Is something wrong?
Regards.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/295
HyperSQL Database Engine (HSQLDB) / Bugs / #295 rs.getString(&quot;name&quot;) fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ResultSet rs=executeQuery(&quot;select name,key from tab&quot;);
while (rs.next())
nodename = rs.getString(1);
// nodename = rs.getString(&quot;name&quot;);
The often used first version works alright, however 2nd 
version, which is commented out, throws an 
SQLException (Column name not found).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/296
HyperSQL Database Engine (HSQLDB) / Bugs / #296 select avg(column) - wrong results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using select avg(col1) from test, null values are 
incorrect counted as zero.
Nulls shouldn't be counted, so it's 2+4 = 6/2 = average 
of 3 (same in Excel).
Hsqldb, however, apparently makes it 2+0+4= 6 / 3 = 
false average 2.
create table test(col1 integer);
insert into test values(2);
insert into test values(null);
insert into test values(4);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/297
HyperSQL Database Engine (HSQLDB) / Bugs / #297 Reading database from inside jar fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I can't get hsqldb to connect to a read-only database 
inside a jar.
According to the description I created a test.jar with a 
testdata directory containing 
test.hsqldb.script,test.hsqldb.log and 
test.hsqldb.properties.
The test jar also contains a TestInJar class which tries 
to connect to the database.
I Use the url &quot;jdbc:hsqldb:testdata/test.hsqldb&quot; and call 
System.setProperty(&quot;hsqldb.files_in_jar&quot;,&quot;true&quot;).
Start the test with java -cp hsqldb1.7.2N.jar;test.jar 
TestInJar, hsqldb didn't connect to the database inside 
the jar, but created a new database in the current 
directory.
The same happened when I added all the testfiles 
directly to the hsqldb.jar.
Thanks for your help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/298
HyperSQL Database Engine (HSQLDB) / Bugs / #298 Insert into Table with self FK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was working with a table which has FK for self.
I found bug with this kind of table managment
when inserting data with FK to self
Here is example of used table creation script:
-----------------------------
create table SELF_FK_TEST (
TEST_ID integer not null, 
FK_ID integer,
constraint SELF_FK_TEST_PK primary key (TEST_ID), 
constraint SELF_FK_TEST_FK foreign key (FK_ID) 
references SELF_FK_TEST (TEST_ID) on delete cascade
)
-----------------------------
Problematic query:
-----------------------------
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (1,1);
-----------------------------
Reported Error:
Error: java.sql.SQLException: Integrity constraint
violation: SELF_FK_TEST_FK table: 
SELF_FK_TEST in statement 
[SET MAXROWS 100;insert into SELF_FK_TEST
(TEST_ID,FK_ID) values (1,1)]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/299
HyperSQL Database Engine (HSQLDB) / Bugs / #299 Delete from table with self FK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was working with a table which has FK for self.
I found bug with deleting data with FK to self
Here is example of used table creation script
and insert, update row queries
-----------------------------
create table SELF_FK_TEST (
TEST_ID integer not null, 
FK_ID integer,
constraint SELF_FK_TEST_PK primary key (TEST_ID), 
constraint SELF_FK_TEST_FK foreign key (FK_ID) 
references SELF_FK_TEST (TEST_ID) on delete cascade
);
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (1,null);
update SELF_FK_TEST set FK_ID=1 where TEST_ID=1;
----------------------------
Problematic query:
-----------------------------
delete from SELF_FK_TEST where TEST_ID=1;
-----------------------------
Reported Error:
Error: java.lang.StackOverflowError
-----------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/300
HyperSQL Database Engine (HSQLDB) / Bugs / #300 Delete with FK on delete cascade
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was working with a table which has FK for self on
delete cascade.
I found bug with not correct returned number of updated
rows when deleting.
Here is example of used table creation script and
insert queries for test data:
-----------------------------
create table SELF_FK_TEST (
TEST_ID integer not null, 
FK_ID integer,
constraint SELF_FK_TEST_PK primary key (TEST_ID), 
constraint SELF_FK_TEST_FK foreign key (FK_ID) 
references SELF_FK_TEST (TEST_ID) on delete cascade
)
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (1,null);
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (2,1);
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (3,1);
-----------------------------
Problematic query:
-----------------------------
delete from SELF_FK_TEST where TEST_ID=1;
-----------------------------
Returned not correct info:
1 Rows Updated
Of course 3 rows has been deleted and should be
reported, what is standard for other DB (SapDB)
-----------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/301
HyperSQL Database Engine (HSQLDB) / Bugs / #301 short form of group by doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
after creating a little test db:
create table costs (month integer,year integer,value 
double);
insert into costs values (1,2002,88);
insert into costs values (1,2003,50);
insert into costs values (1,2003,100);
insert into costs values (2,2003,56);
insert into costs values (2,2003,99);
select month, year,sum(value) from costs group by 1,2
work in 1.7.1, but not in the current cvs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/302
HyperSQL Database Engine (HSQLDB) / Bugs / #302 Table not found !
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi all,
I am using Java,JSP and HSQLDB. I ahve used HSQLDB 
as Server and given the url as 
con=DriverManager.getConnection
(&quot;jdbc:hsqldb:hsql://localhost&quot;,&quot;sa&quot;,&quot;&quot;);
With the above connection it takes as the default 
database as test, how do i mention by own database
mail to viswa@infonents.com or viswajit2@yahoo.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/303
HyperSQL Database Engine (HSQLDB) / Bugs / #303 compute after aggregation ex) select sum(1)+sum(2)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
general error occurs when this kind of sql is executed.
--
create table test(a int,b int);
insert into test values (10,20);
insert into test values (10,21);
insert into test values (10,23);
select sum(a)+sum(b) from test;
--
and nagative function gives another error
--
select -sum(a) from test;
--
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/304
HyperSQL Database Engine (HSQLDB) / Bugs / #304 computing  within argument of aggregation function  ex) sele
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
computing within argument of aggregation function ex) 
select sum(a+b) ,
S1000 general error java.lang.ClassCastException occurs 
when this kind of sql is executed.
--sql--
create table test(a int,b int);
insert into test values (10,20);
select sum(a+b) from test;
------
if value is created as numeric or double
this kind of error doesn't happen.
--sql--
create table test2(a numeric,b numeric);
insert into test2 values (10,20);
select sum(a+b) from test2;
create table test3(a float,b float);
insert into test3 values (10,20);
select sum(a+b) from test3;
------ 
and explicit casting avoid this kind of error.
--sql--
create table test(a int,b int);
insert into test values (10,20);
select sum(1.0*a+1.0*b) from test;
------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/305
HyperSQL Database Engine (HSQLDB) / Bugs / #305 Error with Default Value with VARBINARY datatype
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using Alpha N of 1.7.2:
This is my table declaration:
CREATE CACHED TABLE TALLGROUP_PERSON(TALLGROUPID
INTEGER NOT NULL,PERSONID INTEGER NOT NULL,TALLROLEID
INTEGER DEFAULT 1 NOT NULL,TOOLACTIONKEY VARBINARY
DEFAULT FFFFFFFFFFFF
This is the error:
error in script file line: 133 Wrong data type or data
too long in DEFAULT clause: FFFFFFFFFFFF in statement
If I put quotes around the 'FFFFFFFFFFFF' like so, then
it works, but then when I close the database it removes
them and then prints this error the next time I open it.
Dave Johansen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/306
HyperSQL Database Engine (HSQLDB) / Bugs / #306 SQLException: Column not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using Alpha N of 1.7.2:
When I call any of the get methods on a ResultSet
(getString(), getInt() and so on) with anything but the
column name in all uppercase it throws an SQLException.
Is this a change in the way it works or a bug? Because
lower case column names worked in previous versions of
Hypersonic.
Dave Johansen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/307
HyperSQL Database Engine (HSQLDB) / Bugs / #307 Prepared Statement param is turned to NULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Timestamp with TimeZone processed incorrect
hsqldb 172-alpha-n
Try test case
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/308
HyperSQL Database Engine (HSQLDB) / Bugs / #308 COALESCE caused the client to hang and stack trace in server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 1.7.2 alpha N
At the client, enter:
create table T1 (
R1 real,
F1 float
);
insert into t1 values (100, null);
select r1, COALESCE(f1,cast(12.12 as float)) from t1
==&gt; OK
select r1, COALESCE(f1,12.12) from t1; 
==&gt; the client hung and the server outputs 
stack trace
At the server, the following trace came out:
java.lang.ClassCastException: java.math.BigDecimal
at org.hsqldb.DatabaseRowOutput.writeData
(Unknown Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:536)
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/309
HyperSQL Database Engine (HSQLDB) / Bugs / #309 Server died on grant select ...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.7.2 Alpha N
The server will always die if my test.script has 
grant select statements. See the attached file.
Error:
org.hsqldb.HsqlException: error in script file line: 51 
Table not found: SYSTEM_
VIEW_TABLE_USAGE in statement [GRANT SELECT ON 
SYSTEM_VIEW_TABLE_USAGE]
at org.hsqldb.Trace.error(Unknown Source)
at 
org.hsqldb.DatabaseScriptReader.readExistingData
(Unknown Source)
at org.hsqldb.DatabaseScriptReader.readAll
(Unknown Source)
at org.hsqldb.Log.readScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Logger.openLog(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase
(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase
(Unknown Source)
at org.hsqldb.Server.openDB(Unknown Source)
at org.hsqldb.Server.run(Unknown Source)
at org.hsqldb.Server.access$000(Unknown Source)
at org.hsqldb.Server$ServerThread.run(Unknown 
Source)
In order to circumvent this, I have to remove by hand
all of the grant select statement, and then restart
the server.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/310
HyperSQL Database Engine (HSQLDB) / Bugs / #310 PowerBuilder 9.0 can not list any user or system tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Below is the trace from the server:
[Server@19298d]: 
2:call &quot;org.hsqldb.Library.getDatabaseProductName&quot;()
[Server@19298d]: 2:SELECT * FROM SYSTEM_TYPEINFO
[Server@19298d]: 2:CALL USER()
[Server@19298d]: 2:CLI:GETCONNECTIONATTRS
[Server@19298d]: 2:CLI:GETCONNECTIONATTRS
[Server@19298d]: 2:SELECT * FROM SYSTEM_TABLES
WHERE 1=1 AND TABLE_SCHEM LIKE
'%' AND TABLE_NAME LIKE '%' AND TABLE_TYPE IN 
('TABLE','VIEW','SYSTEM TABLE','SY
STEM VIEW','ALIAS')
[Server@19298d]: 2:SELECT * FROM 
SYSTEM_PROCEDURES WHERE 1=1 AND 
PROCEDURE_SCHEM LIKE '%' AND PROCEDURE_NAME 
LIKE '%'
I think the problem is that table_schem and 
procedure_schem are being null. I wonder if it hurts 
anywhere else if hsqldb associates the table_schem
and procedure_schem with whomever created those 
tables and procedures.
For example, if I connect as sa, then whatever 
table/procedure I create should be stored under the 
schema sa.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/311
HyperSQL Database Engine (HSQLDB) / Bugs / #311 Parametrized SQL with IN in doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tested with alpha N. 
This used to work on alpha M and before, e.g.
delete from BF_DOC_TEMPLATE where ID IN (?, ?, ?)]
now I get this exception
java.sql.SQLException: Unexpected token: parametric IN 
list item in statement [delete from BF_DOC_TEMPLATE 
where ID IN (?, ?, ?)]
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcConnection.prepareStatement
(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/312
HyperSQL Database Engine (HSQLDB) / Bugs / #312 SET TABLE ADDR_TMP SOURCE &quot;tbl_addr.txt;fs=,;&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I migrated 1.7.1's data to alpha n, the server
crashed because of lines like the following:
SET TABLE ADDR_TMP SOURCE &quot;tbl_addr.txt;fs=,;&quot;
Notice that there is a trailing &quot;;&quot;. After I manually
removed &quot;;&quot; then the server is happy.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/313
HyperSQL Database Engine (HSQLDB) / Bugs / #313 PreparedStatement failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqldb_1_7_2_ALPHA_N and have found a problem with PreparedStatement.
I have attached a JUnit test that exemplifies the problem. Basically the PreparedStatement is failing a query that a Statement is successfully executing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/314
HyperSQL Database Engine (HSQLDB) / Bugs / #314 ResultSetMetaData.isAutoIncrement returns false for IDENTITY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ResultSetMetaData.isAutoIncrement returns false for 
IDENTITY columns, also in version 1.7.2_N.
From the code I understand that isAutoIncrement is a 
supported feature from version 1.7.2, so I thought I 
should let you know...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/315
HyperSQL Database Engine (HSQLDB) / Bugs / #315 Problem with left join returning null
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
select p.propertytextid, p.internalname,
ptc.textcontent as displayname, pe.expression,
p.defaultexpression, dt.datatypeid, dt.javaclassname from 
(select descriptiontextid, propertytextid,
internalname, datatypeid, defaultexpression from
property where appliestoperson=1) p
left join
(select propertytextid, expression from
propertyexpression where objectid = 1 and objecttypeid
= 7) pe
on p.propertytextid = pe.propertytextid
left join
(select javaclassname, datatypeid from datatype) dt
on p.datatypeid = dt.datatypeid
left join
(select textcontent, textid from textcontent where
languageid = 1) ptc
on p.propertytextid = ptc.textid
This is the entire query that I want to use and it
works just fine with 1.7.1, but for some reason the
DISPLAYNAME column (ptc.textcontent) is null whenever I
do the left join with PROPERTYEXPRESSION. If I remove
the first left join (The one with PROPERTYEXPRESSION),
then it returns the values just fine.
Here's the DDLs for all of the tables:
PROPERTY:
CREATE CACHED TABLE PROPERTY(CATEGORYID INTEGER DEFAULT
NULL,DEFAULTEXPRESSION VARCHAR(4000),MINVALUE DOUBLE
DEFAULT NULL,MAXVALUE DOUBLE DEFAULT
NULL,DESCRIPTIONTEXTID INTEGER DEFAULT
NULL,TRANSLATIONNEEDED TINYINT DEFAULT
NULL,ISSYSTEMDEFINED TINYINT DEFAULT
NULL,ASSIGNABLEBYLEARNINGCONTEXT TINYINT DEFAULT
NULL,FORCOMPONENTSINLAYOUTS TINYINT DEFAULT
NULL,APPLIESTOACTIVITY TINYINT DEFAULT 0 NOT
NULL,APPLIESTOADAPTIVEPATH TINYINT DEFAULT 0 NOT
NULL,APPLIESTOACTIVITYINSTANCE TINYINT DEFAULT 0 NOT
NULL,APPLIESTOACTIVITYSET TINYINT DEFAULT 0 NOT
NULL,APPLIESTOSTAGEMARKER TINYINT DEFAULT 0 NOT
NULL,APPLIESTOCONCEPTLINK TINYINT DEFAULT 0 NOT
NULL,APPLIESTOLOCATION TINYINT DEFAULT 0 NOT
NULL,DATATYPEID INTEGER NOT NULL,PROPERTYTEXTID INTEGER
NOT NULL,INTERNALNAME VARCHAR(100) NOT
NULL,APPLIESTOSCENARIO TINYINT DEFAULT 0 NOT NULL,VITAL
TINYINT DEFAULT 0 NOT NULL,APPLIESTOTALLROLE TINYINT
DEFAULT 0 NOT NULL,APPLIESTOCONCEPT TINYINT DEFAULT 0
NOT NULL,APPLIESTOPERSON TINYINT DEFAULT 0 NOT
NULL,APPLIESTOSKINTHEME TINYINT DEFAULT 0 NOT
NULL,APPLIESTOTALLGROUP TINYINT DEFAULT 0 NOT
NULL,APPLIESTOCONCEPTTYPE TINYINT DEFAULT 0 NOT
NULL,APPLIESTOLAYOUT TINYINT DEFAULT 0 NOT NULL)
PROPERTYEXPRESSION:
CREATE CACHED TABLE PROPERTYEXPRESSION(OBJECTID INTEGER
DEFAULT NULL NOT NULL,LEARNINGCONTEXTID INTEGER DEFAULT
0 NOT NULL,EXPRESSION VARCHAR(4000) DEFAULT 'NULL' NOT
NULL,PROPERTYTEXTID INTEGER NOT NULL,VITAL TINYINT
DEFAULT 0,OBJECTTYPEID INTEGER NOT NULL,CONSTRAINT
PK_PROPERTYEXPRESSION PRIMARY
KEY(LEARNINGCONTEXTID,OBJECTID,OBJECTTYPEID,PROPERTYTEXTID))
DATATYPE:
CREATE CACHED TABLE DATATYPE(DATATYPEID INTEGER NOT
NULL,NAMETEXTID INTEGER,JAVACLASSNAME
VARCHAR(300),DESCRIPTIONTEXTID INTEGER,ISINTERNAL
TINYINT DEFAULT 1 NOT NULL)
TEXTCONTENT
CREATE CACHED TABLE TEXTCONTENT(TEXTID INTEGER DEFAULT
NULL NOT NULL,LANGUAGEID INTEGER DEFAULT NULL NOT
NULL,TEXTCONTENT VARCHAR(4000) NOT NULL,ORIGINAL
TINYINT DEFAULT 0 NOT NULL,FREQUENCYOFUSE TINYINT
DEFAULT NULL,SHOULDTRANSLATE TINYINT DEFAULT 1 NOT
NULL,HASBEENREVIEWED TINYINT DEFAULT 0 NOT
NULL,ISCOURSECONTENT TINYINT DEFAULT 0 NOT
NULL,CONSTRAINT PK_TEXTCONTENT PRIMARY
KEY(LANGUAGEID,TEXTID))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/316
HyperSQL Database Engine (HSQLDB) / Bugs / #316 Confusing error message with &quot;left join&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you have a typo in &quot;left join&quot; then it chops off the
SQL and gives an error message that is very confusing.
I did the following:
select p.internalname, tc.textcontent from
(select propertytextid, internalname from property) p
LEJT JOIN
(select textcontent, textid from textcontent) tc
on p.propertytextid=tc.textid
And it threw an SQLException with an error about
TEXTCONTENT being an invalid column. I think it would
help if it told me that &quot;LEJT JOIN&quot; was invalid.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/317
HyperSQL Database Engine (HSQLDB) / Bugs / #317 In XP can't do a jdbc connect with Manager UI
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CAN do it programmatically in XP but not by Manager 
UI. I try to connect to HypersonicSQL Server with 
org.hsql.jdbcDriver and 
jdbc:HypersonicSQL:hsql://localhost from the Manager 
UI BUT I get the following java.sql.SQL. Exception 
connection is broken, network subsystem has failed.
Is it just that the version of hsql (circa 2001) just 
doesn't do XP with the UI? My email is dfheinz@aol.com
thanks
Daryl Heinz
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/318
HyperSQL Database Engine (HSQLDB) / Bugs / #318 Server start of 6MB database out of memory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to start a server with a 6MB database, but it 
failed.
java -cp hsqldb1.7.2N.jar org.hsqldb.Server -port 9999 -
database test -silent false
[org.hsqldb.Server@87816d]: Startup sequence initiated 
from main() method
[org.hsqldb.Server@87816d]: Loading properties from 
[E:\MB\Diss\workspace\Joolap
\server]
[org.hsqldb.Server@87816d]: Could not load properties 
from file
[org.hsqldb.Server@87816d]: Using cli/default properties 
only
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
start() entered
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
waitForStatus() entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: run() entered
[org.hsqldb.Server@87816d]: Initiating startup 
sequence...
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.database=joolap
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.tls=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.port=9999
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.trace=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.database.0=test
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: 
server.restart_on_shutdown=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: 
server.no_system_exit=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.silent=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: 
server.default_page=index.html
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.address=any
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.dbname.0=
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.root=./
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: openServerSocket() 
entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: Got server socket: ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999]
[org.hsqldb.Server@87816d]: Server socket opened 
successfully in 90 ms.
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: openServerSocket() exiting
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: openDB() entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: Opening database: [file:test]
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: openDB() exiting
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: notifyStatus() entered
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
waitForStatus() exited
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
start() exiting
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: notifyStatus() exited
[org.hsqldb.Server@87816d]: Startup sequence 
completed in 671 ms.
[org.hsqldb.Server@87816d]: 2003-09-10 09:41:03.977 
HSQLDB server 1.7.2 is onlin
e
[org.hsqldb.Server@87816d]: To close normally, connect 
and execute SHUTDOWN SQL
[org.hsqldb.Server@87816d]: From command line, use 
[Ctrl]+[C] to abort abruptly
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: handleConnection(): Socket
[addr=/127.0.0.1,port=3148,localport=9999]
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: checkRunning() entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: checkRunning() exited
[org.hsqldb.Server@87816d]: [Thread[[Socket
[addr=/127.0.0.1,port=3148,localport=
9999]],5,org.hsqldb.Server@87816d[CONNECTIONS]]]: 
0:trying to connect user null
java.lang.OutOfMemoryError
file sync interval: 59055
file sync: 40
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/319
HyperSQL Database Engine (HSQLDB) / Bugs / #319 Metadata ignorant about new tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ported an hsql1.7.1 database to 1.7.2O and have some 
hava code look inside the metadata for the tablenames:
StringBuffer result = new StringBuffer(&quot;tables:&quot;);
try {
DatabaseMetaData meta = 
con.getMetaData();
ResultSet rs = null;
rs = meta.getTables(null, 
null, null, null);
while (rs.next()) {
result.append
(rs.getObject(3) + &quot; &quot;);
}
rs.close();
} catch (Exception e) {
e.printStackTrace();
}
The old tables show up, but when I create new tables in 
the 1.7.2O DatabaseManager, they aren't listed in the 
metadata in server as well as in-process mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/320
HyperSQL Database Engine (HSQLDB) / Bugs / #320 Server shutdown failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can't reproduce it, but when issuing shutdown to a 
Hsqldb1.7.2O server, I got the following exception:
[Server@422ede]: 1:shutdown
java.lang.NullPointerException
at org.hsqldb.store.BaseHashMap.getInt(Unknown 
Source)
at org.hsqldb.lib.IntValueHashMap.get(Unknown 
Source)
at 
org.hsqldb.DatabaseManager.releaseAccessCount
(Unknown Source)
at org.hsqldb.SessionManager.closeAllSessions
(Unknown Source)
at org.hsqldb.Database.close(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.processShutdow
n(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.executePart
(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.execute
(Unknown Source)
at org.hsqldb.Session.sqlExecuteDirectNoPreChecks
(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/321
HyperSQL Database Engine (HSQLDB) / Bugs / #321 1.7.2 ALPHA_O cannot read binary script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a database where I converted the .script file to
a binary representation (using 1.7.2 ALPHA M) using set
logtype 1
When I try to open this DB (standalone) with ALPHA_O I
get an exception:
java.sql.SQLException: 
error in script file line: 1 Unexpected token: in
statement []
(actually between &quot;token:&quot; and &quot;in statement&quot; there is
an unreadable character)
When I open the DB with ALPHA_M, set logtype 0 then I
can open the DB with ALPHA_O as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/322
HyperSQL Database Engine (HSQLDB) / Bugs / #322 Database works but stops writing to file 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using hsqldb 1.7.1 with Java 1.3.0 on a Solaris
5.8 machine:
SunOS k130s1 5.8 Generic_108528-18 sun4u sparc
SUNW,Ultra-60
For some 10 days the database has obviously worked
correctely but did not write any data to the
hsqldb.script file:
We used our Java database application during this time.
The application does not hold any data outside hsqldb
and I could add and remove entries. However, the
database file date has not changed for 10 days and the
last entry is 10 days back.
Consequentely, on a restart of the database, I lost all
the data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/323
HyperSQL Database Engine (HSQLDB) / Bugs / #323 Left join - no result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used standard left join query.
But this was not working if in ON clause is 
another condition
Example:
create table BASE (ID integer)
create table CHILD(ID integer, BASE_ID integer)
insert into BASE values (1)
insert into CHILD values (1,1)
Correct query:
select BASE.ID,CHILD.ID 
from BASE
left join CHILD 
on CHILD.BASE_ID=BASE.ID
Result:
1,1
Problematic query:
select BASE.ID,CHILD.ID 
from BASE
left join CHILD 
on CHILD.BASE_ID=BASE.ID and CHILD.ID&gt;1
No result !!!
Of course I expect that there will be result like:
1, null
I also found similar reported bug which 
is already closed:
[ 473613 ] join/condition bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/324
HyperSQL Database Engine (HSQLDB) / Bugs / #324 Cannot specify a column type + IDENTITY together
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation for CREATE TABLE states:
columnDefinition: 
columnname Datatype [(columnSize[,precision])] [DEFAULT 
'defaultValue'] [[NOT] NULL] [IDENTITY] [PRIMARY KEY] 
The following statement, compliant with the above specification and 
generated by Hibernate's hbm2ddl tool gets rejected:
create table Motion (id BIGINT NOT NULL IDENTITY, idx BIGINT not 
null, startTime TIMESTAMP, endTime TIMESTAMP, sms BIT not null, 
webcamID BIGINT not null)
with the following error message:
Wrong data type: ID in statement [...]
The following statement works, despite that it does not follow the 
grammar rule:
create table Motion (id IDENTITY NOT NULL, idx BIGINT not null, 
startTime TIMESTAMP, endTime TIMESTAMP, sms BIT not null, 
webcamID BIGINT not null)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/325
HyperSQL Database Engine (HSQLDB) / Bugs / #325 NIO IllegalArgumentException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The database using NIO would try to access
a file beyond the length of the buffer causing
an IllegalArgumentException. The code missed
the corner case when the seek position was
equal to the file length. Attached is a modified file
that fixes this. I no longer get the 
IllegalArgumentException.
Also, I took the liberty of expanding the data file
linearly instead of exponentially. This seems to work
in the testing I've done, and it cuts down on disk usage.
Thanks for a great product!
-Tim
tjw3000@bellatlantic.net
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/326
HyperSQL Database Engine (HSQLDB) / Bugs / #326 1.7.2 ALPHA N+O: Query on SYSTEM_SESSIONS throws SQLExc.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I guess there´s a problem with the SYSTEM_SESSIONS 
table.
Here´s a short description of what I did:
1. User 1 connects to a database (served by 
org.hsqldb.Server).
2. User 1 disconnects.
3. User 2 connects to the same database.
4. User 2 posts statement &quot;SELECT * FROM 
SYSTEM_SESSIONS&quot; which results in the following 
SQLException: 
(copied from DatabaseManagerSwing)
&quot;S1000 General error java.lang.NullPointerException in 
statement [SELECT * FROM SYSTEM_SESSIONS] / Error 
Code: 40 / State: S1000&quot;
Details can be found in the attached file.
(&quot;//&quot; lines are my comments)
Udo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/327
HyperSQL Database Engine (HSQLDB) / Bugs / #327 possible DatabaseManager confusion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed a special case which can confuse the 
DatabaseManager (1.7.2P) and possibly also destroy a 
database.
When copying a database from one directory to another, 
I only copied test.script, but forgot about the 
test.properties file.
When I tried to open the database with the 
DatabaseManager no tables were shown, the existing 
test.script was ignored and the command &quot;checkpoint&quot; 
or &quot;shutdown&quot; would even overwrite the existing file.
This behaviour is new to 1.7.2P (wasn't in 1.7.2N).
Before I also used to copy .script files around and rely 
on the DatabaseManager to recreate a 
default .properties file as needed. So I guess some users 
might get very confused about this changed behaviour.
I suggest improved exception information (e.g. 
test.script found but no test.properties). (would also be 
good if a properties file is missing is missing inside a jar 
file - see other bug report).
I guess a question like : &quot;Shall I create a default 1.7.2 
properties file&quot; would be ideal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/328
HyperSQL Database Engine (HSQLDB) / Bugs / #328 maxlength of varchar is ignored
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class.forName( &quot;org.hsqldb.jdbcDriver&quot; );
java.sql.Connection conn = java.sql.DriverManager.
getConnection( 
&quot;jdbc:hsqldb:c:/Documents and Settings/dima/My 
Documents/java/testdb/data&quot;, &quot;sa&quot;, &quot;&quot; );
java.sql.Statement stat = conn.createStatement();
stat.executeUpdate( &quot;CREATE TABLE TEST (ID 
VARCHAR(10) )&quot; );
stat.executeUpdate( &quot;INSERT INTO TEST (ID) VALUES 
('this is a test value longer than 10 chars')&quot; );
// should throw an exception here
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/329
HyperSQL Database Engine (HSQLDB) / Bugs / #329 NIO lock problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting an exception when trying to allocate a
connection. I tried to clean database files before
running the program, with no success. 
It was tested on Compaq Tru64 platform, &quot;java version
&quot;1.4.0&quot;
Java(TM) 2 Runtime Environment, Standard Edition
Fast VM (build 1.4.0-1.p2, native threads, mixed mode,
12/10/2002-19:05)&quot;.
The same code _works_ on Win2000 or Linux (also java
ver 1.4) with no problem, so maybe this is just a buggy
Java NIO API on Tru64. But I need to make it running on
Tru64 somehow. 
Is there any way to avoid using NIO API in hsqldb?
Right now I just commented all code in
org.hsqldb.NIOLockFile in my sources (and it works fine).
WBR,
Maxim
import java.sql.*;
class Test {
public static void main(String args[]) throws
Exception {
Class.forName(&quot;org.hsqldb.jdbcDriver&quot;);
String path = &quot;jdbc:hsqldb:qq&quot;;
Connection conn1 =
DriverManager.getConnection(path, &quot;sa&quot;, &quot;&quot;);
System.out.println(conn1);
}
}
/*
java.io.IOException: No locks available
at sun.nio.ch.FileChannelImpl.lock0(Native Method)
at
sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:528)
at
java.nio.channels.FileChannel.tryLock(FileChannel.java:967)
at
org.hsqldb.NIOLockFile.lockImpl(NIOLockFile.java:82)
at org.hsqldb.LockFile.tryLock(LockFile.java:804)
at org.hsqldb.Logger.acquireLock(Logger.java:343)
at org.hsqldb.Logger.openLog(Logger.java:93)
at org.hsqldb.Database.reopen(Database.java:257)
at org.hsqldb.Database.open(Database.java:220)
at
org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:182)
at
org.hsqldb.DatabaseManager.newSession(DatabaseManager.java:100)
at
org.hsqldb.jdbcConnection.&lt;init&gt;(jdbcConnection.java:2418)
at
org.hsqldb.jdbcDriver.getConnection(jdbcDriver.java:214)
at
org.hsqldb.jdbcDriver.connect(jdbcDriver.java:198)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at Test.main(Test.java:8)
java.sql.SQLException: The database is already in use
by another process:
org.hsqldb.NIOLockFile@c7305c97[file =/home/mve/qq.lck,
exists=true, locked=false, valid=false, fl =null]:
at
org.hsqldb.jdbcDriver.sqlException(jdbcDriver.java:140)
at
org.hsqldb.jdbcConnection.&lt;init&gt;(jdbcConnection.java:2432)
at
org.hsqldb.jdbcDriver.getConnection(jdbcDriver.java:214)
at
org.hsqldb.jdbcDriver.connect(jdbcDriver.java:198)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at Test.main(Test.java:8)
*/
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/330
HyperSQL Database Engine (HSQLDB) / Bugs / #330 NullPointerException using IN where NULL values in column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version:
hsqldb_1_7_2_ALPHA_Q
Error message: 
S1000 General error java.lang.NullPointerException
How to reproduce bug:
First create the table and insert some integer values:
create table MYTABLE (MYCOLUMN integer);
insert into MYTABLE (MYCOLUMN) values (1);
insert into MYTABLE (MYCOLUMN) values (2);
The following select runs fine:
select * from MYTABLE where MYCOLUMN in (1,2); 
Now insert a null value:
insert into MYTABLE (MYCOLUMN) values (null);
The following select fails:
select * from MYTABLE where MYCOLUMN in (1,2); 
So I guess you have to do a check for null before 
comparing the data in the table with the values in the IN 
statement.
I know this worked before in 1.7.1, as my code failed 
trying to switch to the latest alpha.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/331
HyperSQL Database Engine (HSQLDB) / Bugs / #331 NullPointerException with VARCHAR and PS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I do the following PreparedStatement:
select TEXTID from TEXTCONTENT where TEXTCONTENT = ?
and LANGUAGEID = ?
I get this NullPointerException when I call
ps.setString(1, &quot;test&quot;)
java.lang.NullPointerException
at
org.hsqldb.jdbcPreparedStatement.checkSetParameterIndex(jdbcPreparedStatement.java:2178)
at
org.hsqldb.jdbcPreparedStatement.setString(jdbcPreparedStatement.java:689)
at
com.tallgroup.business.BTextContent.getTextIDForText(BTextContent.java:267)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/332
HyperSQL Database Engine (HSQLDB) / Bugs / #332 rs.isBeforeFirst() should return false
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
rs.isBeforeFirst() should return false when ResultSet is 
empty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/333
HyperSQL Database Engine (HSQLDB) / Bugs / #333 Transactions and closing server from dos bug!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http://sourceforge.net/forum/forum.php?
thread_id=945623&amp;forum_id=73674
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/334
HyperSQL Database Engine (HSQLDB) / Bugs / #334 wrong results with join in ALPHA_Q version
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is how to reproduce the problem:
- unzip the current alpha (ALPHA_Q) in some directory
- execute runServer.bat in the demo directory
- execute runManager to connect to this database
- execute the following script:
CREATE TABLE MEDIUM_CONTAINER(ID VARCHAR(28) NOT NULL
PRIMARY KEY,TITLE VARCHAR(30) NOT NULL)
CREATE TABLE CAZE(ID VARCHAR(28) NOT NULL PRIMARY KEY)
CREATE TABLE SLEEVE(ID VARCHAR(28) NOT NULL PRIMARY KEY)
INSERT INTO MEDIUM_CONTAINER
VALUES('1i1rncBXY3/zutUEEVW4WIGx/GY=','hoi')
INSERT INTO MEDIUM_CONTAINER
VALUES('HCycYbJIM0tNnAuak47DcyRtLi0=','ukguk')
INSERT INTO MEDIUM_CONTAINER
VALUES('U5Po17a9tiwrQWIdO9E0zxh/iBU=','jjjj')
INSERT INTO MEDIUM_CONTAINER
VALUES('ay7XMXKeZSaq6sq1h6FuWOhlERM=','groovy trax')
INSERT INTO MEDIUM_CONTAINER
VALUES('g89gMKcNcrKyuwMmdemfU8qpdYc=','Serious Beats 4')
INSERT INTO MEDIUM_CONTAINER
VALUES('uqYTusxB8LyRyl5CUkzYiYP7Gtw=','giugi')
INSERT INTO CAZE VALUES('1i1rncBXY3/zutUEEVW4WIGx/GY=')
INSERT INTO CAZE VALUES('g89gMKcNcrKyuwMmdemfU8qpdYc=')
INSERT INTO SLEEVE VALUES('HCycYbJIM0tNnAuak47DcyRtLi0=')
INSERT INTO SLEEVE VALUES('U5Po17a9tiwrQWIdO9E0zxh/iBU=')
INSERT INTO SLEEVE VALUES('ay7XMXKeZSaq6sq1h6FuWOhlERM=')
INSERT INTO SLEEVE VALUES('uqYTusxB8LyRyl5CUkzYiYP7Gtw=')
- now execute the following select:
select mediumco0_.id as id,
casewhen(mediumco0__1.id is not null, 1,
casewhen(mediumco0__2.id is not null, 2,
casewhen(mediumco0_.id is not null, 0, -1))) as clazz_,
mediumco0_.title as title0_
from
MEDIUM_CONTAINER mediumco0_
left outer join SLEEVE mediumco0__1 on
mediumco0_.id=mediumco0__1.id
left outer join CAZE mediumco0__2 on
mediumco0_.id=mediumco0__2.id
-&gt; this will return 2 records;
ID CLAZZ_ TITLE0_ 
---------------------------- ------ --------------- 
1i1rncBXY3/zutUEEVW4WIGx/GY= 2 hoi 
g89gMKcNcrKyuwMmdemfU8qpdYc= 2 Serious Beats 4 
2 row(s) in 0 ms
- perform the same operations with the ALPHA_M release
-&gt; the select will return 6 records;
ID CLAZZ_ TITLE0_ 
---------------------------- ------ --------------- 
1i1rncBXY3/zutUEEVW4WIGx/GY= 2 hoi 
HCycYbJIM0tNnAuak47DcyRtLi0= 1 ukguk 
U5Po17a9tiwrQWIdO9E0zxh/iBU= 1 jjjj 
ay7XMXKeZSaq6sq1h6FuWOhlERM= 1 groovy trax 
g89gMKcNcrKyuwMmdemfU8qpdYc= 2 Serious Beats 4 
uqYTusxB8LyRyl5CUkzYiYP7Gtw= 1 giugi 
6 row(s) in 20 ms
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/335
HyperSQL Database Engine (HSQLDB) / Bugs / #335 select with where on unique indexed column doesn't work well
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm working on 1.7.2 alpha_M (I have problems with 
version alpha_R - I wrote about it in the forum)
The test case is:
I have server.properties file with:
'server.database=pecan'
1. run runServer.bat
2. run runManager.bat, connect as user = sa and create 
a new user:
CREATE USER PECAN PASSWORD &quot;PECAN&quot; ADMIN
3. connect to pecan user (from the dbManager).
4. run the following sqls:
----------------
CREATE CACHED TABLE APP (
VARIANT_ID INTEGER (9) NOT NULL,
APP_ID INTEGER (9) NOT NULL,
APP_NAME VARCHAR (35) NOT NULL,
CONSTRAINT PK_APP PRIMARY KEY( VARIANT_ID));
--------------
CREATE INDEX APP ON APP(APP_ID);
--------------
ALTER TABLE APP ADD CONSTRAINT APP_IX1 UNIQUE( 
APP_NAME);
-------------
INSERT INTO APP VALUES (1, 1, 'Shelly');
-------------
INSERT INTO APP VALUES (2, 2, 'Eran');
------------
COMMIT;
------------
SHUTDOWN;
5. run runServer.bat
6. run runManager.bat - connect with user=pecan and 
run the following sqls:
-------------
SELECT * FROM APP;
(you get 2 records back)
------------
SELECT * FROM APP WHERE APP_
NAME = 'Shelly';
(the record is returned)
-----------
SELECT * FROM APP WHERE APP_
NAME = 'Eran';
(nothing is returned !!!)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/336
HyperSQL Database Engine (HSQLDB) / Bugs / #336 create user with jdbc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With 1.7.2 R the following jdbc prepared statement
&quot;create user ? password ? admin&quot;
throws SQLException &quot;parameter index out of range: 1&quot;
when trying to substitute the first ? with name using 
setString(1, &quot;name&quot;)
This was warking correctly with 1.7.2M and before
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/337
HyperSQL Database Engine (HSQLDB) / Bugs / #337 select date/time with jdbc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
our table is
create table date_test
(
DATE_TEST DATE NOT NULL
)
Do following in java
Calendar cal= Calendar.getInstance()
cal.set(1974, 10, 20, 1, 2, 3)
java.sql.Date insertDate = new java.sql.date
(cal.getTimeInMillis())
// now insert this insert date into a table 
insert = prepareStatement(&quot;insert into date_test
(date_test) values(?)&quot;);
insert.setDate(1, insertDate);
commit
now try to select the date back using following code
select = prepareStatement(&quot;select date_test.* from 
date_test where date_test = ?&quot;);
// Notice that I am setting different time then before
// but it shouldn't matter since I am querying just the 
date
cal.set(1974, 10, 20, 2, 3, 4)
java.sql.Date selectDate = new java.sql.date
(cal.getTimeInMillis())
select.setDate(1, selectDate)
The result set returned is empty
If I would set the exact time I set when I inserted the 
date, the result set would contain the record.
The same happens if I want to insert time and then 
select it with different date into a TIME column
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/338
HyperSQL Database Engine (HSQLDB) / Bugs / #338 comparison with LIKE and Pstmts fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi there,
(see below sample code). it seems that &quot;col LIKE ?&quot; is 
broken in the current release. the below code normally 
should return a row, but if I use LIKE the it does not. 
the result of the comparison is always false. if i simply 
use col = ?, it works as expected. seems to be a bug.!? 
.thomas tom@gmx.it
Connection conn = 
DriverManager.getConnection( &quot;jdbc:hsqldb:.&quot;,&quot;sa&quot;,&quot;&quot; );
Statement stmt = 
conn.createStatement();
stmt.executeUpdate(&quot;CREATE TABLE 
test (col VARCHAR(30))&quot;);
stmt.executeUpdate(&quot;INSERT INTO 
test (col) VALUES ('one')&quot;);
stmt.close();
PreparedStatement pstmt = 
conn.prepareStatement( &quot;SELECT * FROM test WHERE ( 
col LIKE ? )&quot; );
pstmt.setString(1,&quot;one&quot;);
ResultSet rs = pstmt.executeQuery();
rs.next();
System.out.println( rs.getString
(&quot;COL&quot;));
conn.close();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/339
HyperSQL Database Engine (HSQLDB) / Bugs / #339 where column in (select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given a table
CREATE TABLE dups(
pk INTEGER NOT NULL PRIMARY KEY,
val VARCHAR NOT NULL);
with content
INSERT INTO dups VALUES (1, 'first');
INSERT INTO dups VALUES (2, 'second');
INSERT INTO dups VALUES (3, 'third');
INSERT INTO dups VALUES (4, 'first');
INSERT INTO dups VALUES (5, 'first');
INSERT INTO dups VALUES (6, 'second');
following statements work as expected:
SELECT distinct(sa.pk) FROM dups sa, dups sb
WHERE sa.val=sb.val AND sa.pk!=sb.pk;
SELECT a.pk, a.val FROM dups a
WHERE a.pk in (1, 2, 4, 5, 6);
The combined statement
SELECT a.pk, a.val FROM dups a 
WHERE a.pk in (SELECT distinct(sa.pk)
FROM dups sa, dups sb 
WHERE sa.val=sb.val AND sa.pk!=sb.pk);
results in
SQL Error 
----------------------------------------------------- 
Column not found: PK / Error Code: -28 / State: S0022 
11 row(s) in 0 ms
in alpha N - R
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/340
HyperSQL Database Engine (HSQLDB) / Bugs / #340 hsqldbmin.jar looking for HSQLClientConnection
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to run embedded hsqldbmin.jar, and getting:
java.lang.NoClassDefFoundError: 
org/hsqldb/HSQLClientConnection
This comes from src.org.hsqldb.HSQLClientConnection 
line 1590 (alpha R):
isNetConn = c.sessionProxy instanceof 
HSQLClientConnection;
HSQLClientConnection is not included in hsqldbmin.jar - it 
does implement SessionInterface which is included. A fix 
for embedded mode is:
isNetConn = c.sessionProxy instanceof SessionInterface;
I don't have the background to know if this might have 
any bad side effect in server modes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/341
HyperSQL Database Engine (HSQLDB) / Bugs / #341 Deletion of .backup file causes db corruption w/JDBC
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I deleted a .backup file (isn't this permitted?). Then I 
opened the db using JDBC (DriverManager.getConnection
()). This results in a &quot;database in use&quot; error, and the db
is corrupted, having 0 bytes.
This sounds like a serious bug, if it is a bug. At any 
rate, the system should never blow away the entire db?
Thanks,
Dave C.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/342
HyperSQL Database Engine (HSQLDB) / Bugs / #342 New bug in Select/Like on primary key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Working with HSQLDB 1.7.2 - S
Following DDL:
CREATE TABLE additionaldata (
function VARCHAR(20) PRIMARY KEY,
value1  int NOT NULL,
value2 int NOT NULL, 
value3 varchar,
description varchar);
If i'm doing the following query:
select * from additionaldata where function like 'G%'
the ResultSet is empty. This is definitly wrong!
Using only 
select * from additionaldata where function like '%'
the whole table will be shown (this is ok)
Removing the &quot;Primary Key&quot; constraint from the DDL in 
the &quot;function&quot;-column causes the SQL-queries to 
perform properly.
Any ideas about that? I'm quite sure, that the version of 
HSQLDB I tried before does not behave like this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/343
HyperSQL Database Engine (HSQLDB) / Bugs / #343 LIKE error in v. 1.7.2_S
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I created a simple cached test table:
ID INTEGER IDENTITY
DESC VARCHAR(250) NOT NULL
and an index to DESC column.
I execute a simple Java program to fill the table with 
random numbers (200,000 records). No problem.
I execute this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC = '-579661107'
And works fine:
Execution: 46 ms.
Fetch: 110 ms.
Records: 1
Then I try this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC LIKE '-579661107'
And works fine too:
Execution: 31 ms.
Fetch: 110 ms.
Records: 1
And this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC LIKE '%-5796611%'
And works fine too:
Execution: 7281 ms.
Fetch: 109 ms.
Records: 1
Finally, I try this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC LIKE '-5796611%'
And DON'T WORKS:
Execution: 46 ms.
Fetch: 0 ms.
Records: 0
I try also with LIKE '-57966%07' and don't works
again.
HSQLDB is unable to find the record.
Thanks,
Francesc Rosés
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/344
HyperSQL Database Engine (HSQLDB) / Bugs / #344 (ALPHA_S) Can't compile HsqlDateTime with earlier JDKs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One can't compile HsqlDateTime.java with JDK1.3 or earlier 
because it uses Calendar's setTimeInMillis(long) and 
getTimeInMillis() methods, which were protected rather than 
public until JDK1.4 (I think it was). Equivalents, though less 
efficient, in earlier JDKs would be Calendar.setTime(new 
java.util.Date(long)) and 
Calendar.getTime().getTime().
FWIW, I've attached an 
updated HsqlDateTime.java and build.xml which use 
codeswitcher and a wrapper method to use the more efficient 
methods when JDBC3 is defined, the less efficient ones otherwise.
Using a wrapper makes the code simpler (though not so pretty) and 
the optimizer should toss the overhead. Used the 'tempDate' static 
member that was lying around seemingly unused (made it private).
Haven't done regression on it, no warrantee.
Obviously, 
I'm not a developer on the project and throw it away if you like. It's 
just FWIW.
Regards,
--
T.J. Crowder
tjcrowder 
at users
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/345
HyperSQL Database Engine (HSQLDB) / Bugs / #345 Errors in Text Tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a problem with writing and then reading text
tables.
The problems are related to the field &quot;SystemId&quot; feature.
Seems like the text tables were written without the
last column, and when reading, 
the extra column &quot;SystemId&quot; was created.
When the last column type was not the same type of
SystemId (long, i guess), 
a ClassCastException was thrown, and the server hanged
(as the client).
I studied and fixed this problem in 2 methods:
In class DatabaseRowInput:
public Object[] readData(int[] colTypes) {
int l = colTypes.length;
Object[] data = new Object[l+(makeSystemId ? 1 : 0)];
Object o;
int type;
&lt;...unmodified...&gt;
if (makeSystemId) {
data[l] = new Integer(getPos());
}
return data;
}
and in class DatabaseRowOutput:
public void writeData(Object[] data, Table t)
throws IOException, SQLException {
int[] types = t.getColumnTypes();
int l = types.length;
writeData(l, types, data);
}
Without this (or other fix) to resolve this issue,
using text tables with the 
full life cycle (attaching, updating/inserting, closing
bd, reopening, reading)
will be impossible.
The connection hangup was due to the fact that we were
not expecting a 
ClassCastException in class ServerConnection, method run().
I think a catch(Exception e) statement should be add
after the existing
one for IOException and SQLException, to avoid this
problem.
Best Regards,
Carlos Silva
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/346
HyperSQL Database Engine (HSQLDB) / Bugs / #346 1.7.1 zip missing hsqldb.gif in src/org/hsqldb/util
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After using ant to build the standard jar or any jar 
including Swing, the DatabaseManagerSwing utility will 
fail to load, on a getIcon statement in CommonSwing.
Upon examing the source, I see the .gif mentioned is 
missing from the distro. I found one on the web, put it 
in hsqldb/src/org/hsqldb/util, and reran ant (the ant file 
does mention this gif explicitly for inclusion). This fixes 
the problem (still a bug though, until the distro zip is 
fixed).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/347
HyperSQL Database Engine (HSQLDB) / Bugs / #347 .lck file created for read-only database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
- The 'readonly' property is set to 'true' in the 
&lt;database name&gt;.properties file.
- This database has been shutdown by the 'SHUTDOWN 
COMPACT' command.
Each connection to the resulting database still creates a 
&lt;database name&gt;.lck file, preventing it to be put in a 
CD-ROM, for example.
This has been tested on 1.7.2 alpha N, R and S versions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/348
HyperSQL Database Engine (HSQLDB) / Bugs / #348 number of records
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I'm writing from Palermo(Sicilia).
Thanks for your hsqldb database that i'm using for a web 
application with servlet,jsp e javaBean.
The version that i use is 1.7.1 but i have found a bug, i 
think.
I use this method to find the number of records of a 
ResultSet :
public int getRowsCount(){
int i=0;
try{
rs.last();
i= rs.getRow();
rs.first();
} catch (Exception e) {System.out.println
(e.toString());} 
return i;
}
if records are 4 this method return 4 and in ResultSet 
there are 4 records but if i use while loop to print 
records, it prints 3 records if i use before this method, 
and 4 records if i don't use this method before
I use this ResultSet :
st = cConn.createStatement 
(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCU
R_READ_ONLY);
rs = st.executeQuery (&quot;SELECT 
Annunci.Key,Annunci.Data, Annunci.Annuncio,&quot;+ 
&quot;Associazioni.Associazione, 
Associazioni.Sito, Associazioni.Mail,Associazioni.Citta,&quot;+
&quot; Categorie.Categoria FROM 
Categorie,Annunci,Associazioni&quot; +
&quot; WHERE (((Associazioni.KeyCategoria) 
LIKE &quot;+ categoria +&quot;))&quot; + 
&quot; AND (((Associazioni.Citta) LIKE '%&quot;+ 
citta.toUpperCase() +&quot;%'))&quot; + 
&quot; AND 
Associazioni.KeyCategoria=Categorie.Key &quot; + 
&quot;AND Annunci.KeyAssociazione= 
Associazioni.Key order by key desc&quot;);
What can i do to find number of records without to use 
this method ?
Spero di essere stato utile
Ciao e grazie.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/349
HyperSQL Database Engine (HSQLDB) / Bugs / #349 LIKE bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a simple table with version 1.7.2 alpha R :
CREATE TABLE my_table
( name VARCHAR );
INSERT INTO my_table
VALUES ('test');
then this first SELECT statement returns this last 
inserted row:
SELECT name
FROM my_table
WHERE name LIKE 'test';
But this one don't, though it should !
SELECT name
FROM my_table
WHERE name LIKE LOWER('test');
This seems to happen when you use any string function, 
except CONCAT:
SELECT name
FROM my_table
WHERE name LIKE CONCAT('te', 'st');
... returns this row.
However when you include another string function the 
problem reappears:
SELECT name
FROM my_table
WHERE name LIKE CONCAT(SUBSTR('te', 1), 'st');
... does not return any row.
There was not any problem when I used the 1.7.2 alpha 
N version. Alpha T still have this bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/350
HyperSQL Database Engine (HSQLDB) / Bugs / #350 alter table... add default not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running the following command in the DatabaseManager:
alter table k alter column vc add default 'dfltval'
It returns &quot;Unexpected token: ADD in statement [alter
table k alter column vc add] / Error Code: -11 / State:
37000.
version A T.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/351
HyperSQL Database Engine (HSQLDB) / Bugs / #351 saveSorted ... negative seek offset (2)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm using HSQL 1.7.1 with JRE1.3.1_03 in a Windows 
2000 environment. My database contains only one table 
with 8,000,000 rows (database size is about 1 GB) and 
three indexes on single columns. I had a former problem 
with creating resp. dropping an index which didn't work 
because of an
&quot;File input/output error: saveSorted java.io.IOException: 
Negative seek offset in statement [...]&quot;
error (see bug submission 780397 from 2003-07-30). I 
solved this problem by creating a new database and 
copying the data row by row.
Now I have a more serious problem: The database can't 
start anymore because of the same error (though I used 
a backup which has been successfully compacted 
before). When I remove the &quot;CREATE INDEX&quot; statements 
from the script file I get InputStream-errors (because 
the index roots aren't valid anymore), when I 
remove &quot;CREATE INDEX&quot; and &quot;SET TABLE INDEX&quot; 
commands I get no errors but have no access to the 
data anymore (though the database size stays the 
same).
No my questions:
Is there another workaround for this situation? 
How can I manipulate the &quot;SET TABLE INDEX&quot; command 
manually so it doesn't lead to the errors described above?
Will it be possible to use an index spanning more rows in 
1.7.2?
Greetings,
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/352
HyperSQL Database Engine (HSQLDB) / Bugs / #352 Create View fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This sequence 
create table bf_user(
id integer not null
)
create table BF_ISSUEDITEM(
inventory_id integer not null,
STILL_ISSUED_COUNT integer not null,
ISSUED_DATE timestamp not null,
recipient integer not null
)
create view BF_USER_STILL_ISSUEDITEM_PART as
select BF_USER.ID as ID,
BF_ISSUEDITEM.INVENTORY_ID as INVENTORY_ID,
sum(BF_ISSUEDITEM.STILL_ISSUED_COUNT) as 
STILL_ISSUED_COUNT,
min(BF_ISSUEDITEM.ISSUED_DATE) as ISSUED_SINCE
from BF_USER, BF_ISSUEDITEM
where BF_USER.ID = BF_ISSUEDITEM.RECIPIENT
AND BF_ISSUEDITEM.STILL_ISSUED_COUNT &gt; 0
group by BF_USER.ID, BF_ISSUEDITEM.INVENTORY_ID 
create view BF_USER_STILL_ISSUEDITEM_FULL as 
select BF_USER.ID as ID,
BF_USER_STILL_ISSUEDITEM_PART.INVENTORY_ID AS 
INVENTORY_ID, 
BF_USER_STILL_ISSUEDITEM_PART.STILL_ISSUED_COUN
T as STILL_ISSUED_COUNT, 
BF_USER_STILL_ISSUEDITEM_PART.ISSUED_SINCE as 
ISSUED_SINCE
from BF_USER, BF_USER_STILL_ISSUEDITEM_PART
where BF_USER.ID = 
BF_USER_STILL_ISSUEDITEM_PART.ID 
generates this exception (works in alpha M)
java.sql.SQLException: Table not found in statement [ 
select BF_USER.ID as ID, BF_USER.DOMAIN_ID as 
DOMAIN_ID, 
BF_USER_STILL_ISSUEDITEM_PART.INVENTORY_ID AS 
INVENTORY_ID, BF_USER.FIRST_NAME as 
FIRST_NAME, BF_USER.LAST_NAME as 
LAST_NAME, BF_USER.LOGIN_NAME as 
LOGIN_NAME, 
BF_USER_STILL_ISSUEDITEM_PART.STILL_ISSUED_COUN
T as STILL_ISSUED_COUNT, 
BF_USER_STILL_ISSUEDITEM_PART.ISSUED_SINCE as 
ISSUED_SINCE from BF_USER, 
BF_USER_STILL_ISSUEDITEM_PART where 
BF_USER.ID = BF_USER_STILL_ISSUEDITEM_PART.ID ]
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcStatement.fetchResult
(Unknown Source)
at org.hsqldb.jdbcStatement.execute(Unknown 
Source)
at 
org.enhydra.jdbc.core.CoreStatement.execute
(CoreStatement.java:86)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/353
HyperSQL Database Engine (HSQLDB) / Bugs / #353 .new files not removed when using relative path
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I create a connection to a stand alone database using 
a relative path, when I close the connection the 
backup.new and script.new files do not get removed.
The next time I try to connect to the database and then 
disconnect I get the following exception.
java.sql.SQLException: File input/output 
error: ./db/da_database.script.new in statement 
[SHUTDOWN]
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.jdbcResultSet.&lt;init&gt;(Unknown 
Source)
at 
org.hsqldb.jdbcConnection.executeStandalone(Unknown 
Source)
at org.hsqldb.jdbcConnection.execute
(Unknown Source)
at org.hsqldb.jdbcConnection.closeStandalone
(Unknown Source)
at org.hsqldb.jdbcConnection.close(Unknown 
Source)
at ca.ewert.da.DBTest.main(DBTest.java:76)
Example:
if I use the following URL: &quot;jdbc:hsqldb:db/da_database&quot; 
the .new files don't get removed. 
But if I used: &quot;jdbc:hsqldb:C:/javaProj/Draft Assist 
2.00/build/db/da_database&quot; it seems to work fine.
using hsqldb 1.7.1 on Win2000
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/354
HyperSQL Database Engine (HSQLDB) / Bugs / #354 't' should be interpreted as 'true' for bit columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
inserting the value 't' into a bit column is
interpreted by hsqldb (1.7.2 alpha T) as 'false'.
Example :
create table test (isOk bit);
insert into table test (isOk) values ('t');
The row will now have the value 'false'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/355
HyperSQL Database Engine (HSQLDB) / Bugs / #355 Corrupted .script file using DatabaseManager
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Generating a database with about 300 tables using 
ScriptTool
generates the database files .properties and .log. After 
using
the DatabaseManager and closing it the data went 
from .log to
the .script file but seems to be corrupted.
The DatabaseManager changes the IDENTITY attribute of
the primary key columns to 
&quot;GENERATED BY DEFAULT AS IDENTITY(START WITH 0).
Using this database in my application leads to the 
following error:
&quot;error in testdb.script line: 1
Unexpected token: GENERATED in statement [CREATE 
TABLE ATTR
(ATTR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY
(START WITH 0) 
NOT NULL PRIMARY &quot;.
Questions:
Is the &quot;GENERATED BY DEFAULT ...&quot; entry of 
DatabaseManager actually 
intended / needed?
How can I avoid this DatabaseManager behaviour? Note 
that the data in the 
.log file seems to match exactly my SQL statement 
without &quot;GENERATED ...&quot; ?
I'm using version 1.72 alpha m.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/356
HyperSQL Database Engine (HSQLDB) / Bugs / #356 JDBC methode &quot;getScale&quot; always returns zero
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a bug in connecting of hsqldb and Druid 
(druid.sf.net).
Because of the &quot;not correct/not complete&quot; 
implementation of the &quot;getScale&quot; methode 
of &quot;jdbcResultSetMetaData&quot;. Durid use this methode and 
handle the colum as an Integer and not a decimal.
For more information about the druid bug see:
&quot;[ 838413 ] Exception with JDBC HSQLDB&quot;
or:
https://sourceforge.net/tracker/index.php?
func=detail&amp;aid=838413&amp;group_id=15111&amp;atid=115111
So please correct the implementation.
Thanks a lot!
Jochen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/357
HyperSQL Database Engine (HSQLDB) / Bugs / #357 TestSelfQueries fails on 1.7.2_ALPHA_T
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got 3 failures (2 errors) when running the Self test,
specifically on TestSelfQueries.txt.
The first one is:
Opened test script file: E:\hsqldb\data\TestSelfQueries.txt
java.lang.Exception: Line: 22 Expected c/3 but got
error Column not found: USER_
USERNAME in statement [/*c3*/select * from configuser
where usr_password in (use
r_username)] / /*c3*/select * from configuser where
usr_password in (user_userna
me);
at org.hsqldb.test.TestUtil.test(Unknown Source)
at org.hsqldb.test.TestUtil.testScript(Unknown
Source)
at
org.hsqldb.test.TestSelf.testPersistence(Unknown Source)
at org.hsqldb.test.TestSelf.test(Unknown Source)
at org.hsqldb.test.TestSelf.main(Unknown Source)
This one I fixed by changing user_username to usr_username.
The other one is:
java.lang.Exception: Line: 33 Expected c/0 but got
error Column not found: total
in statement [/*c0*/SELECT &quot;kosten&quot; AS &quot;total&quot; FROM
&quot;liste&quot; WHERE &quot;total&quot; &gt; 0 O
RDER BY &quot;total&quot; DESC] / /*c0*/SELECT &quot;kosten&quot; AS
&quot;total&quot; FROM &quot;liste&quot; WHERE &quot;tot
al&quot; &gt; 0 ORDER BY &quot;total&quot; DESC;
at org.hsqldb.test.TestUtil.test(Unknown Source)
at org.hsqldb.test.TestUtil.testScript(Unknown
Source)
at
org.hsqldb.test.TestSelf.testPersistence(Unknown Source)
at org.hsqldb.test.TestSelf.test(Unknown Source)
at org.hsqldb.test.TestSelf.main(Unknown Source)
This is mentioned in the file as:
-- use of column aliases in the where clause
--bug #696595
but it seems like the fix didn't take.
I built hsql Windows 2000, JDK 1.4.2_02. Did I do
something incorrectly when I built? (I have included
the entire test output)
Thanks.
Chris
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/358
HyperSQL Database Engine (HSQLDB) / Bugs / #358 Does a Constraint have an Impact Over the Returned Rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
There are two tables - TABLE_A AND TABLE_B and their 
definitions are:
CREATE TABLE table_a( PROCESS_ID BIGINT NOT NULL, 
VERSION BIGINT NOT NULL, DOMAIN VARCHAR(5) NOT 
NULL, TYPE VARCHAR(32) NOT NULL, VALUE VARCHAR
(1990), IDENTIFIER VARCHAR(32), URI VARCHAR(256))
CREATE TABLE table_b( CT_ID BIGINT NOT NULL, 
PROCESS_ID BIGINT NOT NULL, VERSION BIGINT NOT 
NULL, DOMAIN VARCHAR(5) NOT NULL, PARENT_ID 
BIGINT, ANCESTOR BIGINT, TYPE VARCHAR(32) NOT 
NULL, ATTRIBUTE VARCHAR(250), URI VARCHAR(256), 
ACTIVE_FLAG VARCHAR(1) NOT NULL, BOUNDARY 
VARCHAR(1) NOT NULL, HOLD_FLAG VARCHAR(1), 
RESTART_FLAG VARCHAR(1), SUB_FLAG VARCHAR(1), 
WARN_THRESHOLD BIGINT DEFAULT 0 NOT NULL, 
ERR_HANDLER VARCHAR(256), X DECIMAL, Y DECIMAL, 
COLOR BIGINT, SECTION BIGINT, START_NODE VARCHAR
(1), END_NODE VARCHAR(1), CONSTRAINT 
TLM_PK_CTL_M PRIMARY KEY
(PROCESS_ID,VERSION,DOMAIN))
Table table_a has the following foreign key constraint on 
table_b as:
ALTER TABLE table_a ADD CONSTRAINT table_b_fk 
FOREIGN KEY(PROCESS_ID,VERSION,DOMAIN) 
REFERENCES table_b(PROCESS_ID,VERSION,DOMAIN) ON 
DELETE CASCADE
INSERT INTO table_b VALUES
(1,1,1,'teamc',NULL,NULL,'PARAMS','Parameters',NULL,'Y','
N','N','N',NULL,0,NULL,65.0,9.0,2,0,'Y',NULL)
INSERT INTO table_b VALUES
(2,2,1,'teamc',NULL,NULL,'PARAMS','Parameters',NULL,'Y','
N','N','N',NULL,0,NULL,226.0,9.0,1,0,'Y',NULL)
INSERT INTO table_b VALUES
(3,9,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_5
secs
(1)',NULL,'Y','N','','',NULL,0,NULL,7.5,115.0,2,0,NULL,NULL)
INSERT INTO table_b VALUES
(4,10,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,120.0,115.0,2,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(5,11,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,65.0,221.0,2,0,NULL,NULL
)
INSERT INTO table_b VALUES
(6,12,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,65.0,327.0,2,0,NULL,NULL
)
INSERT INTO table_b VALUES
(7,13,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,65.0,433.0,2,0,NULL,'Y')
INSERT INTO table_b VALUES
(8,14,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,115.0,1,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(9,15,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,221.0,1,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(10,16,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait
_5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,327.0,1,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(11,17,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait
_5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,433.0,1,0,NULL,'Y')
INSERT INTO table_a VALUES
(1,1,'teamc','VARCHAR','SELECT par_name, par_value 
FROM TLM_SAM_PARAMS WHERE test_id=1','sql',NULL)
INSERT INTO table_a VALUES
(2,1,'teamc','VARCHAR','SELECT par_name, par_value 
FROM TLM_SAM_PARAMS WHERE test_id=1','sql',NULL)
INSERT INTO table_a VALUES
(9,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(9,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(10,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(10,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(11,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(11,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(12,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(12,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(13,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(13,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(14,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(14,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(15,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(15,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(16,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(16,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(17,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(17,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
Now issue the following statement:
SELECT identifier, value
FROM table_a
WHERE process_id=9 AND version=1 AND 
domain='teamc'
it returns 1 (for identifier=uidtns) row instead of 2 ( 
doesn't return for identifier=procedure)
if you delete all rows from table_a where process_id != 9 
(leaving two rows) it still returns one row
If you shutdown the server and restart it only then it 
return both rows, when there are just 2 rows. It does 
not work when there are all 20 rows.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/359
HyperSQL Database Engine (HSQLDB) / Bugs / #359 Problem with clob
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
jean-francois.nadeau@loto-quebec.com
We use hsqldb 1_7_2_ALPHA with Hibernate.
In jdbcPreparedStatement.java in method 
setCharacterStream.
At this line. 
chread = reader.read(buffer);
Sometimes for some reasons. The reader is already at the 
end of the stream.
MY PATCH
reader.reset(); //add this line
chread = reader.read(buffer);
Thank you if you add this line in the next version. Now 
we use your jar, we apply the patch and give the 
patched jar to the developpers.
Jean-François Nadeau
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/360
HyperSQL Database Engine (HSQLDB) / Bugs / #360 CASEWHEN(SUM(some_filed),some_value) -&gt; Exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Any CASEWHEN-type function with any aggregating 
function as parameter causes to General error.
The reason is that in this case 
Expression.getAggregatedValue() requires special 
algorithm for value retrieving, but it missed. Possible 
solution is to add the code below to the first switch{} in 
getAggregatedValue() method:
case CASEWHEN:
if (currValue == null) {
currValue = new Object[2];
}
boolean isEqual = ((Boolean) 
eArg.getAggregatedValue (((Object[]) currValue)
[0])).booleanValue();
return isEqual ?
eArg2.eArg.getValue() :
eArg2.eArg2.getAggregatedValue
(((Object[]) currValue)[1]);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/361
HyperSQL Database Engine (HSQLDB) / Bugs / #361 1.7.2 alpha T is not compatible with JDK1.3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran a simple test using a 1.3 JDK, but the JDBC driver 
will not load because of a dependency on:
java.sql.Savepoint
Which was introduced as of JDK 1.4.
Here is the exception:
java.lang.NoClassDefFoundError: java/sql/Savepoint
at org.hsqldb.jdbcDriver.getConnection
(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown 
Source)
at java.sql.DriverManager.getConnection
(DriverManager.java:512)
at java.sql.DriverManager.getConnection
(DriverManager.java:141)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/362
HyperSQL Database Engine (HSQLDB) / Bugs / #362 DatabaseMetadata.storesUpperCaseIdentifiers() returns wrong
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Method storesUpperCaseIdentifiers() on the
DatabaseMetaData class returns true. But when I am
searching tables with DatabaseMetaData.getTables I have
to use lowercase in the table name. 
/Fredrik
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/363
HyperSQL Database Engine (HSQLDB) / Bugs / #363 ResultSet.isBeforeFirst() does not work as specified
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following javadoc code snippet is from JSDK 1.4.2:
* @return &lt;code&gt;true&lt;/code&gt; if the cursor is
before the first row;
* &lt;code&gt;false&lt;/code&gt; if the cursor is at any other
position or the
* result set contains no rows
AFAK, this works as the specification for the JDBC API.
Thus, when I have an empty ResultSet, the first call of
the method should return false, but obviously the
return value is initialized to true without checking
the ResultSet, if it contains any rows.
The ResultSet was generated with getTables(...) from
the database's metadata, and I wanted to test if a
given table already exists or has to be generated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/364
HyperSQL Database Engine (HSQLDB) / Bugs / #364 Error in jdbcDriver / getPropertyInfo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've found an error in jdbcDriver.java, while I was
looking in the source for some information about the
method getPropertyInfo (what I can expect from it):
The properties 1..3 are all assigned to pinfo[1],
overwriting the values 1..2 by value 3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/365
HyperSQL Database Engine (HSQLDB) / Bugs / #365 Warnings
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Compiling the latest alpha release iin Eclipse gave the
attached file of warnings. Mostly uneeded imports and
static methods/fields access.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/366
HyperSQL Database Engine (HSQLDB) / Bugs / #366 Assert Failed inside of Hypersonic
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get this error when issuing these queries on the
latest alpha version of 1.7.2 and I'm not sure why.
&quot;CALL IDENTITY()&quot;
DataMain: 414 - An error occurred while executing the
SQL statement. The error was Assert failed SQL: CALL
IDENTITY()
java.sql.SQLException: Assert failed
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.executeQuery(Unknown Source)
at
com.tallgroup.util.DataMain.executeThrowableSelect(DataMain.java:432)
at
com.tallgroup.util.DataMain.executeSelect(DataMain.java:410)
at
com.tallgroup.util.DataMain.executeThrowableInsert(DataMain.java:490)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:524)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:540)
at
com.tallgroup.updater.UserDataUpdater.readUserInformation(UserDataUpdater.java:655)
at
com.tallgroup.updater.UserDataUpdater.readUserDataPacket(UserDataUpdater.java:990)
at
com.tallgroup.updater.UserDataUpdater.processUserDataPacket(UserDataUpdater.java:953)
at
com.tallgroup.framework.ocs.listeners.FileListener.endReceiveFile(FileListener.java:215)
at
com.tallgroup.framework.ocs.listeners.FileListener.access$000(FileListener.java:21)
at
com.tallgroup.framework.ocs.listeners.FileListener$1.run(FileListener.java:329)
&quot;update PERSON_PROPERTYEXPRESSION set EXPRESSION='0'
where PROPERTYTEXTID=31927 and PERSONID=360 and
OBJECTID=4317 and OBJECTTYPEID=-11&quot;
DataMain: 578 - An error occurred while executing the
SQL update statement. The error was Assert failed SQL:
update PERSON_PROPERTYEXPRESSION set EXPRESSION='0'
where PROPERTYTEXTID=31927 and PERSONID=360 and
OBJECTID=4317 and OBJECTTYPEID=-11 
java.sql.SQLException: Assert failed
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.executeUpdate(Unknown Source)
at
com.tallgroup.util.DataMain.executeThrowableUpdate(DataMain.java:556)
at
com.tallgroup.util.DataMain.executeUpdate(DataMain.java:574)
at
com.tallgroup.updater.UserDataUpdater.readUserInformation(UserDataUpdater.java:650)
at
com.tallgroup.updater.UserDataUpdater.readUserDataPacket(UserDataUpdater.java:990)
at
com.tallgroup.updater.UserDataUpdater.processUserDataPacket(UserDataUpdater.java:953)
at
com.tallgroup.framework.ocs.listeners.FileListener.endReceiveFile(FileListener.java:215)
at
com.tallgroup.framework.ocs.listeners.FileListener.access$000(FileListener.java:21)
at
com.tallgroup.framework.ocs.listeners.FileListener$1.run(FileListener.java:329)
&quot;insert into PERSON_PROPERTYEXPRESSION
(PROPERTYTEXTID,EXPRESSION,PERSONID,OBJECTID,OBJECTTYPEID)
values (31927,'0',360,4317,-11)&quot;
DataMain: 528 - An error occurred while executing the
SQL insert statement. The error was Assert failedSQL:
insert into PERSON_PROPERTYEXPRESSION
(PROPERTYTEXTID,EXPRESSION,PERSONID,OBJECTID,OBJECTTYPEID)
values (31927,'0',360,4317,-11)
java.sql.SQLException: Assert failed
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.execute(Unknown Source)
at
com.tallgroup.util.DataMain.executeThrowableInsert(DataMain.java:471)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:524)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:540)
at
com.tallgroup.updater.UserDataUpdater.readUserInformation(UserDataUpdater.java:655)
at
com.tallgroup.updater.UserDataUpdater.readUserDataPacket(UserDataUpdater.java:990)
at
com.tallgroup.updater.UserDataUpdater.processUserDataPacket(UserDataUpdater.java:953)
at
com.tallgroup.framework.ocs.listeners.FileListener.endReceiveFile(FileListener.java:215)
at
com.tallgroup.framework.ocs.listeners.FileListener.access$000(FileListener.java:21)
at
com.tallgroup.framework.ocs.listeners.FileListener$1.run(FileListener.java:329)
If you need any more info or some test data just let me
know.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/367
HyperSQL Database Engine (HSQLDB) / Bugs / #367 Unexpected token
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry to submit again, but I forgot to login in the 
preceeding submission. Hope you don't mind.
I got unexpected token when I tried to connect to the 
attaches database. You can launch runManager to 
reproduce the error ( stand alone engine)
Can you help me ? Thanks a lot.
visual
visual@club-internet.fr
C:\hsql\hsqldb\demo>java -classpath ;..\lib\hsqldb.jar 
org.hsqldb.util.DatabaseM
anager
java.sql.SQLException: Unexpected token: 37000 
Unexpected token: in statement
[
]
at org.hsqldb.Trace.getError(Trace.java:226)
at org.hsqldb.Log.runScript(Log.java:863)
at org.hsqldb.Log.open(Log.java:306)
at org.hsqldb.Database$Logger.openLog
(Database.java:2596)
at org.hsqldb.Database.<init>(Database.java:203)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:2849)
at org.hsqldb.jdbcConnection.<init>
(jdbcConnection.java:2428)
at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:176)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at 
org.hsqldb.util.ConnectionDialog.createConnection
(ConnectionDialog.ja
va:108)
at org.hsqldb.util.ConnectionDialog.actionPerformed
(ConnectionDialog.jav
a:305)
at java.awt.Button.processActionEvent(Unknown 
Source)
at java.awt.Button.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl
(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown 
Source)
at java.awt.EventQueue.dispatchEvent(Unknown 
Source)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarch
y(Unknown Source)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown 
Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/368
HyperSQL Database Engine (HSQLDB) / Bugs / #368 bad cache logic
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bug scenario:
I have obtained <TurnDetails> object (result) from
database using something like:
========================================
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("SELECT t.turnDetails
FROM turnTable AS t WHERE t.turnNum = " + num);
TurnDetails result = null;//HERE IS THE OBJECT OF
INTEREST!!
if (rs.next())
{
result = (TurnDetails)(rs.getObject("turnDetails"));
}
rs.close();
stmt.close();
========================================
conn is database connection that is created on program
init and persists all program lifetime:
static Connection
conn=DriverManager.getConnection("jdbc:hsqldb:gamedb/game",
"sa", "");
First time object <result> is obtained correctly, all
works fine. I am changes several object's fields during
program lifetime and, after all, I want to get the
original unchanged object, that is stored in database.
Hovewer, code described above returns me OLD object
with CHANGED fields (in fact, there is no difference
between object that was manipulated during program
lifetime and returned object). 
Here is workaround for this problem: if I close and
reopen database connection, i'll get fresh unchanged
object (but only first time. Each time I want to get
FRESH UNCHANGED object, I should close/reopen database
connection, and this is too slow). Seems, that
connection caches objects and simply returns me old
object in spite of the fact that it was changed in memory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/369
HyperSQL Database Engine (HSQLDB) / Bugs / #369 Null-value update causes unrelated contraint violation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a schema that works well in hsqldb 1.7.1 but fails 
miserably in 1.7.2RC1. 
I execute the following statements (in a Java SQL tool 
using hsql in-memory mode)
CREATE CACHED TABLE AUTH_GroupSubject (
description VARCHAR,
parent BIGINT,
admin BIGINT NOT NULL,
id_ BIGINT,
UNIQUE ( id_ ))
CREATE CACHED TABLE AUTH_UserSubject (
subjectName VARCHAR NOT NULL,
id_ BIGINT,
UNIQUE ( id_ ),
PRIMARY KEY ( subjectName ));
ALTER TABLE AUTH_GroupSubject ADD CONSTRAINT 
AUTH_GroupSubject_REF_parent 
FOREIGN KEY ( parent )
REFERENCES AUTH_GroupSubject ( id_ );
ALTER TABLE AUTH_GroupSubject ADD CONSTRAINT 
AUTH_GroupSubject_REF_admin 
FOREIGN KEY ( admin )
REFERENCES AUTH_UserSubject ( id_ );
insert into AUTH_UserSubject values ('admin', 100);
insert into AUTH_GroupSubject values (null, null, 100, 
200);
update AUTH_GroupSubject set description = null,
parent = null, admin = 100 where id_ = 200
The last statement causes SQLException shown below.
Notice that the values updated on the last statement is 
identical to the values being inserted!
Now if I execute 
update AUTH_GroupSubject set description = '',
parent = null, admin = 100 where id_ = 200
It works!
----
java.sql.SQLException: Integrity constraint violation - 
no parent AUTH_GROUPSUBJECT_REF_ADMIN table: 
AUTH_GROUPSUBJECT in statement [UPDATE 
AUTH_GroupSubject SET description = ?, parent = ?, 
parent_model_ = ?, admin = ?, admin_model_ = ?,
version_ = ? WHERE id_ = ? AND version_ = ?]
at org.hsqldb.jdbcDriver.throwError(Unknown 
Source)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(Unknown Source)
at 
com.enkisoft.encore.impl.sqlstore.SqlStore.updateData
(SqlStore.java:991)
at 
com.enkisoft.encore.impl.sqlstore.SqlStore.updateData
(SqlStore.java:978)
at 
com.enkisoft.encore.impl.sqlstore.SqlStore.persistChange
dEDO(SqlStore.java:1013)
at 
com.enkisoft.encore.impl.StoreImplementationBase.persis
tAll(StoreImplementationBase.java:943)
at 
com.enkisoft.encore.impl.StoreImplementationBase.commi
t(StoreImplementationBase.java:734)
... 40 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/370
HyperSQL Database Engine (HSQLDB) / Bugs / #370 1.7.2 is 25% slower than 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my test of schema consisting a few tables and 
references (cascade delete), the performance of 1.7.2 
is about 25-30% slower than 1.7.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/371
HyperSQL Database Engine (HSQLDB) / Bugs / #371 In  .log file, some command lines are corrupt
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here are the first few lines of the log file.
/*C1*/CONNECT USER SA PASSWORD ""
S/*C*ORD1 */""S
S/*C*ORD1 */""S
ET AUTOCOMMIT FALSE
/*C3*/CONNECT USER SA PASSWORD ""
/*C4*/CONNECT USER SA PASSWORD ""
/*C5*/CONNECT USER SA PASSWORD ""
SET AUTOCOMMIT FALSE
Is there a bug in the line printer? Seems similar to
the problem I saw awhile ago on the forums (seeing "T"
or some other character) at the beginning of a log file
line. This was from a database that was not cleanly
shut down. 
This was on a two CPU machine, Solaris, Java 1.4.0_06.
I saw the same problem on Linux on 1.4.1. Perhaps
there is a synchronization issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/372
HyperSQL Database Engine (HSQLDB) / Bugs / #372 File input/output error: *.backup in version 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm currently using the HSQL database engine 1.7.1 on 
and an embedded XP environment using Sun's 1.4.1 Java 
VM.
On some occasions when a hard boot has occured (while 
the HsqlDB (running as a server) is running with a couple 
of connections possibly still open to it, but idle), I've 
found the database files to be corrupt upon reboot (not 
only the *.backup file as the captured event below 
indicates, but also *.script and *.data files)
The *.properties file always seems to 
indicate 'modified=yes' after boot up.
After reboot, the following exception is thrown when the 
DB is started up again after a hard boot -
java -cp .\hsqldb.jar org.hsqldb.Server -database e
sp
Opening database: esp
HSQLDB server 1.7.1 is running
Use SHUTDOWN to close normally. Use [Ctrl]+[C] to 
abort abruptly
Server.run/init: java.sql.SQLException: File input/output 
error: esp.backup
java.sql.SQLException: File input/output error: 
esp.backup
at org.hsqldb.Trace.getError(Trace.java:236)
at org.hsqldb.Trace.error(Trace.java:323)
at org.hsqldb.Log.restoreBackup(Log.java:774)
at org.hsqldb.Log.open(Log.java:299)
at org.hsqldb.Database$Logger.openLog
(Database.java:2624)
at org.hsqldb.Database.open(Database.java:226)
at org.hsqldb.Database.<init>(Database.java:188)
at org.hsqldb.Server.openDB(Server.java:178)
at org.hsqldb.Server.run(Server.java:196)
at org.hsqldb.Server.main(Server.java:147)
This exception is difficult to reproduce as it doesn't 
seem to occur after a hard boot.
The *.properties file indicates - 
#HSQL database
#Tue Jan 06 16:01:52 GMT 2004
sql.strict_fk=true
readonly=false
sql.strong_fk=true
hsqldb.version=1.7.1
version=1.7.1
hsqldb.cache_scale=15
sql.compare_in_locale=false
sql.month=true
hsqldb.log_size=5
jdbc.get_column_name=true
modified=yes
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.1
hsqldb.compatible_version=1.7.0
sql.enforce_size=false
Is there anything I could do to prevent this from 
occuring?
Mail address:
david.hanna@mosaicsoftware.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/373
HyperSQL Database Engine (HSQLDB) / Bugs / #373 RC1: ROUND makes an exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In construction like 
select round(coalesce(sum(<dec_column>),0),2) from 
<some_table> 
the query returns correct result if sum() returns some 
value. If sum() returns null then "General error: 
java.lang.NullPointerException" appears.
If round() removed and sum() is null, the query returns 0 
as expected
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/374
HyperSQL Database Engine (HSQLDB) / Bugs / #374 Error in Server.start()? (1.7.2 RC1)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
This little example code does not work as expected in
1.7.2 RC1 
Server server = new Server();
server.start();
server.stop();
The server does not stop. It seem the start() returns
before the server is fully started. The javadoc for the
start method clearly states:
[..] it blocks only until the server's background
thread notifies the calling thread that the server has
either started successfully of failed to do so.
IMHO the start method should block until the server is
completly started. 
Futhermore I would have expected the start() method to
throw an exception if unable to start.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/375
HyperSQL Database Engine (HSQLDB) / Bugs / #375 .script file contains wrong CREATE TRIGGER statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have run the following statements on a newly created
database:
create table trigger_table (nr integer);
create trigger my_trigger after update on trigger_table
call "mytest.TestTrigger";
The trigger was create successfully (no error, and it
was visible in SYSTEM_TRIGGERS)
Shutdown and re-connect to the database gives an error.
A quick look at the .script file shows that the
following script is generated:
CREATE TABLE TRIGGER_TABLE(NR INTEGER)
CREATE TRIGGERMY_TRIGGER AFTER UPDATE ON TRIGGER_TABLE
CALL "mytest.TestTrigger"
CREATE USER SA PASSWORD "" ADMIN
Note the missing space in "CREATE TRIGGERMY_TRIGGER"
which fails thus the database cannot be opened. 
1.7.2 RC1, JDK 1.4.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/376
HyperSQL Database Engine (HSQLDB) / Bugs / #376 Weird exception when column not specified
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This weird exception happens when I don't specify the
column FREQUENCYOFUSE.
Here's my DDL:
CREATE CACHED TABLE TEXTCONTENT(TEXTID INTEGER DEFAULT
NULL NOT NULL,LANGUAGEID INTEGER DEFAULT NULL NOT
NULL,TEXTCONTENT VARCHAR(4000) NOT NULL,ORIGINAL
TINYINT DEFAULT 0 NOT NULL,FREQUENCYOFUSE TINYINT
DEFAULT NULL,SHOULDTRANSLATE TINYINT DEFAULT 1 NOT
NULL,HASBEENREVIEWED TINYINT DEFAULT 0 NOT
NULL,ISCOURSECONTENT TINYINT DEFAULT 0 NOT
NULL,CONSTRAINT PK_TEXTCONTENT PRIMARY
KEY(TEXTID,LANGUAGEID),CONSTRAINT
TEXTCONTENT_FK31021484635517 FOREIGN KEY(LANGUAGEID)
REFERENCES LANGUAGE(LANGUAGEID))
And here's the exception:
DataMain: 622 - An error occurred while executing the
SQL delete statement. The error was Wrong data type:
For input string: "NULL"SQL: insert into textcontent
(languageid,textcontent,shouldtranslate,original,iscoursecontent,textid)
values (-12,'Daves',1,1,1,103519)
java.sql.SQLException: Wrong data type: For input
string: "NULL"
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.execute(Unknown Source)
at com.tallgroup.util.DataMain.execute(DataMain.java:600)
If I specify the column FREQUENCYOFUSE then it works
just fine.
Let me know if you need any more information or if I'm
doing something wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/377
HyperSQL Database Engine (HSQLDB) / Bugs / #377 Indexes are mixed up when adding index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a new index is added to a table WHICH ALREADY 
CONTAINS DATA, the data structures that implement 
the different indexes are mixed up with each other 
(cross-linked). In our case, the result was that data 
slowly disappeared from the table because the indexes 
became corrupted when data was updated. In one lucky 
case, we got an assertion error after several updates to 
the table.
The attachment contains a fix in the form of a diff which 
can be applied to revision 1.72 of 
org/hsqldb/Table.java . It seems to be good also for the 
(at this time) most current version 1.87.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/378
HyperSQL Database Engine (HSQLDB) / Bugs / #378 Internal Error : Invalid Compiled Statement ID
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My testsuite of about 600 tests encounters this error 
several times.
Caused by: java.sql.SQLException: Internal Error : 
Invalid Compiled Statement ID:
at org.hsqldb.jdbcDriver.throwError(Unknown 
Source)
at 
org.hsqldb.jdbcPreparedStatement.executeQuery
(Unknown Source)
at 
org.enhydra.jdbc.core.CoreCallableStatement.executeQu
ery(CoreCallableStatement.java:332)
at 
com.abmira.templates.data.HsqlDBDTPageDatabaseSche
ma.insertAllDTPages
(HsqlDBDTPageDatabaseSchema.java:200)
... 20 more
Also many other tests which are passing on 1.7.2 alpha 
M are failing. All these tests are also passing on SapDB. 
Other common error is
Caused by: java.sql.SQLException: Try to insert null into 
a non-nullable column: column: FILE_TYPE_ID table: 
BF_FT_ROLE_MAP in statement [insert into 
BF_FT_ROLE_MAP select ?, ROLE_ID, USER_TYPE, 
ORDER_NUMBER from BF_FT_ROLE_MAP where 
FILE_TYPE_ID=?]
at org.hsqldb.jdbcDriver.throwError(Unknown 
Source)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(Unknown Source)
at 
org.enhydra.jdbc.core.CorePreparedStatement.executeU
pdate(CorePreparedStatement.java:101)
at 
com.abmira.templates.data.FileTypeDatabaseFactory.cop
yFTRoles(FileTypeDatabaseFactory.java:1007)
... 19 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/379
HyperSQL Database Engine (HSQLDB) / Bugs / #379 Embedded Interserct doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
THis didn't work on 1.7.2 alpha M and on RC1, works on 
sapdb
CREATE TABLE QUERY_TEST " +
"(VALUE_1 INTEGER NOT NULL," +
"VALUE_2 INTEGER NOT NULL)
the test case below generate following error
junit.framework.AssertionFailedError: Unexpected token 
in statement [select VALUE_1 from QUERY_TEST where 
VALUE_2 in ((select VALUE_2 from QUERY_TEST) 
intersect (select VALUE_1 from QUERY_TEST))]
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue
(Assert.java:20)
at 
com.abmira.database.driver.QueryTest.testIntersectQuer
y(QueryTest.java:411)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at junit.framework.TestCase.runTest
(TestCase.java:154)
at junit.framework.TestCase.runBare
(TestCase.java:127)
at junit.framework.TestResult.protect
(TestResult.java:106)
at junit.framework.TestResult.runProtected
(TestResult.java:124)
at junit.framework.TestResult.run
(TestResult.java:109)
at junit.framework.TestCase.run
(TestCase.java:118)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at 
com.abmira.core.data.DatabaseTestSuite.runTest
(DatabaseTestSuite.java:137)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
nTests(RemoteTestRunner.java:397)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
n(RemoteTestRunner.java:281)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ma
in(RemoteTestRunner.java:173)
---------------------------------------------------
public void testIntersectQuery(
) throws Throwable
{
final String INSERT = "insert into QUERY_TEST 
(VALUE_1, VALUE_2) values (?,?)";
final String DELETE = "delete from QUERY_TEST";
final String SELECT = "select VALUE_1 from 
QUERY_TEST where VALUE_2 in " +
"((select VALUE_2 from QUERY_TEST) " +
"intersect " +
"(select VALUE_1 from QUERY_TEST))";
PreparedStatement insertStatement = null;
PreparedStatement deleteStatement = null;
PreparedStatement selectStatement = null;
ResultSet rsResults = null;
int iInsertCount;
int iIndex;
try
{
m_transaction.begin();
try
{
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 1);
insertStatement.setInt(2, 11);
insertStatement.execute();
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 11);
insertStatement.setInt(2, 12);
insertStatement.execute();
m_transaction.commit();
}
catch (Throwable throwable)
{
m_transaction.rollback();
throw throwable;
}
finally
{
DatabaseUtils.closeStatement
(insertStatement);
}
try
{
selectStatement = 
m_connection.prepareStatement(SELECT);
rsResults = selectStatement.executeQuery();
assertTrue("There should be rows in result", 
rsResults.next());
assertFalse("There should be no more rows in 
result", rsResults.next());
}
catch (SQLException sqleExc)
{
assertTrue(sqleExc.getMessage(), false);
}
finally
{
DatabaseUtils.closeResultSetAndStatement
(rsResults, selectStatement);
}
}
finally
{
m_transaction.begin();
try
{
deleteStatement = 
m_connection.prepareStatement(DELETE);
deleteStatement.execute();
m_transaction.commit();
}
catch (Exception eExc)
{
m_transaction.rollback();
throw eExc;
}
finally
{
DatabaseUtils.closeStatement
(deleteStatement);
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/380
HyperSQL Database Engine (HSQLDB) / Bugs / #380 Embedded Union doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
THis didn't work on 1.7.2 alpha M and on RC1, works on 
sapdb
CREATE TABLE QUERY_TEST " +
"(VALUE_1 INTEGER NOT NULL," +
"VALUE_2 INTEGER NOT NULL)
the test case below generate following error
junit.framework.AssertionFailedError: Unexpected token 
in statement [select VALUE_1 from QUERY_TEST where 
VALUE_2 in ((select VALUE_2 from QUERY_TEST) union 
(select VALUE_1 from QUERY_TEST))]
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue
(Assert.java:20)
at 
com.abmira.database.driver.QueryTest.testUnionQuery
(QueryTest.java:323)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at junit.framework.TestCase.runTest
(TestCase.java:154)
at junit.framework.TestCase.runBare
(TestCase.java:127)
at junit.framework.TestResult.protect
(TestResult.java:106)
at junit.framework.TestResult.runProtected
(TestResult.java:124)
at junit.framework.TestResult.run
(TestResult.java:109)
at junit.framework.TestCase.run
(TestCase.java:118)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at 
com.abmira.core.data.DatabaseTestSuite.runTest
(DatabaseTestSuite.java:137)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
nTests(RemoteTestRunner.java:397)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
n(RemoteTestRunner.java:281)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ma
in(RemoteTestRunner.java:173)
---------------------------------------------------
public void testUnionQuery(
) throws Throwable
{
final String INSERT = "insert into QUERY_TEST 
(VALUE_1, VALUE_2) values (?,?)";
final String DELETE = "delete from QUERY_TEST";
final String SELECT = "select VALUE_1 from 
QUERY_TEST where VALUE_2 in " +
"((select VALUE_2 from QUERY_TEST) " +
"union " +
"(select VALUE_1 from QUERY_TEST))";
PreparedStatement insertStatement = null;
PreparedStatement deleteStatement = null;
PreparedStatement selectStatement = null;
ResultSet rsResults = null;
int iInsertCount;
int iIndex;
try
{
m_transaction.begin();
try
{
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 1);
insertStatement.setInt(2, 11);
insertStatement.execute();
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 2);
insertStatement.setInt(2, 12);
insertStatement.execute();
m_transaction.commit();
}
catch (Throwable throwable)
{
m_transaction.rollback();
throw throwable;
}
finally
{
DatabaseUtils.closeStatement
(insertStatement);
}
try
{
selectStatement = 
m_connection.prepareStatement(SELECT);
rsResults = selectStatement.executeQuery();
assertTrue("There should be rows in result", 
rsResults.next());
assertTrue("There should be rows in result", 
rsResults.next());
assertFalse("There should be no more rows in 
result", rsResults.next());
}
catch (SQLException sqleExc)
{
assertTrue(sqleExc.getMessage(), false);
}
finally
{
DatabaseUtils.closeResultSetAndStatement
(rsResults, selectStatement);
}
}
finally
{
m_transaction.begin();
try
{
deleteStatement = 
m_connection.prepareStatement(DELETE);
deleteStatement.execute();
m_transaction.commit();
}
catch (Exception eExc)
{
m_transaction.rollback();
throw eExc;
}
finally
{
DatabaseUtils.closeStatement
(deleteStatement);
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/381
HyperSQL Database Engine (HSQLDB) / Bugs / #381 Bug with Clob functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
guillaume.nodet@deliasystems.com
jdbcClob's functions getSubString() and position() 
handles index badly. The spec says the index should 
begin at 1, but they are coded as if they are handled at 
0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/382
HyperSQL Database Engine (HSQLDB) / Bugs / #382 getTimestampString(Timestamp x, Calendar cal)  bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
The getTimestampString(Timestamp x, Calendar cal)
method in org.hsqldb.HsqlDateTime class have x's
milliseconds part added twice. See the following code
for current implementation and the error place. 
sdfts.format(new java.util.Date(x.getTime() +
x.getNanos() / 1000000)); 
It is not necessary to add x.getNanos() /1000000.
x.getTime() already includes the millisecond part. I
think the author thought x.getTime() just return the
integral seconds part.
For example,
take timestamp 2004-01-19 23:59:59.999 (from UTC+8) as
x and calendar with UTC as cal, the return value is 
2004-01-19 16:00:00. The correct returned value should
be 2004-01-19 15:59:59:999
Regards,
Rice
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/383
HyperSQL Database Engine (HSQLDB) / Bugs / #383 OutOfMemoryError when telnetting to the server.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
If I start the server at telnet to it using "telnet
localhost 9001" and write "aa<enter><enter>" [1] in
the telnet prompt. Then the server will throw an
OutOfMemoryError.
Granted this is not ordinary usage. But I think a
server should be able to handle malformed requests
without running out of memory. The server should
somehow detect that the client is bogus and ignore it. 
[1] do not type <enter> but hit enter...
Btw this is on 1.7.2RC@jdk 1.4.1_03
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/384
HyperSQL Database Engine (HSQLDB) / Bugs / #384 setMaxRows on preparedStatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
The setMaxRows does not work for a prepredStatement. I
had a look at the code for jdbcPreparedStatement and
saw that the executeQuery() method never updates the
maxRows on the resultOut(Result) instance. The same
goes for execute().
Cheers Jaco
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/385
HyperSQL Database Engine (HSQLDB) / Bugs / #385 res: urls for JWS do not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the file HsqlProperties.java, there is a method:
public static boolean checkFileExists(String
fileName, boolean resource,
Class cla)
throws IOException {
if (fileName == null || fileName.length() == 0) {
return false;
}
String propFilename = fileName + ".properties";

return resource ? null !=
cla.getResource(propFilename)
FileUtil.exists(propFilename);
}

the problem is, cla.getResource translates package
names into directories, so trying to open:
jdbc:hsqldb:res:dir/mydatabase
Would result in this class trying to check if
dir/mydatabase.properties
exists, which in turn is translated as 
dir/mydatabase/properties
Which obviously does not exist. Note that this problem
does not happen if the URL starts with / (something
that is not correct, since the classpath is relative,
but is needed to disable the package translation
mecanism). The proper solution would be to call
cla.getClassLoader().getResource(). You don't even have
to pass cla as an argument, since
Thread.currentThread().getContextClassLoader() also works.
Another two points:
1.- In the example jnlp file that you provided, there
are some properties especified in doc/databaseinjar.txt
to be put in a jnlp file as an example of use
<property name="jdbc.drivers"
value="org.hsqldb.jdbcDriver"/>
problem is, JWS does not allow (without signing the
jar) to System.getProperty() anything that does not
start with "jnlp." or "javaws.", as
<property name="jnlp.jdbc.drivers"
value="org.hsqldb.jdbcDriver"/>
2.- Didn't check that too much, but it looked as if
checkFileExists is called too often. IIRC even calling
to Connection.close() does trigger a call to this one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/386
HyperSQL Database Engine (HSQLDB) / Bugs / #386 Inserting binary datas fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a problem trying to insert a File in a 
LONGVARBINARY field.
Here's the code I use to insert:
PreparedStatement pstatement = 
connection.prepareStatement("INSERT INTO FILES
(ID,FILE) VALUES(?,?)");
pstatement.setInt(1, getFilesLastID() + 1);
InputStream inputStream = null;
try{
inputStream=new FileInputStream(new File
("test.txt"));
}
catch(FileNotFoundException fnfe){
fnfe.printStackTrace();
}
pstatement.setBinaryStream(2, inputStream, (int)new 
File(path).length()); 
pstatement.executeUpdate();
And here's the Exception thrown:
Try to insert null into a non-nullable column: column: 
FILE table: FILES in statement [INSERT INTO FILES
(ID,FILE) VALUES(?,?,)]
(My FILE field is NOT NULL)
I have the same problem when using the 
setBinaryStream methos.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/387
HyperSQL Database Engine (HSQLDB) / Bugs / #387 getMetaData() and getColumns(null, null, tableName, null)...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
There is a case sensitivity issue with 
DatabaseMetaData.getColumns(null, null, tableName, 
null);
I have a table called "individual". The following code 
works:
public TestGetMetaData1() throws SQLException, 
ClassNotFoundException {
super();
Connection connection = null;
DatabaseMetaData dmd = null;
ResultSet rs = null;
String columnName = null;
String className = null;
String connectUrl = null;
String connectUser = null;
String connectPassword = null;
String tableName = null;
// hsqldb
className = "org.hsqldb.jdbcDriver";
connectUrl = "jdbc:hsqldb:hsql://localhost";
connectUser = "sa";
connectPassword = "";
tableName = "INDIVIDUAL";
Class.forName(className);
connection =
DriverManager.getConnection(connectUrl, 
connectUser, connectPassword);
dmd = connection.getMetaData();
rs = dmd.getColumns(null, null, tableName, null);
System.out.println("Init done");
while (rs.next()) {
columnName = rs.getString
(K.JCOLUMN_NAME).toLowerCase();
System.out.println("Column: " + columnName);
}
System.out.println("Finsihed");
}
if i change:
tableName = "INDIVIDUAL";
to
tableName = "individual";
the code works, but nothing happens...
(using 1.7.2 RC1).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/388
HyperSQL Database Engine (HSQLDB) / Bugs / #388 2 now generates 2 different times
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have not tried the latest version, just up to alpha
M, but when I have statement like
insert (......) into ... values (.... now, now)
(the statement contains multiple now calls) in certain
situations (probably depends on timing) the times
returned by now are different and therefore the insert
puts two different values into the database even though
the intent is to put two
of the same values there.
Not sure if this is a bug, but it is definitely little
unpexpected so I am bringing it up to hear your opinion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/389
HyperSQL Database Engine (HSQLDB) / Bugs / #389 PreparedStatement.getParameterMetaData()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB 1.7.2 RC1
Hi,
PreparedStatement.getParameterMetaData() is not 
implemented.
Could you provide a dummy implementation to avoid:
java.lang.AbstractMethodError: 
org.hsqldb.jdbcPreparedStatement.getParameterMetaDat
a()Ljava/sql/ParameterMetaData;
at ...
Tx
jgp
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/390
HyperSQL Database Engine (HSQLDB) / Bugs / #390 Delete query doesn't allow conditional statements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've attempted in every possible way to issue a delete 
query that looks for <statement> and <statement> and 
it always gives java exception errors. The same 
conditional statement works fine in the search or update 
queries.
Perhaps I dont have the right syntax? But i've tried 
almost every SQL variation and then some.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/391
HyperSQL Database Engine (HSQLDB) / Bugs / #391 correlated update results change
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
In the 1.7.1 the following worked fine:
update waits set operation_seq = ( 
select min(o.operation_seq) 
from db_operations o 
where o.line_no > line_no 
and o.cursor_no = cursor_no ) 
With 1.7.2 operation_seq is not updated, but the update 
count is correct.
Has the syntax for the correlated update changed? 
What is the correct syntax?
The SQLServer and Oracle formats that i tried caused 
sytax errors.
thanks
trevor
test case:
String sql1 = "create table wait (line_no smallint, 
cursor_no smallint, op_seq smallint)";
String sql2 = "create table oper (line_no smallint, 
cursor_no smallint, op_seq smallint)";
String sql3 = "insert into wait values (10,2,0)";
String sql4 = "insert into oper values (11,2,5)";
String sql5 = "insert into wait values (15,2,0)";
String sql6 = "insert into oper values (19,2,9)";
String sql7 = "update wait set op_seq = ( "
+ " select min(o.op_seq) from oper o "
+ " where o.line_no > line_no "
+ " and o.cursor_no = cursor_no ) ";
v1.7.2 leaves wait.op_seq == 0
v1.7.1 updates wait.op_seq to 5 and 9
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/392
HyperSQL Database Engine (HSQLDB) / Bugs / #392 UPDATE failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version 1.7.1
UPDATE PRODUCT SET PRICE = 10.78 WHERE 
PRODUCT.ID = 6 works, but
UPDATE PRODUCT SET PRODUCT.PRICE = 10.78 
WHERE PRODUCT.ID = 6 fails with error:
Column not found: PRODUCT.PRICE in statement 
[UPDATE PRODUCT SET PRODUCT.PRICE = 10.78 
WHERE PRODUCT.ID = 6 ] Error Code: -28/State 
S0022
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/393
HyperSQL Database Engine (HSQLDB) / Bugs / #393 Server hangs on select statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The attached zip file contains a SELECT statement that 
worked in 1.7.1 but in 1.7.2 RC1 doesn't work. In 1.7.2 
the server gets locked up and CPU utilization goes to 
100%. I then have to kill the server.
I tested this statement with org.hsqldb.util.
DatabaseManagerSwing and with DbVisualizer (commercial 
SQL manager) and with my Java application. I got the 
same results.
This statement works fine with a MySQL version of my 
database.
The zip files contains the SELECT statement, the db 
script (pinyin.script), the server.properties and pinyin.
properties and db.properties
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/394
HyperSQL Database Engine (HSQLDB) / Bugs / #394 float precision lost &lt;k@kylemiller.com&gt;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a problem in 1.7.1 and release candidate 1.7.2.
if you have a float like 9.3, and call set float on a 
prepared statement the number saved in the db is 
9.300000190734863. I looked in the source and the 
setFloat method on prepared statement is just a pass 
through method to setDouble. The problem is when you 
cast a float to a double the precision changes, as in the 
problem above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/395
HyperSQL Database Engine (HSQLDB) / Bugs / #395 null value not accepted in IN (..) clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
null values are not accepted in IN (..) clause.
This would be very helpful for me, because I 
programmatically create long IN-clauses in which null 
might occur. Having to change it all to 
where xyz IN (....) or xyz=null would require some 
programming effort.
create temp table testtable (xx integer);
insert into testtable values (1);insert into testtable 
values (3);insert into testtable values (null);
select count(*) from testtable where xx in (1,3,null)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/396
HyperSQL Database Engine (HSQLDB) / Bugs / #396 CURTIME() problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having a bunch of problems when trying to use the 
CURTIME() function in the 1.7.1 release. The statement 
below exemplifies these:
CALL CASEWHEN(CURTIME() BETWEEN
CAST('0:0:0' AS TIME) 
AND CAST('23:59:59' AS TIME), 
'good', 'bad')
This always returns 'bad' for me.
Since the BETWEEN expression covers the entire 24 hour 
period, I believe any time zone differences, if they existed, 
would be irrelevant and this would always return 'good'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/397
HyperSQL Database Engine (HSQLDB) / Bugs / #397 CURTIME() not normalized
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is related to #897591
version 1.7.2
org.hsqldb.Library.curtime() is defined as:
public static java.sql.Time curtime() {
return new java.sql.Time(System.currentTimeMillis());
}
Since this doesn't normalize the time to Jan 1, 1970 whereas 
other time values are normalized, CURTIME cannot be used 
reliably in comparison operators.
I believe curtime() should look more like:
public static java.sql.Time curtime() {
java.sql.Time t;
t= new java.sql.Time(System.currentTimeMillis());
return HsqlDateTime.getNormalisedTime(t);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/398
HyperSQL Database Engine (HSQLDB) / Bugs / #398 different results in 1.7.2 rc1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,
i just migrated an older cocoon application with hsqldb in 
server mode from cocoon 2.0 to 2.1 rc. i also decided to 
try hsqldb 1.7.2 because it's new features look very 
promising to me. the first problem i a came across was a 
very curious EOFException when trying to acces one 
special table of the database (i simply took the old 
database files which worked very well until then). but 
there is nothing special about the stucture of this table 
nor it's content. looked very random to me. after playing 
around with the transfer tool and various different hsql 
versions i was able to use a version 1.6.2 sql dump of 
my database and (after modifying table creation to get 
cached tables again) open it without any hassle with 
version 1.7.2 hsql server.
now the dbms seemed to do it's job but i realized an 
enormous performance drop compared to the older 
database system. it looks like a communication problem 
because the db server starts outputting my sql 
commands (silent = false) seconds to minutes after my 
servlet is activated.
but the biggest problem is, i'm now getting different 
results compared to the old system. i didn't check the 
results of single queries yet but i can clearly see that 
the application (kind of multi dimensional scientific 
search engine) is just producing crap with hsqldb 1.7.2. 
to sum it up it seems like additional constraints i throw in 
are not reducing the amount of results i get but enlarge 
the result set a lot. the app itself is used for almost 2 
years now without any modification to the sql 
statements or code so i consider it stable. 
sorry for staying so vague but i didn't find time to take a 
closer look at the problem yet. i did all of the system 
design and programming years ago and the whole thing 
is very complex so i don't know exactly where to start 
when it comes to debuging. if you could give me a hint 
where (i mean for what kind of query) you changed code 
that could possibly couse different results i would try to 
check the corresponding statements and results in detail.
just a last point - i went back to version 1.7.1 as 
shipped with cocoon 2 and everything's working perfect 
again (including import of my old database files).
kind regards
momo
p.s. i'm using jdk 1.4 for all java systems including hsqldb
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/399
HyperSQL Database Engine (HSQLDB) / Bugs / #399 CHECK CONSTRAINT column not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.7.2RC1
Following SQL generates error:
DROP TABLE FOO IF EXISTS;
CREATE TABLE FOO(
YES_NO_IND CHAR(1) NOT NULL,
CHECK (YES_NO_IND IN ('Y', 'N'))
);
INSERT INTO FOO ( 'Y' );
Error is:
java.sql.SQLException: Column not found: Y in 
statement [INSERT INTO FOO ( 'Y' )]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

https://sourceforge.net/p/hsqldb/bugs/400
HyperSQL Database Engine (HSQLDB) / Bugs / #400 CHECK CONSTRAINT follow-up
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was in such I hurry to create the example in 900350 I
messed up the SQL; let me try again. The error I was
trying to report was:
DROP TABLE FOO IF EXISTS;
CREATE TABLE FOO(
YES_NO_IND CHAR(1) NOT NULL,
CHECK (YES_NO_IND IN ('Y', 'N'))
);
INSERT INTO FOO VALUES ( 'Y' );
results is:
java.sql.SQLException: Check constraint violation
SYS_CT_1 table: FOO
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



zzzzz
1
HyperSQL Database Engine (HSQLDB) / Bugs / #1 Error in Build
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
When i try to execute the script build (build the jar 
archive) i can't because the javac give me the 
following error : 
I can't find the class org.hsql.Map (used in class 
jdbcconnect) 
My version of JVM is 1.1.8 
Please send me the correct source 
Best Regards 
Joao Luis
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

2
HyperSQL Database Engine (HSQLDB) / Bugs / #2 Please Support multiple ResultSets!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the jdbcStatement class does NOT support 
multiple ResultSets. (This is clearly documented in 
the javadocs, and is also obvious from looking at the 
source code.) 
However, this makes this class USELESS for executing 
general stored procedures (which OFTEN do mutiple 
queries -- doing complex stuff like this is usually 
the whole point behind using stored procedures).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

3
HyperSQL Database Engine (HSQLDB) / Bugs / #3 bug in the getMoreResults() method
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The getMoreResults() method of org.hsql.jdbcStatement 
class fails to follow the Statement interface specs 
exactly. This causes problems with code that should 
work. 
The basic problem is that getMoreResults() fails to 
advance the current ResultSet. (It also fails to close 
the current ResultSet, which is also a violation of 
the spec.) 
Since HypersonicSQL currently does not support 
multiple ResultSets, what SHOULD happen if the specs 
are to be exactly followed is that the next ResultSet 
should be advanced to null after closing the initial 
one when getMoreResults() is called. 
Below is the current (and buggy) implementation of 
getMoreResults(): 
-------------------------------------------------------
----------- 
public boolean getMoreResults() { 
if(Trace.TRACE) Trace.trace(); 
return false; 
} 
And here is a simple patch which corrects the above 
bug: 
-------------------------------------------------------
public boolean getMoreResults() throws SQLException { 
if (Trace.TRACE) Trace.trace(); 
if (rSet != null) { 
rSet.close(); // MUST do this to satisfy Statement 
interface spec! Good idea anyways 
rSet = null; // advances to the next RS, which is 
always null for now 
} 
return false; 
} 
To illustrate the current bug, and also to test that 
the above patch actually solves the probelm, consider 
the following code which works with any properly 
written JDBC Statement implementation (but fails in 
HypersonicSQL): 
// ********************************************* 
String sql; 
Statement s = null; 
boolean isResultSet; 
ResultSet rs = null; 
int updateCount; 
boolean moreResults; 
&lt;&lt;some code here which estables a database connection, 
etc&gt;&gt; 
//The following code executes a generic SQL statment 
and marches thru all the possible results: 
isResultSet = s.execute(sql); 
rs = s.getResultSet(); 
updateCount = s.getUpdateCount(); 
// process the first result for sure, and also any 
additional results: 
do { 
// handle the current result: 
if (isResultSet) 
processResultSet(rs); 
else 
processUpdate(updateCount); 
// get the next result: 
isResultSet = s.getMoreResults(); 
rs = s.getResultSet(); 
updateCount = s.getUpdateCount(); 
// determine if the loop should continue: 
moreResults = !( !isResultSet &amp;&amp; (updateCount == -
1) ); 
} 
while ( moreResults ); 
/* 
From the Javadoc on Statment: 
s.getResultSet() SHOULD be null if the result is 
actually an update count or there are no more results 
s.getUpdateCount() SHOULD be -1 if the result is 
actually a ResultSet or there are no more results 
*/ 
// ********************************************* 
The above code fails with updates (but not queries) 
because the loop never ends. This happens because 
getUpdateCount() 
fails to return -1 the second time that it is called. 
If the above patch to getMoreResults() 
were in place, then getUpdateCount() WOULD recognize 
that the current RS is null and then would return -1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

4
HyperSQL Database Engine (HSQLDB) / Bugs / #4 DatabaseMetaData.getExportedKeys broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am writting a java program that analizes the 
relations among the different tables in the database. 
When I create a table using FOREIGN KEY, Hypersonic 
classes don't write to the SYSTEM_EXPORTEDKEYS table. 
Then, when I call to the getExportedKeys method, I 
obtain no data. 
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

5
HyperSQL Database Engine (HSQLDB) / Bugs / #5 DatabaseMetaData.getExportedKeys() inop
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am writting a java program that analizes the 
relations among the different tables in the database. 
When I create a table using FOREIGN KEY, Hypersonic 
classes don't write to the SYSTEM_EXPORTEDKEYS table. 
Then, when I call to the getExportedKeys method, I 
obtain no data. 
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

6
HyperSQL Database Engine (HSQLDB) / Bugs / #6 LONGVARBINARY error using setObject
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using hsql version 1.42 
When using setObject to set the value of a binary 
column a class cast error occurs. 
I have made the following changes that solved the 
problem: 
line 1048 of jdbcPreparedStatement.java: 
case Types.BINARY: 
case Types.VARBINARY: 
case Types.LONGVARBINARY: 
// setBytes(parameterIndex,(byte[])x); 
setBytes(parameterIndex,((org.hsql.ByteArray)
x).byteValue()); 
break; 
--------------------------------------------------- 
line 565 of Column.java -&gt; method modified to 
static Object convertObject(Object o,int type) throws 
SQLException { 
if(o==null) { 
return null; 
} 
switch(type) { 
case BINARY: 
case VARBINARY: 
case LONGVARBINARY: 
if( o instanceof byte[]) 
return new ByteArray( (byte[])o); 
else 
return convertString(o.toString(),type); 
default: 
return convertString(o.toString(),type); 
} 
} 
------------- 
ByteArray.java -&gt; added new constructor 
ByteArray(byte []a) { 
data=a; 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

7
HyperSQL Database Engine (HSQLDB) / Bugs / #7 Fix for &amp;amp;quot;SELECT x, SUM(y)&amp;amp;quot; &amp;amp;amp; &amp;amp;quot;GROUP BY x
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following sql does not work correctly: 
CREATE TABLE T(N VARCHAR,I INTEGER) 
INSERT INTO T VALUES('a',1) 
INSERT INTO T VALUES('a',2) 
INSERT INTO T VALUES('b',3) 
INSERT INTO T VALUES('b',4) 
SELECT N, SUM(I) FROM T GROUP BY N 
It returns a single null row. 
The bug is in Select.java, getResults() method 
if(eCondition==null || eCondition.test()) { 
Object row[]=new Object[len]; 
for(int i=0;i&lt;len;i++) { 
row[i]=eColumn[i].getValue(); 
} 
count++; 
if(aggregated) { 
updateAggregateRow(agg,row,len); 
// *** rows are not being added to r at this point 
// *** if I comment out the else, it appears to work 
// *** } /*else*/ { 
// *** I don't know if I'm missing other stuff 
} else { 
r.add(row); 
if(simple_maxrows &amp;&amp; count&gt;=maxrows) { 
break; 
} 
} 
} 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

8
HyperSQL Database Engine (HSQLDB) / Bugs / #8 Fix for &amp;amp;quot;SELECT x, SUM(y)&amp;amp;quot; &amp;amp;amp; &amp;amp;quot;GROUP BY x
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following sql does not work correctly: 
CREATE TABLE T(N VARCHAR,I INTEGER) 
INSERT INTO T VALUES('a',1) 
INSERT INTO T VALUES('a',2) 
INSERT INTO T VALUES('b',3) 
INSERT INTO T VALUES('b',4) 
SELECT N, SUM(I) FROM T GROUP BY N 
It returns a single null row. 
The bug is in Select.java, getResults() method 
if(eCondition==null || eCondition.test()) { 
Object row[]=new Object[len]; 
for(int i=0;i&lt;len;i++) { 
row[i]=eColumn[i].getValue(); 
} 
count++; 
if(aggregated) { 
updateAggregateRow(agg,row,len); 
// *** rows are not being added to r at this point 
// *** if I comment out the else, it appears to work 
// *** } /*else*/ { 
// *** I don't know if I'm missing other stuff 
} else { 
r.add(row); 
if(simple_maxrows &amp;&amp; count&gt;=maxrows) { 
break; 
} 
} 
} 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

9
HyperSQL Database Engine (HSQLDB) / Bugs / #9 Code transition and standards
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On 2001-04-04 nobody@nowhere screamed in frustrationa 
and said:
&quot;I'd like to supply some fixes we made to HSQL over 
the time. However, we need to be able to reconcile 
those changes with whatever you did to HSQL. 
This is _impossible_ to do, since all files changed 
due to your formatting changes. There's no way to find 
out what changed between 1.43 and 1.60RC2. 
Do you have any kind of change history documenting the 
changes you made? 
I can't even just grab the newest sources - I added 
some testing framework to HSQL that I'd hate to lose. 
Is there any way to merge stuff back?&quot;
This is an ongoing issue and will be cross-posted as 
an open bug as we transition our customers to the new 
code base.
For the future of this project, NOTHING IS MORE 
IMPORTANT THAN THIS! At least until we get the CVS 
tree in place. Mark has offered to do this on an 
individual basis but we need two things from the 
developers:
a) someone to volunteer to be trained by Mark to do 
this for customers/users (could be - SHOULD BE - 
multiple someones (ideally 3))
b) someone to ride herd on this in the future (again, 
should be more than one) and assist me in this 
specifically, keeping me aware and honest - THIS KIND 
OF QUALITY CONTROL CAN MAKE OR BREAK A PROJECT. AGAIN, 
NOTHING -NOTHING!- IS MORE IMPORTANT.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

10
HyperSQL Database Engine (HSQLDB) / Bugs / #10 No docs on DB transition
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OPENED IN RESPONSE TO CUSTOMER SERVICE REQUESTS:
Need to add documentation on transition issues from 
other RDBMS's, the strengths and weaknesses of HSQLDB 
in various use-cases and other new-user documentation 
to next point release
CUSTOMERS AFFECTED/REPORTING:
ETIENNE GAUDY
JAN PLOSKI
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

11
HyperSQL Database Engine (HSQLDB) / Bugs / #11 PreparedStatement Timestamps
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using hsqldb-v1.6 for unit testing my code, and I've lately run into trouble
with java.sql.Timestamp in PreparedStatement. Our code will be using PreparedStatement
all the time, and there will be lots of timestamp columns, so I really hope this works out.
The problem is basically that I create a PreparedStatement from a hsqldb driver connection,
then call setTimestamp(int,Timestamp) on it, and when I call executeUpdate, I get the following 
error:
&quot;java.sql.SQLException: General error java.lang.NumberFormatException: 01 05:00:00.0 in 
statement [insert into date_t (begin_date) values ('2000-01-01 05:00:00.0')]&quot;
It appears from the error message, as well as from the hsqldb source, that the Timestamp
object gets converted into a string (&quot;2000-01-01 05:00:00.0&quot;), and then the stringified SQL is 
processed by the hsqldb engine. But apparently it doesn't parse the string. I'm guessing it's the 
nanoseconds, because in the self-tests included in hsqldb (which make good examples), there are 
things like '2000-02-29 10:00:00', but nothing with nanoseconds. I don't really need nanoseconds, 
it's always going to be 0, but I at least need JDBC compliance: if I pass a Timestamp value, the 
driver must support it.
Please let me know what the status of this is. I'll gladly post this elsewhere on the SourceForge 
site if there's a more appropriate place, and I'll also send source code if it helps.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

12
HyperSQL Database Engine (HSQLDB) / Bugs / #12 single quote in statements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If string field contains single quote it throws 
exception !
Can anyone here help me patching this problem ?
I am using HypersonicSQL which is being closed i guess.
TIA
Nitin
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

13
HyperSQL Database Engine (HSQLDB) / Bugs / #13 Infinite loop while executing DELETE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a sample tiny hsqldb 1.60 database on which the following statement:
DELETE FROM folder WHERE isDeleted='y'
causes an infinite loop in method TableFilter.findFirst.
The database uses tables created with the CACHED modifier (leaving out this modifier seems to fix the problem, but is not an acceptable work-around).
As the database is taken from a closed-source project, I would prefer not to upload the file publicly. Please e-mail me for the test data + code which demonstrates the bug (jpljpl@gmx.de)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

14
HyperSQL Database Engine (HSQLDB) / Bugs / #14 not null fails on primary key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe without looking this is ansi 89 to have
create table foo {
x int primary key not null
}
even though the not null is implied by being a primary 
key. It is acceptable by oracle 8i, MS SQL Server, MS 
Access, and hsql 1.43.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

15
HyperSQL Database Engine (HSQLDB) / Bugs / #15 canonizing column names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can understand why you may take this shortcut to 
capitalize all column names internally to the 
database, but it sucks if you want to use reflection 
to instantiate records off of the database.
You may not consider this a bug since oracle does 
this, but you won't find it in hsql 1.43, mysql, ms 
sql, or access.
The mysql database appears to rely on the application 
programmer being case sensitive in all cases instead 
of hashing mixed and upper case names. This is the 
other extreme, but I still prefer it to just 
capitalizing everything.
Please reconsider.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

16
HyperSQL Database Engine (HSQLDB) / Bugs / #16 bit types only take 'true' and 'false'
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
You should be able to change a bit value by setting it 
to 0 or 1. Don't know if this is ansi sql or not, but 
it is accepted in oracle, ms sql, ms access, mysql.
I can only change bit values by setting it to 'true' 
or 'false'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

17
HyperSQL Database Engine (HSQLDB) / Bugs / #17 followups don't work on sourceforge
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
btw, ms sql server does not take 'true' and 'false' in 
update statements for bit types. And oracle does not 
have a bit type, closest type was smallint.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

18
HyperSQL Database Engine (HSQLDB) / Bugs / #18 now() getting parsed as timestamp
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the now() function to put timestamps on 
records. I have an insert that has a value for each 
column in the record, no nulls that works just fine, 
and includes one formatted date, and one call to now().
Later I do an update with a record that has many 
nulls, so the columns do not appear, and two calls to 
the now() function. For some reason it is dropping 
into:
java.lang.IllegalArgumentException: Timestamp format 
must be yyyy-mm-dd hh:mm:ss.fffffffff
at java.sql.Timestamp.valueOf(Timestamp.java:137)
at org.hsqldb.Column.convertString
(Column.java:1001)
at org.hsqldb.Expression.getValue
(Expression.java:670)
at org.hsqldb.Parser.getValue(Parser.java:836)
at org.hsqldb.Parser.processInsert(Parser.java:417)
at org.hsqldb.Database.execute(Database.java:252)
at org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:994)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:721)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:686)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:85)
Sounds like alternate paths through the sql parser..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

19
HyperSQL Database Engine (HSQLDB) / Bugs / #19 problem with 'SHUTDOWN COMPACT'
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running HSQLDB v1.60 and am having no luck getting 
the &quot;SHUTDOWN COMPACT&quot; query working. No matter what I 
do, the JVM never exits properly if I use this 
query... my application is always left &quot;hanging open&quot; 
at the end. I finally stripped the code down to it's 
bare bones... please take a look at the following code 
and let me know what's wrong. 
---------------------------------------------- 
import java.sql.*;
public class SimpleHSQLDBTest {
public static void main(java.lang.String[] args) {
try { 
Class.forName(&quot;org.hsqldb.jdbcDriver&quot;); 
String conName = &quot;jdbc:hsqldb:file&quot;; 
Connection con = DriverManager.getConnection
(conName, &quot;sa&quot;, &quot;&quot;); 
Statement stmt = con.createStatement(); 
stmt.execute(&quot;SHUTDOWN COMPACT&quot;); 
// stmt.execute(&quot;SHUTDOWN&quot;); 
stmt.close(); 
con.close(); 
System.out.println(&quot;DONE&quot;); 
} catch (Exception e) { 
System.out.println(&quot;EXCEPTION&quot;); 
}
}
}
---------------------------------------------- 
It doesn't matter whether the 'file.script' database 
is brand new, has tables in it, is 'script mode' 
or 'cached mode'... the above app never exits. Notice 
the commented out 'normal' SHUTDOWN line... it works 
properly when used. 
It appears that the 'SHUTDOWN COMPACT' query executes 
properly and that no exception is thrown. Any ideas? 
I also tried the &quot;CHECKPOINT&quot; query, which seems like 
the way to go, but it didn't compact the database like 
I thought it would... actually, I don't know what it 
did. I ran &quot;CHECKPOINT&quot; on a cached database with 
deleted rows that were still &quot;hanging around&quot; after 
deletion... but the rows were still around after 
the &quot;CHECKPOINT&quot; was issued and the database was 
closed. It didn't seem to do anything. Is 'CHECKPOINT' 
also a problem?
DEV ENVIRONMENT:
I'm running VA Java Enterprise, patched to v3.5.3. 
under Win2k. I imported the HSQLDB v1.60 java files 
(not the class files) into it's own VAJ project. This 
HSQLDB project is the only thing included in 
the 'project path' of the above class. The workspace 
classpath is empty. The code doesn't work properly 
under the IDE, nor does the VAJ compiled version work 
properly from the command line under SUN JDK v1.3.1.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

20
HyperSQL Database Engine (HSQLDB) / Bugs / #20 SA: User not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Occassionally, I get this exception saying that SA 
is not a valid user(something along those lines). 
Since, sa is the default user and I haven't created 
any other users, the only choice I have while 
accessing this database is to drop and recreate the 
whole database since it doesnt let me login. Any 
suggestions? Any one reported this problem before?
Thanks for the great product. 
-Xtrimity
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

21
HyperSQL Database Engine (HSQLDB) / Bugs / #21 Subselect fails when using functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider following situation:
&gt;&gt;&gt; snip
create table test ( _id integer, _text varchar);
insert into test values ( 0, 'blah 0');
insert into test values ( 1, 'blah 1');
insert into test values ( 2, 'blah 2');
insert into test values ( 3, 'blah 3');
select * from test where
_id = (select max(_id) from test)
&gt;&gt;&gt; end snip
This fails reporting:
java.sql.SQLException: Column not found: _ID in 
statement [select * from test where _id = (select max
(_id) from test)]
No progress when trying to use test._id in all 
places... It seems it doesn;'t find the column for 
the &quot;select max(_id) from test&quot; part.
&quot;select max(_id) from test&quot; alone works GREAT!
Hope I'll see this fixed soon.
Walk-around:
select max(_id), * from test
Notice: If the table is sorted by ID, otherwise 
returns the last inserted row :(
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

22
HyperSQL Database Engine (HSQLDB) / Bugs / #22 Insert statements misbehave in this case
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
No exception is thrown when I do an insert using the 
wrong statement:
Create table varchar_test(id varchar(100) null, tstamp 
bigint null);
insert into varchar_test values(tstamp);
Values are silently inserted into id column and tstamp 
is 0.
regards,
Xtrimity
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

23
HyperSQL Database Engine (HSQLDB) / Bugs / #23 like &amp;quot;text%&amp;quot; does not use index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in hsqldb 1.6 the like statement does not use the 
index so queries take a lot of time. It would be good 
if statements:
- like 'begin%'
- like 'begin%something'
would use the index.
For the first one there is a workaround which can be 
used:
instead of:
select * from table where col like 'test%'
try the following:
select * from table where col&gt;='test' and col&lt;'tesu'
..which is with index 100 times faster!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

24
HyperSQL Database Engine (HSQLDB) / Bugs / #24 issues with storing objects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am not very sure if the following is bug or not. 
I have attached a java file. Please execute it and u 
will find the bug or error. I will try to explain the 
four cases of my program
My motive is to store a string as an object type 
of the hsql database.
Case 1:
1.) create table temp (name varchar(25), data object)
2.) stored a string in first column of table and 
hashtable in the second column. 
3.) works fine
Case 2:
1.) create table temp (name varchar(25), data varchar
(20))
2.) store string in first column of table and store 
another string using setString() of preparedstatement 
class.
3.) works fine.
Case 3:
1.) create table temp (name varchar(25), data object)
2.) store string in first column of table and store 
another string using setString() of preparedstatement 
class.
3.) Behaviour not understood. (Please see output to 
understand)
Case 4:
1.) create table temp (name varchar(25), data object)
2.) store string in first column of table and store 
another string using setObject() of preparedstatement 
class.
3.) I get an error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

25
HyperSQL Database Engine (HSQLDB) / Bugs / #25 multiply doesn't seem to work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm migrating my MySQL application to use HSQLDB. I 
already fixed most of the problems but one still 
remains. I try to multiply values in a simple SQL 
statement 'select *,(count*price) from purchase'. This 
statement however throws me :
or This function is not supported: 12 in statement
or a NumberFormatException
Anyway, keep up the VERY good work guys
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

26
HyperSQL Database Engine (HSQLDB) / Bugs / #26 Several Date/Time Functions Fail
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Most of the date/time methods -- year, month, 
dayofyear, dayofweek, hour, minute, and second -- fail 
with java.lang.NumberFormatException when used with a 
DATETIME column.
CREATE TABLE Test (c1 DATETIME)
INSERT INTO Test VALUES ({ts '2001-07-31 01:23:45'})
SELECT {fn year (c1)} FROM Test
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

27
HyperSQL Database Engine (HSQLDB) / Bugs / #27 Long.MIN_VALUE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a row of type BIGINT and I submit a SQL 
statement putting Long.toString(Long.MIN_VALUE) into 
that row.
Then the following exception happens.
I suspect, that the Tokenizer steals the values sign 
to apply it after parsing, so that 
java.lang.Long.parseLong ends up parsing the negative 
of Long.MIN_VALUE, which is just out of range for long 
(Long.MAX_VALUE+1).
Sorry, I have no idea, where to look for the version. 
I just have the hsql.jar here, and ther is nor version 
in the MANIFEST
java.lang.NumberFormatException: 9223372036854775808
at java.lang.Long.parseLong(Unknown Source)
at java.lang.Long.&lt;init&gt;(Unknown Source)
at org.hsql.Tokenizer.getAsValue
(Tokenizer.java:139)
at org.hsql.Parser.read(Parser.java:753)
at org.hsql.Parser.readTerm(Parser.java:680)
at org.hsql.Parser.readFactor(Parser.java:646)
at org.hsql.Parser.readSum(Parser.java:629)
at org.hsql.Parser.readConcat(Parser.java:619)
at org.hsql.Parser.readCondition
(Parser.java:549)
at org.hsql.Parser.readAnd(Parser.java:525)
at org.hsql.Parser.readOr(Parser.java:515)
at org.hsql.Parser.parseExpression
(Parser.java:510)
at org.hsql.Parser.getValue(Parser.java:491)
at org.hsql.Parser.processInsert
(Parser.java:219)
at org.hsql.Database.execute(Database.java:122)
at
org.hsql.jdbcConnection.executeStandalone
(jdbcConnection.java:693)
at org.hsql.jdbcConnection.execute
(jdbcConnection.java:543)
at org.hsql.jdbcStatement.fetchResult
(jdbcStatement.java:499)
at org.hsql.jdbcStatement.executeUpdate
(jdbcStatement.java:52)
at
org.hsql.jdbcPreparedStatement.executeUpdate
(jdbcPreparedStatement.java:114)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

28
HyperSQL Database Engine (HSQLDB) / Bugs / #28 Double.NaN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use a row of type DOUBLE and put in the value 
Double.NaN, via the JDBC interface. This results in an 
exception complaining that NaN is not a valid row 
name. We think that Double.NaN should mapped to SQL 
value NULL and vice versa.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

29
HyperSQL Database Engine (HSQLDB) / Bugs / #29 ResultSet incomplete - lying ?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
i was verry happy when I found HSQLDB, looked through 
the documentation and was even more happy.
I tested it and requested a Updateable, srollable 
Result Set and got no error.
Then I tried to used the promided functionality and 
got something like &quot;Sorry not implemented yet!&quot; for 
features like lastRow(), firstRow() or setRow().
In my opinion that's essential for a scrollable Result 
Set and it felt like lying to me when HSQLDB excepted 
the request for an Srollable ResultSet and didn't 
provide the elementary functionality.
First I thought I'm doing something wrong but after a 
while I looked into the Source code and all the 
functions where Documented with what they should do 
but implemented as a simple Return of &quot;Not Yet !&quot;.
I took a deeper look and I don't know how to implement 
the functionality without reading a lot of the sources.
So the question is:
When will the implementation of ResultSet keep the 
Prommise to be Scrollable maybe Updateable ?
It would make things a lot easyier for me ... .
Sugestion: Till then you should shange the Code so 
that it gives an error if someone is requesting a 
ResultSet with not implemented Features (Scrolable, 
Updateable). That's the way other Databases handle 
that ... .
You should mention it in the Docu to, that would have 
saved me a lot of time ;-).
Anyway: Good work, seams to be quiet complete and the 
docu is really good (Ok, not always if it comes to the 
Javadocs ...).
Knut Pape
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

30
HyperSQL Database Engine (HSQLDB) / Bugs / #30 Droping tables drops the database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The sequence of the database CREATE TABLE statements 
determine the order of INSERT statatements. This is 
dependant on Referential Integrity within the created 
tables.
I have a table which is in the heart of the database 
(holds the core PK) and desire to add an additional 
column at a later date (which has arrived), the 
existing DB has been populated so the procedure would 
be to:
1. create a tmp table that includes the new column
2. do an INSERT SELECT to copy the existing data over 
to the tmp table, but adding the default value for the 
new column at the same time
3. DROP the old table
4. CREATE a new table with the old table name but with 
the additional column
5. do an INSERT SELECT to copy the tmp data over to 
the new table 
6. DROP the tmp table
Right, now the bug - when re-creating the new table 
(point 4) the statement is inserted at the end of all 
the other CREATE TABLE statments; this means that the 
INSERT (point 6) statements are also at the end of the 
INSERT statements.
And because of that sequence HSQL DB thinks the DB is 
currupt because the INSERT statements prior to newly 
inserted ones a refering to something that does not 
come into existances until it reaches the bottom of 
the script. The result is a NullPointerException.
Do you have a way to re-order the script file while it 
is in memory?
You help is much appreciated.
Keith
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

31
HyperSQL Database Engine (HSQLDB) / Bugs / #31 [TIMESTAMP]second function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
&quot;SECOND&quot; function return 0 from DATE and TIMESTAMP 
fields and throws an IllegalArgumentException from 
TIME fields.
Try:
CREATE TABLE TEST (C1 DATE,C2 TIME ,C3 TIMESTAMP)
INSERT INTO TEST VALUES
('2001-08-22', '10:00:05','2001-08-22 10:00:06.20')
SELECT SECOND(C1) FROM TEST -&gt; return &quot;0&quot;
SELECT SECOND(C2) FROM TEST -&gt; IllegalArgumentException
SELECT SECOND(C3) FROM TEST -&gt; return &quot;0&quot;
In Library.java the method &quot;second&quot; expect a Date 
parameter.
If you change:
public static int second(java.sql.Date d) {
return getDateTimePart(d, Calendar.SECOND);
}
with:
public static int second(java.sql.Time t) {
return getDateTimePart(t, Calendar.SECOND);
}
the results are:
SELECT SECOND(C1) FROM TEST -&gt; IllegalArgumentException
SELECT SECOND(C2) FROM TEST -&gt; return &quot;5&quot;
SELECT SECOND(C3) FROM TEST -&gt; return &quot;6&quot; (if apply 
fix for bug 446415 else return NumberFormatException)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

32
HyperSQL Database Engine (HSQLDB) / Bugs / #32 Error in the jdbc documentation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the 'operating modes' documentation page (/hsqldb_v.1.61/doc/internet/hSql.html), the URL to connect to the hsql server in &quot;Server&quot; mode is written as
jdbc:hsqldb:hsqldb://hsqldbsrv
it should be
jdbc:hsqldb:hsql://hsqldbsrv
Ź
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

33
HyperSQL Database Engine (HSQLDB) / Bugs / #33 TINYINT: ClassCastException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I ran into a problem when converting a mySQL databse 
to hsqldb with the Transfer tool. The mySQL database 
has columns of type TINYINT, which cause a 
ClassCastException. I tracked down the problem to 
(what appears to me) an inconsistency between the 
jdbcPreparedStatement class and the Column class. The 
Column class uses a Short for both a TINYINT and 
SMALLINT, while the jdbcPreparedStatement class uses a 
Byte for TINYINT and a Short for SMALLINT. The 
jdbcPreparedStatement.setObjectIntype(..) then 
receives a Short where it expects a Byte, causing the 
ClassCastException.
For now, I patched the jdbcPreparedStatement to also 
use a Short for both TINYINT and SMALLINT, however I 
am not sure if this is the right procedure. I could 
also patch the Column class to use a Byte for TINYINT.
If anyone could give me advice on the way to go, I 
will submit a patch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

34
HyperSQL Database Engine (HSQLDB) / Bugs / #34 Problem with CONSTRAINT PRIMARY KEY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have been testing the 1.6.1 version of the HSQL 
database and have come across a problem. The steps to 
replicate the problem are:
1. Run the DBManager and select a database URL 
something like &quot;jdbc:hsqldb:message&quot;
2. Execute the following SQL statements in order:
CREATE CACHED TABLE MESSAGE ( 
ID_message int IDENTITY, 
CD_guid varchar NULL, 
XM_message varchar NULL, 
CONSTRAINT PK_MESSAGE PRIMARY KEY (ID_message) );
CREATE CACHED TABLE MESSAGE_AUDIT ( 
ID_message_audit int IDENTITY, 
ID_message int NULL, 
DS_status_message varchar NULL, 
CONSTRAINT PK_MESSAGE_AUDIT PRIMARY KEY 
(ID_message_audit), 
CONSTRAINT FK1_MESSAGE_AUDIT FOREIGN KEY 
(ID_message) REFERENCES MESSAGE (ID_message) );
INSERT INTO MESSAGE VALUES(1, '1', NULL);
3. Check the inserted record:
SELECT * FROM MESSAGE
4. Close the DBManager
5. Open the DBManager again selecting the same JDBC 
URL as before
6. At this point, a stack trace should appear in the 
DBManager window, complaining about a string index out 
of bounds exception.
7. Check for the previously inserted record:
SELECT * FROM MESSAGE
No records will be returned from this query.
I have found a work-around, which is to specify a 
primary key using the syntax 
CREATE CACHED TABLE MESSAGE ( 
ID_message int IDENTITY PRIMARY KEY, ...
instead of using the CONSTRAINT PRIMARY KEY syntax.
I assume that what I have found is actually 2 bugs, 
because if you repeat the process and create the 
message table only, no stack trace appears, but the 
previously inserted data is still lost.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

35
HyperSQL Database Engine (HSQLDB) / Bugs / #35 Minor typo in build.bat
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Build.bat contains following line:
@echo example: classpath=c:\jkd1.1.8\lib\classes.zip
It should be:
@echo example: classpath=c:\jdk1.1.8\lib\classes.zip
This may sound like a minor detail, but it caused me 
some gray hair as the (Finnish?) saying goes... :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

36
HyperSQL Database Engine (HSQLDB) / Bugs / #36 Java 1.1 error in Log.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Log.java contains a non-conditional call of 
setProperty function, which doesn't compile on JDK 
1.1.8:
pProperties.setProperty(&quot;version&quot;, 
Is should be:
//#ifdef JAVA2
pProperties.setProperty(&quot;version&quot;, 
jdbcDriver.VERSION);
//#else
pProperties.put(&quot;version&quot;, jdbcDriver.VERSION);
//#endif
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

37
HyperSQL Database Engine (HSQLDB) / Bugs / #37 Recovery commits broken transactions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When HSQL restarted after a system crash, it will made 
the changes made by the last *uncommited* -- thus 
possibly inclompete -- transaction permanent. HSQL 
should drop all changes after the last succesfull 
commit from the log (providing that auto commit was 
set to off).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

38
HyperSQL Database Engine (HSQLDB) / Bugs / #38 SOUNDEX
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
Soundex function is not complaint with Soundex Algorithem.
According to the Algorithem,
The vowels are not used. 
If two or more adjacent (not separated by a vowel) letters have the same numeric value, only one 
is used.
But in your implementation it is using same numeric value.
If there are not three digits after the consonants are convert, the code is filled out with zeros. The 
name Lee has no consonants after the L, so the soundex code would be L000. 
But in your implementatiion it will give only &quot;L&quot;, basically is not padding with Zero's.
It can be easily fixed. I modified the soundex function and attached to it. you can check in to 
the repository.
you are doing good work.
Regards
Aravilli Srinivasa Rao
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

39
HyperSQL Database Engine (HSQLDB) / Bugs / #39 Soundex 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i, 
Soundex function is not complaint with Soundex Algorithem.
According to the Algorithem,
The vowels are not used. 
If two or more adjacent (not separated by a vowel) letters have the same numeric value, only one 
is used.
But in your implementation it is using same numeric value.
If there are not three digits after the consonants are convert, the code is filled out with zeros. 
The 
name Lee has no consonants after the L, so the soundex code would be L000. 
But in your implementatiion it will give only &quot;L&quot;, basically is not padding with Zero's.
It can be easily fixed. I modified the soundex function and attached to it. you can check in to 
the repository.
Regards
Aravilli Srinivasa Rao 
I had problem with attachment i.e why i am attaching code function here)
---------------------------------------------------------------------
public static String soundex(String s) {
if (s == null) {
return s;
}
s = s.toUpperCase();
int len = s.length();
char b[] = new char[4];
b[0] = s.charAt(0);
int j = 1;
for (int i = 1; i &lt; len &amp;&amp; j &lt; 4; i++) {
char c = s.charAt(i);
if (&quot;BFPV&quot;.indexOf(c) != -1) {
if (b[j-1] != '1')
b[j++] = '1';
} else if (&quot;CGJKQSXZ&quot;.indexOf(c) != -1) {
if (b[j-1] != '2')
b[j++] = '2';
} else if (c == 'D' || c == 'T') {
if (b[j-1] != '3')
b[j++] = '3';
} else if (c == 'L') {
if (b[j-1] != '4')
b[j++] = '4';
} else if (c == 'M' || c == 'N') {
if (b[j-1] != '5')
b[j++] = '5';
} else if (c == 'R') {
if (b[j-1] != '6')
b[j++] = '6';
}
}
String result = new String(b, 0, j);
while(result.length() != 4) {
result +=&quot;0&quot;;
}
return result;
}
----------------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

40
HyperSQL Database Engine (HSQLDB) / Bugs / #40 JDBC URL for server documented incorrect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the 1.61 release, the file doc/internet/hSql.html
states
that the URL for a Server connection is:
jdbc:hsqldb:hsqldb://hsqldbsrv
This should be:
jdbc:hsqldb:hsql://hsqldbsrv
This is expected in the source code file
jdbcConnection.java line 675, which is:
} else if (s.toUpperCase().startsWith(&quot;HSQL://&quot;))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

41
HyperSQL Database Engine (HSQLDB) / Bugs / #41 Group by
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have a table with two column that pile data 
(serAccess, month). i am triyng to count the number of 
serAccess by month by doing the following SQL command:
SELECT month, count(serAccess)
FROM statistique
GROUP BY month;
When i run it using the demo application it run ok but 
when i run from my JSP application, i only get 1,0 as 
result!
Please help!
Nicaud Bourgault
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

42
HyperSQL Database Engine (HSQLDB) / Bugs / #42 GROUP BY in 1.6.1 still broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following forum thread indicates that the GROUP BY 
with aggregate functions bug was fixed:
http://sourceforge.net/forum/message.php?msg_id=177086
Based on the results of some of my queries, it looks 
like it's still not working correctly.
My db table is as follows:
CREATE TABLE jiveMessage (
messageID INTEGER NOT NULL,
parentMessageID INTEGER NULL,
threadID INTEGER NOT NULL,
forumID INTEGER NOT NULL,
userID INTEGER NULL,
subject VARCHAR(255) NULL,
body LONGVARCHAR NULL,
modValue INTEGER NOT NULL,
rewardPoints INTEGER NOT NULL,
creationDate VARCHAR(15) NOT NULL,
modifiedDate VARCHAR(15) NOT NULL,
CONSTRAINT jiveMessage_pk PRIMARY KEY (messageID)
);
The query I'm running is:
SELECT threadID, count(1) AS msgCount FROM jiveMessage 
WHERE modifiedDate &gt; ? GROUP BY threadID ORDER BY 
msgCount DESC
Results in hsqldb:
threadID | count
1 2
2 4
in mysql:
threadID | count
2 4
1 2
What appears to be happening is that the grouping 
logic is done last in the order of events, but done 
first in mysql.
Has anyone else noticed this problem in the 1.6.1 
codebase?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

43
HyperSQL Database Engine (HSQLDB) / Bugs / #43 Applet is incompatible with Java Plug In
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just got this mail from a contractor of Sun:
Dear Thomas,
We are about to release a new version of Java Plug In 
which supports all Java applets, including those based 
on older versions of Java. We expect this version to 
be widely distributed and to replace all older 
versions of Java. After extensive testing of existing 
applets, we have done our best to fix all 
compatibility issues. However, we have found the 
following problem in running your applet, which cannot
easily be fixed on our end. Whenever available, we 
suggest a solution that will allow your applet to run 
with this new version of Java Plug-in.
You can find the early-access version of Java Plug-in 
at
http://developer.java.sun.com/developer/earlyAccess/j2s
dk131_01a/
in order for you to do your own testing.
Thank you,
The Java Plug-in Team
Sun Microsystems
URL
http://javaboutique.internet.com/HypersonicSQL/ 
Problem
access denied
Suggested solution
Broken because of security model changes in Java 2. 
Migrate the applets to Java 2 security model.
Jennifer.Lozzio@Sun.COM
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

44
HyperSQL Database Engine (HSQLDB) / Bugs / #44 GROUP BY FAILS WITH ALIAS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 143
GROUP BY on a column select alias fails but works if 
the actual column name is used (order by works using 
an alias).
Ex. FAILS
select customer.name as customer_name, place.name as 
customer_addr
from customer, place
where customer.place = place.code
group by customer_addr
Ex. WORKS
select customer.name as customer_name, place.name as 
customer_addr
from customer, place
where customer.place = place.code
group by place.name
Ex. WORKS
select customer.name as customer_name, place.name as 
customer_addr
from customer, place
where customer.place = place.code
order by customer_addr
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

45
HyperSQL Database Engine (HSQLDB) / Bugs / #45 Connection is broken for objects &amp;gt; 32k
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After creating a prepared statement and using it's setObject() method with an Object (size&gt; 32k) I receive a &quot;SQLException: Connection is broken&quot; error
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

46
HyperSQL Database Engine (HSQLDB) / Bugs / #46 poor INSERT INTO implementation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When processing:
SELECT select_expression INTO tablename FROM table_list
...
statements, Database.linkTable() is not performed until
after inserting data into new INTO table. This means
that a very large selection operation may be performed,
only to fail due to the fact that a table with the same
name as the INTO table already exists. 
Example:
Suppose TEST exists and contains 1,000,000 rows, then:
SELECT TEST.* INTO TEST FROM TEST
will select all 1,000,000 rows from the existing table
named TEST, create a new table called TEST, insert the
1,000,000 rows in the new table, and only then attempt
to link the table into the database, at which point the
operation will fail due to the restriction on duplicate
table names that Database.linkTable() imposes.
With a simple change to the code, that is: attempting
to link the new table into the database immediately
after it is created and before the selection result is
retriveived, the example statement will return
immediately with a &quot;TABLE ALREADY EXISTS&quot; SQL
exception, saving much time and overhead.
-- Will be provding patch, including support for
equivalent CREATE TABLE AS syntax extention.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

47
HyperSQL Database Engine (HSQLDB) / Bugs / #47 StringIndexOutOfBoundsException: -10
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running Standalone mode from JBoss I get this from 
time to time. After this has occurred the database 
needs to be deleted to avoid hanging on further use. 
How do you properly shutdown in standalone mode? I 
assume that the DB file are being left corrupted by 
not closing down properly with a shutdown hook?
[Default] java.lang.StringIndexOutOfBoundsException: 
String index out of range: -10
[Default] at java.lang.String.substring
(String.java:1503)
[Default]
[Default] at org.hsqldb.Table.setIndexRoots
(Table.java:483)
[Default]
[Default] at org.hsqldb.Database.processSet
(Database.java:1179)
[Default]
[Default] at org.hsqldb.Database.execute
(Database.java:274)
[Default]
[Default] at org.hsqldb.Log.runScript
(Log.java:837)
[Default]
[Default] at org.hsqldb.Log.open(Log.java:223)
[Default]
[Default] at org.hsqldb.Database.&lt;init&gt;
(Database.java:96)
[Default]
[Default] at 
org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:926)
[Default]
[Default] at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
[Default]
[Default] at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:517)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:177)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:118)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:151)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAConnectionFactory.createObject
(XAConnectionFactory.java:267)
[Default]
[Default] at 
org.jboss.pool.ObjectPool.createNewObject
(ObjectPool.java:842)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:587)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:538)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAPoolDataSource.getConnection
(XAPoolDataSource.java:178)
[Default]
[Default] at 
org.jboss.jdbc.XADataSourceLoader.startService
(XADataSourceLoader.java:407)
[Default]
[Default] at 
org.jboss.util.ServiceMBeanSupport.start
(ServiceMBeanSupport.java:107)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at 
org.jboss.configuration.ConfigurationService$ServicePro
xy.invoke(ConfigurationService.java:836)
[Default]
[Default] at $Proxy0.start(Unknown Source)
[Default]
[Default] at org.jboss.util.ServiceControl.start
(ServiceControl.java:81)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at org.jboss.Main.&lt;init&gt;(Main.java:210)
[Default]
[Default] at org.jboss.Main$1.run(Main.java:116)
[Default]
[Default] at 
java.security.AccessController.doPrivileged(Native 
Method)
[Default]
[Default] at org.jboss.Main.main(Main.java:112)
[Default]
[Default] java.lang.StringIndexOutOfBoundsException: 
String index out of range: -7
[Default] at java.lang.String.substring
(String.java:1503)
[Default]
[Default] at org.hsqldb.Table.setIndexRoots
(Table.java:483)
[Default]
[Default] at org.hsqldb.Database.processSet
(Database.java:1179)
[Default]
[Default] at org.hsqldb.Database.execute
(Database.java:274)
[Default]
[Default] at org.hsqldb.Log.runScript
(Log.java:837)
[Default]
[Default] at org.hsqldb.Log.open(Log.java:223)
[Default]
[Default] at org.hsqldb.Database.&lt;init&gt;
(Database.java:96)
[Default]
[Default] at 
org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:926)
[Default]
[Default] at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
[Default]
[Default] at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:517)
[Default]
[Default] at java.sql.DriverManager.getConnection
(DriverManager.java:177)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:118)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.wrapper.XADataSourceImpl.getXACo
nnection(XADataSourceImpl.java:151)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAConnectionFactory.createObject
(XAConnectionFactory.java:267)
[Default]
[Default] at 
org.jboss.pool.ObjectPool.createNewObject
(ObjectPool.java:842)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:587)
[Default]
[Default] at org.jboss.pool.ObjectPool.getObject
(ObjectPool.java:538)
[Default]
[Default] at 
org.jboss.pool.jdbc.xa.XAPoolDataSource.getConnection
(XAPoolDataSource.java:178)
[Default]
[Default] at 
org.jboss.jdbc.XADataSourceLoader.startService
(XADataSourceLoader.java:407)
[Default]
[Default] at 
org.jboss.util.ServiceMBeanSupport.start
(ServiceMBeanSupport.java:107)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at 
org.jboss.configuration.ConfigurationService$ServicePro
xy.invoke(ConfigurationService.java:836)
[Default]
[Default] at $Proxy0.start(Unknown Source)
[Default]
[Default] at org.jboss.util.ServiceControl.start
(ServiceControl.java:81)
[Default]
[Default] at java.lang.reflect.Method.invoke
(Native Method)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1628)
[Default]
[Default] at 
com.sun.management.jmx.MBeanServerImpl.invoke
(MBeanServerImpl.java:1523)
[Default]
[Default] at org.jboss.Main.&lt;init&gt;(Main.java:210)
[Default]
[Default] at org.jboss.Main$1.run(Main.java:116)
[Default]
[Default] at 
java.security.AccessController.doPrivileged(Native 
Method)
[Default]
[Default] at org.jboss.Main.main(Main.java:112)
[Default]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

48
HyperSQL Database Engine (HSQLDB) / Bugs / #48 Self Referencing Table bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Initial Comment:
This create table statement should be legal. I need to 
create a hierarchical set of entities. As a workaround 
I suppose I could modify the table after creation but 
this shouldn't be necessary! Is this possible even? 
How do I add a foreign key as an afterthought?
create cached table TNODE
(
ID INT IDENTITY PRIMARY KEY,
PARENT_ID INT,
NAME VARCHAR(64) NOT NULL,
FOREIGN KEY (PARENT_ID) REFERENCES TNODE(ID),
CONSTRAINT NAME UNIQUE(NAME, PARENT_ID)
);
java.sql.SQLException: Table not found: TNODE in 
statement [create cached table TNODE
(
ID INT IDENTITY PRIMARY KEY,
PARENT_ID INT,
NAME VARCHAR(64) NOT NULL,
FOREIGN KEY (PARENT_ID) REFERENCES TNODE(ID),
CONSTRAINT NAME UNIQUE(NAME, PARENT_ID)
)]
at org.hsqldb.Trace.getError(Trace.java:180)
at org.hsqldb.jdbcResultSet.&lt;init&gt;
(jdbcResultSet.java:2645)
at org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:994)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:721)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:686)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:85)
at 
com.borland.dx.sql.dataset.Database.executeStatement
(Unknown Source)
at com.borland.dbtools.jdbcx.sqlpanel.SqlBean.a
(Unknown Source)
at com.borland.dbtools.jdbcx.sqlpanel.SqlBean.a
(Unknown Source)
at com.borland.dbtools.jdbcx.sqlpanel.SqlBean.b
(Unknown Source)
at 
com.borland.dbtools.jdbcx.sqlpanel.b.actionPerformed
(Unknown Source)
at 
javax.swing.AbstractButton.fireActionPerformed
(AbstractButton.java:1450)
at 
javax.swing.AbstractButton$ForwardActionEvents.actionPe
rformed(AbstractButton.java:1504)
at 
javax.swing.DefaultButtonModel.fireActionPerformed
(DefaultButtonModel.java:378)
at javax.swing.DefaultButtonModel.setPressed
(DefaultButtonModel.java:250)
at 
javax.swing.plaf.basic.BasicButtonListener.mouseRelease
d(BasicButtonListener.java:216)
at java.awt.Component.processMouseEvent
(Component.java:3717)
at java.awt.Component.processEvent
(Component.java:3546)
at java.awt.Container.processEvent
(Container.java:1164)
at java.awt.Component.dispatchEventImpl
(Component.java:2595)
at java.awt.Container.dispatchEventImpl
(Container.java:1213)
at java.awt.Component.dispatchEvent
(Component.java:2499)
at 
java.awt.LightweightDispatcher.retargetMouseEvent
(Container.java:2451)
at 
java.awt.LightweightDispatcher.processMouseEvent
(Container.java:2216)
at java.awt.LightweightDispatcher.dispatchEvent
(Container.java:2125)
at java.awt.Container.dispatchEventImpl
(Container.java:1200)
at java.awt.Window.dispatchEventImpl
(Window.java:912)
at java.awt.Component.dispatchEvent
(Component.java:2499)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:319)
at java.awt.EventDispatchThread.pumpOneEvent
(EventDispatchThread.java:103)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:93)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:84)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

49
HyperSQL Database Engine (HSQLDB) / Bugs / #49 supporting &amp;quot;default&amp;quot; in create table?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in 1.6.0, the following sql command fails because of 
the &quot;default&quot; keyword:
CREATE TABLE Objects (
title varchar(255),
owner varchar(100),
created timestamp(14),
last_modified timestamp(14),
path varchar(255),
mime_type varchar(255),
annotation varchar(2048),
thinking_type int(11),
object_id varchar(100) default '' ,
PRIMARY KEY (object_id)
);
possible to support?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

50
HyperSQL Database Engine (HSQLDB) / Bugs / #50 LIMIT limitations
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.61 LIMIT does not work together with DISTINCT. 
Has now been fixed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

51
HyperSQL Database Engine (HSQLDB) / Bugs / #51 SELECT .. IN from same table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.61 queries in the form of SELECT .... FROM atable 
WHERE x IN (SELECT y FROM atable WHERE ...) do not 
work, reporting &quot;Column y not found&quot;. Has now been 
fixed, pending more thorough testing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

52
HyperSQL Database Engine (HSQLDB) / Bugs / #52 Java MIN VALUE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get a NumberFormatException when trying to insert a 
Java Long.MIN_VALUE into the normal sql mapping column.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

53
HyperSQL Database Engine (HSQLDB) / Bugs / #53 join/condition bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
following problem:
with the hsql sample data (Database manager), execute 
the following statement:
select * from address adr left outer join document doc 
on (adr.id=doc.addressid )
the problem arises if you add another condition like 
(OR 1=0) which should not change anything, but 
unfortunatly the statement
select * from address adr left outer join document doc 
on (adr.id=doc.addressid OR 1=0 )
will now product a different resultset with less 
recordsets (exactly all records without NULL values in 
addressid)
This definitly seems like a bug, or? 
Any ideas?
/thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

54
HyperSQL Database Engine (HSQLDB) / Bugs / #54 Extraneous quote corrupts database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you include an extraneous single quote (') in an 
insert or update statement value, the entire database 
is corrupted. Every record is overwritten with the 
value up to the quote. 
Example:
INSERT INTO FOO F1 VALUES ('It isn't time.')
Result:
Every record is set to 'It isn'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

55
HyperSQL Database Engine (HSQLDB) / Bugs / #55 Server crash after logging DISCONNECT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use hsqldb 1.61
In the situation where the dbengine is running as a 
server, I open a connection via jdbc and close it.
At that moment, the database engine logs a DISCONNECT 
statement in the script file.
If I close the database at that point and restart it,
I get a NullPointerException on the screen:
Server.run/init: java.lang.NullPointerException
java.lang.NullPointerException
at org.hsql.Channel.checkAdmin(Channel.java:69)
at org.hsql.DatabaseInformation.getScript
(DatabaseInformation.java:451)
at org.hsql.Database.getScript
(Database.java:222)
at org.hsql.Log.scriptToFile(Log.java:238)
at org.hsql.Log.writeScript(Log.java:494)
at org.hsql.Log.close(Log.java:148)
at org.hsql.Log.open(Log.java:128)
at org.hsql.Database.&lt;init&gt;(Database.java:47)
at org.hsql.Server.run(Server.java:69)
at org.hsql.Server.main(Server.java:33)
And the server won't ever respond again normally to 
connections.
This crash can be recovered manually by removing the 
DISCONNECT statement from the .script file.
Of course that will be a big problem in production 
environments. :)
For myself I have solved the problem in Log.java
by adjusting the
void write(Channel c,String s) throws SQLException {
method, so that it doesn't write a DISCONNECT to the 
script file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

56
HyperSQL Database Engine (HSQLDB) / Bugs / #56 double column names are allowed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to an error in my create table script I created a 
table with 2 columns with the same name.
I don't know what the effects of this are, but I think 
it should not be allowed.
Only imagine select .. from .. where a=x
with a the double column name
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

57
HyperSQL Database Engine (HSQLDB) / Bugs / #57 combined conditions don't work correctly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Okay, here is an example:
Create some tables (I stripped off everything you do 
not need to see the problem).
create cached table USERGROUPS
(
ID integer
);
create cached table USERS
(
ID integer
);
create cached table UG
(
FK_USER integer,
FK_USERGROUP integer,
TEST bit,
foreign key (FK_USER) references USERS(ID),
foreign key (FK_USERGROUP) references USERGROUPS(ID),
unique (FK_USER, FK_USERGROUP)
);
Now insert some test data.
insert into USERGROUPS values (0);
insert into USERS values (0);
insert into UG values (0, 0, true);
Well, now if you do an
- select * from UG where FK_USER=0 and FK_USERGROUP=0 -
or 
- update UG set TEST = true where FK_USER=0 and 
FK_USERGROUP=0 -
there is no result!
If you use just one of the conditions
- select * from UG where FK_USER=0 -
or
- select * from UG where FK_USERGROUP=0 -
it works. If you don't create the foreign key FK_USER 
or the UNIQUE clause, everything is just fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

58
HyperSQL Database Engine (HSQLDB) / Bugs / #58 Version 1.62 patch breaks selftest
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The suggested patches for version 1.62 includes a 
patch for bug 471711 by fredt. This patch generate a 
column not found error when running the selftest 
program.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

59
HyperSQL Database Engine (HSQLDB) / Bugs / #59 EOFException executing UPDATE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(HSQLDB v1.61)
I was running an application making lots of inserts,
selects and updates and got the following stack dump. 
I know this is not a lot to go on, but I have only seen
it once. This happened while executing a query like
the following:
UPDATE profile SET last_time = now() WHERE id IN
(1944,1887,1876,1876,1957,1957,1886,1886,1921,
1921,1893,1849,1849)
The number of ids in the query varies.
I will post again if I get any more information.
Thanks,
Stack dump:
java.io.EOFException
at
java.io.RandomAccessFile.readInt(RandomAccessFile.java(Compiled
Code))
at org.hsqldb.Cache.getRow(Cache.java(Compiled Code))
at org.hsqldb.Row.getNode(Row.java(Compiled Code))
at org.hsqldb.Index.delete(Index.java(Compiled Code))
at org.hsqldb.Index.delete(Index.java(Compiled Code))
at org.hsqldb.Table.deleteNoCheck(Table.java:965)
at org.hsqldb.Table.deleteNoCheck(Table.java:949)
at
org.hsqldb.Parser.processUpdate(Parser.java(Compiled Code))
at
org.hsqldb.Database.execute(Database.java(Compiled Code))
at
org.hsqldb.jdbcConnection.executeStandalone(jdbcConnection.java:994)
at
org.hsqldb.jdbcConnection.execute(jdbcConnection.java:721)
at
org.hsqldb.jdbcStatement.fetchResult(jdbcStatement.java:686)
at
org.hsqldb.jdbcStatement.executeUpdate(jdbcStatement.java:85)
at
com.myco.ADBConnection.executeUpdate(ADBConnection.java:337)
at
com.myco.server.HSQLDatabase.updateQueuedAProfiles(HSQLDatabase.java:471)
at
com.myco.server.StandardDatabase$DBInsertDaemon.run(StandardDatabase.java(Compiled
Code))
at java.lang.Thread.run(Thread.java:498)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

60
HyperSQL Database Engine (HSQLDB) / Bugs / #60 Inserting Objects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having problems storing java.lang.Integer and 
java.lang.String objects in hsqldb 1.60. 
Here is the table I have created: 
CREATE CACHED TABLE PREFERENCE 
( 
User_Id INTEGER NOT NULL, 
Pref_Name VARCHAR(30) NOT NULL, 
Pref_Value OBJECT NOT NULL, 
DateCreated DATETIME NOT NULL, 
PRIMARY KEY(User_Id, Pref_Name), 
FOREIGN KEY(User_Id) REFERENCES USER(User_Id) 
) 
I am inserting Objects using a PreparedStatment. All 
other objects I insert (user defined objects that is) 
seem to work fine. No exceptions are being thrown 
while inserting. When I open the database in 
DatabaseManager, The preference name has been written, 
but the serialized object field is blank.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

61
HyperSQL Database Engine (HSQLDB) / Bugs / #61 Null Pointer thrown from jdbcResultSet
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The method getBinaryStream() throws a NullPointer 
exception if the data in the database is null. This 
is because it tries instantiate a ByteArrayInputStream 
with a null value (the result from getBytes())
This should be changed so that the method retuns null 
and does not throw the exception.
See line 438 of jdbcResultSet.
Maybe something like this...
public InputStream getBinaryStream(int column) 
throws SQLException
{
InputStream returnStream = null;
byte[] bytes = getBytes(column);
if (bytes != null)
returnStream = new ByteArrayInputStream(bytes);
return returnStream;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

62
HyperSQL Database Engine (HSQLDB) / Bugs / #62 NPE on connect.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
v1.61
We got the following stack trace once while our 
application was trying to connect to HSQL.
java.lang.NullPointerException
at org.hsqldb.Log.writeLine(Log.java:904)
at org.hsqldb.Log.write(Log.java:355)
at org.hsqldb.Database.connect
(Database.java:155)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:937)
at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
at java.sql.DriverManager.getConnection
(DriverManager.java:523)
at java.sql.DriverManager.getConnection
(DriverManager.java:152)
...
at java.lang.Thread.run(Thread.java:498)
It looks like w was null:
private static void writeLine(Writer w, String s) 
throws IOException {
w.write(StringConverter.unicodeToAscii(s) 
+ &quot;\r\n&quot;);
}
We only saw this once, so I was not able to narrow it 
down at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

63
HyperSQL Database Engine (HSQLDB) / Bugs / #63 Extraneous sleep  in Log class
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In version 1.61 of hsqldb in the Log.isAlreadyOpen() method there is a 3 second sleep that seems to be there to do some sort of concurrency checking. I could not find anyplace where the lock file is actually created. I believe this is unnecessary code and can be removed. It would significantly improve start-up time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

64
HyperSQL Database Engine (HSQLDB) / Bugs / #64 Unprotected system tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here's a good chuckle for anyone who's interested:
- open the DatabaseManager against any hsql(db)
database (you don't even have to be an admin user for
this)
- create a table SYSTEM_CONNECTIONINFO( ID INT )
- refresh tree
Ha, ha, ha...wimper... (:-(
Here's another good one:
- in same session, now drop table SYSTEM_CONNECTIONINFO
- refresh tree (all is good again)
- create table SYSTEM_TABLES(int id)
- create table TEST(int id)
- refresh tree
Hey! Where did test go? I just created it, but it
doesn't show up in the treeeeeeee.
The fix is simple:
hsql(db) needs to disable creation of user tables with
the same names as system tables. A really naive
implementation only needs to do a
getSystemTable(create_table_name) != null to check
this, although it is a waste to do it that way.
BTW
inserts, updates, deletes are also allowed against
system tables, but since the tables are regenerated on
each use, the DML is completely without observablke
effect (but does consume processing time). These
actions should be disabled too, if not too expensive...
Campbell
PS
yes: I know that nobody with even a little hsqldb
knowlege is going to do this (on purpose or
otherwise). But what about the case where someone is
migrating to hsqldb, they are fairly green, and their
previous naming conventions were *unfortunate*? What
about automated environments, where software chooses
the names for table creation?
PPS
I've known about this one for ~6 months now (basically,
since I first downloaded the product and took my first
skim through the source). Sorry about not posting
earlier
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

65
HyperSQL Database Engine (HSQLDB) / Bugs / #65 Exception while shutdown compact
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello we use HSQL in a production system.
The usage is very heavy msg traffic.
When we try to shutdown immediately from the Admin
console 
We observed the following exception:
ava.lang.NullPointerException
at org.hsql.Channel.checkAdmin(Channel.java:69)
at org.hsql.Database.processShutdown
(Database.java:642)
at org.hsql.Database.execute(Database.java:156)
at org.hsql.ServerConnection.run
(ServerConnection.java:58)
ava.lang.NullPointerException
at org.hsql.Log.writeLine(Log.java:493)
at org.hsql.Log.write(Log.java:197)
at org.hsql.Database.execute(Database.java:168)
at org.hsql.ServerConnection.run
(ServerConnection.java:58)
Then the server does not quit.
We have to hit ctrl C and then edit the properties
file to modified = NO and restart the server to 
run.
How does one restore from a previous backup file.
Thank you
--
Raman
rkannan@govpx.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

66
HyperSQL Database Engine (HSQLDB) / Bugs / #66 problem inserting data &gt;30k
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a problem when I want to insert data &gt;30kb into 
a longvarbinary field. For inserting I use a 
preparedStatement and the setBytes() method. There is 
no error code, the program &quot;stops&quot; only...
The error occurs when hsql runs in &quot;server&quot;-mode. I 
tried the same insert of large data with the hsql 
standalone version and it works!
Please help me, if you know a solution or hint.
Peter
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

67
HyperSQL Database Engine (HSQLDB) / Bugs / #67 NumberFormatException DECIMAL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is this a bug ?
http://sourceforge.net/forum/forum.php?
thread_id=623572&amp;forum_id=73674
I am using hsqldb_v.1.61
Boerries
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

68
HyperSQL Database Engine (HSQLDB) / Bugs / #68 commit does not work with multiple con.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are not sure if this is a limitation of hsqldb or a
bug. Please clarify:
We use 3 connections:
connection1.setAutoCommit(false); 
//connection1.commit(); 
connection2.setAutoCommit(false); 
//connection1.commit(); 
connection3.setAutoCommit(false);
//connection1.commit(); 
con3: INSERT INTO TABLE Row with ID 2
con1: SELECT * FROM TABLE 
-&gt; shows Row with ID 2
connection2.commit();
connection3.commit(); 
connection1.commit();
If we reread the TABLE after finishing this test
program, the new Row is not in the TABLE anymore!
If we do one of the following changes, all works as
expected (Row stays in the TABLE):
- Remove comment from the lines connection1.commit()
OR
- Change commit statements at the end of the program
to:
connection3.commit(); 
connection2.commit();
connection1.commit();
Can you please clarify this issue? 
Thanks a lot!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

69
HyperSQL Database Engine (HSQLDB) / Bugs / #69 foreign key problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Suppose:
table B has a foreign key on table A field nr 1 (both
tables are cached)
If table A is dropped, it is still possible do to
selects in table B, but when the database is stopped
and restarted table B is deleted.
In my opinion here is something wrong. I have 3 options :
1. It should not be possible to drop table A. At the
moment it is not possible to delete records in table A
which are referenced in table B.
2. If you can drop table A, table B should be impacted
immediatly, not after a restart of the database.
3. In my opinion the best would be to put table B in a
mode not accessible to the users, (but it should not be
deleted, as it happens now), until table A is recreated
with the correct foreign keys. If table A is recreated
table b should be again accessible for select/update by
the users.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

70
HyperSQL Database Engine (HSQLDB) / Bugs / #70 {fn hour ()} Returns 0 through 11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The hour function returns zero through eleven, instead 
of zero through twenty-three, because the hour method 
in Library.java used Calendar.HOUR instead of 
Calendar.HOUR_OF_DAY. I've made this mistake many 
times myself. Source fix:
public static int hour(java.sql.Time t) {
return getDateTimePart(t, Calendar.HOUR_OF_DAY);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

71
HyperSQL Database Engine (HSQLDB) / Bugs / #71 {fn month()} returns 0 through 11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The month function returns zero through eleven instead 
of one through twelve. It's always seemed odd to me 
that the Calendar.MONTH returns zero through eleven 
instead of one through twelve. Here's a source fix to 
Library.java:
public static int month(java.sql.Date d) {
return getDateTimePart(d, Calendar.MONTH) + 1;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

72
HyperSQL Database Engine (HSQLDB) / Bugs / #72 Memory problems with cached tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We've been using HSQL for a little while for internal 
testing and such. However, we've had some trouble 
loading large quantities of data to cached tables.
Since the HSQL code uses integer values to perform its 
seeks into the data file, theoretically you should be 
able to store a gig or more of data. In practice, 
however, it seems that all the data you load remains 
in memory, even when using cached tables.
I've attached a Java class written by one of my co-
workers that demonstrates this. No matter how large 
or small the row size, it always craps out after 
consuming the available memory. It appears that the 
Cache class is supposed to maintain a limited number 
of rows in memory and persist the rest to disk, but I 
don't think it really performs that function. I've 
tried changing the value governing the size of the 
cache (even setting it as low as 20 rows), but the 
amount of memory consumed remains the same. In 
addition, running an analyzer reveals that Row objects 
are never garbage collected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

73
HyperSQL Database Engine (HSQLDB) / Bugs / #73 Shutdown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Im trying to use HSQL. I've configured it and it seems to meet my needs in all but one respect.
I'd like to create a JRun-style admin tool which allows the user to start and stop the database 
server at the click of a button. I've done this with McKoi, another Java database. 
The problem I'm having with HSQL is restarting the database server after the user has shut it 
down. The SQL &quot;Shutdown&quot; command appears to mean something other than shutdown for HSQL.
After issuing the shutdown command on it, attempting to restart it causes it to issue the 
following...
java.net.BindException: Address already in use: JVM_Bind
... and kill whatever process it's in. 
I'm no expert in this area but I think this is possibly an indication that the server port is still in use.
I think it might mean that the database never fully shuts down. This hurts me in the admin tool 
scenario because I'm running the database server as a thread within the admin tool process. When 
the above exception is thrown the entire admin tool process is killed. The user just sees his admin 
tool disappear. The exception is flagged, the user hits OK, the database dies and says I'm going to 
kill everybody near me. AAAAAAAAARRRRRRRRRRRGGGGGGGGHHHHH!!!!!!!!!
Any thoughts on this would be greatly appreciated.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

74
HyperSQL Database Engine (HSQLDB) / Bugs / #74 *must* fix logging w.r.t. object names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It has come to my attention that there are several 
outstanding issues w.r.t. case preservation, 
extraneous quotes corupting the log, etc.
My latest experiment shows that yet another case is 
not handled correctly
Say one issues the statement:
CREATE TABLE &quot;test&quot;&quot;er&quot;(ID INTEGER)
which is perfectly legal and reults in a table named:
test&quot;er
then the statement is logged as:
CREATE TABLE test&quot;er(ID INTEGER)
When the database is restarted, all statments 
pretaining to this table, of course, fail.
My suggestion is that (if we continue with the current 
log format) we should double-quote all object names in 
the log and escape internal double-quotes in the 
standard manner by doubling them, as in:
CREATE TABLE &quot;test&quot;&quot;er&quot;(&quot;ID&quot; INTEGER)
INSERT INTO &quot;test&quot;&quot;er&quot;(&quot;ID&quot;) VALUES(1)
...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

75
HyperSQL Database Engine (HSQLDB) / Bugs / #75 StringIndexOutOfBound Exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I got the following Exception with HSQL v1.61:
java.lang.StringIndexOutOfBoundsException: String 
index out of range: -7
at java.lang.String.substring(String.java:1503)
at org.hsqldb.Table.setIndexRoots
(Table.java:483)
at org.hsqldb.Database.processSet
(Database.java:1179)
at org.hsqldb.Database.execute
(Database.java:274)
at org.hsqldb.Log.runScript(Log.java:837)
at org.hsqldb.Log.open(Log.java:223)
at org.hsqldb.Database.&lt;init&gt;(Database.java:96)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:926)
at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:682)
at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:116)
at java.sql.DriverManager.getConnection
(DriverManager.java:517)
at java.sql.DriverManager.getConnection
(DriverManager.java:146)
at com.ibm.ivj.eab.dab.DatastoreJDBC.connect
(DatastoreJDBC.java:255)
with the following database schema:
CREATE CACHED TABLE amov (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255),
dname VARCHAR (5) ,
mountext VARCHAR (255) ,
CONSTRAINT PK___8__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE dappli (
primkey CHAR (10) NOT NULL ,
pgname VARCHAR (255) ,
param VARCHAR (255) ,
CONSTRAINT PK___8__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE docfile (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255) ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE filedb (
primkey CHAR (10) NOT NULL ,
cod CHAR (1),
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
filename VARCHAR (255) ,
data LONGVARBINARY ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE mailfile (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255) ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE maildb (
primkey CHAR (10) NOT NULL , 
cod CHAR (1), 
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
filename VARCHAR (255) ,
data LONGVARBINARY ,
CONSTRAINT PK___6__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE docurl (
primkey CHAR (10) NOT NULL ,
urlstr VARCHAR (255) NOT NULL ,
CONSTRAINT PK___9__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE hierar (
elemkey CHAR (10) NOT NULL ,
parekey CHAR (10) ,
chilnb INT ,
sallekey CHAR (10) ,
armkey CHAR (10) ,
doskey CHAR (10) ,
claskey CHAR (10) ,
interkey1 CHAR(10),
interkey2 CHAR(10),
interkey3 CHAR(10),
interkey4 CHAR(10),
interkey5 CHAR(10),
interkey6 CHAR(10),
interkey7 CHAR(10),
interkey8 CHAR(10),
foldkey CHAR (10) ,
creation date NOT NULL ,
modif date NOT NULL ,
lastacc date NOT NULL ,
tlastacc time NOT NULL,
dupcop date NOT NULL ,
tdupcop time NOT NULL ,
tmodif time NOT NULL ,
etat CHAR (1) NOT NULL ,
protacc CHAR (1) ,
CONSTRAINT PK___5__11 PRIMARY KEY (elemkey));
CREATE CACHED TABLE task (
primkey CHAR (10) NOT NULL ,
etat CHAR (1) NOT NULL ,
debut date NOT NULL ,
fin date NOT NULL ,
intitule VARCHAR (255) ,
description VARCHAR (255) ,
resultat VARCHAR (255) ,
CONSTRAINT PK___3__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE telem (
primkey CHAR (10) NOT NULL ,
type CHAR (1) NOT NULL ,
nicon SMALLINT NOT NULL,
name VARCHAR (255) NOT NULL ,
dirname VARCHAR (255) ,
typelem VARCHAR (40) ,
ref1 VARCHAR (40) ,
ref2 VARCHAR (40) ,
ref3 VARCHAR (40) ,
nbcont INT NOT NULL ,
postit VARCHAR (255) ,
objet VARCHAR (255) ,
modest CHAR (1) NOT NULL ,
cod CHAR (1) NOT NULL ,
CONSTRAINT PK___4__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE prgname (
configname CHAR (20) NOT NULL ,
extension CHAR (10) NOT NULL ,
directoryname VARCHAR (255) ,
filename VARCHAR (255) NOT NULL,
nicon SMALLINT NOT NULL ,
CONSTRAINT PK___7__11 PRIMARY KEY 
(configname,extension));
CREATE CACHED TABLE tacces (
primkey CHAR (10) NOT NULL ,
acckey CHAR (10) NOT NULL ,
urlnm VARCHAR (255) ,
CONSTRAINT PK___9__11 PRIMARY KEY (primkey));
CREATE CACHED TABLE tusnber (
depcod CHAR (2) NOT NULL ,
usercod CHAR (3) NOT NULL ,
CONSTRAINT PK_tusnber_1__11 PRIMARY KEY(depcod));
CREATE CACHED TABLE tkeynber (
depcod CHAR (2) NOT NULL ,
usercod CHAR (3) NOT NULL ,
serialcod CHAR(5) NOT NULL,
CONSTRAINT PK_tkeynber_1__11 PRIMARY KEY
(depcod,usercod));
CREATE CACHED TABLE tperson (
type CHAR (1) ,
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
fonction VARCHAR (60) ,
company VARCHAR (60) ,
streetaddress VARCHAR (70) ,
zipcode VARCHAR (10) ,
city VARCHAR (30) ,
adstate VARCHAR (30) ,
country VARCHAR (30) ,
e_mail VARCHAR (70) ,
tel1 VARCHAR (20) ,
tel2 VARCHAR (20),
fax VARCHAR (20) ,
extension VARCHAR (6) ,
CONSTRAINT PK___2__11 PRIMARY KEY (name, 
firstname));
CREATE CACHED TABLE admbox (
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
elemkey CHAR (10) NOT NULL ,
type CHAR (1) NOT NULL ,
title VARCHAR (60) ,
CONSTRAINT PK_admbox_1__11 PRIMARY KEY 
(name,firstname,elemkey));
CREATE CACHED TABLE accesright (
elemkey CHAR (10) NOT NULL ,
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
typ CHAR (1) NOT NULL,
cod CHAR (1) NOT NULL,
lastacc date NOT NULL ,
tlastacc time NOT NULL ,
CONSTRAINT PK_right_1__11 PRIMARY KEY 
(elemkey,name,firstname));
CREATE CACHED TABLE author (
elemkey CHAR (10) NOT NULL ,
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
typ CHAR (1) NOT NULL,
titre VARCHAR (40),
e_mail VARCHAR (70) , 
maildate date , 
mailkey CHAR (10) ,
CONSTRAINT PK_author_1__11 PRIMARY KEY 
(elemkey,name,firstname,typ),
CONSTRAINT FK___8__11 FOREIGN KEY (elemkey) 
REFERENCES telem (primkey));
CREATE CACHED TABLE persongroup (
teamname VARCHAR (40) NOT NULL ,
teamfirstname VARCHAR (30) NOT NULL ,
membername VARCHAR (40) NOT NULL ,
memberfirstname VARCHAR (30) NOT NULL ,
notes VARCHAR (40),
CONSTRAINT PK_group_1__11 PRIMARY KEY (teamname, 
teamfirstname, membername, memberfirstname),
CONSTRAINT FK___4__11 FOREIGN KEY 
(teamname,teamfirstname) REFERENCES tperson 
(name,firstname),
CONSTRAINT FK___5__11 FOREIGN KEY 
(membername,memberfirstname) REFERENCES tperson 
(name,firstname));
CREATE CACHED TABLE taskelem (
elemkey CHAR (10) NOT NULL ,
taskkey CHAR (10) NOT NULL ,
CONSTRAINT PK_taskelem_1__11 PRIMARY KEY 
(elemkey,taskkey),
CONSTRAINT FK___1__11 FOREIGN KEY (taskkey) 
REFERENCES task (primkey),
CONSTRAINT FK_taskelem_2__11 FOREIGN KEY (elemkey) 
REFERENCES telem (primkey));
CREATE CACHED TABLE taskpers (
name VARCHAR (40) NOT NULL ,
firstname VARCHAR (30) NOT NULL ,
typ CHAR (1) NOT NULL,
taskkey CHAR (10) NOT NULL ,
etat CHAR (1) NOT NULL,
CONSTRAINT PK_taskpers_1__11 PRIMARY KEY
(taskkey,name,firstname),
CONSTRAINT FK___2__11 FOREIGN KEY (taskkey) 
REFERENCES task (primkey));
CREATE CACHED TABLE userconfig (
name CHAR (40) NOT NULL ,
firstname CHAR (30) NOT NULL ,
depcod CHAR (2) NOT NULL ,
usercod CHAR (3) NOT NULL,
bcasekey CHAR (10) NOT NULL ,
bcase1key CHAR (10) NOT NULL ,
trashkey CHAR (10) NOT NULL ,
homekey CHAR (10) NOT NULL,
rmailkey CHAR (10) NOT NULL ,
smailkey CHAR (10) NOT NULL ,
logsmailkey CHAR (10) NOT NULL ,
panel1 CHAR (10) ,
panel2 CHAR (10) ,
panel3 CHAR (10) ,
panel4 CHAR (10) ,
panel5 CHAR (10) ,
modest CHAR NOT NULL ,
cod CHAR NOT NULL ,
useright INT NOT NULL ,
basedir VARCHAR (255) ,
configname CHAR (20) ,
ckey VARCHAR (50) NOT NULL ,
mailuserid VARCHAR (40),
mailpsw VARCHAR (50) , 
mailstorser VARCHAR (70),
mailtransser VARCHAR (70), 
mailstorprot CHAR(10),
mailtransprot CHAR(10),
mailstorclas VARCHAR(70), 
mailtransclas VARCHAR (70),
edition CHAR(10) ,
rfu CHAR(10) ,
CONSTRAINT PK___1__10 PRIMARY KEY (name,firstname));
CREATE CACHED TABLE tquery (
queryname VARCHAR (150) NOT NULL , 
name VARCHAR (40) NOT NULL , 
firstname VARCHAR (30) NOT NULL , 
display CHAR (1) NOT NULL , 
querystring1 VARCHAR (255) NOT NULL , 
querystring2 VARCHAR (255) , 
querystring3 VARCHAR (255) , 
querystring4 VARCHAR (255) , 
CONSTRAINT PK_tquery_1__11 PRIMARY KEY ( queryname, 
name, firstname));
To reproduce the exception:
1- Launch database Manager and execute all the CREATE 
SQL commands to create the database
2 - Quit Database Manager
3 - Launch Database Manager again and connect to the 
database just created. 
Could you help me ?
Thanks a lot.
Rene Levantinh
visual@club-internet.fr
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

76
HyperSQL Database Engine (HSQLDB) / Bugs / #76 SHUTDOWN fails under JVM 1.4.0. beta 3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issuing a SHUTDOWN command to the database does not 
shut it down under version 1.4.0 beta 3 of the JVM.
The server just hangs in some sort of limbo state 
where the server is not accepting queries but is not 
actually shut down either. SHUTDOWN works fine under 
JVMs 1.3.0 and 1.3.1.
Sometimes, SHUTDOWN will work after repeated attempts 
to shutdown/connect to the server from a client.
When this eventually happens, (if run with &quot;-silent 
false&quot;) the message &quot;The database is shutdown&quot; is 
issued once for each time you attempted to shutdown 
the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

77
HyperSQL Database Engine (HSQLDB) / Bugs / #77 ABS function unknown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
unknown function: ABS
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

78
HyperSQL Database Engine (HSQLDB) / Bugs / #78 right join throws SQLException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SEE:
http://sourceforge.net/forum/forum.php?
thread_id=643937&amp;forum_id=73674
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

79
HyperSQL Database Engine (HSQLDB) / Bugs / #79 Parser error in nested query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version : HSQLdb1.61
The parser has some problems with nested queries that 
are combined via 'where in'
try the following :
create table t(id integer not null, name char)
create table u(id integer not null, name char)
insert into u values(1,'Jim')
insert into u values(2,'Pete')
insert into t select * from u where u.id in (select 
u.id from u where u.id=1)
Gives as result :
SQL 
Error 
Column not found: ID in statement [insert into t 
select * from u where u.id in (select u.id from u 
where u.id=1)] / Error Code: 0 / State: S0022 
while
select u.id from u where u.id=1
and
insert into t select * from u where u.id in(1,36)
work both fine.
By the way,
I could work around the problem by rewriting the query.
Alexander
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

80
HyperSQL Database Engine (HSQLDB) / Bugs / #80 Compatability Issues in J2SDK1.4.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
assert is now a keyword within Java2 v1.4.0 and so 
the program will no longer compile.
Thanks
J
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

81
HyperSQL Database Engine (HSQLDB) / Bugs / #81 Updates not being applied
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I send an SQL Update command using executeUpdate
(), I do not get a JDBC error, but the updates are not 
applied. I am issing a commit after the SQL Update.
If close the JDBC connection, or issue a CHECKPOINT, 
the update is applied.
Any ideas?
Thanks,
Dave Connerth
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

82
HyperSQL Database Engine (HSQLDB) / Bugs / #82 Literals in SELECT, not enough results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 1.61
I'm trying to insert data using a INSERT INTO ... 
SELECT ... GROUP BY ... statement. As part of the 
statement, I need literal values. If the literals are 
placed before a SUM() expression, I only get a single 
row returned. If after the expression, I get how every 
many the SUM() returns. MSSQL returns the same number 
in either case.
Example:
create table x ( oid integer, value integer );
insert into x values ( 1, 1 );
insert into x values ( 1, 2 );
insert into x values ( 1, 3 );
insert into x values ( 2, 1 );
insert into x values ( 2, 2 );
insert into x values ( 2, 3 );
select sum(value) from x
group by oid;
3
1
4
3
1
select 'x', sum(value) from x
group by oid
12
select sum(value), 'x' from x
group by oid
3 x
1 x
4 x
3 x
1 x
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

83
HyperSQL Database Engine (HSQLDB) / Bugs / #83 GROUP BY returns row of NULLs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using a INSERT INTO ... SELECT ... GROUP BY ...
statement. Getting 'Cannot insert NULL' when SELECT
should return nothing. It appears that the GROUP BY
clause causes the SELECT return a row of NULLs when 
nothing is found.
eg.
create table x ( oid integer );
select oid
from x;
OID
---------
&lt;nothing&gt;
select oid
from x
group by oid;
OID
------
(null)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

84
HyperSQL Database Engine (HSQLDB) / Bugs / #84 Index names not local to table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1.7.0 RC 1 alpha
CREATE TABLE x ( oid INTEGER, value VARCHAR(80) );
CREATE TABLE y ( oid INTEGER, value VARCHAR(80) );
CREATE INDEX name_index on x ( value );
-- OK
CREATE INDEX name_index on y ( value );
-- Index already exists: S0011 ...
This problem did not exist in 1.61!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

85
HyperSQL Database Engine (HSQLDB) / Bugs / #85 probs with CodeSwitcher
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to run CodeSwitcher to switch to JDK11 on
hsqldb_v_1_70_RC1alfa
(I am not sure whether it is still allowed to use
CodeSwitcher. I havent installed Ants yet.)
I got the following errors:
~/hypersonicsql/hsqldb_v_1_70_RC1alfa&gt; java -classpath
$CLASSPATH:. org.hsqldb.util.CodeSwitcher . -JAVA2
-TRACE -TRACESYSTEMOUT
................................
ERROR: '#endif' without '#ifdef'
in file ./org/hsqldb/jdbcResultSet.java !
..........................................
ERROR: '#ifdef' not allowed inside '#ifdef'
in file ./org/hsqldb/util/Transfer.java !
.....
And there is a double //#endif JAVA2 in line 1263 of
jdbcResultSet.java.
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

86
HyperSQL Database Engine (HSQLDB) / Bugs / #86 multiple null values violate unique cons
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As far as I know, NULL values should not be considered
when checking if an insert satisfies the unique
constraints defined on a table. For instance:
create table test (
x integer not null primary key,
y integer,
constraint uniq_y unique (y)
)
The following should be allowed:
insert into test(x, y) values (1, null)
insert into test(x, y) values (2, null)
However, with hsqldb (v 1.61), the second insert fails
because of the unique constraint on y. 
Will this be corrected in a future version?
Kind regards,
Tijmen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

87
HyperSQL Database Engine (HSQLDB) / Bugs / #87 NullPointerException in getBinaryStream
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to access a column that has been set to NULL
with getBinaryStream, I get a NullPointerException.
Obviously HSQLDB tries to create a ByteArrayInputStream
from a null-Pointer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

88
HyperSQL Database Engine (HSQLDB) / Bugs / #88 compile errors with J2SDK 1.4.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
with hsqldb 1.61 and J2SDK 1.4.0, I did the following
steps:
1. ant switchtojdk11 - no problem
2. ant -verbose jar
Ant version 1.4.1 compiled on October 11 2001
Buildfile: build.xml
Detected Java version: 1.4 in: /usr/lib/j2sdk1.4.0/jre
Detected OS: Linux
parsing buildfile
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/build.xml
with URI =
file:/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/build.xml
Project base dir set to:
/home/ulrivo/hypersonicsql/hsqldb_v.1.61
Build sequence for target `jar' is [init, prepare,
classes, jar]
Complete build sequence is [init, prepare, classes,
jar, codeswitcher, switchtojdk12, switchtojdk11, help,
clean, cleanall]
init:
prepare:
classes:
Property ${build.debug} has not been set
Property ${build.optimize} has not been set
[javac] hsqlServlet.java added as
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes/hsqlServlet.class
is outdated.
....[ the list of outdated files] ....
[javac] org/hsqldb/util/TriggerSample.java added as
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes/org/hsqldb/util/TriggerSample.class
is outdated.
[javac] Compiling 54 source files to
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes
[javac] Using modern compiler
[javac] Compilation args: -d
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes
-classpath
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes:/home/ulrivo/hypersonicsql/hsqldb_v.1.61:/home/ulrivo/hypersonicsql/hsqldb_v.1.61/lib:/usr/local/jakarta-ant-1.4.1/lib/jaxp.jar:/usr/local/jakarta-ant-1.4.1/lib/crimson.jar:/usr/local/jakarta-ant-1.4.1/lib/ant.jar:/usr/lib/java:/usr/lib/java/lib/tools.jar
-sourcepath
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src -g:none
[javac] Files to be compiled:
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/hsqlServlet.java
....[ the list of files to be compile ] ....
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/util/TriggerSample.java
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/Cache.java:382:
warning: as of release 1.4, assert is a keyword, and
may not be used as an identifier
[javac] Trace.assert(!r.bChanged);
[javac] ^
.... [ and a lot of error messages more concerning
Trace] ....
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcConnection.java:76:
org.hsqldb.jdbcConnection should be declared abstract;
it does not define createStatement(int,int) in
org.hsqldb.jdbcConnection
[javac] public class jdbcConnection implements
Connection {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcResultSet.java:95:
org.hsqldb.jdbcResultSet should be declared abstract;
it does not define getColumnClassName(int) in
org.hsqldb.jdbcResultSet
[javac] public class jdbcResultSet implements
ResultSet, ResultSetMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcDatabaseMetaData.java:61:
org.hsqldb.jdbcDatabaseMetaData should be declared
abstract; it does not define supportsResultSetType(int)
in org.hsqldb.jdbcDatabaseMetaData
[javac] public class jdbcDatabaseMetaData
implements DatabaseMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcStatement.java:53:
org.hsqldb.jdbcStatement should be declared abstract;
it does not define setFetchDirection(int) in
org.hsqldb.jdbcStatement
[javac] public class jdbcStatement implements
Statement {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcPreparedStatement.java:115:
org.hsqldb.jdbcPreparedStatement should be declared
abstract; it does not define getBigDecimal(int) in
org.hsqldb.jdbcPreparedStatement
[javac] public class jdbcPreparedStatement extends
jdbcStatement
[javac] ^
[javac] Note: Some input files use or override a
deprecated API.
[javac] Note: Recompile with -deprecation for
details.
[javac] 5 errors
[javac] 37 warnings
BUILD FAILED
Same error messages appear when I did in advance
ant switchtojdk12
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

89
HyperSQL Database Engine (HSQLDB) / Bugs / #89 no compile for JDK11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I tried with hsqldb 1.61 and JDK 1.3
ant switchtojdk11
ant jar
and got the following error messages:
Buildfile: build.xml
init:
prepare:
classes:
[javac] Compiling 54 source files to
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/classes
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcConnection.java:76:
org.hsqldb.jdbcConnection should be declared abstract;
it does not define createStatement(int,int) in
org.hsqldb.jdbcConnection
[javac] public class jdbcConnection implements
Connection {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcResultSet.java:95:
org.hsqldb.jdbcResultSet should be declared abstract;
it does not define getColumnClassName(int) in
org.hsqldb.jdbcResultSet
[javac] public class jdbcResultSet implements
ResultSet, ResultSetMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcDatabaseMetaData.java:61:
org.hsqldb.jdbcDatabaseMetaData should be declared
abstract; it does not define supportsResultSetType(int)
in org.hsqldb.jdbcDatabaseMetaData
[javac] public class jdbcDatabaseMetaData
implements DatabaseMetaData {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcStatement.java:53:
org.hsqldb.jdbcStatement should be declared abstract;
it does not define setFetchDirection(int) in
org.hsqldb.jdbcStatement
[javac] public class jdbcStatement implements
Statement {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/hsqldb_v.1.61/src/org/hsqldb/jdbcPreparedStatement.java:115:
org.hsqldb.jdbcPreparedStatement should be declared
abstract; it does not define getBigDecimal(int) in
org.hsqldb.jdbcPreparedStatement
[javac] public class jdbcPreparedStatement extends
jdbcStatement
[javac] ^
[javac] Note: Some input files use or override a
deprecated API.
[javac] Note: Recompile with -deprecation for
details.
[javac] 5 errors
BUILD FAILED
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

90
HyperSQL Database Engine (HSQLDB) / Bugs / #90 setProperty() in Log.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
just as a reminder:
There is still the quick hack for version 1.61 in the
code of 1.70 at line 182: setProperty() which is not
defined for JDK 1.1
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

91
HyperSQL Database Engine (HSQLDB) / Bugs / #91 IF EXISTS in hsqldb 1.70
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to submit
DROP TABLE foo IF EXISTS
leads to
SQL
Error 
Unexpected token: IF in statement [DROP TABLE Bad IF
EXISTS] / Error Code: 0 / State: 37000 
or without a defined table foo to
Table not found: FOO in statement [DROP TABLE foo IF
EXISTS] / Error Code: 0 / State: S0002 
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

92
HyperSQL Database Engine (HSQLDB) / Bugs / #92 SUM() + GROUP BY give unwanted NULL rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Similar to previously raised bug re: GROUP returning a 
single row of NULL(s) when its corresponding SELECT 
returns nothing.
Although 1.7 RC 2 fixes that bug, the following causes 
the same problem:
CREATE TABLE x ( oid INTEGER );
SELECT oid FROM x GROUP By oid;
OID
---
&lt;nothing&gt;
SELECT SUM(oid) FROM x GROUP By oid;
OID
---
NULL
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

93
HyperSQL Database Engine (HSQLDB) / Bugs / #93 Transfer corrupted / Error Code: -19 / State:40001
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
v1.7 RC1 &amp; RC2 both have the following bug:
Operating in client/server mode on localhost
After executing the select statement
select id, code, name, administrator_yn from dj_users 
order by code
I get an exception:
Transfer corrupted / Error Code: -19 / State: 40001
java.sql.SQLException: Transfer corrupted
at org.hsqldb.Trace.getError(Trace.java:205)
at org.hsqldb.Trace.error(Trace.java:256)
at org.hsqldb.Result.&lt;init&gt;(Result.java:176)
at org.hsqldb.jdbcConnection.executeHSQL
(jdbcConnection.java:1007)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:815)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:741)
at org.hsqldb.jdbcStatement.executeQuery
(jdbcStatement.java:125)
at 
org.hsqldb.jdbcPreparedStatement.executeQuery
(jdbcPreparedStatement.java:196)
If I leave out the order by it works OK.
The table was created with the following script:
CREATE CACHED TABLE dj_users (
id decimal(15, 0) NOT NULL ,
code varchar (30) NOT NULL ,
name varchar (50) NOT NULL ,
administrator_yn varchar (1) NOT NULL
,CONSTRAINT PK_dj_users PRIMARY KEY
(
id
)
);
-----
You can reproduce the error by executing the table 
create, and then
insert into dj_users (id, code, name, administrator_yn)
values (1, 'sa', 'admin', 'Y');
followed by
select * from dj_users order by code
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

94
HyperSQL Database Engine (HSQLDB) / Bugs / #94 delete problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i tried to use HSQLDB 1.7.0..
there was a delete problem.
when i restart the HSQLDB Server after i delete rows,
all the rows which have the same data were deleted.
for example,
there were rows like below:
no name
1 car
2 plain
2 plain 
i deleted the second row only.
i looked i did work fine.
but when i reatsrted the server ,
the rows were changed like below:
no name
1 car
two rows were deleted which have the same data.
colud you please consider of this problem...?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

95
HyperSQL Database Engine (HSQLDB) / Bugs / #95 V1.70RC3: build error with jdk 1.1.8 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I downloaded v1.70RC3 and found the new build.xml great
(thanx to Fred).
The build runs without any problems with 
java version &quot;1.3.0&quot;
Java(TM) 2 Runtime Environment, Standard Edition (build
1.3.0)
Classic VM (build 1.3.0, J2RE 1.3.0 IBM build
cx130-20000623 (JIT enabled: jitc))
and without problems with
java version &quot;1.4.0&quot;
Java(TM) 2 Runtime Environment, Standard Edition (build
1.4.0-b92)
Java HotSpot(TM) Client VM (build 1.4.0-b92, mixed
mode)
But, I got an error when building for/with JDK 1.1.8
under Linux:
-------------------------------------------------------------
ulrivo@ulrivo:~/hypersonicsql/v170rc3/build&gt; ant
-verbose jar
Ant version 1.4.1 compiled on October 11 2001
Buildfile: build.xml
Detected Java version: 1.1 in: /usr/lib/java
Detected OS: Linux
parsing buildfile
/home/ulrivo/hypersonicsql/v170rc3/build/build.xml with
URI =
file:/home/ulrivo/hypersonicsql/v170rc3/build/build.xml
Project base dir set to:
/home/ulrivo/hypersonicsql/v170rc3
Build sequence for target `jar' is [init, javaversion,
prepare, util, codeswitcher, switchtojdk11,
switchtojdk12, switchtojdk14, classes12, classes14,
classes, jar]
Complete build sequence is [init, javaversion, prepare,
util, codeswitcher, switchtojdk11, switchtojdk12,
switchtojdk14, classes12, classes14, classes, jar,
preparedoc, javadoc, test, jartest, clean, cleanall,
help, jarmain]
init:
javaversion:
[available] Unable to load class java.util.Set to set
property ant.java.iscjava12
[available] Unable to load class java.nio.Buffer to set
property ant.java.iscjava14
prepare:
[mkdir] Created dir:
/home/ulrivo/hypersonicsql/v170rc3/classes
util:
Property ${build.debug} has not been set
Property ${build.optimize} has not been set
[javac] CodeSwitcher.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/CodeSwitcher.class
doesn't exist.
[javac] ConnectionDialog.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/ConnectionDialog.class
doesn't exist.
[javac] DatabaseManager.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/DatabaseManager.class
doesn't exist.
[javac] Grid.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/Grid.class
doesn't exist.
[javac] jdbcSystem.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/jdbcSystem.class
doesn't exist.
[javac] QueryTool.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/QueryTool.class
doesn't exist.
[javac] ScriptTool.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/ScriptTool.class
doesn't exist.
[javac] Transfer.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/Transfer.class
doesn't exist.
[javac] Tree.java added as
/home/ulrivo/hypersonicsql/v170rc3/classes/Tree.class
doesn't exist.
[javac] Compiling 9 source files to
/home/ulrivo/hypersonicsql/v170rc3/classes
[javac] Using classic compiler
[javac] Compilation args: -d
/home/ulrivo/hypersonicsql/v170rc3/classes -classpath
/home/ulrivo/hypersonicsql/v170rc3/classes:/usr/local/jakarta-ant-1.4.1/lib/jaxp.jar:/usr/local/jakarta-ant-1.4.1/lib/crimson.jar:/usr/local/jakarta-ant-1.4.1/lib/ant.jar:/home/ulrivo/hypersonicsql/v170rc3:/usr/lib/java:/usr/lib/java/lib/classes.zip:/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util
[javac] Files to be compiled:
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/CodeSwitcher.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/ConnectionDialog.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/DatabaseManager.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Grid.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/jdbcSystem.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/QueryTool.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/ScriptTool.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Tree.java
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/jdbcSystem.java:88:
Method setLogWriter(java.io.PrintWriter) not found in
class java.sql.DriverManager.
[javac] 
DriverManager.setLogWriter(newPrintWriter);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:307:
No variable ARRAY defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.ARRAY), &quot;ARRAY&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:308:
No variable BLOB defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.BLOB), &quot;BLOB&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:309:
No variable CLOB defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.CLOB), &quot;CLOB&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:310:
No variable DISTINCT defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.DISTINCT), &quot;DISTINCT&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:311:
No variable JAVA_OBJECT defined in class
java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.JAVA_OBJECT), &quot;JAVA_OBJECT&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:312:
No variable REF defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.REF), &quot;REF&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:313:
No variable STRUCT defined in class java.sql.Types.
[javac] JDBCtypes.put(new
Integer(Types.STRUCT), &quot;STRUCT&quot;);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:1653:
No variable BLOB defined in class java.sql.Types.
[javac] if (t == Types.BLOB) {
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:1654:
Class org.hsqldb.util.Blob not found in type
declaration.
[javac] Blob b = r.getBlob(i + 1);
[javac] ^
[javac]
/home/ulrivo/hypersonicsql/v170rc3/src/org/hsqldb/util/Transfer.java:1654:
Method getBlob(int) not found in interface
java.sql.ResultSet.
[javac] Blob b = r.getBlob(i + 1);
[javac] ^
[javac] Note: 3 files use deprecated APIs. 
Recompile with &quot;-deprecation&quot; for details.
[javac] 11 errors, 1 warning
BUILD FAILED
--------------------------------
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

96
HyperSQL Database Engine (HSQLDB) / Bugs / #96 GROUP BY with ORDER BY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
after inserting the test data in DatabaseManager, I
submitted the
following query:
select productid, name, sum(quantity)
from position, product
where productid = id
group by productid
order by name
But, the result set is NOT ordered by name.
Regards,
Ulrich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

97
HyperSQL Database Engine (HSQLDB) / Bugs / #97 Int &amp; Double problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: hsqldb_v.1.61.
Here is script
CREATE TABLE sometable ( int_col INTEGER, doub_col 
DOUBLE );
INSERT INTO sometable ( int_col, doub_col ) VALUES ( 
2, 4.0 );
UPDATE sometable SET doub_col=int_col/2.0 WHERE 
int_col=2;
which cause a problem:
java.lang.NumberFormatException: 2.0
at java/lang/Integer.parseInt
at java/lang/Integer.&lt;init&gt;
at org/hsqldb/Column.convertString
at org/hsqldb/Expression.getValue
at org/hsqldb/Expression.getValue
at org/hsqldb/Expression.getValue
at org/hsqldb/Parser.processUpdate
at org/hsqldb/Database.execute
at org/hsqldb/jdbcConnection.execute
at org/hsqldb/jdbcStatement.fetchResult
at org/hsqldb/jdbcStatement.execute
at org/hsqldb/util/DatabaseManager.execute
at 
org/hsqldb/util/DatabaseManager.actionPerformed
at java/awt/Button.processActionEvent
at java/awt/Button.processEvent
at java/awt/Component.dispatchEventImpl
at java/awt/Component.dispatchEvent
at java/awt/EventDispatchThread.run
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

98
HyperSQL Database Engine (HSQLDB) / Bugs / #98 ASC / DESC  with DISTINCT does not work.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ASC / DESC functions when used with DISTINCT have 
no effect. 
To reproduce..
SELECT DISTINCT x FROM y ORDER BY z ASC;
or
SELECT DISTINCT x FROM y ORDER BY z DESC;
This bug seems to have been present for quite some 
time, and hopefully will be fixed with 1.7.0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

99
HyperSQL Database Engine (HSQLDB) / Bugs / #99 server.properties file not accessed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
server.properties file is not loaded.
I downloaded 1.7 release candidate to work on long var 
strings. Database would not read our current script 
file because the server.properties file was being 
ignored.
Recommend modifying Server.java to load properties 
from server.properties.
1. change &quot;server.properties&quot; to &quot;server&quot;
2. add serverProperties.load();
Code fragments:
//Current Server.java:
void setProperties(HsqlProperties props) {
serverProperties = new HsqlServerProperties
(&quot;server.properties&quot;);
serverProperties.addProperties(props);
//Suggested Server.java
void setProperties(HsqlProperties props) {
serverProperties = new HsqlServerProperties
(&quot;server&quot;);
try{
serverProperties.load();
}catch(Throwable theError){
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

100
HyperSQL Database Engine (HSQLDB) / Bugs / #100 Win2000 - Multi-byte char. issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL latest stable version is garbling the multi-byte 
characters in the following scenario.
Platform:
Win2000 Japanese Edition
1. Start HSQL server by using runHSQLDB.bat.
2. Start Database manager by using &quot;run 
DatabaseManager&quot;.
+ HSQL :Standalone DB or WebServer DB
+ URL : jdbc:hsqldb:http://localhost:9001
3. Insert a data with Japanese character into any 
sample table,say, EMPLOYEE.
4. Check the table data by using &quot;SELECT * FROM 
EMPLOYEE&quot;. The data has no problem till now.
5. Stop the Server and Database manager.
6. Re-start the Server and Database manager (Same 
as 1 and 2).
7. Check the table of EMPLOYEE.
The first multi-byte character has changed to 
unicode as &quot;\uxxxx&quot; format. 
This is reproducible always and is happening 
continuosly. Please contact me at 
sanjayag@india.hp.com for more details.
Thanks
Sanjay
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

101
HyperSQL Database Engine (HSQLDB) / Bugs / #101 jdbcConnection.getAutoCommit broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
jdbcConnection.getAutoCommit fails to take into 
account SET AUTOCOMMIT statments, reflecting only the 
last value passed to jdbcConnection.setAutoCommit.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

102
HyperSQL Database Engine (HSQLDB) / Bugs / #102 Wrong update decomposition in script
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I recently installed the hsqldb 1.7.0RC3. After some 
time of testing/using it I found the following bug (?):
In some cases (couldn't find out under which 
circumstances exactly) when hsqldb writes the UPDATE 
command into the script file and decomposes it into 
DELETE, INSERT sequence, it distorts the WHERE clause. 
This happens in the following way: it compares the 
correct column, but with incorrect value, ie. with 
value of the first updated column (or the first column 
in the table definition?). As the value is of 
different type, the next time hsqldb is started, it
throws the &quot;java.sql.SQLException: Unexpected token: 
37000 Unexpected token: 08&quot; exception.
Here is some example:
This command is called upon hsqldb server (hsqldb 
console printout):
3:UPDATE custom_kniekniha SET evidence = '966', autor 
= 'Osif Michal', nazev =
'Windows 95', keywords = 'Windows 95', dat_vydani 
= '1955', dat_porizeni = '
1996', cena = '161,90', poznamka = 'pokus', p_read 
= 'transoft', p_modify = 'k
nihovna', g_muser='ts.martin', g_mdatetime = '2002-04-
09 09:36:14.6', g_deleted
= 0 WHERE id=16
And these are corresponding rows from the script file:
/*C4*/DELETE FROM CUSTOM_KNIEKNIHA WHERE ID=2002-03-26 
08:20:41.0
INSERT INTO CUSTOM_KNIEKNIHA VALUES('2002-04-09 
09:36:14.6',16,'1996','knihovna','transoft','966','Wind
ows 95','Windows 95','161,90','Osif 
Michal','1955',0,'ts.martin','pokus')
Martin Stepanek
(abrasax@wo.cz)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

103
HyperSQL Database Engine (HSQLDB) / Bugs / #103 Connection reset by peer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In client/server mode of RC4:
When my client closes the connection (and then 
terminates) I get the following exception on the 
server side console:
java.net.SocketException: Connection reset by peer: 
JVM_recv in socket input stream read
at java.net.SocketInputStream.socketRead
(Native Method)
at java.net.SocketInputStream.read
(SocketInputStream.java:86)
at java.io.BufferedInputStream.fill
(BufferedInputStream.java:186)
at java.io.BufferedInputStream.read
(BufferedInputStream.java:204)
at java.io.DataInputStream.readInt
(DataInputStream.java:338)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:163)
at java.lang.Thread.run(Thread.java:484)
This is new in RC4, the previous RC's did not have 
this trace.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

104
HyperSQL Database Engine (HSQLDB) / Bugs / #104 bug in reading LONGVARCHAR
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JavaDocs in jdbcResultSet.getAsciiStream says:
&quot;This method is particularly suitable for retrieving 
large LONGVARCHAR values.&quot;
getAsciiStream makes internal call to getUnicodeStream
and here is the definition of that method:
public InputStream getUnicodeStream(int column) 
throws SQLException {
return new ByteArrayInputStream(getBytes
(column));
}
Now the source of getBytes method:
public byte[] getBytes(int column) throws 
SQLException {
Object o = getColumnInType(--column, 
Types.BINARY);
return o == null ? null
: ((ByteArray) o).byteValue();
}
Did you saw the problem?
When I try to invoke getAsciiStream it will throw 
SQLException because I'll try to field, defined as 
LONGVARCHAR but I'm actually reading it as BINARY.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

105
HyperSQL Database Engine (HSQLDB) / Bugs / #105 SELECT -- an invisible value?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've encountered a strange behavior of hsqldb, first 
in the RC3, but I didn't pay attention to it then. Now 
with the hsqldb 1.7.0RC4a, I have to face it again and 
I believe, it's a bug.
I have a table Hierarchy with a column named Path. One 
of the rows in this table has Path='/intranet'. When I 
execute the following query:
SELECT * FROM Hierarchy WHERE Path='/intranet'
I get an empty result set.
However, when I use the LIKE clause:
SELECT * FROM Hierarchy WHERE Path LIKE '/intranet%'
I get really all the paths beginning with '/intranet', 
including the '/intranet' one.
It seems like the string '/intranet' would have added 
some invisible character(s) in the end, but this can't 
be the case, bacause of the result of the following 
query:
SELECT LENGTH(Path) FROM Hierarchy WHERE Path 
LIKE '/intranet%'
which is 9 for '/intranet'.
Please, consider the possible sources of this. I can 
send the database on demand (I don't wanna to send it 
here to public).
Thanks
Martin Stepanek
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

106
HyperSQL Database Engine (HSQLDB) / Bugs / #106 Subselect error with same column names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This was sent to me by David Moles and applies to 1.61 
and to all RC releases of 1.7.0 up to RC4. (has not 
yet been fixed):
I discovered another interesting quirk. Say I have the
following two tables:
create table trees
(
id integer primary key,
name varchar not null
);
create table fruits
(
id integer primary key,
name varchar not null,
tree_id integer not null,
foreign key (tree_id) references trees(id)
);
And say further that I have the following records:
insert into trees (id, name) values (1, 'apple');
insert into fruits (id, name, tree_id) values 
(1, 'pippin', 1);
insert into fruits (id, name, tree_id) values 
(2, 'granny smith, 1);
If I do the following query:
select id from fruits where tree_id in
(select id from trees where name = 'apple');
I get no records. But if I change it to:
select id from fruits where tree_id in
(select id from trees where trees.name = 'apple');
It works, and I get 2 records, same as if I just id
select id from fruits where tree_id = 1;
or even
select id from fruits where tree_id in (1);
Apparently, the problem is some kind of collision 
between fruits.name and trees.name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

107
HyperSQL Database Engine (HSQLDB) / Bugs / #107 Duplicate index names rejected
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have just downloaded hsqldb version 1.7rc4a. 
I notice that I may not create indexes with duplicate 
names. This behaviour is different to the previous 
version of hsqldb that I was using (1.6) where I could 
do just that. I am attempting to do this through the 
database manager application supplied.
So, the following will work in 1.6, but not in 1.7rc4a:
create table foo (col1 int)
create table bar (cola varchar)
create index ix1 on foo (col1)
create index ix1 on bar (cola)
The error message is:
Index already exists: S0011 Index already exists: IX1 
in statement [create index ix1 on bar(cola)]/Error 
Code: -23/State: S0011
Chris Cockrell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

108
HyperSQL Database Engine (HSQLDB) / Bugs / #108 Trouble with Jakarta Avalon Apps 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've tried to simply upgrade the jakarta avalon apps
from the 1.6 to the last release (1.7RC5pre2) and I'm
getting some troubles with the
HsqlSocketRequestHandler.handleConnection(socket);
It seems that the SocketHandler doesnt handle the
connection...
Here is a short synospis of the code:
m_DatabaseName =
&quot;C:\JabberServer\apps\avalon-hsql\JabberDB&quot;;
m_HsqlSocketRequestHandler =
HsqlServerFactory.createHsqlServer(m_DatabaseName,
true, false);
// I get the usual &quot;server.properties not found, using
command line or default properties&quot; ...
/// ... (avalon stuff here, to get a socket listener) ...
m_HypersonicSocketRequestHandler.handleConnection(socket);
When I use a client with server jdbc connection, the
connection process get thru the 'handleConnection' but
I get a &quot;Connection is broken&quot; in the demo/runManager.
Also when I use the demo/runServer with the runManager
its works.
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

109
HyperSQL Database Engine (HSQLDB) / Bugs / #109 Server mode &amp;  Access denied
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Good evening from France,
My web app opens a connection to an existing Hsqldb 
database (server mode, hsql protocol).
But when a query is executed, I get the 
SQLException &quot;Access denied&quot;. I don't understand why 
because I've kept &quot;sa&quot; as username and &quot;&quot; as password
bertrand
(rougierb@users)
NB : another class creates and fills the Hsql DB from 
Oracle but its execution is terminated before (and 
without error!)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

110
HyperSQL Database Engine (HSQLDB) / Bugs / #110 &quot;SELECT x.y AS z&quot; DOESNT WORK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Is there any reason why statements such as the 
following dont work properly?
SELECT CUSTOMER.NAME AS CNAME FROM CUSTOMER
The alias is completely ignored and the result is an 
error stating 'column CNAME not found'.
I cant find anything anywhere regarding this but i 
apolagise if i have missed something.
Regards,
Mark Raynes
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

111
HyperSQL Database Engine (HSQLDB) / Bugs / #111 select count(distinct field) .... 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following request doesn't work :
select count(distinct O.ID) as COUNT from (...)
What I get :
Unexpected token: 37000 Unexpected token: DISTINCT in 
statement [select count(distinct O.ID) as COUNT from 
(...)
bertrand
(rougierb@users.sourceforge.net)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

112
HyperSQL Database Engine (HSQLDB) / Bugs / #112 Join-syntax documentation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using 1.7rc4a.
1/ The syntax documentation reads that the pattern of 
a tablelist in a SELECT statement is tableList: 
table [ { INNER | LEFT [OUTER] } JOIN table ON 
Expression ] [, ...] 
I may be reading it wrong, but that seems to imply 
that the 'OUTER' is optional in 'LEFT OUTER JOIN', but 
that is not accepted when I try it. I find that
'INNER JOIN' and 'LEFT OUTER JOIN' only are accepted.
Also, the error message reads:
Unexpected token: 37000 Unexpected token: corrent 
syntax is: OUTER JOIN table ON....
but using OUTER on its own is also rejected, so that 
is a little misleading.
2/ I also got the impression (from the source) that 
brackets could be used around the expression , so that 
either
... LEFT OUTER JOIN table on ( col_a = col_b) OR
... LEFT OUTER JOIN table on col_a = col_b 
could were acceptable. In fact only the second 
(without brackets) is accepted.
3/ This is just a question - am I correct in thinking 
that hsqldb intentionally only supports expressions of 
the type 'col_a = col_b' when specifying the join 
expression? When I try 'col_a &gt; col_b', for instance, 
that is rejected. Also, it seems that only ONE join 
expression of the form: 'col_a = col_b' can be made, 
and that 'col_a = col_b AND col_c = col_d' is not 
allowed. Is that intentional?
Thanks for your help
Chris Cockrell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

113
HyperSQL Database Engine (HSQLDB) / Bugs / #113 compile errors for jdk1.1.8 with v170rc5
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
when compiling v170rc5pre2, I got an error concerning
SwingCommon.java which should not be compiled for jdk
1.1.8
So, I changed line 118 from
&lt;exclude name=&quot;*Swing.java&quot;/&gt;
to
&lt;exclude name=&quot;*Swing*.java&quot;/&gt;
to exclude SwingCommon.java from being compiled.
But I got some more errors later, see the messages
below.
Regards,
Ulrich
cd /home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/
ant
-Dbuffer=/home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml
-emacs jar -find
/home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml 
Searching for
/home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml
...
Buildfile:
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml
init:
javaversion:
prepare:
codeswitcher:
switchtojdk11:
..........
switchtojdk12:
switchtojdk14:
util:
Compiling 22 source files to
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/classes
Note: 3 files use deprecated APIs. Recompile with
&quot;-deprecation&quot; for details.
1 warning
classes12:
classes14:
classes:
Compiling 8 source files to
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/classes
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcConnection.java:1702:
class org.hsqldb.Map is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Map.java&quot;.
public Map getTypeMap() throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4432:
Class java.util.Map not found in type declaration.
public Object getObject(int i, java.util.Map map)
throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4468:
class org.hsqldb.Ref is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Ref.java&quot;.
public Ref getRef(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4501:
class org.hsqldb.Blob is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Blob.java&quot;.
public Blob getBlob(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4534:
class org.hsqldb.Clob is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Clob.java&quot;.
public Clob getClob(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4567:
class org.hsqldb.Array is defined in jdbcSystem.java.
Because it is used outside of its source file, it
should be defined in a file called &quot;Array.java&quot;.
public Array getArray(int i) throws SQLException {
^
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/src/org/hsqldb/jdbcResultSet.java:4613:
Class java.util.Map not found in java.lang.Object
getObject(java.lang.String, org.hsqldb.Map).
return getObject(findColumn(colName), map);
^
2 errors, 5 warnings
BUILD FAILED
//home/ulrivo/hypersonicsql/hsqldb170rc5pre2/build/build.xml:153:
Compile failed, messages should have been provided.
Total time: 16 seconds
Compilation exited abnormally with code 1 at Fri May 10
20:39:58
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

114
HyperSQL Database Engine (HSQLDB) / Bugs / #114 DELETE fails ArrayIndexOutOfBoundsEx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb 1.7.0 RC5
CLIENT (Servlet) STACK TRACE:
java.sql.SQLException: General error: S1000 General 
error java.lang.ArrayIndexOutOfBoundsException in 
statement [DELETE FROM ADDRESSBOOK_CATEGORY WHERE 
USER_ID = 0 AND CATEGORY_ID = 1 ]
at org.hsqldb.Trace.getError(Trace.java:220)
at org.hsqldb.Result.(Result.java:154)
at org.hsqldb.jdbcConnection.executeHSQL
(jdbcConnection.java:2809)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:2524)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1795)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:227)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(jdbcPreparedStatement.java:419)
(a record with the specified key exists)
SERVER STACK TRACE:
java.lang.ArrayIndexOutOfBoundsException
at org.hsqldb.Index.comparePartialRowNonUnique
(Index.java:940)
at org.hsqldb.Index.findSimple(Index.java:572)
at org.hsqldb.Constraint.findFkRef
(Constraint.java:434)
at org.hsqldb.Table.checkCascadeDelete
(Table.java:1430)
at org.hsqldb.Table.delete(Table.java:1489)
at org.hsqldb.Parser.processDelete
(Parser.java:470)
at org.hsqldb.Database.execute
(Database.java:438)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:211)
at java.lang.Thread.run(Thread.java:536)
Table defs:
CREATE TABLE USER (
USER_ID INTEGER NOT NULL,
LOGIN_ID VARCHAR(128) NOT NULL,
USER_NAME VARCHAR(254) DEFAULT ' ' NOT NULL,
// some fields omitted...
CREATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
UPDATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
LAST_ACCESS_DATE TIMESTAMP,
CONSTRAINT ixuq_LOGIN_ID0 UNIQUE (LOGIN_ID),
PRIMARY KEY (USER_ID)
);
CREATE TABLE ADDRESSBOOK_CATEGORY (
USER_ID INTEGER NOT NULL,
CATEGORY_ID INTEGER DEFAULT '0' NOT NULL,
CATEGORY_NAME VARCHAR(60) DEFAULT '' NOT NULL,
PRIMARY KEY (USER_ID, CATEGORY_ID),
CONSTRAINT fk_ADRBKCAT1 FOREIGN KEY (USER_ID)
REFERENCES USER (USER_ID) ON DELETE CASCADE
);
CREATE TABLE ADDRESSBOOK (
USER_ID INTEGER NOT NULL,
ADDRESSBOOK_ID INTEGER NOT NULL,
CATEGORY_ID INTEGER DEFAULT '0' NOT NULL,
FIRST VARCHAR(64) DEFAULT '' NOT NULL,
LAST VARCHAR(64) DEFAULT '' NOT NULL,
// some fields omitted
NOTE VARCHAR(128) DEFAULT '' NOT NULL,
PRIMARY KEY (USER_ID, ADDRESSBOOK_ID),
CONSTRAINT fk_ADRBOOK1 FOREIGN KEY (USER_ID, 
CATEGORY_ID)
REFERENCES ADDRESSBOOK_CATEGORY 
(USER_ID, CATEGORY_ID) ON DELETE CASCADE
);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

115
HyperSQL Database Engine (HSQLDB) / Bugs / #115 ALTER TABLE ADD COLUMN modifies indexes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The ALTER TABLE ADD COLUMN command seems to be 
modifying the definition of existing indexes on the 
table.
For example, create a table and an index:
CREATE CACHED TABLE TEST (PK BIGINT NOT NULL PRIMARY 
KEY, F1 INTEGER)
CREATE INDEX TESTF1 ON TEST(F1)
Then, add a column:
ALTER TABLE TEST ADD COLUMN F2 TIMESTAMP
Now, the definition of the index includes both 
columns F1 and PK.
If another column is added, PK is added to the index 
again:
ALTER TABLE TEST ADD COLUMN F3 VARCHAR(255)
Now, the index definition is TEST(F1, PK, PK). This 
results in an invalid index definition and the 
database cannot be opened.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

116
HyperSQL Database Engine (HSQLDB) / Bugs / #116 Swing - DatabaseManager &amp; Transfer Tool
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I could not get either the DataBaseManagerSwing or 
TransferSwing to work from the 1.70RC5 distribution 
jar file. I traced it down to the loading of the icon 
image in both classes. After commenting out the 
getIcon method call and rebuilding the jar, they both 
worked. The gif image in the distribution is also no 
good. I couldn't load it into any graphics program.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

117
HyperSQL Database Engine (HSQLDB) / Bugs / #117 Text Tables - 1.70 RC5
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've spent several hours debugging text table support 
in the 1.70 RC5 distribution. I was trying to create 
a temporary text table with the following statements:
create temp text table ImportTemp (f1 varchar, f2, 
varchar, f3 varchar)
set table ImportTemp source &quot;c:/temp/app/import.csv&quot;
When the set table statement was executed, it returned 
the following SLQException:
java.sql.SQLException: Table not found: S0002 Table 
not found in statement [set table ImportTemp 
source &quot;C:/temp/app/import.csv&quot;]
By removing &quot;temp&quot; from the create staement, all 
worked well.
I also noticed that after dropping the table and doing 
a shutdown compact, the &quot;csv&quot; file was deleted from 
it's directory. I'm not sure what the rationale for 
this behavior might be. If this is the planned 
default behavior, I would like to see a database 
property where it could be turned off, much like the 
property for setting the absolute path to the text 
files (i.e. not in the same folder as the database).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

118
HyperSQL Database Engine (HSQLDB) / Bugs / #118 Error in creating text table with PK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With hsqldb-rc5, I tried the following statement
(trying the text table functionality)
CREATE TEXT TABLE B (id integer not null primary key, 
name varchar)
And this gave the following error :
Attempt to define a second primary key: S0011 Attempt 
to define a second primary key in statement [CREATE 
TEXT TABLE B (id integer not null primary key, name 
varchar)] / Error Code: -24 / State: S0011 
When I omit the 'TEXT' keyword it works fine.
Alexander
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

119
HyperSQL Database Engine (HSQLDB) / Bugs / #119 ByteArray needs to be Serializable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example:
stmt.executeUpdate(
&quot;CREATE MEMORY TABLE y (a VARCHAR, b OBJECT)&quot;);
PreparedStatement ps = conn.prepareStatement(
&quot;INSERT INTO y VALUES (?, ?)&quot;);
ps.setString(1,&quot;key1&quot;);
ps.setObject(2, new Integer(1), Types.OTHER);
ps.executeUpdate();
This fails because ByteArray does not implement 
java.io.Serializable. Making ByteArray implement 
Serializable does seem to solve the problem, at least 
for the example above.
Otherwise a *nifty* tool.
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

120
HyperSQL Database Engine (HSQLDB) / Bugs / #120 backslash not escaped in script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Try this: Write this string to any table with varchar
&quot;\á&quot;
Note the backslash and the icelandic á character
(ascii E1)
This is what gets written in the script file:
'\\u00e1'
Stop the program and restart it
The script file now contains:
'\\u005cu00e1'
And everytime you start the program another u005c 
gets appended.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

121
HyperSQL Database Engine (HSQLDB) / Bugs / #121 functions, operators fail in create view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
You probably know, but ...
your new implementation of views (RC5C) does
not support caluclated column values.
That is (assuming persons) ...
create view xxx as select pid, pid + 10 from persons
results in error:
SQL Error 
---------
Table not found: S0002 Table not found: in statement 
[create view xxx as select pid, pid + 10 from 
persons] / Error Code: -22 / State: S0002 
1 row(s) in 10 ms
This seems to be a parsing error where there is 
anything present in the select clause except columns
from the referenced tables.
Is what you plan for the 1st view implementation?
Thanks,
Joe
------------------------------------
CREATE TABLE PERSONS(PID INTEGER PRIMARY KEY,MOTHER 
INTEGER,FATHER INTEGER,LNAME VARCHAR,FNAME 
VARCHAR,MNAME VARCHAR,ONAME VARCHAR,OCHAR 
VARCHAR,ANAME VARCHAR,SEX CHAR,BORN TIMESTAMP,DIED 
TIMESTAMP,NICKNAME VARCHAR,MOBIL VARCHAR,EMAIL 
VARCHAR,OID INTEGER)
INSERT INTO PERSONS VALUES
(34,41,42,'Haggerty','Thomas','Eugene',NULL,NULL,'Hagge
rty','M','1875-01-01 
00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(35,41,42,'Haggerty','Edward','Charles',NULL,NULL,'Hagg
erty','M','1872-01-01 
00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(38,41,42,'Haggerty','Francis','Joseph',NULL,NULL,'Hagg
erty','M','1870-01-01 
00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(39,41,42,'Haggerty','William','R.',NULL,NULL,'Haggerty
','M','1868-01-01 00:00:00.0',NULL,NULL,NULL,NULL,71)
INSERT INTO PERSONS VALUES
(40,41,42,'Hassett','Katherine',NULL,NULL,NULL,'Haggert
y','F','1854-01-01 00:00:00.0',NULL,NULL,NULL,NULL,71)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

122
HyperSQL Database Engine (HSQLDB) / Bugs / #122 LEFT OUTER JOIN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Following is a bug report for a bug that happens on 
hsqldb 1.7.0 RC5c but no problem on hsql1.6.1
I have two tables defined as folows:
create CACHED table prod (
id int not null,
name varchar(200) not null,
price numeric(18,2) not null,
group_id int not null
);
create unique index prod_pk on prod ( id );
create CACHED table prod_detail (
id  int not null,
prod_id int not null,
name varchar(200) not null
);
create unique index prod_detail_pk on prod_detail ( 
id );
For hsqldb version 1_7_0_RC5c 
When I did a qury as
SELECT 
prod.id,prod.name,prod.price,prod.group_id,prod_detail.
id FROM prod LEFT OUTER JOIN prod_detail ON
(prod.id=prod_detail.prod_id) WHERE prod.id = 4
I got an error message as
java.sql.SQLException: Unexpected token: 37000 
Unexpected token: correct syntax is: OUTER JOIN table 
ON table.col=tab2.col in statement [SELECT 
prod.id,prod.name,prod.price,prod.group_id,prod_detail.
id FROM prod LEFT OUTER JOIN prod_detail ON
(prod.id=prod_detail.prod_id) WHERE prod.id = 4]
It works fine for hsqldb version 1.6.1
This query is automatically generated by Castor (A 
Object to Relation DB mapping tool) in its 
examples/jdo/Test.java.
Anyway You have done a greate job on the hsqldb 
project. Thanks a lot.
hl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

123
HyperSQL Database Engine (HSQLDB) / Bugs / #123 org.hsqldb.DatabaseInformation.getSystem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm working on migrating my MS access database to 
hsql with JBuilder 5 but when I get this error
when I try to run the code hsql-1.7.0.rc5:
$ java.lang.NullPointerException
at 
org.hsqldb.DatabaseInformation.getSystemTable
(DatabaseInformation.jav
a:516)
at org.hsqldb.Database.getTable
(Database.java:629)
at org.hsqldb.Parser.parseTableFilter
(Parser.java:1141)
at org.hsqldb.Parser.parseSelect
(Parser.java:872)
at org.hsqldb.Parser.processSelect
(Parser.java:132)
at org.hsqldb.Database.execute
(Database.java:426)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:211)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

124
HyperSQL Database Engine (HSQLDB) / Bugs / #124 Total Loss of Data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There appears to be a spontaneous re-intitialization of 
the .script file Still occuring :(
I'm getting a 
*** java.sql.SQLException: User not found: ***
exception on an increasingly regular basis.
When I check the .script file, the data itself is gone, 
leaving the CREAT ALIAS stuff.
I haven't been able to force this error to occur; either 
locally or on mycgiserver.
Anybody else had this problem again lately?
Any comments most welcome
Cheers - Stan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

125
HyperSQL Database Engine (HSQLDB) / Bugs / #125 SELECT LIMIT 0 10 * INTO ....
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When you do a statement like &quot;SELECT LIMIT 0 10 * 
INTO newtable FROM oldtable where blah blah&quot; it 
ignores the limit clause and adds all records that meet 
the blah blah caluse instead of limiting them like it 
should.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

126
HyperSQL Database Engine (HSQLDB) / Bugs / #126 &quot;SELECT * INTO&quot; not writing CREATE TABLE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just noticed that in the newest version it doesn't write 
the CREATE TABLE entry on a SELECT * INTO
Here's the code that it wrote in the .script file
INSERT INTO ESG_CONCEPTS VALUES(52,20118)
/*C1*/CONNECT USER sa PASSWORD &quot;&quot;
drop table ESG_CONCEPTS
/*C2*/CONNECT USER sa PASSWORD &quot;&quot;
INSERT INTO ESG_CONCEPTS VALUES(34,20118)
I drop the table using:
drop table ESG_CONCEPTS
Then I create the new table using
select CS.CONCEPTID, CS.SENTENCETEXTID into 
ESG_CONCEPTS from CONCEPT_SENTENCE CS 
where CS.CONCEPTID in 
(34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,
58)
and it write the above code, but it should write:
INSERT INTO ESG_CONCEPTS VALUES(52,20118)
/*C1*/CONNECT USER sa PASSWORD &quot;&quot;
drop table ESG_CONCEPTS
CREATE TABLE ESG_CONCEPTS(CONCEPTID 
INTEGER,SENTENCETEXTID INTEGER)
/*C2*/CONNECT USER sa PASSWORD &quot;&quot;
INSERT INTO ESG_CONCEPTS VALUES(34,20118)
because it freaks out when ESG_CONCEPTS doesn't 
exist.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

127
HyperSQL Database Engine (HSQLDB) / Bugs / #127 NullPointerException when using IN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
You guys should love me for this. I made a nice 
simple test case and everything.
create table test1 (id int not null, testa varchar);
create table test2 (t1id int not null, testb varchar);
insert into test1 (id, testa) values (1, '1');
insert into test2 (t1id, testb) values (1, null);
select distinct testa, testb from test1 t1 left join 
test2 t2 on t1.testa = t2.testb where t2.testb in 
( '0', '1' );
-mike
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

128
HyperSQL Database Engine (HSQLDB) / Bugs / #128 jdbc primary key query failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use the version hsqldb_1_7_0_RC5c
The error arises, if I query over jdbc the primarykeys of a 
table;
The same if i try it with the dababase manager
select * from system_primarykeys
The origin is the line 515 in the file DababaseInformation
it returns a null
Index index = table.getIndex(&quot;SYSTEM_PK&quot;);
And following line failed with null pointer exception
int cols[] = index.getColumns();
java.lang.NullPointerException
at org.hsqldb.DatabaseInformation.getSystemTable
(DatabaseInformation.java:516)
at org.hsqldb.Database.getTable
(Database.java:629)
at org.hsqldb.Parser.parseTableFilter
(Parser.java:1141)
at org.hsqldb.Parser.parseSelect(Parser.java:872)
at org.hsqldb.Parser.processSelect
(Parser.java:132)
at org.hsqldb.Database.execute(Database.java:426)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:211)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

129
HyperSQL Database Engine (HSQLDB) / Bugs / #129 Errror when creating table with UNIQUE a
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following schema raise 37000 Unexpected 
token...error:
CREATE CACHED TABLE amov (
primkey CHAR (10) NOT NULL ,
cod CHAR (1) ,
type CHAR (1) ,
pgdir VARCHAR (255) ,
pgname VARCHAR (255) ,
dirname VARCHAR (255) ,
filename VARCHAR (255),
dname VARCHAR (5) ,
mountext VARCHAR (255) ,
UNIQUE(primkey));
CREATE CACHED TABLE lickey (
primkey CHAR (10) NOT NULL ,
originkey CHAR (10) NOT NULL ,
type CHAR (1) NOT NULL ,
release CHAR (1) NOT NULL,
version CHAR (1) ,
name CHAR (40) ,
firstname CHAR (30) ,
globalkey VARCHAR (30) NOT NULL UNIQUE,
UNIQUE (primkey));
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

130
HyperSQL Database Engine (HSQLDB) / Bugs / #130 quoting problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Quoting in SQL statements is somewhat
buggy. I believe that the user should be able to
single-quote 
any table name or file name to escape munging/normalizing,
but several times I
have had to settle with the munged entity name because
hsqldb can't find out where a quoted string begins and
ends. Examples:
create table 't3' (i1 int, c1 varchar) 
Unexpected token: 37000 Unexpectred token: 't3 in
statement... 
set table t2 source 't2.csv' 
beyla$ ls
't2.csv T2.TXT db1.data db1.properties db1.script
beyla$ 
Notice that in the first sample I did not type 't3, I
typed 't3'; and in the second, the database created the
file &quot;'t2.csv&quot; instead of &quot;t2.csv&quot;.
I do not know if this is an engine problem. That's just my
first guess. If nobody else jumps in, I'll troubleshoot it
farther and/or make a fix once I make some headway with
my other hsqldb work.
Problem experience with 1.7.0rc5.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

131
HyperSQL Database Engine (HSQLDB) / Bugs / #131 Ungraceful In-Memory Text Table File err
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With in-memory database:
SET TABLE mynewtable SOURCE filename.csv
General error: S1000 General error
java.lang.NullopinterException in statement [SET ...
Error Code -40
Trace shows:
java.lang.NullPointerException
at
org.hsqldb.Database$Logger.openTextCache(Database.java:2777)
at
org.hsqldb.TextTable.openCache(TextTable.java:80)
at
org.hsqldb.TextTable.setDataSource(TextTable.java:162)
at
org.hsqldb.Database.processSet(Database.java:2114)
at org.hsqldb.Database.execute(Database.java:446)
at
org.hsqldb.jdbcConnection.executeStandalone(jdbcConnection.java:2915)
at
org.hsqldb.jdbcConnection.execute(jdbcConnection.java:2504)
at
org.hsqldb.jdbcStatement.fetchResult(jdbcStatement.java:1777)
at
org.hsqldb.jdbcStatement.execute(jdbcStatement.java:728)
at
org.hsqldb.util.DatabaseManager.execute(DatabaseManager.java:725)
at
org.hsqldb.util.DatabaseManager.actionPerformed(DatabaseManager.java:453)
at
java.awt.Button.processActionEvent(Button.java:381)
at java.awt.Button.processEvent(Button.java:350)
at
java.awt.Component.dispatchEventImpl(Component.java:3526)
at
java.awt.Component.dispatchEvent(Component.java:3367)
at
java.awt.EventQueue.dispatchEvent(EventQueue.java:445)
at
java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:190)
at
java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:144)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:130)
at
java.awt.EventDispatchThread.run(EventDispatchThread.java:98)
I do realize that trying to set a file path with an
in-memory 
DB engine is a bad thing to do. I'm just suggesting
that IMO some checking should be done to prevent
misleading 
runtime errors like this.
1.7.0rc5
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

132
HyperSQL Database Engine (HSQLDB) / Bugs / #132 doc errors in TextTables.html
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I come to these opinions empirically. I've verified
that WRT
1.7.0rc5, the following statements are wrong.
SET TABLE SOURCE &lt;&quot;file&quot;&gt; {DESC}
The table name must appear between &quot;TABLE&quot; and
&quot;SOURCE&quot;.
SELECT &lt;&gt; INTO TEXT TABLE &lt;tablename&gt;
The command fails if you use the keyword &quot;TABLE&quot;.
In addition, a SET command specifies the file and the
separator character that the Text table uses:
SET TABLE SOURCE &lt;&quot;file&quot;&gt; {DESC}
This is not &quot;wrong&quot;, just incomplete. I GUESS that &quot;DESC&quot; 
stands for description, but I have no clue how to set the
delimiter character(s).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

133
HyperSQL Database Engine (HSQLDB) / Bugs / #133 minor doc error in hSqlSyntax.html
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The file says
The types on the same line are equivalent
and VARCHAR_IGNORECASE and VARCHAR are on the
same line. A few lines latter the document says
VARCHAR_IGNORECASE is a special case-insensitive 
type of VARCHAR.
Are VARCHAR and LONGVARCHAR equivalent in hsqldb?
(According to hSqlSyntax.html they are different).
In any case, for hsqldb-specific stuff (like custom
datatype
such as VARCHAR_IGNORECASE, and size limitations) it
would be good to give the users enough information to make
use of the types.
I notice that VARCHAR_IGNORECASE does not store case-
insensitive data, as one could imply by the name, but that
the behavior of some test expressions (at least) is
altered.
No problem with that, as long as it is disclosed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

134
HyperSQL Database Engine (HSQLDB) / Bugs / #134 Tools throw null ptr ex if disconnected
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Both DatabaseManager and QueryTool will give a null 
pointer trace stack upon exiting the programs if the user
happens to have given the SQL command &quot;disconnect&quot;.
java.lang.NullPointerException
at org.hsqldb.Session.checkAdmin(Session.java:230)
at
org.hsqldb.Database.processShutdown(Database.java:2285)
at org.hsqldb.Database.execute(Database.java:500)
at
org.hsqldb.jdbcConnection.executeStandalone(jdbcConnection.java:2915)
at
org.hsqldb.jdbcConnection.execute(jdbcConnection.java:2504)
at
org.hsqldb.jdbcConnection.closeStandalone(jdbcConnection.java:2873)
at
org.hsqldb.jdbcConnection.close(jdbcConnection.java:1040)
at
org.hsqldb.util.QueryTool.windowClosing(QueryTool.java:602)
at
org.hsqldb.util.QueryTool.actionPerformed(QueryTool.java:647)
at
java.awt.MenuItem.processActionEvent(MenuItem.java:588)
at
java.awt.MenuItem.processEvent(MenuItem.java:548)
at
java.awt.MenuComponent.dispatchEventImpl(MenuComponent.java:285)
at
java.awt.MenuComponent.dispatchEvent(MenuComponent.java:273)
at
java.awt.MenuComponent.dispatchEventImpl(MenuComponent.java:288)
at
java.awt.MenuComponent.dispatchEvent(MenuComponent.java:273)
at
java.awt.EventQueue.dispatchEvent(EventQueue.java:447)
at
java.awt.EventDispatchThread.pumpOneEventForHierarchy(EventDispatchThread.java:190)
at
java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:144)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:138)
at
java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:130)
at
java.awt.EventDispatchThread.run(EventDispatchThread.java:98)
SQLException: SQLState(S1000) vendor code(-40)
1.7.0rc5. Standalone engine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

135
HyperSQL Database Engine (HSQLDB) / Bugs / #135 Buggy getImportedKeys
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First, thanks for a great product!
I saw that there is now finally better metadata support in 
hsqldb_1_7_0_RC6c:
http://sourceforge.net/tracker/index.php?
func=detail&amp;aid=556366&amp;group_id=23316&amp;atid=378134
However, it seems the implementation is buggy. I have 
three tables:
CREATE TABLE persons(
person_id INT NOT NULL,
first_name VARCHAR(32) NOT NULL,
last_name VARCHAR(32) NOT NULL,
PRIMARY KEY( person_id )
) TYPE=INNODB;
CREATE TABLE flights(
flight_id INT NOT NULL,
name VARCHAR(32) NOT NULL,
departure_utc DATETIME NOT NULL,
arrival_utc DATETIME NOT NULL,
PRIMARY KEY( flight_id )
) TYPE=INNODB;
CREATE TABLE reservations(
reservation_id INT NOT NULL,
person_id_fk INT NOT NULL,
flight_id_fk INT NOT NULL,
registration_utc DATETIME NOT NULL,
comment TEXT,
PRIMARY KEY(reservation_id,person_id_fk,flight_id_fk),
INDEX person_ind(person_id_fk),
INDEX flight_ind(flight_id_fk),
FOREIGN KEY (person_id_fk) REFERENCES persons
(person_id),
FOREIGN KEY (flight_id_fk) REFERENCES flights
(flight_id)
) TYPE=INNODB;
When I call getImportedKeys on the reservations table, I 
get an empty resultset. If I call getImportedKeys on the 
flights table, I get a resultset with one row. (the same 
happens for flights).
I'm quite sure this is wrong. A correct implementation of 
getImportedKeys would do the opposite. There should 
be a resultset with two rows for reservations and an 
empty resultset for persons and flights. (At least that's 
what all other drivers I've seen do).
Aslak
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

136
HyperSQL Database Engine (HSQLDB) / Bugs / #136 cannot create table with DEFAULT values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The create script below worked with 
1.7.0RC5 but not with 1.7.0 RC6c
java.sql.SQLException: 
Wrong data type or data too long in DEFAULT 
clause: 37000 Wrong data type or data too long 
in DEFAULT clause: - in statement [
CREATE TABLE MAIL_USER(
USER_ID INTEGER NOT NULL PRIMARY KEY,
LOGIN_ID VARCHAR(128) NOT NULL,
IMAP_USER_ID VARCHAR(254) NOT NULL,
IMAP_PASSWORD VARCHAR(100) NOT NULL,
USER_NAME VARCHAR(254) DEFAULT ' ' NOT 
NULL,
REPLY_TO VARCHAR(254),
LOCALE VARCHAR(40) DEFAULT 'en' NOT 
NULL,
FOOTER VARCHAR(200),
REPLY_LINE_PREFIX VARCHAR(20) 
DEFAULT '&gt; ' NOT NULL,
SHOW_FULL_HEADERS CHAR(1) DEFAULT 'N' 
NOT NULL,
PREF_ITEMCOUNT_PER_PAGE INTEGER 
DEFAULT 30 NOT NULL,
PREF_ADDRESSCOUNT_PER_PAGE INTEGER 
DEFAULT 20 NOT NULL,
PREF_USERCOUNT_PER_PAGE INTEGER 
DEFAULT 30 NOT NULL,
PREF_ADDRESS_CATEGORY INTEGER 
DEFAULT -1 NOT NULL,
PREF_SEND_CHARSET VARCHAR(30),
PREF_ATTACHMENTS_PER_MAIL INTEGER 
DEFAULT 3 NOT NULL,
PREF_SAVE_COPY_TO_SENT CHAR(1) 
DEFAULT 'Y' NOT NULL,
CREATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
UPDATE_DATE TIMESTAMP 
DEFAULT 'CURRENT_TIMESTAMP' NOT NULL,
LAST_ACCESS_DATE TIMESTAMP,
CONSTRAINT IXUQ_LOGIN_ID0 UNIQUE
(LOGIN_ID)
)
]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

137
HyperSQL Database Engine (HSQLDB) / Bugs / #137 script corrupt: negative DEFAULT values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL 1.7.0 RC5, RC6c
(this bug is related to bug 565189)
A table column with a negative default value
will cause the .script file to be unusable:
negative integer or double values are written to
the .script file *without* quotes. After a 
shutdown of the database, the .script file cannot
be parsed anymore.
eg. This will corrupt the .script file:
DROP TABLE QUOTED IF EXISTS;
CREATE CACHED TABLE QUOTED (
COL_NEGATIVE INTEGER DEFAULT '-1' NOT NULL
)
-- not stop the database and reconnect: 
gives error &quot;37000 Wrong data type or data too long in 
DEFAULT clause&quot;
I believe the root cause lies with the Tokenizer
class. Instead of treating every single '-' character
as a SPECIAL, maybe only a sequence of two '-'
characters are SPECIAL (a line comment)?
Or a '-' character followed by a numeric character
could be parsed as being part of a numeric value?
I am not sure if this would be correct (I'm not sure
if line comments are the only reason why
'-' characters are SPECIALS)
Instead of fixing the Tokenizer class, how about
patching the DatabaseScript class to surround
*all* DEFAULT values with quotes? (See below)
Or would that cause other problems?
---------
org/hsqldb/DatabaseScript.java
line
399 if (column.getDefaultString() != null) {
400 a.append(&quot; DEFAULT &quot;);
401 a.append(Column.createSQLString
(column.getDefaultString(),
402 column.getType()));
403 }
patch:
if (column.getDefaultString() != null) {
a.append(&quot; DEFAULT &quot;);
String value = Column.createSQLString(
column.getDefaultString(), column.getType
());
if (!value.startsWith(&quot;'&quot;)) {
a.append('\'');
}
a.append(value);
if (!value.endsWith(&quot;'&quot;)) {
a.append('\'');
}
}
-----------
I've attached a JUnit test that identifies the
problem. The test fails with RC5 and RC6c.
The test works after applying the patch.
You can run the test inside JUnit or standalone with
java -cp .;hsqldb.jar;junit.jar 
org.hsqldb.test.TestGrammarKeywordDefault
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

138
HyperSQL Database Engine (HSQLDB) / Bugs / #138 cannot compile the db
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When compiling with jdk1.4 the compiler gives the 
following error:
C:\Program Files\hsql\hsqldb_v.1.61\src&gt;javac -O -
classpath ;.;..\lib *.java org
\hsqldb\*.java org\hsqldb\util\*.java
org\hsqldb\Cache.java:382: warning: as of release 1.4, 
assert is a keyword, and
may not be used as an identifier
Trace.assert(!r.bChanged);
^
org\hsqldb\Channel.java:319: warning: as of release 1.4, 
assert is a keyword, an
d may not be used as an identifier
Trace.assert(!
bNestedTransaction, &quot;beginNestedTransaction&quot;);
^
org\hsqldb\Channel.java:338: warning: as of release 1.4, 
assert is a keyword, an
d may not be used as an identifier
Trace.assert
(bNestedTransaction, &quot;endNestedTransaction&quot;);
^
org\hsqldb\Constraint.java:98: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(cmain.length == cref.length);
^
org\hsqldb\Constraint.java:172: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(false, &quot;could not replace&quot;);
^
org\hsqldb\Database.java:236: warning: as of release 
1.4, assert is a keyword, a
nd may not be used as an identifier
Trace.assert(!channel.isNestedTransaction());
^
org\hsqldb\Expression.java:640: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(false, &quot;Expression.swapCondition&quot;);
^
org\hsqldb\Expression.java:845: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(eArg2 == null, &quot;Expression.test&quot;);
^
org\hsqldb\Expression.java:906: warning: as of release 
1.4, assert is a keyword,
and may not be used as an identifier
Trace.assert(false, &quot;Expression.test2&quot;);
^
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

139
HyperSQL Database Engine (HSQLDB) / Bugs / #139 SELECT MAX(ID) not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi !
I tested the latest version: HypersonicSQL 1.7.0 RC6
with this piece of code (which works with hsqldb_v.1.61 )
ResultSet rs = stat.executeQuery(&quot;SELECT MAX(ID) 
FROM cdType&quot;);
if(rs.next()){
maxCDTypesID = rs.getInt(1);
}
It gives -1 all the time (it returns &gt;0 with the other 
version)
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

140
HyperSQL Database Engine (HSQLDB) / Bugs / #140 Problems under Linux and different JDK's
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I had this exception on linux only (it's ok on windows os):
java.sql.SQLException: General error: S1000 General 
error java.lang.NullPointerException in statement 
[INSERT INTO jahia_filemgr_files(id_jahia_file, 
filemgrid_jahia_file, fldid_jahia_file, uploaduser_jahia_file, 
pageid_jahia_file, is_public_jahia_file, 
realname_jahia_file, storagename_jahia_file, 
lastmodifdate_jahia_file, size_jahia_file, type_jahia_file, 
title_jahia_file, descr_jahia_file) VALUES(1, 1, 
1, 'siteadmin:1', 1, 
1, 'JahiaAdministrationGuide.pdf', 'FILEB81ZEWo2Z1Jahi
aAdministrationGuide.pdf', 1021543854000, 
913397, 'application/pdf', '', '')]
I think that there is a limit for the instruction size, 
because there is no problems with instruction 
INSERT INTO jahia_filemgr_files VALUES(1, 1, 
1, 'siteadmin:1', 1, 
1, 'JahiaAdministrationGuide.pdf', 'FILEB81ZEWo2Z1Jahi
aAdministrationGuide.pdf', 1021543854000, 
913397, 'application/pdf', '', '')
For you info, the structure of this table is 
CREATE TABLE jahia_filemgr_files(id_jahia_file 
INTEGER,filemgrid_jahia_file INTEGER,fldid_jahia_file 
INTEGER,uploaduser_jahia_file 
VARCHAR,pageid_jahia_file 
INTEGER,is_public_jahia_file 
INTEGER,realname_jahia_file 
VARCHAR,storagename_jahia_file 
VARCHAR,lastmodifdate_jahia_file 
BIGINT,size_jahia_file BIGINT,type_jahia_file 
VARCHAR,title_jahia_file VARCHAR,descr_jahia_file 
VARCHAR)
Cheers,
Philippe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

141
HyperSQL Database Engine (HSQLDB) / Bugs / #141 JSDK 1.4 Compliance
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As some may have noticed, HSQLDB wont compile on 
JSDK1.4. This should be easy to fix as only a few 
methods are added to driver. I am also getting lots of 
deprecation warnings - the methods with deprecated 
tags are used in the code itself!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

142
HyperSQL Database Engine (HSQLDB) / Bugs / #142 calculated values for substr etc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
In 170rc6g ... Statemets like:
select substr(dbname,1,length(dbname)-1), * from sets
produce:
This function is not supported: IM001 This function is not 
supported: org.hsqldb.Library.substring: 
java.lang.IllegalArgumentException: argument type 
mismatch in statement [select substr(dbname,1,length
(dbname)-1), * from sets] / Error Code: -20 / State: 
IM001 
This seems to stem from the fact that the substring
and other functions are looking for Integer and
that was not passed ... or top level did not reduce
to Integer.
Thanks,
Joe
p.s. sets was:
CREATE TEXT TABLE SETS(SET CHAR,ATTRIBUTE 
CHAR,SEQ INTEGER,DBNAME CHAR,DBTYPE 
CHAR,DBATTRIB CHAR,REFTYPE CHAR)
SET TABLE SETS 
SOURCE &quot;sets.csv;ignore_first=true;quoted=true&quot;
SET TABLE SETS INDEX '0 0'
Set,Attribute,Seq,DBName,DBType,DBAttrib,RefType
Meals,Meal ID,1,MID,int,identity,pk
Meals,Meal Name,2,Name,char(64),not null,
Meals,Type of Meal,3,MealType,int,not null,fk
Meals,Author,4,AID,int,not null,fk
Meals,Description of Meal,5,Description,longvarchar,,
Meals,Reference/Version Date ,6,AsOf,date,,
Meals,PK,7,MID,,,
MealCourseDishes,Meal ID,1,MID,int,not null,&quot;pk, fk&quot;
MealCourseDishes,Course,2,CID,int,not null,&quot;pk, fk&quot;
MealCourseDishes,Recipe ID,3,RID,int,not null,&quot;pk, fk&quot;
MealCourseDishes,PK,4,&quot;MID, CID, RID&quot;,,,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

143
HyperSQL Database Engine (HSQLDB) / Bugs / #143 Missing things for views
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi again,
During our testing we noted:
Views show in SYSTEM_TABLES as tables
and there is no ALTER VIEW xxx RENAME to yyy
Joe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

144
HyperSQL Database Engine (HSQLDB) / Bugs / #144 timestamp bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It seems that timestamp columns still have 
problems.
In version 1.7.1RC6 I did the following:
- create table t (name varchar, time timestamp)
- instert into t values('a', 2002-12-23)
-&gt; generates a date but not the correct one
as I saw, the parser does not recognize that this 
is a date format
- instert into t values('a', 2002-12-23 12:00:00.00)
-&gt; throws an exception
This problem was reported earlier in
http://sourceforge.net/tracker/index.php?
func=detail&amp;aid=423114&amp;group_id=23316&amp;atid=3
78131
he also fixed the source! But it still is not in the 
current version :(((
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

145
HyperSQL Database Engine (HSQLDB) / Bugs / #145 NT -Database is already in use
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I have more than one process accessing the 
database I get the following error.
The stackTrace is 
ERROR - Failed to get JDBC connection
java.sql.SQLException: The database is already in use 
by another process
at org.hsqldb.Trace.getError(Trace.java:225)
at org.hsqldb.Trace.error(Trace.java:276)
at org.hsqldb.Log.open(Log.java:290)
at org.hsqldb.Database$Logger.openLog
(Database.java:2603)
at org.hsqldb.Database.&lt;init&gt;(Database.java:203)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:2849)
at org.hsqldb.jdbcConnection.&lt;init&gt;
(jdbcConnection.java:2428)
at org.hsqldb.jdbcDriver.connect(jdbcDriver.java:176)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at com.prismt.jdbc.a.l(Unknown Source)
at com.prismt.util.v.h(Unknown Source)
at com.prismt.util.v.g(Unknown Source)
at com.prismt.jdbc.a.s(Unknown Source)
at com.prismt.jdbc.c.getPooledConnection(Unknown 
Source)
at 
com.prismt.j2ee.connector.jdbc.ManagedConnectionImpl
.for(Unknown Source)
at 
com.prismt.j2ee.connector.jdbc.ManagedConnectionImpl
.new(Unknown Source)
at 
com.prismt.j2ee.connector.jdbc.ManagedConnectionImpl
.getConnection(Unknown Source)
at com.prismt.j2ee.connector.jdbc.g.allocateConnection
(Unknown Source)
at 
com.prismt.j2ee.connector.jdbc.ConnectionFactoryImpl.g
etConnection(Unknown Source)
at com.prismt.jdbc.Database.case(Unknown Source)
at com.prismt.jdbc.Database.void(Unknown Source)
at com.prismt.jdbc.Database.&lt;init&gt;(Unknown Source)
at com.prismt.j2ee.jndi.a.a(Unknown Source)
at com.prismt.j2ee.jndi.cache.JDBCCacheAdapter.a
(Unknown Source)
at 
com.prismt.j2ee.jndi.cache.JDBCCacheAdapter.&lt;init&gt;
(Unknown Source)
at com.prismt.j2ee.jndi.OpenFusionSPI.a(Unknown 
Source)
at com.prismt.j2ee.jndi.OpenFusionSPI.&lt;init&gt;(Unknown 
Source)
at 
com.prismt.j2ee.jndi.OpenFusionCtxFactory.getInitialCon
text(Unknown Source)
at javax.naming.spi.NamingManager.getInitialContext
(Unknown Source)
at javax.naming.InitialContext.getDefaultInitCtx
(Unknown Source)
at javax.naming.InitialContext.init(Unknown Source)
at javax.naming.InitialContext.&lt;init&gt;(Unknown Source)
at com.prismt.j2ee.jms.Management.a(Unknown 
Source)
at com.prismt.j2ee.jms.Management.a(Unknown 
Source)
at com.prismt.j2ee.jms.Management.init(Unknown 
Source)
at com.prismt.j2ee.jms.Management.init(Unknown 
Source)
at com.prismt.openfusion.orb.JavaObject.a(Unknown 
Source)
at com.prismt.openfusion.orb.Service.byte(Unknown 
Source)
at com.prismt.openfusion.orb.Service.new(Unknown 
Source)
at com.prismt.openfusion.orb.Service.main(Unknown 
Source)
ERROR - Retring ...
From the Hsqldb-developers mail list the following thread 
http://www.mail-archive.com/hsqldb-
developers@lists.sourceforge.net/msg00085.html
discusses the problem.
From: Kevin A. Burton 
Subject: [Hsqldb-developers] MORE The database is 
already in use by another process 
Date: Thu, 07 Mar 2002 13:19:16 -0800 
--------------------------------------------------------------------------------
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1
OK...
I spent some type patching isAlreadyOpen and 
distributing updates .jar files to
my users.
Here is what I learned.
- - it isn't a synchronization issue in isAlreadyOpen. I 
created a synchronized
block around Log.class and it still fails.
- - the file DOES exist.
- - the delete() == false call is what is causing this.
- - canRead and canWrite both return true :(
I think the problem is the way that the file is opened.
Java states that on
some systems an open file is exclusive.
I think the problem is that on Windows, file operations in 
Java under Windows
are exclusive.
Maybe we should rewrite (make sense) Log.java to 
make sure that we don't try to
load the properties file while we are trying to save it.
Looking at the current
code, it appears that someone could call open in one 
thread (DBConnection) while
isAlreadyOpen is trying to be called in another thread.
Under UNIX/Linux... these are not exclusive and at least 
from Java, there is no
way to make them operate so.
So... my thinking (no suggestion yet) is that we just use 
a static synchronizer
so that the properties file is not written to during another 
write/read
operation.
Does that make sense? It looks like we only have to 
modify isAlreadyOpen,
loadProperties and saveProperties...
As an aside. Could a DB connection pool raise this 
issue? It seems that it
might. I am using Turbine's DB connection pool with 20 
connections. This
seems to work fine under Linux... obviously not find 
under Windows :)
Kevin
- -- 
Kevin A. Burton ( burton@apache.org, 
burton@openprivacy.org, burtonator@acm.org )
Location - San Francisco, CA, Cell - 
415.595.9965
Jabber - burtonator@jabber.org, Web - 
http://relativity.yi.org/
I have downloaded the latest 1.7 candidate and the 
problem still exists. I have had a look for the bug on the 
HSQLDB bug list but can't find it, but I would have 
thought that it would have been raised previously as it is 
discussed on the HSQLDB developers mail list.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

146
HyperSQL Database Engine (HSQLDB) / Bugs / #146 Simple SQL query equaling two columns fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create a table
CREATE TABLE taxon ( tax_id INTEGER PRIMARY 
KEY, tax_par_id INTEGER );
Insert data
INSERT INTO taxon { VALUES ( 1, 1 ) };
INSERT INTO taxon { VALUES ( 2, 1 ) };
INSERT INTO taxon { VALUES ( 3, 2 ) };
INSERT INTO taxon { VALUES ( 4, 2 ) };
INSERT INTO taxon { VALUES ( 5, 3 ) };
Check data
SELECT * FROM taxon;
Test following query
SELECT * FROM taxon WHERE tax_id = tax_par_id;
Returns the following error:
SQL Error: Column not found: S0022 Column not 
found: TAX_PAR_ID in statement [SELECT * FROM 
taxon WHERE tax_id = tax_par_id;] / Error Code: -28 / 
State: S0022 
But should work!
Workaround:
SELECT * FROM taxon WHERE tax_id + 0 = 
tax_par_id + 0;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

147
HyperSQL Database Engine (HSQLDB) / Bugs / #147 Can not store objects &gt; 64 Kb
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I'm using JBoss 3.0 application server with embedded 
HSQL database (I do not know, what version of hsql 
JBoss uses).
I have a troubles when I want to store CMP entity bean 
that have a field &gt; 64 Kb.
Thats, I have no troubles, when I'm storing StringBuffer 
object with capacity = 15000 (~62Kb), or empty 
ImageIcon, but I receive such message, when want to 
store StringBuffer with capacity = 20000 (or ImageIcon 
with image data):
java.sql.SQLException: Connection is broken
at org.hsqldb.Trace.getError(Trace.java:180)
at org.hsqldb.Trace.getError(Trace.java:144)
at org.hsqldb.Trace.error(Trace.java:205)
at org.hsqldb.jdbcConnection.executeHSQL
(jdbcConnection.java:904)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:718)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:686)
at org.hsqldb.jdbcStatement.executeUpdate
(jdbcStatement.java:85)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(jdbcPreparedStatement.java:152)
at 
org.jboss.resource.adapter.jdbc.local.LocalPreparedState
ment.executeUpdate(LocalPreparedStatement.java:308)
at 
org.jboss.ejb.plugins.cmp.jdbc.JDBCCreateEntityComman
d.insertEntity(JDBCCreateEntityCommand.java:196)
at 
org.jboss.ejb.plugins.cmp.jdbc.JDBCCreateEntityComman
d.execute(JDBCCreateEntityCommand.java:131)
at 
org.jboss.ejb.plugins.cmp.jdbc.JDBCStoreManager.create
Entity(JDBCStoreManager.java:450)
at 
org.jboss.ejb.plugins.CMPPersistenceManager.createEntit
y(CMPPersistenceManager.java:253)
at 
org.jboss.resource.connectionmanager.CachedConnectio
nInterceptor.createEntity
(CachedConnectionInterceptor.java:270)
at 
org.jboss.ejb.EntityContainer.createLocalHome
(EntityContainer.java:579)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at 
org.jboss.ejb.EntityContainer$ContainerInterceptor.invoke
Home(EntityContainer.java:1116)
at 
org.jboss.ejb.plugins.AbstractInterceptor.invokeHome
(AbstractInterceptor.java:73)
at 
org.jboss.ejb.plugins.EntitySynchronizationInterceptor.inv
okeHome(EntitySynchronizationInterceptor.java:257)
at 
org.jboss.resource.connectionmanager.CachedConnectio
nInterceptor.invokeHome
(CachedConnectionInterceptor.java:215)
at 
org.jboss.ejb.plugins.EntityInstanceInterceptor.invokeHo
me(EntityInstanceInterceptor.java:134)
at 
org.jboss.ejb.plugins.EntityLockInterceptor.invokeHome
(EntityLockInterceptor.java:79)
at 
org.jboss.ejb.plugins.EntityCreationInterceptor.invokeHo
me(EntityCreationInterceptor.java:44)
at 
org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext
(AbstractTxInterceptor.java:98)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.runWithTransacti
ons(TxInterceptorCMT.java:167)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.invokeHome
(TxInterceptorCMT.java:52)
at 
org.jboss.ejb.plugins.SecurityInterceptor.invokeHome
(SecurityInterceptor.java:104)
at 
org.jboss.ejb.plugins.LogInterceptor.invokeHome
(LogInterceptor.java:109)
at org.jboss.ejb.EntityContainer.invokeHome
(EntityContainer.java:487)
at 
org.jboss.ejb.plugins.local.BaseLocalContainerInvoker.inv
okeHome(BaseLocalContainerInvoker.java:227)
at 
org.jboss.ejb.plugins.local.LocalHomeProxy.invoke
(LocalHomeProxy.java:110)
at $Proxy23.create(Unknown Source)
at 
ru.narod.kimerinn.galaxy.earth.core.EarthManagerBean.r
egisterServer(EarthManagerBean.java:109)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at 
org.jboss.ejb.StatefulSessionContainer$ContainerInterce
ptor.invoke(StatefulSessionContainer.java:823)
at 
org.jboss.ejb.plugins.SecurityInterceptor.invoke
(SecurityInterceptor.java:129)
at 
org.jboss.resource.connectionmanager.CachedConnectio
nInterceptor.invoke
(CachedConnectionInterceptor.java:186)
at 
org.jboss.ejb.plugins.StatefulSessionInstanceInterceptor.i
nvoke(StatefulSessionInstanceInterceptor.java:266)
at 
org.jboss.ejb.plugins.AbstractTxInterceptor.invokeNext
(AbstractTxInterceptor.java:96)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.runWithTransacti
ons(TxInterceptorCMT.java:167)
at 
org.jboss.ejb.plugins.TxInterceptorCMT.invoke
(TxInterceptorCMT.java:61)
at org.jboss.ejb.plugins.LogInterceptor.invoke
(LogInterceptor.java:166)
at 
org.jboss.ejb.StatefulSessionContainer.invoke
(StatefulSessionContainer.java:380)
at org.jboss.ejb.Container.invoke
(Container.java:705)
at 
org.jboss.mx.server.MBeanServerImpl.invoke
(MBeanServerImpl.java:491)
at 
org.jboss.invocation.jrmp.server.JRMPInvoker.invoke
(JRMPInvoker.java:362)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at sun.rmi.server.UnicastServerRef.dispatch
(UnicastServerRef.java:261)
at sun.rmi.transport.Transport$1.run
(Transport.java:148)
at java.security.AccessController.doPrivileged
(Native Method)
at sun.rmi.transport.Transport.serviceCall
(Transport.java:144)
at 
sun.rmi.transport.tcp.TCPTransport.handleMessages
(TCPTransport.java:460)
at 
sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.r
un(TCPTransport.java:701)
at java.lang.Thread.run(Thread.java:536)
This bug prevents me to store ImageIcons with picture 
data and a large objects as a table fields :(( Is there a 
way to win this bug?
Kimerinn
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

148
HyperSQL Database Engine (HSQLDB) / Bugs / #148 Transfer Tool - no target in v1.61
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hSQL: v1.61
jdk: 1.3.1_03
OS: Windows2000 5.00.2195 Svc Pak 2
RAM: 512MB (in case it matters)
I noticed that if you launch the Transfer Tool directly it 
will only give you a window to select the Source, you do 
NOT get one to select the Target.
If you launch this from the DB Manager, you will get 
both windows in the proper order. 
Any questions: drop me a line at paul.m.boos@saic.com
Paul
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

149
HyperSQL Database Engine (HSQLDB) / Bugs / #149  powerbuilder connect to HSQL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using powerbuilder connect to HSQL Database by 
jdbc,arises &quot;memory can't read &quot;err,why?
Do you try powerbuilder connect to HSQL?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

150
HyperSQL Database Engine (HSQLDB) / Bugs / #150 Types with functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using RC6i
Trying 
select substr(ci, 1, (locate(',', ci) + 2) ), * from holdfile 
works
trying
select substr(ci, 1, (locate(',', ci) - 1) ), * from holdfile 
gives
SQL Error -------------------------------------------------------------------
----------------------------------------------------------------------------------
------------------------------------------------------------------------- 
This function is not supported: IM001 This function is not 
supported: org.hsqldb.Library.substring: 
java.lang.reflect.InvocationTargetException in statement 
[select substr(ci, 1, (locate(',', ci) - 1) ), * from holdfile] / 
Error Code: -20 / State: IM001 
1 row(s) in 10 ms
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

151
HyperSQL Database Engine (HSQLDB) / Bugs / #151 limit on size of sql for view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like the select statement for a view can only be 
about 840 characters --- runs ok on create but stored 
truncated. Tried something like:
create view pass1 as
select casewhen( locate(',',ci) &lt; 1, 
ci, 
substr(ltrim(ci), 1, locate(',',ci)-1) 
) lname,
casewhen( locate(',',ci) &lt; 1, 
' ', 
substr(rtrim(ci), locate(',',ci)+1) 
) fname,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
right(rtrim(cm), 2), 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
right(rtrim(cl), 2), 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
right(rtrim(ck), 2), 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
right(rtrim(cj), 2), 
'' 
)
)
)
) st,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
substr(cm, 1, length(rtrim(cm))-3),
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
substr(cl, 1, length(rtrim(cl))-3),
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
substr(ck, 1, length(rtrim(ck))-
3),
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
substr(cj, 1, length(rtrim
(cj))-3),
'' 
)
)
)
) city,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
3, 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
2, 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
1, 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
0, 
0 
)
)
)
) li,
* 
from holdfile
union
select casewhen( locate(',',ci) &lt; 1, 
ci, 
substr(ltrim(ci), 1, locate(',',ci)-1) 
) lname,
casewhen( locate(',',ci) &lt; 1, 
' ', 
substr(rtrim(ci), locate(',',ci)+1) 
) fname,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
right(rtrim(cm), 2), 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
right(rtrim(cl), 2), 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
right(rtrim(ck), 2), 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
right(rtrim(cj), 2), 
'' 
)
)
)
) st,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
substr(cm, 1, length(rtrim(cm))-3),
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
substr(cl, 1, length(rtrim(cl))-3),
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
substr(ck, 1, length(rtrim(ck))-
3),
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
substr(cj, 1, length(rtrim
(cj))-3),
'' 
)
)
)
) city,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
3, 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
2, 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
1, 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
0, 
0 
)
)
)
) li,
* 
from hold3
union
select casewhen( locate(',',ci) &lt; 1, 
ci, 
substr(ltrim(ci), 1, locate(',',ci)-1) 
) lname,
casewhen( locate(',',ci) &lt; 1, 
' ', 
substr(rtrim(ci), locate(',',ci)+1) 
) fname,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
right(rtrim(cm), 2), 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
right(rtrim(cl), 2), 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
right(rtrim(ck), 2), 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
right(rtrim(cj), 2), 
'' 
)
)
)
) st,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
substr(cm, 1, length(rtrim(cm))-3),
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
substr(cl, 1, length(rtrim(cl))-3),
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
substr(ck, 1, length(rtrim(ck))-
3),
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
substr(cj, 1, length(rtrim
(cj))-3),
'' 
)
)
)
) city,
casewhen( right(replace(rtrim(cm),',',' '), 3) like ' __', 
3, 
casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', 
2, 
casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', 
1, 
casewhen( right(replace(rtrim
(cj),',',' '), 3) like ' __', 
0, 
0 
)
)
)
) li,
* 
from hold3
in DB script was:
CREATE VIEW PASS1 AS select casewhen( locate
(',',ci) &lt; 1, ci, substr(ltrim(ci), 1, 
locate(',',ci)-1) ) lname, casewhen( locate(',',ci) 
&lt; 1, ' ', substr(rtrim(ci), locate
(',',ci)+1) ) fname, casewhen( right(replace
(rtrim(cm),',',' '), 3) like ' __', right(rtrim(cm), 
2), casewhen( right(replace(rtrim(cl),',',' '), 3) 
like ' __', right(rtrim(cl), 
2), casewhen( right(replace(rtrim
(ck),',',' '), 3) like ' __', right
(rtrim(ck), 2), casewhen( right
(replace(rtrim(cj),',',' '), 3) like ' 
__', right(rtrim(cj), 2),
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

152
HyperSQL Database Engine (HSQLDB) / Bugs / #152 Exception reconnecting / foreign key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Everytime I reconnect to a database created with the
following statements, I get an exception. It seems to
be due to the foreign key
constraint originating from a non-primary key-attribute.
I'm using the binary version from the web-site of
HSQLDB 1.7.0 RC6 Revision i with JDK1.4-01 under linux.
create cached table VEREIN
(
VCODE CHAR(10) not null,
primary key (VCODE)
);
create unique index VEREIN_PK on VEREIN (VCODE);
create cached table BEWERB
(
VCODE CHAR(10) 
not null,
ID SMALLINT not null ,
primary key (ID)
);
create unique index BEWERB_FK2 on BEWERB(ID);
create unique index BEWERB_FK1 on BEWERB(VCODE);
alter table BEWERB
add constraint bv foreign key (VCODE) references VEREIN
(VCODE);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

153
HyperSQL Database Engine (HSQLDB) / Bugs / #153 getColumnName (continued)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello all!
I had once outlined that getColumnName() in the 
jdbcResultSet class returned the column name instead 
of the alias of the column (which is the way most jdbc 
drivers use).
A patch has been done for that (thanks, by the way), but 
it doesn't work in a client/server environment.
- Problem:
The patch has been applied at the Jdbc client level.
On the other hand, it uses a *database* property named 
jdbc.get_column_name.
In a client/server environment, the client and the 
database are in two separate JVMs (and possibly on 
two different machines), so the client doesn't see the 
database property (which is on the server).
So, as a result, even if you set the property to false on 
the server, the getColumnName on the client still returns 
the real column name, and not the alias. And you 
cannot set the property on the client because there is 
no server and no database there (and you can set the 
property only if you start a database).
Fix:
I have two main ways of fixing this.
It involves a bit of thinking about the design. Should the 
*database* be patched to behave in the way we want to 
(i.e. return the label instead of the column name), or 
should the *jdbc client* only be patched to behave like 
that?
These are completely different designs. With the second 
one, each client might behave differently on the same 
database.
So let's have a look at the first solution (database patch):
the jdbc.get_column_name property should affect the 
getColumnName() method in class Expression. To 
make that work, the &quot;get_column_name&quot; boolean in 
jdbcResultSet should be moved to Expression. Then, 
the getColumnName() method in Expression should be 
patched to return the label instead of the column name if 
the get_column_name boolean is false.
Right, let's have a look at the second solution (jdbc 
client patch): we need the client to get properties 
somewhere. I don't mind where these properties should 
come from (another configuration file, or simply in the 
url), but the setGetColumnName(boolean) method 
should be called within the jdbc driver itself (while 
initializing the driver, or while connecting with the URL).
Note that the best fix might be a combination of both 
solutions: have a parameter on the database AND 
another parameter on the jdbc client.
I let you see what's best from your point of view. As for 
me, I think that the patch should be applied at the 
database level (and not at the jdbc level). Anyway, this 
affects only people who set the property to false.
Thanks!
JY.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

154
HyperSQL Database Engine (HSQLDB) / Bugs / #154 Bugs in test suites
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The classes in org.hsqldb.test (v1.7.0RC6i) contain a 
couple of bugs.
The main methods of the classes 
org.hsqldb.test.TestSqlPersistent and 
org.hsqldb.test.TestSql are useless since they don't report 
the failures. If junit.*ui.TestRunner is used instead of the 
main methods, then class org.hsqldb.test.TestSqlPersistent 
should additionally define a suite() method, since otherwise 
the TestRunner detects the test*() methods inherited from 
the superclass, which I think is not intended.
The last statement of org.hsqldb.test.TestSql.testMetaData() 
should read assertEquals(result3, result4); instead of 
assertEquals(result2, result4);
Method org.hsqldb.test.TestSqlPersistent.testInsertObject(): 
the arrays arrayValue and arrayValueResult cannot be 
compared with arrayValue.equals(arrayValueResult). Must 
iterate over their elements or use java.util.Arrays.equals
((Double[]) arrayValue, (Double[]) arrayValueResult).
Class org.hsqldb.test.TestSubselect: Resource dataset-
subselect.xml is missing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

155
HyperSQL Database Engine (HSQLDB) / Bugs / #155 Oracle chokes on &quot;;&quot; at end of select 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using the transfer tool with 1.7 RC6i and oracle 8i as
the source DB.
The semi-colon added to the select statement on line
126 of TransferTable.java cause Oracle to throw an
exception with an &quot;Invalid character&quot; message. Removing
the semi-colon solves the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

156
HyperSQL Database Engine (HSQLDB) / Bugs / #156 Missing servlet.jar in classpath
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in buildJDK14.bat you seem to be missing the servlet.jar 
file in the classpath even though that jar is included in 
the distribution. Here's my corrected version.
This is from 1.70RC6. Perhaps other scripts have this 
issue also?
@echo HSQLDB build file for jdk 1.4
@echo *** we recommend the use of the ANT build.xml 
instead of this method
@echo for all jdk's include the path to jdk1.x.x\bin in 
your system path statement
cd ..\
md classes
del /s classes\*.class
cd src
javac -O -nowarn -d ../classes -classpath %
classpath%;../classes;../lib;../lib/servlet.jar;. ./*.java 
org/hsqldb/*.java org/hsqldb/lib/*.java 
org/hsqldb/util/*.java
cd ..\classes
copy ..\src\org\hsqldb\util\hsqldb.gif org\hsqldb\util
jar -cf ../lib/hsqldb.jar *.class org/hsqldb/*.class 
org/hsqldb/lib/*.class org/hsqldb/util/*.class
cd ..\build
pause
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

157
HyperSQL Database Engine (HSQLDB) / Bugs / #157 Typo in getIndexInfo (ORDINAL_POSITON)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
getIndexInfo returns ORDINAL_POSITON not 
ORDINAL_POSITION (the third 'I' is missing).
P.S. This bug was found in the project LDBC, see also 
http://ldbc.sourceforge.net
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

158
HyperSQL Database Engine (HSQLDB) / Bugs / #158 Missing hsqldb.gif
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The batch commands for building are missing 
the ...../util/hsqldb.gif for the swing DatabaseManager
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

159
HyperSQL Database Engine (HSQLDB) / Bugs / #159 Primary key should not allow null values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The standard says (at least, most if not all other 
databases do that), the primary keys columns don't 
allow null values. HSQLDB allows null values. I think this 
behaviour should be changed.
This bug was found in the LDBC project.
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

160
HyperSQL Database Engine (HSQLDB) / Bugs / #160 DELETE FROM does not update database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After a DELETE FROM order on a table, records stay visible (and selectable) until database is closed.
When re-openning database, records are correctly deleted.
Here my code :
Connection conn = DriverManager.getConnection(...)
PreparedStatement st = conn.prepareStatement(&quot;DELETE FROM MYTABLE WHERE ID=?&quot;);
st.setString(1,sId);
int ret = st.executeUpdate();
// here, ret is equal to 1, that is expected
conn.commit(); // not needed, as far as AUTO_COMMIT is set to TRUE
now, this returns the deleted row
PreparedStatement st = conn.prepareStatement(&quot;SELECT ID FROM MYTABLE WHERE ID=?&quot;);
st.setString(1,sId);
ResultSet rs = st.executeQuery();
Any idea ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

161
HyperSQL Database Engine (HSQLDB) / Bugs / #161 SELECT COUNT(...) with no rows fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you select the count of column in a table that has no 
rows, it throws a &quot;No data available&quot; SQLException 
rather than returning 0.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

162
HyperSQL Database Engine (HSQLDB) / Bugs / #162 Error processing SET INDEX on script
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Some of the SET INDEX clauses that are generated by the
engine in the [DB]script file are throwing a
NumberFormatException in the setIndexRoot method of the
Table class when the engine is started. It seems that
there is an inconsistency between the internal index
count for a table, and the entries generated for those
indexes in the aforementioned clause.
For example if the internal index count is 1 and the
set index clause goes like &quot;SET TABLE [table] INDEX '-1
-1 -1 0'&quot;, an attempt is made to parse &quot;-1 -1 0&quot; to get
the identity index root, throwing the indicated Exception.
I just try-catched the problematic line, and set the
identity index root to 0 (as far as I have tested, no
problems are generated for this patch, but I don't know
if the solution is entirely correct).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

163
HyperSQL Database Engine (HSQLDB) / Bugs / #163 when shutdown compact is issued server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.lang.ArrayIndexOutOfBoundsException: 5 &gt;= 5
at java.util.Vector.elementAt(Vector.java:417)
at org.hsqldb.Server.closeAllServerConnections
(Server.java:283)
at org.hsqldb.Server.update(Server.java:306)
at java.util.Observable.notifyObservers
(Observable.java:142)
at org.hsqldb.ServerConnection.close
(ServerConnection.java:144)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:228)
at java.lang.Thread.run(Thread.java:484)
---------
when shutdown compact is issued server throws an
exception as shown above.
Sometimes script is flushed and is in good
condition sometimes it is not.
Sometimes it works properly.
version 1.7.1
DB hsqldb
Thank you very much 
Raman Kannan
rkannan@govpx.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

164
HyperSQL Database Engine (HSQLDB) / Bugs / #164 create view problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create view allows for ...
select ... into xxx ...
this causes a race condition.
Don't know if you should stop or just say don't do it
cause it hurts.
Fix if you do it is to edit .script file and delete view.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

165
HyperSQL Database Engine (HSQLDB) / Bugs / #165 ClassCastException in preparedStatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using v1.7.0 , ( v 1.7.1ALPHA also bugged)
I found a bug in the method 
static Object convertObject(Object o, int type)
in Column class, when sqltype is SMALLINT or TINYINT ,
this method return a Integer object.
And when, I call a preparedStatement.setObject(int
parameterIndex, Object x, int targetSqlType) 
with 'x' intanceof java.lang.Byte and targetSqlType
equals to java.sql.Types.TINYINT ( or 'x' intanceof
java.lang.Short and targetSqlType equals to
java.sql.Types.SMALLINT ), I get the error :
java.lang.ClassCastException: java.lang.Integer
at
org.hsqldb.jdbcPreparedStatement.setObjectInType(jdbcPreparedStatement.java:4994)
at
org.hsqldb.jdbcPreparedStatement.setObject(jdbcPreparedStatement.java:1130)
at HSQLbug.main(HSQLbug.java:73)
I modify Column.java to return the correct type ( just
put a line for converting Integer to Byte / Short )
and my program runs fine ( driver workes, but I don't
know if this patch add bugs to server )
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

166
HyperSQL Database Engine (HSQLDB) / Bugs / #166 Win98 crash can corrupt script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Windows 98, HSQLDB v1.7.0, Java 1.3.1
1. Start database server
2. Perform a minimum of activity, it appears not to 
matter what exactly
3. Pull the power plug from the machine
4. Database refuses to start on reboot
We have not had this problem on Win 2000 which struck 
us as odd, but it happens every time on 98.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

167
HyperSQL Database Engine (HSQLDB) / Bugs / #167 LENGTH(NULL) should return NULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It currently returns 0, that is not ANSI standard.
The bug is in Library.java:
public static int length(String s) {
return ((s == null) || (s.length() &lt; 1)) ? 0 : s.length();
}
Should be something like:
public static Integer length(String s) {
return s==null ? null : new Integer(s.length());
}
This bug was found in the LDBC project 
(ldbc.sourceforge.net)
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

168
HyperSQL Database Engine (HSQLDB) / Bugs / #168 IN fails with BIGINT literal values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For a table defined as follows:
CREATE TABLE RESOURCES(VALUE BIGINT NOT 
NULL,UNIQUE(VALUE))
The following SQL fails:
SELECT * FROM RESOURCES R WHERE R.VALUE 
IN (225216536312565046, 5117217460229781974)
The Exception is as follows:
java.sql.SQLException: Unexpected token: 
225216536312565046 in statement [SELECT * FROM 
RESOURCES R WHERE R.VALUE IN 
(225216536312565046, 5117217460229781974)]
The workaround is to enclose the BIGINT literals within 
single quotes, but this compensates my cross-platform 
SQL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

169
HyperSQL Database Engine (HSQLDB) / Bugs / #169 poolman cannot connect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When i try to connect with poolman to the 1.7.0 version 
of hsqldb i get the error:
SQLException occurred in JDBCPool: 
java.sql.SQLException: This function is not supported
params: org.hsqldb.jdbcDriver, 
jdbc:hsqldb:hsql://localhost. Please check your 
username, password and other connectivity info.
java.sql.SQLException: SQLException occurred in 
JDBCPool: java.sql.SQLException: This function is not 
supported
params: org.hsqldb.jdbcDriver, 
jdbc:hsqldb:hsql://localhost. Please check your 
username, password and other connectivity info.
at com.codestudio.util.JDBCPool.create
(Unknown Source)
at com.codestudio.util.ObjectPool.checkOut
(Unknown Source)
at 
com.codestudio.util.JDBCPool.requestConnection
(Unknown Source)
at 
com.codestudio.util.SQLManager.requestConnection
(Unknown Source)
at com.codestudio.sql.PoolMan.connect
(Unknown Source)
When i use version 1.6.1 with the exact same settings 
this works fine.
poolman.xml:
.........
&lt;dbname&gt;agenda&lt;/dbname&gt;
&lt;jndiName&gt;jndi-agenda&lt;/jndiName&gt;
&lt;driver&gt;org.hsqldb.jdbcDriver&lt;/driver&gt;
&lt;url&gt;jdbc:hsqldb:hsql://localhost&lt;/url&gt;
&lt;username&gt;sa&lt;/username&gt;
&lt;password&gt;&lt;/password&gt;
&lt;initialConnections&gt;1&lt;/initialConnections&gt;
........
Regards,
Edwin Eversidjk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

170
HyperSQL Database Engine (HSQLDB) / Bugs / #170 Insert Not Working Consistently
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We are using HSQL 1.61. Through SQL scripts we first 
create a schema. Then with another script we attempt 
to populate the database. When I run the full population 
script it fails with the message &quot;Try to insert into a non-
nullable column in statement ...&quot; on the very first insert.
If I run insert statements in isolation they execute just 
fine. Thanks.
Andy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

171
HyperSQL Database Engine (HSQLDB) / Bugs / #171 Trigger classes not loading
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bug in HSQL:
Loading a trigger class from anywhere except %
JAVA_HOME%\jre\lib\ext doesn't
work. Example stack trace:
java.lang.ClassNotFoundException: TriggerSample
at java.net.URLClassLoader$1.run
(URLClassLoader.java:198)
at java.security.AccessController.doPrivileged
(Native Method)
at java.net.URLClassLoader.findClass
(URLClassLoader.java:186)
at java.lang.ClassLoader.loadClass
(ClassLoader.java:306)
at java.lang.ClassLoader.loadClass
(ClassLoader.java:262)
at java.lang.ClassLoader.loadClassInternal
(ClassLoader.java:322)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:130)
at org.hsqldb.Database.processCreateTrigger
(Database.java:1131)
at org.hsqldb.Database.processCreate
(Database.java:838)
at org.hsqldb.Database.execute(Database.java:468)
at org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:2927)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:2516)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1786)
at org.hsqldb.jdbcStatement.execute
(jdbcStatement.java:728)
at org.hsqldb.util.DatabaseManager.execute
(DatabaseManager.java:741)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(DatabaseManager.java:
461)
at java.awt.Button.processActionEvent
(Button.java:381)
at java.awt.Button.processEvent(Button.java:350)
at java.awt.Component.dispatchEventImpl
(Component.java:3526)
at java.awt.Component.dispatchEvent
(Component.java:3367)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:445)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarc
hy(EventDispatchTh
read.java:191)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(EventDispatchThre
ad.java:144)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:138)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:130)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:98)
Reason is that the class loader used is 
sun.misc.Launcher$ExtClassLoader@f38798
in Database.processCreateTrigger().
To fix, use:
Class cl = Class.forName(sClassName, true, 
ClassLoader.getSystemClassLoader());
The system class loader is then: 
sun.misc.Launcher$AppClassLoader@2f6684.
Environment:
- Windows 2000, SP3
- HSQLDB 1.7.0
- JDK 1.4.0_01-b03
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

172
HyperSQL Database Engine (HSQLDB) / Bugs / #172 server.dbname or server.database key?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After lookin at the sourcecode and noticed the the 
following use pattern on database property.
Should HsqlServerFactory use &quot;server.database&quot; 
property name as well?
HsqlServerFactory.createHsqlServer method:
props.setProperty(&quot;server.dbname&quot;, dbFilePath);
Server.setProperties method:
serverProperties.setPropertyIfNotExists
(&quot;server.database&quot;, &quot;test&quot;);
Server.openDB() method:
String database = serverProperties.getProperty
(&quot;server.database&quot;);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

173
HyperSQL Database Engine (HSQLDB) / Bugs / #173 getScale returns wrong value
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug refers to release 1.7.0-RC3.
Suppose you have a table with a field like this:
quantity decimal(10,4)
If you do a select on this table and look into the 
ResultSetMetadata you can find that the getScale 
method returns always 0 instead of 4 (the getColumns 
method in DatabaseMetadata reports the correct value of 
4)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

174
HyperSQL Database Engine (HSQLDB) / Bugs / #174 ArrayIndexOutOfBoundsException in RC2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JBuilders Database Pilot came up with this exception
(recreated by the attached script):
java.lang.ArrayIndexOutOfBoundsException: 0 &gt;= 0
at java.util.Vector.elementAt(Vector.java:427)
at org.hsqldb.Table.getIndex(Table.java:1479)
at org.hsqldb.DatabaseInformation.getSystemTable
(DatabaseInformation.java:557)
at org.hsqldb.Database.getTable 
Database.java:656)
at org.hsqldb.Parser.parseTableFilter
(Parser.java:1162)
at org.hsqldb.Parser.parseSelect(Parser.java:882)
at org.hsqldb.Parser.processSelect
(Parser.java:134)
at org.hsqldb.Database.execute(Database.java:442)
at org.hsqldb.ServerConnection.run
(ServerConnection.java:203)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

175
HyperSQL Database Engine (HSQLDB) / Bugs / #175 jdbc.get_column_name=false in 1.7.1RC3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Don't think jdbc.get_column_name=false is
working in rc3, did work in 1.7.0
Joe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

176
HyperSQL Database Engine (HSQLDB) / Bugs / #176 org.hsqldb.Library.left
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
call left('hello',2)
SQL 
Error 
-----------------------------------------
-----------------------------------------
--------- 
Unexpected token: LEFT in statement [call left
('hello',2)] / Error Code: -11 / State: 37000 
1 row(s) in 0 ms
This is using 1.7.1 RC1. Is this still an issue in 
RC3?
I assume this is a collision between LEFT JOIN and 
the left(s,count) library method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

177
HyperSQL Database Engine (HSQLDB) / Bugs / #177 Wrong results in LEFT OUTER JOIN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A LEFT OUTER JOIN does deliver wrong results when 
filtering for IS NULL. The example is using the following 
simple ER and data: 
CREATE TABLE a (id INTEGER PRIMARY KEY);
CREATE TABLE b (id INTEGER, aid INTEGER);
ALTER TABLE b ADD CONSTRAINT fk FOREIGN 
KEY (aid) REFERENCES a (id);
INSERT INTO a VALUES (0, 'aName0');
INSERT INTO a VALUES (1, 'aName1');
INSERT INTO b VALUES (0, 'bName', 0);
The following SQL works fine:
SELECT * FROM a LEFT OUTER JOIN b ON (a.id = 
b.aid);
and returns:
0, 0, 0
1, &lt;NULL&gt;, &lt;NULL&gt;
The following doesn't:
SELECT * FROM a LEFT OUTER JOIN b ON (a.id = 
b.aid) WHERE b.id IS NULL;
returns:
0, &lt;NULL&gt;, &lt;NULL&gt;
1, &lt;NULL&gt;, &lt;NULL&gt;
I would expect:
1, &lt;NULL&gt;, &lt;NULL&gt;
Leaving off ALTER TABLE, PRIMARY KEY does not 
change anything.
Using v1.7.1rc1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

178
HyperSQL Database Engine (HSQLDB) / Bugs / #178 RC3 and &quot;Statement Unreachable&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
classes14:
[javac] Compiling 2 source files to C:\hsqldb\classes
[javac] C:\hsqldb\src\org\hsqldb\Session.java:431: 
unreachable statement
[javac] return bReadOnly || 
dDatabase.bReadOnly;;
[javac] ^
[javac] Note: Some input files use or override a 
deprecated API.
[javac] Note: Recompile with -deprecation for details.
[javac] 1 error
JDK 1.4.1 FCS, ANT 141.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

179
HyperSQL Database Engine (HSQLDB) / Bugs / #179 Forte 4: SQLState exception in 1.7.1RC3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get this exception when Forte 4 starts up. I don't know
what I can do to get some more detailed information about
the exception.
0:trying to connect user
SQLException: SQLState(S1000) vendor code(-37)
1:trying to connect user sa
1:DISCONNECT
2:trying to connect user sa
2:DISCONNECT
1:disconnected sa
2:disconnected sa
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

180
HyperSQL Database Engine (HSQLDB) / Bugs / #180 Including null in select with where &gt;or&lt;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb seems to include rows with null value for 
attributes with a WHERE equal/smaller/bigger operation 
as in this example:
create table testme ( a INTEGER );
insert into testme values ( -1 );
insert into testme values ( 0 );
insert into testme values ( 1 );
insert into testme values ( null );
select count(*) from testme where ( a &lt; 0 );
Both Oracle as well as mySQL return 1 (the -1 value) 
and do not include the &quot;null&quot; value, which &quot;seems 
logical&quot; as well. However, hsqldb returns 2. I believe 
this is a bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

181
HyperSQL Database Engine (HSQLDB) / Bugs / #181 default_pk name &quot;SYSTEM_ID&quot; problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i have do test hsqldb version 1.7.0 with eXist (xml db) 
but when eXist use RDBMS as storage for itself,
eXists create a table named &quot;documents&quot;.
In this &quot;documents&quot; table has &quot;SYSTEM_ID&quot; column for 
XML Document's doc-type id.
followings are the DDL for this table.
Create CACHED TABLE documents (
name varchar(100) DEFAULT '' NOT NULL,
doc_id integer DEFAULT '0' PRIMARY KEY,
children integer DEFAULT '0' NOT NULL,
doctype varchar(200),
public_id varchar(250),
system_id varchar(250),
);
you can see system_id column of this....
can i ask to change org.hsqldb.Table.DEFAULT_PK 's 
value with other value can not have chance to conflict... 
next version of hsqldb...?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

182
HyperSQL Database Engine (HSQLDB) / Bugs / #182 hsqlServlet not working with Resin
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had some problems using the hsqlServlet in the Resin 
application server. 
See:
http://www.caucho.com/quercus/bugtrack/view.xtp?
bugreport_id=658
It seems that the servlet code is not correct. I already 
included the code that fixes the problem.
I hope it can be fixed.
regards,
Dennis
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

183
HyperSQL Database Engine (HSQLDB) / Bugs / #183 1.7.1 RC 4: type conversion no longer works
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sqlline&gt; create table foo (id int)
0 rows affected
sqlline&gt; insert into foo values (10)
1 rows affected
sqlline&gt; select * from foo where id=10
---
ID 
---
10 
---
2 rows selected
sqlline&gt; select * from foo where id=10.0
Error -16: Wrong data type: 37000 Wrong data type: 10.0
in statement [select * from foo where id=10.0]
(state=37000)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

184
HyperSQL Database Engine (HSQLDB) / Bugs / #184 shutdown compact destroys database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
During a SHUTDOWN COMPACT; I get the following 
error;
Error: java.sql.SQLException: File input/output error: 
File input/output error: reading: java.io.EOFException in 
statement [SET TABLE EDGES INDEX '1981936 
1461232 2430320 9578'] in statement [SET MAXROWS 
100;shutdown compact]
The error occurs in very particular circumstances, when 
a ALTER TABLE is used to add a CONSTRAINT to an 
existing table, and something (?) with the order of table 
generation is not as HSQLDB might expect. 
It took me some time to deduce a reproducible example. 
So the following test, creating TABLE vertices, then 
TABLE edges, works find:
--- BEGIN TEST_OK.SQL ---
DROP TABLE vertices IF EXISTS;
DROP TABLE edges IF EXISTS;
CREATE CACHED TABLE vertices (
id INTEGER IDENTITY,
name VARCHAR NOT NULL,
rank INTEGER NOT NULL,
type VARCHAR NOT NULL
);
CREATE CACHED TABLE edges (
id INTEGER IDENTITY,
parent_id INTEGER NOT NULL,
child_id INTEGER NOT NULL,
role_id INTEGER,
recursive_id INTEGER,
rank INTEGER
);
ALTER TABLE edges 
ADD CONSTRAINT fk_parent 
FOREIGN KEY (parent_id) 
REFERENCES vertices (id)
;
INSERT INTO vertices (name, rank, type) { 
VALUES ('v1', 0, 't1') 
};
INSERT INTO vertices (name, rank, type) { 
VALUES ('v2', 0, 't2') 
};
INSERT INTO edges (parent_id, child_id) { 
VALUES (0, 1) 
};
SHUTDOWN COMPACT;
--- END TEST_OK.SQL ---
However, the following case, making edges first, then 
vertices, leads to a corrupted db:
--- BEGIN TEST_BUG.SQL ---
DROP TABLE vertices IF EXISTS;
DROP TABLE edges IF EXISTS;
CREATE CACHED TABLE edges (
id INTEGER IDENTITY,
parent_id INTEGER NOT NULL,
child_id INTEGER NOT NULL,
role_id INTEGER,
recursive_id INTEGER,
rank INTEGER
);
CREATE CACHED TABLE vertices (
id INTEGER IDENTITY,
name VARCHAR NOT NULL,
rank INTEGER NOT NULL,
type VARCHAR NOT NULL
);
ALTER TABLE edges 
ADD CONSTRAINT fk_parent 
FOREIGN KEY (parent_id) 
REFERENCES vertices (id)
;
INSERT INTO vertices (name, rank, type) { 
VALUES ('v1', 0, 't1') 
};
INSERT INTO vertices (name, rank, type) { 
VALUES ('v2', 0, 't2') 
};
INSERT INTO edges (parent_id, child_id) { 
VALUES (0, 1) 
};
SHUTDOWN COMPACT;
--- END TEST_BUG.SQL ---
They both sould work as expected.
I am using 1.7.1rc5, but I met this bug already before in 
version 1.7.0, but was not able to deduce it at that time.
Thanks
Daniel Frey
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

185
HyperSQL Database Engine (HSQLDB) / Bugs / #185 Function invocation error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The invocation on stored procedures -
Function.getValue() - convert its data members using
the the Column.convertObject(Object, int) method. 
There are two problems with this invocation.
First: All numeric SQL types gets passed into the
reflection as Integers. Every attempt to use a stored
procedure that has byte, short or float arguments will
fail with a 'Function not supported' error. 
Secondly: Byte arrays gets passed passed to the
invocation as org.hsqldb.ByteArray objects instead of
byte[] instances. (This error can easily be
circumvented with a type check immediately before
invocation in the Function.getValue() method.)
Thanks for your good work
- Lars J. Nilsson
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

186
HyperSQL Database Engine (HSQLDB) / Bugs / #186 issue with system id column visibility
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Fred. Not sure if this should be considered a 
bug or a patch suggestion. I provide no code, but a 
discussion of the motivation, so here it is on Bugs:
Was just thinking a tiny bit about what you said re: 
hiding SYSTEM_ID column by renaming it to: &quot;&quot;
Here's my little test:
create table sysid_test(id int)
insert into sysid_test values(1)
select &quot;&quot; as SYSTEM_ID, * from sysid_test
SYSTEM_ID ID 
--------- -- 
0 1 
create table system_id_test ( &quot;&quot; int, id int)
SQL 
Error 
-----------------------------------------
-----------------------------------------
----------------------------------- 
Column already exists: in statement [create table 
system_id_test ( &quot;&quot; int, id int)] / Error Code: -27 / 
State: S0021 
So, its still not completely hidden: do we want to 
take the next step to unsure that it really is fully 
hidden from SQL? 
I realize that it is now pretty unlikely that anyone in 
their right mind will &quot;discover&quot; the above 
undocumented &quot;features&quot; (unless they read this ;-).
But, I presume the column still has all the quirks it 
had when it was named SYSTEM_ID and visible, so, 
in the interest of attaining true closure, I am 
wondering if there is not some very brief and 
simple additional code we could add to truly make 
it innaccessible from SQL. My initial thought on 
the matter is that one could assign the column a 
null HsqlName.name. I'm reasonably sure there is 
no way to assign or get a match to a null column 
name from SQL, so this would permanently hide it 
as well as allowing &quot;&quot; as a column name on tables 
with a system id column in the same way that it is 
allowed on tables without a system id column (yes: 
I know that is ridiculous, but at least it is 
consistent behaviour), without having to add some 
silly crutch rules to the column expression 
resolution mechanism. Are there caveats to this 
approach? If not, this is not much more than a one-
liner patch that shuts the door permanently on the 
issue, so I think we should do it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

187
HyperSQL Database Engine (HSQLDB) / Bugs / #187 wrong value from HOUR( date )
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Have table with create_dt DATE NOT NULL column. 
Note: The time is around 10:50am machine time.
First:
update table
set create_dt = NOW();
Then did:
select CREATE_DT
, HOUR( CREATE_DT ) 
, HOUR( NOW() ) from table;
returns 2002-10-16, 19, 10
The return of 19 from the HOUR( CREATE_DT ) looks 
like a bug. 
HsqlSyntax.html documentation shows HOUR(time) but 
has no indication that function is overloaded as 
HOUR(date). I would think it should be.
--------CONDITIONS
For select, I was using HSQL Database Manager as SA 
user, autocommit: true, readonly: false
Was hsqldb version, hsqldb_1_7_1_RC5 inside of hsql-
avalon application.
Machine Windows 2000 2.0 ghz
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

188
HyperSQL Database Engine (HSQLDB) / Bugs / #188 Text or mem. tables, read only db files
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using text or memory tables if *.data file is missing
and database files are read only causes errors even if
tables are small and are not modified.
In Standalone mode,
If &quot;readonly&quot; property is false, error message pops up:
File input/output error: tests/database1.properties
java.io.FileNotFoundException:
tests\database1.properties (Access is denied)
If &quot;readonly&quot; property is true, error message pops up
(depending on table type):
File input/output error: File input/output error: error
java.io.FileNotFoundException: tests/database1.data
(The system cannot find the file specified) opening
tests/database1.data in statement
[CREATE [TEXT] TABLE ...]
Workaround is to add 0 length *.data file and set
&quot;readonly&quot; to true
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

189
HyperSQL Database Engine (HSQLDB) / Bugs / #189 ? trace in CachedRow
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While testing 1.7.1 release ...
init would fail on inputstream error for
text table ...
the same db was o.k. with 1.7.1 RC5
change in CachedRow (339)
n = n.nNext;
}
oData = in.readData(tTable.getColumnTypes());
Trace.check(in.readIntData() == iPos, 
Trace.INPUTSTREAM_ERROR);
iLastAccess = iCurrentAccess++;
}
}
was commented out and tests ran o.k. ...
Did not try to figure out what the trace was for ...
Please advise.
Thanks,
Joe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

190
HyperSQL Database Engine (HSQLDB) / Bugs / #190 Outer join syntax fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following SQL statement works fine in HSQL 1.6.1 
but it fails in HSQL 1.7.x.
The statement:
SELECT 
ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_ST
RUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HI
DDEN,ULS.UNREMOVABLE,ULS.IMMUTABLE,USP.ST
RUCT_PARM_NM,USP.STRUCT_PARM_VAL
FROM 
UP_LAYOUT_STRUCT ULS 
LEFT OUTER JOIN UP_LAYOUT_PARAM USP ON 
ULS.USER_ID = USP.USER_ID AND ULS.STRUCT_ID 
= USP.STRUCT_ID
WHERE ULS.USER_ID=1 AND ULS.LAYOUT_ID=1 
ORDER BY ULS.STRUCT_ID
The error message:
Unexpected token: AND in statement [SET MAXROWS 
1000;SELECT 
ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_ST
RUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HI
DDEN,ULS.UNREMOVABLE,ULS.IMMUTABLE,USP.ST
RUCT_PARM_NM,USP.STRUCT_PARM_VAL
FROM 
UP_LAYOUT_STRUCT ULS 
LEFT OUTER JOIN UP_LAYOUT_PARAM USP ON 
ULS.USER_ID = USP.USER_ID AND ULS.STRUCT_ID 
= USP.STRUCT_ID
WHERE ULS.USER_ID=1 AND ULS.LAYOUT_ID=1 
ORDER BY ULS.STRUCT_ID]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

191
HyperSQL Database Engine (HSQLDB) / Bugs / #191 Incorrect resultsetmetadata
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All numeric types have all scale factors and displaywidths 
set to 0 when retrieved as their types. Work fine when 
retrieved as string.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

192
HyperSQL Database Engine (HSQLDB) / Bugs / #192 values in date fields change values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I compiled hsqldb v. 1.7.1 on linux with Sun's jdk
1.4.1_01 and javac. I created 3 tables with one column
of type Date and insert 2 rows.
On MS Windows 98 with Sun's jre 1.4.1_01 and produced 
database when i change time zone stored dates changes
values.
On linux GMT+2
1-1-2002 (dd-MM-yyyy)
On Windows GMT+1 (or GMT+3, but not the same as on linux)
31-12-2002
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

193
HyperSQL Database Engine (HSQLDB) / Bugs / #193 Text Table Bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have been testing the CREATE Text Table. When I enter
all INTEGER colums and shutdown the database and again
restart it , the values of the last column keeps
increasing by 7 in every row. 
My Jdk is 1.4.1 
OS Windows 2000 professional
SQL Statements were generated using the Database Manager
Hsql was started in Server mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

194
HyperSQL Database Engine (HSQLDB) / Bugs / #194 cannot select from Text Table in1.7.1 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've used Text Tables with versin 1.7.0 in a small project.
All works fine (except outer join bug).
After switching to current 1.7.1 using Text Tables no 
more 
possible. I've experimented with several different settings
without better results.
I can create an new Text Table using &quot;select * into text 
xxx from yyy&quot;
and select data from new table. (I think all doing is in 
memory until here.)
But after disconnect/connet receiving this Error 
&quot;File input/output error: reading: java.sql.SQLException: 
InputStream error in statement [SET MAXROWS 
100;select * from CCCVCCC]&quot;
when I use sthe same select.
On the other hand the meta- data of the table can be 
shown.
My Jdk is 1.3.1 
OS Windows NT
SQL Statements were generated using the Database 
Manager 
Hsql was started in Standalone mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

195
HyperSQL Database Engine (HSQLDB) / Bugs / #195 Referential integrity check fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The referential integrity check fails when a column with a 
FK is updated!
Create these tables:
CREATE TABLE A (
NAME VARCHAR(32) NOT NULL,
CONSTRAINT PK_A PRIMARY KEY (NAME)
);
CREATE TABLE B (
NAME VARCHAR(32) NOT NULL,
REF VARCHAR(32),
CONSTRAINT PK_B PRIMARY KEY (NAME),
CONSTRAINT FK1_B FOREIGN KEY (REF) 
REFERENCES A (NAME)
);
and insert these data:
INSERT INTO A VALUES ('a');
INSERT INTO B (NAME) VALUES ('b');
then HSQLDB accepts this
UPDATE B SET REF='b' where NAME='b';
but that violates the FK constraint in table B
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

196
HyperSQL Database Engine (HSQLDB) / Bugs / #196 implicit type conversion ?!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've expected that the result of following statements
in all cases will return 3.3
select 33/10 from test; fails 3
select (33-0.1+0.1)/10 from test; o.k. 3.3
select 33/10-0.1+0.1 from test; fails 3.0
select 33*0.1 from test; o.k. 3.3
Im using v1.7.1 in standard or memory mode
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

197
HyperSQL Database Engine (HSQLDB) / Bugs / #197 transaction not rolled back
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using Hsqldb 1.7.1 (latest stable). The database is
in multi-user mode with the following flags:
-trace &quot;true&quot; -silent &quot;false&quot;
If a JDBC client is interrupted abruptly then his
undergoing transaction(autocommit = false) is not
aborted (rolled back), although the server displays the
fact that it has disconnected this interrupted client!
So, the server is aware of the transaction voidness but
doesn't roll it back.
There's another thing to add here. The DatabaseMetaData
for hsql says that it supports ONLY the READ_UNCOMMITED
level of transaction isolation.
Isn't it a pitty? I personally like Hsql for it's light
load in terms of memory and cpu time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

198
HyperSQL Database Engine (HSQLDB) / Bugs / #198 features webpage needs update
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One of your online documentation pages - 
http://hsqldb.sourceforge.net/2/DocsandDev/features.html -
states that a range of _current_ restrictions _will_ be
solved by summer _2002_ (I put that paragraph at the
end of this posting).
By now, it is December-2002.
Some visitors might draw false conclusions from that
with regard to the health of this project. One might
think, that work stopped, or that work proceeds much
slower now, or that documentation is out of date. 
Eitherway, this doesn't add to the visitors (especially
hasty ones) trust into this project positively. 
BTW, from looking at various indicators I can see that
this project is proceeding very well indeed.
Additionally some visitors might be left
confused/insecure as to what restrictions there
_really_ are currently.
Thanks for your works.
Best regards.
&lt;snip&gt; 
Current restrictions are:
* GROUP BY is limited (solved by June, 2002)
* HAVING, ANY, ALL are currently not implemented
(solved by August, 2002)
* No triggers and views (some functionality here
for v .1.7 of hsqldb, coming within days)
* The size of Binary data is limited to about 32 KB
(because UTF is used) (solved by June, 2002)
* No server side cursors (here is a workaround for
selecting big results) (may already be solved)
* Empty space in the database file is not always
reused (here are the details and a workaround) (solved
by June, 2002)
* Does not yet conform to ACID or true SQL-92 or
JDBC 2 or 3 (targeted for June, 2002) 
&lt;/snip&gt;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

199
HyperSQL Database Engine (HSQLDB) / Bugs / #199 Column.java  BINARY type bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is wrong:
hTypes.put(&quot;B[&quot;, new Integer(Types.BINARY));
it should be:
hTypes.put(&quot;[B&quot;, new Integer(Types.BINARY));
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

200
HyperSQL Database Engine (HSQLDB) / Bugs / #200 Strange problem with text table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to create a text table with following code:
public static void main(String[] args) throws Exception {
Class.forName ( &quot;org.hsqldb.jdbcDriver&quot; );
Connection userDBConn = 
DriverManager.getConnection(&quot;jdbc:hsqldb:&quot; 
+ &quot;userTestDB&quot;, &quot;SA&quot;, &quot;&quot;);
Statement stmt = userDBConn.createStatement();
stmt.execute(&quot;CREATE TEXT TABLE ACCOUNT
(USERNAME CHAR(20) NOT NULL,&quot; +
&quot;PASSWORD CHAR(20) NOT NULL, &quot; +
&quot;PRIMARY KEY(USERNAME))&quot;);
stmt.execute(&quot;SET TABLE ACCOUNT SOURCE&quot; 
+ &quot;\&amp;quot;testAccounts.db;fs=|\&amp;quot;&quot;);
stmt.execute(&quot;insert into ACCOUNT&quot; 
+ &quot;(USERNAME,PASSWORD) values('foo','bar')&quot;);
ResultSet rs = stmt.executeQuery(
&quot;select * from ACCOUNT&quot;);
while(rs.next()) {
System.out.println(&quot;Row: &quot; + rs.getString(1) + 
rs.getString(2));
}
stmt.close();
userDBConn.close();
}
Table is created ok and value foo/bar is added to the 
table. After code is executed, size of testAccounts.db is 
5 bytes, it contains only text foo and line change after it. 
Password column's value bar is not added to the file. If I 
select * from account after that code is executed, it 
returns only foo for username and 0 for password. If I 
use memory table (remove &quot;text&quot; from create table 
command) everything works ok.
I have tested this with hsqldb version 1.7.1 and 1.7.2 
alpha H. Same problem with both versions. Is this just a 
stupid user error?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

201
HyperSQL Database Engine (HSQLDB) / Bugs / #201 Text file sql infinitely slow response
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was excited about the text file sql capabilities. so I decided 
to try v 1.7.1 on a 28000 record file and noted the response 
time for a select count(*) at about 4 secs on a 384MB 
850Mhz NT machine; HOWEVER, on a 350000 record file 
the response time was ghastly - the query never returned 
after 5 minutes. 
Anybody have similar problems?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

202
HyperSQL Database Engine (HSQLDB) / Bugs / #202 VIEWS and aggregate function no results (172_I)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have discovered this fast/small SQL engine yesterday - 
this is exactly I would like to use in home projects. This 
will prevent me using Access for which I have to log with 
ODBC. An other good alternative would be to choose 
mySQL but I think it too big for such a small project !
Great product - I immediately thought trying my small 
application over it transfering data (it is easy with 
transfer even if there is no Views support).
Unfortunately I was using &quot;Having&quot; and &quot;aggregate&quot; 
functions (SELECT X1,sum(X2) as Y FROM Z HAVING 
sum(X2) &gt; 0) - in 1.7.2_I you can define views with those 
functions but they don't show anything when run !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

203
HyperSQL Database Engine (HSQLDB) / Bugs / #203 Exception on insert with select from..
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unexpected token: ( in statement [insert
test case:
create table test_table
( num integer, str varchar)
create table test_table_src
( num_src integer, str_src varchar)
insert into test_table_src
( num_src, str_src)
values
(123, 'qwe')
insert into test_table
( num, str)
(select 123, str_src from test_table_src )
and result is
SQL 
Error 
Unexpected token: ( in statement [insert into test_table
( num, str)
(select 123, str_src from test_table_src )
] / Error Code: -11 / State: 37000 1 row(s) in 0 ms
Serg
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

204
HyperSQL Database Engine (HSQLDB) / Bugs / #204 dup idx name on diff. tbls not allowed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the following 4 SQL commands are issued via JDBC the
last one will result in an SQLException. Since the 2nd
index is on the table bar it should not conflict with
one of the same name on foo.
CREATE TABLE foo (myColumn int, foocol int, primary
key (myColumn, foocol));
CREATE TABLE bar (myColumn int, barcol int, primary
key (myColumn, barcol));
CREATE INDEX IdxMyCol on foo (myColumn);
CREATE INDEX IdxMyCol on bar (myColumn);
Error:
SQLException(Index already exists in statement [CREATE
INDEX IdxMyCol on bar (myColumn)])
Details:
Server was started out of the box using the
runServer.bat on a Win2K machine. 2 tests were
conducted. Both the in memory database and the on disk
database. For the on dist test a database name of
&quot;test&quot; was used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

205
HyperSQL Database Engine (HSQLDB) / Bugs / #205 previous() does't work when afterlast
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When you do this:
...
System.out.println(&quot;next next next&quot;);
while(rset.next())
System.out.println(...);
System.out.println(&quot;previous previous previous&quot;);
while(rset.previous())
System.out.println(...);
the output must be:
next next next
1
2
3
4
...
previous previous previous
...
4
3
2
1
It doesn't work because previous returns false when 
afterLast condition ocurrs.
I think the problem is the order of condition evaluation at 
jdbcResultSet.java. 
If you move up afterlast condition evaluation (before 
Empty resultset or no valid row) and recompile the 
output is OK. I don't know why.
HSQLDB version is 1.7.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

206
HyperSQL Database Engine (HSQLDB) / Bugs / #206 GROUP BY with SUM() returns fantom row
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using ALPHA-J on Win2K, Sun JDK 1.4.1_01
When the GROUP BY and SUM() are used on an empty table
a row of nulls is returned.
create table foo (word varchar(20), fooi integer);
select word, sum(fooi) from foo group by word;
returns... (null,null)
select word from foo group by word;
returns an empty result set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

207
HyperSQL Database Engine (HSQLDB) / Bugs / #207 Boolean object failed to be serialized
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey I guess Fred,
the following tests failed with the exception down.
Class.forName(&quot;org.hsqldb.jdbcDriver&quot;);
Connection conn = DriverManager.getConnection
(&quot;jdbc:hsqldb:hsql://localhost&quot;, &quot;sa&quot;, &quot;&quot;);
String sqlStatement = &quot;insert into AVMerkmalszustand 
(ID_Parent, ID_AttributeDefinition, Value, 
SerializedObject) Values (?, ?, ?, ?)&quot;;
PreparedStatement stat = conn.prepareStatement
(sqlStatement);
stat.setObject(1, new Integer(1)); // ID_Parent
stat.setObject(2, new Integer(1)); // 
ID_AttributeDefinition
stat.setObject(3, new String (&quot;Ein Test&quot;));
stat.setObject(4, new Boolean (true)); // OTHER
stat.execute();
The coloumn 4 is from type Other.
The exception is:
java.sql.SQLException: Invalid escape character: 
hexadecimal string contains non hex character in 
statement [insert into AVMerkmalszustand (ID_Parent, 
ID_AttributeDefinition, Value, SerializedObject) Values 
(1, 1, 'Ein Test', TRUE)]
If I use a 
stat.setObject(4, new Boolean (true), Types.OTHER);
It works fine.
Alex
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

208
HyperSQL Database Engine (HSQLDB) / Bugs / #208 GRANT before CREATE VIEW + ISNULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my test application, I have re-written some fine views - 
and noticed these 2 points :
1-In script file, GRANT SELECT ON view_XY TO 
PUBLIC is done before CREATE VIEW view_XY AS ... 
this means, I got often errors and I've to correct the 
script file before starting database server (I am running in 
server mode).
2. How is working ISNULL(x,y) - as I didn't make it - I've 
used CASEWHEN(x,y,z) ! What do you think ? Is this 
command broken or I should exercice a bit more ?
Yours
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

209
HyperSQL Database Engine (HSQLDB) / Bugs / #209 Slow query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have provided a DB and query. The query executes 
very slowly. However, if I break it up into several smaller 
queries that do the same thing, they execute much 
faster (also included). Both queries create only 448 
rows. My assumption is that the query optimizer isn't 
working correctly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

210
HyperSQL Database Engine (HSQLDB) / Bugs / #210 Incorrect number of rows in GROUP BY query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A query with a MIN() aggregate function and a GROUP BY 
clause, where there are no rows that qualify for the 
WHERE clause, returns one row with only null values.
According to ISO 9075:1999, part 2, subclause 7.11,
&quot;&lt;query specification&gt;&quot;, general rule 1bI, such a query 
should return no rows:
&quot;If T has 0 (zero) groups, then the result of the &lt;query 
specification&gt; is an empty table&quot;.
Example:
SELECT id, MIN(date_of_birth)
FROM person
GROUP BY id
This query returns a row with two null values, when table 
&quot;person&quot; is empty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

211
HyperSQL Database Engine (HSQLDB) / Bugs / #211 Unhappy with group by
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Technically this is a bug, because of the documentation, but
it may be an oversight:
our SQL generator uses &quot;...group by x...&quot; where x is a 
column number containing an expression. 
Under HSQLDB if the expression is a date operator (e.g 
quarter(&lt;date&gt;) ) this does not work (SQL error).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

212
HyperSQL Database Engine (HSQLDB) / Bugs / #212 Index not dropped when table dropped.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have an application that will periodically drop and
recreate a table. I find that in one particular case
this seem to fail regularly as an index gets left behind. 
When I execute the following script it will
consistantly fail.
create table WordTable( excludeWord INTEGER(1), soundex
varchar(4), word varchar(215), primary key( word ));
create index WTsoundexIdx on WordTable( soundex );
create index WTexcludeIdx on WordTable( excludeWord );
drop table WordTable;
create table WordTable( excludeWord INTEGER(1), soundex
varchar(4), word varchar(215), primary key( word ));
create index WTsoundexIdx on WordTable( soundex );
create index WTexcludeIdx on WordTable( excludeWord );
I get the following when the above is executed...
01:38:22] Using Driver Class(org.hsqldb.jdbcDriver)
Version 1.7
[01:38:22] Driver States that it is not JDBC Compliant,
Some Functions May Not Work Correctly
[01:38:23] Connection to iSQL Service [hsqldb] is
sucessful.
[01:38:37] Executing Statement (create table WordTable(
excludeWord INTEGER(1), soundex varchar(4), word
varchar(215), primary key( word ))).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create index
WTsoundexIdx on WordTable( soundex )).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create index
WTexcludeIdx on WordTable( excludeWord )).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (drop table WordTable).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create table WordTable(
excludeWord INTEGER(1), soundex varchar(4), word
varchar(215), primary key( word ))).
[01:38:37] Rows Affected (0).
[01:38:37] Executing Statement (create index
WTsoundexIdx on WordTable( soundex )).
[01:38:37] frmiSQLMain::handleSQLException()
[01:38:37] Exception :: SQLException(Index already
exists in statement [create index WTsoundexIdx on
WordTable( soundex )])
[01:38:37] Executing Statement (create index
WTexcludeIdx on WordTable( excludeWord )).
[01:38:37] Rows Affected (0).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

213
HyperSQL Database Engine (HSQLDB) / Bugs / #213 foreign-key constraint test failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following foreign-key constraint test failed:
// hsqldb version Version 1.7.1 released on 5 October 
2002 
// overview test:
// create table person
// insert row
// create table address
// insert row
// insert row
// -- start test--
// insert row which should fail 
// update row which should fail, turns out to be 
successful !
// -- end test --
// drop table Address;
// drop table Person;
create table Person (
personID INTEGER,
firstname VARCHAR(30),
lastname VARCHAR(30),
dateOfBirth DATE,
constraint person_pk primary key (personID),
constraint person_sk1 unique(firstname, lastname)
);
insert into person (personID, firstname, lastname, 
dateOfBirth)
values (1, 'albert', 'everts', '1961-01-01');
create table Address (
addressID INTEGER,
streetname VARCHAR(30),
housenumber INTEGER,
city VARCHAR(30),
personID INTEGER,
constraint address_pk primary key (addressID),
constraint address_sk1 unique(streetname, 
housenumber, city),
constraint address_person_fk foreign key (personID) 
references person(personID)
);
insert into address (addressID, streetname, 
housenumber, city, personID)
values (1, 'street', 123, 'amsterdam', 1);
insert into address (addressID, streetname, 
housenumber, city, personID)
values (2, 'lane', 987, 'amsterdam', 1);
SET AUTOCOMMIT FALSE;
SET READONLY FALSE;
SET REFERENTIAL_INTEGRITY TRUE;
-- this should fail because personID 123 does not exist
insert into address (addressID, streetname, 
housenumber, city, personID)
values (3, 'square', 456, 'amsterdam', 123);
-- OK : Integrity constraint violation: 
ADDRESS_PERSON_FK
-- this should fail because personID 123 does not exist
update address 
set
personID = 123
where addressID = 1;
-- FAIL: the test failed, because the update was 
successful !!!
COMMIT;
CHECKPOINT;
Can you please solve this issue? 
(btw: other tests concerning foreign keys I tried, were 
successful ! )
Thanks!
Regards,
Albert
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

214
HyperSQL Database Engine (HSQLDB) / Bugs / #214 Binary data and 'in' operator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Actually, I've found two bugs. Please, see the following 
script:
-------------------------------------------------------------------
--Create two tables (same structure)
create table test_a (oid BINARY(2),data varchar(10));
create table test_b (oid BINARY(2),data varchar(10));
--Insert data into table_a
insert into test_a values('0001','A' );
insert into test_a values('0002','B' );
insert into test_a values('0003','C' );
insert into test_a values('0004','D' );
--Insert data into table_b (first and second rows of 
table_a)
insert into test_b values('0001','A' );
insert into test_b values('0002','B' );
-------------------------------------------------------------------
The following statements must produce the same
results (each statement must produce two rows):
-------------------------------------------------------------------
-- Set 1
select * from test_b where data in (select data from 
test_a);
select * from test_a where data in (select data from 
test_b);
-- Set 2
select * from test_b where oid in (select oid from test_a);
select * from test_a where oid in (select oid from test_b);
-- Set 3
select * from test_b where rawtohex(oid) in (select 
rawtohex(oid) from test_a);
select * from test_a where rawtohex(oid) in (select 
rawtohex(oid) from test_b);
-- Set 4
select * from test_b where rawtohex(test_b.oid) in 
(select rawtohex(test_a.oid) from test_a);
select * from test_a where rawtohex(test_a.oid) in 
(select rawtohex(test_b.oid) from test_b);
-------------------------------------------------------------------
However, the output is:
Set 1 (works fine)
-------------------------------------------------------------------
OID DATA 
--------- ---- 
[B@158bb8 A 
[B@7f4ec B 
2 row(s) in 10 ms
OID DATA 
--------- ---- 
[B@1836ed A 
[B@3e0ebb B 
2 row(s) in 10 ms
-------------------------------------------------------------------
Set 2 (doesn't work. Problem with binary data and using 
of 'in'? BUG 1!):
-------------------------------------------------------------------
OID DATA 
--- ---- 
0 row(s) in 0 ms
OID DATA 
--- ---- 
0 row(s) in 0 ms
-------------------------------------------------------------------
Set 3 (Trying to work arround set 2. Works horrible. 
I think rawtohex confuses the inner select &quot;oid&quot; with the 
outer &quot;oid&quot; and allways returns true. BUG 2!)
-------------------------------------------------------------------
OID DATA 
--------- ---- 
[B@158bb8 A 
[B@7f4ec B 
2 row(s) in 10 ms
OID DATA 
--------- ---- 
[B@1836ed A 
[B@3e0ebb B 
[B@39443f C 
[B@2fae45 D 
4 row(s) in 0 ms
-------------------------------------------------------------------
Set 4 (trying to work around Set 3 + Set 1 problem) 
works fine (output == set 1)
-------------------------------------------------------------------
OID DATA 
--------- ---- 
[B@158bb8 A 
[B@7f4ec B 
2 row(s) in 10 ms
OID DATA 
--------- ---- 
[B@1836ed A 
[B@3e0ebb B 
2 row(s) in 20 ms
-------------------------------------------------------------------
Ok, that's all. I hope you solve this soon as possible.
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

215
HyperSQL Database Engine (HSQLDB) / Bugs / #215 Text Table Problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using text tables, the last column doesn't (on my 
system) get persisted to the files. When the server is 
shutdown and restarted, the missing column causes an 
exception.
My System:
Win2k SP3
Java 1.4.1
HSQLDB 1.7.1
To Reproduce Bug:
Start attached DB in Server Mode
Open Manager and send CHECKPOINT cmd
Shutdown DB
Examine the CSV and note the absence of the last 
column.
Start DB
Open Manager app
SELECT * FROM groupone
Exception thrown in server window:
java.lang.ClassCastException
at org.hsqldb.DatabaseRowOutput.writeData
(Unknown Source)
at org.hsqldb.Result.getBytes(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

216
HyperSQL Database Engine (HSQLDB) / Bugs / #216 Text Table Field Concatenation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 1.7.2 Alpha L 
Zero-length characters fields when concatenated with 
non-null fields yield result in null or zero-length string.
For example:
SELECT (Brand + Description + Info) AS Descr from 
MODEL
If any of the concatenantion fields are zero-length then 
Descr will be zero-length.
Using the parameter: empty_is_null=false
Thank You
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

217
HyperSQL Database Engine (HSQLDB) / Bugs / #217 shutdown compact corrupts data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After doing a &quot;shutdown compact&quot; in Version 1.72aL I 
read the lines
error in /project/db/mp3.script line: 2
General error in statement [CREATE CACHED TABLE 
ARTIST ...
at System.out.
After that all data files are gone and the unprocessed 
tables are not in the script any more.
It was possible to track it somewhat down; it seems an 
index gets inserted which wasn't removed in
org.hsqldb.Database$DatabaseObjectNames.addName
DDL to reproduce:
CREATE CACHED TABLE base (
base int not null primary key,
name varchar not null,
path varchar not null,
removable bit not null
);
CREATE CACHED TABLE artist (
artist int not null primary key,
name varchar not null,
simplename varchar not null,
unique (name)
);
CREATE INDEX artistsimplename ON artist
(simplename);
CREATE CACHED TABLE title (
title int not null primary key,
name varchar not null,
simplename varchar not null,
unique (name)
);
CREATE INDEX titlesimplename ON title(simplename);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

218
HyperSQL Database Engine (HSQLDB) / Bugs / #218 dates are not being normalized in CURDATE()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently, the DATE SQL type is being treated exactly 
like the TIMESTAMP type. Instead, the DATE data 
should be &quot;normalized&quot;, as per the java.sql.Date class 
documentation:
&quot;To conform with the definition of SQL DATE, the 
millisecond values wrapped by a java.sql.Date 
instance must be 'normalized' by setting the hours, 
minutes, seconds, and milliseconds to zero in the 
particular time zone with which the instance is 
associated.&quot;
The function curdate() is not normalizing the dates it 
returns. This allows for an &quot;invalid&quot; date to be created. 
Here is an example of this bug:
create table date_bug( date DATE )
insert into date_bug values ( curdate() )
select * from date_bug where date &lt;= curdate()
-- should return 1 row - works ok
select * from date_bug where date &gt;= curdate()
-- should return 1 row - returns none
select * from date_bug where date &lt;= '2003-01-23'
-- manually specifying today´s date should yield one 
row, but instead none are returned
select * from date_bug where date &gt;= '2003-01-23
-- manually specifying today´s date should yield one 
row, works ok
Hope this helps. If you need further information, 
contact me at sieira@usa.net.
Thanks for the great program.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

219
HyperSQL Database Engine (HSQLDB) / Bugs / #219 Group By returning null values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a simple table like this:
create table test (a varchar(100),b numeric)
and then you execute this:
select a, sum(b)
from test
group by a
you will get a single row with null values. The expected 
result is no rows.
If you execute 
select a, sum(b)
from test
you will get a single row with null values. The expected 
result is a SQL error like this &quot;not a single-group group 
function&quot;.
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

220
HyperSQL Database Engine (HSQLDB) / Bugs / #220 LEFT JOIN regression from Alpha J =&gt; L
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Alpha J, I had built several queries using LEFT JOIN 
to detect inequality in table1.id = table2.id such a way 
table2.id is returned null !
On application testing with (Alpha L), I got bad results 
(null are not shown) : Alpha K, Alpha L and even latest 
Alpha M !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

221
HyperSQL Database Engine (HSQLDB) / Bugs / #221 now() doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Whats happened with now()? It doesn't work in alpha_m.
Some changes at Tokenizer.wasValue() are in conflict 
with &quot;now()&quot;. If you execute:
select now() from dual
will get:
Unexpected token: ( in statement [select now() from 
dual] / Error Code: -11 / State: 37000
To solve this problem I removed sToken.equals(&quot;NOW&quot;) 
from return (at line 253 of Tokenizer.java). It works but I 
don't know the effects of this change.
Why &quot;NOW&quot; is there? Future features like Oracle's 
SYSDATE?
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

222
HyperSQL Database Engine (HSQLDB) / Bugs / #222 Log-Thread not exiting if any connect fails before
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
Using the henplus JDBC Shell 
&lt;http://henplus.sourceforge.net/&gt; 
I noticed, that the Logger thread in hsqldb is not exiting 
properly, if any of the connect attempts to a database 
failed because of user/password failure for instance. 
Why I noticed this with henplus is, because henplus first 
tries to connect to the database just with the JDBC-URL 
alone and if this fails, prompts for the password. 
This means, that the first connect will always fail, while 
the second will succeed, if the user/password is right. 
The problem is, that hsqldb starts the Logger thread with 
the first attempt to connect to the database and 
increments the usage count .. however that connection 
never gets used, because connecting fails and throws 
an SQL-Exception (see 
jdbcConnection::openStandalone()). This means, that the 
usage count is always the number of all _attempted_ 
connects not real connects. 
I did a simple fix, see attached patch. This patch 
initializes the usage count with zero and _after_ the 
connect is successful (i.e. if no Exception has been 
thrown), the usage count is incremented. This will make 
sure, that the last active connection, that is close()ed, 
will shut down the Logger thread correctly. 
Note, however, that this is not a complete fix to the 
problem. If we get _any_ connection that connection that 
connects correcly, then this solution will work, since the 
database is removed and the Logger thread is closed in 
the close() of that very connection if the usage count 
turns out to be zero. However, if _no_ connection will 
succeed, then we will still have one database in the 
hashtable since no close() will run through (this is 
another problem: in finalize(), close() is called; however if 
this is a jdbcConnection that failed to connect, then the 
session is 'null' and executing a shutdown on that 
session will fail as well -- so the finalizer thread throws a 
NullPointerException. The finalaizer-Thread better should 
catch any Throwable instead of only a SQL-Exception).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

223
HyperSQL Database Engine (HSQLDB) / Bugs / #223 LEFT JOIN AND Null Values (ALPHA J)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example :
DROP TABLE T_BOSS IF EXISTS;
DROP TABLE T_EMPLOYEE IF EXISTS;
CREATE TABLE T_BOSS (FIRST VARCHAR,LAST 
VARCHAR);
CREATE TABLE T_EMPLOYEE (FIRST 
VARCHAR,LAST VARCHAR);
INSERT INTO T_BOSS VALUES ('Ludovic','ANCIAUX');
INSERT INTO T_EMPLOYEE VALUES 
('Ludovic','ANCIAUX');
INSERT INTO T_EMPLOYEE VALUES ('Bill','GATES');
SELECT * FROM T_EMPLOYEE LEFT JOIN T_BOSS 
ON 
T_EMPLOYEE.FIRST = T_BOSS.FIRST WHERE 
T_BOSS.FIRST is Null;
You should have
&quot;Bill&quot;,&quot;Gates&quot;,Null,Null
but instead you got :
&quot;Ludovic&quot;,&quot;Anciaux&quot;,Null,Null
&quot;Bill&quot;,&quot;Gates&quot;,Null,Null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

224
HyperSQL Database Engine (HSQLDB) / Bugs / #224 Error with aggregate functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The statement 
select sum(field1) * sum(field2) from table1 
..works if field1 and field2 is of type FLOAT, but if it is of 
type BIGINT, it does not work. The I get this error: 
S1000 General error java.lang.ClassCastException: 
java.lang.Long in statement ...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

225
HyperSQL Database Engine (HSQLDB) / Bugs / #225 Strange Exceptions with Alpha M
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hey,
I'm using the 1.7.2 since a couple of days in my test 
enviorment. So far everything fine.
Since yesterday I'm getting strange exceptions:
java.sql.SQLException: General error
at 
sun.jdbc.odbc.JdbcOdbc.throwGenericSQLException
(JdbcOdbc.java:6235)
at sun.jdbc.odbc.JdbcOdbc.SQLFreeEnv
(JdbcOdbc.java:2776)
at sun.jdbc.odbc.JdbcOdbcDriver.closeConnection
(JdbcOdbcDriver.java:839)
at sun.jdbc.odbc.JdbcOdbcConnection.close
(JdbcOdbcConnection.java:733)
at 
de.tc.base.datasourceManager.DatasourceConnection.cl
ose(DatasourceConnection.java:129)
at 
de.tc.base.datasourceManager.DatasourceConnection.fi
nalize(DatasourceConnection.java:156)
at java.lang.ref.Finalizer.invokeFinalizeMethod
(Native Method)
These General error exceptions occours too if I try to 
run the following script at once. If I do it in two steps it 
works.
drop table Literaturreferenz if exists;
create cached table Literaturreferenz
(
ID int not null identity,
ID_Literaturverweis int not null,
ID_Merkmalsgruppe int not null,
ID_Taxonomie int not null,
ID_Qualifier int null
);
alter table Literaturreferenz ADD CONSTRAINT 
fkLiteraturverweis foreign key (ID_Literaturverweis) 
references Literaturverweis (ID) on delete cascade;
alter table Literaturreferenz ADD CONSTRAINT 
fkMerkmalsgruppe foreign key (ID_Merkmalsgruppe) 
references Merkmalsgruppe (ID) on delete cascade;
alter table Literaturreferenz ADD CONSTRAINT 
fkTaxonomie foreign key (ID_Taxonomie) references 
Taxonomie (ID) on delete cascade;
alter table Literaturreferenz ADD CONSTRAINT 
fkQualifier foreign key (ID_Qualifier) references Qualifier 
(ID) on delete cascade;
If I do the constraints into the create table definition the 
whole create won't work.
These general Exception seemed not to be very 
important becauseI can still work with the database and 
be happy. But these exception above occoured after an 
insert of 32.000 records and that's was strange because 
all records are in the database (for my luck)
Alex
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

226
HyperSQL Database Engine (HSQLDB) / Bugs / #226 Driver.connect not verifying user/password
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Build: 1.7.2 
Email: kyle@lucentradius.com
If I connect to the Server with an invalid user or
invalid password (with a good username) I get a
connection, but the next db access via the connection
fails with a:
java.sql.SQLException: User not found: SAS
This exception should be thrown from the connect method.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

227
HyperSQL Database Engine (HSQLDB) / Bugs / #227 Transaction, UK constraint, Rolback produce lost of data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I found some problems while using last stable version of 
hsqldb (1.7.1.).
Transaction and Unique Constraint violation and 
Rollback could produce unreliable db, and lost of data.
I try this (from Database Manager):
CREATE TABLE TUKR(
ID integer NOT NULL PRIMARY 
KEY,
NAME varchar(20) NOT NULL,
VALUE integer,
CONSTRAINT TUKR01
UNIQUE (NAME)
);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(1, 'Name 1', 1);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(2, 'Name 2', 2);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(3, 'Name 3', 3);
INSERT INTO TUKR(ID, NAME, VALUE)VALUES
(4, 'Name 4', 4);
SET AUTOCOMMIT FALSE;
UPDATE TUKR
SET NAME='Name 1'
WHERE ID=4;
// unique constraint violation occures
// off course in general case try:
ROLLBACK;
//S1000 General error java.lang.NullPointerException 
in ... Code -40/S1000
After that depend of the amount and type of data in 
destination table (in this case TUKR), some data would 
be lost, additonaly many other commands produce 
same S1000 error (including SHTUDOWN).
From JDBC connection behaviour is exactly the same.
PK violation lads to similar results.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

228
HyperSQL Database Engine (HSQLDB) / Bugs / #228 DatabaseManagerSwing
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I recently downloaded/installed hsqldb(1_7_1). I 
tried running the DatabaseManagerSwing class and 
get the following:
Exception in thread &quot;main&quot; 
java.lang.NullPointerException at 
javax.swing.ImageIcon.&lt;init&gt;(ImageIcon.java:138)
at org.hsqldb.util.CommonSwing.getIcon(Unknown 
Source)
at org.hsqldb.util.DatabaseManagerSwing.main
(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.main
(Unknown Source)
It apppears&quot;hsqldb.gif&quot; is not in the jar. Where did I 
go wrong or was it mistakenly left out of the package?
Thanks,
Frank
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

229
HyperSQL Database Engine (HSQLDB) / Bugs / #229 Foreign key constraint error with trees
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The foreign key constraint does not work correctely
when used within one table.
Example: The table A below is used to create a tree
structure in a database table.
DROP TABLE A;
CREATE TABLE A (
ID INTEGER PRIMARY KEY,
ID_PARENT INTEGER,
PAYLOAD VARCHAR( 100 ),
CONSTRAINT TREE_CONST FOREIGN KEY( ID_PARENT )
REFERENCES A( ID )
);
It should be possible to fill the table with the nodes
of the tree:
INSERT INTO A VALUES (1,1,'ROOT');
INSERT INTO A VALUES (2,1,'NODE 1' );
INSERT INTO A VALUES (3,1,'NODE 2' );
...
Though the first insert would create a legal table
contents, it creates an SQL Error: 
--------------------------------------------------------------------------------------------------------------------------------------
Integrity constraint violation: TREE_CONST table: A in
statement [INSERT INTO A VALUES (1,1,'ROOT');
] / Error Code: -8 / State: 23000 
Workaround:
insert the first line directely into the hsqldb.script
file, restart hsqldb. This creates the root node, all
other inserts work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

230
HyperSQL Database Engine (HSQLDB) / Bugs / #230 error 23000 after alter table with PK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I am using HSQLDB version 1.7.1.
I am running the following:
//-----------------------------------------------------
//drop table b;
//drop table a;
create table a
(
id integer primary key
);
create table b 
(
id integer, 
id_a integer,
CONSTRAINT constraint1 
FOREIGN KEY(id_a) REFERENCES a(id)
);
insert into a (id) values (1);
insert into a (id) values (2);
insert into b (id,id_a) values(100,1);
alter table a add column amount integer default 0 not 
null;
insert into b (id,id_a) values(100,2);
//-----------------------------------------------------
The last insert to table b fails with error 23000 - Integrity 
constrains Violation.
Only stopping HSQLDB, and starting it again will allow 
that insert to work properly.
It looks like a BUG to me.
Any suggestions?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

231
HyperSQL Database Engine (HSQLDB) / Bugs / #231 IDENTITY skips numbers when table updated
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think I found a bug in ALPHA M:
I have noticed in my application that a table with an 
IDENTITY column skips numbers when any row of the 
table is updated. Here is an example:
CREATE CACHED TABLE Test
(
id INTEGER IDENTITY
str VARCHAR(80)
)
INSERT INTO Test (str) VALUES ('foo')
CALL IDENTITY() --- reports 0
INSERT INTO Test (str) VALUES ('foo')
CALL IDENTITY() --- reports 1
UPDATE Test SET str='bar' WHERE id=0
INSERT INTO Test (str) VALUES ('foo')
CALL IDENTITY() --- reports 4 instead of 2
Here is the final contents of the table:
ID STR 
-- --- 
0 bar 
1 foo 
4 foo 
Contact me at sieira@usa.net if further clarifications 
are needed.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

232
HyperSQL Database Engine (HSQLDB) / Bugs / #232 Foreign-key constraint fails on update
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have encountered a problem with foreign keys. I´ve 
read that others have mentioned this problem before me 
and that it has been fixed in later versions.
I first used hsqldb_1_7_1 and then tried the same in 
hsqldb_1_7_2_alpha but with the same result.
I´ve created to tables:
CREATE TABLE team(name VARCHAR(20) NOT NULL 
PRIMARY KEY)
CREATE TABLE user(username VARCHAR(15) NOT 
NULL PRIMARY KEY,level INTEGER NOT 
NULL,password VARCHAR(20) NOT NULL,teamname 
VARCHAR(20) NOT NULL, CONSTRAINT fk_teamname 
FOREIGN KEY(teamname) REFERENCES team(name))
I then add a team and some users (on inserts-
statements the constraint works fine), when I try to 
update a user and changing his team to one that does 
not exist, it still works. That is the constraint has no 
effect.
Questions:
Is there any way I can work around this problem, or 
write the syntax in another way?
Is this problem supposed to be solved in the 
1_7_2_alpha-version?
Best regards / Philip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

233
HyperSQL Database Engine (HSQLDB) / Bugs / #233 DatabaseManagerSwing misses Icon
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When starting org.hsqldb.util.DatabaseManager I get a
NullPointerException:
java.lang.NullPointerException
at javax.swing.ImageIcon.&lt;init&gt;(ImageIcon.java:134)
at org.hsqldb.util.CommonSwing.getIcon(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.main(Unknown
Source)
at org.hsqldb.util.DatabaseManagerSwing.main(Unknown
Source)
The reason is quite simple: There is no hsqldb.gif
under org/hsqldb/util in the JAR file (or anywhere else
in the 1.7.1 release distribution).
Could you please add that image file (and maybe even
add that icon to the AWT Database Manager)?
Otherwise your database is great. I currently use it to
replace a big fat Oracle database during development
work and regression testing :-)
Hendrik Wördehoff
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

234
HyperSQL Database Engine (HSQLDB) / Bugs / #234 NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello 
we are using Hsqldb 1.7.2. The database is 
in multi-user mode with the following flags: 
-trace &quot;true&quot; -silent &quot;false&quot;
We are getting NullPointerException in database 
window.The following test condition is observed:
To reproduce the bug, make sure HSQL database is 
running for very long time and DB is quite big.ie size of 
the database is 
FileName Size
Database.backup---&gt;22.8 MB
Database.script-----&gt;10.3 MB
Database.data------&gt;40.2 MB 
Logged in to DB as Administrator
We are using Connection pool to update 3 hsqldb 
database using type 4 driver of hsqldb.
Right below the line &quot;Listening for connections... we get..
java.lang.NullPointerException
at org.hsqldb.Session.check(Unknown 
Source)
at org.hsqldb.Parser.parseTableFilter
(Unknown Source)
at org.hsqldb.Parser.parseSelect(Unknown 
Source)
at org.hsqldb.Parser.processSelect(Unknown 
Source)
at org.hsqldb.Database.execute(Unknown 
Source)
at org.hsqldb.serverconnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java.484)
The above error occurs even for latest alpha versions 
too..
Database.properties contents are shown below:
#HSQL database
#Sat Feb 22 23:23:40 GMT+05:30 2003
sql.strict_fk=true
readonly=false
sql.strong_fk=true
hsqldb.version=1.7.2
hsqldb.log_type=0
version=1.7.2
hsqldb.cache_scale=14
sql.compare_in_locale=false
sql.month=true
hsqldb.log_size=200
modified=yes
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.2
hsqldb.compatible_version=1.7.2
sql.enforce_size=false
Is there any workaround to solve this. 
Thanks in advance
Neppo/Srini
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

235
HyperSQL Database Engine (HSQLDB) / Bugs / #235 ClassLoader problem causing file lock error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you attempt to open a connection on Windows 
through two seperate ClassLoader(CL) who each have 
their parent set to null you will get the &quot;DB in use by 
another process error&quot;. This occurs even if the first CL 
has been null'd because either the lock hasn't been 
GC'd or it has to do with Windows not releasing the lock 
properly.
The easiest way to reproduce this is to create two JUnit 
tasks which both attempt to open a connection then run 
those JUnit tasks through ANT.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

236
HyperSQL Database Engine (HSQLDB) / Bugs / #236 PowerBuilder 8.01 crashed when trying to connect to Hsqldb
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The issue could be PowerBuilder itself, but I post it here 
to see if it rings any belt.
From PowerBuilder 8 IDE, I can connect to Oracle 8,
Informix 7, and SqlAnywhere (ASA) 6 JDBC drivers.
But, when I connect to Hsqldb 1.72 rev M, then PB will 
crash.
Is it because Hsqldb does not implement 
getColumnDisplaySize nor schema? I don't know.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

237
HyperSQL Database Engine (HSQLDB) / Bugs / #237 Problems Running on NetWare 6
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
O/S: Novell NETWARE v.6.0SP2 patched to updates (noted
below)
JVM: JVM Version 1.3.1_06 patched to level noted below.
First confirmed as a JVM (*see below*) problem by
original submitter, Dick Hildreth, in the Open
discussion forum and currently under study. Mr.
Hildreth's detailed report of the problem follows,
followed by further posts from Mr. Hildreth and
Maintainer. Original Forum thread is at:
https://sourceforge.net/forum/message.php?msg_id=1912883
Problem report follows:
Background
Rows were disappearing from the hSQLdb 1.7.1 run
database.  When a record was updated, all records with
key values (char type key) lexically before the
selected one would disappear. No deletes were found in
the .script file yet after doing a SELECT query, the
records would be missing. Also, running a script
command in the DatabaseManager and looking at the
resultant file, the records
would also be missing. This only occurred when the
hSQLdb client was running on the NetWare server (either
a calling program or hSQLdb's DataBaseManager program
running in the NetWare GUI). A client running on a
Windows box could run the update without exhibiting the
problem.
Running System
The above occurred on a Netware 6.0 server patched to
service pack level 2. Two post sp2 patches had been
applied: the NSS patch dated 02-01-2003/11:37AM and the
TCP patch version 6.15o. The JVM was version 1.3.1
service pack level 3 which showed the following
information under the Netware command module
java:
ˇ JVM Version 1.3.1_06
ˇ Build 03011414
ˇ Version 1.31c
ˇ Dated January 14, 2003
The problem was replicated on another server with the same 
configuration with the exception of the two post sp2
patches.
Fix
Applying a different JVM has removed this problem from
the server. The new 1.4.0 JVM (and the required new
LIBC from March 2003) has the following attributes
displayed under the Netware command module java:
ˇ JVM Version 1.4.0_02
ˇ Build 03012714
ˇ Version 1.40.03
ˇ Dated January 27, 2003
With this sole change, the loss of records ceased.
Bug report filed by dedmike.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

238
HyperSQL Database Engine (HSQLDB) / Bugs / #238 InputStream error with unique indexes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.7.1 with Sun JDK 1.4.0.03 on Windows 2000:
I'm getting inputStream errors and sometimes 
numberformat exceptions on startup of a database.
To reproduce create a new database run the attached 
create.sql script in the manager and restart the 
database. I get this error :
Server.run/init: java.sql.SQLException: InputStream 
error: InputStream error in
statement [SET TABLE IMAGE INDEX '128 128 128 1']
java.sql.SQLException: InputStream error: InputStream 
error in statement [SET TA
BLE IMAGE INDEX '128 128 128 1']
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.Log.runScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Database$Logger.openLog(Unknown 
Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.Database.&lt;init&gt;(Unknown Source)
at org.hsqldb.Server.openDB(Unknown Source)
at org.hsqldb.Server.run(Unknown Source)
at org.hsqldb.Server.main(Unknown Source)
Sometimes I get Numberformat-Exceptions when SET 
TABLE IMAGE INDEX '-1 0 -1 0' contains negative 
numbers.
If i leave out the unique index it is running fine.
Achim
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

239
HyperSQL Database Engine (HSQLDB) / Bugs / #239 Thread SQL Scripts in Help Forum
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Enclosed is the SQL Script that I do not manage to have
run by the ScriptTool. It is the same that produces the
&quot;Wrong data type or data too long in DEFAULT clause&quot;
error from my DatabaseManager thread.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

240
HyperSQL Database Engine (HSQLDB) / Bugs / #240 Wrong math
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using hsqldb 1.71.
Following is an example that the engine can produce
wrong math. This may be the result of data type (or
data precision/scale) conversion error:
drop table test4
create table test4 (id integer, cost numeric (12,2))
insert into test4 values (1, 1)
insert into test4 values (2, 2.0)
insert into test4 values (3, 3.81)
select sum(cost), sum(cost)/3 wrong, sum(cost)/3.0 
right from test4
COST WRONG RIGHT 
**** ***** ***** 
6.81 1.97 2.27 
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

241
HyperSQL Database Engine (HSQLDB) / Bugs / #241 Problem with &quot;UPDATE ...&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I haven't had time to investigate this fully, so apologies 
for the lack of detail.
I have some code which uses the HSQLDB in stand-alone 
mode. I find that when I use UPDATE to modify an entry 
in a table and subsequently COMMIT it, the modification 
is visible only for the life time of the run time. Closing 
the application and reloading it causes the pre-UPDATE 
data to be retrieved. I have tried switching to CACHED 
tables which had no effect. Looking at the .script file 
produced when the tables were uncached seemed to 
imply that the behaviour for UPDATE was implemented 
through the use of DELETE followed by INSERT and that 
the SQL that did this was not produced correctly 
(DELETEd all records in table then INSERTed the same 
record three times!).
By changing my code to use DELETE and INSERT instead 
of UPDATE. I can now get data to remain modified. I 
may have missed something here.
I look forward to seeing the inclusion of 
CONCUR_UPDATABLE. This would have made the coding 
much easier. Not complaining though. I currently have a 
RDMS for an application and it saves me from the 
nightmare of using JDBC-ODBC -&gt; Microsoft JET... which 
didn't really appeal. Keep up the good work guys!
Jon S
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

242
HyperSQL Database Engine (HSQLDB) / Bugs / #242 echo_ scripts not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I don't know what system you use to develop hsqldb but
echo_failure, echo_warning and similar commands are not
present on my GNU/Linux Debian system. I'm using stable
hsqldb version.
Regards,
Max
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

243
HyperSQL Database Engine (HSQLDB) / Bugs / #243 BIGINT corrupts very big negative long values.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all:
I can't store very big negative long values 
(generated by a hash function) into bigint column 
data type.
Please test it:
sql&gt; create table zz (key bigint);
sql&gt; insert into zz values (-
1514143584757176268);
sql&gt;insert into zz values (-
2578977450198231102);
sql&gt; select * from zz;
Result zz:
-1818449868
1295062978
Very big positive longs seem to be work OK.
I solve my problem storing long values as String, 
but long stored in native form will be better.
Best regards, Marcelo.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

244
HyperSQL Database Engine (HSQLDB) / Bugs / #244 SQL SELECT IN operator does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
IN operator used as part of expression in SELECT sql
statement does not work with 1.7.1.a version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

245
HyperSQL Database Engine (HSQLDB) / Bugs / #245 standalone is not exclusive
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I'm using hsqldb 1.7.1 and don't figure out what's
wrong with the standalone database url.
Why is it possible to connect with DatabaseManagerSwing
to a hsql database in STANDALONE (IN-PROCES) mode
several times simultaneously??? And I can also start a
server for the same database, simultaneously , too?
Looks like a bug (the database is the same for sure).
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

246
HyperSQL Database Engine (HSQLDB) / Bugs / #246 database script file order error 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i don't know if there's any special reason why in the 
class DatabaseScript, more exactly in the method 
getScript(), the first thing you do is to iterate the vector 
tTable, ignoring temps and views....
then you dump users, and their grants to the script file
and finally you iterate one more time on tTable, to dump 
the views creation script
the problem is:
suppose sa creates tables, views, and a user, then 
grants permission for the new user on a view
if you connect as the new user you can access the 
view, but if you shutdown the engine, the next time you 
start it up it finds the grant .... on &lt;view&gt; statement 
before it finds the create view statement, so an error 
appears saying that the view is an unknown table
i suppose there's a reason about not dumping the views, 
when you dump the tables (there's a line saying &quot;// 
fredt@users 20020221 - patch 513005 by 
sqlbob@users (RMP)&quot;)
hope you fix it soon... actually i'm changing the order in 
the script manually
thanks in advance
Alejandro Gomez
agomez@cibermatica.net
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

247
HyperSQL Database Engine (HSQLDB) / Bugs / #247 ResultSetMetaData getColumnType error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ResultSetMetaData.getColumnType() returns null 
pointer exception when called, but however returns 
correct value sometimes (in another test program). 
The application program was checked using jdb to 
ensure that the correct parameter was passed to 
getColumnType. The metadata was used to implement 
the Java Swing AbstractTableModel. Other metadata 
functions also failed to return a proper value except 
getColumnCount() which returned the correct count. 
Another short program was written to test 
ResultSetMetaData.getColumnType(i) shows that the 
function worked perfectly in this case.
lks@webpres.com.my
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

248
HyperSQL Database Engine (HSQLDB) / Bugs / #248 Column size ignored
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I created a table with a char(1) column and the DB had 
no problem to insert values of much greater length.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

249
HyperSQL Database Engine (HSQLDB) / Bugs / #249 out of memory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Also I created the tabled as &quot;cached&quot; the database ran 
out of memory (test.data ~25MB)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

250
HyperSQL Database Engine (HSQLDB) / Bugs / #250 count distinct rolls back when no records counted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
executing a count distinct query, when there are no 
records counted, fails. a rollback is executed an null is 
returned.
trace when there are records:
1049962192937|0|0|statement|SELECT count(distinct 
A0.ID) FROM IBANX_PERMIT A0|SELECT count
(distinct A0.ID) FROM IBANX_PERMIT A0
1049962192937|0|0|commit||
trace when there are no records:
1049962192781|16|0|statement|SELECT count(distinct 
A0.ID) FROM IBANX_PERMIT A0|SELECT count
(distinct A0.ID) FROM IBANX_PERMIT A0
1049962192796|0|0|rollback||
roger janssen
roger.janssen@ibanx.nl
iBanx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

251
HyperSQL Database Engine (HSQLDB) / Bugs / #251 Failure to fire trigger on table insert
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Operating System: Windows 2000
Service Pack: Service Pack 3
HSQL 1.7.1
IDE: Oracles JDeveloper 
JDK 1.3
Jave Compiler: Oracles's 
Hi,
I have created a database that has 2 triggers that 
should be fired on deletes and inserts operations on a 
table called FILE. The trigger for deletions works fine, 
however the trigger for insertion fails to be fired. I have 
tried various combinations i.e. be fired before and after 
insertion - but the trigger for insertion never gets fired.
I have enclosed a zip file that have the following 
directories:
.../mywork/Slide/database - conatins the HSQL 
database files. The *.bat are what is used to startup the 
database. 
../mywork/slide/slidebank/src/... all database related 
java source files for commicating to the database. 
Any further information or help - please email me
Cheers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

252
HyperSQL Database Engine (HSQLDB) / Bugs / #252 cannot have foreign key constraint on same table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is it possible to have cascading records? Each record has 
a parent record. The root record references itself.
Consider the create table statement below (which 
works), however you cannot insert the first record 
because cnt_parentid is defined not null.
create table confignodetype (
cnt_nodetypeid numeric(10) not null primary key
,cnt_parentid numeric(10) not null
,cnt_name varchar(40) not null
,constraint fk_cnt_parentid foreign key (cnt_parentid) 
references confignodetype(cnt_nodetypeid));
This does not work:
INSERT INTO confignodetype VALUES (-1,-1,'prj');
The foreign key is violated, because record id -1 does not 
exist.
Thanks
tomsk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

253
HyperSQL Database Engine (HSQLDB) / Bugs / #253 cannot use self join on unique column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found in production 1.7.1 and in ALPHA_M.
This bug is related to #722442
To reproduce do the following:
* create a table with two text fields
CREATE TABLE CONFIGUSER(USR_USERID NUMERIC NOT 
NULL PRIMARY KEY,USR_USERNAME VARCHAR NOT 
NULL,USR_PASSWORD VARCHAR NOT NULL)
* insert some values
INSERT INTO CONFIGUSER VALUES(-5,'guest','guest')
INSERT INTO CONFIGUSER VALUES(-4,'user','user')
INSERT INTO CONFIGUSER VALUES(-3,'owner','owner')
INSERT INTO CONFIGUSER VALUES(-2,'admin','xxx')
INSERT INTO CONFIGUSER VALUES(-1,'sadmin','xxx')
* select all users with their username as password
select * from configuser where usr_username = 
usr_password
OK: 3 rows selected
* create a unique index on one column
CREATE UNIQUE INDEX IDX_USERNAME ON 
CONFIGUSER(USR_USERNAME)
* select all users with their username as password
select * from configuser where usr_username = 
usr_password
ERROR: Column not found USR_PASSWORD
-------------------------------------------
I have cascading records in several tables - each record 
has a parent record in the same table - the root has 
itself as parent.
I cannot define the parent id as foreign key of the id from 
the same table.
Thanks 
tomsk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

254
HyperSQL Database Engine (HSQLDB) / Bugs / #254 CHECKPOINT DEFRAG fails on Alpha_J
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If there was no prior data activity in the script file as in:
GRANT ALL ON CLASS &quot;java.lang.Math&quot; TO PUBLIC
GRANT ALL ON CLASS &quot;org.hsqldb.Library&quot; TO PUBLIC
CREATE USER SA PASSWORD &quot;&quot; ADMIN
CREATE ALIAS MINUTE FOR &quot;org.hsqldb.Library.minute&quot;
CREATE ALIAS MONTHNAME 
FOR &quot;org.hsqldb.Library.monthname&quot;
CREATE ALIAS RIGHT FOR &quot;org.hsqldb.Library.right&quot;
CREATE ALIAS LOG10 FOR &quot;org.hsqldb.Library.log10&quot;
CREATE ALIAS BITOR FOR &quot;org.hsqldb.Library.bitor&quot;
CREATE ALIAS HEXTORAW 
FOR &quot;org.hsqldb.Library.hexToRaw&quot;
CREATE ALIAS CONCAT FOR &quot;org.hsqldb.Library.concat&quot;
CREATE ALIAS BITAND FOR &quot;org.hsqldb.Library.bitand&quot;
CREATE ALIAS MOD FOR &quot;org.hsqldb.Library.mod&quot;
CREATE ALIAS FLOOR FOR &quot;java.lang.Math.floor&quot;
CREATE ALIAS TAN FOR &quot;java.lang.Math.tan&quot;
CREATE ALIAS RTRIM FOR &quot;org.hsqldb.Library.rtrim&quot;
CREATE ALIAS CEILING FOR &quot;java.lang.Math.ceil&quot;
CREATE ALIAS UPPER FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS PI FOR &quot;org.hsqldb.Library.pi&quot;
CREATE ALIAS DEGREES FOR &quot;java.lang.Math.toDegrees&quot;
CREATE ALIAS YEAR FOR &quot;org.hsqldb.Library.year&quot;
CREATE ALIAS EXP FOR &quot;java.lang.Math.exp&quot;
CREATE ALIAS SIGN FOR &quot;org.hsqldb.Library.sign&quot;
CREATE ALIAS NOW FOR &quot;org.hsqldb.Library.now&quot;
CREATE ALIAS SPACE FOR &quot;org.hsqldb.Library.space&quot;
CREATE ALIAS DAYOFYEAR 
FOR &quot;org.hsqldb.Library.dayofyear&quot;
CREATE ALIAS ROUND FOR &quot;org.hsqldb.Library.round&quot;
CREATE ALIAS USER FOR &quot;org.hsqldb.Library.user&quot;
CREATE ALIAS RAND FOR &quot;java.lang.Math.random&quot;
CREATE ALIAS ATAN2 FOR &quot;java.lang.Math.atan2&quot;
CREATE ALIAS LEFT FOR &quot;org.hsqldb.Library.left&quot;
CREATE ALIAS ACOS FOR &quot;java.lang.Math.acos&quot;
CREATE ALIAS DATABASE 
FOR &quot;org.hsqldb.Library.database&quot;
CREATE ALIAS ASIN FOR &quot;java.lang.Math.asin&quot;
CREATE ALIAS DAYOFMONTH 
FOR &quot;org.hsqldb.Library.dayofmonth&quot;
CREATE ALIAS INSERT FOR &quot;org.hsqldb.Library.insert&quot;
CREATE ALIAS SQRT FOR &quot;java.lang.Math.sqrt&quot;
CREATE ALIAS SUBSTRING 
FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS TRUNCATE 
FOR &quot;org.hsqldb.Library.truncate&quot;
CREATE ALIAS LENGTH FOR &quot;org.hsqldb.Library.length&quot;
CREATE ALIAS RAWTOHEX 
FOR &quot;org.hsqldb.Library.rawToHex&quot;
CREATE ALIAS RADIANS FOR &quot;java.lang.Math.toRadians&quot;
CREATE ALIAS LOG FOR &quot;java.lang.Math.log&quot;
CREATE ALIAS ROUNDMAGIC 
FOR &quot;org.hsqldb.Library.roundMagic&quot;
CREATE ALIAS WEEK FOR &quot;org.hsqldb.Library.week&quot;
CREATE ALIAS REPEAT FOR &quot;org.hsqldb.Library.repeat&quot;
CREATE ALIAS LCASE FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS COT FOR &quot;org.hsqldb.Library.cot&quot;
CREATE ALIAS IDENTITY FOR &quot;org.hsqldb.Library.identity&quot;
CREATE ALIAS CURDATE 
FOR &quot;org.hsqldb.Library.curdate&quot;
CREATE ALIAS COS FOR &quot;java.lang.Math.cos&quot;
CREATE ALIAS LOCATE FOR &quot;org.hsqldb.Library.locate&quot;
CREATE ALIAS ABS FOR &quot;org.hsqldb.Library.abs&quot;
CREATE ALIAS LTRIM FOR &quot;org.hsqldb.Library.ltrim&quot;
CREATE ALIAS ASCII FOR &quot;org.hsqldb.Library.ascii&quot;
CREATE ALIAS HOUR FOR &quot;org.hsqldb.Library.hour&quot;
CREATE ALIAS DIFFERENCE 
FOR &quot;org.hsqldb.Library.difference&quot;
CREATE ALIAS SECOND FOR &quot;org.hsqldb.Library.second&quot;
CREATE ALIAS SIN FOR &quot;java.lang.Math.sin&quot;
CREATE ALIAS DAYOFWEEK 
FOR &quot;org.hsqldb.Library.dayofweek&quot;
CREATE ALIAS SOUNDEX 
FOR &quot;org.hsqldb.Library.soundex&quot;
CREATE ALIAS QUARTER 
FOR &quot;org.hsqldb.Library.quarter&quot;
CREATE ALIAS SUBSTR 
FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS CURTIME 
FOR &quot;org.hsqldb.Library.curtime&quot;
CREATE ALIAS DAYNAME 
FOR &quot;org.hsqldb.Library.dayname&quot;
CREATE ALIAS UCASE FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS ATAN FOR &quot;java.lang.Math.atan&quot;
CREATE ALIAS MONTH FOR &quot;org.hsqldb.Library.month&quot;
CREATE ALIAS POWER FOR &quot;java.lang.Math.pow&quot;
CREATE ALIAS CHAR FOR &quot;org.hsqldb.Library.character&quot;
CREATE ALIAS LOWER FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS REPLACE 
FOR &quot;org.hsqldb.Library.replace&quot;
set autocommit false
commit
The &quot;checkpoint defrag&quot; statement fails as follows:
java.lang.NullPointerException
at org.hsqldb.Log.checkpoint(Unknown Source)
at org.hsqldb.Database$Logger.checkpoint(Unknown 
Source)
at org.hsqldb.Database$Logger.access$000(Unknown 
Source)
at org.hsqldb.Database.processCheckpoint(Unknown 
Source)
at org.hsqldb.Database.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:536)
Unfortunately this is a tough one to figure a workaround for.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

255
HyperSQL Database Engine (HSQLDB) / Bugs / #255 Delete not commited
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqldb version 1.7.1 as standalone database and 
JDBC driver to access. Java application is single-user, so only 
one connection is created at program start and its shared (no 
threads) until the end of application. After deleting more than one 
record from some table, only one is deleted, others can be 
visible in next select. Database is in (default) auto commit mode 
and to making me sure, I have added conn.commit() after delete 
operation. But &quot;delete problem&quot; appears again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

256
HyperSQL Database Engine (HSQLDB) / Bugs / #256 CREATE ALIAS issues for java.lang.Math.(min,max)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
see next comment
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

257
HyperSQL Database Engine (HSQLDB) / Bugs / #257 HAVING exception using TAG: latest pre ALPHA_N updates 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Fred.
I ran into a defect that I thought initially I had 
caused with the code tagged &quot;pre ALPHA_N 
refactored code&quot;
The incident does NOT manifest in the ALPHA M 
files download.
However, after some frustrating work and not being 
able to find anything in my added/refactored code 
that would cause this defect, I decided to do a 
checkout that consists of a snapshot of what was 
in the hsqldb-dev CVS, just prior to the &quot;pre 
ALPHA_N refactored code&quot; tagged updates. Lo and 
behold, the same defect manifests as in my local 
working checkout.
there are a few related defects, but the following 
illustrates the biggest part of the problem, which I 
believe is related to Expression.setTrue() or 
possibly an incorrectly calculated iHavingIndex and 
some unwanted interaction with aggregating value:
Say, after performing the database manager &quot;insert 
test data,&quot; I do a select like:
select firstname, count(*) as &quot;count(*)&quot; from 
Customer group by firstname
This is fine. I get the expected result:
FIRSTNAME count(*) 
--------- -------- 
Laura 5 
Susanne 5 
Anne 2 
Michael 3 
Sylvia 4 
James 4 
Andrew 4 
Julia 4 
George 3 
Bill 5 
John 2 
Janet 3 
Bob 2 
Mary 2 
Robert 2 
However, say I issue the same query but with 
a &quot;having&quot; clause involving the &quot;count(*)&quot; term (any 
operator and value will do...perhaps any aggregate 
expression as well...I haven't tested that far yet).
Then I get:
select firstname, count(*) from Customer group by 
firstname having count(*) &gt; n 
SQL 
Error 
-----------------------------------------
-----------------------------------------
-----------------------------------------
-----------------------------------------
-------------------------------- 
S1000 General error java.lang.ClassCastException: 
java.lang.Boolean in statement [select firstname, 
count(*) from Customer group by firstname having 
count(*) &gt; 1] / Error Code: -40 / State: S1000 
With a stack trace like this:
java.lang.ClassCastException: java.lang.Boolean
at org.hsqldb.Column.compare
(Column.java:945)
at org.hsqldb.Expression.getAggregatedValue
(Expression.java:1418)
at org.hsqldb.Select.buildResult
(Select.java:561)
at org.hsqldb.Select.getResult(Select.java:327)
at org.hsqldb.Parser.processSelect
(Parser.java:135)
at org.hsqldb.Database.execute
(Database.java:495)
at 
org.hsqldb.jdbcConnection.executeStandalone
(jdbcConnection.java:3122)
at org.hsqldb.jdbcConnection.execute
(jdbcConnection.java:2661)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1768)
at org.hsqldb.jdbcStatement.execute
(jdbcStatement.java:728)
at org.hsqldb.util.DatabaseManager.execute
(DatabaseManager.java:776)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(DatabaseManager.java:472)
at java.awt.Button.processActionEvent
(Button.java:382)
at java.awt.Button.processEvent
(Button.java:350)
at java.awt.Component.dispatchEventImpl
(Component.java:3614)
at java.awt.Component.dispatchEvent
(Component.java:3476)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:456)
at 
java.awt.EventDispatchThread.pumpOneEventForHie
rarchy(EventDispatchThread.java:201)
at 
java.awt.EventDispatchThread.pumpEventsForHierar
chy(EventDispatchThread.java:151)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:145)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:137)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:100)
So this proves that the defect was in the pre Alpha 
N CVS *BEFORE* the last update.
I would list the stack trace using the latest CVS, so 
that you don't have to translate the line numbers, 
except that I can't build the latest hsqldb-dev CVS 
due to its missing the Token.java file in 
org/hsqldb. Would you please commit this to the 
CVS? 
Thanks,
Campbell
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

258
HyperSQL Database Engine (HSQLDB) / Bugs / #258 Error on using full qualified column names in insert command
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to update a table by using full qualified column 
names like &lt;table name&gt;.&lt;column name&gt; we get 
a &quot;Column not found&quot; error. Example code:
db.update(&quot;INSERT INTO sample_table
(sample_table.str_col, sample_table.num_col) VALUES
('Ford', 100)&quot;);
java.sql.SQLException: Column not found: 
SAMPLE_TABLE.STR_COL in statement [INSERT 
INTO sample_table(sample_table.str_col,num_col) 
VALUES('Ford', 100)]
Is this a bug? Do you think this syntax could be 
supported in future?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

259
HyperSQL Database Engine (HSQLDB) / Bugs / #259 Serialization failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi.
Here is bug scenario:
0) I'm starting application with in-process hsqldb server.
1) I'm creating sample table (REGISTRATIONS).
2) I'm inserting sample object into it.
3) I'm shutdowning hsqldb server using &quot;SHUTDOWN&quot;
command and exciting application;
4) Second time, when I trying to start application with
existing database, a &quot;java.sql.SQLException:
Serialization failure&quot; exception occurs while creating
a connection to database.
I have debugged hsqldb code and checked that method
&quot;readLongVarString()&quot; in TextDatabaseRowInput.readOther
probably returns incorrect value. It reads object's
binary data only until first carriage return in binary
data occurs.
I've created demo which is packed into errorSample.zip.
Here is full error stacktrace:
java.sql.SQLException: Serialization failure
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.Trace.error(Unknown Source)
at org.hsqldb.ByteArray.deserialize(Unknown Source)
at org.hsqldb.TextDatabaseRowInput.readOther(Unknown
Source)
at org.hsqldb.DatabaseRowInput.readData(Unknown Source)
at org.hsqldb.CachedRow.&lt;init&gt;(Unknown Source)
at org.hsqldb.TextCache.makeRow(Unknown Source)
at org.hsqldb.Cache.getRow(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.TextTable.openCache(Unknown Source)
at org.hsqldb.TextTable.setDataSource(Unknown Source)
at org.hsqldb.Database.processSet(Unknown Source)
at org.hsqldb.Database.execute(Unknown Source)
at org.hsqldb.Log.runScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Database$Logger.openLog(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.Database.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcConnection.openStandalone(Unknown
Source)
at org.hsqldb.jdbcConnection.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at hsqldbtest.ErrorSample.main(ErrorSample.java:12)
java.sql.SQLException: File input/output error: File
input/output error: reading: java.sql.SQLException:
Serialization failure in statement [SET TABLE
REGISTRATIONS SOURCE &quot;REGISTRATIONS.csv&quot;]
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.Log.runScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Database$Logger.openLog(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.Database.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcConnection.openStandalone(Unknown
Source)
at org.hsqldb.jdbcConnection.&lt;init&gt;(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at hsqldbtest.ErrorSample.main(ErrorSample.java:12)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

260
HyperSQL Database Engine (HSQLDB) / Bugs / #260 PreparedStatement.execute(sql) works but should not
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to the specs, &quot;If any of the
PreparedStatement execute methods is called with an SQL
string as a parameter, an SQLException is thrown.&quot; See
jdbc-3_0-fr-spec.pdf, page 101, 13.2.4 Executing a
PreparedStatement Object. (-fr- stands for Final
Release, not France). You can get this document here:
http://java.sun.com/products/jdbc/download.html.
Currently, HSQLDB executes the statement, but it should
throws an Exception. This bug was found using LDBC
(ldbc.sourceforge.net).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

261
HyperSQL Database Engine (HSQLDB) / Bugs / #261 OutOfMemoryError when inserting into LONGVARBINARY column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I create a table that has a LONGVARBINARY 
column and try to insert data from a file in the file 
system, the java.lang.OutOfMemoryError exception 
occurs.
The documentation says that the max size of a 
LONGVARBINARY column is Integer.MAXVALUE, but 
the problem is happening for me with a Word document 
that is about 2.8 MB.
The attached Java program shows how to reproduce the 
bug. When the JFileChooser dialog shows up, just 
make sure you pick a large Word document or 
Powerpoint presentation file.
Unfortunately, the OutOfMemoryError exception is not 
propogated properly, meaning, I am unable to &quot;catch&quot; it. 
I simply see the error reported in the Java console.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

262
HyperSQL Database Engine (HSQLDB) / Bugs / #262 Problem with &quot;NOT NULL&quot; constraints on UPDATE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version : HSQLDB 1.7.2 Alpha M
The &quot;NOT NULL&quot; constraints don't work in update 
statements.
Test :
CREATE CACHED TABLE THEME
(
idTheme integer IDENTITY,
libelle VARCHAR NOT NULL,
description VARCHAR
);
insert into theme(libelle, description) values
('ESSAI', 'ESSAI');
Data -&gt; 1 ESSAI ESSAI
update theme set libelle = null where idtheme = 1;
Data -&gt; 1 (null) ESSAI
This problem was not in 1.7.1 version of HSQLDB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

263
HyperSQL Database Engine (HSQLDB) / Bugs / #263 LEFT JOIN not work with 2 primary keys in a table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For example:
create table emp(company_id varchar(10),id varchar
(20),supervisor_id varchar(20), primary key 
(company_id,id));
insert into emp values ('01','1000',null);
insert into emp values ('01','1001','1000')
select id,supervisor_id from emp e left join emp s on 
e.company_id = s.company_id and e.supervisor_id = s.id
will return
1001,1000
should be
1000,null
1001,1000
I tried with only one key and it works.I am using 1.7.2 
ALPHA M
-andy santosa
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

264
HyperSQL Database Engine (HSQLDB) / Bugs / #264 Connection.close() does not release TCP/IP port
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using Connection.close() to close a connection
with a HSQLDB server, the TCP/IP connection is not
closed until the client JVM is terminated. 
This can easily be checked using netstat under Windows.
Open a connection (Keep the client running)
-&gt; connection to port 9001 is visible in netstat /a
Close the connection (keep the client JVM running!)
-&gt; connection to port 9001 is still visible in netstat /a
Any attempt to issue a statement using the Connection
inside the Java client will result in an error
close client JVM 
-&gt; connection disappears
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

265
HyperSQL Database Engine (HSQLDB) / Bugs / #265 error selecting primary key column with itself
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create the following table
CREATE CACHED TABLE qss_function (
object_id int NOT NULL,
name varchar(200));
then you can issue the followings select
select * from qss_function where object_id = object_id
And it works!
But now create the following table with object_id as a
PRIMARY KEY
CREATE CACHED TABLE qss_function_p (
object_id int NOT NULL PRIMARY KEY,
name varchar(200))
and issue the same command
select * from qss_function_p where object_id = object_id
and get the following error
Column not found: OBJECT_ID in statement [select * from
qss_function_p where object_id = object_id] / Error
Code: -28 / State: S0022
hsqldb version 1.7.1
mel@1it.com.au
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

266
HyperSQL Database Engine (HSQLDB) / Bugs / #266 CASEWHEN bug (with hibernate)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
With Hibernate &quot;joined-subclass&quot;, a statement like this
one is generated:
select parent.id as id, casewhen(parent_1.id is not
null, 1, casewhen(parent.id is not null, 0, null)) as
clazz_, parent.name as name0_, parent.address as
address0_, parent.phone as phone0_, parent_1.toy as
toy1_ from PARENT parent left outer join CHILD parent_1
on parent.id=parent_1.id
The problem comes with the 3rd argument of the inner
casewhen function (null): the data type returned is
always set to 0 and the switch in
DatabaseRowOutput.writeData(int l, int types[], Object
data[]) falls into:
default :
throw Trace.error(Trace.FUNCTION_NOT_SUPPORTED, t);
This error occur in HSQL mode (not in STANDALONE mode).
I have patched Expression.resolve(TableFilter f) this way:
instead of,
case IFNULL :
case CASEWHEN :
iDataType = eArg2.iDataType;
break;
I'm using,
case IFNULL :
case CASEWHEN :
iDataType = (eArg2.iDataType == 0) ? eArg.iDataType :
eArg2.iDataType;
break;
Everything works fine with this modification (but they
are maybe some side effects I cannot figure out).
Regards,
F. Wolff.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

267
HyperSQL Database Engine (HSQLDB) / Bugs / #267 assert is a keyword
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
warning: as of release 1.4, assert is a keyword, and
may not be used as an identifier
Example:
Trace.assert(!bNestedTransaction,&quot;beginNestedTransaction&quot;);
A simple solution is to change the 'assert' to
'cassert' in all files. That is what I did to solve
the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

268
HyperSQL Database Engine (HSQLDB) / Bugs / #268 Count Aggregate function  is giving wrong results sometimes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am using HSQL database in my project.
I am using following SQL query to retrieve count
of packets in database.
The database contains two tables RSPPdu0 and
RSPSegment0.
I need to retrieve the number of pdus( pduKey) per
output port
Select RSPPdu0.outputport As outputPort,
Count(RSPSegment0.pduKey) As SegmentCount From
RSPSegment0,RSPPdu0 where
RSPSegment0.pduKey=RSPPdu0.pduId and
RSPPdu0.outputport &lt;&gt; -1 Group By RSPPdu0.outputport
The above query works fine in most of the cases. But
for two different samples it is giving incorrect
count of packet
In one case it gives
68002 instead of giving 68000
In other case
12802 instead of 12800
Also, this behavior is inconsistent on Solaris/Linux
and window platform. Sometimes the same query gives
correct results , sometimes incorrect.
It is highly unpredictible when it will give correct
result
Can u please help me in this regard ? Is this a bug
related to HSQL database or am I wrong somewhere in
forming SQL query.
An immediate response will be helpful.
Contact id : riti@agere.com
Thanks
Riti
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

269
HyperSQL Database Engine (HSQLDB) / Bugs / #269 Error with UPPER() in ORDER BY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was using 1.7.2 Alpha M and I did this SQL:
&quot;SELECT ct.concepttypeid, tc.textcontent FROM 
concepttype ct, (select textid,textcontent from 
textcontent where languageid=1) tc WHERE 
ct.nametextid = tc.textid ORDER BY ct.SORTORDER, 
upper(tc.textcontent)&quot;
And it gave me this error even though it's valid SQL and 
works in version 1.7.1:
Here's the stacktrace:
java.sql.SQLException: Cannot be in ORDER BY clause: 
FUNCTION org.hsqldb.Function@19ee8a in statement 
[SELECT ct.concepttypeid, tc.textcontent FROM 
concepttype ct, (select textid,textcontent from 
textcontent where languageid=1) tc WHERE 
ct.nametextid = tc.textid ORDER BY ct.SORTORDER, 
upper(tc.textcontent)]
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.jdbcResultSet.&lt;init&gt;(Unknown 
Source)
at org.hsqldb.jdbcConnection.executeStandalone
(Unknown Source)
at org.hsqldb.jdbcConnection.execute(Unknown 
Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown 
Source)
at org.hsqldb.jdbcStatement.executeQuery
(Unknown Source)
at 
com.tallgroup.util.DataMain.executeThrowableSelect
(DataMain.java:933)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

270
HyperSQL Database Engine (HSQLDB) / Bugs / #270 1.7.1 Engine's LEFT method does not work.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The use of the &quot;LEFT&quot; alias doesn't work:
SQL Error
------------------------------------------------------
------------------------------------------------- 
Unexpected token: LEFT in statement [select left('mike', 
3) from test] / Error Code: -11 / State: 37000 
1 row(s) in 0 ms
If we create a new alias w/ a different name:
CREATE ALIAS LEFTSTR FOR &quot;org.hsqldb.Library.left&quot;
it works just fine:
select leftstr('mike', 3) from test
--- 
mik 
mik 
mik 
3 row(s) in 10 ms
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

271
HyperSQL Database Engine (HSQLDB) / Bugs / #271 Group By and Binary columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
HSQL has a problem comparing binary columns in 
grouped queries.
I use binary columns to represent object IDs. Check this:
select &quot;oid&quot;,sum(&quot;amount&quot;) as &quot;result&quot;
from &quot;test&quot;
group by &quot;oid&quot;
If you have 30 rows with te same oid (a binary column) 
you will get a result set with 30 rows.
I think the problem is related to HsqlHashMap. It uses a 
HashTable in order to store groups. Unfortunately two 
byte arrays with the same content will have a difrent 
hashcode. HsqlHashMap assumes different groups.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

272
HyperSQL Database Engine (HSQLDB) / Bugs / #272 Incorrect SQL execution
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug has been described in the help forum -- please
see
https://sourceforge.net/forum/forum.php?thread_id=886130&amp;forum_id=73674
Attached is a .tgz file containing the database in
question. Its user/password is sa/admin.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

273
HyperSQL Database Engine (HSQLDB) / Bugs / #273 negative BIGINT are wrong
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi I tried the following:
create table test (id BIGINT)
insert into test values(-1000000000000000000)
and
select * from test
gives back the following:
id
1486618624
the value which I gave to id is a valid java.lang.Long
value. Is there a fix to that already ?
Thanks
Michele Laghi
laghi@swissinfo.org
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

274
HyperSQL Database Engine (HSQLDB) / Bugs / #274 erroneous fk constraint violation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqldb 1.7.1.
Attached to this message is a db that exhibits
erroneous (as far as I can
tell) behaviour. It's a little difficult for me to
strip out all of the
superfluous (for this problem) tables, so please just
consider the
PX_IDENTITY, PX_MEMBERSHIP and PX_CONTACT tables. There
are only 3 rows total
in the entire db, so it's fairly easy to see the issue.
PX_MEMBERSHIP is a simple many-to-many join table that
has fk constraint from
PX_IDENTITY to PX_IDENTITY. PX_MEMBERSHIP is
***empty****. However, if I:
1) delete from PX_CONTACT; commit;
2) delete from PX_IDENTITY; commit;
I get:
Integrity constraint violation: FK3BE8AA6D6968D5F
table: PX_MEMBERSHIP in
statement [delete from PX_IDENTITY] / Error Code: -8 /
State: 23000
How can this be, when PX_MEMBERSHIP is empty??
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

275
HyperSQL Database Engine (HSQLDB) / Bugs / #275 BIG script works on standalone but server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to insert some data by using a BIG script.
It was working for standalone database but failed in 
server mode database.
HSQLDB : 1.7.1, virgin, no patches
Java : IBM J2SDK 1.4.0
Linux : redhat 8.0
How I did it:
* Run demo/runManager.sh
* Open connection, standalone or server mode 
accordingly
* Made a new table.
CREATE TABLE kuisikon (
id IDENTITY PRIMARY KEY,
topik CHAR(20), 
tingkat INTEGER,
kuis VARCHAR(255), 
ikon VARCHAR(100), 
pilihan VARCHAR(100));
CREATE INDEX topik ON kuisikon (topik);
CREATE INDEX tingkat ON kuisikon (tingkat);
* Open the script (attached) and execute it.
* Try to execute select * from kuisikon.
Submitted by:
k0c1l@hotmail.com
PS: the database information is in Indonesian language, 
I'm sorry for not translating it, but I hope it does not 
matter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

276
HyperSQL Database Engine (HSQLDB) / Bugs / #276 Connection Problems in standalone mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hypersonic DB when running in standalone(In-process - 
not in memory) mode does not allow the Process which 
created the DB to use nested transcation(nested 
connection) or transcation across threads and throws 
the below Error
ERROR: The database is already in use by another 
process
ERROR: Cannot open connection
java.sql.SQLException: The database is already in 
use by another process
Let me explain the scenario.
1. Gets the DB connection with security user 
(Username=security1, pwd=&quot;pwd&quot;, 
url=jdbc:hsqldb:myDB&quot;). Get all the necessary data. 
close the connection. 
2. Now get the DB connection with real user 
(Username=real, pwd=&quot;123&quot;, url=jdbc:hsqldb:myDB&quot;). Do 
a lot of initialization.
3. Now I have this part of code which executes a nested 
transaction. And I get the above error when the inner 
transcation is executed.
{
getConnection() 
beginTranscation()
doWork
{
some work......
getConnection() --------
--- fails here with above mentioned error. 
beginTranscation()
doWork
{
some work.....
} 
} 
So when i tried to debug hsqldb, I found the following 
bug with the implementation.
1. org.hsqldb.jdbcConnection holds a static instance of 
HashTable-tdatabase(url,org.hsqldb.Database Objects). 
When closing connection the corresponding entry is 
removed and the Database objects goes out of scope.
2. Now when i reconnect to the same DB, it creates an 
entry in tdatabase. And if the finalizer for the previously 
freed Database objects is called now the entry in the 
tdatabase(jdbcConnection class) is removed and if you 
try to get any more connection it reports with the above 
bug as it tries to create a new instance of DB instead of 
creating a new connection(openStandalone(...) method 
in jdbcConnection Class).
Solution.
1. We must not depend on the finalizer method as we 
have no controll over it.
2. never call close to a connection(will be a bad 
solution).
3. As a temporary solution i have commented method 
lines in removeDatabase(...) in jdbcConnection Class and 
everything appears to work fine for me. 
Other Details.
jdk - 1.4.1_01
hiberate - 2.0 --- which gives a connection pool
hypersonic - 1.7.1
my stack trace example.
Creating DB : org.hsqldb.Database@1594a88 -- 
jdbc:hsqldb:myDB user-security1 pwd-pwd
Closing DB org.hsqldb.Database@1594a88 in thread 
Thread[main,5,main] -- -- jdbc:hsqldb:myDB user-
security1 pwd-pwd
Creating DB : org.hsqldb.Database@11d2066 ---- 
jdbc:hsqldb:myDB user-real pwd-123
Closing DB org.hsqldb.Database@1594a88 in thread 
Thread[Finalizer,8,system]
TW1 -- Top level Transcation started
Trying to start inner Transcation 
ERROR: The database is already in use by another 
process
ERROR: Cannot open connection
java.sql.SQLException: The database is already in 
use by another process
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

277
HyperSQL Database Engine (HSQLDB) / Bugs / #277 Column not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Executing the below query and when getting the result 
the below error occurs.
ResultSet rs = query.execute(&quot;select c.configid as 
configid, c.name as name, c.description as descript3_ 
from ks_configs c where (c.name='Basic' )&quot;);
String conf = rs.getString(&quot;configid&quot;);
throws the below exception
java.sql.SQLException: Column not found
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcResultSet.findColumn
(Unknown Source)
at org.hsqldb.jdbcResultSet.getString(Unknown 
Source)
Solution.
findColumn(..) in jdbcResultSet.java uses equals(..) in 
line number 3631 instead of equalsIgnoreCa
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

278
HyperSQL Database Engine (HSQLDB) / Bugs / #278 ResultSet down not move backwards!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was able to move in both directions when using 
resultset in hsqldb1.7.1, but with the code from hsqldb-
dev throws the below exception when attempted to 
move backwards... I am using hibernate 2.0 to access 
hypersonic.
java.sql.SQLException: ResultSet was set to forward only
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcResultSet.previous(Unknown 
Source)
Solution.
jdbcResultSet.rsType can be set to 
jdbcStatement.rsType when creating the ResultSet. This 
will enable movement in both direction of the ResultSet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

279
HyperSQL Database Engine (HSQLDB) / Bugs / #279 NPE on SHUTDOWN when created by HsqlServerFactory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If the HSQLDB Server is created using the
HsqlServerFactory then its internal socket instance
variable is never set. If a &quot;SHUTDOWN&quot; command is then
issued, a NPE will be thrown within the Server.notify
method on the &quot;socket.close()&quot; command. The code just
needs to check to see whether or not socket is set
before attempting to close it. See the patch to fix
this below. This is in the current release version 1.7.1
Cheers,
Leif
Index: Server.java
RCS file:
/cvsroot/hsqldb/hsqldb/src/org/hsqldb/Server.java,v
retrieving revision 1.8
diff -u -r1.8 Server.java
--- Server.java 18 Oct 2002 14:07:19 -0000 1.8
+++ Server.java 17 Jul 2003 15:11:54 -0000
@@ -310,11 +310,14 @@
closeAllServerConnections();
- // fredt@users - this is used to exit the loop
in this.run()
- try {
- socket.close();
- } catch (IOException e) {
- traceError(&quot;Exception when closing the
main socket&quot;);
+ // The server's socket is not created if the
server is created by the HsqlServerFactory.
+ if (socket != null) {
+ // fredt@users - this is used to exit the
loop in this.run()
+ try {
+ socket.close();
+ } catch (IOException e) {
+ traceError(&quot;Exception when closing the
main socket&quot;);
+ }
}
serverProperties = null;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

280
HyperSQL Database Engine (HSQLDB) / Bugs / #280 SQLEx closing Connection that is closed by server.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have been working on getting HSQLDB running within my
application in server mode. The database is then
connected to using a pool of JDBC Connections. 
Everything works great until I call SHUTDOWN as the
server is shutting down.
As the server shuts down, one if its tasks is to go
through and close all of the Connections in the JDBC
pool. The problem is that the HSQLDB JDBC driver
throws and SQLException with the message, &quot;Connection
is broken&quot; for each connection as it is closed. This
is because the socket has already been closed by HSQLDB
on the server side. It makes sense to throw this
exception if a query is being made. I know this is a
matter of opinion. But if the client is
attempting to close the connection and the JDBC driver
detects that the connection is already closed. It
seems like it should just fall through gracefully as
the desired outcome was achieved.
The following patch modifies jdbcConnection.java to do
this.
This is with the current released version 1.7.1
Cheers,
Leif
Index: jdbcConnection.java
RCS file:
/cvsroot/hsqldb/hsqldb/src/org/hsqldb/jdbcConnection.java,v
retrieving revision 1.8
diff -u -r1.8 jdbcConnection.java
--- jdbcConnection.java 18 Oct 2002 14:07:21 -0000 
1.8
+++ jdbcConnection.java 17 Jul 2003 15:32:25 -0000
@@ -1052,7 +1052,17 @@
if (iType == STANDALONE) {
closeStandalone();
} else {
- execute(&quot;DISCONNECT&quot;);
+ try {
+ execute(&quot;DISCONNECT&quot;);
+ } catch (SQLException e) {
+ String msg = e.getMessage();
+ if ((msg != null) &amp;&amp;
(msg.indexOf(&quot;Connection is broken&quot;) &gt;= 0)) {
+ // This just means that the server
already closed the connection. No
+ // problem since we wanted to
close it anyway.
+ } else {
+ throw e;
+ }
+ }
}
bClosed = true;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

281
HyperSQL Database Engine (HSQLDB) / Bugs / #281 Strange results in UNION
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, UNION seems to work fine with not null values:
create table dual (x varchar(1))
insert into dual values('x')
--Query 1
select 'aaa' as A, 'ddd' as B from dual
union all
select 'ccc' as A, 'bbb' as B from dual
A B
aaa ddd
ccc bbb
However, nulls produce strange results:
--Query 2
select 'aaa' as A, null as B from dual
union all
select 'ccc' as A, 'bbb' as B from dual
A B
aaa &lt;null&gt;
ccc &lt;null&gt; (why???)
--Query 3
select 'aaa' as A, 'ddd' as B from dual
union all
select 'ccc' as A, null as B from dual
A B
aaa ddd
ccc &lt;null&gt;
The strangest thing: [Query 2] breaks server 
connections!!!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

282
HyperSQL Database Engine (HSQLDB) / Bugs / #282 CREATE VIEW + GRANT failes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found in 1.7.1
If you execute the attached script and then restart the
database, you get an error and the database cannot be
used anymore, because the CREATE VIEW will be after the
GRANT in the script file
CREATE TABLE BF_DOMAIN(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,NAME VARCHAR(100) NOT NULL,DESCRIPTION
VARCHAR(1024),CREATION_DATE TIMESTAMP NOT
NULL,MODIFICATION_DATE TIMESTAMP NOT NULL,CONSTRAINT
BF_DOM_UQ UNIQUE(NAME))
CREATE TABLE BF_USER(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,FIRST_NAME
VARCHAR(50) NOT NULL,LAST_NAME VARCHAR(50) NOT
NULL,PHONE VARCHAR(20) NOT NULL,FAX VARCHAR(20) NOT
NULL,ADDRESS VARCHAR(1024) NOT NULL,EMAIL VARCHAR(50)
NOT NULL,LOGIN_NAME VARCHAR(30) NOT NULL,PASSWORD
VARCHAR(50) NOT NULL,LOGIN_ENABLED INTEGER DEFAULT '0'
NOT NULL,SUPER_USER INTEGER DEFAULT '0' NOT
NULL,INTERNAL_USER INTEGER DEFAULT '0' NOT
NULL,CREATION_DATE TIMESTAMP NOT NULL,MODIFICATION_DATE
TIMESTAMP NOT NULL,CONSTRAINT BF_USR_LOGIN_UQ
UNIQUE(LOGIN_NAME),CONSTRAINT BF_USR_EMAIL_UQ
UNIQUE(EMAIL),CONSTRAINT BF_USR_FK FOREIGN
KEY(DOMAIN_ID) REFERENCES BF_DOMAIN(ID) ON DELETE CASCADE)
CREATE TABLE BF_BFSESSION(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,USER_ID INTEGER
NOT NULL,GEN_CODE VARCHAR(50) NOT NULL,CLIENT_IP
VARCHAR(20) NOT NULL,BROWSER_TYPE
VARCHAR(100),CREATION_DATE TIMESTAMP NOT
NULL,CONSTRAINT BF_SESS_UQ UNIQUE(GEN_CODE),CONSTRAINT
BF_BFSESS_DID_FK FOREIGN KEY(DOMAIN_ID) REFERENCES
BF_DOMAIN(ID) ON DELETE CASCADE,CONSTRAINT
BF_BFSESS_UID_FK FOREIGN KEY(USER_ID) REFERENCES
BF_USER(ID) ON DELETE CASCADE)
CREATE VIEW BF_BFSESSION_VIEW AS select
BF_BFSESSION.ID as ID, BF_USER.ID as USER_ID,
BF_USER.DOMAIN_ID as DOMAIN_ID, BF_USER.FIRST_NAME,
BF_USER.LAST_NAME, BF_USER.LOGIN_NAME, BF_USER.PHONE,
BF_USER.FAX, BF_USER.EMAIL, BF_USER.LOGIN_ENABLED,
BF_USER.SUPER_USER, BF_BFSESSION.GEN_CODE,
BF_BFSESSION.CLIENT_IP, BF_BFSESSION.BROWSER_TYPE,
BF_BFSESSION.CREATION_DATE from BF_BFSESSION, BF_USER
where BF_USER.ID = BF_BFSESSION.USER_ID and
BF_USER.DOMAIN_ID = BF_BFSESSION.DOMAIN_ID
GRANT ALL ON BF_BFSESSION_VIEW TO SA
COMMIT
produces script file
CREATE TABLE BF_DOMAIN(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,NAME VARCHAR(100) NOT NULL,DESCRIPTION
VARCHAR(1024),CREATION_DATE TIMESTAMP NOT
NULL,MODIFICATION_DATE TIMESTAMP NOT NULL,CONSTRAINT
BF_DOM_UQ UNIQUE(NAME))
CREATE TABLE BF_USER(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,FIRST_NAME
VARCHAR(50) NOT NULL,LAST_NAME VARCHAR(50) NOT
NULL,PHONE VARCHAR(20) NOT NULL,FAX VARCHAR(20) NOT
NULL,ADDRESS VARCHAR(1024) NOT NULL,EMAIL VARCHAR(50)
NOT NULL,LOGIN_NAME VARCHAR(30) NOT NULL,PASSWORD
VARCHAR(50) NOT NULL,LOGIN_ENABLED INTEGER DEFAULT '0'
NOT NULL,SUPER_USER INTEGER DEFAULT '0' NOT
NULL,INTERNAL_USER INTEGER DEFAULT '0' NOT
NULL,CREATION_DATE TIMESTAMP NOT NULL,MODIFICATION_DATE
TIMESTAMP NOT NULL,CONSTRAINT BF_USR_LOGIN_UQ
UNIQUE(LOGIN_NAME),CONSTRAINT BF_USR_EMAIL_UQ
UNIQUE(EMAIL),CONSTRAINT BF_USR_FK FOREIGN
KEY(DOMAIN_ID) REFERENCES BF_DOMAIN(ID) ON DELETE CASCADE)
CREATE TABLE BF_BFSESSION(ID INTEGER NOT NULL IDENTITY
PRIMARY KEY,DOMAIN_ID INTEGER NOT NULL,USER_ID INTEGER
NOT NULL,GEN_CODE VARCHAR(50) NOT NULL,CLIENT_IP
VARCHAR(20) NOT NULL,BROWSER_TYPE
VARCHAR(100),CREATION_DATE TIMESTAMP NOT
NULL,CONSTRAINT BF_SESS_UQ UNIQUE(GEN_CODE),CONSTRAINT
BF_BFSESS_DID_FK FOREIGN KEY(DOMAIN_ID) REFERENCES
BF_DOMAIN(ID) ON DELETE CASCADE,CONSTRAINT
BF_BFSESS_UID_FK FOREIGN KEY(USER_ID) REFERENCES
BF_USER(ID) ON DELETE CASCADE)
GRANT ALL ON CLASS &quot;org.hsqldb.Library&quot; TO PUBLIC
GRANT ALL ON CLASS &quot;java.lang.Math&quot; TO PUBLIC
CREATE USER SA PASSWORD &quot;&quot; ADMIN
GRANT ALL ON BF_BFSESSION_VIEW TO SA
CREATE ALIAS DAYNAME FOR &quot;org.hsqldb.Library.dayname&quot;
CREATE ALIAS SPACE FOR &quot;org.hsqldb.Library.space&quot;
CREATE ALIAS SUBSTRING FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS HEXTORAW FOR &quot;org.hsqldb.Library.hexToRaw&quot;
CREATE ALIAS SQRT FOR &quot;java.lang.Math.sqrt&quot;
CREATE ALIAS ABS FOR &quot;org.hsqldb.Library.abs&quot;
CREATE ALIAS POWER FOR &quot;java.lang.Math.pow&quot;
CREATE ALIAS CHAR FOR &quot;org.hsqldb.Library.character&quot;
CREATE ALIAS CONCAT FOR &quot;org.hsqldb.Library.concat&quot;
CREATE ALIAS PI FOR &quot;org.hsqldb.Library.pi&quot;
CREATE ALIAS RAWTOHEX FOR &quot;org.hsqldb.Library.rawToHex&quot;
CREATE ALIAS SECOND FOR &quot;org.hsqldb.Library.second&quot;
CREATE ALIAS TRUNCATE FOR &quot;org.hsqldb.Library.truncate&quot;
CREATE ALIAS MONTH FOR &quot;org.hsqldb.Library.month&quot;
CREATE ALIAS LOWER FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS ATAN2 FOR &quot;java.lang.Math.atan2&quot;
CREATE ALIAS REPEAT FOR &quot;org.hsqldb.Library.repeat&quot;
CREATE ALIAS DAYOFMONTH FOR &quot;org.hsqldb.Library.dayofmonth&quot;
CREATE ALIAS TAN FOR &quot;java.lang.Math.tan&quot;
CREATE ALIAS RADIANS FOR &quot;java.lang.Math.toRadians&quot;
CREATE ALIAS FLOOR FOR &quot;java.lang.Math.floor&quot;
CREATE ALIAS NOW FOR &quot;org.hsqldb.Library.now&quot;
CREATE ALIAS ACOS FOR &quot;java.lang.Math.acos&quot;
CREATE ALIAS DAYOFWEEK FOR &quot;org.hsqldb.Library.dayofweek&quot;
CREATE ALIAS CEILING FOR &quot;java.lang.Math.ceil&quot;
CREATE ALIAS DAYOFYEAR FOR &quot;org.hsqldb.Library.dayofyear&quot;
CREATE ALIAS LCASE FOR &quot;org.hsqldb.Library.lcase&quot;
CREATE ALIAS WEEK FOR &quot;org.hsqldb.Library.week&quot;
CREATE ALIAS SOUNDEX FOR &quot;org.hsqldb.Library.soundex&quot;
CREATE ALIAS ASIN FOR &quot;java.lang.Math.asin&quot;
CREATE ALIAS LOCATE FOR &quot;org.hsqldb.Library.locate&quot;
CREATE ALIAS EXP FOR &quot;java.lang.Math.exp&quot;
CREATE ALIAS MONTHNAME FOR &quot;org.hsqldb.Library.monthname&quot;
CREATE ALIAS YEAR FOR &quot;org.hsqldb.Library.year&quot;
CREATE ALIAS LEFT FOR &quot;org.hsqldb.Library.left&quot;
CREATE ALIAS ROUNDMAGIC FOR &quot;org.hsqldb.Library.roundMagic&quot;
CREATE ALIAS BITOR FOR &quot;org.hsqldb.Library.bitor&quot;
CREATE ALIAS LTRIM FOR &quot;org.hsqldb.Library.ltrim&quot;
CREATE ALIAS COT FOR &quot;org.hsqldb.Library.cot&quot;
CREATE ALIAS COS FOR &quot;java.lang.Math.cos&quot;
CREATE ALIAS MOD FOR &quot;org.hsqldb.Library.mod&quot;
CREATE ALIAS SIGN FOR &quot;org.hsqldb.Library.sign&quot;
CREATE ALIAS DEGREES FOR &quot;java.lang.Math.toDegrees&quot;
CREATE ALIAS LOG FOR &quot;java.lang.Math.log&quot;
CREATE ALIAS SIN FOR &quot;java.lang.Math.sin&quot;
CREATE ALIAS CURTIME FOR &quot;org.hsqldb.Library.curtime&quot;
CREATE ALIAS DIFFERENCE FOR &quot;org.hsqldb.Library.difference&quot;
CREATE ALIAS INSERT FOR &quot;org.hsqldb.Library.insert&quot;
CREATE ALIAS SUBSTR FOR &quot;org.hsqldb.Library.substring&quot;
CREATE ALIAS DATABASE FOR &quot;org.hsqldb.Library.database&quot;
CREATE ALIAS MINUTE FOR &quot;org.hsqldb.Library.minute&quot;
CREATE ALIAS HOUR FOR &quot;org.hsqldb.Library.hour&quot;
CREATE ALIAS IDENTITY FOR &quot;org.hsqldb.Library.identity&quot;
CREATE ALIAS QUARTER FOR &quot;org.hsqldb.Library.quarter&quot;
CREATE ALIAS CURDATE FOR &quot;org.hsqldb.Library.curdate&quot;
CREATE ALIAS BITAND FOR &quot;org.hsqldb.Library.bitand&quot;
CREATE ALIAS USER FOR &quot;org.hsqldb.Library.user&quot;
CREATE ALIAS UCASE FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS RTRIM FOR &quot;org.hsqldb.Library.rtrim&quot;
CREATE ALIAS LOG10 FOR &quot;org.hsqldb.Library.log10&quot;
CREATE ALIAS RIGHT FOR &quot;org.hsqldb.Library.right&quot;
CREATE ALIAS ATAN FOR &quot;java.lang.Math.atan&quot;
CREATE ALIAS UPPER FOR &quot;org.hsqldb.Library.ucase&quot;
CREATE ALIAS ASCII FOR &quot;org.hsqldb.Library.ascii&quot;
CREATE ALIAS RAND FOR &quot;java.lang.Math.random&quot;
CREATE ALIAS LENGTH FOR &quot;org.hsqldb.Library.length&quot;
CREATE ALIAS ROUND FOR &quot;org.hsqldb.Library.round&quot;
CREATE ALIAS REPLACE FOR &quot;org.hsqldb.Library.replace&quot;
CREATE VIEW BF_BFSESSION_VIEW AS select
BF_BFSESSION.ID as ID, BF_USER.ID as USER_ID,
BF_USER.DOMAIN_ID as DOMAIN_ID, BF_USER.FIRST_NAME,
BF_USER.LAST_NAME, BF_USER.LOGIN_NAME, BF_USER.PHONE,
BF_USER.FAX, BF_USER.EMAIL, BF_USER.LOGIN_ENABLED,
BF_USER.SUPER_USER, BF_BFSESSION.GEN_CODE,
BF_BFSESSION.CLIENT_IP, BF_BFSESSION.BROWSER_TYPE,
BF_BFSESSION.CREATION_DATE from BF_BFSESSION, BF_USER
where BF_USER.ID = BF_BFSESSION.USER_ID and
BF_USER.DOMAIN_ID = BF_BFSESSION.DOMAIN_ID
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

283
HyperSQL Database Engine (HSQLDB) / Bugs / #283 Max Aggregate Causes null row to be returned
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the query...
select max(t1.col_a), t2.col_a
from Table1 t1, Table t2
where
(t1.col_b = t2.col_b) and
(t1.col_a &gt;= t2.col_a)
group by t2.col_a
... the max aggregate causes a single row of nulls to be 
returned when Table1 and Table2 are empty.
nathanila@hotmail.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

284
HyperSQL Database Engine (HSQLDB) / Bugs / #284 Some problems with last alpha
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I had some problems with Timestamps in alpha_M (you 
save 00:00 and retrieve 03:00 -- I'm at GMT-3 --). I've 
downloaded last cvs tree and that problem has been 
solved.
However, I've found new big problems:
- I can't start a server with &quot;-database &lt;dbname&gt;&quot; 
command line argument. (The server always uses &quot;test&quot;)
- I can't load my old database files (created by alpha_M).
- Prepared statements can't execute DDL statements 
(ie.: UNEXPECTED TOKEN: CREATE)
- Problems with Binary columns: I use binary(20) 
columns as Object ID. The error is:
S1000 General error java.lang.ClassCastException: 
org.hsqldb.Binary in statement [insert into &quot;MyTable&quot; 
(&quot;oid&quot;,&quot;dummy&quot;) values (?,?)]
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

285
HyperSQL Database Engine (HSQLDB) / Bugs / #285 Cannot use IDENTITY and PRIMARY KEY together
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When specifying a column as an IDENTITY column, it
leads to an exception when the same column is also
specified as a PRIMARY KEY:
java.sql.SQLException: Attempt to define a second
primary ke
y in statement [CREATE TABLE A ( ID integer IDENTITY,
PRIMARY KEY(ID) )]
This is especially troublesome when using Torque to
generate the sql code as Torque does generate both
IDENTITY and PRIMARY KEY (which is the usual
combination with other databases, e.g. MySQL).
Since in this case the column is only overspecified, at
most a warning (if at all) should be issued, but no error.
This error occurs for both the 1.7.1 release and the
1.7.2 alpha (M)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

286
HyperSQL Database Engine (HSQLDB) / Bugs / #286 Error when storing a String object in a LONGVARBINARY column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to store a String object in a LONGVARBINARY
column while using a prepared statement, a exception
java.sql.SQLException: invalid character encoding
is issued (1.7.2 Alpha M; a similar exception is issued
in 1.7.1). A quick look in the code revealed that it is
tried to convert a string that is assumed to contain
hex-encoded byte s into a byte array (Column:
convertObject -&gt; convertString -&gt; hexToByteArray).
However there is no hex string in the object, just a
normal string, so the conversion is not successful.
This exception is probably raised for BINARY and
VARBINARY, as well (judging from Column.convertObject).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

287
HyperSQL Database Engine (HSQLDB) / Bugs / #287 nulls in prepared statements (alpha_n)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I use hsql to store Tomcat passwords. JDBCRealm seems 
to prepare a statement setting a null value when the 
user tries to access to a protected resource the first 
time.
The cause of this bug (I'm trying to guess) is at 
ValuePool:127 (ValuePool.getString(String val)). This 
method is used to set Strings in 
jdbcPreparedStatement.java.
Rewritting getString like this:
public static synchronized String getString(String val)
{
if(val==null) //added by me
return null; //added by me
if (val.length() &gt; maxStringLength) {
return val;
}
return stringPool.getOrAddString(val);
}
seems to work. 
I don't know if this problem will ocurr with all 
ValuePool.getXXX() methods (I've not tried yet). 
Previous versions of hsql accept null values. 
Please include this bug. (I don't want to rewrite Tomcat 
code.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

288
HyperSQL Database Engine (HSQLDB) / Bugs / #288 SAVEPOINT and ROLLBACK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SAVEPOINT savepoint_name ;
and
ROLLBACK TO SAVEPOINT savepoint_name ;
Are not document in hsqlSyntax.html but exists in
javadoc class org.hsqldb.jdbcConnection. 
Affected versions 1.7, 1.7.1, 1.7.2-alpha M.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

289
HyperSQL Database Engine (HSQLDB) / Bugs / #289 NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This happens in 1.7.1 and can be seen in DBManager or 
through JDBC
CREATE TABLE ROLLBACK_TEST
( TEST_COLUMN VARCHAR(50) NOT NULL,
CONSTRAINT TEST_COLUMN_UQ UNIQUE 
(TEST_COLUMN)
)
--- now set auto commit off and execute step by step
--- Just to make sure I set the autocommit off before 
each step since the menu doesn't show it
insert into ROLLBACK_TEST (TEST_COLUMN) values 
('miro')
insert into ROLLBACK_TEST (TEST_COLUMN) values 
('peter')
commit
update ROLLBACK_TEST set TEST_COLUMN = 'peter' 
where TEST_COLUMN = 'miro'
rollback
You get NullPointerException here
java.lang.NullPointerException
at org.hsqldb.Index.child(Unknown Source)
at org.hsqldb.Index.balance(Unknown Source)
at org.hsqldb.Index.insert(Unknown Source)
at org.hsqldb.Table.indexRow(Unknown Source)
at org.hsqldb.Table.insertNoCheck(Unknown 
Source)
at org.hsqldb.Transaction.rollback(Unknown 
Source)
at org.hsqldb.Session.rollback(Unknown Source)
at org.hsqldb.Database.processRollback(Unknown 
Source)
at org.hsqldb.Database.execute(Unknown Source)
at org.hsqldb.jdbcConnection.executeStandalone
(Unknown Source)
at org.hsqldb.jdbcConnection.execute(Unknown 
Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown 
Source)
at org.hsqldb.jdbcStatement.execute(Unknown 
Source)
at org.hsqldb.util.DatabaseManager.execute
(Unknown Source)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(Unknown Source)
at java.awt.Button.processActionEvent
(Button.java:381)
at java.awt.Button.processEvent(Button.java:350)
at java.awt.Component.dispatchEventImpl
(Component.java:3639)
at java.awt.Component.dispatchEvent
(Component.java:3480)
at java.awt.EventQueue.dispatchEvent
(EventQueue.java:450)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarch
y(EventDispatchTh
read.java:197)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(EventDispatchThre
ad.java:150)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:144)
at java.awt.EventDispatchThread.pumpEvents
(EventDispatchThread.java:136)
at java.awt.EventDispatchThread.run
(EventDispatchThread.java:99)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

290
HyperSQL Database Engine (HSQLDB) / Bugs / #290 Group By and Binary columns II
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Group by is not working with binary columns in alpha_n. 
Please, test this:
create table test (oid BINARY(2),data numeric);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0001',1);
insert into test values ('0002',2);
insert into test values ('0002',2);
insert into test values ('0002',2);
insert into test values ('0002',2);
insert into test values ('0002',2);
select oid,sum(data) from test
group by oid;
The result must be:
0001 5
0002 10
However, it shows:
0001 1
0001 1
0001 1
0001 1
0001 1
0002 2
0002 2
0002 2
0002 2
0002 2
This was fixed previously but the bug is here again.
Cheers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

291
HyperSQL Database Engine (HSQLDB) / Bugs / #291 saveSorted ... negative seek offset
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm using HSQL 1.7.1 with JRE1.3.1_03 in a Windows 
2000 environment. My database contains only one table 
with 8,000,000 rows which used to work fine (database 
size is 1.3 GB). But when I try to create a new index or 
drop an existing index I get the following error message 
after some minutes:
&quot;File input/output error: saveSorted java.io.IOException: 
Negative seek offset in statement [...]&quot;
where statement can be 
&quot;CREATE INDEX idxDevice ON tbl300_DEVICE_LOGS 
(lng_refIDDevice)&quot; or 
&quot;DROP INDEX idxTimeStamp&quot;.
Is there any limitation in database size, table size, row 
count, or index size?
Greetings
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

292
HyperSQL Database Engine (HSQLDB) / Bugs / #292 implicit DATETIME value change
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, 
I'm using HSQL 1.7.1 with JRE1.3.1_03 in a Windows 
2000 environment. My database contains only one table 
with 8,000,000 rows (database size is 1.3 GB) and an 
indexed DATETIME column. After months of working fine 
the following strange phenomenon occured:
Sometimes all values in the DATETIME column were 
normalized to a value between 0:00 and 1:00, that is 
the time was divided by 24. The date part was kept 
correctly, new values were inserted correctly, too. It 
seems that this occured during recovery procedure after 
killing and restarting the database process.
More greetings 
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

293
HyperSQL Database Engine (HSQLDB) / Bugs / #293 On delete cascade
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
There is a problem with foreign key constraints with 'on 
delete cascade' option.
Please try this:
---------------------------------------------
drop table testB if exists;
drop table testA if exists;
create table testA(id integer, primary key(id));
create table testB(id integer, parent integer, ref integer, 
data varchar(200),primary key (id),foreign key (parent) 
references testB(id) on delete cascade,foreign key (ref) 
references testA(id) on delete cascade);
insert into testA values(1);
insert into testB values(100,null,1,'xxxx');
insert into testB values(101,100,1,'xxxx');
insert into testB values(102,101,1,'xxxx');
delete from testA where id=1;
---------------------------------------------
The self reference of tableB works fine without the 
reference to tableA. 
The reference to tableA works fine without the self 
reference of table B. 
If both references are present, the script doesn't work.
The error is: AssertFailed/Error code: -38
The stack trace (note: jar with debug info):
org.hsqldb.Trace$TraceException: Trace
at org.hsqldb.Trace.printStack(Trace.java:767)
at org.hsqldb.Trace.doAssert(Trace.java:550)
at org.hsqldb.Trace.doAssert(Trace.java:534)
at org.hsqldb.MemoryNode.getData
(MemoryNode.java:101)
at org.hsqldb.Table.checkCascadeDelete
(Table.java:1983)
at org.hsqldb.Table.delete(Table.java:2357)
at org.hsqldb.Table.delete(Table.java:2325)
at 
org.hsqldb.CompiledStatementExecutor.executeDeleteSta
tement(CompiledStatementExecutor.java:214)
at 
org.hsqldb.CompiledStatementExecutor.executeImpl
(CompiledStatementExecutor.java:128)
at org.hsqldb.CompiledStatementExecutor.execute
(CompiledStatementExecutor.java:89)
at org.hsqldb.Session.sqlExecuteCompiled
(Session.java:836)
at 
org.hsqldb.DatabaseCommandInterpreter.executePart
(DatabaseCommandInterpreter.java:229)
at 
org.hsqldb.DatabaseCommandInterpreter.execute
(DatabaseCommandInterpreter.java:165)
at org.hsqldb.Session.execute(Session.java:784)
at org.hsqldb.jdbcStatement.fetchResult
(jdbcStatement.java:1670)
at org.hsqldb.jdbcStatement.execute
(jdbcStatement.java:680)
at org.hsqldb.util.DatabaseManager.execute
(DatabaseManager.java:776)
at 
org.hsqldb.util.DatabaseManager.actionPerformed
(DatabaseManager.java:472)
at java.awt.Button.processActionEvent(Unknown 
Source)
at java.awt.Button.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl
(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown 
Source)
at java.awt.EventQueue.dispatchEvent(Unknown 
Source)
at java.awt.EventDispatchThread.pumpOneEvent
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown 
Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

294
HyperSQL Database Engine (HSQLDB) / Bugs / #294 PreparedStatements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Try this script:
------------------------------------------------------
drop table testA if exists;
drop table testB if exists;
create table testA(oid binary(2), data integer);
create table testB(oid binary(2), data integer);
insert into testA values('0001',1);
insert into testB values('0001',1);
select * from testA as ttt,(select oid,data from testB) 
as tst 
where (tst.oid=ttt.oid)
and (tst.oid='0001');
------------------------------------------------------
The result is:
DATA
------
1
The same script with JDBC:
------------------------------------------------------
Connection con=(...);
Statement stm=con.createStatement();
stm.execute(&quot;drop table testA if exists&quot;);
stm.execute(&quot;drop table testB if exists&quot;);
stm.execute(&quot;create table testA(oid binary(2), data 
integer)&quot;);
stm.execute(&quot;create table testB(oid binary(2), data 
integer)&quot;);
PreparedStatement pstm;
byte[] oid=new byte[]{0,1};
pstm=con.prepareStatement(&quot;insert into testA 
values(?,1)&quot;);
pstm.setBytes(1,oid);
pstm.execute();
pstm=con.prepareStatement(&quot;insert into testB values
(?,1)&quot;);
pstm.setBytes(1,oid);
pstm.execute();
pstm=con.prepareStatement(
&quot;select data from testA as ttt,(select oid,data from 
testB) as tst &quot;
+&quot; where (tst.oid=ttt.oid)&quot;
+&quot; and (tst.oid=?)&quot;
);
pstm.setBytes(1,oid);
ResultSet rset=pstm.executeQuery();
System.out.println(&quot;DATA\n----&quot;);
while(rset.next())
System.out.println(rset.getInt(1));
rset.close();
------------------------------------------------------
The result is:
DATA
-----
(Please note there are no rows).
Why? Is something wrong?
Regards.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

295
HyperSQL Database Engine (HSQLDB) / Bugs / #295 rs.getString(&quot;name&quot;) fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ResultSet rs=executeQuery(&quot;select name,key from tab&quot;);
while (rs.next())
nodename = rs.getString(1);
// nodename = rs.getString(&quot;name&quot;);
The often used first version works alright, however 2nd 
version, which is commented out, throws an 
SQLException (Column name not found).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

296
HyperSQL Database Engine (HSQLDB) / Bugs / #296 select avg(column) - wrong results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using select avg(col1) from test, null values are 
incorrect counted as zero.
Nulls shouldn't be counted, so it's 2+4 = 6/2 = average 
of 3 (same in Excel).
Hsqldb, however, apparently makes it 2+0+4= 6 / 3 = 
false average 2.
create table test(col1 integer);
insert into test values(2);
insert into test values(null);
insert into test values(4);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

297
HyperSQL Database Engine (HSQLDB) / Bugs / #297 Reading database from inside jar fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I can't get hsqldb to connect to a read-only database 
inside a jar.
According to the description I created a test.jar with a 
testdata directory containing 
test.hsqldb.script,test.hsqldb.log and 
test.hsqldb.properties.
The test jar also contains a TestInJar class which tries 
to connect to the database.
I Use the url &quot;jdbc:hsqldb:testdata/test.hsqldb&quot; and call 
System.setProperty(&quot;hsqldb.files_in_jar&quot;,&quot;true&quot;).
Start the test with java -cp hsqldb1.7.2N.jar;test.jar 
TestInJar, hsqldb didn't connect to the database inside 
the jar, but created a new database in the current 
directory.
The same happened when I added all the testfiles 
directly to the hsqldb.jar.
Thanks for your help
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

298
HyperSQL Database Engine (HSQLDB) / Bugs / #298 Insert into Table with self FK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was working with a table which has FK for self.
I found bug with this kind of table managment
when inserting data with FK to self
Here is example of used table creation script:
-----------------------------
create table SELF_FK_TEST (
TEST_ID integer not null, 
FK_ID integer,
constraint SELF_FK_TEST_PK primary key (TEST_ID), 
constraint SELF_FK_TEST_FK foreign key (FK_ID) 
references SELF_FK_TEST (TEST_ID) on delete cascade
)
-----------------------------
Problematic query:
-----------------------------
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (1,1);
-----------------------------
Reported Error:
Error: java.sql.SQLException: Integrity constraint
violation: SELF_FK_TEST_FK table: 
SELF_FK_TEST in statement 
[SET MAXROWS 100;insert into SELF_FK_TEST
(TEST_ID,FK_ID) values (1,1)]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

299
HyperSQL Database Engine (HSQLDB) / Bugs / #299 Delete from table with self FK
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was working with a table which has FK for self.
I found bug with deleting data with FK to self
Here is example of used table creation script
and insert, update row queries
-----------------------------
create table SELF_FK_TEST (
TEST_ID integer not null, 
FK_ID integer,
constraint SELF_FK_TEST_PK primary key (TEST_ID), 
constraint SELF_FK_TEST_FK foreign key (FK_ID) 
references SELF_FK_TEST (TEST_ID) on delete cascade
);
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (1,null);
update SELF_FK_TEST set FK_ID=1 where TEST_ID=1;
----------------------------
Problematic query:
-----------------------------
delete from SELF_FK_TEST where TEST_ID=1;
-----------------------------
Reported Error:
Error: java.lang.StackOverflowError
-----------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

300
HyperSQL Database Engine (HSQLDB) / Bugs / #300 Delete with FK on delete cascade
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was working with a table which has FK for self on
delete cascade.
I found bug with not correct returned number of updated
rows when deleting.
Here is example of used table creation script and
insert queries for test data:
-----------------------------
create table SELF_FK_TEST (
TEST_ID integer not null, 
FK_ID integer,
constraint SELF_FK_TEST_PK primary key (TEST_ID), 
constraint SELF_FK_TEST_FK foreign key (FK_ID) 
references SELF_FK_TEST (TEST_ID) on delete cascade
)
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (1,null);
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (2,1);
insert into SELF_FK_TEST (TEST_ID,FK_ID) values (3,1);
-----------------------------
Problematic query:
-----------------------------
delete from SELF_FK_TEST where TEST_ID=1;
-----------------------------
Returned not correct info:
1 Rows Updated
Of course 3 rows has been deleted and should be
reported, what is standard for other DB (SapDB)
-----------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

301
HyperSQL Database Engine (HSQLDB) / Bugs / #301 short form of group by doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
after creating a little test db:
create table costs (month integer,year integer,value 
double);
insert into costs values (1,2002,88);
insert into costs values (1,2003,50);
insert into costs values (1,2003,100);
insert into costs values (2,2003,56);
insert into costs values (2,2003,99);
select month, year,sum(value) from costs group by 1,2
work in 1.7.1, but not in the current cvs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

302
HyperSQL Database Engine (HSQLDB) / Bugs / #302 Table not found !
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi all,
I am using Java,JSP and HSQLDB. I ahve used HSQLDB 
as Server and given the url as 
con=DriverManager.getConnection
(&quot;jdbc:hsqldb:hsql://localhost&quot;,&quot;sa&quot;,&quot;&quot;);
With the above connection it takes as the default 
database as test, how do i mention by own database
mail to viswa@infonents.com or viswajit2@yahoo.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

303
HyperSQL Database Engine (HSQLDB) / Bugs / #303 compute after aggregation ex) select sum(1)+sum(2)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
general error occurs when this kind of sql is executed.
--
create table test(a int,b int);
insert into test values (10,20);
insert into test values (10,21);
insert into test values (10,23);
select sum(a)+sum(b) from test;
--
and nagative function gives another error
--
select -sum(a) from test;
--
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

304
HyperSQL Database Engine (HSQLDB) / Bugs / #304 computing  within argument of aggregation function  ex) sele
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
computing within argument of aggregation function ex) 
select sum(a+b) ,
S1000 general error java.lang.ClassCastException occurs 
when this kind of sql is executed.
--sql--
create table test(a int,b int);
insert into test values (10,20);
select sum(a+b) from test;
------
if value is created as numeric or double
this kind of error doesn't happen.
--sql--
create table test2(a numeric,b numeric);
insert into test2 values (10,20);
select sum(a+b) from test2;
create table test3(a float,b float);
insert into test3 values (10,20);
select sum(a+b) from test3;
------ 
and explicit casting avoid this kind of error.
--sql--
create table test(a int,b int);
insert into test values (10,20);
select sum(1.0*a+1.0*b) from test;
------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

305
HyperSQL Database Engine (HSQLDB) / Bugs / #305 Error with Default Value with VARBINARY datatype
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using Alpha N of 1.7.2:
This is my table declaration:
CREATE CACHED TABLE TALLGROUP_PERSON(TALLGROUPID
INTEGER NOT NULL,PERSONID INTEGER NOT NULL,TALLROLEID
INTEGER DEFAULT 1 NOT NULL,TOOLACTIONKEY VARBINARY
DEFAULT FFFFFFFFFFFF
This is the error:
error in script file line: 133 Wrong data type or data
too long in DEFAULT clause: FFFFFFFFFFFF in statement
If I put quotes around the 'FFFFFFFFFFFF' like so, then
it works, but then when I close the database it removes
them and then prints this error the next time I open it.
Dave Johansen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

306
HyperSQL Database Engine (HSQLDB) / Bugs / #306 SQLException: Column not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using Alpha N of 1.7.2:
When I call any of the get methods on a ResultSet
(getString(), getInt() and so on) with anything but the
column name in all uppercase it throws an SQLException.
Is this a change in the way it works or a bug? Because
lower case column names worked in previous versions of
Hypersonic.
Dave Johansen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

307
HyperSQL Database Engine (HSQLDB) / Bugs / #307 Prepared Statement param is turned to NULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Timestamp with TimeZone processed incorrect
hsqldb 172-alpha-n
Try test case
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

308
HyperSQL Database Engine (HSQLDB) / Bugs / #308 COALESCE caused the client to hang and stack trace in server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 1.7.2 alpha N
At the client, enter:
create table T1 (
R1 real,
F1 float
);
insert into t1 values (100, null);
select r1, COALESCE(f1,cast(12.12 as float)) from t1
==&gt; OK
select r1, COALESCE(f1,12.12) from t1; 
==&gt; the client hung and the server outputs 
stack trace
At the server, the following trace came out:
java.lang.ClassCastException: java.math.BigDecimal
at org.hsqldb.DatabaseRowOutput.writeData
(Unknown Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:536)
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

309
HyperSQL Database Engine (HSQLDB) / Bugs / #309 Server died on grant select ...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.7.2 Alpha N
The server will always die if my test.script has 
grant select statements. See the attached file.
Error:
org.hsqldb.HsqlException: error in script file line: 51 
Table not found: SYSTEM_
VIEW_TABLE_USAGE in statement [GRANT SELECT ON 
SYSTEM_VIEW_TABLE_USAGE]
at org.hsqldb.Trace.error(Unknown Source)
at 
org.hsqldb.DatabaseScriptReader.readExistingData
(Unknown Source)
at org.hsqldb.DatabaseScriptReader.readAll
(Unknown Source)
at org.hsqldb.Log.readScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Logger.openLog(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase
(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase
(Unknown Source)
at org.hsqldb.Server.openDB(Unknown Source)
at org.hsqldb.Server.run(Unknown Source)
at org.hsqldb.Server.access$000(Unknown Source)
at org.hsqldb.Server$ServerThread.run(Unknown 
Source)
In order to circumvent this, I have to remove by hand
all of the grant select statement, and then restart
the server.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

310
HyperSQL Database Engine (HSQLDB) / Bugs / #310 PowerBuilder 9.0 can not list any user or system tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Below is the trace from the server:
[Server@19298d]: 
2:call &quot;org.hsqldb.Library.getDatabaseProductName&quot;()
[Server@19298d]: 2:SELECT * FROM SYSTEM_TYPEINFO
[Server@19298d]: 2:CALL USER()
[Server@19298d]: 2:CLI:GETCONNECTIONATTRS
[Server@19298d]: 2:CLI:GETCONNECTIONATTRS
[Server@19298d]: 2:SELECT * FROM SYSTEM_TABLES
WHERE 1=1 AND TABLE_SCHEM LIKE
'%' AND TABLE_NAME LIKE '%' AND TABLE_TYPE IN 
('TABLE','VIEW','SYSTEM TABLE','SY
STEM VIEW','ALIAS')
[Server@19298d]: 2:SELECT * FROM 
SYSTEM_PROCEDURES WHERE 1=1 AND 
PROCEDURE_SCHEM LIKE '%' AND PROCEDURE_NAME 
LIKE '%'
I think the problem is that table_schem and 
procedure_schem are being null. I wonder if it hurts 
anywhere else if hsqldb associates the table_schem
and procedure_schem with whomever created those 
tables and procedures.
For example, if I connect as sa, then whatever 
table/procedure I create should be stored under the 
schema sa.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

311
HyperSQL Database Engine (HSQLDB) / Bugs / #311 Parametrized SQL with IN in doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tested with alpha N. 
This used to work on alpha M and before, e.g.
delete from BF_DOC_TEMPLATE where ID IN (?, ?, ?)]
now I get this exception
java.sql.SQLException: Unexpected token: parametric IN 
list item in statement [delete from BF_DOC_TEMPLATE 
where ID IN (?, ?, ?)]
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcConnection.prepareStatement
(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

312
HyperSQL Database Engine (HSQLDB) / Bugs / #312 SET TABLE ADDR_TMP SOURCE &quot;tbl_addr.txt;fs=,;&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I migrated 1.7.1's data to alpha n, the server
crashed because of lines like the following:
SET TABLE ADDR_TMP SOURCE &quot;tbl_addr.txt;fs=,;&quot;
Notice that there is a trailing &quot;;&quot;. After I manually
removed &quot;;&quot; then the server is happy.
Ben
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

313
HyperSQL Database Engine (HSQLDB) / Bugs / #313 PreparedStatement failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqldb_1_7_2_ALPHA_N and have found a problem with PreparedStatement.
I have attached a JUnit test that exemplifies the problem. Basically the PreparedStatement is failing a query that a Statement is successfully executing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

314
HyperSQL Database Engine (HSQLDB) / Bugs / #314 ResultSetMetaData.isAutoIncrement returns false for IDENTITY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ResultSetMetaData.isAutoIncrement returns false for 
IDENTITY columns, also in version 1.7.2_N.
From the code I understand that isAutoIncrement is a 
supported feature from version 1.7.2, so I thought I 
should let you know...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

315
HyperSQL Database Engine (HSQLDB) / Bugs / #315 Problem with left join returning null
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
select p.propertytextid, p.internalname,
ptc.textcontent as displayname, pe.expression,
p.defaultexpression, dt.datatypeid, dt.javaclassname from 
(select descriptiontextid, propertytextid,
internalname, datatypeid, defaultexpression from
property where appliestoperson=1) p
left join
(select propertytextid, expression from
propertyexpression where objectid = 1 and objecttypeid
= 7) pe
on p.propertytextid = pe.propertytextid
left join
(select javaclassname, datatypeid from datatype) dt
on p.datatypeid = dt.datatypeid
left join
(select textcontent, textid from textcontent where
languageid = 1) ptc
on p.propertytextid = ptc.textid
This is the entire query that I want to use and it
works just fine with 1.7.1, but for some reason the
DISPLAYNAME column (ptc.textcontent) is null whenever I
do the left join with PROPERTYEXPRESSION. If I remove
the first left join (The one with PROPERTYEXPRESSION),
then it returns the values just fine.
Here's the DDLs for all of the tables:
PROPERTY:
CREATE CACHED TABLE PROPERTY(CATEGORYID INTEGER DEFAULT
NULL,DEFAULTEXPRESSION VARCHAR(4000),MINVALUE DOUBLE
DEFAULT NULL,MAXVALUE DOUBLE DEFAULT
NULL,DESCRIPTIONTEXTID INTEGER DEFAULT
NULL,TRANSLATIONNEEDED TINYINT DEFAULT
NULL,ISSYSTEMDEFINED TINYINT DEFAULT
NULL,ASSIGNABLEBYLEARNINGCONTEXT TINYINT DEFAULT
NULL,FORCOMPONENTSINLAYOUTS TINYINT DEFAULT
NULL,APPLIESTOACTIVITY TINYINT DEFAULT 0 NOT
NULL,APPLIESTOADAPTIVEPATH TINYINT DEFAULT 0 NOT
NULL,APPLIESTOACTIVITYINSTANCE TINYINT DEFAULT 0 NOT
NULL,APPLIESTOACTIVITYSET TINYINT DEFAULT 0 NOT
NULL,APPLIESTOSTAGEMARKER TINYINT DEFAULT 0 NOT
NULL,APPLIESTOCONCEPTLINK TINYINT DEFAULT 0 NOT
NULL,APPLIESTOLOCATION TINYINT DEFAULT 0 NOT
NULL,DATATYPEID INTEGER NOT NULL,PROPERTYTEXTID INTEGER
NOT NULL,INTERNALNAME VARCHAR(100) NOT
NULL,APPLIESTOSCENARIO TINYINT DEFAULT 0 NOT NULL,VITAL
TINYINT DEFAULT 0 NOT NULL,APPLIESTOTALLROLE TINYINT
DEFAULT 0 NOT NULL,APPLIESTOCONCEPT TINYINT DEFAULT 0
NOT NULL,APPLIESTOPERSON TINYINT DEFAULT 0 NOT
NULL,APPLIESTOSKINTHEME TINYINT DEFAULT 0 NOT
NULL,APPLIESTOTALLGROUP TINYINT DEFAULT 0 NOT
NULL,APPLIESTOCONCEPTTYPE TINYINT DEFAULT 0 NOT
NULL,APPLIESTOLAYOUT TINYINT DEFAULT 0 NOT NULL)
PROPERTYEXPRESSION:
CREATE CACHED TABLE PROPERTYEXPRESSION(OBJECTID INTEGER
DEFAULT NULL NOT NULL,LEARNINGCONTEXTID INTEGER DEFAULT
0 NOT NULL,EXPRESSION VARCHAR(4000) DEFAULT 'NULL' NOT
NULL,PROPERTYTEXTID INTEGER NOT NULL,VITAL TINYINT
DEFAULT 0,OBJECTTYPEID INTEGER NOT NULL,CONSTRAINT
PK_PROPERTYEXPRESSION PRIMARY
KEY(LEARNINGCONTEXTID,OBJECTID,OBJECTTYPEID,PROPERTYTEXTID))
DATATYPE:
CREATE CACHED TABLE DATATYPE(DATATYPEID INTEGER NOT
NULL,NAMETEXTID INTEGER,JAVACLASSNAME
VARCHAR(300),DESCRIPTIONTEXTID INTEGER,ISINTERNAL
TINYINT DEFAULT 1 NOT NULL)
TEXTCONTENT
CREATE CACHED TABLE TEXTCONTENT(TEXTID INTEGER DEFAULT
NULL NOT NULL,LANGUAGEID INTEGER DEFAULT NULL NOT
NULL,TEXTCONTENT VARCHAR(4000) NOT NULL,ORIGINAL
TINYINT DEFAULT 0 NOT NULL,FREQUENCYOFUSE TINYINT
DEFAULT NULL,SHOULDTRANSLATE TINYINT DEFAULT 1 NOT
NULL,HASBEENREVIEWED TINYINT DEFAULT 0 NOT
NULL,ISCOURSECONTENT TINYINT DEFAULT 0 NOT
NULL,CONSTRAINT PK_TEXTCONTENT PRIMARY
KEY(LANGUAGEID,TEXTID))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

316
HyperSQL Database Engine (HSQLDB) / Bugs / #316 Confusing error message with &quot;left join&quot;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you have a typo in &quot;left join&quot; then it chops off the
SQL and gives an error message that is very confusing.
I did the following:
select p.internalname, tc.textcontent from
(select propertytextid, internalname from property) p
LEJT JOIN
(select textcontent, textid from textcontent) tc
on p.propertytextid=tc.textid
And it threw an SQLException with an error about
TEXTCONTENT being an invalid column. I think it would
help if it told me that &quot;LEJT JOIN&quot; was invalid.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

317
HyperSQL Database Engine (HSQLDB) / Bugs / #317 In XP can't do a jdbc connect with Manager UI
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CAN do it programmatically in XP but not by Manager 
UI. I try to connect to HypersonicSQL Server with 
org.hsql.jdbcDriver and 
jdbc:HypersonicSQL:hsql://localhost from the Manager 
UI BUT I get the following java.sql.SQL. Exception 
connection is broken, network subsystem has failed.
Is it just that the version of hsql (circa 2001) just 
doesn't do XP with the UI? My email is dfheinz@aol.com
thanks
Daryl Heinz
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

318
HyperSQL Database Engine (HSQLDB) / Bugs / #318 Server start of 6MB database out of memory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to start a server with a 6MB database, but it 
failed.
java -cp hsqldb1.7.2N.jar org.hsqldb.Server -port 9999 -
database test -silent false
[org.hsqldb.Server@87816d]: Startup sequence initiated 
from main() method
[org.hsqldb.Server@87816d]: Loading properties from 
[E:\MB\Diss\workspace\Joolap
\server]
[org.hsqldb.Server@87816d]: Could not load properties 
from file
[org.hsqldb.Server@87816d]: Using cli/default properties 
only
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
start() entered
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
waitForStatus() entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: run() entered
[org.hsqldb.Server@87816d]: Initiating startup 
sequence...
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.database=joolap
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.tls=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.port=9999
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.trace=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.database.0=test
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: 
server.restart_on_shutdown=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: 
server.no_system_exit=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.silent=false
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: 
server.default_page=index.html
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.address=any
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.dbname.0=
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: server.root=./
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],null]]: openServerSocket() 
entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: Got server socket: ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999]
[org.hsqldb.Server@87816d]: Server socket opened 
successfully in 90 ms.
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: openServerSocket() exiting
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: openDB() entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: Opening database: [file:test]
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: openDB() exiting
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: notifyStatus() entered
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
waitForStatus() exited
[org.hsqldb.Server@87816d]: [Thread[main,5,main]]: 
start() exiting
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: notifyStatus() exited
[org.hsqldb.Server@87816d]: Startup sequence 
completed in 671 ms.
[org.hsqldb.Server@87816d]: 2003-09-10 09:41:03.977 
HSQLDB server 1.7.2 is onlin
e
[org.hsqldb.Server@87816d]: To close normally, connect 
and execute SHUTDOWN SQL
[org.hsqldb.Server@87816d]: From command line, use 
[Ctrl]+[C] to abort abruptly
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: handleConnection(): Socket
[addr=/127.0.0.1,port=3148,localport=9999]
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: checkRunning() entered
[org.hsqldb.Server@87816d]: [Thread
[org.hsqldb.Server@87816d[LISTENER],5,hsqldb-
hsql-servers][Database[],ServerSocket
[addr=0.0.0.0/0.0.0.0,port=0,localport=9999
]]]: checkRunning() exited
[org.hsqldb.Server@87816d]: [Thread[[Socket
[addr=/127.0.0.1,port=3148,localport=
9999]],5,org.hsqldb.Server@87816d[CONNECTIONS]]]: 
0:trying to connect user null
java.lang.OutOfMemoryError
file sync interval: 59055
file sync: 40
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

319
HyperSQL Database Engine (HSQLDB) / Bugs / #319 Metadata ignorant about new tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ported an hsql1.7.1 database to 1.7.2O and have some 
hava code look inside the metadata for the tablenames:
StringBuffer result = new StringBuffer(&quot;tables:&quot;);
try {
DatabaseMetaData meta = 
con.getMetaData();
ResultSet rs = null;
rs = meta.getTables(null, 
null, null, null);
while (rs.next()) {
result.append
(rs.getObject(3) + &quot; &quot;);
}
rs.close();
} catch (Exception e) {
e.printStackTrace();
}
The old tables show up, but when I create new tables in 
the 1.7.2O DatabaseManager, they aren't listed in the 
metadata in server as well as in-process mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

320
HyperSQL Database Engine (HSQLDB) / Bugs / #320 Server shutdown failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can't reproduce it, but when issuing shutdown to a 
Hsqldb1.7.2O server, I got the following exception:
[Server@422ede]: 1:shutdown
java.lang.NullPointerException
at org.hsqldb.store.BaseHashMap.getInt(Unknown 
Source)
at org.hsqldb.lib.IntValueHashMap.get(Unknown 
Source)
at 
org.hsqldb.DatabaseManager.releaseAccessCount
(Unknown Source)
at org.hsqldb.SessionManager.closeAllSessions
(Unknown Source)
at org.hsqldb.Database.close(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.processShutdow
n(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.executePart
(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.execute
(Unknown Source)
at org.hsqldb.Session.sqlExecuteDirectNoPreChecks
(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:536)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

321
HyperSQL Database Engine (HSQLDB) / Bugs / #321 1.7.2 ALPHA_O cannot read binary script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a database where I converted the .script file to
a binary representation (using 1.7.2 ALPHA M) using set
logtype 1
When I try to open this DB (standalone) with ALPHA_O I
get an exception:
java.sql.SQLException: 
error in script file line: 1 Unexpected token: in
statement []
(actually between &quot;token:&quot; and &quot;in statement&quot; there is
an unreadable character)
When I open the DB with ALPHA_M, set logtype 0 then I
can open the DB with ALPHA_O as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

322
HyperSQL Database Engine (HSQLDB) / Bugs / #322 Database works but stops writing to file 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using hsqldb 1.7.1 with Java 1.3.0 on a Solaris
5.8 machine:
SunOS k130s1 5.8 Generic_108528-18 sun4u sparc
SUNW,Ultra-60
For some 10 days the database has obviously worked
correctely but did not write any data to the
hsqldb.script file:
We used our Java database application during this time.
The application does not hold any data outside hsqldb
and I could add and remove entries. However, the
database file date has not changed for 10 days and the
last entry is 10 days back.
Consequentely, on a restart of the database, I lost all
the data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

323
HyperSQL Database Engine (HSQLDB) / Bugs / #323 Left join - no result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used standard left join query.
But this was not working if in ON clause is 
another condition
Example:
create table BASE (ID integer)
create table CHILD(ID integer, BASE_ID integer)
insert into BASE values (1)
insert into CHILD values (1,1)
Correct query:
select BASE.ID,CHILD.ID 
from BASE
left join CHILD 
on CHILD.BASE_ID=BASE.ID
Result:
1,1
Problematic query:
select BASE.ID,CHILD.ID 
from BASE
left join CHILD 
on CHILD.BASE_ID=BASE.ID and CHILD.ID&gt;1
No result !!!
Of course I expect that there will be result like:
1, null
I also found similar reported bug which 
is already closed:
[ 473613 ] join/condition bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

324
HyperSQL Database Engine (HSQLDB) / Bugs / #324 Cannot specify a column type + IDENTITY together
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation for CREATE TABLE states:
columnDefinition: 
columnname Datatype [(columnSize[,precision])] [DEFAULT 
'defaultValue'] [[NOT] NULL] [IDENTITY] [PRIMARY KEY] 
The following statement, compliant with the above specification and 
generated by Hibernate's hbm2ddl tool gets rejected:
create table Motion (id BIGINT NOT NULL IDENTITY, idx BIGINT not 
null, startTime TIMESTAMP, endTime TIMESTAMP, sms BIT not null, 
webcamID BIGINT not null)
with the following error message:
Wrong data type: ID in statement [...]
The following statement works, despite that it does not follow the 
grammar rule:
create table Motion (id IDENTITY NOT NULL, idx BIGINT not null, 
startTime TIMESTAMP, endTime TIMESTAMP, sms BIT not null, 
webcamID BIGINT not null)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

325
HyperSQL Database Engine (HSQLDB) / Bugs / #325 NIO IllegalArgumentException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The database using NIO would try to access
a file beyond the length of the buffer causing
an IllegalArgumentException. The code missed
the corner case when the seek position was
equal to the file length. Attached is a modified file
that fixes this. I no longer get the 
IllegalArgumentException.
Also, I took the liberty of expanding the data file
linearly instead of exponentially. This seems to work
in the testing I've done, and it cuts down on disk usage.
Thanks for a great product!
-Tim
tjw3000@bellatlantic.net
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

326
HyperSQL Database Engine (HSQLDB) / Bugs / #326 1.7.2 ALPHA N+O: Query on SYSTEM_SESSIONS throws SQLExc.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I guess there´s a problem with the SYSTEM_SESSIONS 
table.
Here´s a short description of what I did:
1. User 1 connects to a database (served by 
org.hsqldb.Server).
2. User 1 disconnects.
3. User 2 connects to the same database.
4. User 2 posts statement &quot;SELECT * FROM 
SYSTEM_SESSIONS&quot; which results in the following 
SQLException: 
(copied from DatabaseManagerSwing)
&quot;S1000 General error java.lang.NullPointerException in 
statement [SELECT * FROM SYSTEM_SESSIONS] / Error 
Code: 40 / State: S1000&quot;
Details can be found in the attached file.
(&quot;//&quot; lines are my comments)
Udo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

327
HyperSQL Database Engine (HSQLDB) / Bugs / #327 possible DatabaseManager confusion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I noticed a special case which can confuse the 
DatabaseManager (1.7.2P) and possibly also destroy a 
database.
When copying a database from one directory to another, 
I only copied test.script, but forgot about the 
test.properties file.
When I tried to open the database with the 
DatabaseManager no tables were shown, the existing 
test.script was ignored and the command &quot;checkpoint&quot; 
or &quot;shutdown&quot; would even overwrite the existing file.
This behaviour is new to 1.7.2P (wasn't in 1.7.2N).
Before I also used to copy .script files around and rely 
on the DatabaseManager to recreate a 
default .properties file as needed. So I guess some users 
might get very confused about this changed behaviour.
I suggest improved exception information (e.g. 
test.script found but no test.properties). (would also be 
good if a properties file is missing is missing inside a jar 
file - see other bug report).
I guess a question like : &quot;Shall I create a default 1.7.2 
properties file&quot; would be ideal.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

328
HyperSQL Database Engine (HSQLDB) / Bugs / #328 maxlength of varchar is ignored
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class.forName( &quot;org.hsqldb.jdbcDriver&quot; );
java.sql.Connection conn = java.sql.DriverManager.
getConnection( 
&quot;jdbc:hsqldb:c:/Documents and Settings/dima/My 
Documents/java/testdb/data&quot;, &quot;sa&quot;, &quot;&quot; );
java.sql.Statement stat = conn.createStatement();
stat.executeUpdate( &quot;CREATE TABLE TEST (ID 
VARCHAR(10) )&quot; );
stat.executeUpdate( &quot;INSERT INTO TEST (ID) VALUES 
('this is a test value longer than 10 chars')&quot; );
// should throw an exception here
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

329
HyperSQL Database Engine (HSQLDB) / Bugs / #329 NIO lock problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting an exception when trying to allocate a
connection. I tried to clean database files before
running the program, with no success. 
It was tested on Compaq Tru64 platform, &quot;java version
&quot;1.4.0&quot;
Java(TM) 2 Runtime Environment, Standard Edition
Fast VM (build 1.4.0-1.p2, native threads, mixed mode,
12/10/2002-19:05)&quot;.
The same code _works_ on Win2000 or Linux (also java
ver 1.4) with no problem, so maybe this is just a buggy
Java NIO API on Tru64. But I need to make it running on
Tru64 somehow. 
Is there any way to avoid using NIO API in hsqldb?
Right now I just commented all code in
org.hsqldb.NIOLockFile in my sources (and it works fine).
WBR,
Maxim
import java.sql.*;
class Test {
public static void main(String args[]) throws
Exception {
Class.forName(&quot;org.hsqldb.jdbcDriver&quot;);
String path = &quot;jdbc:hsqldb:qq&quot;;
Connection conn1 =
DriverManager.getConnection(path, &quot;sa&quot;, &quot;&quot;);
System.out.println(conn1);
}
}
/*
java.io.IOException: No locks available
at sun.nio.ch.FileChannelImpl.lock0(Native Method)
at
sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:528)
at
java.nio.channels.FileChannel.tryLock(FileChannel.java:967)
at
org.hsqldb.NIOLockFile.lockImpl(NIOLockFile.java:82)
at org.hsqldb.LockFile.tryLock(LockFile.java:804)
at org.hsqldb.Logger.acquireLock(Logger.java:343)
at org.hsqldb.Logger.openLog(Logger.java:93)
at org.hsqldb.Database.reopen(Database.java:257)
at org.hsqldb.Database.open(Database.java:220)
at
org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:182)
at
org.hsqldb.DatabaseManager.newSession(DatabaseManager.java:100)
at
org.hsqldb.jdbcConnection.&lt;init&gt;(jdbcConnection.java:2418)
at
org.hsqldb.jdbcDriver.getConnection(jdbcDriver.java:214)
at
org.hsqldb.jdbcDriver.connect(jdbcDriver.java:198)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at Test.main(Test.java:8)
java.sql.SQLException: The database is already in use
by another process:
org.hsqldb.NIOLockFile@c7305c97[file =/home/mve/qq.lck,
exists=true, locked=false, valid=false, fl =null]:
at
org.hsqldb.jdbcDriver.sqlException(jdbcDriver.java:140)
at
org.hsqldb.jdbcConnection.&lt;init&gt;(jdbcConnection.java:2432)
at
org.hsqldb.jdbcDriver.getConnection(jdbcDriver.java:214)
at
org.hsqldb.jdbcDriver.connect(jdbcDriver.java:198)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at Test.main(Test.java:8)
*/
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

330
HyperSQL Database Engine (HSQLDB) / Bugs / #330 NullPointerException using IN where NULL values in column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version:
hsqldb_1_7_2_ALPHA_Q
Error message: 
S1000 General error java.lang.NullPointerException
How to reproduce bug:
First create the table and insert some integer values:
create table MYTABLE (MYCOLUMN integer);
insert into MYTABLE (MYCOLUMN) values (1);
insert into MYTABLE (MYCOLUMN) values (2);
The following select runs fine:
select * from MYTABLE where MYCOLUMN in (1,2); 
Now insert a null value:
insert into MYTABLE (MYCOLUMN) values (null);
The following select fails:
select * from MYTABLE where MYCOLUMN in (1,2); 
So I guess you have to do a check for null before 
comparing the data in the table with the values in the IN 
statement.
I know this worked before in 1.7.1, as my code failed 
trying to switch to the latest alpha.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

331
HyperSQL Database Engine (HSQLDB) / Bugs / #331 NullPointerException with VARCHAR and PS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I do the following PreparedStatement:
select TEXTID from TEXTCONTENT where TEXTCONTENT = ?
and LANGUAGEID = ?
I get this NullPointerException when I call
ps.setString(1, &quot;test&quot;)
java.lang.NullPointerException
at
org.hsqldb.jdbcPreparedStatement.checkSetParameterIndex(jdbcPreparedStatement.java:2178)
at
org.hsqldb.jdbcPreparedStatement.setString(jdbcPreparedStatement.java:689)
at
com.tallgroup.business.BTextContent.getTextIDForText(BTextContent.java:267)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

332
HyperSQL Database Engine (HSQLDB) / Bugs / #332 rs.isBeforeFirst() should return false
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
rs.isBeforeFirst() should return false when ResultSet is 
empty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

333
HyperSQL Database Engine (HSQLDB) / Bugs / #333 Transactions and closing server from dos bug!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http://sourceforge.net/forum/forum.php?
thread_id=945623&amp;forum_id=73674
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

334
HyperSQL Database Engine (HSQLDB) / Bugs / #334 wrong results with join in ALPHA_Q version
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is how to reproduce the problem:
- unzip the current alpha (ALPHA_Q) in some directory
- execute runServer.bat in the demo directory
- execute runManager to connect to this database
- execute the following script:
CREATE TABLE MEDIUM_CONTAINER(ID VARCHAR(28) NOT NULL
PRIMARY KEY,TITLE VARCHAR(30) NOT NULL)
CREATE TABLE CAZE(ID VARCHAR(28) NOT NULL PRIMARY KEY)
CREATE TABLE SLEEVE(ID VARCHAR(28) NOT NULL PRIMARY KEY)
INSERT INTO MEDIUM_CONTAINER
VALUES('1i1rncBXY3/zutUEEVW4WIGx/GY=','hoi')
INSERT INTO MEDIUM_CONTAINER
VALUES('HCycYbJIM0tNnAuak47DcyRtLi0=','ukguk')
INSERT INTO MEDIUM_CONTAINER
VALUES('U5Po17a9tiwrQWIdO9E0zxh/iBU=','jjjj')
INSERT INTO MEDIUM_CONTAINER
VALUES('ay7XMXKeZSaq6sq1h6FuWOhlERM=','groovy trax')
INSERT INTO MEDIUM_CONTAINER
VALUES('g89gMKcNcrKyuwMmdemfU8qpdYc=','Serious Beats 4')
INSERT INTO MEDIUM_CONTAINER
VALUES('uqYTusxB8LyRyl5CUkzYiYP7Gtw=','giugi')
INSERT INTO CAZE VALUES('1i1rncBXY3/zutUEEVW4WIGx/GY=')
INSERT INTO CAZE VALUES('g89gMKcNcrKyuwMmdemfU8qpdYc=')
INSERT INTO SLEEVE VALUES('HCycYbJIM0tNnAuak47DcyRtLi0=')
INSERT INTO SLEEVE VALUES('U5Po17a9tiwrQWIdO9E0zxh/iBU=')
INSERT INTO SLEEVE VALUES('ay7XMXKeZSaq6sq1h6FuWOhlERM=')
INSERT INTO SLEEVE VALUES('uqYTusxB8LyRyl5CUkzYiYP7Gtw=')
- now execute the following select:
select mediumco0_.id as id,
casewhen(mediumco0__1.id is not null, 1,
casewhen(mediumco0__2.id is not null, 2,
casewhen(mediumco0_.id is not null, 0, -1))) as clazz_,
mediumco0_.title as title0_
from
MEDIUM_CONTAINER mediumco0_
left outer join SLEEVE mediumco0__1 on
mediumco0_.id=mediumco0__1.id
left outer join CAZE mediumco0__2 on
mediumco0_.id=mediumco0__2.id
-&gt; this will return 2 records;
ID CLAZZ_ TITLE0_ 
---------------------------- ------ --------------- 
1i1rncBXY3/zutUEEVW4WIGx/GY= 2 hoi 
g89gMKcNcrKyuwMmdemfU8qpdYc= 2 Serious Beats 4 
2 row(s) in 0 ms
- perform the same operations with the ALPHA_M release
-&gt; the select will return 6 records;
ID CLAZZ_ TITLE0_ 
---------------------------- ------ --------------- 
1i1rncBXY3/zutUEEVW4WIGx/GY= 2 hoi 
HCycYbJIM0tNnAuak47DcyRtLi0= 1 ukguk 
U5Po17a9tiwrQWIdO9E0zxh/iBU= 1 jjjj 
ay7XMXKeZSaq6sq1h6FuWOhlERM= 1 groovy trax 
g89gMKcNcrKyuwMmdemfU8qpdYc= 2 Serious Beats 4 
uqYTusxB8LyRyl5CUkzYiYP7Gtw= 1 giugi 
6 row(s) in 20 ms
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

335
HyperSQL Database Engine (HSQLDB) / Bugs / #335 select with where on unique indexed column doesn't work well
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm working on 1.7.2 alpha_M (I have problems with 
version alpha_R - I wrote about it in the forum)
The test case is:
I have server.properties file with:
'server.database=pecan'
1. run runServer.bat
2. run runManager.bat, connect as user = sa and create 
a new user:
CREATE USER PECAN PASSWORD &quot;PECAN&quot; ADMIN
3. connect to pecan user (from the dbManager).
4. run the following sqls:
----------------
CREATE CACHED TABLE APP (
VARIANT_ID INTEGER (9) NOT NULL,
APP_ID INTEGER (9) NOT NULL,
APP_NAME VARCHAR (35) NOT NULL,
CONSTRAINT PK_APP PRIMARY KEY( VARIANT_ID));
--------------
CREATE INDEX APP ON APP(APP_ID);
--------------
ALTER TABLE APP ADD CONSTRAINT APP_IX1 UNIQUE( 
APP_NAME);
-------------
INSERT INTO APP VALUES (1, 1, 'Shelly');
-------------
INSERT INTO APP VALUES (2, 2, 'Eran');
------------
COMMIT;
------------
SHUTDOWN;
5. run runServer.bat
6. run runManager.bat - connect with user=pecan and 
run the following sqls:
-------------
SELECT * FROM APP;
(you get 2 records back)
------------
SELECT * FROM APP WHERE APP_
NAME = 'Shelly';
(the record is returned)
-----------
SELECT * FROM APP WHERE APP_
NAME = 'Eran';
(nothing is returned !!!)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

336
HyperSQL Database Engine (HSQLDB) / Bugs / #336 create user with jdbc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With 1.7.2 R the following jdbc prepared statement
&quot;create user ? password ? admin&quot;
throws SQLException &quot;parameter index out of range: 1&quot;
when trying to substitute the first ? with name using 
setString(1, &quot;name&quot;)
This was warking correctly with 1.7.2M and before
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

337
HyperSQL Database Engine (HSQLDB) / Bugs / #337 select date/time with jdbc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
our table is
create table date_test
(
DATE_TEST DATE NOT NULL
)
Do following in java
Calendar cal= Calendar.getInstance()
cal.set(1974, 10, 20, 1, 2, 3)
java.sql.Date insertDate = new java.sql.date
(cal.getTimeInMillis())
// now insert this insert date into a table 
insert = prepareStatement(&quot;insert into date_test
(date_test) values(?)&quot;);
insert.setDate(1, insertDate);
commit
now try to select the date back using following code
select = prepareStatement(&quot;select date_test.* from 
date_test where date_test = ?&quot;);
// Notice that I am setting different time then before
// but it shouldn't matter since I am querying just the 
date
cal.set(1974, 10, 20, 2, 3, 4)
java.sql.Date selectDate = new java.sql.date
(cal.getTimeInMillis())
select.setDate(1, selectDate)
The result set returned is empty
If I would set the exact time I set when I inserted the 
date, the result set would contain the record.
The same happens if I want to insert time and then 
select it with different date into a TIME column
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

338
HyperSQL Database Engine (HSQLDB) / Bugs / #338 comparison with LIKE and Pstmts fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi there,
(see below sample code). it seems that &quot;col LIKE ?&quot; is 
broken in the current release. the below code normally 
should return a row, but if I use LIKE the it does not. 
the result of the comparison is always false. if i simply 
use col = ?, it works as expected. seems to be a bug.!? 
.thomas tom@gmx.it
Connection conn = 
DriverManager.getConnection( &quot;jdbc:hsqldb:.&quot;,&quot;sa&quot;,&quot;&quot; );
Statement stmt = 
conn.createStatement();
stmt.executeUpdate(&quot;CREATE TABLE 
test (col VARCHAR(30))&quot;);
stmt.executeUpdate(&quot;INSERT INTO 
test (col) VALUES ('one')&quot;);
stmt.close();
PreparedStatement pstmt = 
conn.prepareStatement( &quot;SELECT * FROM test WHERE ( 
col LIKE ? )&quot; );
pstmt.setString(1,&quot;one&quot;);
ResultSet rs = pstmt.executeQuery();
rs.next();
System.out.println( rs.getString
(&quot;COL&quot;));
conn.close();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

339
HyperSQL Database Engine (HSQLDB) / Bugs / #339 where column in (select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given a table
CREATE TABLE dups(
pk INTEGER NOT NULL PRIMARY KEY,
val VARCHAR NOT NULL);
with content
INSERT INTO dups VALUES (1, 'first');
INSERT INTO dups VALUES (2, 'second');
INSERT INTO dups VALUES (3, 'third');
INSERT INTO dups VALUES (4, 'first');
INSERT INTO dups VALUES (5, 'first');
INSERT INTO dups VALUES (6, 'second');
following statements work as expected:
SELECT distinct(sa.pk) FROM dups sa, dups sb
WHERE sa.val=sb.val AND sa.pk!=sb.pk;
SELECT a.pk, a.val FROM dups a
WHERE a.pk in (1, 2, 4, 5, 6);
The combined statement
SELECT a.pk, a.val FROM dups a 
WHERE a.pk in (SELECT distinct(sa.pk)
FROM dups sa, dups sb 
WHERE sa.val=sb.val AND sa.pk!=sb.pk);
results in
SQL Error 
----------------------------------------------------- 
Column not found: PK / Error Code: -28 / State: S0022 
11 row(s) in 0 ms
in alpha N - R
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

340
HyperSQL Database Engine (HSQLDB) / Bugs / #340 hsqldbmin.jar looking for HSQLClientConnection
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to run embedded hsqldbmin.jar, and getting:
java.lang.NoClassDefFoundError: 
org/hsqldb/HSQLClientConnection
This comes from src.org.hsqldb.HSQLClientConnection 
line 1590 (alpha R):
isNetConn = c.sessionProxy instanceof 
HSQLClientConnection;
HSQLClientConnection is not included in hsqldbmin.jar - it 
does implement SessionInterface which is included. A fix 
for embedded mode is:
isNetConn = c.sessionProxy instanceof SessionInterface;
I don't have the background to know if this might have 
any bad side effect in server modes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

341
HyperSQL Database Engine (HSQLDB) / Bugs / #341 Deletion of .backup file causes db corruption w/JDBC
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I deleted a .backup file (isn't this permitted?). Then I 
opened the db using JDBC (DriverManager.getConnection
()). This results in a &quot;database in use&quot; error, and the db
is corrupted, having 0 bytes.
This sounds like a serious bug, if it is a bug. At any 
rate, the system should never blow away the entire db?
Thanks,
Dave C.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

342
HyperSQL Database Engine (HSQLDB) / Bugs / #342 New bug in Select/Like on primary key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Working with HSQLDB 1.7.2 - S
Following DDL:
CREATE TABLE additionaldata (
function VARCHAR(20) PRIMARY KEY,
value1 int NOT NULL,
value2 int NOT NULL, 
value3 varchar,
description varchar);
If i'm doing the following query:
select * from additionaldata where function like 'G%'
the ResultSet is empty. This is definitly wrong!
Using only 
select * from additionaldata where function like '%'
the whole table will be shown (this is ok)
Removing the &quot;Primary Key&quot; constraint from the DDL in 
the &quot;function&quot;-column causes the SQL-queries to 
perform properly.
Any ideas about that? I'm quite sure, that the version of 
HSQLDB I tried before does not behave like this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

343
HyperSQL Database Engine (HSQLDB) / Bugs / #343 LIKE error in v. 1.7.2_S
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I created a simple cached test table:
ID INTEGER IDENTITY
DESC VARCHAR(250) NOT NULL
and an index to DESC column.
I execute a simple Java program to fill the table with 
random numbers (200,000 records). No problem.
I execute this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC = '-579661107'
And works fine:
Execution: 46 ms.
Fetch: 110 ms.
Records: 1
Then I try this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC LIKE '-579661107'
And works fine too:
Execution: 31 ms.
Fetch: 110 ms.
Records: 1
And this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC LIKE '%-5796611%'
And works fine too:
Execution: 7281 ms.
Fetch: 109 ms.
Records: 1
Finally, I try this select:
SELECT DESC FROM BIGTABLE 
WHERE DESC LIKE '-5796611%'
And DON'T WORKS:
Execution: 46 ms.
Fetch: 0 ms.
Records: 0
I try also with LIKE '-57966%07' and don't works
again.
HSQLDB is unable to find the record.
Thanks,
Francesc Rosés
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

344
HyperSQL Database Engine (HSQLDB) / Bugs / #344 (ALPHA_S) Can't compile HsqlDateTime with earlier JDKs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
One can't compile HsqlDateTime.java with JDK1.3 or earlier 
because it uses Calendar's setTimeInMillis(long) and 
getTimeInMillis() methods, which were protected rather than 
public until JDK1.4 (I think it was). Equivalents, though less 
efficient, in earlier JDKs would be Calendar.setTime(new 
java.util.Date(long)) and 
Calendar.getTime().getTime().
FWIW, I've attached an 
updated HsqlDateTime.java and build.xml which use 
codeswitcher and a wrapper method to use the more efficient 
methods when JDBC3 is defined, the less efficient ones otherwise.
Using a wrapper makes the code simpler (though not so pretty) and 
the optimizer should toss the overhead. Used the 'tempDate' static 
member that was lying around seemingly unused (made it private).
Haven't done regression on it, no warrantee.
Obviously, 
I'm not a developer on the project and throw it away if you like. It's 
just FWIW.
Regards,
--
T.J. Crowder
tjcrowder 
at users
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

345
HyperSQL Database Engine (HSQLDB) / Bugs / #345 Errors in Text Tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a problem with writing and then reading text
tables.
The problems are related to the field &quot;SystemId&quot; feature.
Seems like the text tables were written without the
last column, and when reading, 
the extra column &quot;SystemId&quot; was created.
When the last column type was not the same type of
SystemId (long, i guess), 
a ClassCastException was thrown, and the server hanged
(as the client).
I studied and fixed this problem in 2 methods:
In class DatabaseRowInput:
public Object[] readData(int[] colTypes) {
int l = colTypes.length;
Object[] data = new Object[l+(makeSystemId ? 1 : 0)];
Object o;
int type;
&lt;...unmodified...&gt;
if (makeSystemId) {
data[l] = new Integer(getPos());
}
return data;
}
and in class DatabaseRowOutput:
public void writeData(Object[] data, Table t)
throws IOException, SQLException {
int[] types = t.getColumnTypes();
int l = types.length;
writeData(l, types, data);
}
Without this (or other fix) to resolve this issue,
using text tables with the 
full life cycle (attaching, updating/inserting, closing
bd, reopening, reading)
will be impossible.
The connection hangup was due to the fact that we were
not expecting a 
ClassCastException in class ServerConnection, method run().
I think a catch(Exception e) statement should be add
after the existing
one for IOException and SQLException, to avoid this
problem.
Best Regards,
Carlos Silva
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

346
HyperSQL Database Engine (HSQLDB) / Bugs / #346 1.7.1 zip missing hsqldb.gif in src/org/hsqldb/util
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After using ant to build the standard jar or any jar 
including Swing, the DatabaseManagerSwing utility will 
fail to load, on a getIcon statement in CommonSwing.
Upon examing the source, I see the .gif mentioned is 
missing from the distro. I found one on the web, put it 
in hsqldb/src/org/hsqldb/util, and reran ant (the ant file 
does mention this gif explicitly for inclusion). This fixes 
the problem (still a bug though, until the distro zip is 
fixed).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

347
HyperSQL Database Engine (HSQLDB) / Bugs / #347 .lck file created for read-only database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
- The 'readonly' property is set to 'true' in the 
&lt;database name&gt;.properties file.
- This database has been shutdown by the 'SHUTDOWN 
COMPACT' command.
Each connection to the resulting database still creates a 
&lt;database name&gt;.lck file, preventing it to be put in a 
CD-ROM, for example.
This has been tested on 1.7.2 alpha N, R and S versions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

348
HyperSQL Database Engine (HSQLDB) / Bugs / #348 number of records
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello!
I'm writing from Palermo(Sicilia).
Thanks for your hsqldb database that i'm using for a web 
application with servlet,jsp e javaBean.
The version that i use is 1.7.1 but i have found a bug, i 
think.
I use this method to find the number of records of a 
ResultSet :
public int getRowsCount(){
int i=0;
try{
rs.last();
i= rs.getRow();
rs.first();
} catch (Exception e) {System.out.println
(e.toString());} 
return i;
}
if records are 4 this method return 4 and in ResultSet 
there are 4 records but if i use while loop to print 
records, it prints 3 records if i use before this method, 
and 4 records if i don't use this method before
I use this ResultSet :
st = cConn.createStatement 
(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCU
R_READ_ONLY);
rs = st.executeQuery (&quot;SELECT 
Annunci.Key,Annunci.Data, Annunci.Annuncio,&quot;+ 
&quot;Associazioni.Associazione, 
Associazioni.Sito, Associazioni.Mail,Associazioni.Citta,&quot;+
&quot; Categorie.Categoria FROM 
Categorie,Annunci,Associazioni&quot; +
&quot; WHERE (((Associazioni.KeyCategoria) 
LIKE &quot;+ categoria +&quot;))&quot; + 
&quot; AND (((Associazioni.Citta) LIKE '%&quot;+ 
citta.toUpperCase() +&quot;%'))&quot; + 
&quot; AND 
Associazioni.KeyCategoria=Categorie.Key &quot; + 
&quot;AND Annunci.KeyAssociazione= 
Associazioni.Key order by key desc&quot;);
What can i do to find number of records without to use 
this method ?
Spero di essere stato utile
Ciao e grazie.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

349
HyperSQL Database Engine (HSQLDB) / Bugs / #349 LIKE bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a simple table with version 1.7.2 alpha R :
CREATE TABLE my_table
( name VARCHAR );
INSERT INTO my_table
VALUES ('test');
then this first SELECT statement returns this last 
inserted row:
SELECT name
FROM my_table
WHERE name LIKE 'test';
But this one don't, though it should !
SELECT name
FROM my_table
WHERE name LIKE LOWER('test');
This seems to happen when you use any string function, 
except CONCAT:
SELECT name
FROM my_table
WHERE name LIKE CONCAT('te', 'st');
... returns this row.
However when you include another string function the 
problem reappears:
SELECT name
FROM my_table
WHERE name LIKE CONCAT(SUBSTR('te', 1), 'st');
... does not return any row.
There was not any problem when I used the 1.7.2 alpha 
N version. Alpha T still have this bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

350
HyperSQL Database Engine (HSQLDB) / Bugs / #350 alter table... add default not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm running the following command in the DatabaseManager:
alter table k alter column vc add default 'dfltval'
It returns &quot;Unexpected token: ADD in statement [alter
table k alter column vc add] / Error Code: -11 / State:
37000.
version A T.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

351
HyperSQL Database Engine (HSQLDB) / Bugs / #351 saveSorted ... negative seek offset (2)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I'm using HSQL 1.7.1 with JRE1.3.1_03 in a Windows 
2000 environment. My database contains only one table 
with 8,000,000 rows (database size is about 1 GB) and 
three indexes on single columns. I had a former problem 
with creating resp. dropping an index which didn't work 
because of an
&quot;File input/output error: saveSorted java.io.IOException: 
Negative seek offset in statement [...]&quot;
error (see bug submission 780397 from 2003-07-30). I 
solved this problem by creating a new database and 
copying the data row by row.
Now I have a more serious problem: The database can't 
start anymore because of the same error (though I used 
a backup which has been successfully compacted 
before). When I remove the &quot;CREATE INDEX&quot; statements 
from the script file I get InputStream-errors (because 
the index roots aren't valid anymore), when I 
remove &quot;CREATE INDEX&quot; and &quot;SET TABLE INDEX&quot; 
commands I get no errors but have no access to the 
data anymore (though the database size stays the 
same).
No my questions:
Is there another workaround for this situation? 
How can I manipulate the &quot;SET TABLE INDEX&quot; command 
manually so it doesn't lead to the errors described above?
Will it be possible to use an index spanning more rows in 
1.7.2?
Greetings,
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

352
HyperSQL Database Engine (HSQLDB) / Bugs / #352 Create View fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This sequence 
create table bf_user(
id integer not null
)
create table BF_ISSUEDITEM(
inventory_id integer not null,
STILL_ISSUED_COUNT integer not null,
ISSUED_DATE timestamp not null,
recipient integer not null
)
create view BF_USER_STILL_ISSUEDITEM_PART as
select BF_USER.ID as ID,
BF_ISSUEDITEM.INVENTORY_ID as INVENTORY_ID,
sum(BF_ISSUEDITEM.STILL_ISSUED_COUNT) as 
STILL_ISSUED_COUNT,
min(BF_ISSUEDITEM.ISSUED_DATE) as ISSUED_SINCE
from BF_USER, BF_ISSUEDITEM
where BF_USER.ID = BF_ISSUEDITEM.RECIPIENT
AND BF_ISSUEDITEM.STILL_ISSUED_COUNT &gt; 0
group by BF_USER.ID, BF_ISSUEDITEM.INVENTORY_ID 
create view BF_USER_STILL_ISSUEDITEM_FULL as 
select BF_USER.ID as ID,
BF_USER_STILL_ISSUEDITEM_PART.INVENTORY_ID AS 
INVENTORY_ID, 
BF_USER_STILL_ISSUEDITEM_PART.STILL_ISSUED_COUN
T as STILL_ISSUED_COUNT, 
BF_USER_STILL_ISSUEDITEM_PART.ISSUED_SINCE as 
ISSUED_SINCE
from BF_USER, BF_USER_STILL_ISSUEDITEM_PART
where BF_USER.ID = 
BF_USER_STILL_ISSUEDITEM_PART.ID 
generates this exception (works in alpha M)
java.sql.SQLException: Table not found in statement [ 
select BF_USER.ID as ID, BF_USER.DOMAIN_ID as 
DOMAIN_ID, 
BF_USER_STILL_ISSUEDITEM_PART.INVENTORY_ID AS 
INVENTORY_ID, BF_USER.FIRST_NAME as 
FIRST_NAME, BF_USER.LAST_NAME as 
LAST_NAME, BF_USER.LOGIN_NAME as 
LOGIN_NAME, 
BF_USER_STILL_ISSUEDITEM_PART.STILL_ISSUED_COUN
T as STILL_ISSUED_COUNT, 
BF_USER_STILL_ISSUEDITEM_PART.ISSUED_SINCE as 
ISSUED_SINCE from BF_USER, 
BF_USER_STILL_ISSUEDITEM_PART where 
BF_USER.ID = BF_USER_STILL_ISSUEDITEM_PART.ID ]
at org.hsqldb.jdbcDriver.sqlException(Unknown 
Source)
at org.hsqldb.jdbcStatement.fetchResult
(Unknown Source)
at org.hsqldb.jdbcStatement.execute(Unknown 
Source)
at 
org.enhydra.jdbc.core.CoreStatement.execute
(CoreStatement.java:86)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

353
HyperSQL Database Engine (HSQLDB) / Bugs / #353 .new files not removed when using relative path
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I create a connection to a stand alone database using 
a relative path, when I close the connection the 
backup.new and script.new files do not get removed.
The next time I try to connect to the database and then 
disconnect I get the following exception.
java.sql.SQLException: File input/output 
error: ./db/da_database.script.new in statement 
[SHUTDOWN]
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.jdbcResultSet.&lt;init&gt;(Unknown 
Source)
at 
org.hsqldb.jdbcConnection.executeStandalone(Unknown 
Source)
at org.hsqldb.jdbcConnection.execute
(Unknown Source)
at org.hsqldb.jdbcConnection.closeStandalone
(Unknown Source)
at org.hsqldb.jdbcConnection.close(Unknown 
Source)
at ca.ewert.da.DBTest.main(DBTest.java:76)
Example:
if I use the following URL: &quot;jdbc:hsqldb:db/da_database&quot; 
the .new files don't get removed. 
But if I used: &quot;jdbc:hsqldb:C:/javaProj/Draft Assist 
2.00/build/db/da_database&quot; it seems to work fine.
using hsqldb 1.7.1 on Win2000
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

354
HyperSQL Database Engine (HSQLDB) / Bugs / #354 't' should be interpreted as 'true' for bit columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
inserting the value 't' into a bit column is
interpreted by hsqldb (1.7.2 alpha T) as 'false'.
Example :
create table test (isOk bit);
insert into table test (isOk) values ('t');
The row will now have the value 'false'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

355
HyperSQL Database Engine (HSQLDB) / Bugs / #355 Corrupted .script file using DatabaseManager
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Generating a database with about 300 tables using 
ScriptTool
generates the database files .properties and .log. After 
using
the DatabaseManager and closing it the data went 
from .log to
the .script file but seems to be corrupted.
The DatabaseManager changes the IDENTITY attribute of
the primary key columns to 
&quot;GENERATED BY DEFAULT AS IDENTITY(START WITH 0).
Using this database in my application leads to the 
following error:
&quot;error in testdb.script line: 1
Unexpected token: GENERATED in statement [CREATE 
TABLE ATTR
(ATTR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY
(START WITH 0) 
NOT NULL PRIMARY &quot;.
Questions:
Is the &quot;GENERATED BY DEFAULT ...&quot; entry of 
DatabaseManager actually 
intended / needed?
How can I avoid this DatabaseManager behaviour? Note 
that the data in the 
.log file seems to match exactly my SQL statement 
without &quot;GENERATED ...&quot; ?
I'm using version 1.72 alpha m.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

356
HyperSQL Database Engine (HSQLDB) / Bugs / #356 JDBC methode &quot;getScale&quot; always returns zero
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a bug in connecting of hsqldb and Druid 
(druid.sf.net).
Because of the &quot;not correct/not complete&quot; 
implementation of the &quot;getScale&quot; methode 
of &quot;jdbcResultSetMetaData&quot;. Durid use this methode and 
handle the colum as an Integer and not a decimal.
For more information about the druid bug see:
&quot;[ 838413 ] Exception with JDBC HSQLDB&quot;
or:
https://sourceforge.net/tracker/index.php?
func=detail&amp;aid=838413&amp;group_id=15111&amp;atid=115111
So please correct the implementation.
Thanks a lot!
Jochen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

357
HyperSQL Database Engine (HSQLDB) / Bugs / #357 TestSelfQueries fails on 1.7.2_ALPHA_T
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got 3 failures (2 errors) when running the Self test,
specifically on TestSelfQueries.txt.
The first one is:
Opened test script file: E:\hsqldb\data\TestSelfQueries.txt
java.lang.Exception: Line: 22 Expected c/3 but got
error Column not found: USER_
USERNAME in statement [/*c3*/select * from configuser
where usr_password in (use
r_username)] / /*c3*/select * from configuser where
usr_password in (user_userna
me);
at org.hsqldb.test.TestUtil.test(Unknown Source)
at org.hsqldb.test.TestUtil.testScript(Unknown
Source)
at
org.hsqldb.test.TestSelf.testPersistence(Unknown Source)
at org.hsqldb.test.TestSelf.test(Unknown Source)
at org.hsqldb.test.TestSelf.main(Unknown Source)
This one I fixed by changing user_username to usr_username.
The other one is:
java.lang.Exception: Line: 33 Expected c/0 but got
error Column not found: total
in statement [/*c0*/SELECT &quot;kosten&quot; AS &quot;total&quot; FROM
&quot;liste&quot; WHERE &quot;total&quot; &gt; 0 O
RDER BY &quot;total&quot; DESC] / /*c0*/SELECT &quot;kosten&quot; AS
&quot;total&quot; FROM &quot;liste&quot; WHERE &quot;tot
al&quot; &gt; 0 ORDER BY &quot;total&quot; DESC;
at org.hsqldb.test.TestUtil.test(Unknown Source)
at org.hsqldb.test.TestUtil.testScript(Unknown
Source)
at
org.hsqldb.test.TestSelf.testPersistence(Unknown Source)
at org.hsqldb.test.TestSelf.test(Unknown Source)
at org.hsqldb.test.TestSelf.main(Unknown Source)
This is mentioned in the file as:
-- use of column aliases in the where clause
--bug #696595
but it seems like the fix didn't take.
I built hsql Windows 2000, JDK 1.4.2_02. Did I do
something incorrectly when I built? (I have included
the entire test output)
Thanks.
Chris
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

358
HyperSQL Database Engine (HSQLDB) / Bugs / #358 Does a Constraint have an Impact Over the Returned Rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
There are two tables - TABLE_A AND TABLE_B and their 
definitions are:
CREATE TABLE table_a( PROCESS_ID BIGINT NOT NULL, 
VERSION BIGINT NOT NULL, DOMAIN VARCHAR(5) NOT 
NULL, TYPE VARCHAR(32) NOT NULL, VALUE VARCHAR
(1990), IDENTIFIER VARCHAR(32), URI VARCHAR(256))
CREATE TABLE table_b( CT_ID BIGINT NOT NULL, 
PROCESS_ID BIGINT NOT NULL, VERSION BIGINT NOT 
NULL, DOMAIN VARCHAR(5) NOT NULL, PARENT_ID 
BIGINT, ANCESTOR BIGINT, TYPE VARCHAR(32) NOT 
NULL, ATTRIBUTE VARCHAR(250), URI VARCHAR(256), 
ACTIVE_FLAG VARCHAR(1) NOT NULL, BOUNDARY 
VARCHAR(1) NOT NULL, HOLD_FLAG VARCHAR(1), 
RESTART_FLAG VARCHAR(1), SUB_FLAG VARCHAR(1), 
WARN_THRESHOLD BIGINT DEFAULT 0 NOT NULL, 
ERR_HANDLER VARCHAR(256), X DECIMAL, Y DECIMAL, 
COLOR BIGINT, SECTION BIGINT, START_NODE VARCHAR
(1), END_NODE VARCHAR(1), CONSTRAINT 
TLM_PK_CTL_M PRIMARY KEY
(PROCESS_ID,VERSION,DOMAIN))
Table table_a has the following foreign key constraint on 
table_b as:
ALTER TABLE table_a ADD CONSTRAINT table_b_fk 
FOREIGN KEY(PROCESS_ID,VERSION,DOMAIN) 
REFERENCES table_b(PROCESS_ID,VERSION,DOMAIN) ON 
DELETE CASCADE
INSERT INTO table_b VALUES
(1,1,1,'teamc',NULL,NULL,'PARAMS','Parameters',NULL,'Y','
N','N','N',NULL,0,NULL,65.0,9.0,2,0,'Y',NULL)
INSERT INTO table_b VALUES
(2,2,1,'teamc',NULL,NULL,'PARAMS','Parameters',NULL,'Y','
N','N','N',NULL,0,NULL,226.0,9.0,1,0,'Y',NULL)
INSERT INTO table_b VALUES
(3,9,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_5
secs
(1)',NULL,'Y','N','','',NULL,0,NULL,7.5,115.0,2,0,NULL,NULL)
INSERT INTO table_b VALUES
(4,10,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,120.0,115.0,2,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(5,11,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,65.0,221.0,2,0,NULL,NULL
)
INSERT INTO table_b VALUES
(6,12,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,65.0,327.0,2,0,NULL,NULL
)
INSERT INTO table_b VALUES
(7,13,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,65.0,433.0,2,0,NULL,'Y')
INSERT INTO table_b VALUES
(8,14,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,115.0,1,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(9,15,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait_
5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,221.0,1,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(10,16,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait
_5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,327.0,1,0,NULL,NU
LL)
INSERT INTO table_b VALUES
(11,17,1,'teamc',NULL,NULL,'STOREDPROC','tlm_sam_wait
_5secs
(1)',NULL,'Y','N','','',NULL,0,NULL,226.0,433.0,1,0,NULL,'Y')
INSERT INTO table_a VALUES
(1,1,'teamc','VARCHAR','SELECT par_name, par_value 
FROM TLM_SAM_PARAMS WHERE test_id=1','sql',NULL)
INSERT INTO table_a VALUES
(2,1,'teamc','VARCHAR','SELECT par_name, par_value 
FROM TLM_SAM_PARAMS WHERE test_id=1','sql',NULL)
INSERT INTO table_a VALUES
(9,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(9,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(10,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(10,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(11,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(11,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(12,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(12,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(13,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(13,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(14,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(14,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(15,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(15,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(16,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(16,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
INSERT INTO table_a VALUES
(17,1,'teamc','VARCHAR','tlm_sam_wait_5secs
(1)','procedure',NULL)
INSERT INTO table_a VALUES(17,1,'teamc','VARCHAR','&lt;%
=schema%&gt;@&lt;%=tns%&gt;','uidtns',NULL)
Now issue the following statement:
SELECT identifier, value
FROM table_a
WHERE process_id=9 AND version=1 AND 
domain='teamc'
it returns 1 (for identifier=uidtns) row instead of 2 ( 
doesn't return for identifier=procedure)
if you delete all rows from table_a where process_id != 9 
(leaving two rows) it still returns one row
If you shutdown the server and restart it only then it 
return both rows, when there are just 2 rows. It does 
not work when there are all 20 rows.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

359
HyperSQL Database Engine (HSQLDB) / Bugs / #359 Problem with clob
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
jean-francois.nadeau@loto-quebec.com
We use hsqldb 1_7_2_ALPHA with Hibernate.
In jdbcPreparedStatement.java in method 
setCharacterStream.
At this line. 
chread = reader.read(buffer);
Sometimes for some reasons. The reader is already at the 
end of the stream.
MY PATCH
reader.reset(); //add this line
chread = reader.read(buffer);
Thank you if you add this line in the next version. Now 
we use your jar, we apply the patch and give the 
patched jar to the developpers.
Jean-François Nadeau
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

360
HyperSQL Database Engine (HSQLDB) / Bugs / #360 CASEWHEN(SUM(some_filed),some_value) -&gt; Exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Any CASEWHEN-type function with any aggregating 
function as parameter causes to General error.
The reason is that in this case 
Expression.getAggregatedValue() requires special 
algorithm for value retrieving, but it missed. Possible 
solution is to add the code below to the first switch{} in 
getAggregatedValue() method:
case CASEWHEN:
if (currValue == null) {
currValue = new Object[2];
}
boolean isEqual = ((Boolean) 
eArg.getAggregatedValue (((Object[]) currValue)
[0])).booleanValue();
return isEqual ?
eArg2.eArg.getValue() :
eArg2.eArg2.getAggregatedValue
(((Object[]) currValue)[1]);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

361
HyperSQL Database Engine (HSQLDB) / Bugs / #361 1.7.2 alpha T is not compatible with JDK1.3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran a simple test using a 1.3 JDK, but the JDBC driver 
will not load because of a dependency on:
java.sql.Savepoint
Which was introduced as of JDK 1.4.
Here is the exception:
java.lang.NoClassDefFoundError: java/sql/Savepoint
at org.hsqldb.jdbcDriver.getConnection
(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown 
Source)
at java.sql.DriverManager.getConnection
(DriverManager.java:512)
at java.sql.DriverManager.getConnection
(DriverManager.java:141)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

362
HyperSQL Database Engine (HSQLDB) / Bugs / #362 DatabaseMetadata.storesUpperCaseIdentifiers() returns wrong
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Method storesUpperCaseIdentifiers() on the
DatabaseMetaData class returns true. But when I am
searching tables with DatabaseMetaData.getTables I have
to use lowercase in the table name. 
/Fredrik
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

363
HyperSQL Database Engine (HSQLDB) / Bugs / #363 ResultSet.isBeforeFirst() does not work as specified
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following javadoc code snippet is from JSDK 1.4.2:
* @return &lt;code&gt;true&lt;/code&gt; if the cursor is
before the first row;
* &lt;code&gt;false&lt;/code&gt; if the cursor is at any other
position or the
* result set contains no rows
AFAK, this works as the specification for the JDBC API.
Thus, when I have an empty ResultSet, the first call of
the method should return false, but obviously the
return value is initialized to true without checking
the ResultSet, if it contains any rows.
The ResultSet was generated with getTables(...) from
the database's metadata, and I wanted to test if a
given table already exists or has to be generated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

364
HyperSQL Database Engine (HSQLDB) / Bugs / #364 Error in jdbcDriver / getPropertyInfo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've found an error in jdbcDriver.java, while I was
looking in the source for some information about the
method getPropertyInfo (what I can expect from it):
The properties 1..3 are all assigned to pinfo[1],
overwriting the values 1..2 by value 3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

365
HyperSQL Database Engine (HSQLDB) / Bugs / #365 Warnings
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Compiling the latest alpha release iin Eclipse gave the
attached file of warnings. Mostly uneeded imports and
static methods/fields access.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

366
HyperSQL Database Engine (HSQLDB) / Bugs / #366 Assert Failed inside of Hypersonic
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get this error when issuing these queries on the
latest alpha version of 1.7.2 and I'm not sure why.
&quot;CALL IDENTITY()&quot;
DataMain: 414 - An error occurred while executing the
SQL statement. The error was Assert failed SQL: CALL
IDENTITY()
java.sql.SQLException: Assert failed
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.executeQuery(Unknown Source)
at
com.tallgroup.util.DataMain.executeThrowableSelect(DataMain.java:432)
at
com.tallgroup.util.DataMain.executeSelect(DataMain.java:410)
at
com.tallgroup.util.DataMain.executeThrowableInsert(DataMain.java:490)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:524)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:540)
at
com.tallgroup.updater.UserDataUpdater.readUserInformation(UserDataUpdater.java:655)
at
com.tallgroup.updater.UserDataUpdater.readUserDataPacket(UserDataUpdater.java:990)
at
com.tallgroup.updater.UserDataUpdater.processUserDataPacket(UserDataUpdater.java:953)
at
com.tallgroup.framework.ocs.listeners.FileListener.endReceiveFile(FileListener.java:215)
at
com.tallgroup.framework.ocs.listeners.FileListener.access$000(FileListener.java:21)
at
com.tallgroup.framework.ocs.listeners.FileListener$1.run(FileListener.java:329)
&quot;update PERSON_PROPERTYEXPRESSION set EXPRESSION='0'
where PROPERTYTEXTID=31927 and PERSONID=360 and
OBJECTID=4317 and OBJECTTYPEID=-11&quot;
DataMain: 578 - An error occurred while executing the
SQL update statement. The error was Assert failed SQL:
update PERSON_PROPERTYEXPRESSION set EXPRESSION='0'
where PROPERTYTEXTID=31927 and PERSONID=360 and
OBJECTID=4317 and OBJECTTYPEID=-11 
java.sql.SQLException: Assert failed
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.executeUpdate(Unknown Source)
at
com.tallgroup.util.DataMain.executeThrowableUpdate(DataMain.java:556)
at
com.tallgroup.util.DataMain.executeUpdate(DataMain.java:574)
at
com.tallgroup.updater.UserDataUpdater.readUserInformation(UserDataUpdater.java:650)
at
com.tallgroup.updater.UserDataUpdater.readUserDataPacket(UserDataUpdater.java:990)
at
com.tallgroup.updater.UserDataUpdater.processUserDataPacket(UserDataUpdater.java:953)
at
com.tallgroup.framework.ocs.listeners.FileListener.endReceiveFile(FileListener.java:215)
at
com.tallgroup.framework.ocs.listeners.FileListener.access$000(FileListener.java:21)
at
com.tallgroup.framework.ocs.listeners.FileListener$1.run(FileListener.java:329)
&quot;insert into PERSON_PROPERTYEXPRESSION
(PROPERTYTEXTID,EXPRESSION,PERSONID,OBJECTID,OBJECTTYPEID)
values (31927,'0',360,4317,-11)&quot;
DataMain: 528 - An error occurred while executing the
SQL insert statement. The error was Assert failedSQL:
insert into PERSON_PROPERTYEXPRESSION
(PROPERTYTEXTID,EXPRESSION,PERSONID,OBJECTID,OBJECTTYPEID)
values (31927,'0',360,4317,-11)
java.sql.SQLException: Assert failed
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.execute(Unknown Source)
at
com.tallgroup.util.DataMain.executeThrowableInsert(DataMain.java:471)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:524)
at
com.tallgroup.util.DataMain.executeInsert(DataMain.java:540)
at
com.tallgroup.updater.UserDataUpdater.readUserInformation(UserDataUpdater.java:655)
at
com.tallgroup.updater.UserDataUpdater.readUserDataPacket(UserDataUpdater.java:990)
at
com.tallgroup.updater.UserDataUpdater.processUserDataPacket(UserDataUpdater.java:953)
at
com.tallgroup.framework.ocs.listeners.FileListener.endReceiveFile(FileListener.java:215)
at
com.tallgroup.framework.ocs.listeners.FileListener.access$000(FileListener.java:21)
at
com.tallgroup.framework.ocs.listeners.FileListener$1.run(FileListener.java:329)
If you need any more info or some test data just let me
know.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

367
HyperSQL Database Engine (HSQLDB) / Bugs / #367 Unexpected token
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry to submit again, but I forgot to login in the 
preceeding submission. Hope you don't mind.
I got unexpected token when I tried to connect to the 
attaches database. You can launch runManager to 
reproduce the error ( stand alone engine)
Can you help me ? Thanks a lot.
visual
visual@club-internet.fr
C:\hsql\hsqldb\demo>java -classpath ;..\lib\hsqldb.jar 
org.hsqldb.util.DatabaseM
anager
java.sql.SQLException: Unexpected token: 37000 
Unexpected token: in statement
[
]
at org.hsqldb.Trace.getError(Trace.java:226)
at org.hsqldb.Log.runScript(Log.java:863)
at org.hsqldb.Log.open(Log.java:306)
at org.hsqldb.Database$Logger.openLog
(Database.java:2596)
at org.hsqldb.Database.<init>(Database.java:203)
at org.hsqldb.jdbcConnection.openStandalone
(jdbcConnection.java:2849)
at org.hsqldb.jdbcConnection.<init>
(jdbcConnection.java:2428)
at org.hsqldb.jdbcDriver.connect
(jdbcDriver.java:176)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at java.sql.DriverManager.getConnection(Unknown 
Source)
at 
org.hsqldb.util.ConnectionDialog.createConnection
(ConnectionDialog.ja
va:108)
at org.hsqldb.util.ConnectionDialog.actionPerformed
(ConnectionDialog.jav
a:305)
at java.awt.Button.processActionEvent(Unknown 
Source)
at java.awt.Button.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl
(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown 
Source)
at java.awt.EventQueue.dispatchEvent(Unknown 
Source)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarch
y(Unknown Source)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown 
Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

368
HyperSQL Database Engine (HSQLDB) / Bugs / #368 bad cache logic
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bug scenario:
I have obtained <TurnDetails> object (result) from
database using something like:
========================================
Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery("SELECT t.turnDetails
FROM turnTable AS t WHERE t.turnNum = " + num);
TurnDetails result = null;//HERE IS THE OBJECT OF
INTEREST!!
if (rs.next())
{
result = (TurnDetails)(rs.getObject("turnDetails"));
}
rs.close();
stmt.close();
========================================
conn is database connection that is created on program
init and persists all program lifetime:
static Connection
conn=DriverManager.getConnection("jdbc:hsqldb:gamedb/game",
"sa", "");
First time object <result> is obtained correctly, all
works fine. I am changes several object's fields during
program lifetime and, after all, I want to get the
original unchanged object, that is stored in database.
Hovewer, code described above returns me OLD object
with CHANGED fields (in fact, there is no difference
between object that was manipulated during program
lifetime and returned object). 
Here is workaround for this problem: if I close and
reopen database connection, i'll get fresh unchanged
object (but only first time. Each time I want to get
FRESH UNCHANGED object, I should close/reopen database
connection, and this is too slow). Seems, that
connection caches objects and simply returns me old
object in spite of the fact that it was changed in memory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

369
HyperSQL Database Engine (HSQLDB) / Bugs / #369 Null-value update causes unrelated contraint violation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a schema that works well in hsqldb 1.7.1 but fails 
miserably in 1.7.2RC1. 
I execute the following statements (in a Java SQL tool 
using hsql in-memory mode)
CREATE CACHED TABLE AUTH_GroupSubject (
description VARCHAR,
parent BIGINT,
admin BIGINT NOT NULL,
id_ BIGINT,
UNIQUE ( id_ ))
CREATE CACHED TABLE AUTH_UserSubject (
subjectName VARCHAR NOT NULL,
id_ BIGINT,
UNIQUE ( id_ ),
PRIMARY KEY ( subjectName ));
ALTER TABLE AUTH_GroupSubject ADD CONSTRAINT 
AUTH_GroupSubject_REF_parent 
FOREIGN KEY ( parent )
REFERENCES AUTH_GroupSubject ( id_ );
ALTER TABLE AUTH_GroupSubject ADD CONSTRAINT 
AUTH_GroupSubject_REF_admin 
FOREIGN KEY ( admin )
REFERENCES AUTH_UserSubject ( id_ );
insert into AUTH_UserSubject values ('admin', 100);
insert into AUTH_GroupSubject values (null, null, 100, 
200);
update AUTH_GroupSubject set description = null,
parent = null, admin = 100 where id_ = 200
The last statement causes SQLException shown below.
Notice that the values updated on the last statement is 
identical to the values being inserted!
Now if I execute 
update AUTH_GroupSubject set description = '',
parent = null, admin = 100 where id_ = 200
It works!
----
java.sql.SQLException: Integrity constraint violation - 
no parent AUTH_GROUPSUBJECT_REF_ADMIN table: 
AUTH_GROUPSUBJECT in statement [UPDATE 
AUTH_GroupSubject SET description = ?, parent = ?, 
parent_model_ = ?, admin = ?, admin_model_ = ?,
version_ = ? WHERE id_ = ? AND version_ = ?]
at org.hsqldb.jdbcDriver.throwError(Unknown 
Source)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(Unknown Source)
at 
com.enkisoft.encore.impl.sqlstore.SqlStore.updateData
(SqlStore.java:991)
at 
com.enkisoft.encore.impl.sqlstore.SqlStore.updateData
(SqlStore.java:978)
at 
com.enkisoft.encore.impl.sqlstore.SqlStore.persistChange
dEDO(SqlStore.java:1013)
at 
com.enkisoft.encore.impl.StoreImplementationBase.persis
tAll(StoreImplementationBase.java:943)
at 
com.enkisoft.encore.impl.StoreImplementationBase.commi
t(StoreImplementationBase.java:734)
... 40 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

370
HyperSQL Database Engine (HSQLDB) / Bugs / #370 1.7.2 is 25% slower than 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my test of schema consisting a few tables and 
references (cascade delete), the performance of 1.7.2 
is about 25-30% slower than 1.7.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

371
HyperSQL Database Engine (HSQLDB) / Bugs / #371 In  .log file, some command lines are corrupt
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here are the first few lines of the log file.
/*C1*/CONNECT USER SA PASSWORD ""
S/*C*ORD1 */""S
S/*C*ORD1 */""S
ET AUTOCOMMIT FALSE
/*C3*/CONNECT USER SA PASSWORD ""
/*C4*/CONNECT USER SA PASSWORD ""
/*C5*/CONNECT USER SA PASSWORD ""
SET AUTOCOMMIT FALSE
Is there a bug in the line printer? Seems similar to
the problem I saw awhile ago on the forums (seeing "T"
or some other character) at the beginning of a log file
line. This was from a database that was not cleanly
shut down. 
This was on a two CPU machine, Solaris, Java 1.4.0_06.
I saw the same problem on Linux on 1.4.1. Perhaps
there is a synchronization issue?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

372
HyperSQL Database Engine (HSQLDB) / Bugs / #372 File input/output error: *.backup in version 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm currently using the HSQL database engine 1.7.1 on 
and an embedded XP environment using Sun's 1.4.1 Java 
VM.
On some occasions when a hard boot has occured (while 
the HsqlDB (running as a server) is running with a couple 
of connections possibly still open to it, but idle), I've 
found the database files to be corrupt upon reboot (not 
only the *.backup file as the captured event below 
indicates, but also *.script and *.data files)
The *.properties file always seems to 
indicate 'modified=yes' after boot up.
After reboot, the following exception is thrown when the 
DB is started up again after a hard boot -
java -cp .\hsqldb.jar org.hsqldb.Server -database e
sp
Opening database: esp
HSQLDB server 1.7.1 is running
Use SHUTDOWN to close normally. Use [Ctrl]+[C] to 
abort abruptly
Server.run/init: java.sql.SQLException: File input/output 
error: esp.backup
java.sql.SQLException: File input/output error: 
esp.backup
at org.hsqldb.Trace.getError(Trace.java:236)
at org.hsqldb.Trace.error(Trace.java:323)
at org.hsqldb.Log.restoreBackup(Log.java:774)
at org.hsqldb.Log.open(Log.java:299)
at org.hsqldb.Database$Logger.openLog
(Database.java:2624)
at org.hsqldb.Database.open(Database.java:226)
at org.hsqldb.Database.<init>(Database.java:188)
at org.hsqldb.Server.openDB(Server.java:178)
at org.hsqldb.Server.run(Server.java:196)
at org.hsqldb.Server.main(Server.java:147)
This exception is difficult to reproduce as it doesn't 
seem to occur after a hard boot.
The *.properties file indicates - 
#HSQL database
#Tue Jan 06 16:01:52 GMT 2004
sql.strict_fk=true
readonly=false
sql.strong_fk=true
hsqldb.version=1.7.1
version=1.7.1
hsqldb.cache_scale=15
sql.compare_in_locale=false
sql.month=true
hsqldb.log_size=5
jdbc.get_column_name=true
modified=yes
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.1
hsqldb.compatible_version=1.7.0
sql.enforce_size=false
Is there anything I could do to prevent this from 
occuring?
Mail address:
david.hanna@mosaicsoftware.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

373
HyperSQL Database Engine (HSQLDB) / Bugs / #373 RC1: ROUND makes an exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In construction like 
select round(coalesce(sum(<dec_column>),0),2) from 
<some_table> 
the query returns correct result if sum() returns some 
value. If sum() returns null then "General error: 
java.lang.NullPointerException" appears.
If round() removed and sum() is null, the query returns 0 
as expected
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

374
HyperSQL Database Engine (HSQLDB) / Bugs / #374 Error in Server.start()? (1.7.2 RC1)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
This little example code does not work as expected in
1.7.2 RC1 
Server server = new Server();
server.start();
server.stop();
The server does not stop. It seem the start() returns
before the server is fully started. The javadoc for the
start method clearly states:
[..] it blocks only until the server's background
thread notifies the calling thread that the server has
either started successfully of failed to do so.
IMHO the start method should block until the server is
completly started. 
Futhermore I would have expected the start() method to
throw an exception if unable to start.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

375
HyperSQL Database Engine (HSQLDB) / Bugs / #375 .script file contains wrong CREATE TRIGGER statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have run the following statements on a newly created
database:
create table trigger_table (nr integer);
create trigger my_trigger after update on trigger_table
call "mytest.TestTrigger";
The trigger was create successfully (no error, and it
was visible in SYSTEM_TRIGGERS)
Shutdown and re-connect to the database gives an error.
A quick look at the .script file shows that the
following script is generated:
CREATE TABLE TRIGGER_TABLE(NR INTEGER)
CREATE TRIGGERMY_TRIGGER AFTER UPDATE ON TRIGGER_TABLE
CALL "mytest.TestTrigger"
CREATE USER SA PASSWORD "" ADMIN
Note the missing space in "CREATE TRIGGERMY_TRIGGER"
which fails thus the database cannot be opened. 
1.7.2 RC1, JDK 1.4.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

376
HyperSQL Database Engine (HSQLDB) / Bugs / #376 Weird exception when column not specified
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This weird exception happens when I don't specify the
column FREQUENCYOFUSE.
Here's my DDL:
CREATE CACHED TABLE TEXTCONTENT(TEXTID INTEGER DEFAULT
NULL NOT NULL,LANGUAGEID INTEGER DEFAULT NULL NOT
NULL,TEXTCONTENT VARCHAR(4000) NOT NULL,ORIGINAL
TINYINT DEFAULT 0 NOT NULL,FREQUENCYOFUSE TINYINT
DEFAULT NULL,SHOULDTRANSLATE TINYINT DEFAULT 1 NOT
NULL,HASBEENREVIEWED TINYINT DEFAULT 0 NOT
NULL,ISCOURSECONTENT TINYINT DEFAULT 0 NOT
NULL,CONSTRAINT PK_TEXTCONTENT PRIMARY
KEY(TEXTID,LANGUAGEID),CONSTRAINT
TEXTCONTENT_FK31021484635517 FOREIGN KEY(LANGUAGEID)
REFERENCES LANGUAGE(LANGUAGEID))
And here's the exception:
DataMain: 622 - An error occurred while executing the
SQL delete statement. The error was Wrong data type:
For input string: "NULL"SQL: insert into textcontent
(languageid,textcontent,shouldtranslate,original,iscoursecontent,textid)
values (-12,'Daves',1,1,1,103519)
java.sql.SQLException: Wrong data type: For input
string: "NULL"
at org.hsqldb.jdbcDriver.sqlException(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbcStatement.execute(Unknown Source)
at com.tallgroup.util.DataMain.execute(DataMain.java:600)
If I specify the column FREQUENCYOFUSE then it works
just fine.
Let me know if you need any more information or if I'm
doing something wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

377
HyperSQL Database Engine (HSQLDB) / Bugs / #377 Indexes are mixed up when adding index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a new index is added to a table WHICH ALREADY 
CONTAINS DATA, the data structures that implement 
the different indexes are mixed up with each other 
(cross-linked). In our case, the result was that data 
slowly disappeared from the table because the indexes 
became corrupted when data was updated. In one lucky 
case, we got an assertion error after several updates to 
the table.
The attachment contains a fix in the form of a diff which 
can be applied to revision 1.72 of 
org/hsqldb/Table.java . It seems to be good also for the 
(at this time) most current version 1.87.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

378
HyperSQL Database Engine (HSQLDB) / Bugs / #378 Internal Error : Invalid Compiled Statement ID
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My testsuite of about 600 tests encounters this error 
several times.
Caused by: java.sql.SQLException: Internal Error : 
Invalid Compiled Statement ID:
at org.hsqldb.jdbcDriver.throwError(Unknown 
Source)
at 
org.hsqldb.jdbcPreparedStatement.executeQuery
(Unknown Source)
at 
org.enhydra.jdbc.core.CoreCallableStatement.executeQu
ery(CoreCallableStatement.java:332)
at 
com.abmira.templates.data.HsqlDBDTPageDatabaseSche
ma.insertAllDTPages
(HsqlDBDTPageDatabaseSchema.java:200)
... 20 more
Also many other tests which are passing on 1.7.2 alpha 
M are failing. All these tests are also passing on SapDB. 
Other common error is
Caused by: java.sql.SQLException: Try to insert null into 
a non-nullable column: column: FILE_TYPE_ID table: 
BF_FT_ROLE_MAP in statement [insert into 
BF_FT_ROLE_MAP select ?, ROLE_ID, USER_TYPE, 
ORDER_NUMBER from BF_FT_ROLE_MAP where 
FILE_TYPE_ID=?]
at org.hsqldb.jdbcDriver.throwError(Unknown 
Source)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(Unknown Source)
at 
org.enhydra.jdbc.core.CorePreparedStatement.executeU
pdate(CorePreparedStatement.java:101)
at 
com.abmira.templates.data.FileTypeDatabaseFactory.cop
yFTRoles(FileTypeDatabaseFactory.java:1007)
... 19 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

379
HyperSQL Database Engine (HSQLDB) / Bugs / #379 Embedded Interserct doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
THis didn't work on 1.7.2 alpha M and on RC1, works on 
sapdb
CREATE TABLE QUERY_TEST " +
"(VALUE_1 INTEGER NOT NULL," +
"VALUE_2 INTEGER NOT NULL)
the test case below generate following error
junit.framework.AssertionFailedError: Unexpected token 
in statement [select VALUE_1 from QUERY_TEST where 
VALUE_2 in ((select VALUE_2 from QUERY_TEST) 
intersect (select VALUE_1 from QUERY_TEST))]
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue
(Assert.java:20)
at 
com.abmira.database.driver.QueryTest.testIntersectQuer
y(QueryTest.java:411)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at junit.framework.TestCase.runTest
(TestCase.java:154)
at junit.framework.TestCase.runBare
(TestCase.java:127)
at junit.framework.TestResult.protect
(TestResult.java:106)
at junit.framework.TestResult.runProtected
(TestResult.java:124)
at junit.framework.TestResult.run
(TestResult.java:109)
at junit.framework.TestCase.run
(TestCase.java:118)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at 
com.abmira.core.data.DatabaseTestSuite.runTest
(DatabaseTestSuite.java:137)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
nTests(RemoteTestRunner.java:397)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
n(RemoteTestRunner.java:281)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ma
in(RemoteTestRunner.java:173)
---------------------------------------------------
public void testIntersectQuery(
) throws Throwable
{
final String INSERT = "insert into QUERY_TEST 
(VALUE_1, VALUE_2) values (?,?)";
final String DELETE = "delete from QUERY_TEST";
final String SELECT = "select VALUE_1 from 
QUERY_TEST where VALUE_2 in " +
"((select VALUE_2 from QUERY_TEST) " +
"intersect " +
"(select VALUE_1 from QUERY_TEST))";
PreparedStatement insertStatement = null;
PreparedStatement deleteStatement = null;
PreparedStatement selectStatement = null;
ResultSet rsResults = null;
int iInsertCount;
int iIndex;
try
{
m_transaction.begin();
try
{
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 1);
insertStatement.setInt(2, 11);
insertStatement.execute();
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 11);
insertStatement.setInt(2, 12);
insertStatement.execute();
m_transaction.commit();
}
catch (Throwable throwable)
{
m_transaction.rollback();
throw throwable;
}
finally
{
DatabaseUtils.closeStatement
(insertStatement);
}
try
{
selectStatement = 
m_connection.prepareStatement(SELECT);
rsResults = selectStatement.executeQuery();
assertTrue("There should be rows in result", 
rsResults.next());
assertFalse("There should be no more rows in 
result", rsResults.next());
}
catch (SQLException sqleExc)
{
assertTrue(sqleExc.getMessage(), false);
}
finally
{
DatabaseUtils.closeResultSetAndStatement
(rsResults, selectStatement);
}
}
finally
{
m_transaction.begin();
try
{
deleteStatement = 
m_connection.prepareStatement(DELETE);
deleteStatement.execute();
m_transaction.commit();
}
catch (Exception eExc)
{
m_transaction.rollback();
throw eExc;
}
finally
{
DatabaseUtils.closeStatement
(deleteStatement);
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

380
HyperSQL Database Engine (HSQLDB) / Bugs / #380 Embedded Union doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
THis didn't work on 1.7.2 alpha M and on RC1, works on 
sapdb
CREATE TABLE QUERY_TEST " +
"(VALUE_1 INTEGER NOT NULL," +
"VALUE_2 INTEGER NOT NULL)
the test case below generate following error
junit.framework.AssertionFailedError: Unexpected token 
in statement [select VALUE_1 from QUERY_TEST where 
VALUE_2 in ((select VALUE_2 from QUERY_TEST) union 
(select VALUE_1 from QUERY_TEST))]
at junit.framework.Assert.fail(Assert.java:47)
at junit.framework.Assert.assertTrue
(Assert.java:20)
at 
com.abmira.database.driver.QueryTest.testUnionQuery
(QueryTest.java:323)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at junit.framework.TestCase.runTest
(TestCase.java:154)
at junit.framework.TestCase.runBare
(TestCase.java:127)
at junit.framework.TestResult.protect
(TestResult.java:106)
at junit.framework.TestResult.runProtected
(TestResult.java:124)
at junit.framework.TestResult.run
(TestResult.java:109)
at junit.framework.TestCase.run
(TestCase.java:118)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at junit.framework.TestSuite.runTest
(TestSuite.java:208)
at 
com.abmira.core.data.DatabaseTestSuite.runTest
(DatabaseTestSuite.java:137)
at junit.framework.TestSuite.run
(TestSuite.java:203)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
nTests(RemoteTestRunner.java:397)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ru
n(RemoteTestRunner.java:281)
at 
org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.ma
in(RemoteTestRunner.java:173)
---------------------------------------------------
public void testUnionQuery(
) throws Throwable
{
final String INSERT = "insert into QUERY_TEST 
(VALUE_1, VALUE_2) values (?,?)";
final String DELETE = "delete from QUERY_TEST";
final String SELECT = "select VALUE_1 from 
QUERY_TEST where VALUE_2 in " +
"((select VALUE_2 from QUERY_TEST) " +
"union " +
"(select VALUE_1 from QUERY_TEST))";
PreparedStatement insertStatement = null;
PreparedStatement deleteStatement = null;
PreparedStatement selectStatement = null;
ResultSet rsResults = null;
int iInsertCount;
int iIndex;
try
{
m_transaction.begin();
try
{
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 1);
insertStatement.setInt(2, 11);
insertStatement.execute();
insertStatement = 
m_connection.prepareStatement(INSERT);
insertStatement.setInt(1, 2);
insertStatement.setInt(2, 12);
insertStatement.execute();
m_transaction.commit();
}
catch (Throwable throwable)
{
m_transaction.rollback();
throw throwable;
}
finally
{
DatabaseUtils.closeStatement
(insertStatement);
}
try
{
selectStatement = 
m_connection.prepareStatement(SELECT);
rsResults = selectStatement.executeQuery();
assertTrue("There should be rows in result", 
rsResults.next());
assertTrue("There should be rows in result", 
rsResults.next());
assertFalse("There should be no more rows in 
result", rsResults.next());
}
catch (SQLException sqleExc)
{
assertTrue(sqleExc.getMessage(), false);
}
finally
{
DatabaseUtils.closeResultSetAndStatement
(rsResults, selectStatement);
}
}
finally
{
m_transaction.begin();
try
{
deleteStatement = 
m_connection.prepareStatement(DELETE);
deleteStatement.execute();
m_transaction.commit();
}
catch (Exception eExc)
{
m_transaction.rollback();
throw eExc;
}
finally
{
DatabaseUtils.closeStatement
(deleteStatement);
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

381
HyperSQL Database Engine (HSQLDB) / Bugs / #381 Bug with Clob functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
guillaume.nodet@deliasystems.com
jdbcClob's functions getSubString() and position() 
handles index badly. The spec says the index should 
begin at 1, but they are coded as if they are handled at 
0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

382
HyperSQL Database Engine (HSQLDB) / Bugs / #382 getTimestampString(Timestamp x, Calendar cal)  bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
The getTimestampString(Timestamp x, Calendar cal)
method in org.hsqldb.HsqlDateTime class have x's
milliseconds part added twice. See the following code
for current implementation and the error place. 
sdfts.format(new java.util.Date(x.getTime() +
x.getNanos() / 1000000)); 
It is not necessary to add x.getNanos() /1000000.
x.getTime() already includes the millisecond part. I
think the author thought x.getTime() just return the
integral seconds part.
For example,
take timestamp 2004-01-19 23:59:59.999 (from UTC+8) as
x and calendar with UTC as cal, the return value is 
2004-01-19 16:00:00. The correct returned value should
be 2004-01-19 15:59:59:999
Regards,
Rice
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

383
HyperSQL Database Engine (HSQLDB) / Bugs / #383 OutOfMemoryError when telnetting to the server.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
If I start the server at telnet to it using "telnet
localhost 9001" and write "aa<enter><enter>" [1] in
the telnet prompt. Then the server will throw an
OutOfMemoryError.
Granted this is not ordinary usage. But I think a
server should be able to handle malformed requests
without running out of memory. The server should
somehow detect that the client is bogus and ignore it. 
[1] do not type <enter> but hit enter...
Btw this is on 1.7.2RC@jdk 1.4.1_03
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

384
HyperSQL Database Engine (HSQLDB) / Bugs / #384 setMaxRows on preparedStatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
The setMaxRows does not work for a prepredStatement. I
had a look at the code for jdbcPreparedStatement and
saw that the executeQuery() method never updates the
maxRows on the resultOut(Result) instance. The same
goes for execute().
Cheers Jaco
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

385
HyperSQL Database Engine (HSQLDB) / Bugs / #385 res: urls for JWS do not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the file HsqlProperties.java, there is a method:
public static boolean checkFileExists(String
fileName, boolean resource,
Class cla)
throws IOException {
if (fileName == null || fileName.length() == 0) {
return false;
}
String propFilename = fileName + ".properties";

return resource ? null !=
cla.getResource(propFilename)
FileUtil.exists(propFilename);
}

the problem is, cla.getResource translates package
names into directories, so trying to open:
jdbc:hsqldb:res:dir/mydatabase
Would result in this class trying to check if
dir/mydatabase.properties
exists, which in turn is translated as 
dir/mydatabase/properties
Which obviously does not exist. Note that this problem
does not happen if the URL starts with / (something
that is not correct, since the classpath is relative,
but is needed to disable the package translation
mecanism). The proper solution would be to call
cla.getClassLoader().getResource(). You don't even have
to pass cla as an argument, since
Thread.currentThread().getContextClassLoader() also works.
Another two points:
1.- In the example jnlp file that you provided, there
are some properties especified in doc/databaseinjar.txt
to be put in a jnlp file as an example of use
<property name="jdbc.drivers"
value="org.hsqldb.jdbcDriver"/>
problem is, JWS does not allow (without signing the
jar) to System.getProperty() anything that does not
start with "jnlp." or "javaws.", as
<property name="jnlp.jdbc.drivers"
value="org.hsqldb.jdbcDriver"/>
2.- Didn't check that too much, but it looked as if
checkFileExists is called too often. IIRC even calling
to Connection.close() does trigger a call to this one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

386
HyperSQL Database Engine (HSQLDB) / Bugs / #386 Inserting binary datas fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a problem trying to insert a File in a 
LONGVARBINARY field.
Here's the code I use to insert:
PreparedStatement pstatement = 
connection.prepareStatement("INSERT INTO FILES
(ID,FILE) VALUES(?,?)");
pstatement.setInt(1, getFilesLastID() + 1);
InputStream inputStream = null;
try{
inputStream=new FileInputStream(new File
("test.txt"));
}
catch(FileNotFoundException fnfe){
fnfe.printStackTrace();
}
pstatement.setBinaryStream(2, inputStream, (int)new 
File(path).length()); 
pstatement.executeUpdate();
And here's the Exception thrown:
Try to insert null into a non-nullable column: column: 
FILE table: FILES in statement [INSERT INTO FILES
(ID,FILE) VALUES(?,?,)]
(My FILE field is NOT NULL)
I have the same problem when using the 
setBinaryStream methos.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

387
HyperSQL Database Engine (HSQLDB) / Bugs / #387 getMetaData() and getColumns(null, null, tableName, null)...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
There is a case sensitivity issue with 
DatabaseMetaData.getColumns(null, null, tableName, 
null);
I have a table called "individual". The following code 
works:
public TestGetMetaData1() throws SQLException, 
ClassNotFoundException {
super();
Connection connection = null;
DatabaseMetaData dmd = null;
ResultSet rs = null;
String columnName = null;
String className = null;
String connectUrl = null;
String connectUser = null;
String connectPassword = null;
String tableName = null;
// hsqldb
className = "org.hsqldb.jdbcDriver";
connectUrl = "jdbc:hsqldb:hsql://localhost";
connectUser = "sa";
connectPassword = "";
tableName = "INDIVIDUAL";
Class.forName(className);
connection =
DriverManager.getConnection(connectUrl, 
connectUser, connectPassword);
dmd = connection.getMetaData();
rs = dmd.getColumns(null, null, tableName, null);
System.out.println("Init done");
while (rs.next()) {
columnName = rs.getString
(K.JCOLUMN_NAME).toLowerCase();
System.out.println("Column: " + columnName);
}
System.out.println("Finsihed");
}
if i change:
tableName = "INDIVIDUAL";
to
tableName = "individual";
the code works, but nothing happens...
(using 1.7.2 RC1).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

388
HyperSQL Database Engine (HSQLDB) / Bugs / #388 2 now generates 2 different times
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have not tried the latest version, just up to alpha
M, but when I have statement like
insert (......) into ... values (.... now, now)
(the statement contains multiple now calls) in certain
situations (probably depends on timing) the times
returned by now are different and therefore the insert
puts two different values into the database even though
the intent is to put two
of the same values there.
Not sure if this is a bug, but it is definitely little
unpexpected so I am bringing it up to hear your opinion.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

389
HyperSQL Database Engine (HSQLDB) / Bugs / #389 PreparedStatement.getParameterMetaData()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB 1.7.2 RC1
Hi,
PreparedStatement.getParameterMetaData() is not 
implemented.
Could you provide a dummy implementation to avoid:
java.lang.AbstractMethodError: 
org.hsqldb.jdbcPreparedStatement.getParameterMetaDat
a()Ljava/sql/ParameterMetaData;
at ...
Tx
jgp
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

390
HyperSQL Database Engine (HSQLDB) / Bugs / #390 Delete query doesn't allow conditional statements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've attempted in every possible way to issue a delete 
query that looks for <statement> and <statement> and 
it always gives java exception errors. The same 
conditional statement works fine in the search or update 
queries.
Perhaps I dont have the right syntax? But i've tried 
almost every SQL variation and then some.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

391
HyperSQL Database Engine (HSQLDB) / Bugs / #391 correlated update results change
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
In the 1.7.1 the following worked fine:
update waits set operation_seq = ( 
select min(o.operation_seq) 
from db_operations o 
where o.line_no > line_no 
and o.cursor_no = cursor_no ) 
With 1.7.2 operation_seq is not updated, but the update 
count is correct.
Has the syntax for the correlated update changed? 
What is the correct syntax?
The SQLServer and Oracle formats that i tried caused 
sytax errors.
thanks
trevor
test case:
String sql1 = "create table wait (line_no smallint, 
cursor_no smallint, op_seq smallint)";
String sql2 = "create table oper (line_no smallint, 
cursor_no smallint, op_seq smallint)";
String sql3 = "insert into wait values (10,2,0)";
String sql4 = "insert into oper values (11,2,5)";
String sql5 = "insert into wait values (15,2,0)";
String sql6 = "insert into oper values (19,2,9)";
String sql7 = "update wait set op_seq = ( "
+ " select min(o.op_seq) from oper o "
+ " where o.line_no > line_no "
+ " and o.cursor_no = cursor_no ) ";
v1.7.2 leaves wait.op_seq == 0
v1.7.1 updates wait.op_seq to 5 and 9
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

392
HyperSQL Database Engine (HSQLDB) / Bugs / #392 UPDATE failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version 1.7.1
UPDATE PRODUCT SET PRICE = 10.78 WHERE 
PRODUCT.ID = 6 works, but
UPDATE PRODUCT SET PRODUCT.PRICE = 10.78 
WHERE PRODUCT.ID = 6 fails with error:
Column not found: PRODUCT.PRICE in statement 
[UPDATE PRODUCT SET PRODUCT.PRICE = 10.78 
WHERE PRODUCT.ID = 6 ] Error Code: -28/State 
S0022
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

393
HyperSQL Database Engine (HSQLDB) / Bugs / #393 Server hangs on select statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The attached zip file contains a SELECT statement that 
worked in 1.7.1 but in 1.7.2 RC1 doesn't work. In 1.7.2 
the server gets locked up and CPU utilization goes to 
100%. I then have to kill the server.
I tested this statement with org.hsqldb.util.
DatabaseManagerSwing and with DbVisualizer (commercial 
SQL manager) and with my Java application. I got the 
same results.
This statement works fine with a MySQL version of my 
database.
The zip files contains the SELECT statement, the db 
script (pinyin.script), the server.properties and pinyin.
properties and db.properties
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

394
HyperSQL Database Engine (HSQLDB) / Bugs / #394 float precision lost &lt;k@kylemiller.com&gt;
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a problem in 1.7.1 and release candidate 1.7.2.
if you have a float like 9.3, and call set float on a 
prepared statement the number saved in the db is 
9.300000190734863. I looked in the source and the 
setFloat method on prepared statement is just a pass 
through method to setDouble. The problem is when you 
cast a float to a double the precision changes, as in the 
problem above.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

395
HyperSQL Database Engine (HSQLDB) / Bugs / #395 null value not accepted in IN (..) clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
null values are not accepted in IN (..) clause.
This would be very helpful for me, because I 
programmatically create long IN-clauses in which null 
might occur. Having to change it all to 
where xyz IN (....) or xyz=null would require some 
programming effort.
create temp table testtable (xx integer);
insert into testtable values (1);insert into testtable 
values (3);insert into testtable values (null);
select count(*) from testtable where xx in (1,3,null)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

396
HyperSQL Database Engine (HSQLDB) / Bugs / #396 CURTIME() problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having a bunch of problems when trying to use the 
CURTIME() function in the 1.7.1 release. The statement 
below exemplifies these:
CALL CASEWHEN(CURTIME() BETWEEN
CAST('0:0:0' AS TIME) 
AND CAST('23:59:59' AS TIME), 
'good', 'bad')
This always returns 'bad' for me.
Since the BETWEEN expression covers the entire 24 hour 
period, I believe any time zone differences, if they existed, 
would be irrelevant and this would always return 'good'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

397
HyperSQL Database Engine (HSQLDB) / Bugs / #397 CURTIME() not normalized
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is related to #897591
version 1.7.2
org.hsqldb.Library.curtime() is defined as:
public static java.sql.Time curtime() {
return new java.sql.Time(System.currentTimeMillis());
}
Since this doesn't normalize the time to Jan 1, 1970 whereas 
other time values are normalized, CURTIME cannot be used 
reliably in comparison operators.
I believe curtime() should look more like:
public static java.sql.Time curtime() {
java.sql.Time t;
t= new java.sql.Time(System.currentTimeMillis());
return HsqlDateTime.getNormalisedTime(t);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

398
HyperSQL Database Engine (HSQLDB) / Bugs / #398 different results in 1.7.2 rc1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,
i just migrated an older cocoon application with hsqldb in 
server mode from cocoon 2.0 to 2.1 rc. i also decided to 
try hsqldb 1.7.2 because it's new features look very 
promising to me. the first problem i a came across was a 
very curious EOFException when trying to acces one 
special table of the database (i simply took the old 
database files which worked very well until then). but 
there is nothing special about the stucture of this table 
nor it's content. looked very random to me. after playing 
around with the transfer tool and various different hsql 
versions i was able to use a version 1.6.2 sql dump of 
my database and (after modifying table creation to get 
cached tables again) open it without any hassle with 
version 1.7.2 hsql server.
now the dbms seemed to do it's job but i realized an 
enormous performance drop compared to the older 
database system. it looks like a communication problem 
because the db server starts outputting my sql 
commands (silent = false) seconds to minutes after my 
servlet is activated.
but the biggest problem is, i'm now getting different 
results compared to the old system. i didn't check the 
results of single queries yet but i can clearly see that 
the application (kind of multi dimensional scientific 
search engine) is just producing crap with hsqldb 1.7.2. 
to sum it up it seems like additional constraints i throw in 
are not reducing the amount of results i get but enlarge 
the result set a lot. the app itself is used for almost 2 
years now without any modification to the sql 
statements or code so i consider it stable. 
sorry for staying so vague but i didn't find time to take a 
closer look at the problem yet. i did all of the system 
design and programming years ago and the whole thing 
is very complex so i don't know exactly where to start 
when it comes to debuging. if you could give me a hint 
where (i mean for what kind of query) you changed code 
that could possibly couse different results i would try to 
check the corresponding statements and results in detail.
just a last point - i went back to version 1.7.1 as 
shipped with cocoon 2 and everything's working perfect 
again (including import of my old database files).
kind regards
momo
p.s. i'm using jdk 1.4 for all java systems including hsqldb
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

399
HyperSQL Database Engine (HSQLDB) / Bugs / #399 CHECK CONSTRAINT column not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.7.2RC1
Following SQL generates error:
DROP TABLE FOO IF EXISTS;
CREATE TABLE FOO(
YES_NO_IND CHAR(1) NOT NULL,
CHECK (YES_NO_IND IN ('Y', 'N'))
);
INSERT INTO FOO ( 'Y' );
Error is:
java.sql.SQLException: Column not found: Y in 
statement [INSERT INTO FOO ( 'Y' )]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

400
HyperSQL Database Engine (HSQLDB) / Bugs / #400 CHECK CONSTRAINT follow-up
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was in such I hurry to create the example in 900350 I
messed up the SQL; let me try again. The error I was
trying to report was:
DROP TABLE FOO IF EXISTS;
CREATE TABLE FOO(
YES_NO_IND CHAR(1) NOT NULL,
CHECK (YES_NO_IND IN ('Y', 'N'))
);
INSERT INTO FOO VALUES ( 'Y' );
results is:
java.sql.SQLException: Check constraint violation
SYS_CT_1 table: FOO
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

401
HyperSQL Database Engine (HSQLDB) / Bugs / #401 Conflict with Turkish Regional Settings
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In windows environment with Turkish regional settings 
and character set, there occurs some errors. 
For example,
Class.forName("org.hsqldb.jdbcDriver");;
connection = DriverManager.getConnection
("jdbc:hsqldb:hsql://localhost", "sa", "");
statement = connection.createStatement();
String sql = "INSERT INTO deney (isim, id) 
values ('Ali', null)";
statement.executeUpdate(sql);
produces the following error:
java.sql.SQLException: Column not found: &#304;S&#304;M in 
statement [INSERT INTO deney (isim, id) values ('Ali', 
null)]
at org.hsqldb.Trace.getError(Trace.java:263)
at org.hsqldb.Result.<init>(Result.java:159)
at org.hsqldb.jdbcConnection.executeHSQL
(Unknown Source)
at org.hsqldb.jdbcConnection.execute
(Unknown Source)
at org.hsqldb.jdbcStatement.fetchResult
(Unknown Source)
at org.hsqldb.jdbcStatement.executeUpdate
(Unknown Source)
at MainDeney.hsqldbJdbc(MainDeney.java:49)
at MainDeney.main(MainDeney.java:17)
at 
sun.reflect.NativeMethodAccessorImpl.invoke0(Native 
Method)
at 
sun.reflect.NativeMethodAccessorImpl.invoke
(NativeMethodAccessorImpl.java:39)
at 
sun.reflect.DelegatingMethodAccessorImpl.invoke
(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke
(Method.java:324)
at 
com.intellij.rt.execution.application.AppMain.main
(Unknown Source)
, whereas the column ISIM exists:
CREATE TABLE DENEY(ID INTEGER NOT NULL IDENTITY 
PRIMARY KEY,ISIM VARCHAR(25))
The cause of the error is the difference between turkish 
and english character set. In Turkish the capital of 'i' is 
not 'I' but '&#304;', which is an I with a dot. 
Hsqldb converts all the words in an sql statement to 
upper case. This is done according to the default locale. 
So this conversion produces unrecognized characters for 
hsqldb database.
The solution to this problem is, setting the default locale 
as Locale.ENGLISH in hsqldb. Or using toUpperCase
(Locale.English) method, instead of toUpperCase().
I hope this problem might be resolved in the future 
versions of Hsqldb. 
Thanks for great work and effort...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

402
HyperSQL Database Engine (HSQLDB) / Bugs / #402 update with correlated subquery does not evaluate correctly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"update tableX set colY = (select colY from tableY
where tableY.colX = tableX.colX)" throws "Single value
expected" exception if tableX.colX contains NULL. 
Without the null row, update works corectly.
With null row, update works on Oracle and breaks on
HSQLDB 1.7.1 and 1.7.2rc1. 
Please see attached Java code, try to run it with and
without line 52:
insert into table2 (col1, col2) values (null, 5)
commented out. 
Dima 
--
dmaziuk@bmrb.wisc.edu
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

403
HyperSQL Database Engine (HSQLDB) / Bugs / #403 LIKE error in RC2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Abstract:
--------
LIKE expresions as LIKE 'A%' don't works.
Sample:
-------
CREATE MEMORY TABLE NAMES (NAME VARCHAR(100));
INSERT INTO NAMES VALUES ('FRANK');
INSERT INTO NAMES VALUES ('FREDERIC');
INSERT INTO NAMES VALUES ('JOSEPH');
INSERT INTO NAMES VALUES ('JACK');
SELECT * FROM NAMES WHERE NAME LIKE 'F%';
==> No records found
SELECT * FROM NAMES WHERE NAME LIKE 'J%';
==> No records found
SELECT * FROM NAMES WHERE NAME LIKE 'J%H%';
==> No records found
SELECT * FROM NAMES WHERE NAME LIKE '%K';
==> 'FRANK', 'JACK'
SELECT * FROM NAMES WHERE NAME LIKE '%R%';
==> 'FRANK', 'FREDERIC'
Comments:
----------
Observe this is not a memory table bug. The same 
behaviour appears for example in a cached table.
I think is a very important bug near the final 1.7.2 
release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

404
HyperSQL Database Engine (HSQLDB) / Bugs / #404 LONGVARCHAR(size) no longer works
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This worked in the older version of HSQLDB, but no in
1.7.2 RC 2:
CREATE TABLE TEST(ID INTEGER NOT NULL,CLOB_V
LONGVARCHAR(2000000),PRIMARY KEY(ID))
Is there a reason for that change?
this works:
CREATE TABLE TEST(ID INTEGER NOT NULL,CLOB_V
LONGVARCHAR,PRIMARY KEY(ID))
Thanks,
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

405
HyperSQL Database Engine (HSQLDB) / Bugs / #405 Unwanted output to System.out
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.7.2 RC2 there are sometimes messages written to
System.out. This should not be so. Imagine a console
application that needs to write to System.out...
Please disable this messages by default.
Thanks,
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

406
HyperSQL Database Engine (HSQLDB) / Bugs / #406 Data loss in TEXT tables and ClassCastException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
A problem concerning current release V1.7.1.
The problem does not appear in 1.7.2 RC 2.
But I've found nothing about it in forums (known bug)
I found loss of datas in TEXWT tables files after a 
checkpoint. A ClassCastException appears after 
restarting and selecting data, see the case below.
// hsqldb 1.7.1 (hsqldb.jar 257Ko) (java 1.4.1_01)
// start new database 
// java -cp ./hsqldb.jar org.hsqldb.Server -database 
db_test
// start dbmanager
// java -cp ./hsqldb.jar org.hsqldb.util.DatabaseManager
// connection ok
CREATE TEXT TABLE ZONE(ZONE_ID INTEGER NOT NULL 
PRIMARY KEY,ZONE_CODE VARCHAR,ZONE_LIBELLE 
VARCHAR,ZONE_COMMENTAIRE VARCHAR)
SET TABLE ZONE SOURCE "table_zone.dat"
// update count 0
// View Refresh Tree -> table OK
INSERT INTO ZONE VALUES 
(1,'ZONE1','HOUSE','Comment')
// update count 1
SELECT * FROM ZONE
// results are ok, the 4 columns.
SHUTDOWN COMPACT
// update count 0
// Start database & dbmanager again
// connection ok
SELECT * FROM ZONE
// Error on the server
java.lang.ClassCastException
at org.hsqldb.DatabaseRowOutput.writeData
(Unknown Source)
at org.hsqldb.Result.getBytes(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Unknown Source)
then it is impossible to shut down the database
and in properties files there is modified=yes.
And in the table_zone.dat, there is only :
1,ZONE1,HOUSE
And nothing about the 4th column !
Regards,
Cédric
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

407
HyperSQL Database Engine (HSQLDB) / Bugs / #407 org.hsqldb.Library.monthname bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
patch is:
Index: Library.java
=========================
RCS file: /cvsroot/hsqldb/hsqldb-
dev/src/org/hsqldb/Library.java,v
retrieving revision 1.32
diff -r1.32 Library.java
1360c1360
< daynameBuffer.setLength(0);
---
> monthnameBuffer.setLength(0);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

408
HyperSQL Database Engine (HSQLDB) / Bugs / #408 problem with negative long values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The attached testcase produces an error where a 
newative long -9129298924866545938L is stored to a 
BIGINT column and becomes 922310382 when it's 
retrieved.
Sorry, but the testcase requires Hibernate 2.x in your 
class path.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

409
HyperSQL Database Engine (HSQLDB) / Bugs / #409 gigabyte limit
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
While inserting data into 1.7.2 rc2 - I run into batch
update
expections which I believe are caused by java.nio expanding
the data file another gigabyte when the data file is
already a
gigabyte. java.nio has a two gigabyte limit. Java version
1.4.2_03 on windows xp home addition. Thanks
-Tim
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

410
HyperSQL Database Engine (HSQLDB) / Bugs / #410 Null pointer exception after crash
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
I had a JVM crash during creation of a database. The
JVM crash was unrelated to hsql. When starting the
database again I get this exception in the prompt. I
found that the [Database].properties file was created
but empty (0 bytes). I suggest adding more error
tolerant reading of the [database].properties file.
[...]: Initiating startup sequence...
[...]: Server socket opened successfully in 4 ms.
[...]: [Thread[HSQLDB Server @1474e45,5,main]]:
run()/openDatabases(): 
org.hsqldb.HsqlException: General error:
java.lang.NullPointerException
at org.hsqldb.Trace.error(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.Server.openDatabases(Unknown Source)
at org.hsqldb.Server.run(Unknown Source)
at org.hsqldb.Server.access$90(Unknown Source)
at org.hsqldb.Server$ServerThread.run(Unknown Source)
[...]: Initiating shutdown sequence...
Unable to start the log database.
org.hsqldb.HsqlException: General error:
java.lang.NullPointerException
[...]
Ps. I am using 1.7.2RC2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

411
HyperSQL Database Engine (HSQLDB) / Bugs / #411 Text tables marked as read only corrupt script. 1.7.2RC2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It appears there is a bug when creating read-only text 
tables.
Steps to reproduce:
1. Create a new db
2. Connect and issue the following commands:
CREATE TEXT TABLE FOO(BAR NUMERIC NOT NULL)
SET TABLE FOO READONLY TRUE
SHUTDOWN
3. Observe in the script that the CREATE TEXT TABLE 
command is duplicated.
4. Starting the DB fails with "error in script file".
Also, SHUTDOWN COMPACT fails due to the same issue.
BTW, this worked in 1.7.1. I haven't tested other 1.7.2 
releases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

412
HyperSQL Database Engine (HSQLDB) / Bugs / #412 Concat behavior col1+':'+col2 error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running
create temp table testtable (col1 char(2),col2 char(2));
insert into testtable values ('xx',null);
select col1+':'+col2 from testtable;
HSQL1.7.1 just returns null.
HSQL1.7.2RC2 sends an error
Wrong data type: For input string: "xx"
(SQL State=37000, Errorcode=-16) 
took me a moment to figure out the reason.
Maybe the ideal thing would be to return
xx:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

413
HyperSQL Database Engine (HSQLDB) / Bugs / #413 Updates ignore check constrain
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Check constraint added to columns work when doing
inserts but fail (are ignored) when doing updates. -
1.7.2 RC2
Example
This example runs and wrongfully inserts a erroneous value.
drop table prospects_may_04 if exists;
create table prospects_may_04
(
prospect_id Integer NOT NULL PRIMARY KEY,
org_name VARCHAR(50) NOT NULL,
vfaa_rep CHAR (10)
default 'unassigned' NOT NULL
);
alter table prospects_may_04 
add constraint rep_name check (
vfaa_rep in
('unassigned','Ed','Karen','Liz','Malkah','Joe','Sue','John')
);
insert into prospects_may_04
values(
5,
'org_name',
'unassigned')
update prospects_may_04
set vfaa_rep = 'badName' where prospect_id=5
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

414
HyperSQL Database Engine (HSQLDB) / Bugs / #414 sum(col) returns a Long not an Integer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a select sum(col) query is issued on a column 
which is integer a long is returned.
Code can crashed when people update to 1.7.2 and use 
casts.
For large sums Long is good of course, but then people 
could be using BigInt datatype for such columns.
If you keep the returning of longs, you could make a big 
announcement in the readme.
import java.sql.*;
public class LongNotIntegerCase {
public static void main(String a[])
{
try{
Class.forName("org.hsqldb.jdbcDriver");
Connection conn = DriverManager.getConnection
("jdbc:hsqldb:.","sa","");
Statement stmt=conn.createStatement();
stmt.execute("create temp table test (col1 
integer);insert into test values(5)");
ResultSet rs = stmt.executeQuery("select sum
(col1) from test");
rs.next();
Integer result=(Integer) 
rs.getObject(1);
rs.close();
stmt.close();
conn.close();
}
catch (Exception e)
{
e.printStackTrace();
} 
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

415
HyperSQL Database Engine (HSQLDB) / Bugs / #415 IndexOutOfBoundsException on update
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With the current 1.7.2-rc2 release, I can reproduce the 
crash described by the stack trace below. The exception 
is thrown when updating a single row in a table.
The environment is Windows 2000, J2SDK1.4.2. hsqldb is 
being used as the back end to an Orion application 
server, and is running in server mode. The table being 
updated is defined as CREATE CACHED TABLE.
If someone contacts me I can package up a database 
and send you the statement to provoke it. Running the 
statement from the manager utility reproduces the 
problem. I'd prefer not to post the database or the 
contents publicly.
Cheers!
Jon
java.lang.IndexOutOfBoundsException
at java.nio.Buffer.checkBounds(Buffer.java:454)
at java.nio.ByteBuffer.get(ByteBuffer.java:612)
at java.nio.DirectByteBuffer.get
(DirectByteBuffer.java:232)
at org.hsqldb.NIOScaledRAFile.read(Unknown 
Source)
at org.hsqldb.DataFileCache.makeRow(Unknown 
Source)
at org.hsqldb.Cache.getRow(Unknown Source)
at org.hsqldb.Table.getRow(Unknown Source)
at org.hsqldb.DiskNode.findNode(Unknown Source)
at org.hsqldb.DiskNode.getLeft(Unknown Source)
at org.hsqldb.Index.findNotNull(Unknown Source)
at org.hsqldb.Constraint.findMainRef(Unknown 
Source)
at org.hsqldb.Table.checkCascadeUpdate(Unknown 
Source)
at org.hsqldb.Table.update(Unknown Source)
at 
org.hsqldb.CompiledStatementExecutor.executeUpdateSt
atement(Unknown S
ource)
at 
org.hsqldb.CompiledStatementExecutor.executeImpl
(Unknown Source)
at org.hsqldb.CompiledStatementExecutor.execute
(Unknown Source)
at 
org.hsqldb.Session.sqlExecuteCompiledNoPreChecks
(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.executePart
(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.execute
(Unknown Source)
at org.hsqldb.Session.sqlExecuteDirectNoPreChecks
(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:534)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

416
HyperSQL Database Engine (HSQLDB) / Bugs / #416 NPE on Constraint.replaceTable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi.
In RC 3 (and previous, I would assume), it is possible to 
get a NullPointerException when atering a table, 
presumably when it has certain CHECK contraints. I 
haven't had the time to do a thorough test of all cases, 
but here is the one that caused the NPE for me:
create table parent(id int primary key, name varchar);
create table child(id int primary key, parent_id int, name 
varchar, constraint fk_child_parent foreign key
(parent_id) references parent(id), constraint 
check_child_name_is_not_null check(name is not null));
alter table child drop contraint fk_child_parent;
After running a short debug session, the apparent cause 
surfaced in the Constraint.replaceTable method, where 
the name of the main index is used without checking if 
the main index exists for the contraint. For the 
check_child_name_is_not_null constraint, there is no 
main index, thus an NPE is thrown.
Here's a quick patch.
Fred: please verify that this is all that needs to be 
done. It's been too long since I've poked about in 
Constraint.
//--
void replaceTable(Table oldt, Table newt, int colindex,
int adjust) throws HsqlException {
if (oldt == core.mainTable) {
core.mainTable = newt;
if (core.mainIndex != null) { //npe alrt: !all 
const's have m. idx
String mainIndexName = 
core.mainIndex.getName().name;
core.mainIndex = 
core.mainTable.getIndex(mainIndexName);
}
core.mainColArray =
ArrayUtil.toAdjustedColumnArray
(core.mainColArray, colindex,
adjust);
if (constType == Constraint.CHECK) {
// core.check.
}
}
if (oldt == core.refTable) {
core.refTable = newt;
if (core.refIndex != null) {
core.refIndex =
core.refTable.getIndex
(core.refIndex.getName().name);
if (core.refIndex != core.mainIndex) {
core.refColArray =
ArrayUtil.toAdjustedColumnArray
(core.refColArray,
colindex, 
adjust);
}
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

417
HyperSQL Database Engine (HSQLDB) / Bugs / #417 RC3 Select INTO using prepared statement is broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Was dingling about with PowerBuilder 9 and HSQLDB 
today when I noticed that a "select ...into..." issued 
from the SQL console failed to create any table and 
instead fetched a result set.
Upon probing a bit, it turns out that PowerBuilder 
prepares the statements issued on the console before 
executing them....hmmm.
Anyway, as of RC3, the "INTO" part of a prepared select 
does not get executed, only the select part.
After a bit of time spent today, I have a tested and 
working patch for this.
It will be part of my next release into CVS, due by the 
end of this weekend.
Actually, this is a cool feature, now that it is working, 
since it is one of the few "prepared" DDLs that can 
accept parameters.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

418
HyperSQL Database Engine (HSQLDB) / Bugs / #418 CallableStatement set by name broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My Fault.
Bad loop and failure to create the lookup map.
Fix will be like this:
/** Creates a new instance of jdbcCallableStatement 
*/
public jdbcCallableStatement(jdbcConnection c, 
String sql,
int type)
throws HsqlException, 
SQLException {
super(c, sql, type);
String[] names;
String name;
// outRegistrationMap = new 
IntKeyIntValueHashMap();
// was never creating this before...dumb.
parameterNameMap = new IntValueHashMap();
if (pmdDescriptor != null && 
pmdDescriptor.metaData != null) {
names = pmdDescriptor.metaData.sName;
// loop used to test i > names.length ??? akk!
for (int i = 0; i < names.length; i++) {
name = names[i];
// PRE: should never happen in practice
if (name == null || name.length() == 0) {
continue; // throw?
}
parameterNameMap.put(name, i);
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

419
HyperSQL Database Engine (HSQLDB) / Bugs / #419 HsqlDateTime.java switch to 1.2 error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HsqlDateTime.java version 1.26
some methods has direct access to a Calendar instances
P.S.
should be fixed in attached file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

420
HyperSQL Database Engine (HSQLDB) / Bugs / #420 SQLException for Empty batch
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get a "java.sql.SQLException: Invalid argument in
JDBC call: Empty batch" when I do a
jdbcStatement.executeBatch().
I think it's an error to throw an exception in this
case (the batch is empty). See also
http://archives.postgresql.org/pgsql-jdbc/2001-08/msg00297.php.
Version "hsqldb_1_7_2_RC_3".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

421
HyperSQL Database Engine (HSQLDB) / Bugs / #421 ArrayIndexOutOfBoundsException on select union
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem with select statement, releases 1_7_2_RC_1,
1_7_2_RC_2, ...
No such problem with release 1_7_1.
********* Statement:
SELECT
DEPT.DNAME,
DEPT.LOC,
EMP.JOB,
EMP.ENAME,
EMP.HIREDATE,
EMP.SAL
FROM
DEPT,
EMP
WHERE
DEPT.DEPTNO = EMP.DEPTNO
UNION ALL -- Creating outer join actually --
SELECT
DEPT.DNAME,
DEPT.LOC,
NULL JOB,
NULL ENAME,
NULL HIREDATE,
NULL SAL
FROM
DEPT
WHERE NOT EXISTS
(SELECT * FROM EMP E2 WHERE DEPT.DEPTNO = E2.DEPTNO)
ORDER BY
DEPTNO Asc,
JOB Asc
********* Stack trace for 1_7_2_RC_2:
java.lang.ArrayIndexOutOfBoundsException
at org.hsqldb.Result.compareRecord(Result.java:1081)
at org.hsqldb.Result.sortResult(Result.java:1039)
at org.hsqldb.Select.sortResult(Select.java:502)
at org.hsqldb.Select.getResult(Select.java:471)
at
org.hsqldb.CompiledStatementExecutor.executeSelectStatement(CompiledStatementExecutor.java:319)
at
org.hsqldb.CompiledStatementExecutor.executeImpl(CompiledStatementExecutor.java:116)
at
org.hsqldb.CompiledStatementExecutor.execute(CompiledStatementExecutor.java:85)
at
org.hsqldb.Session.sqlExecuteCompiledNoPreChecks(Session.java:964)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(DatabaseCommandInterpreter.java:213)
at
org.hsqldb.DatabaseCommandInterpreter.execute(DatabaseCommandInterpreter.java:172)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Session.java:933)
at org.hsqldb.Session.execute(Session.java:826)
at
org.hsqldb.jdbc.jdbcStatement.fetchResult(jdbcStatement.java:1635)
at
org.hsqldb.jdbc.jdbcStatement.executeQuery(jdbcStatement.java:187)
...
********* Database script:
CREATE TABLE DEPT(DEPTNO INTEGER NOT NULL PRIMARY
KEY,DNAME VARCHAR,LOC VARCHAR)
CREATE TABLE EMP(EMPNO INTEGER NOT NULL PRIMARY
KEY,ENAME VARCHAR,JOB VARCHAR,MGR INTEGER,HIREDATE
DATE,SAL REAL,COMM REAL,DEPTNO INTEGER,CONSTRAINT
FK_DEPTNO FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO))
CREATE INDEX SYS_USER_SYS_IDX_1_3 ON EMP(DEPTNO)
INSERT INTO DEPT VALUES(10,'ACCOUNTING','NEW YORK')
INSERT INTO DEPT VALUES(20,'RESEARCH','DALLAS')
INSERT INTO DEPT VALUES(30,'SALES','CHICAGO')
INSERT INTO DEPT VALUES(40,'OPERATIONS','BOSTON')
INSERT INTO EMP
VALUES(7369,'SMITH','CLERK',7902,'1980-12-17',800.0,NULL,20)
INSERT INTO EMP
VALUES(7499,'ALLEN','SALESMAN',7698,'1981-02-20',1600.0,300.0,30)
INSERT INTO EMP
VALUES(7521,'WARD','SALESMAN',7698,'1981-02-22',1250.0,500.0,30)
INSERT INTO EMP
VALUES(7566,'JONES','MANAGER',7839,'1981-04-02',2975.0,NULL,20)
INSERT INTO EMP
VALUES(7654,'MARTIN','SALESMAN',7698,'1981-09-28',1250.0,1400.0,30)
INSERT INTO EMP
VALUES(7698,'BLAKE','MANAGER',7839,'1981-05-01',2850.0,NULL,30)
INSERT INTO EMP
VALUES(7782,'CLARK','MANAGER',7839,'1981-06-09',2450.0,NULL,10)
INSERT INTO EMP
VALUES(7788,'SCOTT','ANALYST',7566,'1987-07-13',3000.0,NULL,20)
INSERT INTO EMP
VALUES(7839,'KING','PRESIDENT',NULL,'1981-11-17',5000.0,NULL,10)
INSERT INTO EMP
VALUES(7844,'TURNER','SALESMAN',7698,'1981-09-08',1500.0,0.0,30)
INSERT INTO EMP
VALUES(7876,'ADAMS','CLERK',7788,'1987-07-13',1100.0,NULL,20)
INSERT INTO EMP
VALUES(7900,'JAMES','CLERK',7698,'1981-12-03',950.0,NULL,30)
INSERT INTO EMP
VALUES(7902,'FORD','ANALYST',7566,'1981-12-03',3000.0,NULL,20)
INSERT INTO EMP
VALUES(7934,'MILLER','CLERK',7782,'1982-01-23',1300.0,NULL,10)
********* Database properties:
#HSQL database
#Thu Oct 17 22:20:56 EEST 2002
sql.strict_fk=true
readonly=true
sql.strong_fk=true
hsqldb.version=1.7.1
version=1.7.1
hsqldb.cache_scale=15
sql.compare_in_locale=false
sql.month=true
hsqldb.log_size=200
jdbc.get_column_name=true
modified=no
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.1
hsqldb.compatible_version=1.7.0
sql.enforce_size=false
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

422
HyperSQL Database Engine (HSQLDB) / Bugs / #422 HSQLDB 1.7.2 RC4 with JDK1.3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using JDK1.3 on Solaris, i'm unable to build the jar :
Buildfile: build.xml
init:
-javaversion4:
javaversion2:
-prepare:
[mkdir] Created dir: /home/.../hsqldb/classes
codeswitcher:
[javac] Compiling 1 source file 
to /home/.../hsqldb/classes
switchtojdk11:
switchtojdk12:
[java] ........
switchtojdk14:
store:
[javac] Compiling 4 source files 
to /home/.../hsqldb/classes
lib:
[javac] Compiling 37 source files 
to /home/.../hsqldb/classes
[javac] /home/.../hsqldb/src/org/hsqldb/lib/HashMap.java
:107: Inner type BaseHashIterator in class 
org.hsqldb.store.BaseHashMap not accessible from inner 
class org.hsqldb.lib.HashMap. KeySet.
[javac] return HashMap.this.new 
BaseHashIterator(true);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/HashMap.java
:107: Can't access inner class 
org.hsqldb.store.BaseHashMap. BaseHashIterator. Class 
or interface must be public, in same package, or an 
accessible member class.
[javac] return HashMap.this.new 
BaseHashIterator(true);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/HashMap.java
:154: Inner type BaseHashIterator in class 
org.hsqldb.store.BaseHashMap not accessible from inner 
class org.hsqldb.lib.HashMap. Values.
[javac] return HashMap.this.new 
BaseHashIterator(false);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/HashMap.java
:154: Can't access inner class 
org.hsqldb.store.BaseHashMap. BaseHashIterator. Class 
or interface must be public, in same package, or an 
accessible member class.
[javac] return HashMap.this.new 
BaseHashIterator(false);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyHashMa
p.java:93: Inner type BaseHashIterator in class 
org.hsqldb.store.BaseHashMap not accessible from inner 
class org.hsqldb.lib.IntKeyHashMap. KeySet.
[javac] return IntKeyHashMap.this.new 
BaseHashIterator(true);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyHashMa
p.java:93: Can't access inner class 
org.hsqldb.store.BaseHashMap. BaseHashIterator. Class 
or interface must be public, in same package, or an 
accessible member class.
[javac] return IntKeyHashMap.this.new 
BaseHashIterator(true);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyHashMa
p.java:128: Inner type BaseHashIterator in class 
org.hsqldb.store.BaseHashMap not accessible from inner 
class org.hsqldb.lib.IntKeyHashMap. Values.
[javac] return IntKeyHashMap.this.new 
BaseHashIterator(false);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyHashMa
p.java:128: Can't access inner class 
org.hsqldb.store.BaseHashMap. BaseHashIterator. Class 
or interface must be public, in same package, or an 
accessible member class.
[javac] return IntKeyHashMap.this.new 
BaseHashIterator(false);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyIntValu
eHashMap.java:133: Inner type BaseHashIterator in 
class org.hsqldb.store.BaseHashMap not accessible from 
inner class org.hsqldb.lib.IntKeyIntValueHashMap. 
KeySet.
[javac] return 
IntKeyIntValueHashMap.this.new BaseHashIterator(true);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyIntValu
eHashMap.java:133: Can't access inner class 
org.hsqldb.store.BaseHashMap. BaseHashIterator. Class 
or interface must be public, in same package, or an 
accessible member class.
[javac] return 
IntKeyIntValueHashMap.this.new BaseHashIterator(true);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyIntValu
eHashMap.java:168: Inner type BaseHashIterator in 
class org.hsqldb.store.BaseHashMap not accessible from 
inner class org.hsqldb.lib.IntKeyIntValueHashMap. Values.
[javac] return 
IntKeyIntValueHashMap.this.new BaseHashIterator
(false);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntKeyIntValu
eHashMap.java:168: Can't access inner class 
org.hsqldb.store.BaseHashMap. BaseHashIterator. Class 
or interface must be public, in same package, or an 
accessible member class.
[javac] return 
IntKeyIntValueHashMap.this.new BaseHashIterator
(false);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntValueHash
Map.java:149: Inner type BaseHashIterator in class 
org.hsqldb.store.BaseHashMap not accessible from inner 
class org.hsqldb.lib.IntValueHashMap. KeySet.
[javac] return IntValueHashMap.this.new 
BaseHashIterator(true);
[javac] ^
[javac] /home/.../hsqldb/src/org/hsqldb/lib/IntValueHash
Map.java:149: Can't access inner class 
org.hsqldb.store.BaseHashMap. BaseHashIterator. Class 
or interface must be public, in same package, or an 
accessible member class.
[javac] return IntValueHashMap.this.new 
BaseHashIterator(true);
[javac] ^
[javac] Note: 2 files use or override a deprecated 
API. Recompile with "-deprecation" for details.
[javac] 14 errors, 1 warning
It seems that BaseHashIterator sould be 
declared "public".
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

423
HyperSQL Database Engine (HSQLDB) / Bugs / #423 IndexOutOfBoundsException while loading large table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Bug detected while loading up a huge table with lots of
foreign keys, etc....
It runs nearly to completion (running for maybe 5
minutes), and then throws this. Not sure why. This is
in RC_3
I'm using SQuirreL around it, it is the standalone
version loading up from a script file, here are my
properties....
will try to reproduce on RC-4. The total size of the
data file is about 500 MB, script is around 20 MB
compressed. Hope this helps.
#HSQL database
#Thu Mar 25 12:52:11 EST 2004
hsqldb.script_format=3
runtime.gc_interval=0
sql.enforce_strict_size=false
readonly=false
hsqldb.version=1.7.2
hsqldb.nio_data_file=true
version=1.7.2
hsqldb.cache_scale=14
hsqldb.first_identity=0
hsqldb.cache_file_scale=1
sql.compare_in_locale=false
hsqldb.log_size=200
modified=yes
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.2
hsqldb.compatible_version=1.7.2
sql.enforce_size=false
java.sql.SQLException: General error:
java.lang.IndexOutOfBoundsException
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
net.sourceforge.squirrel_sql.fw.sql.SQLDriverManager.getConnection(SQLDriverManager.java:124)
at
net.sourceforge.squirrel_sql.client.mainframe.action.OpenConnectionCommand.execute(OpenConnectionCommand.java:103)
at
net.sourceforge.squirrel_sql.client.mainframe.action.ConnectToAliasCommand$SheetHandler.run(ConnectToAliasCommand.java:371)
at
net.sourceforge.squirrel_sql.fw.util.TaskExecuter.run(TaskExecuter.java:81)
at java.lang.Thread.run(Thread.java:534)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

424
HyperSQL Database Engine (HSQLDB) / Bugs / #424 Problem with VARBINARY type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just noticed that there's a problem with the
VARBINARY data type using the current Release
Candidate. It drops the last character if the inserted
string is less than 10 characters.
Here's the DDL:
CREATE CACHED TABLE TALLGROUP_PERSON(TALLGROUPID
INTEGER NOT NULL,PERSONID INTEGER NOT NULL,TALLROLEID
INTEGER DEFAULT 1 NOT NULL,TOOLACTIONKEY VARBINARY
DEFAULT 'FFFFFFFFFFFFFF' NOT NULL,CONSTRAINT
PK_TALLGROUP_PERSON PRIMARY KEY(PERSONID,TALLGROUPID))
This is the query that works
update TALLGROUP_PERSON set TOOLACTIONKEY='0123456789'
where PERSONID=-11
This is the query that doesn't
update TALLGROUP_PERSON set TOOLACTIONKEY='012345678'
where PERSONID=-11
If you need any more information just let me know.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

425
HyperSQL Database Engine (HSQLDB) / Bugs / #425 strange spaces occur with update in textfile for Table.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I update a Table (refering to a Textfile), my
textfile gets screwed up:
http://www.alarmnummer.net/sh.JPG
(the dots are spaces). I get a lot of lines filled with
spaces and it seems I have as many spaces as the last
line is long.
properties:
#HSQL database
#Mon Mar 29 13:41:12 CEST 2004
hsqldb.cache_file_scale=1
hsqldb.log_type=0
runtime.gc_interval=0
hsqldb.first_identity=0
version=1.7.2
modified=yes
hsqldb.script_format=0
sql.enforce_size=false
hsqldb.cache_scale=14
hsqldb.version=1.7.2
hsqldb.log_size=200
sql.enforce_strict_size=false
sql.month=true
readonly=FALSE
sql.strong_fk=true
hsqldb.compatible_version=1.7.2
hsqldb.original_version=1.7.2
sql.compare_in_locale=false
hsqldb.cache_version=1.6.0
sql.strict_fk=true
query:
UPDATE Verdachte SET Leeftijd=34,
Gevestigd_in_Nederland=FALSE,
Afbeelding_aangetroffen=FALSE, Voornamen='dddddd',
Voorwaardelijke_opzet=TRUE, Achternaam='koekoeboe',
Nederlandse_nationaliteit=TRUE,
Gedraging_in_de_zin_240b=TRUE WHERE Verdachte_ID=6
part of the script:
CREATE TEXT TABLE VERDACHTE(VERDACHTE_ID INTEGER
GENERATED BY DEFAULT AS IDENTITY(START WITH 5) NOT
NULL PRIMARY KEY,ACHTERNAAM VARCHAR,VOORNAMEN
VARCHAR,LEEFTIJD INTEGER,GEVESTIGD_IN_NEDERLAND
BIT,NEDERLANDSE_NATIONALITEIT
BIT,AFBEELDING_AANGETROFFEN BIT,VOORWAARDELIJKE_OPZET
BIT,GEDRAGING_IN_DE_ZIN_240B BIT)
SET TABLE VERDACHTE SOURCE "VERDACHTE.DATA"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

426
HyperSQL Database Engine (HSQLDB) / Bugs / #426 RC4 - Assert Exception in standalone mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I'm running a JDK 1.3.1 application perfectly fine with 
HSQL 1.43 and HSQLDB 1.7.1.
But with 1.7.2 RC4 i have the following exception 1 or 2 
seconds after star:
Assert failed: java.lang.Exception
at org.hsqldb.Trace.getStackTrace
(Trace.java:868)
at org.hsqldb.Trace.doAssert(Trace.java:976)
at org.hsqldb.Trace.doAssert(Trace.java:958)
at org.hsqldb.Session.execute
(Session.java:800)
at org.hsqldb.jdbc.jdbcStatement.fetchResult
(jdbcStatement.java:1635)
at 
org.hsqldb.jdbc.jdbcStatement.executeUpdate
(jdbcStatement.java:216)
This only occure in standalone mode.
Server mode works fine.
This working fine if my application is single threaded.
As soon as more than 1 thread access the database, 
then this exception occure...
Note: I'm using multiphtreaded prepared statements. 
And non-prepared statement are synchronized within the 
application...
Looks like a thread safety issue since the exception is 
unpredictible and occure randomly in different parts of 
the application.
Hope this helps...
Georges
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

427
HyperSQL Database Engine (HSQLDB) / Bugs / #427 Text Tables FK problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a problem with using Text tables as parent 
Foreign key table. The HSQLDB throws an Integrity 
constraint violation when attempting to insert into a 
table that refers to a text table unless the text table is 
previously "selected". 
I've attached an example to demonstrate the problem. 
The example basically does the following:
1) create database tables. 2 tables: one cached table 
USER and one text table USER_TYPE. This is sourced by 
user_types.csv. The USER table has fk constraint to 
USER_TYPE table's unique index on USER_TYPE_CD.
2) attempt to insert into USER table. It fails.
3) select * from USER_TYPE
4) re-execute same insert statement: it succeeds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

428
HyperSQL Database Engine (HSQLDB) / Bugs / #428 TestCacheSize
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TestCacheSize results for Windows 2000.
Ran 40000 and 1000000 cases in expected time.
1500000 case was aborted at 18 hours (expected time 
2 - 4 hours).
Since the 1.5 million rows case took so long, I haven't 
attempted the larger cases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

429
HyperSQL Database Engine (HSQLDB) / Bugs / #429 Insert-Select problem in RC4
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This jdbc sql query have problem.
step A: create table
CREATE TABLE QUERY_TEST
(
VALUE_1 INTEGER NOT NULL,
VALUE_2 INTEGER NOT NULL
)
step B: insert into table: values are 1,1
insert into QUERY_TEST (VALUE_1, VALUE_2) values 
(?, ?)
step C: insert into table : value is 1
insert into QUERY_TEST (VALUE_1, VALUE_2) 
select ?, VALUE_2 from QUERY_TEST where VALUE_2=1
Result is 
junit.framework.AssertionFailedError: Try to insert null 
into a non-nullable column: column: VALUE_1 table: 
QUERY_TEST in statement [insert into QUERY_TEST 
(VALUE_1, VALUE_2) select ?, VALUE_2 from 
QUERY_TEST where VALUE_2=1]
It looks like jdbc will set null value not constant value 1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

430
HyperSQL Database Engine (HSQLDB) / Bugs / #430 File Locks not released when getConnection() Fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We would like to make it so that we can restore the
Hypersonic data when it gets corrupted but when
getConnection() fails it doesn't release the locks on
the files so we can't do this. I just created a
database and then changed some of the data values in
the .script file and I got this exception:
java.lang.IndexOutOfBoundsException
at java.nio.Buffer.checkBounds(Buffer.java:454)
at java.nio.ByteBuffer.get(ByteBuffer.java:612)
at
java.nio.DirectByteBuffer.get(DirectByteBuffer.java:232)
at org.hsqldb.NIOScaledRAFile.read(Unknown Source)
at org.hsqldb.DataFileCache.makeRow(Unknown Source)
at org.hsqldb.Cache.getRow(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at
org.hsqldb.DatabaseCommandInterpreter.processSet(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at
org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown
Source)
at
org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown
Source)
at org.hsqldb.Log.readScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Logger.openLog(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at
com.tallgroup.util.DataMain.getConnection(DataMain.java:360)
DataMain: 392 - Error creating a Hypersonic database
connection. Please restart so it can be repaired: error
in script file: line: $$ $$[Ljava.lang.Object;@1e8a1f6
java.sql.SQLException: error in script file: line: $$
$$[Ljava.lang.Object;@1e8a1f6
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at
com.tallgroup.util.DataMain.getConnection(DataMain.java:360)
This is the output of my program that's trying to clean
up the corrupted Hypersonic:
DataMain: 393 - Restoring Hypersonic.
It exists: C:\stuff\Oct03\content\resource\db\tall.script
Couldn't delete it
It exists:
C:\stuff\Oct03\content\resource\db\tall.properties
Deleted it
It exists: C:\stuff\Oct03\content\resource\db\tall.data
Couldn't delete it
It exists: C:\stuff\Oct03\content\resource\db\tall.backup
Deleted it
If you need any more information then let me know.
Dave Johansen
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

431
HyperSQL Database Engine (HSQLDB) / Bugs / #431 Strange Exception message on own library functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am working on a library function that can throw 
IllegalArgumentExceptions.
The method itself is working and can be called from hsql 
(after GRANT ALL ON CLASS "de.test.Library2" TO 
PUBLIC).
However, if an IllegalArgumentException is thrown it is 
preceded by
Unknown 
Function "de.test.Library2.acceptOnlyValuesUpTo100": 
java.lang.IllegalArgumentException(...)
Now I know what's going on, but users might be 
confused by the false "Unknown Function"
package de.test;
public class Library2 {
public static int acceptOnlyValuesUpTo100(int 
x)
{
if (x>100) throw new 
IllegalArgumentException("acceptOnlyValuesUpTo100");
return x;
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

432
HyperSQL Database Engine (HSQLDB) / Bugs / #432 NullPointerException in Connection.close(), RC4
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I obtained NullPointerException during connection-close
() method:
java.lang.NullPointerException
at org.hsqldb.Session.close(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.close
(Unknown Source)
...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

433
HyperSQL Database Engine (HSQLDB) / Bugs / #433 hsqldb 1.7.1 on Mac OS X 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using hsqldb 1.7.1, on Mac OS X(10.3) with JDK 
1.4.1 bundled. Our program starts the hsqldb using 
Server Mode, and connects to the hsqldb using jdbc.
Our open connection codes are,
public boolean updateScoreSectionByIdx(int idx,
{
conn = getConnection();
if (conn == null)
return false;
.........
try {
stmnt = conn.createStatement();
success = ( (stmnt.executeUpdate
(sqlcommand) == 0) ? false : true);
}
catch (SQLException e) {
...........
}
finally {
close();
}
and our close method is,
private void close(){
try {
if (rs != null)
rs.close();
if (stmnt != null)
stmnt.close();
if (conn != null)
conn.close();
if (conn.isClosed())
conn.close();
}
catch (Exception e) {
......
}
}
After about 144 sequential open and close connection 
with hsqldb, the following exception is throwed out,
Server.run/loop: Too many open files
java.net.SocketException: Too many open files
at java.net.PlainSocketImpl.socketAccept
(Native Method)
at java.net.PlainSocketImpl.accept
(PlainSocketImpl.java:353)
at java.net.ServerSocket.implAccept
(ServerSocket.java:439)
at java.net.ServerSocket.accept
(ServerSocket.java:410)
at org.hsqldb.Server.run(Server.java:219)
at org.hsqldb.Server.main(Server.java:147)
at 
com.tctc.datang.pp.util.HsqlServerLauncher$1.run
(HsqlServerLauncher.java:55)
We have traced into the program and found that every 
connection is closed.
We use "netstat" on Mac OS X and found that every 
connection will create one record and it is not released. 
But on WindowsXP, jdk142, although every connection 
also create one record in "netstat", the above error 
message will not be displayed.
We don't know if the many records in "netstat" are 
correct, or if there is any bug.
We're very urgent to know the solution, and we 
appreciate your answer.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

434
HyperSQL Database Engine (HSQLDB) / Bugs / #434 Building HSQLDB with j2sdk 1.5.0-beta
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I tried to build the package with
> ant jar 
I received following error 
variable named enum is used in file Server.java but enum is 
a keyword in java 1.5.0 
I think it is easy to correct 
Jacek
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

435
HyperSQL Database Engine (HSQLDB) / Bugs / #435 1.7.2rc5 breaks SQL statements working in 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
rc5 rejects my string query on empty strings:
AND phonew like ''
And it also complains about aggregate grouping. 
(Detailed sql to follow)
I have been using hsqldb since 2000, and have not had
to modify the sql statements in my application since 
2001. The application survived the upgrade to 1.6 (not 
sure about the exact version number) and 1.7 without 
me having to touch the sql statements.
Perhaps my sql was not compliant with ansi-92 to begin 
with, and rc5 is simply pointing out my original errors. I 
do not know if this is the case, or whether these are 
actually bugs in rc5.
To reproduce the Error 1:
-----------------------------------
CREATE TABLE CUSTOMERS(CUSTID INTEGER 
GENERATED BY DEFAULT AS IDENTITY(START WITH 0)
NOT NULL PRIMARY KEY,FIRSTNAME 
VARCHAR,LASTNAME VARCHAR,PHONEH 
VARCHAR,PHONEW VARCHAR,ADDRESS VARCHAR,NOTES 
VARCHAR,DELETED BOOLEAN NOT NULL)
INSERT INTO CUSTOMERS VALUES
(0,'M','Chen','770xxxxxxx','','','** GOOD CUSTOMER!! 
**',FALSE)
SELECT custid 
FROM Customers 
WHERE upper(firstname) like upper('M') 
AND upper(lastname) like upper('Chen') 
AND phoneh like '770xxxxxxx' 
AND phonew like '' 
AND upper(address) like upper('%') 
AND deleted = FALSE
------------------------------------
This returns no results in rc5. In 1.7.1, it would return 
one match (custid 0). Modifying the statement: 
AND phonew like '' 
to:
AND phonew like '%'
fixes the problem.
Error 2:
---------------------------------------------
SELECT * 
FROM( SELECT Customers.firstname, 
Customers.lastname, SUM
(Tickets.clothesamount+Tickets.extraamount+Tickets.ta
xamount-Tickets.discountamount) AS total 
FROM Tickets, Customers 
WHERE Tickets.custid = Customers.custid 
AND Tickets.paid LIKE 'A' 
GROUP BY Tickets.custid ) 
ORDER BY total DESC 
---------------------------------------------
Again, under 1.7.1, it would return the results correctly. 
Under rc5, I get the following error:
"Not contained in aggregate function or group by 
clause: COLUMN CUSTOMERS.FIRSTNAME / Error Code: -
67 / State: 37000"
Changing the GROUP BY statement to the following fixes 
the problem:
GROUP BY Tickets.custid, Customers.firstaname, 
Customers.lastname 
My little applications had survived two major version 
upgrades without sql modifications. It would have been 
nice if the same would have been true with 1.7.2. In 
any case, keep up the good work! :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

436
HyperSQL Database Engine (HSQLDB) / Bugs / #436 CREATE USER & getConnection() inMemory mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With In-Memory mode I try to create new user and
connect. Why it does not work?
Sample code:
try {
java.sql.Connection c = null;
Class.forName( "org.hsqldb.jdbcDriver");
c =
java.sql.DriverManager.getConnection( "jdbc:hsqldb:.",
"sa", "");
Statement st = c.createStatement();
st.executeUpdate("CREATE USER juku
PASSWORD pass;");
st.close();
c.close();
c =
java.sql.DriverManager.getConnection( "jdbc:hsqldb:.",
"juku", "pass");
} catch( Exception e){
System.out.print( e.getMessage());
}
and SQLException is catched which logs:
User not found: JUKU
When I query SYSTEM_USERS then JUKU is there!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

437
HyperSQL Database Engine (HSQLDB) / Bugs / #437 getColumns behavior changed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The behavior of jdbcDataBaseMetaData.getColumns(...) 
has changed in 1.7.2.
1.7.1 supported:
getColumns(null, "%", "TABLENAME", "%");
With 1.7.1 I get an empty resultset back, although I 
expected to get the column list for my table.
I found a workaround is to call getColumns like this:
getColumns(null, null, "TABLENAME", "%"):
However, this breaks my existing portable database 
code.  Shouldn't 1.7.2 support wildcard for the schema 
name?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

438
HyperSQL Database Engine (HSQLDB) / Bugs / #438 wrong constraint name in violation exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I create a table with a single column and a named unique 
constraint on that column: 
create table SomeTable 
( 
someString varchar(10), 
constraint someStringUnique unique(someString) 
) 
in I insert a row: 
insert into SomeTable (someString) values 
('someStringValue') 
When I do the insert above a second time, a constraint 
violation occurs: 
Violation of unique index: SYS_IDX_1 in statement [SET 
MAXROWS 100;insert into someTable (someString) values 
('someStringValue')] 
I think, the message is wrong. It should read (askerix for 
emphasis only): 
Violation of unique index: **someStringUnique** in 
statement [SET MAXROWS 100;insert into someTable 
(someString) values ('someStringValue')] 
or better yet: 
Violation of unique **constraint**: someStringUnique in 
statement [SET MAXROWS 100;insert into someTable 
(someString) values ('someStringValue')] 
Occurs both in 1.7.1. and 1.7.2 RC5 
I would like to retrieve the name of the violated constraint 
somehow fron the SQLException thrown on the violation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

439
HyperSQL Database Engine (HSQLDB) / Bugs / #439 "400 Bad Request" when proxy server changes http headers
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to connect to a hsqlldb database using the
http protocol jdbc:hsqldb:http://servername across the
internet. 
My ISP has some sort of proxy server in place. The http
headers should arrive at my hsqldb server as ....
POST / HTTP/1.0(CRLF)
Content-Type: application/octet-stream(CRLF)
Content-Length: 42(CRLF)
(CRLF)
(0)(0)(0)*(0)(1)(0)(7)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(2)SA(0)(0)(0)(8)PASSWORD(0)(0)(0)(0)(0)(0)(0)(0)
But they arrive at the hsqldb server as ....
POST / HTTP/1.1(CRLF)
Host: 123.123.123.123(CRLF)
Connection: keep-alive(CRLF)
Content-Type: application/octet-stream(CRLF)
Content-Length: 42(CRLF)
X-Forwarded-For: 1.1.1.1(CRLF)
Via: 1.0 vcache (NetCache NetApp/5.5)(CRLF)
(CRLF)
(0)(0)(0)*(0)(1)(0)(7)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(2)SA(0)(0)(0)(8)PASSWORD(0)(0)(0)(0)(0)(0)(0)(0)
Which causes a "400 Bad Request" to be returned.
I cannot connect to my hsqldb server without going
through this "device" - www.netapp.com has details of
the device - but I suspect it's just one of many.
This occurs with RC5.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

440
HyperSQL Database Engine (HSQLDB) / Bugs / #440 User defined ALIASes and built-in aliases
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello! With built-in aliases, I can construct with AND
and OR as many built-in aliases together into one CALL
statement as I can and no exception is arised. But when
I CREATE my own ALIAS, it can not be constructed with
built-in alias into one CALL simply. I have to CAST my
ALIAS(returns boolean) value and check for 'true' or
'false. Please look simple code fragment:
try {
java.sql.Connection c = null;
Class.forName( "org.hsqldb.jdbcDriver");
c = java.sql.DriverManager.getConnection(
"jdbc:hsqldb:.", "sa", "");
Statement st = c.createStatement();
st.executeUpdate("CREATE USER juku PASSWORD pass ADMIN;");
st.close();
c.close();
c = java.sql.DriverManager.getConnection(
"jdbc:hsqldb:.", "juku", "pass");
c.createStatement().executeUpdate( "CREATE ALIAS
ISREGNUMBER FOR \"ee.emk.util.Algorithms.isRegNumber\"");
// EXCEPTION IS COMING WITH: ResultSet _rs =
c.createStatement().executeQuery( "CALL LENGTH('abc') >
0 AND ISREGNUMBER( '123456')");
ResultSet _rs = c.createStatement().executeQuery( "CALL
LENGTH('abc') > 0 AND CAST( ISREGNUMBER( '123456') AS
CHAR) = 'true'");
_rs.next();
System.out.println( "ANSWER:" + _rs.getString(1));
} catch( Exception e){
System.out.print( e.getMessage());
}
-----------------
So calling: for example
CALL LENGTH( 'abc') > 0 AND PI() > 0
returns true.
But when I create own alias, which returns true/false,
I can not use: 
CALL LENGTH('123456') > 0 AND ISREGNUMBER( '123456')
'General exception' will be catched. So I have to use: 
CALL LENGTH('123456') > 0 AND CAST( ISREGNUMBER(
'123456') AS CHAR) = 'true'
Is it bug or feature I do not know. We can use CASTing,
but still would be nice to not to do it.
Tanks in advance!
Andre
Version 1.7.2 RC5 is used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

441
HyperSQL Database Engine (HSQLDB) / Bugs / #441 Time not accepting HH:MM
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a table has a field with type TIME, it didn't
accept an entry if it's in HH:MM format (only the less
common HH:MM:SS)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

442
HyperSQL Database Engine (HSQLDB) / Bugs / #442 getDatabaseMajorVersion fn -> error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not exactly a show stopper, but I thought I'd mention it 
anyway,
DatabaseMetaData functions:
getDatabaseMajorVersion() and
getDatabaseMinorVersion()
gave Abstract method exceptions when I tried to use 
them. I'm using getDatabaseProductVersion() instead, 
with no problems.
HSQLDB version 1.7.1
regards
Iain
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

443
HyperSQL Database Engine (HSQLDB) / Bugs / #443 Order by bug of 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using hsqldb 1.7.1, on WinXP with JDK 
1.4.2. Our program starts the hsqldb using 
Server Mode, and connects to the hsqldb using jdbc.
Our open connection codes are,
public boolean updateScoreSectionByIdx(int idx,
{
conn = getConnection();
if (conn == null)
return false;
.........
try {
stmnt = conn.createStatement();
success = ( (stmnt.executeUpdate
(sqlcommand) == 0) ? false : true);
}
catch (SQLException e) {
...........
}
finally {
close();
}
The table to be retrieved is,
CREATE TEXT TABLE PP_QUESTION_PARTS
(QUESTION_IDX INTEGER NOT NULL,PART_NUMBER 
INTEGER NOT NULL,TOOL VARCHAR(50) NOT 
NULL,CORRECT_LOCATION VARCHAR(50) NOT 
NULL,CREATED TIMESTAMP,CONSTRAINT 
PK_PP_QUESTION_PARTS PRIMARY KEY
(QUESTION_IDX,PART_NUMBER),CONSTRAINT 
FK_PP_QUESTION_PARTS_PP_QUESTION FOREIGN KEY
(QUESTION_IDX) REFERENCES PP_QUESTION(IDX))
our retrieve method is,
public String[][] selectByQidx(int qidx){
conn = getConnection();
if(conn==null)
return null;
String[][] elements = null;
String sqlcommand = 
QueryConfig.getResourceString
("content.questionpart.retrieve-tool").replaceAll("~", 
(new Integer(qidx)).toString());
try{
stmnt = conn.createStatement();
Vector vec1 = new Vector();
Vector vec2 = new Vector();
Integer oid = null;
rs = stmnt.executeQuery(sqlcommand);
while (rs.next()) {
String s = rs.getString(1); 
vec1.add(s.substring(1,s.length()-1));
s = rs.getString(2);
vec2.add(s.substring(1,s.length()-1));
}
elements = new String[vec1.size()][2];
Iterator it1 = vec1.iterator();
Iterator it2 = vec2.iterator();
for (int i = 0; it1.hasNext(); i++) {
elements[i][0] = (String) it1.next();
elements[i][1] = (String) it2.next();
}
}
catch (Exception e) {
Log.logp(Level.SEVERE, 
QuestionPartOperation.class.getName
(), "queryAllRules", "Can't find 
QUESTION_IDX&PART_NUMBER from 
PP_QUESTION_PARTS!");
}
finally {
close();
}
return elements;
}
The corresponding externalized SQL is,
content.questionpart.retrieve-tool = select TOOL, 
CORRECT_LOCATION from PP_QUESTION_PARTS where 
QUESTION_IDX = ~ order by PART_NUMBER
All the records that should be retrieved are,
85|2|~COMMA~|~2~
85|4|~COMMA~|~5~
85|1|~QUOTATION_MARK_LEFT~|~1~
85|3|~QUOTATION_MARK_RIGHT~|~2~
85|5|~QUOTATION_MARK_LEFT~|~6~
85|6|~QUOTATION_MARK_RIGHT~|~9~
At the first time, this method could retrieve all the six 
records from the table PP_QUESTION_PARTS, but the 
second time it is called, only four of them are retrieved, 
and the following records are lost,
85|2|~COMMA~|~2~
85|4|~COMMA~|~5~
I'm very sure that every actual SQL is the same each 
time, It's so strange all the later retrievements lost the 
same 2 records.
Also if I changed the record to let PART_NUMBER in the 
sequential order like follow,
85|1|~QUOTATION_MARK_LEFT~|~1~
85|2|~COMMA~|~2~
85|3|~QUOTATION_MARK_RIGHT~|~2~
85|4|~COMMA~|~5~
85|5|~QUOTATION_MARK_LEFT~|~6~
85|6|~QUOTATION_MARK_RIGHT~|~9~
Then every time the result is correct.
Is it a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

444
HyperSQL Database Engine (HSQLDB) / Bugs / #444 hsqldb RC2 onward fails to start over nfs with jvm1.4
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From RC2 onwards, hsqldb has an error on startup if the
database is on an nfs file system and jvm 1.4 is used.
Hsqldb starts OK using jvm 1.3, or with RC1, or if the
database file is on the local disk.
(Running under Linux, slackware 8, and creating a new
database file, so it cannot be already in use by
another process..)
The output from RC2 is:
[@19ee1ac,5,main]]: run()/openDatabases(): 
org.hsqldb.HsqlException: The database is already in
use by another process:
org.hsqldb.NIOLockFile@bb86e3e9[file
=/home/data/test2.lck, exists=true, locked=false,
valid=false, fl =null]: 
at org.hsqldb.Trace.error(Unknown Source)
at org.hsqldb.Logger.acquireLock(Unknown Source)
at org.hsqldb.Logger.openLog(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at
org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at
org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.Server.openDatabases(Unknown Source)
at org.hsqldb.Server.run(Unknown Source)
at org.hsqldb.Server.access$000(Unknown Source)
at org.hsqldb.Server$ServerThread.run(Unknown
Source)
With RC5, I get the following output:
[Server@1f1fba0]: Server socket opened successfully in
22 ms.
[Server@1f1fba0]: [Thread[HSQLDB Server
@1f1fba0,5,main]]: Database [index=0db=nullnull,
alias=null] did not open
[Server@1f1fba0]: [Thread[HSQLDB Server
@1f1fba0,5,main]]: run()/openDatabases(): 
[Server@1f1fba0]: Initiating shutdown sequence...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

445
HyperSQL Database Engine (HSQLDB) / Bugs / #445 1.7.1 client hangs trying to connect to 1.7.2 server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I accidentally had an older 1.7.1 hsqldb jar in the 
classpath (before the 1.7.2RC5 one).
The client was just hanging for ever when trying to 
connect to a 1.7.2 server.
It would be helpful if some exception was thrown like "A 
hsqldb 1.7.1 client cannot connect to a hsqldb 1.7.2 
server"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

446
HyperSQL Database Engine (HSQLDB) / Bugs / #446 1.7.2RC5 - CALL IDENTITY() broken?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried out 1.7.2RC5 today and was unable to use my 
application to insert data into tables that use IDENTITY 
columns.
MY application uses prepared statements of the form:
INSERT INTO CUSTOMER
(CUSTOMER_NO, customer_name, address) 
VALUES ( ?, ?, ? )
In this case there is a CUSTOMER_ID column of type 
IDENTITY. My program fails on the this line after the 
SQL INSERT has successfully executed:
ResultSet rsIdentity = stInsert.executeQuery("CALL 
IDENTITY()");
The error message is "function not supported"
I've reverted to 1.7.1 and my program is working again.
I didn't perform any 'upgrade' on the database itself, as 
far as I can tell this isn't required.
Regards
Iain
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

447
HyperSQL Database Engine (HSQLDB) / Bugs / #447 CREATE VIEW and USER() function problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm currently doing an evaluation of databases to select 
one for a new project. Whilst evaluating your very 
impressive database I have noticed a problem.
When creating a view such as ;
CREATE TABLE USER_SECURITY_PROFILE
(
Name VARCHAR,
Profile INT
);
INSERT INTO USER_SECURITY_PROFILE(Name,Profile) 
VALUES('SA',20);
INSERT INTO USER_SECURITY_PROFILE(Name,Profile) 
VALUES('TEST',10);
CREATE VIEW USER_SECURITY_PROFILE_VIEW AS
SELECT *
FROM USER_SECURITY_PROFILE
WHERE USER() = Name;
When connecting using SA and performing the SELECT 
statement used in the VIEW command I got the SA row 
as expected. When I CREATE the VIEW and do a 
SELECT * from the VIEW I get no rows at all. After 
further investigration I found that the SELECT within 
CREATE VIEW is run as user SYS. Which means I can't 
create a VIEW based on the currently connected USER.
This causes me a problem and is different to every other 
database I have seen which runs the CREATE VIEW 
command within the context of the connection.
Is there a workaround to this or can it be fixed ?
Thanks in advanced for your help.
Matt Shaw
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

448
HyperSQL Database Engine (HSQLDB) / Bugs / #448 National characters in text table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
I tried hsqldb text table but national 
Czech characters are stored as '?'. 
In other tables are stored in <database>.script 
as escape constant. 
('a c d e i n o r s t u z z ');
('aác&#269;d&#271;eé&#283;iín&#328;oór&#345;st&#357;uú&#367;zýz');
('aác&#269;d&#271;eé&#283;iín&#328;oór&#345;st&#357;uú&#367;zýz');
-- for the same non-text table 
INSERT INTO NTABLE VALUES(0,'a c d e i n o r s t u z 
z ')
INSERT INTO NTABLE VALUES
(1,'a\u00e1c\u010dd\u010fe\u00e9
\u011bi\u00edn\u0148o\u00f3r\u0159s\u0161t\u0165u\u
00fa\u016fz\u00fdz\u017e')
INSERT INTO NTABLE VALUES
(2,'a\u00e1c\u010dd\u010fe\u00e9
\u011bi\u00edn\u0148o\u00f3r\u0159s\u0161t\u0165u\u
00fa\u016fz\u00fdz\u017e')
Ufak
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

449
HyperSQL Database Engine (HSQLDB) / Bugs / #449 ResultSet.first() throws exception...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A call to ResultSet.first() throws the following exception 
when the ResultSet is positioned before first row:
Caused by: java.sql.SQLException: ResultSet was set to 
forward only
at org.hsqldb.jdbc.jdbcUtil.sqlException
(Unknown Source)
at org.hsqldb.jdbc.jdbcUtil.sqlException
(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSet.first(Unknown 
Source)
at 
com.jenkov.mrpersister.impl.ObjectReader.read
(ObjectReader.java:115)
I can see why a call to ResultSet.first() should result in 
an exception if the ResultSet is positioned AFTER the 
first row. But not while it is positioned either before, or 
at the first row. 
This is clearly a bug, and I'll need to change quite a bit 
of ResultSet.first() to ResultSet.next() to get my code 
to work. Well, it's doable I admit :-) But hey, I shouldn't 
have to :-/
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

450
HyperSQL Database Engine (HSQLDB) / Bugs / #450 Compatibility issues from Linux to Windows?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using 1.7.1:
I have created a DB instance on Linux. I checked in to CVS (as 
binary) the .data and .script files. A co-worker on Windows (using the 
same commandline) gets an error (see attachment) when trying to 
start the DB and then the .data file is zero'ed out. I have spent
several hours combing through the web, but couldn't find anything.
What are we doing wrong?
What's interesting is that if we delete the index creation lines from the 
.script file (which produces the output seen in the attachment) the 
error doesn't occur, but the .data file still gets zero'ed out.
Any help would really be appreciated!
Thanks.
Jason Rogers
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

451
HyperSQL Database Engine (HSQLDB) / Bugs / #451 Setting a byte[] of zero length throws exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I f I use a blob datatype with zero length size of the
array an exception is thrown.
Caused by: java.lang.NegativeArraySizeException
at 
org.hsqldb.jdbc.jdbcPreparedStatement.setBlob
(jdbcPreparedStatement.java:1259)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

452
HyperSQL Database Engine (HSQLDB) / Bugs / #452 *.data and *.backup not deleted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had one cached table in my database but eventually 
dropped it. 
I noticed that the data and backup file aren't 
deleted or at least set to zero size even after 
checkpoint and proper shutdown.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

453
HyperSQL Database Engine (HSQLDB) / Bugs / #453 Test file for the "NOT unknown" issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This file contains tests in the TestSelf format.
These tests are not complete and may be improved.
Regards
Massimo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

454
HyperSQL Database Engine (HSQLDB) / Bugs / #454 server not starting
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i'm starting a database and i get the following output:
[Server@14b7453]: [Thread[main,5,main]]:
checkRunning(false) entered
[Server@14b7453]: [Thread[main,5,main]]:
checkRunning(false) exited
[Server@14b7453]: Startup sequence initiated from
main() method
[Server@14b7453]: Loaded properties from
[C:\facturas\madreado\server.properties]
[Server@14b7453]: Initiating startup sequence...
[Server@14b7453]: Server socket opened successfully in
31 ms.
cache_scale: 14
cache_size_scale: 20
NIO next enlargeBuffer(): 1048576
NIO file instance created. mode: false
DataFileCache.closeFile()
NIO next close() - fileLength = 1048576
NIO next buffer.force()
NIO next channel.close()
NIO next file.close()
[Server@14b7453]: [Thread[HSQLDB Server
@14b7453,5,main]]: Database [index=0db=nullnull,
alias=null] did not open
[Server@14b7453]: [Thread[HSQLDB Server
@14b7453,5,main]]: run()/openDatabases():
[Server@14b7453]: Initiating shutdown sequence...
[Server@14b7453]: Shutdown sequence completed in 16 ms.
[Server@14b7453]: 2004-05-07 10:36:11.186 SHUTDOWN :
System.exit() is called next
i already restored the .data file from the .backup and
the error persists.
i'll upload the database
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

455
HyperSQL Database Engine (HSQLDB) / Bugs / #455 buildJDK12.bat fails to include some files in jar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The buildJDK12.bat script that comes with RC5 fails to 
include the following directories (from /classes) in the 
resulting hsqldb.jar file:
/org/hsqldb/jdbc
/org/hsqldb/lib/java
/org/hsqldb/resources
/org/hsqldb/rowio
/org/hsqldb/store
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

456
HyperSQL Database Engine (HSQLDB) / Bugs / #456 Nightly tarball contains files with weird names (on Windows)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All the files in the nightly tarball available from the 
homepage have ",v" appended to the end of their 
names. Example:
HsqlDateTime.java,v
I'm using winrar 3.30 (latest version released on 2004) 
on WindowsXp to uncompress the .bz2 file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

457
HyperSQL Database Engine (HSQLDB) / Bugs / #457 "create view" fails when having identical column-names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
- tested with 1.7.2 RC5
- do following to reproduce:
CREATE TABLE A ( ID INTEGER );
CREATE TABLE B ( ID INTEGER , FK INTEGER );
CREATE VIEW FAIL_VIEW (AID, BID) AS SELECT A.ID, B.ID
FROM A, B WHERE A.ID=B.FK;
=> Error: java.sql.SQLException: Column already exists
in statement
the statement above works with DB2 und Oracle 
it works as well, if you only do the SELECT:
SELECT A.ID, B.ID FROM A, B WHERE A.ID=B.FK;
Workaround :
CREATE VIEW WORKING_VIEW (AID, BID) 
AS 
SELECT A.ID as temp1, B.ID as temp2 FROM A, B 
WHERE A.ID=B.FK;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

458
HyperSQL Database Engine (HSQLDB) / Bugs / #458 Trigger fire callback data is incorrect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I've been doing some work with triggers. The BEFORE 
UPDATE FOR EACH ROW and AFTER UPDATE FOR EACH 
ROW don't seem to be passing the correct data.
According to the documentation Row1 and Row2 should 
contain the before and after data but Row1 seems to be 
the data to be updated with and Row2 is null.
I tested this in my own code and also with the 
TriggerSample class and got the same result.
I need both sets of data to make a decision in the 
Trigger.
If this is a bug could the other trigger types be checked.
Thanks
Matt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

459
HyperSQL Database Engine (HSQLDB) / Bugs / #459 Updated trigger data violates table constraints
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
When using Triggers I noticed something which I believe 
is a bug.
If you use one of the BEFORE FOR EACH ROW triggers 
and modify the data that is about to be inserted into the 
database the data that is inserted isn't checked against 
the table constraints i.e. NOT NULL or similiar.
I found this while trying to acheive a veto of a change 
request. I basically nulled the data and expected the 
database not to insert the new data or throw an 
exception or something instread it quite happily inserted 
a null row even though all the columns were NOT NULL.
Cheers
Matt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

460
HyperSQL Database Engine (HSQLDB) / Bugs / #460 ArrayIndexOutOfBoundsException when creating indices
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get the following exception when running the SQL
statement:
create index INDEX_PROPERTY_AtoSM on PROPERTY
(APPLIESTOSTAGEMARKER)
in my HyperSonic database.
java.lang.ArrayIndexOutOfBoundsException
at java.lang.System.arraycopy(Native Method)
at
org.hsqldb.lib.ArrayUtil.copyAdjustArray(Unknown Source)
at org.hsqldb.Table.moveData(Unknown Source)
at org.hsqldb.TableWorks.createIndex(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.addIndexOn(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.processCreateIndex(Unknown
Sourc
e)
at
org.hsqldb.DatabaseCommandInterpreter.processCreate(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at org.hsqldb.Session.execute(Unknown Source)
at
org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown Source)
at
org.hsqldb.jdbc.jdbcStatement.execute(Unknown Source)
at
com.tallgroup.synchronizer.DataSynchronizer.executeQuery(DataSynchroni
zer.java:524)
at
com.tallgroup.synchronizer.DataSynchronizer.createTables(DataSynchroni
zer.java:1188)
at
com.tallgroup.synchronizer.DataSynchronizer.makeVitalDatabase(DataSync
hronizer.java:187)
at
com.tallgroup.synchronizer.DataSynchronizer.main(DataSynchronizer.java:1823)
13952 [main] ERROR
com.tallgroup.synchronizer.DataSynchronizer - Error
creating indexes: S1000 General error
java.lang.ArrayIndexOutOfBoundsException in statement
[create index INDEX_PROPERTY_AtoSM on PROPERTY
(APPLIESTOSTAGEMARKER)]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

461
HyperSQL Database Engine (HSQLDB) / Bugs / #461 EBCDIC platforms not supported
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The hypersonic engine is not handling character sets 
other than ascii. Running on the z/OS platform causes 
invalid characters to be written to the script file. There 
are places in the codebase where ascii-to-unicode, and 
vise versa, conversions are being done. I believe none 
of this should be necessary if using Reader/Writers. An 
example would be in the java.util.Properties source, 
which reads and writes to a text file and is platform 
independent. 
The log reading is correctly using a "BufferedReader(new 
InputStreamReader(dataStreamIn))", but the same is not 
true for writing - and is directly using a 
FileOutputStream instead of a "new BufferedWriter( new 
OutputStreamWriter(fos, "8859_1") )" as is done in the 
base Java Properties class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

462
HyperSQL Database Engine (HSQLDB) / Bugs / #462 CREATE TABLE with integer DEFAULT seems to fail
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The latest CVS code produces an error for the following 
SQL statement (which runs fine under RC5):
CREATE TABLE tmpOverview (
QueryID int NOT NULL,
TestID int NOT NULL,
CustJobNumber varchar(50) NOT NULL,
ReportID varchar(50) NOT NULL,
JobDate date NOT NULL,
Outstanding bit NOT NULL,
TechniqueNumber varchar(50) NULL,
CompNumber varchar(50) NULL,
TestNumber varchar(50) NULL,
ReshotNumber int DEFAULT 0 NOT NULL,
RepairNumber int DEFAULT 0 NOT NULL,
Result varchar(50) NULL,
Fault varchar(50) NULL,
LocationFrom double NULL,
LocationTo double NULL,
IsEventuallyRejected int NOT NULL,
WeldersSymbol varchar(50) NULL
)
java.sql.SQLException: S1000 General error 
java.lang.ClassCastException in statement [CREATE 
TABLE tmpOverview ( QueryID int NOT NULL, 
TestID int NOT NULL, CustJobNumber varchar(50) NOT 
NULL, ReportID varchar(50) NOT NULL, JobDate date 
NOT NULL, Outstanding bit NOT NULL, 
TechniqueNumber varchar(50) NULL, CompNumber 
varchar(50) NULL, TestNumber varchar(50) NULL, 
ReshotNumber int DEFAULT 0]
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown 
Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

463
HyperSQL Database Engine (HSQLDB) / Bugs / #463 Default column value of 'now' no longer work in create table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.7.2_RC6 the following syntax no longer works in a
create table statement:
create table TEST (
icd_ID INTEGER IDENTITY 
NOT NULL, 
add_date TIMESTAMP DEFAULT 'now'
NOT NULL,
mod_date TIMESTAMP DEFAULT 'now'
NOT NULL,
CONSTRAINT icd_pk
PRIMARY KEY ( icd_ID ) 
);
This did work in 1.7.2_RC5. In RC6 I had to update my
sql scripts to remove the single quotes from around 'now'. 
Not sure what is expected behavior, I just wanted to
report it in case using 'now' in a default column value
should work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

464
HyperSQL Database Engine (HSQLDB) / Bugs / #464 RC6: switchtojdk12.bat followed by buildjdk12.bat fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I downloaded/unzipped rc6, and immediately did a 
swtichtojdk12.bat (successful), followed by a 
buildjdk12.bat (fails). I am running jdk1.4.2_04 on this 
machine to build it.
Output from buildjdk12 below:
C:\hsqldb\build>buildjdk12
HSQLDB build file for jdk 1.2.x and 1.3.x
*** we recommend the use of the ANT build.xml instead 
of this method
for all jdk's include the path to jdk1.x.x\bin in your 
system path statement
C:\hsqldb\build>cd ..\
C:\hsqldb>md classes
A subdirectory or file classes already exists.
C:\hsqldb>del /s classes\*.class
Deleted file - 
C:\hsqldb\classes\org\hsqldb\util\CodeSwitcher.class
C:\hsqldb>cd src
C:\hsqldb\src>mkdir ..\temp
C:\hsqldb\src>copy 
org\hsqldb\jdbc\jdbcDataSource*.java ..\temp\
org\hsqldb\jdbc\jdbcDataSource.java
org\hsqldb\jdbc\jdbcDataSourceFactory.java
2 file(s) copied.
C:\hsqldb\src>copy 
org\hsqldb\jdbc\jdbcSavepoint.java ..\temp\
1 file(s) copied.
C:\hsqldb\src>copy 
org\hsqldb\jdbc\jdbcParameterMetaData.java ..\temp
\
1 file(s) copied.
C:\hsqldb\src>copy org\hsqldb\NIOLockFile.java ..\temp\
1 file(s) copied.
C:\hsqldb\src>copy 
org\hsqldb\NIOScaledRAFile.java ..\temp\
1 file(s) copied.
C:\hsqldb\src>del org\hsqldb\jdbc\jdbcDataSource*.java
C:\hsqldb\src>del org\hsqldb\jdbc\jdbcSavepoint.java
C:\hsqldb\src>del 
org\hsqldb\jdbc\jdbcParameterMetaData.java
C:\hsqldb\src>del org\hsqldb\NIOLockFile.java
C:\hsqldb\src>del org\hsqldb\NIOScaledRAFile.java
C:\hsqldb\src>javac -O -nowarn -d ../classes -
classpath ";../classes;
../lib/servlet.jar;." ./*.java org/hsqldb/*.java 
org/hsqldb/jdbc/*.java org/hsql
db/rowio/*.java org/hsqldb/scriptio/*.java 
org/hsqldb/store/*.java org/hsqldb/li
b/*.java org/hsqldb/util/*.java
org/hsqldb/jdbc/jdbcConnection.java:387: 
org.hsqldb.jdbc.jdbcConnection is not a
bstract and does not override abstract method 
prepareStatement(java.lang.String,
java.lang.String[]) in java.sql.Connection
public class jdbcConnection implements Connection {
^
org/hsqldb/jdbc/jdbcStatement.java:123: 
org.hsqldb.jdbc.jdbcStatement is not abs
tract and does not override abstract method execute
(java.lang.String,java.lang.S
tring[]) in java.sql.Statement
public class jdbcStatement implements 
java.sql.Statement {
^
org/hsqldb/jdbc/jdbcPreparedStatement.java:192: 
org.hsqldb.jdbc.jdbcPreparedStat
ement is not abstract and does not override abstract 
method getParameterMetaData
() in java.sql.PreparedStatement
public class jdbcPreparedStatement extends 
jdbcStatement
^
org/hsqldb/jdbc/jdbcCallableStatement.java:284: 
org.hsqldb.jdbc.jdbcCallableStat
ement is not abstract and does not override abstract 
method setTimestamp(java.la
ng.String,java.sql.Timestamp,java.util.Calendar) in 
java.sql.CallableStatement
public class jdbcCallableStatement extends 
jdbcPreparedStatement
^
org/hsqldb/jdbc/jdbcResultSet.java:305: 
org.hsqldb.jdbc.jdbcResultSet is not abs
tract and does not override abstract method updateRef
(java.lang.String,java.sql.
Ref) in java.sql.ResultSet
public class jdbcResultSet implements ResultSet {
^
org/hsqldb/jdbc/jdbcDatabaseMetaData.java:345: 
org.hsqldb.jdbc.jdbcDatabaseMetaD
ata is not abstract and does not override abstract 
method getAttributes(java.lan
g.String,java.lang.String,java.lang.String,java.lang.String
) in java.sql.Databas
eMetaData
public class jdbcDatabaseMetaData implements 
java.sql.DatabaseMetaData {
^
6 errors
C:\hsqldb\src>copy ..\temp\jdbcDataSource*.java 
org\hsqldb\jdbc
..\temp\jdbcDataSource.java
..\temp\jdbcDataSourceFactory.java
2 file(s) copied.
C:\hsqldb\src>copy ..\temp\jdbcSavepoint.java 
org\hsqldb\jdbc
1 file(s) copied.
C:\hsqldb\src>copy ..\temp\jdbcParameterMetaData.java
org\hsqldb\jdbc
1 file(s) copied.
C:\hsqldb\src>copy ..\temp\NIOLockFile.java org\hsqldb
1 file(s) copied.
C:\hsqldb\src>copy ..\temp\NIOScaledRAFile.java 
org\hsqldb
1 file(s) copied.
C:\hsqldb\src>del ..\temp\jdbcDataSource*.java
C:\hsqldb\src>del ..\temp\jdbcSavepoint.java
C:\hsqldb\src>del ..\temp\jdbcParameterMetaData.java
C:\hsqldb\src>del ..\temp\NIOLockFile.java
C:\hsqldb\src>del ..\temp\NIOScaledRAFile.java
C:\hsqldb\src>rmdir ..\temp
C:\hsqldb\src>cd ..\classes
C:\hsqldb\classes>copy ..\src\org\hsqldb\util\hsqldb.gif 
org\hsqldb\u
til
1 file(s) copied.
C:\hsqldb\classes>jar -cf ../lib/hsqldb.jar *.class 
org/hsqldb/*.clas
s org/hsqldb/jdbc/*.class org/hsqldb/rowio/*.class 
org/hsqldb/scriptio/*.class o
rg/hsqldb/store/*.class org/hsqldb/lib/*.class 
org/hsqldb/util/*.class org/hsql
db/util/*.gif
org\hsqldb\jdbc\*.class : no such file or directory
org\hsqldb\scriptio\*.class : no such file or directory
org\hsqldb\util\*.class : no such file or directory
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

465
HyperSQL Database Engine (HSQLDB) / Bugs / #465 Database won't shutdown after creating Triggers
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
If you create triggers using statements such as ;
CREATE TRIGGER AUDIT_BEFORE_UPDATE_TEST BEFORE 
UPDATE ON TEST FOR EACH ROW CALL "AuditTrigger"
and issue the SHUTDOWN command, from another 
connection, with no or any of the SHUTDOWN 
arguments the command hangs the Server and doesn't 
shutdown.
I have tracked the problem down.
In Server.java, the code;
for (int i = 0; 
serverConnectionThreadGroup.activeCount() > 0;
i++) {
int count;
try {
wait(100);
} catch (Exception e) {
//e.getMessage();
}
}
is looping forever as the activeCount is always equal to 
number of triggers that you have created.
Unfortunately I'm not sure how to fix it.
I have removed all my code from the fire() method on 
the trigger to eliminate that.
This is obviously fairly serious as it means you can't 
cleanly shutdown the database if you use triggers. 
Cheers
Matt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

466
HyperSQL Database Engine (HSQLDB) / Bugs / #466 java.sql.SQLException: File input/output error: saveSorted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.sql.SQLException: File input/output error: 
saveSorted
java.lang.NullPointerException in statement [insert into 
alarm (resource, type,
level, time, seq_no, address, srv_identity, message) 
values
('resource_1_1', 'server.OverloadCeased', 4,
'2004-05-24 11:29:00.141', 
773134, '10.50.3.5:1099', 'OAM1', '[plc1.P] queue
overflow ceased. Queue fill rate is 33%!')]
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.jdbcResultSet.<init>(Unknown 
Source)
at org.hsqldb.jdbcConnection.executeStandalone
(Unknown Source)
at org.hsqldb.jdbcConnection.execute(Unknown 
Source)
at org.hsqldb.jdbcStatement.fetchResult(Unknown 
Source)
at org.hsqldb.jdbcStatement.executeUpdate
(Unknown Source)
at 
org.hsqldb.jdbcPreparedStatement.executeUpdate
(Unknown Source)
at
...................
I use hsqldb_1_7_1. It happend only once during soak 
test and i don't know why.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

467
HyperSQL Database Engine (HSQLDB) / Bugs / #467 Unexpected results using LEFT JOIN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've tested the SQL below on several other databases
and got the 'Expected Results' (see below). HSQL
returns an unusual row containing NULL values (see
'Actual Results').
Table/Content
CREATE CACHED TABLE propertyvalue (
id INT, 
name CHAR(36),
value CHAR(255))
INSERT INTO propertyvalue VALUES (1, 'title', 'Foo');
INSERT INTO propertyvalue VALUES (2, 'title', 'Bar');
Query Using LEFT JOIN
SELECT * FROM 
(SELECT id FROM propertyvalue WHERE name = 'title') AS id
LEFT JOIN 
(SELECT id, value FROM propertyvalue WHERE name =
'title') AS title 
ON id.id = title.id
WHERE title.value != 'Foo'
Actual Results
ID ID VALUE
--- --- -------
1 NULL NULL
2 2 Bar
Expected Results
ID ID VALUE
--- --- -------
2 2 Bar
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

468
HyperSQL Database Engine (HSQLDB) / Bugs / #468 SELECT NEXT VALUE FOR <seq>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
select next value for <sequnce> does not work. Return
the following error. Also there is not a NEXT_VALUE
column in the SYSTEM_SEQUENCES table for the sequence
that I created.
java.sql.SQLException: Unexpected token: in statement
[SELECT NEXT VALUE FOR RTNSEQ]
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown
Source)
at org.hsqldb.jdbc.jdbcStatement.executeQuery(Unknown
Source)
at Test.main(Test.java:51)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

469
HyperSQL Database Engine (HSQLDB) / Bugs / #469 Wrong handling of non HSQL URLs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Try the following code (alone in a main, do not try to
include the Oracle driver to the classpath):
Class.forName("org.hsqldb.jdbcDriver");
Connection c = DriverManager.getConnection("", "ow", "aw");
I get an exception:
java.sql.SQLException: SOO10 Invalid argument in JDBC call
at
org.hsqldb.jdbcDriver.getConnection(jdbcDriver.java:174)
at org.hsqldb.jdbcDriver.connect(jdbcDriver.java:163)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:172)
at
com.sunopsis.hsql.test.badpass.BadPass.main(BadPass.java:24)
This is erroneous since the URL is not a HSQL URL
anyway (you can put anything you like in the url, such
as real urls of other database drivers, except valid
HSQL URLs of course). Other drivers (Oracle, mySql,
MSSQL) do not throw an exception in that case because
the URL is not valid for them. With all these drivers,
I get this exception:
java.sql.SQLException: No suitable driver
at
java.sql.DriverManager.getConnection(DriverManager.java:532)
at
java.sql.DriverManager.getConnection(DriverManager.java:172)
at
com.sunopsis.hsql.test.badpass.BadPass.main(BadPass.java:26)
which seems much more normal.
To my mind, this is an important issue since it can
mask other (real!) exceptions from other drivers.
Actually, my initial problem was while trying to
connect to an oracle database, I had made a mistake in
my oracle URL but got the HSQL exception instead of the
oracle one because the DriverManager tried HSQL first
(and I understand that the DriverManager cannot choose
between two drivers which raise an exception)!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

470
HyperSQL Database Engine (HSQLDB) / Bugs / #470 setObject and setBoolean don't map a Boolean to a int field
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to JDBC (table 8.9.5 on page
http://java.sun.com/j2se/1.3/docs/guide/jdbc/getstart/mapping.html#1051555\),
setObject and setBoolean should map a java Boolean to
an int field. But HSQL's JDBC driver seems to simply
output the boolean into a literal "TRUE" or "FALSE" and
will trigger an error when trying to insert such values
into a int field.
The following test shows the error:
import java.sql.*;
import junit.framework.*;
public class HSQLTest extends TestCase {
private Connection conn;
protected void setUp() throws Exception {
conn = makeConnection();
}
protected void tearDown() throws Exception {
conn.close();
}
public void testInsertBool() throws SQLException {
createTestTable1();
try {
PreparedStatement st =
conn.prepareStatement("insert into t1 values (?)");
try {
st.setObject(1, Boolean.TRUE);
//st.setBoolean(1, true);
//st.setInt(1, 1);
assertEquals(st.executeUpdate(), 1);
} finally {
st.close();
}
st =
conn.prepareStatement("select * from t1");
try {
ResultSet rs = st.executeQuery();
assertTrue(rs.next());
assertTrue(rs.getBoolean(1));
} finally {
st.close();
}
} finally {
dropTestTable1();
}
}
private void dropTestTable1() throws SQLException {
PreparedStatement st = conn.prepareStatement("drop
table t1");
try {
st.executeUpdate();
} finally {
st.close();
}
}
private void createTestTable1() throws SQLException {
PreparedStatement st =
conn.prepareStatement("create table t1 (f1 smallint)");
try {
st.executeUpdate();
} finally {
st.close();
}
}
private Connection makeConnection() {
...
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

471
HyperSQL Database Engine (HSQLDB) / Bugs / #471 NPE in ServerConnection.signalClose()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When multi-threaded connections, the runnerThread 
variable may be null.
Perhaps can we swith the test to avoid this case like 
this :
if (!Thread.currentThread().equals(runnerThread)) 
{
close();
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

472
HyperSQL Database Engine (HSQLDB) / Bugs / #472 insert..into..select..from..group..by bug(?)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are no rows in tbl1, but a row with null values 
gets inserted into tbl2 anyway. Not sure if it makes a 
difference, but the jdbc url is "jdbc:hsqldb:."
This is with 1.7.2 rc6b. Please let me know if further 
info is needed.
Thanks,
Ron
------------
CREATE table tbl1 (col1 varchar,col2 double,col3 int); 
CREATE TABLE tbl2 (col1 varchar, col2 double);
INSERT INTO tbl2 SELECT col1, AVG(col2) FROM tbl1 
WHERE col3 = 1 GROUP BY col1;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

473
HyperSQL Database Engine (HSQLDB) / Bugs / #473 7.1.1 can't create table name matching keyword :-(
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Can't use this SQL to create a new table.
CREATE TABLE call ( id INTEGER IDENTITY, ep1Id 
INTEGER, ep2Id INTEGER, start TIMESTAMP );
Get an SQLException about the table name call...
Unexpected token: call in statement [CREATE 
TABLE 'call' ( id INTEGER IDENTITY, ep1Id INTEGER, 
ep2Id INTEGER, start TIMESTAMP );]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

474
HyperSQL Database Engine (HSQLDB) / Bugs / #474 getPrimaryKeys maybe broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
if I call 
ResultSet rsPKeys = dbMeta.getPrimaryKeys(null, schema,
table);
for this table
CREATE TABLE TABLE2 (
ID INTEGER,
TEXT VARCHAR)
CREATE unique INDEX TABLE2_index ON TABLE2 (ID, TEXT)
nothing is reported.
I do not know if this is correct or not.
Bye
Lorenzo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

475
HyperSQL Database Engine (HSQLDB) / Bugs / #475 Wrong results if combining COALESCE, CAST and BETWEEN 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
if I submit the following query as PreparedStatement it
will always return all rows of Table1. The statement
always ignores the passed java.util.Date parameters.
SELECT t1.oid, t1.name FROM Table1 t1
WHERE
COALESCE(CAST(t1.timestampcolumn AS DATE), 
CAST('0001-01-01' AS DATE))
BETWEEN
COALESCE(?, CAST('0001-01-01' AS DATE))
AND COALESCE(?, CAST('9999-12-31' AS DATE))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

476
HyperSQL Database Engine (HSQLDB) / Bugs / #476 Bad tmp directory for DatabaseManager
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On Linux when I run as a non-root account and try to
start the DatabaseManager without any options:
java org.hsqldb.util.DatabaseManager
I get the following exception:
java.io.IOException: Permission denied
at java.io.UnixFileSystem.createFileExclusively(Native
Method)
at java.io.File.createNewFile(File.java:828)
at
org.hsqldb.util.ConnectionDialogCommon.loadRecentConnectionSettings(Unknown
Source)
at org.hsqldb.util.ConnectionDialog.create(Unknown Source)
at
org.hsqldb.util.ConnectionDialog.createConnection(Unknown
Source)
at org.hsqldb.util.DatabaseManager.main(Unknown Source)
java.lang.NullPointerException
at org.hsqldb.util.ConnectionDialog.create(Unknown Source)
at
org.hsqldb.util.ConnectionDialog.createConnection(Unknown
Source)
at org.hsqldb.util.DatabaseManager.main(Unknown Source)
The GUI comes up and then I try to File > Connect and get:
java.io.FileNotFoundException: /tmphsqlprefs.dat (No
such file or directory)
at java.io.FileInputStream.open(Native Method)
at java.io.FileInputStream.<init>(FileInputStream.java:106)
at
org.hsqldb.util.ConnectionDialogCommon.loadRecentConnectionSettings(Unknown
Source)
at org.hsqldb.util.ConnectionDialog.create(Unknown Source)
at
org.hsqldb.util.ConnectionDialog.createConnection(Unknown
Source)
at
org.hsqldb.util.DatabaseManager.actionPerformed(Unknown
Source)
After some investigation it seems there is a bug in
util.ConnectionDialogCommon. When the
loadRecentConnectionSettings() method it tries to
create a temp file using getTempDir() + filename. 
Problem is, getTempDir() returns "/tmp" as the dir, so
File(dir + fileName) [Line 193] results in:
/tmphsqlprefs.dat
rather than the expected:
/tmp/hsqlprefs.dat
Since I'm not root, I can't write in the root dir (/)
and it fails. Need to change everywhere getTempDir()
result is use to create a file name to add a directory
separator in the ConnectionDialogCommon class.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

477
HyperSQL Database Engine (HSQLDB) / Bugs / #477 Can't compile with sun jdk 1.3.1_09 under windows 2000
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please,
I am obtaining the log above when a try to compile
version 1.7.2 rc6b with sun jdk1.3.1_09 under Windows
2000 (ant version 1.6.1):
C:\Program Files\hsqldb\build>ant jar
Buildfile: build.xml
init:
-javaversion4:
javaversion2:
-prepare:
[mkdir] Created dir: C:\Program Files\hsqldb\classes
codeswitcher:
[javac] Compiling 1 source file to C:\Program
Files\hsqldb\classes
switchtojdk11:
switchtojdk12:
switchtojdk14:
store:
[javac] Compiling 4 source files to C:\Program
Files\hsqldb\classes
lib:
[javac] Compiling 37 source files to C:\Program
Files\hsqldb\classes
-javajsse:
[echo] ant.java.hasjsse=${ant.java.hasjsse}
classes:
[javac] Compiling 114 source files to C:\Program
Files\hsqldb\classes
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcConnection.java:1763
: cannot resolve symbol
[javac] symbol : class Savepoint
[javac] location: class org.hsqldb.jdbc.jdbcConnection
[javac] public Savepoint setSavepoint() throws
SQLException {
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcConnection.java:1791
: cannot resolve symbol
[javac] symbol : class Savepoint
[javac] location: class org.hsqldb.jdbc.jdbcConnection
[javac] public Savepoint setSavepoint(String
name) throws SQLException {
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcConnection.java:1840
: cannot resolve symbol
[javac] symbol : class Savepoint
[javac] location: class org.hsqldb.jdbc.jdbcConnection
[javac] public void rollback(Savepoint
savepoint) throws SQLException {
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcConnection.java:1911
: cannot resolve symbol
[javac] symbol : class Savepoint
[javac] location: class org.hsqldb.jdbc.jdbcConnection
[javac] public void releaseSavepoint(Savepoint
savepoint) throws SQLExce
ption {
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcPreparedStatement.ja
va:1646: cannot resolve symbol
[javac] symbol : class ParameterMetaData
[javac] location: class
org.hsqldb.jdbc.jdbcPreparedStatement
[javac] public ParameterMetaData
getParameterMetaData() throws SQLExcept
ion {
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcSavepoint.java:68: c
annot resolve symbol
[javac] symbol : class Savepoint
[javac] location: package sql
[javac] public class jdbcSavepoint implements
java.sql.Savepoint {
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\HsqlDateTime.java:312: setTim
eInMillis(long) has protected access in java.util.Calendar
[javac] today.setTimeInMillis(millis);
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\HsqlDateTime.java:338: setTim
eInMillis(long) has protected access in java.util.Calendar
[javac] cal.setTimeInMillis(millis);
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\HsqlDateTime.java:363: getTim
eInMillis() has protected access in java.util.Calendar
[javac] return (cal.getTimeInMillis());
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcParameterMetaData.ja
va:34: cannot resolve symbol
[javac] symbol : class ParameterMetaData
[javac] location: package sql
[javac] import java.sql.ParameterMetaData;
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcParameterMetaData.ja
va:54: cannot resolve symbol
[javac] symbol : class ParameterMetaData
[javac] location: class
org.hsqldb.jdbc.jdbcParameterMetaData
[javac] public class jdbcParameterMetaData
implements ParameterMetaData {
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcPreparedStatement.ja
va:1655: cannot resolve symbol
[javac] symbol : class ParameterMetaData
[javac] location: class
org.hsqldb.jdbc.jdbcPreparedStatement
[javac] return (ParameterMetaData) pmd;
[javac] ^
[javac] C:\Program
Files\hsqldb\src\org\hsqldb\jdbc\jdbcDatabaseMetaData.jav
a:5498: cannot resolve symbol
[javac] symbol : variable sqlStateSQL99
[javac] location: class
org.hsqldb.jdbc.jdbcDatabaseMetaData
[javac] return sqlStateSQL99;
[javac] ^
[javac] 13 errors
BUILD FAILED
C:\Program Files\hsqldb\build\build.xml:166: Compile
failed; see the compiler er
ror output for details.
Total time: 14 seconds
C:\Program Files\hsqldb\build>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

478
HyperSQL Database Engine (HSQLDB) / Bugs / #478 Integrity constraint violation when delete all rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is not possible to delete all rows from tables where a 
column references the primary id of the same table (tree 
structure stored in the table). Problems occurs with the 
latest release candidate: hsqldb_1_7_2_RC_6b
Example of the table:
create table ei_employee (
employee_id INTEGER NOT NULL IDENTITY,
first_name VARCHAR(255),
last_name VARCHAR(255),
supervisor_id INTEGER,
assistant_id INTEGER,
);
alter table ei_employee add constraint 
FK3CE203E993558552 foreign key (supervisor_id) 
references ei_employee;
alter table ei_employee add constraint 
FK3CE203E9A85FAA1C foreign key (assistant_id) 
references ei_employee;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

479
HyperSQL Database Engine (HSQLDB) / Bugs / #479 INSERT trigger does not fire
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I tried to register an insert trigger with hibernate using 
create trigger i_role before INSERT on role for each
row call 'InsertTrigger'
This trigger (which currently only consists of an
System.out.println() statement) does not fire. It has
the signature
synchronized public void fire(String arg0, String arg1,
Object[] arg2)
When I create an UPDATE or a DELETE trigger, the
trigger method fires. The InsertTrigger class exists
and can be found in the classpath.
Any help is appreciated!
Sincerely,
Sven Herschel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

480
HyperSQL Database Engine (HSQLDB) / Bugs / #480 IndexOutOfBoundsException after crash
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following error occured when tried to open a
database that was open when we turned off the machine
it was running on.
We are running on Linux Java Desktop and accessing the
database through a java application through the JDBC
connection in hsqldb.jar from RC6 (30 may).
java.lang.IndexOutOfBoundsException
at java.nio.Buffer.checkBounds(Buffer.java:454)
at java.nio.ByteBuffer.get(ByteBuffer.java:607)
at java.nio.DirectByteBuffer.get(DirectByteBuffer.java:220)
at org.hsqldb.NIOScaledRAFile.read(Unknown Source)
at org.hsqldb.DataFileCache.makeRow(Unknown Source)
at org.hsqldb.Cache.getRow(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at
org.hsqldb.DatabaseCommandInterpreter.processSet(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown
Source)
at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown
Source)
at org.hsqldb.Log.readScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Logger.openLog(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:140)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

481
HyperSQL Database Engine (HSQLDB) / Bugs / #481 connection in stored proc. doesn't know URL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a stored procedure that makes use of the 
automatically passed java.sql.Connection.
Trying to call getURL() on the MetaData results in a 
NullPointerException.
add something like
public static void testProc(Connection con) throws 
SQLException
{
System.out.println(con.getMetaData().getURL());
}
to org.hsqldb.Library
and execute call "org.hsqldb.Library.testProc"()
to reproduce the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

482
HyperSQL Database Engine (HSQLDB) / Bugs / #482 jdbcDatabaseMetaData getTables bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The problem is that when something creates a table whose name is 
NOT all upper case and then uses getTables to check for it's 
existence
getTables(null, null, <some lower case name>, null)
the result will fail even if the name is correct 
jdbcDatabaseMetaData needs to call toUpperCase on all table 
names before adding them to the SQL. 
The whole point of JDBC being that you don't have to know the 
peculiarities of a given db. 
An even better solution would be to support lower case db names 
but I'm assuming that won't happen any time soon.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

483
HyperSQL Database Engine (HSQLDB) / Bugs / #483 SELECT EXCEPT EXCEPT problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have query which contains two EXCEPTS, the example 
looks silly but it is simplification of our real world query. 
The query returns different results in hsqldb and in 
sapdb and it seems that it is because of order of 
evaluation.
CREATE table QUERY_TEST_EXCEPT (
VALUE_1 INTEGER NOT NULL
)
insert into query_test_except (value_1) values (1)
insert into query_test_except (value_1) values (2)
insert into query_test_except (value_1) values (3)
select value_1 from query_test_except
select value_1 from query_test_except where value_1 in 
(1, 2, 3) 
except select value_1 from query_test_except where 
value_1 in (1, 2)
except select value_1 from query_test_except where 
value_1 in (2, 3)
THe idea of the last select is (123) - (12) - (23) so I 
would expect empty set. Thats what I get in sapdb. In 
hsql rc6c I get 2,3. Is this a problem?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

484
HyperSQL Database Engine (HSQLDB) / Bugs / #484 dbvis shows ghost hsqldbs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is against 1.7.2Rc6c, dbvis 4.1.1 on JDK 1.4.2_03
1. Create a connection to a pre-existing embedded HSQLDB 
database.
2. Look around (open some tables)
3. Disconnect from the database.
4. On file system, in location of DB, note that the DB.lck file is still 
there. This should have been deleted by hsqldb.
5. Delete the database files (DB.lck, DB.log, DB.script, 
DB.properties)
6. Go back to DBVIS and Connect to the database.
7. Look at the previously-viewed tables. You will see the old views 
from the deleted database, rather than an empty table list.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

485
HyperSQL Database Engine (HSQLDB) / Bugs / #485 bit column does not work with "in" operator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Against hsqldb 1.7.1:
I have a column that's of type "bit":
create table FOO_DESK
(
DESK_ID char(3),
ACTIVE bit,
SIZE float,
CONNECTIONS int,
TAG int,
STATUS char,
CREATE_DATE datetime
);
the following SQL statement does not work:
select * from FOO_DESK where ACTIVE in (1)
works: where ACTIVE = 1
It also does not work with a prepared statement with
setBoolean:
select * from FOO_DESK where ACTIVE in (?)
Thanks
Moh
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

486
HyperSQL Database Engine (HSQLDB) / Bugs / #486 Error in script file line: 13 out of memory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Strange message, on DB starting i got an exception 
Caused by: java.sql.SQLException: error in script file 
line: 13 out of memory
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown 
Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection
(DriverManager.java:512)
at java.sql.DriverManager.getConnection
(DriverManager.java:171)
I use 1.7.2 (2004.05.31 RC_6b), 
02.07.2004 18:38 2 159 db.backup
02.07.2004 18:47 1 048 576 db.data
02.07.2004 18:47 486 db.properties
02.07.2004 18:40 3 319 db.script
4 File(s) 1 054 540 bytes
2 Dir(s) 18 026 844 160 bytes free
My db files are not to big, db.script looks good also, 
what happend i don't know. The same problem after 
switching to RC6d.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

487
HyperSQL Database Engine (HSQLDB) / Bugs / #487 IndexOutOfBoundsException while creating index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a database running in my application that I use
to store about 2 million records in. My table is
created with the following command:
"CREATE CACHED TABLE status_values ( deviceId INTEGER,
fieldId SMALLINT, value VARCHAR(256), timestamp
INTEGER, millis SMALLINT )";
The table is created successfully, and is fully
populated with data after some time passes. After it
is done populating, I do a commit, then want to index
the table, using:
"CREATE INDEX StatusIndex ON status_values ( deviceId )"
The first time I run it, it crashes with an index out
of bounds exception ( below ). If I run it again, it
fails. If I index the table before adding records to
it, it works, but is slow. If I use a smaller dataset,
it succeeds. 
I've looked through the issues in the bug reports, and
it looks like a similiar bug was reported back in May (
well, maybe not a bug, just a dain-bramaged user ).
I'm using the default configuration for hsqldb... no
special parameters or anything. As a lark, I broke my
database in half ( each with the same tables defined in
them ). Again, the indexing fails on the first
database, but succeeds on the second. I figured it
might be a timing issue with records not being fully
written, but even blocking the code for 10 minutes
before attempting to index doesn't seem to help.
Ideas?
Exception follows:
java.lang.IndexOutOfBoundsException
at java.io.RandomAccessFile.readBytes(Native Method)
at
java.io.RandomAccessFile.read(RandomAccessFile.java:307)
at
java.io.RandomAccessFile.readFully(RandomAccessFile.java:363)
at org.hsqldb.ScaledRAFile.read(ScaledRAFile.java:130)
at
org.hsqldb.NIOScaledRAFile.read(NIOScaledRAFile.java:187)
at
org.hsqldb.DataFileCache.makeRow(DataFileCache.java:389)
at org.hsqldb.Cache.getRow(Cache.java:384)
at org.hsqldb.Table.getRow(Table.java:2950)
at org.hsqldb.DiskNode.findNode(DiskNode.java:163)
at org.hsqldb.DiskNode.getLeft(DiskNode.java:182)
at org.hsqldb.Index.child(Index.java:846)
at org.hsqldb.Index.insert(Index.java:252)
at org.hsqldb.Table.indexRow(Table.java:2994)
at org.hsqldb.Table.insert(Table.java:1804)
at org.hsqldb.Table.insertWithIdentity(Table.java:1780)
at org.hsqldb.Table.moveData(Table.java:1621)
at org.hsqldb.TableWorks.createIndex(TableWorks.java:240)
at
org.hsqldb.DatabaseCommandInterpreter.addIndexOn(DatabaseCommandInterpreter.java:602)
at
org.hsqldb.DatabaseCommandInterpreter.processCreateIndex(DatabaseCommandInterpreter.java:2594)
at
org.hsqldb.DatabaseCommandInterpreter.processCreate(DatabaseCommandInterpreter.java:494)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(DatabaseCommandInterpreter.java:291)
at
org.hsqldb.DatabaseCommandInterpreter.execute(DatabaseCommandInterpreter.java:165)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Session.java:954)
at org.hsqldb.Session.execute(Session.java:846)
at
org.hsqldb.jdbc.jdbcStatement.fetchResult(jdbcStatement.java:1559)
at
org.hsqldb.jdbc.jdbcStatement.executeQuery(jdbcStatement.java:183)
at
ilc.gui_server.database_cache.CommDatabase.runSimpleStatement(CommDatabase.java:140)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

488
HyperSQL Database Engine (HSQLDB) / Bugs / #488 java.sql.SQLException: File input/output error: d.backup
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there.
I m getting File input/output error. Right now I m 
having 4 files in my database i.e. d.backup, d.data, 
d.properties and d.script. Last time when I started my 
database it was running successfully. but when I was 
shutting it down at that time, the power goes off, and it 
got corrupted. Right now d.data file is of 0 KB. (Zero KB) 
and d.backup if of 11 MB. 'modified=yes' in d.properties 
file and 'hsqldb.cache_version=1.7.0'. To my wonder, 
d.script file is also containing d.properties file's 
statement at the beginning with one exception 
is 'modified=no' and after that it shows some non-ASCII 
characters. I think that non-ASCII character is 
converted by hsql for my CREATE table statements 
cause I can not see first 3 CREATE TABLE statements in 
d.script and after non-ASCII characters it shows rest of 
the CREATE TABLE statements.
Exception :
java.sql.SQLException: File input/output error: 
nucleus_resources/lib/data/d.bac
kup
at org.hsqldb.Trace.getError(Unknown Source)
at org.hsqldb.Trace.error(Unknown Source)
at org.hsqldb.Log.restoreBackup(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Database$Logger.openLog(Unknown 
Source)
at org.hsqldb.Database.open(Unknown Source)
continued.........
d.properties file:
#HSQL database
#Tue Jul 13 01:45:16 GMT+05:30 2004
sql.strict_fk=true
readonly=false
sql.strong_fk=true
hsqldb.version=1.7.1
version=1.7.1
hsqldb.cache_scale=14
sql.compare_in_locale=false
sql.month=true
hsqldb.log_size=200
modified=yes
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.1
hsqldb.compatible_version=1.7.0
sql.enforce_size=false
some beginning part of d.script:
#HSQL database
#Fri Jul 09 23:48:38 PDT 2004
sql.strict_fk=true
readonly=false
sql.strong_fk=true
hsqldb.version=1.7.1
version=1.7.1
hsqldb.cache_scale=14
sql.compare_in_locale=false
sql.month=true
hsqldb.log_size=200
modified=no
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.7.1
hsqldb.compatible_version=1.7.0
sql.enforce_size=false
#####JUNK CHARACTERS HERE(like verticle blocks)####
(till this point)SUBTOPIC_HASH)
CREATE CACHED TABLE FILTER(FILTER_KEY INTEGER(11) 
NOT NULL IDENTITY PRIMARY KEY,FILTER_DESC 
VARBINARY(200) NOT NULL,FILTER_HASH TINYINT 
DEFAULT '0' NOT NULL)
Please help me out to recover the data from the 
database as it contains almost 300000 records.
Thanx and Regards,
Heet Patel
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

489
HyperSQL Database Engine (HSQLDB) / Bugs / #489 cannot open database in jar when compressed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to open a database which is inside a jar file.
When the scriptformat is in regular text mode, it works 
fine, but when I set the scriptformat to compressed, the 
database cannot be opened.
java.sql.SQLException: File input/output error: 
\testdata\test.script (can't find file)
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown 
Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown 
Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown 
Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection
(DriverManager.java:512)
at java.sql.DriverManager.getConnection
(DriverManager.java:171)
at TestInJar.main(TestInJar.java:15)
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
class TestInJar
{
public static void main(String a[])
{
String
dbUrl="jdbc:hsqldb:res:/testdata/test";
try {
Class.forName
("org.hsqldb.jdbcDriver");
Connection conn=DriverManager.getConnection
(dbUrl,"sa", "");
Statement stmt=conn.createStatement();
ResultSet rs=stmt.executeQuery("select col1 from 
dummy");
while (rs.next())
{
System.out.println(rs.getObject(1));
}
rs.close();
stmt.close();
conn.close();
} catch (Exception e) {
e.printStackTrace();
System.exit(1);
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

490
HyperSQL Database Engine (HSQLDB) / Bugs / #490 setFetchSize
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, my email is fulvio.biondi@ingeniumtech.it.
I'm waiting for registration confirmation but, in the
meantime
I wish to submit a small problem with the 1.7.2 rev.
Regards
Fulvio
The setFetchSize() method throws NO_DATA_EXCEPTION.
I believe the fix should be :
public void setFetchSize(int rows) throws SQLException {
/*
* FBI, cannot check for data availability.
* at this time no data are present,
* and calling this method just produce
* NO_DATA_IS_AVAILABLE 
* checkAvailable();
* end
*/
if (rows < 0
|| (sqlStatement.maxRows != 0
&& rows > sqlStatement.maxRows)) {
throw
jdbcUtil.sqlException(Trace.INVALID_JDBC_ARGUMENT);
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

491
HyperSQL Database Engine (HSQLDB) / Bugs / #491 Sub-select in WHERE clause of DELETE broke after 1.7.2RC6b
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following statement executes just fine in 1.7.2RC6b, 
but throws an exception in 1.7.2RC6d and 1.7.2 Release:
DELETE FROM 
Counter 
WHERE 
categoryID = 2 
AND 
eventID NOT IN 
(SELECT TOP 2 
eventID 
FROM 
Counter 
WHERE 
categoryID = 2 
ORDER BY 
eventCount DESC
)
The exception I get is:
Caused by: java.sql.SQLException: Unexpected token: 
2 in statement [DELETE FROM Counter WHERE 
categoryID = 2 AND eventID NOT IN (SELECT TOP 2]
at org.hsqldb.jdbc.jdbcUtil.sqlException
(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.fetchResult
(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.execute
(Unknown Source)
Here is the schema I am using:
CREATE CACHED TABLE Counter (eventID BIGINT 
IDENTITY, categoryID INTEGER NOT NULL, eventStart 
DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
eventEnd DATETIME DEFAULT CURRENT_TIMESTAMP 
NOT NULL, eventValue VARCHAR(256) NULL, eventCount 
INTEGER DEFAULT 1 NOT NULL)
JRE version is 1.4.2_05.
I'll apologize in advance for wasting your time if this 
turns out to be a "stupid user" bug.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

492
HyperSQL Database Engine (HSQLDB) / Bugs / #492 column name become uppercase
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
execute the following code :
ResultSet rs = stmt.executeQuery("select a from t");
ResultSetMetaData rsmd = rs.getMetaData();
you can get column name from rsmd ,but the column 
name bacome "A"(uppercase),not "a",is this a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

493
HyperSQL Database Engine (HSQLDB) / Bugs / #493 Unnamed constraint causes error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following queries produce a "Constrain already 
exists" error in the latest CVS:
CREATE TABLE tblJobs (
JobID int PRIMARY KEY 
);
CREATE TABLE tblTests (
TestID int PRIMARY KEY ,
JobID int NOT NULL
);
CREATE TABLE tblJobComments (
CommentID int PRIMARY KEY,
JobID int NOT NULL
);
CREATE INDEX idx_tblJobComments_JobID ON 
tblJobComments(JobID);
ALTER TABLE tblJobComments ADD FOREIGN KEY 
(JobID) REFERENCES tblJobs;
ALTER TABLE tblTests ADD FOREIGN KEY (JobID) 
REFERENCES tblJobs;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

494
HyperSQL Database Engine (HSQLDB) / Bugs / #494 hsqldb.files_readonly=true broken in final release ?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, 
just updated from 1.7.2 RC4 to the final release
(1.7.2.2) and HSQL doesn't work as I was used to.
I have a database, just defined by the two files
test.script and test.properties.
test.properties is the default properties-file, that is
generated, in addition there's the line 
hsqldb.files_readonly=true
When I now connect to the database as usual:
(jdbc:hsqldb:file:C:\$user\coding\eclipse\test\src\junit\testdb\testdbNeu)
both files test.script and test.properties are
overwritten, the line hsqldb.file_readonly vanishes.
When I insert new data they get added to the test.script.
This is not the behaviour that appeared in RC4 !
All my junit-test don't work any more, because they
always need a prepared database, when a new connection
is established, but all changes should only be done in
memory 
I checked the behaviour again with SquirrelSQL just
switching jars, not changing anything else.
In RC4 everthing worked fine, in the final Version
script and property files are changed.
Here are the files in use:
-------------------
test.properties:
#HSQL database
#Tue Jul 27 16:05:08 CEST 2004
hsqldb.cache_file_scale=1
runtime.gc_interval=0
hsqldb.first_identity=0
version=1.7.2
modified=no
hsqldb.script_format=0
sql.enforce_size=false
hsqldb.cache_size_scale=10
hsqldb.cache_scale=14
hsqldb.version=1.7.2
hsqldb.log_size=200
sql.enforce_strict_size=false
readonly=false
hsqldb.compatible_version=1.7.2
hsqldb.original_version=1.7.2
sql.compare_in_locale=false
hsqldb.nio_data_file=true
hsqldb.cache_version=1.7.0
hsqldb.files_readonly=true
------------
test.script:
CREATE TABLE JDO_SEQUENCEX(PKX SMALLINT NOT NULL
PRIMARY KEY,SEQUENCEX BIGINT)
CREATE USER SA PASSWORD "" ADMIN
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

495
HyperSQL Database Engine (HSQLDB) / Bugs / #495 CURRENT_TIMESTAMP SQL function generate a NullPointerExcepti
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version of hSQLdb is from zip file hsqldb_1_7_2_2.zip
available on sourceforge.
1) 
Executing the following create table statement in SQLTool
create table b ( dd datetime default CURRENT_TIMESTAMP );
generate a 
java.lang.NullPointerException
at org.hsqldb.lib.StringConverter.writeUTF(Unknown Source)
at
org.hsqldb.rowio.RowOutputBinary.writeString(Unknown
Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:479)
and SQLTool does not respond anymore
2)
Executing the following create table statement in SQLTool
--> create table c ( dd datetime not null );
create the table but when executing the insert statmeent:
--> insert into c values ( current_timestamp);
generate a 
java.lang.NullPointerException
at org.hsqldb.lib.StringConverter.writeUTF(Unknown Source)
at
org.hsqldb.rowio.RowOutputBinary.writeString(Unknown
Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.Result.write(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:479)
and SQLTool does not respond anymore
Thanks !
david
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

496
HyperSQL Database Engine (HSQLDB) / Bugs / #496 v.1.7.2.2: Error while creating more than 1 CACHED table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to create two CHACHED tables in your Simple 
Code Example testdb, following code:
db.query(
"CREATE CACHED TABLE sample_table ( id 
INTEGER IDENTITY, str_col VARCHAR(256), num_col 
INTEGER)");
db.query(
"CREATE CACHED TABLE sample_table2 ( id 
INTEGER IDENTITY, str_col VARCHAR(256), num_col 
INTEGER)");
generates
java.sql.SQLException: General errorresult set is closed
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown 
Source)
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown 
Source)
at org.hsqldb.jdbc.jdbcResultSetMetaData.
init(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSetMetaData.
init(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSetMetaData.
<init>(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSet.
getMetaData(Unknown Source)
at testtb.dump(testdb.java:86)
at testtb.query(testdb.java:57)
at testtb.main(testdb.java:125)
0 Ford 100
1 Toyota 200
Only table "sample_table" is created in database, 
sample_table2 code generates this exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

497
HyperSQL Database Engine (HSQLDB) / Bugs / #497 small typo error in html user guide
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Chapter 2. SQL Issues->Sequences and Identity ->Sequences
The table name for the sequence is missing an s.
( You can query the SYTEM_SEQUENCES table for the next
value that will be returned from any of the defined
sequences. The SEQUENCE_NAME column contains the name
and the NEXT_VALUE column contains the next value to be
returned.
SYTEM_SEQUENCES -> SYSTEM_SEQUENCES 
)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

498
HyperSQL Database Engine (HSQLDB) / Bugs / #498 1.7.2.2: HSQL can't read its own script files
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
to reproduce on a fresh database:
CREATE TABLE TEST(KONTO_ID TIMESTAMP);
INSERT INTO TEST VALUES ('0720-01-12 14:50:36.602198');
SHUTDOWN;
then reconnect to your database, and you'll get the
Exception:
java.sql.SQLException: error in script file line: 3
Wrong data type: Timestamp format must be yyyy-mm-dd
hh:mm:ss.fffffffff
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
Problem is, that the script file looks like this:
-------
CREATE TABLE TEST(KONTO_ID TIMESTAMP)
CREATE USER SA PASSWORD "" ADMIN
INSERT INTO TEST VALUES('720-01-12 14:50:36.602198')
--------
so the leading 0 of the timestamp is missing.
You should either be more strict when saving timestamps
or not as strict when reading them.
I know that this is a quite uncommon timestamp, but I
have a database where timestamps are used as
primary-keys thus heaving no other special meaning ...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

499
HyperSQL Database Engine (HSQLDB) / Bugs / #499 INSERT INTO SessionInfo VALUES (NULL, ?); CALL IDENTITY()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Is this a bug? I'm using 1.7.2.2 In 1.7.1 this worked.
Caused by: java.sql.SQLException: Unexpected token:
CALL in statement [INSERT INTO SessionInfo VALUES
(NULL, ?); CALL IDENTITY()]
at org.hsqldb.jdbc.jdbcUtil.throwError(Unknown
Source)
at
org.hsqldb.jdbc.jdbcPreparedStatement.<init>(Unknown
Source)
at
org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown
Source)
...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

500
HyperSQL Database Engine (HSQLDB) / Bugs / #500 Server can't start after special CREATE statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The bug is reported against the current HSQL-DB release
1.7.2.2.
Start a new database server i.e. by an windows batch
file containing:
cd ..\data
@java -classpath ../lib/hsqldb.jar org.hsqldb.Server
-database.0 abc 
The database abc is now generated.
Then connect to the database using the Database Manager
and execute the statement:
CREATE CACHED TABLE xyz
( id INTEGER DEFAULT 1 IDENTITY PRIMARY KEY,
src INTEGER
);
No error is reported. Then shutdown the database via
SHUTDOWN.
The server now shuts down with the following output:
[Server@1186fab]: [Thread[HSQLDB Server
@1186fab,5,main]]: Database [index=0db=file:abc,
alias=] did not open: org.hsqldb.HsqlException: error
in script file li
ne: 1 Unexpected token: GENERATED in statement [CREATE
CACHED TABLE XYZ(ID INTEGER DEFAULT 1 GENERATED]
[Server@1186fab]: [Thread[HSQLDB Server
@1186fab,5,main]]: run()/openDatabases():
[Server@1186fab]: Initiating shutdown sequence...
[Server@1186fab]: Shutdown sequence completed in 0 ms.
[Server@1186fab]: 2004-08-06 10:26:14.514 SHUTDOWN :
System.exit() is called next
Now the server can't be restarted via the upper windows
batch file. The error message is identical to the upper
error message thrown during the first shutdown.
I would expect:
1. If the CREATE statement is wrong, it should not be
accepted! An error should be thrown on client side.
2. Otherwise the server MUST be able to correct an
error in the database definition itself. It MUST be
possible to start the server.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

501
HyperSQL Database Engine (HSQLDB) / Bugs / #501 hsqldb.files_readonly=true dioesn't have any effect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to 1.7.2 documentation,
"
hsqldb.files_readonly false database files will not be
written to
"
I'm setting 
hsqldb.files_readonly=true 
in my default.properties (before starting the DB of course)
and observing that this has no effect.
After debugging this problem a little bit, 
I discovered that in class 
org.hsqldb.HsqlDatabaseProperties
at the biginning there in the static section there
several sets of allowed properties defined, and
files_readonly is not one of them.
So, what happenes is that inside 
org.hsqldb.HsqlDatabaseProperties.filterLoadedProperties ()
this property (along with quite a few others) gets
filtered out before seeing the light of day.
I don't really care about the property. I just want to
run the database in such a way that all the changes to
the DB are not logged to .log file and are lost when
the databse is closed. Is this possible?
Thank you,
Yuri
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

502
HyperSQL Database Engine (HSQLDB) / Bugs / #502 avg() returns integer value for integer columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Creating a table
CREATE TABLE TEST (a integer, b float)
and inserting values
INSERT INTO TEST (a, b) VALUES (1,1)
INSERT INTO TEST (a, b) VALUES (2,2)
INSERT INTO TEST (a, b) VALUES (4,4)
and then computing the average of a and b
SELECT AVG(a) as avga, AVG(b) as avgb from TEST
gives the result
avga = 2
avgb = 2.333333
avgb is correct, 
avga is returned as BIGINT therefore the correct result 
2.333333 is casted from double to integer giving 2.
Also the avg of integer-type columns should be returned 
as float-type.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

503
HyperSQL Database Engine (HSQLDB) / Bugs / #503 Concatenating strings in query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Concatenating strings in SQL-query results in output null 
IF one of the strings is null.
Ex select (STRING_DATA1 || STRING_DATA1 2) from...
if either STRING_DATA1 or STRING_DATA2 is null, the 
resulting output will be null. 
This problem didn't occur in 1.7.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

504
HyperSQL Database Engine (HSQLDB) / Bugs / #504 Temp tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you have many connections, it is possible to create temp tables 
for each session (with the same name) without any conflict.
How-ever, if you close one connection, then all of the temp tables 
are dropped for all of the sessions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

505
HyperSQL Database Engine (HSQLDB) / Bugs / #505 left outer join - bug with index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
left outer joint breaks as soon as an index is created
on a column in the where clause.
create table a (aid int, id int);
create table b (bid int, aid int);
insert into a (aid,id) values (1,1);
insert into a (aid,id) values (2,1);
insert into a (aid,id) values (3,2);
insert into a (aid,id) values (4,2);
insert into b (bid,aid) values (1,1);
insert into b (bid,aid) values (2,1);
select * from b left outer join a on b.aId = a.aId
where Id =10;
-- the query doens' return a single row (ok)
--now we create an index and run the same query again
create index idx_test on a (ID);
select * from b left outer join a on b.aId = a.aId
where Id =10;
-- this time the query erroneously returns rows !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

506
HyperSQL Database Engine (HSQLDB) / Bugs / #506 1.7.2.4 cannot read script files from 1.7.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I create a table using:
CREATE CACHED TABLE Rules
(
ruleID INT(11) IDENTITY,
ruleType CHAR(1) DEFAULT '' NOT NULL,
content VARCHAR,
dob CHAR(14) DEFAULT '' NOT NULL,
comment VARCHAR,
active BIT,
messageID bigint(20) DEFAULT '0' NOT NULL,
reviewerLoginID INTEGER DEFAULT '0' NOT NULL,
categoryID INTEGER DEFAULT '0' NOT NULL
);
In the script file, 1.7.1. renders this as
CREATE CACHED TABLE RULES(RULEID INTEGER(11) NOT 
NULL IDENTITY PRIMARY KEY,RULETYPE CHAR(1) 
DEFAULT '' NOT NULL,CONTENT LONGVARCHAR,DOB 
VARCHAR_IGNORECASE(14) DEFAULT '' NOT 
NULL,COMMENT LONGVARCHAR,ACTIVE BIT,MESSAGEID 
BIGINT(20) DEFAULT '0' NOT NULL,REVIEWERLOGINID 
INTEGER(11) DEFAULT '0' NOT NULL,CATEGORYID 
INTEGER(11) DEFAULT '0' NOT NULL)
When starting the database, 1.7.2.4 aborts with the 
following error:
11:42:49,578 ERROR [STDERR] [Server@4b2b75]: 
[Thread[HSQLDB Server @4b2b75,5,jboss]]: Database 
[index=0db=file:/redcondor/smtp.redcondor.com, alias=] 
did not open: org.hsqldb.HsqlException: error in s
cript file line: 7 Unexpected token in statement [CREATE 
CACHED TABLE RULES(RULEID INTEGER(11) NOT]
11:42:49,588 ERROR [STDERR] [Server@4b2b75]: 
[Thread[HSQLDB Server @4b2b75,5,jboss]]: run
()/openDatabases():
11:42:49,588 INFO [STDOUT] [Server@4b2b75]: 
Initiating shutdown sequence...
11:42:49,588 INFO [STDOUT] [Server@4b2b75]: 
Shutdown sequence completed in 0 ms.
It seems that older versions generate a script file with 
attributes in an order that the newer version does not 
support. This makes it impossible to upgrade.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

507
HyperSQL Database Engine (HSQLDB) / Bugs / #507 Error when using functions in ORDER BY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am testing Cayenne ORM with HSQLDB. The following
query runs fine on 1.7.1/Linux/JDK 1.4.1, but fails on
1.7.2/Mac OS X/JDK 1.4.2:
SELECT DISTINCT t0.ARTIST_NAME, t0.DATE_OF_BIRTH,
t0.ARTIST_ID, UPPER(t0.ARTIST_NAME) FROM ARTIST t0
ORDER BY UPPER(t0.ARTIST_NAME) DESC
Stack trace:
java.sql.SQLException: ORDER BY item should be in the
SELECT DISTINCT list: FUNCTION
org.hsqldb.Function@6baa51=[org.hsqldb.Library.ucase([COLUMN
T0.ARTIST_NAME]) returns VARCHAR] in statement [SELECT
DISTINCT t0.ARTIST_NAME, t0.DATE_OF_BIRTH,
t0.ARTIST_ID, UPPER(t0.ARTIST_NAME) FROM ARTIST t0
ORDER BY UPPER(t0.ARTIST_NAME) DESC] at
org.hsqldb.jdbc.jdbcUtil.throwError(Unknown Source) at
org.hsqldb.jdbc.jdbcPreparedStatement.<init>(Unknown
Source) at
org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown
Source) 
"ARTIST" table definition:
CREATE TABLE ARTIST(ARTIST_ID INTEGER NOT NULL PRIMARY
KEY,ARTIST_NAME CHAR(254) NOT NULL,DATE_OF_BIRTH DATE)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

508
HyperSQL Database Engine (HSQLDB) / Bugs / #508 jdk1.3+hsqldb 1.7.2.4, DatabaseManager StreamCorruptedExcept
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
we use jdk1.3.1+hsqldb1.7.2.4, if we run command :
java -cp ../lib/hsqldb.jar org.hsqldb.util.DatabaseManager
more than twice, org.hsqldb.util.DatabaseManager throws 
java.io.StreamCorruptedException
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

509
HyperSQL Database Engine (HSQLDB) / Bugs / #509 problem with ResultSet.getMetaData
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to call 
resultSet.getMetaData()
I get a NullPointerException, when working in a Library 
function (1.7.2.4).
add the following procedure to org.hsqldb.Library and 
execute call "org.hsqldb.Library.test"();to reproduce.
public static void test(Connection conn) throws 
java.sql.SQLException
{
java.sql.Statement stmt=conn.createStatement();
stmt.execute("CREATE temp TABLE MYTABLE(COL1 
INTEGER,COL2 VARCHAR);INSERT INTO MYTABLE VALUES
(1,'test1');INSERT INTO MYTABLE VALUES(2,'test2')");
java.sql.ResultSet rs = stmt.executeQuery("select * 
from MYTABLE");
java.sql.ResultSetMetaData meta=rs.getMetaData();
System.out.println(rs.getMetaData());
System.out.println(rs.getMetaData
().getColumnCount()+" columns found");
rs.close();
stmt.close();
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

510
HyperSQL Database Engine (HSQLDB) / Bugs / #510 Statement.setMaxRows(int) restricts inner queries
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Statement.setMaxRows(int) restricts the number of rows
returned by a select statement in inner queries like
'INSERT INTO test1 SELECT * FROM test2'. 
The JDBC documentation says: "Sets the limit for the
maximum number of rows that any ResultSet object can
contain to the given number. If the limit is exceeded,
the excess rows are silently dropped." Therefore only
the queries that return a ResultSet should be affected.
My release number is 1.7.2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

511
HyperSQL Database Engine (HSQLDB) / Bugs / #511 hsqldb startup problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to startup the db in code. (In a new Thread) Most 
times it starts up ok but sometimes it startsup but 
doesn't listen on the port it's supposed to listen.
Below is the code i use to start the server.
server = new Server();
server.putPropertiesFromString("");
server.setPort(portnumber);
server.setAddress(hostname);
server.setDatabasePath0,dbDirectory+"\\"+dbNa
me);
server.setDatabaseName(0,dbName);
server.setLogWriter(null);
server.setErrWriter(null);
server.setTrace(true);
server.start();
Hope you can help me out.
Regards,
Wim Heijboer
wheijboer@triennium.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

512
HyperSQL Database Engine (HSQLDB) / Bugs / #512 HAVING missing into the documentation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HAVING works fine but doesnt appear in the 
documentation :
SELECT customerid, sum(total)
FROM invoice
GROUP BY customerid
HAVING sum(total) > 10000
ORDER BY customerid
SELECT [LIMIT n m] [DISTINCT] 
{ selectExpression | table.* | * } [, ... ] 
[INTO [CACHED|TEMP|TEXT] newTable] 
FROM tableList 
[WHERE Expression] 
[ORDER BY selectExpression [{ASC | DESC}] [, ...] ] 
[GROUP BY Expression [, ...] ] 
[UNION [ALL] selectStatement]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

513
HyperSQL Database Engine (HSQLDB) / Bugs / #513 jdk 1.4 requirement due to java.sql.Savepoint
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Has a dependency on JDK 1.4 been introduced?
specifically, the class java.sql.Savepoint is new to JDK 
1.4.
for additional details, see bullet [1] at 
http://www.oreilly.com/catalog/hibernate/errata/hibern
ate.confirmed
-markus
markuskhouri@hotmail.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

514
HyperSQL Database Engine (HSQLDB) / Bugs / #514 1.7.2.4 LEFT OUTER JOIN joins to many rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
the LEFT OUTER JOIN on a column joins also rows of the
joined table if its column is null.
Example:
create table testa (oid int, name varchar(20));
create table testb (oid int, name varchar(20), a_oid int);
insert into testa (oid, name) values(1, 'first');
insert into testa (oid, name) values(2, 'second');
insert into testa (oid, name) values(3, 'third');
insert into testa (oid, name) values(4, 'fourth');
insert into testb (oid, name, a_oid) values(21,
'first', 1);
insert into testb (oid, name, a_oid) values(22,
'second', null);
insert into testb (oid, name, a_oid) values(23,
'third', 2);
insert into testb (oid, name, a_oid) values(24,
'fourth', null);
insert into testb (oid, name, a_oid) values(25,
'fifth', 3);
insert into testb (oid, name, a_oid) values(26,
'sixth', null);
select * from testa a
LEFT OUTER JOIN testb b ON a.oid = b.a_oid
Result by 1.7.2.4:
1 first 21 first 1 
1 first 22 second <NULL> 
1 first 24 fourth <NULL> 
1 first 26 sixth <NULL> 
2 second 22 second <NULL> 
2 second 23 third 2 
2 second 24 fourth <NULL> 
2 second 26 sixth <NULL> 
3 third 22 second <NULL> 
3 third 24 fourth <NULL> 
3 third 25 fifth 3 
3 third 26 sixth <NULL> 
4 fourth 22 second <NULL> 
4 fourth 24 fourth <NULL> 
4 fourth 26 sixth <NULL> 
The correct result is:
1 first 21 first 1 
2 second 23 third 2 
3 third 25 fifth 3 
4 fourth <NULL> <NULL> <NULL>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

515
HyperSQL Database Engine (HSQLDB) / Bugs / #515 Unexpected token with "ORDER BY"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I've got a small table with 3 columns. When I use the 
command 
SELECT name FROM state ORDER BY position
I've received the error
Unexpected token in statement [SELECT name FROM 
state ORDER BY position]
If I remove the ORDER BY-part, everything works fine.
Here's the create-command:
CREATE TABLE state (id BIGINT IDENTITY, name 
VARCHAR(255), position INTEGER)
At the moment, there is only one row in this table.
Michael
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

516
HyperSQL Database Engine (HSQLDB) / Bugs / #516 NullPointerException after restarting of HSQLDB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After some restarting of my server which uses HSQLDB 
internally I got an error when I try to start server
Caused by: java.sql.SQLException: General error: 
java.lang.NullPointerException
at org.hsqldb.jdbc.jdbcUtil.sqlException
(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>
(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection
(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown 
Source)
at java.sql.DriverManager.getConnection
(DriverManager.java:512)
at java.sql.DriverManager.getConnection
(DriverManager.java:171)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

517
HyperSQL Database Engine (HSQLDB) / Bugs / #517 Function not supported
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi.
Following code lead to SQLException :"Function is not
supported":
............
Statement st = conn.createStatement();
st.executeUpdate("CREATE CACHED TABLE REG (" +
"playerProperties BINARY NOT NULL, " +
"playerPropertiesUnpackedLen INTEGER, " +
"serverName VARCHAR NOT NULL, " +
"slotName VARCHAR NOT NULL, " +
"playerName VARCHAR NOT NULL, " +
"gameName VARCHAR NOT NULL, " +
"gameOptions BINARY NOT NULL, " +
"gameOptionsUnpackedLen INTEGER, " +
"staticGameData BINARY, " +
"staticGameDataUnpackedLen INTEGER)");
st.executeUpdate("CHECKPOINT");
PreparedStatement pStmt =
conn.prepareStatement("INSERT INTO REG 
(playerProperties, " +
"playerPropertiesUnpackedLen, serverName, slotName,
playerName, gameName, gameOptions, "
+ "gameOptionsUnpackedLen) VALUES (?, ?,
'serverName', 'slotName', 'player', 'gameName', ?, ?)");
byte arr1[] = {1, 2, 3}, arr2[] = {4, 5, 6};
pStmt.setBytes(1, arr1);
pStmt.setInt(2, 3);
pStmt.setBytes(3, arr2);
pStmt.setInt(4, 3);
pStmt.execute();
pStmt.execute("CHECKPOINT");
pStmt.close();
..............
Error stack trace:
java.sql.SQLException: This function is not supported
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcUtil.<clinit>(Unknown Source)
at
org.hsqldb.jdbc.jdbcPreparedStatement.execute(Unknown
Source) 
Btw, this code works on Hypersomic 1.7.2 alpha M release.
Test example attached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

518
HyperSQL Database Engine (HSQLDB) / Bugs / #518 connection (not really) broken - memory problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When trying to retrieve a rather large resultSet (about 
500.000) from a 1.7.2.4 database, I get a 
java.sql.SQLException: Connection is broken
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown 
Source)
at org.hsqldb.jdbcStatement.execute(Unknown Source)
(See code snippet below for reproduction)
However, the connection wasn't completely broken.
Executing another select with a small resultSet worked 
just fine.
Instead the cause of the problem was insufficient 
memory.
Assigning some more memory with -Xmx caused the 
problem to disappear. 
I did this on my SuSe Linux 9 (512MB RAM), my Windows 
XP computer with (768MB) didn't need a higher memory 
assignment. 
It took me quite a while to figure this out.
If the memory use is justfied and not the bug itself an
outOfMemory-Error or at least
java.sql.SQLException: Connection is broken - out of 
memory
would be helpful.
If you need more details - let me know.
Thanks,
Meikel
-----------------------------------
try{
Class.forName("org.hsqldb.jdbcDriver");
Connection conn = DriverManager.getConnection
("jdbc:hsqldb:bigdb","sa","");
Statement stmt=conn.createStatement();
ResultSet rs = stmt.executeQuery("select * from 
bigtable");
int i=0;
while (rs.next())
{
i++;
}
System.out.println("Action performed 
for "+i+" rows");
rs.close
();
stmt.close();
conn.close();
}
catch (Exception e)
{
e.printStackTrace();
} 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

519
HyperSQL Database Engine (HSQLDB) / Bugs / #519 1.7.2 failed to restore DB after the application crashed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi all,
I have this message in my error.log.
extra:
OS: solaris 8
JVM: sun 1.3.11 in -server mode
DB size < 160 Mb
// sv
java.lang.NegativeArraySizeException
at org.hsqldb.lib.StringConverter.readUTF(Unknown Source)
at org.hsqldb.rowio.RowInputBinary.readString(Unknown
Source)
at org.hsqldb.rowio.RowInputBinary.readChar(Unknown
Source)
at org.hsqldb.rowio.RowInputBase.readData(Unknown Source)
at org.hsqldb.CachedRow.<init>(Unknown Source)
at org.hsqldb.DataFileCache.makeRow(Unknown Source)
at org.hsqldb.Cache.getRow(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at
org.hsqldb.DatabaseCommandInterpreter.processSet(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at
org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown
Source)
at
org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown
Source)
at org.hsqldb.Log.readScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Logger.openLog(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:172)
at
com.lh.spooler.db.HSQLDBHandler._runAsServer(HSQLDBHandler.java:92)
at
com.lh.spooler.db.HSQLDBHandler.startUp(HSQLDBHandler.java:117)
at
com.lh.spooler.db.DBFactory._createNewInstance(DBFactory.java:85)
at
com.lh.spooler.db.DBFactory.getInstance(DBFactory.java:42)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

520
HyperSQL Database Engine (HSQLDB) / Bugs / #520 fails to add foreign key on quoted column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This problem shows in 1.7.2.
Create a couple of tables
CREATE TABLE FOO ('bar' INT)
CREATE TABLE FOO2 ('bar' INT)
Create a foreign key
ALTER TABLE FOO ADD FOREIGN KEY ('bar') REFERENCE 
FOO2('bar')
A message appears saying that a token is not expected.
It seems that quoted column names are not fully 
supported. I also had a problem where the column 
names in the scripts written by HSQLDB did not quote 
the column name even when the column name was a 
reserved word or case sensitive (eg 'check').
We are creating columns to represent fields with case-
sensitive names over which we have no control, so 
sticking with upper case names and avoiding key words 
is awkward.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

521
HyperSQL Database Engine (HSQLDB) / Bugs / #521 first values are used for all formula in select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
all computed columns have the same value as the first one
assuming a table tbldesc:
minval: integer
with values:
1
2
3
4
output of
select minval, minval*2, minval*3 from tbldesc:
1 2 2
2 4 4
3 6 6
4 8 8
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

522
HyperSQL Database Engine (HSQLDB) / Bugs / #522 Metadata.getColumns gets very slow after a while
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
I discovered a bug which seems not so critical but
which is critical for me...
Try this algorithm:
[code]
for 0 < i < thousands of times
perform a getColumns()
create a table Ti
drop Ti
[code]
After a while, the getColumns() call gets slower and
slower. You have a code example joined to this bug
report. Actually, it seems that the getColumns
indirectly forces the recreation of the SYSTEM_COLUMNS
table, and that this recreation is slower and slower,
just as if it was following back all actions that have
occurred on tables since we connected.
I'd really like this bug to be corrected since the only
solution for now is to relaunch my app each time to
reset everything is HSQL... or go back to version 1.7.1
which doesn't have this bug. :-(
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

523
HyperSQL Database Engine (HSQLDB) / Bugs / #523 HAVING clause doesn't work properly with particular case
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Engine doesn't return result if HAVING clause contains
expression about aggregated value and non-aggregated 
value.
this is sample SQL occurs this phoenomenon.
--begin-----------------------
create table test(v1 varchar(4),v2 varchar(4),v3 
numeric,v4 numeric);
insert into test values('abcd','efgh',10,20);
select v1,v3,max(v2),max(v4) from test 
group by v1,v3 having v1 like '%abc%' and max(v4) = 
20;
--end-----------------------
--this query returns same result -------------------
select v1,v3,max(v2),max(v4),((max(v4) = 20) and (v1
like '%abc%')) from test group by v1,v3 ;
-------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

524
HyperSQL Database Engine (HSQLDB) / Bugs / #524 jdbcUtil.notSupported is broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
whenever hsqldb wants to report a "not supported" 
condition, it throws a prefabricated exception 
instance, known as "jdbcUtil.notSupported". 
However, the stack trace reported by it is the stack 
trace when the jdbcUtil.<clinit> executed and not 
the stack trace of the call that throws the exception. 
Therefore, it is completely useless for locating the 
place of the exception. 
I'd recommend you to remove jdbcUtil.notSupported 
and replace all occurrences of 
"throw jdbcUtil.notSupported" 
throughout the code with 
"throw jdbcUtil.sqlException(Trace.error(Trace.
FUNCTION_NOT_SUPPORTED))"
so that correct stack traces are being generated.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

525
HyperSQL Database Engine (HSQLDB) / Bugs / #525 Error in reflection class name in 1.7.2.4
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In RowInputBase.java
I found a non existing class reference:
org.hsqldb.RowInputLegacy.
This should be corrected to:
org.hsqldb.rowio.RowInputLegacy.
try {
if (cachedRowType == 
RowOutputBase.CACHED_ROW_170) {
return new RowInputBinary();
} else {
Class c = Class.forName
("org.hsqldb.rowio.RowInputLegacy");
return (RowInputInterface) c.newInstance();
}
} catch (Exception e) {
throw Trace.error
(Trace.MISSING_SOFTWARE_MODULE,
Trace.DatabaseRowInput_newDatabaseRowInput);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

526
HyperSQL Database Engine (HSQLDB) / Bugs / #526 text tables not completely honoring database location
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public void test( String path )
{
Connection c = null;
try {
Class.forName("org.hsqldb.jdbcDriver").newInstance(); 
c =
DriverManager.getConnection("jdbc:hsqldb:file:"+path,
"sa", "");
c.createStatement().executeUpdate( "CREATE
TEXT TABLE test( c1 integer, c2 varchar )" );
c.createStatement().executeUpdate( "SET TABLE
test SOURCE \"test.csv\" " );
c.createStatement().executeUpdate( "INSERT
INTO test VALUES( 1, 'Hello' )" );
}
catch( Exception e )
{
e.printStackTrace();
return;
} 
finally
{
if( c != null )
c.close();
}
}
public void runTests()
{
test( "/tmp/foo" );
test( "/tmp/bar/" );
}
This test creates two databases, one in /tmp named foo,
the other in /tmp/bar/ with no extra naming information.
Database files for the second test appear as
/tmp/bar/.properties, etc...
The second test should create the test.csv file as
/tmp/bar/test.csv, but it creates the table as
/tmp/test.csv. This confilcts with the schema created
in /tmp named foo, which also has a test.csv file.
Discovered in 1.7.2.7
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

527
HyperSQL Database Engine (HSQLDB) / Bugs / #527 TOP does not work with UNION
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The TOP selection in a select statement does not work
when connection two selects with UNION.
I am using the latest stable version 1.7.2.7.
To reproduce the bug, use the following SQL-statements:
create table top_test (v1 INT, v2 INT);
insert into top_test values (1,0);
insert into top_test values (1,1);
insert into top_test values (1,2);
insert into top_test values (2,0);
insert into top_test values (2,1);
insert into top_test values (2,2);
========= Now the statements with an error:
select TOP 1 *
from top_test
where v1 = 1
UNION
select *
from top_test
where v1 = 2;
=> Returns 6 rows, all rows with v1=1 and all rows with
v1=2; expected 4 rows
======== Addition order by
select TOP 1 *
from top_test
where v1 = 1
order by v2
UNION
select *
from top_test
where v1 = 2;
=> Unexpected token: UNION in statement [UNION] / Error
Code: -11 / State: 37000
======== TOP in 2nd select
select *
from top_test
where v1 = 1
UNION
select TOP 1 *
from top_test
where v1 = 2;
=> Unexpected token: 1 in statement [select *
from top_test
where v1 = 1
UNION
select TOP 1] / Error Code: -11 / State: 37000
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

528
HyperSQL Database Engine (HSQLDB) / Bugs / #528 select with group-by no longer works
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a select that was worknig on 2003.12.28 RC_1/1.7.2
but when I upgraded to 1.7.2.7 it reports an error.
More detail on new version: 'Oct 2004 zip named -1.7.2.7' 
aka "latest release 5 of HSQLDB 1.7.2" from readme file
The SQL:
select concat(units.UNITNAME,mainttypes.type) as Id,
units.UNITNAME, 
(units.HMINITIAL + units.timer1/3600) as totHrs,
mainttypes.TYPE, 
modelmaint.HOURS - ((units.timer1 -
IFNULL(maintrec.HRSMAINT,0)) /3600) as remainder,
units.Lastpacketts, units.ik, units.emailto from units 
inner join modelmaint on modelmaint.modelid =units.modelid 
inner join mainttypes on modelmaint.maintid =
mainttypes.ik 
left outer join maintrec on units.ik=maintrec.unitid 
group by units.UNITNAME, mainttypes.TYPE 
order by units.UNITNAME, remainder 
The error:
Not in aggregate function or group by clause: 
ADD arg1=[
COLUMN UNITS.HMINITIAL] arg2=[
DIVIDE arg1=[
COLUMN UNITS.TIMER1] arg2=[
VALUE = 3600, TYPE = INTEGER]] in statement [select
concat(units.UNITNAME,mainttypes.type) as Id,
units.UNITNAME, (units.HMINITIAL + units.timer1/3600)
as totHrs,mainttypes.TYPE, modelmaint.HOURS -
((units.timer1 - IFNULL(maintrec.HRSMAINT,0)) /3600) as
remainder,units.Lastpacketts, units.ik, units.emailto
from units inner join modelmaint on modelmaint.modelid
=units.modelid inner join mainttypes on
modelmaint.maintid = mainttypes.ik left outer join
maintrec on units.ik=maintrec.unitid group by
units.UNITNAME, mainttypes.TYPE order by
units.UNITNAME, remainder ] / Error Code: -67 / State:
37000
I do not know of another way to form the sql. It looks
valid to me. 
SUGGESTIONS? HELP!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

529
HyperSQL Database Engine (HSQLDB) / Bugs / #529 NIO IndexOutOfBoundsException thrown from NIOScaledRAFile
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not really sure how to reproduce it. But today we
got the following exception trying to connect to brand
new (all db files have been removed) database. 
About this db, it's using 1.7.2 with cached tables.
Any ideas why would this happen? 
java.lang.IndexOutOfBoundsException
at java.nio.Buffer.checkBounds(Buffer.java:454)
at java.nio.ByteBuffer.get(ByteBuffer.java:612)
at
java.nio.DirectByteBuffer.get(DirectByteBuffer.java:232)
at org.hsqldb.NIOScaledRAFile.read(Unknown Source)
at org.hsqldb.DataFileCache.makeRow(Unknown Source)
at org.hsqldb.Cache.getRow(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at org.hsqldb.Table.setIndexRoots(Unknown Source)
at
org.hsqldb.DatabaseCommandInterpreter.processSet(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at
org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown
Source)
at
org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown
Source)
at org.hsqldb.Log.readScript(Unknown Source)
at org.hsqldb.Log.open(Unknown Source)
at org.hsqldb.Logger.openLog(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

530
HyperSQL Database Engine (HSQLDB) / Bugs / #530 can't run on jdk 1.1 NoSuchMethodError java/io/File.deleteO
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi ,
I try to run the HSQL engine Version 1_7_2_[7/8] on a
zaurus with the evm JVM (JDK 1.1). 
To build the hsqldbz.jar I use ant with switchtojdk11
and jarzaurus.
If I try to run hsqldb I got this exception :
java.sql.SQLException: General error:
java.lang.NoSuchMethodError: java/io/File. deleteOnExit()V
at org.hsqldb.jdbc.jdbcUtil.sqlException
(bytecode 16)
at org.hsqldb.jdbc.jdbcConnection.<init>
(bytecode 271)
at org.hsqldb.jdbcDriver.getConnection
(bytecode 42)
at org.hsqldb.jdbcDriver.connect (bytecode 2)
at java.sql.DriverManager.getConnection
(bytecode 141)
at java.sql.DriverManager.getConnection
(bytecode 34)
at myDBTest.setUp (bytecode 135)
at myDBTest.<init> (bytecode 53)
at myDBTest.main (bytecode 6)
TestSql.setUp() error: General error:
java.lang.NoSuchMethodError: java/io/File.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

531
HyperSQL Database Engine (HSQLDB) / Bugs / #531 getTime/getDate/getTimestamp problems with Calendar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
getTime(int, Calendar) does not work.
getDate(int, Calendar) does not work.
getTimestamp(int, Calendar) ignores Calendar all together.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

532
HyperSQL Database Engine (HSQLDB) / Bugs / #532 parsing of user defined function args
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a user defined function with a String constant arg.
Example:
select decode( 'TEST','TEST', 'CORRECT', 'NOT 
CORRECT') from system_users
parsing the function args causes an IOException in
Column.convertObject(Object o, int type)
when it hits StringConverter.hexToByte(String).
If I change this to 
return (String)o;
everything seems to work as expected.
james.s.cox@gmail.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

533
HyperSQL Database Engine (HSQLDB) / Bugs / #533 conversion from Float to int
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The method Column.convertToInt(Object) is failing for
Objects of type Float.
The resulting problem can be experienced with this
sample code :
Statement stm = aConnection.createStatement();
stm.executeUpdate("create table test (id int)");
PreparedStatement ps = aConnection
.prepareStatement("insert into test
(id) values (?)");
ps.setObject(1, new Float(0), Types.INTEGER);
ps.execute();
Results in :
java.sql.SQLException: Type Conversion not supported
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

534
HyperSQL Database Engine (HSQLDB) / Bugs / #534 curdate trailing space
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
curdate() seems to be returning a string with a trailing 
space.
This doesn't return any rows
select sdate , curdate() from mytable where sdate = 
curdate()
Whereas this does:
select sdate , curdate() from mytable where sdate = 
rtrim(curdate()) 
sdate was created as follows:
java.sql.Date jDate ;
jDate = java.sql.Date.valueOf(my_Year+"-
"+my_StartMonth+"-"+my_StartMonthDay);
The result looks okay e.g. "2004-11-30"
I'm using version 1.7.1 but I've not seen this mentioned 
in the change log as a fix.
email address alan@terapin.f9.co.uk
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

535
HyperSQL Database Engine (HSQLDB) / Bugs / #535 Nullable column rendered non nullable by check constraints
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
-- num_code is rendered non nullable by the check 
constraint applied to table KEN
DROP TABLE KEN IF EXISTS;
CREATE TABLE KEN (
ken_id numeric(18) NOT NULL,
num_code char(1) NULL,
word_code char(5) NOT NULL,
CHECK (num_code IN 
('1', '2', '3', '4', '5')),
CHECK (word_code IN 
('ONE', 'TWO', 'THREE', 'FOUR', 'FIVE')),
PRIMARY KEY (ken_id)
);
--Works
INSERT INTO KEN VALUES (101, '1', 'ONE');
INSERT INTO KEN (KEN_ID, NUM_CODE, WORD_CODE) 
VALUES (102, '2', 'TWO');
--fails
--INSERT INTO KEN (KEN_ID, WORD_CODE) VALUES 
(103, 'THREE');
--INSERT INTO KEN (KEN_ID, NUM_CODE, WORD_CODE) 
VALUES (104, null, 'FOUR');
--INSERT INTO KEN VALUES (105, null, 'FIVE');
SELECT * FROM KEN;
--Ken Sweeney
--Lockheed Martin
--kennneth.f.sweeney~at~lmco.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

536
HyperSQL Database Engine (HSQLDB) / Bugs / #536 java.lang.IllegalMonitorStateException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
/home/federico/Eclipse Projects/Java Corporate PostOffice
Java Corporate Post Office is starting...
java.lang.IllegalMonitorStateException
at java.lang.Object.wait(Native Method)
at org.hsqldb.Server.start(Server.java:1260)
at
org.jcpo.JavaCorporatePostOffice.begin(JavaCorporatePostOffice.java:161)
at
org.jcpo.JavaCorporatePostOffice.main(JavaCorporatePostOffice.java:367)
Exception in thread "main"
java.lang.IllegalMonitorStateException
at java.lang.Object.wait(Native Method)
at org.hsqldb.Server.start(Server.java:1260)
at
org.jcpo.JavaCorporatePostOffice.begin(JavaCorporatePostOffice.java:161)
at
org.jcpo.JavaCorporatePostOffice.main(JavaCorporatePostOffice.java:367)
I developed a class that extends TimerTask. This class
has a "begin()" method that initialize an internal
hsqldb instance. The code can be found here
http://cvs.sourceforge.net/viewcvs.py/nlmsh/jcpo/org/jcpo/JavaCorporatePostOffice.java?rev=1.5&view=markup
This code uses a server instance of hsqldb, so I have
my personal database and tables structure and data is
saved on filesystem
When starting the application, I have to create the
empty db structure, BUT, with version 1.7.3 (and even
1.7.2.9) i receive the following error:
/home/federico/Eclipse Projects/Java Corporate PostOffice
Java Corporate Post Office is starting...
java.lang.IllegalMonitorStateException
at java.lang.Object.wait(Native Method)
at org.hsqldb.Server.start(Server.java:1260)
at
org.jcpo.JavaCorporatePostOffice.begin(JavaCorporatePostOffice.java:161)
at
org.jcpo.JavaCorporatePostOffice.main(JavaCorporatePostOffice.java:367)
Exception in thread "main"
java.lang.IllegalMonitorStateException
at java.lang.Object.wait(Native Method)
at org.hsqldb.Server.start(Server.java:1260)
at
org.jcpo.JavaCorporatePostOffice.begin(JavaCorporatePostOffice.java:161)
at
org.jcpo.JavaCorporatePostOffice.main(JavaCorporatePostOffice.java:367)
I saw the error comes from line 1260 of Server.java that is
try {
wait(100);
} catch (InterruptedException e) {}
I changed the code with
try {
Thread.sleep(100);
} catch (InterruptedException e) {}
and, at a first glance, it is working fine
Hope this helps
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

537
HyperSQL Database Engine (HSQLDB) / Bugs / #537 Error closing db.data (IOException)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am using HSQLDB embedded within JBoss 3.2.6 
(Windows 2000, JRE 1.5.0), which is, I think, 1.7.2.4.
I got a strange error while running the server:
org.jboss.mq.SpyJMSException: Could not store 
message: 4184 msg=4182 hard NOT_STORED 
PERSISTENT queue=QUEUE.tams/private/logs priority=4 
lateClone=false hashCode=32840674; - nested 
throwable: (java.sql.SQLException: File input/output 
errorerror java.io.IOException closing file - file D:\jboss-
3.2.6\server\tams\data\hypersonic\localDB.data in 
statement [INSERT INTO JMS_MESSAGES (MESSAGEID, 
DESTINATION, MESSAGEBLOB, TXID, TXOP) VALUES
(?,?,?,?,?)])
at 
org.jboss.mq.pm.jdbc2.PersistenceManager.add
(PersistenceManager.java:802)
at 
org.jboss.mq.server.PersistentQueue.addMessage
(PersistentQueue.java:38)
at org.jboss.mq.server.JMSQueue.addMessage
(JMSQueue.java:131)
at 
org.jboss.mq.server.JMSDestinationManager.addMessage
(JMSDestinationManager.java:414)
at 
org.jboss.mq.server.JMSDestinationManager.addMessage
(JMSDestinationManager.java:390)
at 
org.jboss.mq.server.TracingInterceptor.addMessage
(TracingInterceptor.java:270)
at 
org.jboss.mq.server.JMSServerInvoker.addMessage
(JMSServerInvoker.java:136)
at org.jboss.mq.il.jvm.JVMServerIL.addMessage
(JVMServerIL.java:136)
at org.jboss.mq.Connection.sendToServer
(Connection.java:1020)
at org.jboss.mq.SpySession.sendMessage
(SpySession.java:1005)
at org.jboss.mq.SpyMessageProducer.send
(SpyMessageProducer.java:265)
at org.jboss.mq.SpyMessageProducer.send
(SpyMessageProducer.java:199)
Caused by: java.sql.SQLException: File input/output 
errorerror java.io.IOException closing file - file D:\jboss-
3.2.6\server\tams\data\hypersonic\localDB.data in 
statement [INSERT INTO JMS_MESSAGES (MESSAGEID, 
DESTINATION, MESSAGEBLOB, TXID, TXOP) VALUES
(?,?,?,?,?)]
at org.hsqldb.jdbc.jdbcUtil.throwError(Unknown 
Source)
at 
org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate
(Unknown Source)
at 
org.jboss.resource.adapter.jdbc.WrappedPreparedStatem
ent.executeUpdate
(WrappedPreparedStatement.java:335)
at 
org.jboss.mq.pm.jdbc2.PersistenceManager.add
(PersistenceManager.java:840)
at 
org.jboss.mq.pm.jdbc2.PersistenceManager.add
(PersistenceManager.java:787)
... 24 more
I really do not have any idea where this error comes 
from.
Cheers,
J-F
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

538
HyperSQL Database Engine (HSQLDB) / Bugs / #538 Wrong database file version
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A database created with java 1.4 can't be accessed by 
java 1.5:
java.sql.SQLException: Wrong database file version
checked on HSQLDB 1.7.2 and 1.7.3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

539
HyperSQL Database Engine (HSQLDB) / Bugs / #539 java 1.5 compatibility
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A database created with jre 1.4 can't be open with jre 1.5
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

540
HyperSQL Database Engine (HSQLDB) / Bugs / #540 update test set id=1, id=2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is currently allowed. 
An error should be thrown, similar to Oracle:
create table test(id int)
update test set id=1, id=2
> duplicate column name
This is a low priority bug, I suggest I fix it myself.
Thomas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

541
HyperSQL Database Engine (HSQLDB) / Bugs / #541 Value for a Numeric column is not checked
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
when doing the following (extraction from the log
script) (HSQLDB version 1.7.2.4)
CREATE USER SA PASSWORD "" ADMIN
/*C1*/CONNECT USER SA
CREATE TABLE "Table1" ("ID" INTEGER NOT NULL,"d"
NUMERIC(3), PRIMARY KEY ("ID"))
It is possible to insert a value which is greater than
the allowed ones.
INSERT INTO "Table1" VALUES(1,1111)
Best regards,
Ocke
PS: For another description see
http://www.openoffice.org/issues/show_bug.cgi?id=38885
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

542
HyperSQL Database Engine (HSQLDB) / Bugs / #542 can't login as another user during DB creation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The behaviour I will describe is new to 1.7.2.9-1.7.3 -
it never happened in 1.7.1 (I didn't check all the
versions in between).
Let's create testLogin.script with the following line:
CREATE USER TEST PASSWORD "TEST" ADMIN
Then let's try to connect to this new database with url
jdbc:hsqldb:<path to folder>/testLogin
We will get the following error message while trying to
connect as user TEST (not user SA):
User not found: TEST
but files testLogin.lck.lck and testLogin.properties
will be created.
If you try to connect as TEST second time - everything
will work !!!
After some additional testing I found that if
testLogin.properties exists - database is created and
everything is ok, otherwise - we get the error message.
Workaround: precreate properties file before making new
database.
Note: I opened the same bug in tools section by error,
you can delete the duplicate there. Sorry.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

543
HyperSQL Database Engine (HSQLDB) / Bugs / #543 Uses undefined com.sun classes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From the hsqldb gump run on Kaffe:
http://brutus.apache.org/gump/kaffe/hsqldb/hsqldb/gump_work/build_hsqldb_hsqldb.html
[javac] Found 8 semantic errors compiling
"/home/gump/workspaces2/kaffe/workspace/hsqldb/src/org/hsqldb/lib/java/JavaSystem.java":
[javac] 147. 
sun.security.action.GetPropertyAction a =
[javac] ^-^
[javac] *** Semantic Error: You need to modify your
classpath, sourcepath, bootclasspath, and/or extdirs
setup. Jikes could not find package "sun" in: 
[javac] 
/usr/local/gump/kaffe/workspace/xml-xerces2/java/build/xercesImpl.jar
[javac] 
/usr/local/gump-kaffe/jre/lib/rt.jar
[javac] 
/usr/local/gump-kaffe/lib/kjc.jar
[javac] 
/usr/local/gump-kaffe/lib/gjdoc.jar
[javac] 
/home/gump/workspaces2/kaffe/workspace/hsqldb/classes
[javac] 
/usr/local/gump/kaffe/workspace/hsqldb/classes
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant-stylebook.jar
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant-jmf.jar
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant-swing.jar
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant-trax.jar
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant-junit.jar
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant-launcher.jar
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant-nodeps.jar
[javac] 
/usr/local/gump/kaffe/workspace/ant/dist/lib/ant.jar
[javac] 
/usr/local/gump/kaffe/workspace/jakarta-servletapi-4/lib/servlet.jar
[javac] 
/home/gump/workspaces2/kaffe/workspace/hsqldb/src
[javac] 
/usr/local/gump/kaffe/workspace/xml-xerces2/java/tools/resolver.jar
[javac] .
It would be nice if we could build hsqldb with Kaffe,
but using unspecified Sun classes that are not part of
the Java APIs prevents that.
cheers,
dalibor topic
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

544
HyperSQL Database Engine (HSQLDB) / Bugs / #544 Crash evaluating a function in a subselect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Core function evaluation fails when the function is
used in a subselect. (S1000 NullPointerException)
Reproduced on 1.7.2 and 1.7.3 :
Smallest test case i could get :
---------------------------------------------
create table FOO (
TESTCOL DATE
);
select * from FOO where TESTCOL = (select * from FOO
where TESTCOL <= now())
-> 0 rows returned -> OK
insert into FOO (TESTCOL) values ('2001-01-01
00:00:00.000000000');
select * from FOO where TESTCOL = (select * from FOO
where TESTCOL <= now())
java.lang.NullPointerException
at org.hsqldb.Function.getValue(Unknown Source)
at org.hsqldb.Expression.getValue(Unknown Source)
at org.hsqldb.Expression.getValue(Unknown Source)
at org.hsqldb.Expression.test(Unknown Source)
at org.hsqldb.Expression.testCondition(Unknown Source)
at org.hsqldb.Select.buildResult(Unknown Source)
at org.hsqldb.Select.getSingleResult(Unknown Source)
at org.hsqldb.Select.getResult(Unknown Source)
at org.hsqldb.Select.getValue(Unknown Source)
at org.hsqldb.Expression.getValue(Unknown Source)
at org.hsqldb.Expression.getValue(Unknown Source)
at org.hsqldb.Expression.test(Unknown Source)
at org.hsqldb.Expression.testCondition(Unknown Source)
at org.hsqldb.TableFilter.findFirst(Unknown Source)
at org.hsqldb.Select.buildResult(Unknown Source)
at org.hsqldb.Select.getSingleResult(Unknown Source)
at org.hsqldb.Select.getResult(Unknown Source)
at
org.hsqldb.CompiledStatementExecutor.executeSelectStatement(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.executeImpl(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteCompiledNoPreChecks(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:534)
----------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

545
HyperSQL Database Engine (HSQLDB) / Bugs / #545 outofmemory error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have multithreded application and many thread use 
DB at the same time (I know that HSLQ does not 
support this.Each one have to wait).They are using SQL 
statements like 
insert into x (y) values ('a')
then I have got java.lang.outofmemory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

546
HyperSQL Database Engine (HSQLDB) / Bugs / #546 SQL error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have tried this sql statement on MYSQL and MSSQL 
it is okey.But HSLQ does not execute it.
What is the problem.
SELECT TOTAL_RAM_IPBASED.IP, 
regwmiinstalledsoftware.CBRDisplayName, 
regwmiinstalledsoftware.INSTANCENO
FROM (SELECT phy.IP, phy.maxref, SUM
(physicalmemory.CBRCapacity) AS Expr1
FROM (SELECT IP, MAX(REFINDEX) AS 
maxref, INSTANCENO AS insNo
FROM physicalmemory
GROUP BY IP, INSTANCENO) phy INNER JOIN
physicalmemory ON phy.IP = physicalmemory.IP 
AND phy.maxref = physicalmemory.REFINDEX AND
phy.insNo = physicalmemory.INSTANCENO
GROUP BY phy.IP, phy.maxref
ORDER BY phy.IP) TOTAL_RAM_IPBASED INNER 
JOIN
regwmiinstalledsoftware ON 
TOTAL_RAM_IPBASED.IP = regwmiinstalledsoftware.IP 
AND
TOTAL_RAM_IPBASED.maxref = 
regwmiinstalledsoftware.REFINDEX
WHERE (TOTAL_RAM_IPBASED.Expr1 
>268435456)
ORDER BY 
TOTAL_RAM_IPBASED.IP,regwmiinstalledsoftware.INSTAN
CENO ;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

547
HyperSQL Database Engine (HSQLDB) / Bugs / #547 NPE in subselect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When we use the following query, we get a NPE when no
results can be found in the subquery:
select f1.* from foo f1 where f1.id = (select
max(f2.id) from foo f2 where 1=2)
select f1.* from foo f1 where f1.id in (select
max(f2.id) from foo f2 where 1=2)
doesn't give a NPE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

548
HyperSQL Database Engine (HSQLDB) / Bugs / #548 complex calculation cause exception error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In an attempt to calcuate standard deviation of data.
Below is the select statement.
SELECT POWER(((AVG(power_data.power_2)) -
(POWER(AVG(data.mark), 2))), 0.5) INTO subject_data
FROM data, power_data WHERE
data.subject=power_data.subject GROUP BY subject;
The tables are defined with the data below:
create table data (id INTEGER GENERATED BY DEFAULT AS
IDENTITY, surname VARCHAR, first_name VARCHAR,
entry_score FLOAT,course VARCHAR, stream VARCHAR,
year_level INT, subject INT, semester VARCHAR, mark
INT, grade VARCHAR, supplementary VARCHAR,
special_consid VARCHAR, supp_mark INT, supp_grade
VARCHAR, points FLOAT, student_id INT, year INT,
host_study_type VARCHAR, class_code VARCHAR,
fee_paying_type VARCHAR, PRIMARY KEY (id));
SELECT subject, POWER(mark,2) power_2 INTO power_data
FROM data;
This causes the following error to occur:
java.lang.IllegalArgumentException
at
sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:585)
at org.hsqldb.Function.getValue(Unknown Source)
at
org.hsqldb.Function.getAggregatedValue(Unknown Source)
at
org.hsqldb.Expression.getAggregatedValue(Unknown Source)
at org.hsqldb.Select.buildResult(Unknown Source)
at org.hsqldb.Select.getSingleResult(Unknown
Source)
at org.hsqldb.Select.getResult(Unknown Source)
at
org.hsqldb.CompiledStatementExecutor.executeSelectStatement(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.executeImpl(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteCompiledNoPreChecks(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at org.hsqldb.Session.execute(Unknown Source)
at
org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown Source)
at
org.hsqldb.jdbc.jdbcStatement.executeUpdate(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

549
HyperSQL Database Engine (HSQLDB) / Bugs / #549 Unable to use WebRowSet.acceptChanges()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is not actually a hsqldb bug, but it's currently not 
possible to use the new JDBC RowSet's acceptChanges
() method to update the database with data from a 
RowSet.
Here's some sample code that shows the problem:
Connection c = ...;
javax.sql.rowset.WebRowSet webRowSet = new 
com.sun.rowset.WebRowSetImpl();
webRowSet.acceptChanges(c);
The last line results in this exception:
java.sql.SQLException: This function is not supported
at org.hsqldb.jdbc.jdbcUtil.sqlException
(Unknown Source)
at org.hsqldb.jdbc.jdbcUtil.<clinit>(Unknown 
Source)
at 
org.hsqldb.jdbc.jdbcConnection.setTransactionIsolation
(Unknown Source)
at 
com.sun.rowset.internal.CachedRowSetWriter.writeData
(Unknown Source)
at 
com.sun.rowset.CachedRowSetImpl.acceptChanges
(Unknown Source)
at 
com.sun.rowset.CachedRowSetImpl.acceptChanges
(Unknown Source)
at Test.main(Test.java:62)
The real problem seems to be that sun's WebRowSetImpl 
is trying to set a transaction isolation level that hsqldb 
does not support. It would be nice if something could 
be done to allow the method to continue on with a 
fallback isolation level, so that the acceptChanges 
method can be used. The way it is currently, 
CachedRowSets are extremely hampered by the fact 
that they cannot be used to update the hsqldb 
database.
Anyway, like I said, this is not a hsqldb bug, more of a 
nice to have, especially since RowSet is part of the new 
JDK1.5. (but my testing was done using JDK1.4 in 
conjunction with Sun's rowset.jar).
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

550
HyperSQL Database Engine (HSQLDB) / Bugs / #550 column not found in correlated IN subquery
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to run the attached sql script I get the
following error:
Column not found: B_ID (ANSI Code: S0022)
The same SQL runs fine on postgresql. Interestingly
enough the problem only occurs if there are rows in the
tables. When the tables are empty the query executes
without error and returns zero rows.
I have verified that the bug occurs in the 1_8_0_RC1
release candidate as well as the 1.7.3 stable version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

551
HyperSQL Database Engine (HSQLDB) / Bugs / #551 lockfile and mac osx
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have mac osx server where users home directories are
mounted by several clients. On the client, hsqldb fails
to start due to a problem in the locking system. Here
is an example with hsqldb logging turned on. Notice
that the directory is empty, and hence the database
cannot exist yet, and hence is not being accessed by
any other process. However, hsqldb fails to start saying 
org.hsqldb.HsqlException: The database is already in
use by another process:
It runs fine if I use a local disk. I presume this is
some incompatibility between the hsqldb file locking
system and apple's afp disk mounting system???
[rabbit:~/hsqldbTest] crotwell$ ls
[rabbit:~/hsqldbTest] crotwell$ java
-Dhsqldb.trace=true -cp
~/.maven/repository/hsqldb/jars/hsqldb-1.7.3.jar
org.hsqldb.Server -database.0 mydb -dbname.0
xdb[Server@922804]: [Thread[main,5,main]]:
checkRunning(false) entered
[Server@922804]: [Thread[main,5,main]]:
checkRunning(false) exited
[Server@922804]: Startup sequence initiated from main()
method
[Server@922804]: Loaded properties from
[/private/Network/Servers/roo.seis.sc.edu/Volumes/raid3/Users/crotwell/hsqldbTest/server.properties]
[Server@922804]: Initiating startup sequence...
[Server@922804]: Server socket opened successfully in
14 ms.
[Server@922804]: [Thread[HSQLDB Server
@922804,5,main]]: Database [index=0db=file:mydb,
alias=xdb] did not open: org.hsqldb.HsqlException: The
database is already in use by another process:
org.hsqldb.NIOLockFile@127e864a[file
=/private/Network/Servers/roo.seis.sc.edu/Volumes/raid3/Users/crotwell/hsqldbTest/mydb.lck,
exists=true, locked=false, valid=false, fl =null]: 
[Server@922804]: [Thread[HSQLDB Server
@922804,5,main]]: run()/openDatabases(): 
[Server@922804]: Initiating shutdown sequence...
[Server@922804]: Shutdown sequence completed in 7 ms.
[Server@922804]: 2005-01-12 14:24:53.384 SHUTDOWN :
System.exit() is called next
[rabbit:~/hsqldbTest] crotwell$
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

552
HyperSQL Database Engine (HSQLDB) / Bugs / #552 NullPointerException with recursive constraints
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
if executing
create table tree (
id int,
idparent int,
constraint pk_tree primary key (id),
constraint fk_parent foreign key (idparent)
references tree
);
you will get a NullPointerException in the Table class:
java.lang.NullPointerException
at org.hsqldb.Table.hasPrimaryKey(Unknown Source)
[...]
This happens in 1.7.3-1 and 1.7.2-11.
1.7.2-8 works. As a workaround I'm currently using:
create table tree (
id int,
idparent int,
constraint pk_tree primary key (id)
);
alter table tree add constraint fk_parent foreign key
(idparent) references tree;
Hope that helps
Zal
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

553
HyperSQL Database Engine (HSQLDB) / Bugs / #553 Was: "Not equals (<>) excludes null", is now "Bug in LIKE"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query
select * from mytab where col1 <> 'xxxx'
As expected returns all rows where col1 has text not 
equal to 'xxxx' but does not return rows where col1 is 
null. I would expect the null valued col1 rows to be 
included.
This query returns all rows correctly
select * from mytab where col1 not like 'xxxxx'
Regards
Alan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

554
HyperSQL Database Engine (HSQLDB) / Bugs / #554 SUBSTR(myfield, 0, 1) returns Java exception error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The second argument in the SUBSTR() SQL clause accepts
the offset of the string to extract, offset 1 for being
the first character. If you erroneously put 0 as the
offset, HSQL returns the cryptic error message "String
index out of range: -1". I believe this comes from a
Java exception thrown inside HSQL (it has the same text
as a common Java exception) It would be nice if the
database returned a more friendly error message.
I'm running HSQL in Server mode, and accessing it
through a JDBC interface. I'm using v1.7.3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

555
HyperSQL Database Engine (HSQLDB) / Bugs / #555 Command line parsing errors
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running HSQL from the command line throws Java
exceptions on bad arguments:
> java org.hsqldb.Server -dbname.0
Exception in thread "main"
java.lang.ArrayIndexOutOfBoundsException: 1
at
org.hsqldb.HsqlProperties.argArrayToProps(Unknown Source)
at org.hsqldb.Server.main(Unknown Source)
etc...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

556
HyperSQL Database Engine (HSQLDB) / Bugs / #556 OUTER JOIN WITH IS NULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From Open Discussion Forum, posted by rainfun@users...
I have two table a(a1,a2),b(b1,b2). 
there are three rows in table a. 
-------------------------- 
null 12 
a 22 
b 32 
-------------------------- 
there are also three rows in table b. 
-------------------------- 
null 14 
a 14 
c 15 
-------------------------- 
then i execute the following sql in hsql database: 
'select a.a1,a.a2,b.b1,b.b2 from a left outer join b on 
(a.a1=b.b1)' 
the hsql returned result is 
------------------------------------- 
a1 a2 b1 b2
------------------------------------- 
null 12 null null 
a 22 a 14 
b 32 null null 
------------------------------------- 
but the result is not what i want,what i want is(the 
different is in the first row) 
------------------------------------- 
a1 a2 b1 b2
------------------------------------- 
null 12 null 14 
a 22 a 14 
b 32 null null 
------------------------------------- 
so ,i change the sql into 'select a.A1,a.A2,b.b1,b.b2 
from a left outer join b on ((ifnull(a.a1,'')=ifnull(b.b1,''))', 
the hsql say this sql is not supported.but i execute thus 
sql in microsoft sql server ,the returned result is what i 
want. 
then , i change the sql into 'select a.A1,a.A2,b.b1,b.b2 
from a left outer join b on ((a.a1=b.b1) or (a.a1 is null 
and b.b1 isnull))' again, 
the hsql returned result is not what i want either,the 
result is
a1 a2 b1 b2
------------------------------------- 
null 12 null 14 
a 22 a 14 
------------------------------------- 
but i execute thus sql in microsoft sql server ,the 
returned result is also what i want . 
what wrong with my sql syntax? thanks in advance. 
By: Fred Toussi - fredt
RE: left outer join problem 
2004-12-20 15:27
The last query should work but HSQLDB does not 
support it yet.
By: Campbell Boucher-Burnet - boucherb
RE: left outer join problem 
2004-12-21 06:05
For a temporary workaround, how about: 
select * 
from a left outer join b on (a.a1=b.b1) 
where a.a1 is not null 
union 
select *
from a join b on (a.a1 is null and b.b1 is null) 
This seems to give the result you indicate you want: 
null....12......null....14 
a.......22......a........14 
b.......32......null.....null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

557
HyperSQL Database Engine (HSQLDB) / Bugs / #557 UPDATE fails in a no-primary-key table when any value is NUL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
bug report for hsqldb SQL 
-------------------------------------------------------
-------
-- bug: UPDATE fails in a no-primary-key table when any 
column value is NULL 
-- description: failed to UPDATE in a no-primary-key 
table when any column value is NULL 
-------------------------------------------------------
-------
DROP TABLE file
CREATE TABLE FILE(ID VARCHAR, NAME VARCHAR, 
DESCRIPTION VARCHAR, FIELD1 INT, FIELD2 VARCHAR)
select * from file
insert into file(id, name) values('14', 'dir')
update file set name = 'newdir' where id = '14'
-- NOTE: After reopening connection, there will be two 
records
--
-- set primary key can help avoiding the previous error
--
drop table file
CREATE TABLE FILE(ID VARCHAR PRIMARY KEY,NAME 
VARCHAR,DESCRIPTION VARCHAR, field1 INT, field2 
VARCHAR)
select * from file
insert into file(id, name, field1, field2) values('14', 'dir', 
99, 'nnnn')
--update file set name = 'newdir' where id = '14'
update file set name = 'olddir' where field1 = 99
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

558
HyperSQL Database Engine (HSQLDB) / Bugs / #558 select * into table no longer works
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Its gives the error:
Unexpected token: INTO in statement [into] / Error 
Code: -11
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

559
HyperSQL Database Engine (HSQLDB) / Bugs / #559 insert into texttable (select * ...) does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1) Create test tables
2) create a text table identical to customer (call it test)
3) set test source to "test.csv"
4) Execute insert into test (select * from customer)
Statement fails with a NullPointerException
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

560
HyperSQL Database Engine (HSQLDB) / Bugs / #560 select * from text table returns no rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
select * from text table returns no rows
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

561
HyperSQL Database Engine (HSQLDB) / Bugs / #561 SQL: problem on recursive constraints on single rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
tested on 1.8 RC6&7
here is the step to reproduce:
create table mytable(field1 int not null, field2 int);
alter table mytable add constraint pk primary key
(field1);
alter table mytable add constraint pk foreign key (field2) 
references mytable(field1) ;
now process the following statements:
a) insert into mytable values (0,0); --> ok
b) insert into mytable values (1,1); --> ok 
c) insert into mytable values (2,1); --> ok 
d) delete from mytable where field1= 2; --> ok 
e) delete from mytable where field1= 1; --> Integrity 
constraint violation PK table: MYTABLE
I don't know if it is truly sql99 but logicaly if you can 
process the statement b), you should be able to process 
the statement e) ?
In most of other database it is the case.
This case is quite typical for a tree structure.
The workaround I found is to have the rows (0,0) and 
update the row (1,1) to (1,0) before trying to delete it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

562
HyperSQL Database Engine (HSQLDB) / Bugs / #562 OutOfBoundException: reparsing logs after abrupt shutdown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
this bug has been found on a 1.8RC7
on a specific case I got a OutOfBoundException during 
reparsing the .log file at the restart of a server abruptly 
shutdown.
It seems that it is linked to an Update statement on a 
table with a foreign key or an index.
Step to reproduce:
- launch hsqldb in server mode.
- create a new datadase.
- connect to it and execute the following queries:
CREATE TABLE TABLE1(USER_ID INT NOT NULL PRIMARY 
KEY );
INSERT INTO TABLE1 (USER_ID) VALUES (1);
INSERT INTO TABLE1 (USER_ID) VALUES (2);
INSERT INTO TABLE1 (USER_ID) VALUES (3);
INSERT INTO TABLE1 (USER_ID) VALUES (4);
COMMIT;
CREATE TABLE TABLE2(USER_ID INT NOT NULL,
COLUMN2 SMALLINT DEFAULT 0 NOT NULL) ;
COMMIT;
ALTER TABLE TABLE2 ADD CONSTRAINT USER_FK 
FOREIGN KEY (USER_ID) REFERENCES TABLE1(USER_ID);
CREATE INDEX USER_FK ON TABLE2(USER_ID);
INSERT INTO TABLE2 (USER_ID) VALUES ( 1 ) ;
COMMIT;
INSERT INTO TABLE2 (USER_ID) VALUES ( 2 ) ;
COMMIT;
INSERT INTO TABLE2 (USER_ID) VALUES ( 3 ) ;
COMMIT;
INSERT INTO TABLE2 (USER_ID) VALUES ( 4 ) ;
COMMIT;
UPDATE TABLE2 SET COLUMN2=15 WHERE 
USER_ID=3;
COMMIT;
- do not make a checkpoint;
- shutdown the server with a ctrl-c in the server 
console.
- restart the server.
- the .log file is reparsed with all statements that have 
not been "checkpointed" 
--> I got an exception in console (I recompiled 1.8RC7 in 
debug mode, if it can help a little bit!)
java.lang.ArrayIndexOutOfBoundsException: 2
at org.hsqldb.Index.compareRows(Index.java:1097)
at org.hsqldb.Table.deleteNoCheckFromLog
(Table.java:2794)
at org.hsqldb.persist.ScriptRunner.runScript
(ScriptRunner.java:175)
at org.hsqldb.persist.Log.processLog(Log.java:603)
at org.hsqldb.persist.Log.open(Log.java:183)
at org.hsqldb.persist.Logger.openLog
(Logger.java:112)
at org.hsqldb.Database.reopen(Database.java:294)
at org.hsqldb.Database.open(Database.java:251)
at org.hsqldb.DatabaseManager.getDatabase
(DatabaseManager.java:220)
at org.hsqldb.DatabaseManager.getDatabase
(DatabaseManager.java:172)
at org.hsqldb.Server.openDatabases
(Server.java:1706)
at org.hsqldb.Server.run(Server.java:2001)
at org.hsqldb.Server.access$000(Server.java:241)
at org.hsqldb.Server$ServerThread.run
(Server.java:304)
- if you connect on table2 and do 
select * from table2;
USER_ID COLUMN2
------- -------
1 0
2 0
3 0
4 0
--> table has not been updated.
It seem that the statement which is concerned is:
UPDATE TABLE2 SET COLUMN2=15 WHERE 
USER_ID=3;
in the .log file it is correspond to 
DELETE FROM TABLE2 WHERE USER_ID=3 AND 
COLUMN2=0
INSERT INTO TABLE2 VALUES(3,15)
Note: If the index USER_FK does not exist and if the 
constraint USER_FK does not exist, I don't have the 
outofboundexception but the update statement have 
not been executed neither:
select * from table2;
USER_ID COLUMN2
------- -------
2 0
3 0
4 0
1 0
note2: If I do a checkpoint, or a clean shutdown it 
works fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

563
HyperSQL Database Engine (HSQLDB) / Bugs / #563 Please remove profanity
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a recent source scan the following profanity was 
detected.
Can you please have it removed for our internla 
compliance.
Package HSQLDB
Profanity to remove: shit
Files affected: 
TestPreparedSubQueries.java and build.xml. 
Thank you in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

564
HyperSQL Database Engine (HSQLDB) / Bugs / #564 Server putPropertiesFromFile wrong result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to setup a server by loading the properties from a 
not existing file using the 
method 'putPropertiesFromString' returns 'true'. The 
Javadoc says: "Returns:
true if the indicated file was read sucessfully, else 
false". So I think the returned result is wrong. 
Example:
import org.hsqldb.Server;
public class MyServer
{
public static void main(String[] args)
{
try
{
Server server = new Server();
System.out.println("Result of put property = " + 
server.putPropertiesFromFile("abc"));
System.out.println("dbName = " + 
server.getDatabaseName(0, true));
System.out.println("dbName = " + 
server.getDatabaseName(0, false));
System.out.println("dbPort = " + server.getPort
());
System.out.println("getState = " + 
server.getState());
}
catch (Exception e)
{
System.out.println("Server could not be 
initialized!");
}
}
}
Output:
[Server@14b7453]: [Thread[main,5,main]]: 
putPropertiesFromFile(): 
[C:\java\com\xyz\nmsdb\abc.properties]
[Server@14b7453]: [Thread[main,5,main]]: 
checkRunning(false) entered
[Server@14b7453]: [Thread[main,5,main]]: 
checkRunning(false) exited
Result of put property = true
dbName = 
dbName = null
dbPort = 9001
getState = 16
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

565
HyperSQL Database Engine (HSQLDB) / Bugs / #565 Error with CompiledStatementManager.freeStatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.vm.specification.vendor: Sun Microsystems Inc.
java.runtime.version: 1.5.0-b64
Hsqldb version: 1.7.3
Exception in thread "HSQLDB Connection @746ad0"
java.util.NoSuchElementException
at org.hsqldb.lib.IntKeyIntValueHashMap.get(Unknown Source)
at
org.hsqldb.CompiledStatementManager.freeStatement(Unknown
Source)
at org.hsqldb.Session.sqlFreeStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:595)
// source snippet
synchronized void freeStatement(int csid, int sid) {
IntKeyIntValueHashMap scsMap =
(IntKeyIntValueHashMap) sessionMap.get(sid);
// method returning exception
int count = scsMap.get(csid) - 1;
I am running a stand-alone application with Hsqldb in
server mode. I am
using Hibernate and get the above exception when
Hibernate executes a
prepared statement. It looks as though Hsqldb is
attempting to remove the
compiled statement from the Hsqldb session but throws
the execption. If I
run this same code using file access and not server
access, I do not get the
exception.
Please let me know if I can provide any further
information.
Logging Statements
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.tls=false
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.port=9001
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.trace=false
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]:
server.database.0=workspace/.hsqldb/database
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.first_identity=1
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.restart_on_shutdown=false
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.no_system_exit=true
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.silent=false
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.default_page=index.html
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.address=0.0.0.0
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.dbname.0=ipartner
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: server.root=.
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: openServerSocket() entered
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: Got server socket:
ServerSocket[addr=0.0.0.0/0.0.0.0,port=0,localport=9001]
[Server@181ed9e]: Server socket opened successfully in
0 ms.
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: openServerSocket() exiting
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: openDatabases() entered
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: Opening database:
[file:workspace/.hsqldb/database]
[Server@181ed9e]: Database [index=0, id=0,
db=file:workspace/.hsqldb/database, alias=ipartner]
opened sucessfully in 328 ms.
[Server@181ed9e]: [Thread[HSQLDB Server
@181ed9e,5,main]]: openDatabases() exiting
[Server@181ed9e]: Startup sequence completed in 359 ms.
[Server@181ed9e]: 2005-02-17 14:42:00.271 HSQLDB server
1.7.3 is online
[Server@181ed9e]: To close normally, connect and
execute SHUTDOWN SQL
[Server@181ed9e]: From command line, use [Ctrl]+[C] to
abort abruptly
....
[Server@181ed9e]: 3:HSQLCLI:GETSESSIONATTR
[Server@181ed9e]: 3:HSQLCLI:SETSESSIONATTR:AUTOCOMMIT
false CONNECTION_READONLY null
Hibernate: select consultant0_.ID as ID0_,
consultant0_.LAST_UPDATE as LAST2_0_0_,
consultant0_.COMPANY as COMPANY0_0_,
consultant0_.CONSULTANT_NO as CONSULTANT4_0_0_,
consultant0_.PASSWORD as PASSWORD0_0_,
consultant0_.CONSULT_STATUS as CONSULT6_0_0_,
consultant0_.MGMT_LEVEL as MGMT7_0_0_,
consultant0_.FIRST_NAME as FIRST8_0_0_,
consultant0_.LAST_NAME as LAST9_0_0_,
consultant0_.HOME_PHONE as HOME10_0_0_,
consultant0_.WORK_PHONE as WORK11_0_0_,
consultant0_.EMAIL_ADDRESS as EMAIL12_0_0_,
consultant0_.ADDRESS_LINE_1 as ADDRESS13_0_0_,
consultant0_.ADDRESS_LINE_2 as ADDRESS14_0_0_,
consultant0_.ADDRESS_LINE_3 as ADDRESS15_0_0_,
consultant0_.CITY as CITY0_0_, consultant0_.STATE as
STATE0_0_, consultant0_.ZIP as ZIP0_0_,
consultant0_.NON_COMM_ORDER_TAX_RATE as NON19_0_0_ from
CONSULTANT consultant0_ where consultant0_.ID=?
[Server@181ed9e]: 3:SQLCLI:SQLPREPARE select
consultant0_.ID as ID0_, consultant0_.LAST_UPDATE as
LAST2_0_0_, consultant0_.COMPANY as COMPANY0_0_,
consultant0_.CONSULTANT_NO as CONSULTANT4_0_0_,
consultant0_.PASSWORD as PASSWORD0_0_,
consultant0_.CONSULT_STATUS as CONSULT6_0_0_,
consultant0_.MGMT_LEVEL as MGMT7_0_0_,
consultant0_.FIRST_NAME as FIRST8_0_0_,
consultant0_.LAST_NAME as LAST9_0_0_,
consultant0_.HOME_PHONE as HOME10_0_0_,
consultant0_.WORK_PHONE as WORK11_0_0_,
consultant0_.EMAIL_ADDRESS as EMAIL12_0_0_,
consultant0_.ADDRESS_LINE_1 as ADDRESS13_0_0_,
consultant0_.ADDRESS_LINE_2 as ADDRESS14_0_0_,
consultant0_.ADDRESS_LINE_3 as ADDRESS15_0_0_,
consultant0_.CITY as CITY0_0_, consultant0_.STATE as
STATE0_0_, consultant0_.ZIP as ZIP0_0_,
consultant0_.NON_COMM_ORDER_TAX_RATE as NON19_0_0_ from
CONSULTANT consultant0_ where consultant0_.ID=?
[Server@181ed9e]: 3:SQLCLI:SQLEXECUTE:1
[Server@181ed9e]: 3:SQLCLI:SQLFREESTMT:1
[Server@181ed9e]: 3:SQLCLI:SQLFREESTMT:1
Exception in thread "HSQLDB Connection @ecb3f1"
java.util.NoSuchElementException
at org.hsqldb.lib.IntKeyIntValueHashMap.get(Unknown
Source)
at
org.hsqldb.CompiledStatementManager.freeStatement(Unknown
Source)
at org.hsqldb.Session.sqlFreeStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:595)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

566
HyperSQL Database Engine (HSQLDB) / Bugs / #566 create user
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Statement <create user a- password ''> is valid. you can 
log on with user a- . After you shutdown hsqld and 
restart you get an error
[Server@ca0b6]: [Thread[main,5,main]]: 
checkRunning(false) entered
[Server@ca0b6]: [Thread[main,5,main]]: 
checkRunning(false) exited
[Server@ca0b6]: Startup sequence initiated from main() 
method
[Server@ca0b6]: Loaded properties from [C:
\dvlpj\db\hsqldb\data\server.propertie
s]
[Server@ca0b6]: Initiating startup sequence...
[Server@ca0b6]: Server socket opened successfully in 
190 ms.
[Server@ca0b6]: [Thread[HSQLDB Server @ca0b6,5,
main]]: Database [index=0db=file:
imageglue, alias=] did not open: org.hsqldb.
HsqlException: error in script file
line: 158 Unexpected token -, requires PASSWORD in 
statement [CREATE USER A-]
[Server@ca0b6]: [Thread[HSQLDB Server @ca0b6,5,
main]]: run()/openDatabases():
[Server@ca0b6]: Initiating shutdown sequence...
[Server@ca0b6]: Shutdown sequence completed in 80 
ms.
[Server@ca0b6]: 2005-02-22 12:12:14.709 SHUTDOWN : 
System.exit() is called next
unexpected token - 
it should be both possible to create a user a- via jdbc 
and to restart hsqldb with that user;
or it should be both **not** possible for having a 
consistent db. The actuell behavior could cause strong 
problems after restarting, think about much users that 
are allowed to create new logins !
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

567
HyperSQL Database Engine (HSQLDB) / Bugs / #567 PDF version of User Guide truncates lines in"Example Blocks"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In PDF version, on page 4; "Example 1.1" shows:
Connection c = DriverManager.getConnection
("jdbc:hsqldb:hsql://localhost/xdb",
The Web version shows complete correct statement:
Connection c = DriverManager.getConnection
("jdbc:hsqldb:hsql://localhost/xdb", "sa", "");
This problem is not limited to this one occurance.
Truncated examples occur further down page 4 and on 
page 5.
This problem affects the usability of the PDF version.
The Web version of the user guide does not have this 
problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

568
HyperSQL Database Engine (HSQLDB) / Bugs / #568 create user !
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sorry for sending again:
I test it once again:
First of all :
create user '8' password '' 
via jdbc!!!
Look at the system user table: that user 8 is available
connect user '8' password '' works fine !
shutdown hsqldb
view script file: ...
create user 8 password '' ...
start hsqldb again:
you run into an exception
(same problem with user a- etc.)
----------
[Server@ca0b6]: [Thread[main,5,main]]: 
checkRunning(false) entered
[Server@ca0b6]: [Thread[main,5,main]]: 
checkRunning(false) exited
[Server@ca0b6]: Startup sequence initiated from main() 
method
[Server@ca0b6]: Loaded properties from [C:
\dvlpj\db\hsqldb\data\server.propertie
s]
[Server@ca0b6]: Initiating startup sequence...
[Server@ca0b6]: Server socket opened successfully in 
50 ms.
[Server@ca0b6]: [Thread[HSQLDB Server @ca0b6,5,
main]]: Database [index=0db=file:
imageglue, alias=] did not open: org.hsqldb.
HsqlException: error in script file
line: 114 Unexpected token: 8 in statement [CREATE 
USER 8]
[Server@ca0b6]: [Thread[HSQLDB Server @ca0b6,5,
main]]: run()/openDatabases():
[Server@ca0b6]: Initiating shutdown sequence...
[Server@ca0b6]: Shutdown sequence completed in 80 
ms.
[Server@ca0b6]: 2005-02-22 21:09:16.792 SHUTDOWN : 
System.exit() is called next
change manually create user 8 password"" to
create user '8' password""
in the .script file fix that problem! 
Thanx!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

569
HyperSQL Database Engine (HSQLDB) / Bugs / #569 Creating table with a foreign key in self throws NullPointer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.7.3.3 has a bug that was not in 1.7.3.0.
try:
CREATE TABLE dom (
dom_id numeric(9) NOT NULL,
name varchar(160) NOT NULL,
def_txt varchar(999) NOT NULL,
class_name varchar(16) NOT NULL,
restr_type_code varchar(2) NULL,
data_type_code varchar(4) NOT NULL,
data_len_cnt_qty numeric(4) NULL,
data_dec_cnt_qty numeric(2) NULL,
data_null_ind_code varchar(2) NOT NULL,
data_patt_descr_txt varchar(32) NULL,
meas_unit_descr_txt varchar(32) NULL,
pa_dom_id numeric(9) NULL,
stdn_lvl_code varchar(6) NOT NULL,
mod_lvl_code varchar(4) NOT NULL,
def_source_txt varchar(100) NULL,
CHECK (restr_type_code IN 
('EN', 'FU', 'RA')),
CHECK (data_type_code IN 
('CHAR', 'INT', 'REAL', 'TEXT')),
CHECK (data_null_ind_code IN 
('NA', 'NN')),
CHECK (stdn_lvl_code IN 
('MPCO', 'INAT', 'LOC', 'MIP', 'MPND', 'NAT')),
CHECK (mod_lvl_code IN 
('APPL', 'DEM', 'DICT')),
PRIMARY KEY (dom_id),
FOREIGN KEY (pa_dom_id)
REFERENCES DOM,
UNIQUE (name, dom_id)
);
java.lang.NullPointerException
at org.hsqldb.Table.hasPrimaryKey(Table.java:906)
at 
org.hsqldb.DatabaseCommandInterpreter.processCreate
FK(DatabaseCommandInterpreter.java:1332)
at 
org.hsqldb.DatabaseCommandInterpreter.processCreate
Constraints(DatabaseCommandInterpreter.java:1073)
at 
org.hsqldb.DatabaseCommandInterpreter.processCreate
Table(DatabaseCommandInterpreter.java:1223)
at 
org.hsqldb.DatabaseCommandInterpreter.processCreate
(DatabaseCommandInterpreter.java:443)
at 
org.hsqldb.DatabaseCommandInterpreter.executePart
(DatabaseCommandInterpreter.java:290)
at 
org.hsqldb.DatabaseCommandInterpreter.execute
(DatabaseCommandInterpreter.java:164)
at 
org.hsqldb.Session.sqlExecuteDirectNoPreChecks
(Session.java:952)
at org.hsqldb.Session.execute(Session.java:844)
at org.hsqldb.jdbc.jdbcStatement.fetchResult
(jdbcStatement.java:1574)
at org.hsqldb.jdbc.jdbcStatement.execute
(jdbcStatement.java:625)
at 
org.hsqldb.util.DatabaseManagerSwing$ExecuteThread.r
un(DatabaseManagerSwing.java:776)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

570
HyperSQL Database Engine (HSQLDB) / Bugs / #570 ORDER BY in SELECT for CREATE VIEWs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can´t create a view using the ORDER BY clausule in 
SELECT statement.
Is it a bug or a feature not implemented ?
See the example:
CREATE TABLE list (
Id INT,
name VARCHAR(54)
);
INSERT INTO list VALUES (1, 'Joe');
INSERT INTO list VALUES (2, 'Albert');
INSERT INTO list VALUES (3, 'Fred');
CREATE VIEW ordered AS
SELECT * FROM list ORDER BY name;
SQL Error: 
Unexpected token: ORDER in statement [ORDER] / 
Error Code: -11 / State: 37000
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

571
HyperSQL Database Engine (HSQLDB) / Bugs / #571 Race condition in Server.start() [1.8.0RC8]
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The javadoc comment of "org.hsqldb.Server.start()" 
states:
This method waits for current state to change
from SERVER_STATE_OPENNING. 
But the implementation of Server.java 1.8.0RC8 does not 
always hold that condition. The code reads:
...
serverThread = new ServerThread("HSQLDB Server 
");
serverThread.start();
while (getState() == ServerConstants.
SERVER_STATE_OPENING) {
try {
Thread.sleep(100);
} catch (InterruptedException e) {}
}
The problem is that if the newly started ServerThread is 
not (or too late) activated by the OS. Therefore it cannot 
set the state field to SERVER_STATE_OPENING and 
the while-loop is never entered. To fix the race condition, 
make sure the state equals SERVER_STATE_OPENING 
before entering the wait loop. I cut&pasted line 1973 from 
Server.run() and now it looks like:
...
setState(ServerConstants.
SERVER_STATE_OPENING); // ***
serverThread = new ServerThread("HSQLDB Server 
");
serverThread.start();
while (getState() == ServerConstants.
SERVER_STATE_OPENING) {
try {
Thread.sleep(100);
} catch (InterruptedException e) {}
}
I use this pseudo-code for testing:
Server s = new Server();
s.start():
while(s.getState() == SERVER_STATE_SHUTDOWN) {
sysout("SHUTDOWN");
}
while(s.getState() == SERVER_STATE_OPENING) {
sysout("OPENING");
}
Regards,
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

572
HyperSQL Database Engine (HSQLDB) / Bugs / #572 Issue with Sequence nextvalue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Next Value in a sequence is returning 
current Value + Number of Sequences in the database
If you have 3 sequences Seq1, Seq2 and Seq3 in the 
databse, following query returns 3 values each
select next value for Seq1 from 
SYSTEM_SEQUENCES
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

573
HyperSQL Database Engine (HSQLDB) / Bugs / #573 Don't support hibernate 3rc1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Got the following exception on the server side when
execute application that uses hibernate3rc1:
[Server@422ede]: From command line, use [Ctrl]+[C] to
abort abruptly
java.util.NoSuchElementException
at
org.hsqldb.lib.IntKeyIntValueHashMap.get(Unknown Source)
at
org.hsqldb.CompiledStatementManager.freeStatement(Unknown
Source)
at org.hsqldb.Session.sqlFreeStatement(Unknown
Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:534)
Comments:
1) The same application works fine with hibernate 2.1.8
2) Don't work with hibernate3 and hsql 1.7.2, .1.7.3
and 1.8.0rc9
It seems like hsqldb (not hibernate) error because hsql
_server_ (not jdbc driver) hung.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

574
HyperSQL Database Engine (HSQLDB) / Bugs / #574 Restart of engine fails due to spurious locking issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have noticed that despite closing all connections and
exiting a standalone database, at least one connection
still remains. 
The defect is manifested in HSQLDB 1.7.3 and HSQLDB
1.8.0 RC 8.
If you compile and run the sample code below, it will
run fine for the first time. Second time (if it is run
immediately after the first time say within 2-3 seconds
after completion of first execution) it fails everytime
citing a database locked exception!
<code>
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.SQLException;
public class TestHSQLDB { 
public static void main(String args[]) throws
Exception {
Class.forName("org.hsqldb.jdbcDriver");
Connection connection =
DriverManager.getConnection("jdbc:hsqldb:file:test",
"sa", "");
connection.close();
}
}
</code>
The only workaround I could think of was to use the
un-documented function:
DatabaseManager.closeDatabases(0);
Angsuman Chakraborty
angsuman@taragana.com
http://blog.taragana.com/
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

575
HyperSQL Database Engine (HSQLDB) / Bugs / #575 LIMIT and TOP cannot be used in subqueries
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The changelog for 1.7.0 states that "SELECT LIMIT <n> 
<m> ... is now treated as a complete SELECT 
statement and can be used anywhere a SELECT is 
used".
However LIMIT and TOP cannot be used in a subquery 
(and presumably ORDER BY cannot either):
SELECT column
FROM table
WHERE column IN (
SELECT TOP 100 column2
FROM table2
ORDER BY column2
);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

576
HyperSQL Database Engine (HSQLDB) / Bugs / #576 select ... where varcharColumn in ('abc')  case sensitive
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using 1.7.3.3.
Columns of type VARCHAR_IGNORE case can be 
selected ignoring case. This works only with 
varcharColumn = 'abc'
which matches values like ABC, abc, Abc ...
But the IN clause always reflects the case of the 
characters.
I expected to worl this too, like
varcharColumn in ( 'abc', 'def')
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

577
HyperSQL Database Engine (HSQLDB) / Bugs / #577 zip file for RC8 and RC9 does not have bin directory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am trying to package a RC9 (or RC8 at least) RPM for
hsqldb in JPackage.org devel area (we have a 1.7.3.3
already in the production area) but I encountered the
following problems:
1) The zip files for RC8 and RC9 do not have the bin
directory anymore, so no 'hsqldb' command, for instance.
2) The RC9 zip file has the compiled .class files in it
(I can just ignore it but it makes the src.rpm much
larger unecessarily)
Regards,
Fernando
fnasser@redhat.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

578
HyperSQL Database Engine (HSQLDB) / Bugs / #578 Out by one in jdbcClob.position
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found an out-by-one bug in jdbcClob.position(Clob,long).
Have commited patch to hsqldb-dev1.
Should be:
public long position(final Clob searchstr,
long start) throws SQLException {
if (searchstr == null) {
return -1;
}
final String ldata = data;
final long dlen = ldata.length();
final long sslen = searchstr.length();
start--; //***** FOIRGOT THIS *******
// This is potentially much less expensive than
materializing a large
// substring from some other vendor's CLOB. Indeed, we
should probably
// do the comparison piecewise, using an in-memory
buffer (or temp-files
// when available), if it is detected that the input
CLOB is very long.
if (start > dlen - sslen) {
return -1;
}
// by now, we know sslen and start are both <
Integer.MAX_VALUE
String s;
if (searchstr instanceof jdbcClob) {
s = ((jdbcClob) searchstr).data;
} else {
s = searchstr.getSubString(1L, (int) sslen);
}
final int pos = ldata.indexOf(s, (int) start);;
return (pos < 0) ? -1
: pos + 1;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

579
HyperSQL Database Engine (HSQLDB) / Bugs / #579 Error in Order By
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Error-case for HSQLDB-MEM
Table: Test(ID:Integer, Cost:Float)
SQL: SELECT ID, ' kr' + Cost FROM Test ORDER BY 
Cost;
In this scenario HSQLDB sorts the resultset by using a 
String comperator instead of a float-comperator. This 
error-case is also true when doing descendent ordering 
and for double types. I have not tried this scenario for a 
disk-based HSQLDB.
A possible work-around is to insert the Cost-field without 
concating strings around, before the concated cost-field
SQL: SELECT ID, Cost, ' kr' + Cost FROM Test ORDER 
BY Cost;
This select-statement yields correct results but the 
extra Cost-field is not an option for my project
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

580
HyperSQL Database Engine (HSQLDB) / Bugs / #580 Empty resultset with quote in string
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This SQL statement gives empty resultset:
select * from customer where last_name='O''Connor60' 
I would have expected 1 record in the resultset.
The following SQL statement gives 1 record in resultset:
select * from customer where last_name like '%O''Connor60%' 
Can someone explain why the first SQL statement does not 
return a record ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

581
HyperSQL Database Engine (HSQLDB) / Bugs / #581 Select doesn't contain all rows in the rusult
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Select doesn't contain all rows in the rusult. It happens for 
big tables only. Some rows are lost.
Example: Table A (id identity, name vrachar)
Table B (id identity, akey integer, x varchar)
select * from A, B
where A.id = B.akey
If A and B is big enough, the result doesn't contain some 
rows.
select * from A where id = XXX
works fine,
select * from B where akey = XXX
works fine, but
select * from A, B
where A.id = B.akey
doesn't contain the row with id = XXX...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

582
HyperSQL Database Engine (HSQLDB) / Bugs / #582 getColumnDisplaySize returns huge number for a float
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb 1.73
Here is the simplest sql:
select 1.0 from ...
then getColumnDisplaySize will return 646456995.
On the other hand, 
select 1 from ... 
then getColumnDisplaySize will return 11 which is
reasonable.
Binh
http://vmdd.tech.mylinuxisp.com/catalog/
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

583
HyperSQL Database Engine (HSQLDB) / Bugs / #583 How to start server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hai
i need a small help how to start HSQLDB server. i 
typed the following command in command prompt.I 
installed my HSQLDB 7.1.3.3.zip flle in c:\HSQLDB3 
folder i tryied this command in 
c:\HSQLDB3\hsqldb-3\lib\ java -cp ../lib/hsqldb.jar 
org.hsqldb.Server -database.0 mydb -dbname.0 xdb
i tryied as per your specification but it shows the 
following error
exception thread "main" NoClassDefFoundError.
and what is xdb please provide some elabration.
so What is wrong please give me some suggestion.
Thank you for reading this message.
withregards,
Baburao.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

584
HyperSQL Database Engine (HSQLDB) / Bugs / #584 java.sql.SQLException: socket creation error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I`m geting this error message when trying to connect to 
hsqldb engine Server.I`m starting the server and 
mannager normally but cant connect to the bank.
the commands I using are
to start the server : 
java -cp D:/Gustavo/hsqldb/lib/hsqldb.jar 
org.hsqldb.Server -database.0 mydb -dbname.0 xdb
to start mannager : 
java -cp D:/Gustavo/hsqldb/lib/hsqldb.jar 
org.hsqldb.util.DatabaseManager
This is the full erorr message --
java.sql.SQLException: socket creation error
at org.hsqldb.jdbc.jdbcUtil.sqlException
(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>
(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection
(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown 
Source)
at java.sql.DriverManager.getConnection
(Unknown Source)
at java.sql.DriverManager.getConnection
(Unknown Source)
at 
org.hsqldb.util.ConnectionDialog.createConnection
(Unknown Source)
at 
org.hsqldb.util.ConnectionDialog.actionPerformed
(Unknown Source)
at java.awt.Button.processActionEvent
(Unknown Source)
at java.awt.Button.processEvent(Unknown 
Source)
at java.awt.Component.dispatchEventImpl
(Unknown Source)
at java.awt.Component.dispatchEvent
(Unknown Source)
at java.awt.EventQueue.dispatchEvent
(Unknown Source)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarc
hy(Unknown Source)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(Unknown Source)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(Unknown Source)
at java.awt.Dialog$1.run(Unknown Source)
at java.awt.event.InvocationEvent.dispatch
(Unknown Source)
at java.awt.EventQueue.dispatchEvent
(Unknown Source)
at 
java.awt.EventDispatchThread.pumpOneEventForHierarc
hy(Unknown Source)
at 
java.awt.EventDispatchThread.pumpEventsForHierarchy
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents
(Unknown Source)
at java.awt.EventDispatchThread.run
(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

585
HyperSQL Database Engine (HSQLDB) / Bugs / #585 Error: java.sql.SQLException: Unexpected token ORDER, requir
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got a error when use hsqldb_1_7_3_3, Error:
java.sql.SQLException: Unexpected token ORDER, requires
) in statement [select tmp.* from (select * from party
order] when I execute a sql like that
select tmp.* from (select * from party order by
party_id) tmp
but if we remove order by, I could get the right result.
select tmp.* from (select * from party ) tmp
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

586
HyperSQL Database Engine (HSQLDB) / Bugs / #586 StoredProcedure - rset.getMetaData() causes Null Pointer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling getMetaData() after a query using a Connection 
passed into a stored procedure causes a null pointer 
exception.
Stack Trace:
java.lang.NullPointerException
at org.hsqldb.jdbc.jdbcResultSetMetaData.init
(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSetMetaData.init
(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSetMetaData.<init>
(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSet.getMetaData
(Unknown Source)
at com.nls.hsql.PivotTable.pivot(PivotTable.java:31)
Code Snippet:
public static int pivot(Connection conn, String query)
Statement stmt = null;
ResultSet rset = null;
ResultSetMetaData rsmd = null;
stmt = conn.createStatement();
rset = stmt.executeQuery(
"select top 1 * from (" + query + ")");
rset.next();
rsmd = rset.getMetaData();
e-mail: marc.smith@bi-uk.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

587
HyperSQL Database Engine (HSQLDB) / Bugs / #587 Too many open cursor
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The method SQLFile.processSQL doesn't close the 
create Statement.
So when it is used many times the error
"Too many open cursor" comes from Oracle.
It's easy to fix only insert the line
statement.close();
at line 1717
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

588
HyperSQL Database Engine (HSQLDB) / Bugs / #588 jdbcResultSet does not properly adjust timestamps w/calendar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In general, the internal Hypersonic handling of
Timezones is flawed since the conversion done in
Column.java initially occurs without reference to any
TimeZone supplied on entry through PreparedStatement.
This creates date objects violating the java.util.Date
contract that the enclosed fastTime field represent
milliseconds since UTC epoch.
This problem is largely corrected by adjustments
performed in jdbcResultSet, however these cannot be
completely correct since they use the supplied time as
the basis for daylight savings adjustments. As a result
daylight savings times for retrieved dates will occur
at a time offset by the current timezone, and not for
example at the local midnight.
However, a more serious problem is that Timestamp
objects are not corrected at all by jdbcResultSet, with
the result that Timestamps will be corrupted by storage
and retrieval through Hypersonic, even if the same
Calendar object is supplied to ResultSet and
PreparedStatement.
This problem(s) are exhibited by HEAD as well as
historical versions of Hypersonic stretching back at
least 2 years.
A patch is enclosed against jdbcResultSet to illustrate
a partial solution of the more serious problem. This is
against hsql 1.7.3.3 (rev 1.6 of jdbcResultSet)
although the relevant code has not changed since then.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

589
HyperSQL Database Engine (HSQLDB) / Bugs / #589 Update on TEXT TABLE do not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a update on a Text-Table is executed only the first 
characters of the old row will be replaced by linefeed.
Reason is the method remove in class 
org.hsqldb.persist.TextCache. Calling of 
r.getStorageSize() returns 0.
To fix the problem I r eplaced r.getStorageSize() with
r.getRealSize(rowOut).
public void remove(int pos, PersistentStore store) 
throws HsqlException {
CachedObject r = get(pos, store, false);
if (storeOnInsert) {
int length = r.getRealSize(rowOut)
- ScriptWriterText.BYTES_LINE_SEP.length;
Mit freundlichen Grьяen
Karl-Heinz
mailto:Karl-Heinz.Fleck@subito.de
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

590
HyperSQL Database Engine (HSQLDB) / Bugs / #590 Get java.sql.SQLException: error in script file line: 8 out 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB 1.8.0RC9:
I get the following exception when trying to connect to 
the database on startup:
java.sql.SQLException: error in script file line: 8 out of 
memory
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown 
Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown 
Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection
(DriverManager.java:512)
at java.sql.DriverManager.getConnection
(DriverManager.java:171)
The relevant line from the script is:
SET TABLE COUNTER INDEX'1528736 2556040 
1167200 1566152 3396288 138557180'
It appears that the script is trying to set the table index 
at a point in the data file that is well beyond the end of 
the data file (which is only 4,194,304 bytes long). 
This probably occurred because there was a non-clean 
shutdown.
Let me know if you want me to attach the database as 
I'll have to get permission from my customer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

591
HyperSQL Database Engine (HSQLDB) / Bugs / #591 hsql doesn't check length of text field
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsql doesn't check length of text field
the text field can save text out of the length .
it has no errors. I found the problem until I move to 
Oracle
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

592
HyperSQL Database Engine (HSQLDB) / Bugs / #592 arithmetic operation on bind variables fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The attached code attempts to add two bind variables.
Preparing the statement fails with
"java.sql.SQLException: lved parameter type : as both
operands of aritmetic operator in statement [select id
from foo where id = ? + ?]" I tried variations as well:
"select id from foo where id = (? + ?)", "select id
from foo where id = (? - ?)". The same error resulted.
This was tested on 1.8.0-rc9.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

593
HyperSQL Database Engine (HSQLDB) / Bugs / #593 non-null bind variable evaluates as null
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Executing the statement "select count(*) from test
where ? is null" with 'hello' set as the bind variable
does not return 0. A test case is attached. This was
tested on 1.8.0-rc9.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

594
HyperSQL Database Engine (HSQLDB) / Bugs / #594 bind variable in limit clause causes NPE in parser
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Calling prepareStatement with "select limit ? 0 id from
foo" causes an NPE in the parser which results in a
S1000 general error SQLException thrown to the client.
A test case (run on 1.8.0-rc9) is attached. The NPE
that is printed to the console is:
java.lang.NullPointerException
at org.hsqldb.Parser.parseLimit(Unknown Source)
at org.hsqldb.Parser.parseSelect(Unknown Source)
at
org.hsqldb.Parser.compileSelectStatement(Unknown Source)
at
org.hsqldb.Session.sqlCompileStatement(Unknown Source)
at org.hsqldb.Session.sqlPrepare(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at
org.hsqldb.jdbc.jdbcPreparedStatement.<init>(Unknown
Source)
at
org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown
Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

595
HyperSQL Database Engine (HSQLDB) / Bugs / #595 Integrity constraint violation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
simple example:
CREATE TABLE ACCOUNTS(ID INTEGER 
GENERATED BY DEFAULT AS IDENTITY(START 
WITH 0) NOT NULL PRIMARY 
KEY,PARENT_ACCOUNT INTEGER NOT 
NULL,TOP_ACCOUNT INTEGER NOT 
NULL,CONSTRAINT "$23" FOREIGN KEY
(PARENT_ACCOUNT) REFERENCES ACCOUNTS
(ID),CONSTRAINT "$89" FOREIGN KEY
(TOP_ACCOUNT) REFERENCES ACCOUNTS(ID))
Lets say there is a row such as:
1,1,1
you can not delete this row..(btw, it is working in 
PostGre)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

596
HyperSQL Database Engine (HSQLDB) / Bugs / #596 Script command vs Unicode 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello! 
I have HSQLDB 1.7.2 with Russian characters inside. I
wish to export DB via script command and a bit later
import it to another copy of DB. 
If I script DB I'll have something like INSERT INTO TTT
VALUES('ID','RU','\u0423'). If I execute such script at
the DB, I'll get value \u0423 in the column instead of
Russian letters. 
Elias Ross (genman) said that it looks like a bug and
ask me for good test/example for it (see attahced file
and 
https://sourceforge.net/forum/message.php?msg_id=3147330 )
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

597
HyperSQL Database Engine (HSQLDB) / Bugs / #597 getColumnDisplaySize different between hsqldb:file & server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The result returned by getColumnDisplaySize is different 
when connecting to the database as a file and when 
connecting through the server. The hsqldb:file results 
are correct but the hsqldb:hsql are not.
eg:
rsMeta.getColumnDisplaySize()
getColumnType hsqldb:hsql hsqldb:file
12 32766 26
3 646456995 9 9
3 646456995 3 3
1 32766 1
lightware@mailbox.co.za
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

598
HyperSQL Database Engine (HSQLDB) / Bugs / #598 null exception in script file (Windows only)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Procedure to reproduce: 
- create a test database with OpenOffice.org base 
- extract its contents with unzip 
- change to database/ directory 
- rename "data" to "oo.data", "backup" to "oo.backup", etc, 
to conform with HSQLDB naming conventions 
- start the Database Manager or the SQL Tool, connecting to 
a "jdbc:hsqldb:file:oo" resource 
- HSQLDB fails connecting when reading first line of the 
oo.script 
- that line is a CREATE CACHED TABLE (...) instruction 
- you get a
error in script file line: 1 null exception message 
- the exception comes from DatabaseManager.newSession() 
call, line 2449 of jdbcConnection.java 
Workarounds: 
- Removing the first line of the script removes the exception 
- That happens only under Windows. 
It works perfectly under Linux (!!!) 
Environment: 
- HSQLDB Release Candidate 10 for 1.8.0 
(but same with 1.7.3) 
- OpenOffice.org 2.0 beta m104 
(but same with m100) 
- SDK 1.4
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

599
HyperSQL Database Engine (HSQLDB) / Bugs / #599 SET Password => sqlException(Unknown Source)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I wanna set Password via MD5 but this causes Exception.
Looking more detailed I think it's due to some
misshandling of the input stream. e.g.
SET PASSWORD 033bd => throws exception
SET PASSWORD '033bd' => works fine.
??? why it fails in the one case, while in the other
not ???
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

600
HyperSQL Database Engine (HSQLDB) / Bugs / #600 NPE if sql.compare_in_locale=true in 1.8.0 RC 10
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Opening a DB with sql.compare_in_locale=true cause a
NPE in 
org.hsqldb.persist.HsqlDatabaseProperties.setSystemVariables().
private void setSystemVariables() {
if (isPropertyTrue(sql_compare_in_locale)) {
stringProps.remove(sql_compare_in_locale);
// database.collation is null
database.collation.setCollationAsLocale();
}
Record.gcFrequency = 
getIntegerProperty(runtime_gc_interval, 0);
}
The statement 
collation = new Collation(); 
in org.hsqldb.Database.reopen() has do be placed befor
the call of
databaseProperties.load();
to fix the bug.
Mit freundlichen Grьяen
Karl-Heinz
mailto:Karl-Heinz.Fleck@subito.de
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

601
HyperSQL Database Engine (HSQLDB) / Bugs / #601 Duplicate row after uptade in 1.8.0 RC10
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After update of a text table and closing the db with
out calling SHUTDOWN COMPACT, I get duplicate row in db.
Class.forName("org.hsqldb.jdbcDriver");
Connection c =
DriverManager.getConnection("jdbc:hsqldb:file:db/brwahl",
"sa", "");
PreparedStatement p = c.prepareStatement("update
waehler set austrittsdatum=? where name=?");
Calendar cal = GregorianCalendar.getInstance();
p.setDate(1, new Date(cal.getTimeInMillis()), cal);
p.setString(2,"Mustermann");
p.execute();
p.close();
c.commit();
// no duplicate row with SHUTDOWN COMPACT
// c.createStatement().execute("SHUTDOWN COMPACT");
c.close();
Mit freundlichen Grьяen
Karl-Heinz
mailto:Karl-Heinz.Fleck@subito.de
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

602
HyperSQL Database Engine (HSQLDB) / Bugs / #602 General error when attempting to getConnection
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got the following error:
java.sql.SQLException: General error:
java.lang.NullPointerException
at org.hsqldb.jdbc.jdbcUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:512)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at com.C12.core.db.SQLDB.<init>(SQLDB.java:36)
at com.C12.core.db.HSQLDB.<init>(HSQLDB.java:24)
at java.lang.Thread.run(Thread.java:534)
Every time I run my application i get this error. The
only way i can fix it is to delete my
database.properties file which was mysteriously empty.
then it works fine (created a new database.properties
file). But then it happens again after a while. (occurs
quite rarely).
I can only think it became empty because of a strange
sequence of events in the previous execution of my
application.
Thanks,
richardk@carbontwelve.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

603
HyperSQL Database Engine (HSQLDB) / Bugs / #603 missing ends of lines
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
PDF doc for 1.8.0 RC10
Long lines, formated using non-proportional font, are
stripped.
Screenshot from AcrobatReader 7 included.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

604
HyperSQL Database Engine (HSQLDB) / Bugs / #604 Isolation Level not supported but no error or warning
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In latest 1_8_0 RC10 version Transaction Isolation Levels 
are still not supported. Method setTransactionIsolation in 
jdbcConnection looks like ready for this feature, but method 
setIsolation (which is called by jdbcConnection) is still 
empty:
public void setIsolation(int level) throws HsqlException {} 
so, now I can set Isolation Level and hsql driver doesn't 
throw any Exception, but when I try get current level I still 
receive of course 0... 
I think, that If this functionality is not implemented yet, it 
shouldn't be possible to set any custom transaction isolation 
levels without any errors or warnings.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

605
HyperSQL Database Engine (HSQLDB) / Bugs / #605 incorrect row size in 1.8.0 RC11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello Fred,
the class TextCache generates a incorrect row size, if
the row before is empty. The size of the empty row
while be included.
Line 508 in TextCache:
int length = (int) dataFile.getFilePointer() - firstPos;
firstPos contains the start position of the empty row.
If you will use pos instead of firstPos, you get the
right size.
Mit freundlichen Grьяen
Karl-Heinz
mailto:Karl-Heinz.Fleck@subito.de
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

606
HyperSQL Database Engine (HSQLDB) / Bugs / #606 Cannot open DB inside of jar in 1.8.0 RC10
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a in-memory database which opens fine in 1.7.3.
I upgraded the DB to 1.8.0 RC10 and re-jared it. I now
get this error:
java.sql.SQLException: error in script file line: 1 The
database is in read only mode in statement [CREATE]
at org.hsqldb.jdbc.Util.sqlException(Unknown
Source)
at
org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown
Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:525)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at org.hsqldb.util.RCData.getConnection(Unknown
Source)
at org.hsqldb.util.SqlTool.main(Unknown Source)
Failed to get a connection to
jdbc:hsqldb:res:/test/mydb as sa. error in script file
line: 1 The database is in read only mode in statement
[CREATE]
The following is the url I am using to connect:
jdbc:hsqldb:res:/test/mydb
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

607
HyperSQL Database Engine (HSQLDB) / Bugs / #607 SELECT INTO does not use "hsqldb.default_table_type"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Existing default in parser switch is:
default :
select.intoType = 
Table.MEMORY_TABLE;
getname = false;
break;
However, to be consistent with 
other "hsqldb.default_table_type" handling, it likely 
should be (roughly) the equivalent of:
select.intoType = 
this.session.dbCommandInterpreter.getDefaultTableType
();
perhaps getDefaultTableType can be factored out of 
DatabaseCommandInterpreter and placed in Session.
I don't think Database is the best place to put this, 
because we may eventually want to implement session 
scope equivalents for some database properties, e.g.
ALTER SESSION SET "<property-name>" <property-
value>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

608
HyperSQL Database Engine (HSQLDB) / Bugs / #608 Incorrect calculation for var_samp and stddev_samp
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
not using (n-1) divisor:
patch follows:
Index: SetFunction.java
==========================
RCS file: /cvsroot/hsqldb/hsqldb-
dev/src/org/hsqldb/SetFunction.java,v
retrieving revision 1.14
diff -u -r1.14 SetFunction.java
--- SetFunction.java 11 Apr 2005 00:05:08 -0000
1.14
+++ SetFunction.java 12 Jun 2005 23:38:08 -0000
@@ -1,36 +1,38 @@
-/* Copyright (c) 2001-2005, The HSQL Development 
Group
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, 
with or without
- * modification, are permitted provided that the following 
conditions are met:
- *
- * Redistributions of source code must retain the above 
copyright notice, this
- * list of conditions and the following disclaimer.
- *
- * Redistributions in binary form must reproduce the 
above copyright notice,
- * this list of conditions and the following disclaimer in 
the documentation
- * and/or other materials provided with the distribution.
- *
- * Neither the name of the HSQL Development Group 
nor the names of its
- * contributors may be used to endorse or promote 
products derived from this
- * software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE 
COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, 
INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED. IN NO EVENT SHALL HSQL 
DEVELOPMENT GROUP, HSQLDB.ORG,
- * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES;
- * LOSS OF USE, DATA, OR PROFITS; OR 
BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.
- */
-
-
+/* Copyright (c) 2001-2005, The HSQL Development 
Group
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, 
with or without
+ * modification, are permitted provided that the following 
conditions are met:
+ *
+ * Redistributions of source code must retain the above 
copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * Redistributions in binary form must reproduce the 
above copyright notice,
+ * this list of conditions and the following disclaimer in 
the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * Neither the name of the HSQL Development Group 
nor the names of its
+ * contributors may be used to endorse or promote 
products derived from this
+ * software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE 
COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, 
INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY 
AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL HSQL 
DEVELOPMENT GROUP, HSQLDB.ORG,
+ * OR CONTRIBUTORS BE LIABLE FOR ANY 
DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
(INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR 
BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN 
CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) 
ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.
+ */
+
+
package org.hsqldb;
+import java.lang.Math;
+
import java.math.BigDecimal;
import java.math.BigInteger;
@@ -76,6 +78,11 @@
this.isDistinct = true;
distinctValues = new HashSet();
}
+
+ if (setType == Expression.VAR_SAMP
+ || setType == Expression.STDDEV_SAMP) {
+ this.sample = true;
+ }
}
void add(Session session, Object item) throws 
HsqlException {
@@ -399,9 +406,9 @@
// this section was orginally an independent class
private double sk;
private double vk;
- private double v;
private long n;
private boolean initialized;
+ private boolean sample;
private void addDataPoint(Number x) {
@@ -417,7 +424,6 @@
n = 1;
sk = xi;
vk = 0.0;
- v = 0.0;
initialized = true;
return;
@@ -428,17 +434,26 @@
vk += (Math.pow((sk - (double) (n - 1) * xi), 2.0) / 
(double) n)
/ (double) (n - 1);
sk += xi;
- v = vk / (double) (n);
}
private Number getVariance() {
- return initialized ? new Double(v)
- : null;
+ return initialized
+ ? sample
+ ? (n == 1)
+ ? null // NULL (not NaN) is correct in this 
case
+ : new Double(vk / (double) (n - 1))
+ : new Double(vk / (double) (n))
+ : null;
}
private Number getStdDev() {
- return initialized ? new Double(java.lang.Math.sqrt
(v))
- : null;
+ return initialized
+ ? sample
+ ? (n == 1)
+ ? null // NULL (not NaN) is correct in this 
case
+ : new Double(Math.sqrt(vk / (double) (n - 
1)))
+ : new Double(Math.sqrt(vk / (double) (n)))
+ : null;
}
// end statistics support
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

609
HyperSQL Database Engine (HSQLDB) / Bugs / #609 DATEDIFF function returns incorrect results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a simple database and get incorrect results from 
the following query - between 23:00 and midnight local 
time:
SELECT * FROM traps WHERE UPPER(display_icon) 
= UPPER('testing') AND DATEDIFF('day', 
time_received, CURTIME()) <= 1 ORDER BY 
time_received time_sent;
This normally works as expected, and returns events 
received within the current day, but between 23:00 and 
midnight it returns no results at all. "time_received" is 
defined to be a TIMESTAMP.
After midnight, the select statement works as expected 
again. I am wondering if this has something to do with 
day light savings processing or something?
HSQLDB version 1.7.3 running under JRE 1.4.2 and 
1.5.0 on Windows XP Pro (all service applied). System 
clock is running day light savings time adjusted local 
time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

610
HyperSQL Database Engine (HSQLDB) / Bugs / #610 CONVERT not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CONVERT doesn't seem to be working and throws 
an "Unexpected token in statement" error in 1.8.0-RC11.
Examples I've tried:
Select CONVERT(TestDateTime, DATE) as test from 
tblTest
Select CONVERT('1', int) as test from tblTest
Select CONVERT(int,'1') as test from tblTest
Select CONVERT('hello', varchar) as test from tblTest
I've used CAST to work around this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

611
HyperSQL Database Engine (HSQLDB) / Bugs / #611 Random ArrayIndexOutOfBoundsException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
running 1.7.3.3 built with JDK1.3 running in 1.1
Doing some load testing we have 30 clients running hsql 
database, we frequently are getting an 
ArrayIndexOutOfBoundsException in 
HsqlByteArrayOutputStream.write() method. The client 
that fails and the location of the failure varies from run to 
run but we consistenly get this same exception.
java.lang.ArrayIndexOutOfBoundsException
at 
org.hsqldb.lib.HsqlByteArrayOutputStream.write 
(bytecode 15)
at 
org.hsqldb.lib.StringConverter.unicodeToAscii (bytecode 
135)
at 
org.hsqldb.rowio.RowOutputTextLog.writeString 
(bytecode 3)
at 
org.hsqldb.scriptio.ScriptWriterText.writeLogStatement 
(bytecode 22)
at org.hsqldb.Log.writeStatement (bytecode 
46)
at org.hsqldb.Logger.writeToLog (bytecode 
13)
at 
org.hsqldb.DatabaseCommandInterpreter.execute 
(bytecode 145)
at 
org.hsqldb.Session.sqlExecuteDirectNoPreChecks 
(bytecode 12)
at org.hsqldb.Session.execute (bytecode 
229)
at org.hsqldb.jdbc.jdbcStatement.fetchResult 
(bytecode 52)
at org.hsqldb.jdbc.jdbcStatement.execute 
(bytecode 13)
at 
com.emdi.mobileclient.v3.database.orders.OrderTypeDB
.execute (bytecode 16)
This was the failure on the last test run:
java.sql.SQLException: S1000 General error 
java.lang.ArrayIndexOutOfBoundsException in 
statement [CREATE CACHED TABLE &quot;15&quot; ( 
COMPANY_ID INT , CNC_ASSIGNED_FSR_04 
VARCHAR , METER_NUMBER_DIALS VARCHAR , 
...(Large number of columns removed)
EX_COMMAND_NBR_2_RC INT , CPL_WHY15TYPE 
VARCHAR , PRIMARY KEY (ID))]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

612
HyperSQL Database Engine (HSQLDB) / Bugs / #612 SET PROPERTY "hsqldb.default_table_type" does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'SET PROPERTY "hsqldb.default_table_type" cached' 
throws and access denied error in 1.8.0-RC12
--
Access is denied: hsqldb.default_table_type in
statement [SET PROPERTY "hsqldb.default_table_type"] /
Error Code: -33 / State: S1000
--
1.8.0-RC12 documentation clearly states that
hsqldb.default_table_type can be set using SET PROPERTY:
-- cut --
The CREATE TABLE command results in a MEMORY table by
default. Setting the value "cached" for this property
will result in a cached table by default. The qualified
forms such as CREATE MEMORY TABLE or CREATE CACHED
TABLE are not affected at all by this property. (SET
PROPERTY)
-- cut --
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

613
HyperSQL Database Engine (HSQLDB) / Bugs / #613 <column> IN ('value1',...) requires trailing spaces on value
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When doing a SELECT * FROM <table> WHERE <column> IN
('value') with sql.enforce_size=true set in the
<Database>.properties file value needs the trailing
spaces up to the field size in order to match.
For example:
Table Def:
CREATE TABLE data
{
col1 char(10)
};
INSERT INTO data VALUES ('TEST');
SELECT * FROM data WHERE col1 IN ('TEST') returns:
col1
SELECT * FROM data WHERE col1 = 'TEST' returns:
col1
TEST
SELECT * FROM data WHERE col1 IN ('TEST ') returns:
col1
TEST
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

614
HyperSQL Database Engine (HSQLDB) / Bugs / #614 Invalid username's
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Fred,
I've just tried to create a user in RC12 with a name of 
TEST-USER
It didn't like the dash (-). What are the valid characters 
for a username ? What is wrong with a dash in a 
username ? If this isn't a bug but a feature where is the 
code that I could change to allow dash's in usernames ?
Cheers
Matt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

615
HyperSQL Database Engine (HSQLDB) / Bugs / #615 ResultSet.getObject() returns wrong value type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version: 1.8.0.RC12
I created a table with a column of type smallint; the
manual (section 8) says that columns of that type are
treated as short/java.lang.Short values. However, when
I call ResultSet.getObject() on that column, i got an
Integer value.
I queried the SYSTEM_COLUMNS table and found out that
integer and smallint values have the same buffer size,
so it seems that short values are handled as int
values. I think it's not the expected behavior.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

616
HyperSQL Database Engine (HSQLDB) / Bugs / #616 jdbcConnection(Session) -> jdbcConnection(SessionInteface)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in jdbcConnection
the method
public jdbcConnection(Session c)
should change interface to
public jdbcConnection(SessionInterface c)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

617
HyperSQL Database Engine (HSQLDB) / Bugs / #617 ArrayIndexOutOfBoundsException from BaseHashMap
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
stacktrace from 1.7.3.3
Our application has a lot of agents which collect data
and then send
a copy of their database to a central server where the
databases are openned and their data is copied into an
Oracle database.
After openning and closing a number of Hypersonic
databases, we
start getting this exception on every database we open.
java.lang.ArrayIndexOutOfBoundsException: 17
at
org.hsqldb.store.BaseHashMap.getLookup(Unknown Source)
at org.hsqldb.lib.HashMap.get(Unknown Source)
at
org.hsqldb.DatabaseManager.getDatabaseObject(Unknown
Source)
at
org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at
org.hsqldb.DatabaseManager.newSession(Unknown Source)
at
org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown
Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection(Unknown
Source)
at java.sql.DriverManager.getConnection(Unknown
Source)
I first noticed this problem in 1.7.2 RC 6b and thought
I should upgrade to 1.7.3.3 and test it before I
reported it.
Unfortunately, I do not have a good isolated test case
to attach to this. I have only reproduced it with our
application running for an hour after I shutdown the
Oracle database; it's openning/closing new Hypersonic
databases the whole time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

618
HyperSQL Database Engine (HSQLDB) / Bugs / #618 database grows unlimitedly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is bug scenario:
1) I have database with cached tables.
2) I delete some LARGE rows with data
3) These rows disappeared from table - but table size
is NOT reduced. As a result, now I have 100M database
without ANY data!
Database version 1.7.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

619
HyperSQL Database Engine (HSQLDB) / Bugs / #619 Significant performance optimisation in SetFunction.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In SetFunction.java, function addDataPoint, the
function uses Math.pow to square sk - (double) (n-1) * xi.
This is vastly less efficient than simply multiplying
the number by itself. the pow function is based on logs
which is why it is so inefficient.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

620
HyperSQL Database Engine (HSQLDB) / Bugs / #620 Use of variable N very inefficient in SetFunction.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In SetFunction.java, we have:
private long n;
However, every time we use n, we cast it to a double.
So we may as well have
private double n;
instead. Casting is inefficient and as function
addDataPoint will be called many times if the
statistical functions are used, this is a big weakness
in the algorithm.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

621
HyperSQL Database Engine (HSQLDB) / Bugs / #621 SOME returns null instead of false
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In SetFunction.java, line 250, the function is meant to
return false if count==0. However, line 183 returns
NULL if count==0 and is in front of this line.
Hence the SOME operator will never return false. It
returns NULL instead.
INcidentally, the expression:
return count == 0 ? Boolean.FALSE
: Boolean.TRUE;
can be optimised to:
return(count != 0)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

622
HyperSQL Database Engine (HSQLDB) / Bugs / #622 non-null doesn't work properly in TEXT tables.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using hsql 1.8.0.0, I got the following error:
error in script file line: 17 bad TEXT table source
file - line number: 1 Attempt to insert null into a
non-nullable column: column: DESCRIPTION table:
MM_OALIAS in statement [SET TABLE MM_OALIAS SOURCE
"MM_OALIAS.txt"]
MM_OALIAS.txt looks something like this:
135,11,system,mayreadallgroup,"",134
142,11,system,user.admin,"",141
276,11,system,category_main,"",275
279,11,system,category_home,"",278
...
where DESCRIPTION is the 5th collumn.
According to the documentation ,"", should be
interprted as empty string, and ,, as NULL. The error
message makes me think that it interpreted ,"", as NULL
any way, which it cannot be.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

623
HyperSQL Database Engine (HSQLDB) / Bugs / #623 Aggregate function requiring group by clause check bypassed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you use a function such as "left" on a column in a
select statement with aggregates, the checking that all
columns not aggregated are in a "group by" is bypassed
resulting in a garbage result. Here is my example:
I have this table:
sql> \d salestable
name datatype width no-nulls
--------------- --------- ----- --------
SALE_DATE TIMESTAMP 29
SALES_PRICE FLOAT 23
ITEMS_PURCHASED INTEGER 11
I have this data in it:
sql> select * from salestable;
SALE_DATE SALES_PRICE ITEMS_PURCHASED
----------------------------- ----------- ---------------
2005-07-06 00:00:00.000000000 1.0 1
2005-07-06 00:00:00.000000000 3.0 1
2005-07-07 00:00:00.000000000 null 1
2005-07-07 00:00:00.000000000 5.0 1
2005-07-07 00:00:00.000000000 10.0 1
2005-07-08 00:00:00.000000000 15.0 1
2005-07-08 00:00:00.000000000 20.0 1
Now, issuing this statement gives the correct error:
select sale_date, sum(sales_price) from salestable;
SQL Error at 'stdin' line 60:
"select sale_date, sum(sales_price) from salestable"
Not in aggregate function or group by clause:
COLUMN SALESTABLE.SALE_DATE in statement [select
sale_date, sum(sales_price) from salestable]
However, if I now wrap a "left" around the sale_date
column, no error. Garbage result:
sql> select left(sale_date,10) as
date_of_sale,sum(sales_price) from salestable;
DATE_OF_SALE SALES_PRICE
------------ -----------
2005-07-08 54.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

624
HyperSQL Database Engine (HSQLDB) / Bugs / #624 The "DISTINCT" command is redundant in the MINUS statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that the DISTINCT command is either not
implemented or is redundant, in the MINUS statement
(select ... MINUS select).
Not sure if this is a bug because some functionality is
missing, or if this is functionining as designed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

625
HyperSQL Database Engine (HSQLDB) / Bugs / #625 Error restoring attached log file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 7.1.3.3
Tonight I encountered an interesting problem with the
attached database. The attached database fails to load
all data from the *.log file when you start up the
database. No error is generated, the data is just missing.
I traced through with a debugger to find out what was
going on.
The problem seems to be when a delete statement
references a column named position. Looking through
the documentation I see position is a valid function
call so I suspect that is what has caused the problem.
Unfortunately the way the system handles this is not good:
1. It reports the eror using the Trace function. 
Unfortunately all tracing seems to be off by default.
2. It stops trying to load any more data and truncates
the log file.
The net effect of those two things is that the data is
just gone.
To get around this I'll probably have a go at renaming
that column but in the mean time I suggest the
functionality should be correct:
1. Position should be a reserved word and you shouldn't
be able to use it in a table in the first place.
2. Always log that an error has occured.
3. Stop all processing and leave the database in a
consistent state.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

626
HyperSQL Database Engine (HSQLDB) / Bugs / #626 DESC keyword is sometimes ignored
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For some queries, if a DESC keyword is supplied it is
ignored and the result set is returned in ascending
order. This phenomenon appears to be a function of how
the order-by column is referenced in the SELECT
statement. There may be other factors involved as well,
as some attempts to design a minimal example did not
exhibit the problem. I have encountered a number of
independent instances of this problem, all of which
have involved ordering on a DATETIME column.
The attached file provides an example of the problem.
For two variants of a SELECT statement the records are
correctly returned in descending order. For two other
variants, the records are incorrectly returned sorted
into ascending order.
Note that the phenomenon occurs with queries
auto-generated by Hibernate (http://www.hibernate.org/)
when operating via its HSQLDB dialect. Therefore, it is
not feasible to simply avoid the problematic way of
referencing the order-by column (unless the Hibernate
dialect is changed).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

627
HyperSQL Database Engine (HSQLDB) / Bugs / #627 Null Pointer Exception from using version 1.8.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using HSQLDB v1.8.0 in conjuction with JPOX, I receive 
this NullPointerException
java.lang.NullPointerException
at java.util.Calendar.setTime
(Calendar.java:902)
at org.hsqldb.HsqlDateTime.getTimeInMillis
(Unknown Source)
at 
org.hsqldb.jdbc.jdbcResultSet.getTimestamp(Unknown 
Source)
at 
org.jpox.store.rdbms.mapping.TimestampRDBMSMappi
ng.getTimestamp(TimestampRDBMSMapping.java:138)
at 
org.jpox.store.rdbms.mapping.TimestampRDBMSMappi
ng.getObject(TimestampRDBMSMapping.java:165)
at 
org.jpox.store.mapping.SingleFieldMapping.getObject
(SingleFieldMapping.java:227)
at 
org.jpox.store.rdbms.fieldmanager.ResultSetGetter.fetch
ObjectField(ResultSetGetter.java:87)
at 
org.jpox.state.StateManagerImpl.replacingObjectField
(StateManagerImpl.java:2272)
at 
corticoncdo.com.jdotest.Order.jdoReplaceField
(Unknown Source)
at 
corticoncdo.com.jdotest.Order.jdoReplaceFields
(Unknown Source)
at 
org.jpox.state.StateManagerImpl.replaceFields
(StateManagerImpl.java:2368)
at 
org.jpox.store.query.PersistentIDROF$1.fetchFields
(PersistentIDROF.java:114)
at org.jpox.state.StateManagerImpl.<init>
(StateManagerImpl.java:355)
at 
org.jpox.AbstractPersistenceManager.getObjectByAID
(AbstractPersistenceManager.java:2214)
at 
org.jpox.store.query.PersistentIDROF.getObjectByAID
(PersistentIDROF.java:109)
at 
org.jpox.store.query.PersistentIDROF.getObject
(PersistentIDROF.java:82)
at 
org.jpox.store.query.QueryResult.nextResultSetElement
(QueryResult.java:118)
at 
org.jpox.store.query.QueryResult$QueryResultIterator.ne
xt(QueryResult.java:190)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

628
HyperSQL Database Engine (HSQLDB) / Bugs / #628 Error using JPOX query with HSQLDB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Note this error does not occur with using the same 
query on a different database.
Here is the error message reveived:
Caused by: java.sql.SQLException: Unexpected token: 
|| in statement [SELECT 
THIS.A_ID,THIS.A_SCENARIO,THIS.A_VALUE,THIS.B
OOLEAN1,THIS.BOOLEAN2,THIS.BOOLEAN3,THIS.BO
OLEAN4,THIS.DATE1,THIS.DATE2,THIS.DECIMAL1,THI
S.DECIMAL2,THIS.DECIMAL3,THIS.DECIMAL4,THIS.D
ECIMAL5,THIS.DECIMAL6,THIS.INTEGER1,THIS.INTEG
ER2,THIS.INTEGER3,THIS.INTEGER4,THIS.INTEGER5,
THIS.INTEGER6,THIS.STRING1,THIS.STRING2,THIS.ST
RING3 FROM A THIS WHERE '1' = THIS.A_ID AND 
(THIS.STRING1 LIKE THIS.STRING2||'%' ESCAPE '\' )]
at org.hsqldb.jdbc.Util.throwError(Unknown 
Source)
at 
org.hsqldb.jdbc.jdbcPreparedStatement.<init>(Unknown 
Source)
at 
org.hsqldb.jdbc.jdbcConnection.prepareStatement
(Unknown Source)
at 
org.jpox.store.StatementText.prepareStatement
(StatementText.java:207)
at 
org.jpox.store.query.JDOQLQuery.performExecute
(JDOQLQuery.java:668)
... 43 more
And:
javax.jdo.JDODataStoreException: Error executing 
JDOQL query "SELECT 
THIS.A_ID,THIS.A_SCENARIO,THIS.A_VALUE,THIS.B
OOLEAN1,THIS.BOOLEAN2,THIS.BOOLEAN3,THIS.BO
OLEAN4,THIS.DATE1,THIS.DATE2,THIS.DECIMAL1,THI
S.DECIMAL2,THIS.DECIMAL3,THIS.DECIMAL4,THIS.D
ECIMAL5,THIS.DECIMAL6,THIS.INTEGER1,THIS.INTEG
ER2,THIS.INTEGER3,THIS.INTEGER4,THIS.INTEGER5,
THIS.INTEGER6,THIS.STRING1,THIS.STRING2,THIS.ST
RING3 FROM A THIS WHERE '1' = THIS.A_ID AND 
(THIS.STRING1 LIKE THIS.STRING2||'%' ESCAPE '\' )".
NestedThrowables:
java.sql.SQLException: Unexpected token: || in 
statement [SELECT 
THIS.A_ID,THIS.A_SCENARIO,THIS.A_VALUE,THIS.B
OOLEAN1,THIS.BOOLEAN2,THIS.BOOLEAN3,THIS.BO
OLEAN4,THIS.DATE1,THIS.DATE2,THIS.DECIMAL1,THI
S.DECIMAL2,THIS.DECIMAL3,THIS.DECIMAL4,THIS.D
ECIMAL5,THIS.DECIMAL6,THIS.INTEGER1,THIS.INTEG
ER2,THIS.INTEGER3,THIS.INTEGER4,THIS.INTEGER5,
THIS.INTEGER6,THIS.STRING1,THIS.STRING2,THIS.ST
RING3 FROM A THIS WHERE '1' = THIS.A_ID AND 
(THIS.STRING1 LIKE THIS.STRING2||'%' ESCAPE '\' )]
at 
org.jpox.store.query.JDOQLQuery.performExecute
(JDOQLQuery.java:711)
at 
org.jpox.store.query.Query.executeWithMap
(Query.java:818)
at 
org.jpox.store.query.Query.executeWithArray
(Query.java:798)
at org.jpox.store.query.Query.execute
(Query.java:730)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

629
HyperSQL Database Engine (HSQLDB) / Bugs / #629 ArrayIndexOutOfBoundsException in jdbcDriver.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get an ArrayIndexOutOfBoundsException in
jdbcDriver.java: 
java.lang.ArrayIndexOutOfBoundsException: 4
at
org.hsqldb.jdbcDriver.getPropertyInfo(Unknown Source)
The DriverPropertyInfo array is initalized to a size of
4. The method then makes assignments to
DriverPropertyInfo at indices 1 through 5. The
DriverPropertyInfo array should be initialized to a
size of 6 to prevent this error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

630
HyperSQL Database Engine (HSQLDB) / Bugs / #630 COALESCE/NVL/IFNULL(MAX(...), ...) returns NULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I create an empty table with hsqldb 1.8.0.1 by
CREATE TABLE TEST_TABLE(VALUE DECIMAL);
then 
SELECT MAX(VALUE) FROM TEST_TABLE;
correctly returns one record with a NULL value.
But if I execute one of the queries
SELECT COALESCE(MAX(VALUE), 42) FROM TEST_TABLE;
SELECT NVL(MAX(VALUE), 42) FROM TEST_TABLE;
SELECT IFNULL(MAX(VALUE), 42) FROM TEST_TABLE;
then the result is the same, although 42 should be
returned instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

631
HyperSQL Database Engine (HSQLDB) / Bugs / #631 hibernate-generated SQL runs *very* slowly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to use HSQL v1.8.0.1 with Hibernate, and
have come across a problem that appears to cause the
database server to hang and/or enter an infitite loop
(CPU usage stays 100%).
The attached file contains the database, which consists
of some tables, with some sample data.
With debugging etc, I've obtained the SQL that
Hibernate generates, that causes the problem:
select *
from matchmap matchmap0_, matchinfo match1_, matchinfo
match2_
where
((match1_.tableid=57 and
matchmap0_.firstmatchid=match1_.matchid) and
(match2_.tableid=6 and
matchmap0_.secondmatchid=match2_.matchid)) or
((match1_.tableid=6 and
matchmap0_.firstmatchid=match1_.matchid) and
(match2_.tableid=57 and
matchmap0_.secondmatchid=match2_.matchid));
If I run this query by hand, using the HSQL Database
manager application, I get the same problem.
Obviously, if I was re-writing the query by hand, I'd
end up with:
select *
from matchmap mm, matchinfo mi1, matchinfo mi2
where
mm.firstmatchid = mi1.matchid and
mm.secondmatchid = mi2.matchid and
((mi1.tableid = 57 and mi2.tableid = 6) or
(mi1.tableid = 6 and mi2.tableid = 57));
This version works, returning the expected 0 rows
almost immediately.
Unfortunately, I dont have control over the SQL that
Hibernate is generating, so havent found a way to use
this (working) version of the select.
No additional messages appear on the console. Also, if
I repeat the test with an empty database (ie tables
created, but no rows inserted) then the problem does
not appear.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

632
HyperSQL Database Engine (HSQLDB) / Bugs / #632 Misleading exception in trigger handling
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I wasted a fairly long time trying to find the error in the sql 
statement i used to create a trigger. The exception, that was 
thrown had message "Unexpected token while parsing trigger 
command". I thought something is wrong with the sql query, i 
started. But after a time, i started debugging into your code, and 
found out, that the error occurred, while hsqldb tried to instanciate 
the trigger class, that unfortunately had no default constructor.
I would appreciate finding a hint in the documentation about that 
indispensible default constructor in a trigger class. In addition, the 
exception has in fact nothing to do with the problem. Could you 
please fix it, too?
Best regards
Christoph
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

633
HyperSQL Database Engine (HSQLDB) / Bugs / #633 Unique Constraint Violation with autoincrement on Text Table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using generated keys on text tables, the engine
adds ALTER COLUMN RESTART WITH statements in the script
file. If, after adding new records to the table the db
shuts down incorrectly, these values may not be
updated. If the db is then restarted, future inserts
into the table cause a unique constraint violation.
If the ALTER COLUMN statements are removed, the
database oprates correctly and continues with the next
number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

634
HyperSQL Database Engine (HSQLDB) / Bugs / #634 Under 1.8.0.1 the getTables() method doesn\'t work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using the below code snippet, under 1.8.0.1 the first
set of results (below the snippet) does not return the
table requested. When this same snippet was used uner
1.7. 1 the second results are provided. This appears
to be a bug in the current implementation. My only
work around is to go back to 1.7.1.
--------------------- Code Snippet
-----------------------------------------
String catalog = ""; // drop catalog name from the
selection criteria
String schemaPattern = ""; // retrieves
those without a schema
String tableNamePattern = tableName; // look only for
this table
String[] types = {"TABLE"}; // returns all
types
rs = dbmd.getTables(catalog, schemaPattern,
tableNamePattern,types);
if (DEBUG_2) {
// This is needed for those result sets
that can't be rewound.
ResultSetMetaData meta = rs.getMetaData();
int n = meta.getColumnCount();
for (int i = 1; i <= n; ++i)
System.out.print(meta.getColumnLabel(i) + " | ");
System.out.print("\n");
if (!(rs.getType() ==
ResultSet.TYPE_FORWARD_ONLY)) {
rs.beforeFirst();
}
while (rs.next()) {
next = true;
for (int i = 1; i <= n; ++i) {
String s = rs.getString(i);
System.out.print(s + " | ");
}
System.out.print("\n");
}
System.out.println("");
}
--------------------End Code Snippet
-------------------------------
-------------- Results with
1.8.0.1-----------------------------
TABLE_CAT | TABLE_SCHEM | TABLE_NAME | TABLE_TYPE
| REMARKS | TYPE_CAT | TYPE_SCHEM | TYPE_NAME 
| SELF_REFERENCING_COL_NAME | REF_GENERATION | 
HSQLDB_TYPE | READ_ONLY |
---------------End Results
1.8.0.1----------------------------
----------------Results with
1.7.1----------------------------
TABLE_CAT | TABLE_SCHEM | TABLE_NAME | TABLE_TYPE
| REMARKS | TYPE_CAT | TYPE_SCHEM | TYPE_NAME 
| SELF_REFERENCING_COL_NAME | REF_GENERATION | 
HSQLDB_TYPE | READ_ONLY |
null | null | OBJECTSTORAGECLASSTABLE0000 | TABLE
| null | null | null | null | null | null 
| MEMORY | false | 
----------------End Result 1.7.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

635
HyperSQL Database Engine (HSQLDB) / Bugs / #635 global temp tables with preserve rows not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I run the below script via the HSQLDB Database
Manager the select returns no results.
If the "on commit preserve rows" is removed then the
select returns results.
drop table TEST_TABLE
create global temporary table TEST_TABLE (
id int not null
) on commit preserve rows
insert into TEST_TABLE values (1);
select * from TEST_TABLE
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

636
HyperSQL Database Engine (HSQLDB) / Bugs / #636 COT implementation should call ATAN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Most of the trig functions in Library.java call the
underlying Java code directly. But for some reason the
COT implementation doesn't call ATAN() in java.lang.Math.
I am guessing it's because the coder didn't know that
COT is actually ATAN, being 1/tan().
The problem with is being implemented as 1/tan() is
that the Java specifications are very clear that the
result must be within 1 ulp of the correctly rounded
result. Results must also be semi-monotonic.
This is guaranteed in the java.lang.Math library but is
not when you do the maths yourself as in 1/tan().
A simple test is to play around with select statements
where you select multiples of cot(+-PI()). They do not
give Infinity. Select cot(0) and it does.
Of course, this is also because of the resolution of
PI() which can only approximate it, so this test isn't
really fair but it does make the point.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

637
HyperSQL Database Engine (HSQLDB) / Bugs / #637 DELETE query with JOIN under 1.8.0.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Executing a DELETE query with a JOIN throws an 
error. Trying to work around it with:
DELETE tblChequeDetail FROM tblChequeDetail 
WHERE EXISTS (SELECT chequeMasterID FROM 
tblChequeMaster WHERE 
tblChequeDetail.chequeMasterID=tblChequeMaster.cheq
ueMasterID AND tblChequeMaster.CustomerID=1)
also throws an error:
Unexpected token TBLCHEQUEDETAIL, requires 
FROM in statement [DELETE tblChequeDetail]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

638
HyperSQL Database Engine (HSQLDB) / Bugs / #638 In the MOD function, a divisor of zero aborts entire dataset
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you use mod(number,divisor), with divisor zero, the
entire result set is aborted on the divide by zero error.
It SHOULD return NaN for that instance.
This is very much needed when MOD is used across an
indeterminate dataset (i.e. rows in a table where the
values in those rows cannot be predicted).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

639
HyperSQL Database Engine (HSQLDB) / Bugs / #639 CONCAT doesn\'t handle a single null value correctly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is really bizarre because looking in Library.java
(and according to the comments there too), CONCAT(null,
'DEF') should return 'DEF'.
But it returns NULL.
Likewise CONCAT('ABC',null) doesn't return 'ABC'.
I have a table DUAL defined that allows me to select a
single row (yes, I know, it's an Oracle thing, sorry!).
sql> \d dual
name datatype width no-nulls
----- -------- ----- --------
DUMMY INTEGER 11
sql> select * from dual;
1
sql> select concat(null,'DEF') from dual;
null
sql> select concat('ABC',null) from dual;
null
sql> select concat('ABC','DEF') from dual;
ABCDEF
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

640
HyperSQL Database Engine (HSQLDB) / Bugs / #640 CONVERT statement syntax is wrong. Comma causes error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The CONVERT statement syntax should be:
CONVERT(term,type)
However, this produces an error in the latest version
of HSQL:
sql> select convert('12',float) from dual;
SQL Error at 'stdin' line 47:
"select convert('12',float) from dual"
Unexpected token in statement [select convert('12',]
However, this works:
sql> select convert('12' as float) from dual;
12.0
Which is the syntax for the CAST statement.
Looking in Parser.java line 2785 there is this statement:
if (isConvert) {
readThis(Expression.COMMA);
} else {
readThis(Expression.AS);
}
It seems that isConvert is not behaving correctly to
the syntax is changing to that of CAST instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

641
HyperSQL Database Engine (HSQLDB) / Bugs / #641 type-conversion error when using COALESCE with dates
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
COALESCE does not seem to work correctly when dealing
with dates or timestamps in some situations. For
example, if I have a table "foo" with a DATE column
"foo_date", this statement causes an exception:
SELECT COALESCE(foo_date, '2005-01-01') FROM foo;
The error is:
java.sql.SQLException: Unresolved parameter type as
output of CASE when operand types are LONGVARCHAR and
DATE in statement [...
The problem goes away if I CAST the second argument to
a DATE, e.g.:
SELECT COALESCE(foo_date, CAST('2005-01-01' AS DATE))
FROM foo;
Which doesn't seem unreasonable. However, I get the
same exception when using a JDBC PreparedStatement and
with a Date bind parameter, rather than a string literal:
PreparedStatement ps = c.prepareStatement("SELECT
COALESCE(foo_date, ?) FROM foo");
ps.setDate(1, new Date(99, 11, 31));
ps.executeQuery();
Using CAST in this case will also fix the problem, but
it seems less reasonable to require it, since the value
is unambiguously a DATE.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

642
HyperSQL Database Engine (HSQLDB) / Bugs / #642 SQLTool -> NullPointerException on Timestamp-columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SQLTool v1.49
SQLTool fails if a select is done on a null timestamp 
column. Example:
sql> create table test(test_id integer, test_date 
timestamp);
sql> select * from test;
TEST_ID TEST_DATE
------- ---------
0 rows
sql> insert into test(test_id, test_date) values (1, null);
1 row updated
sql> select * from test;
Rolling back SQL transaction.
Exception in thread "main" 
java.lang.NullPointerException
at org.hsqldb.util.SqlFile.displayResultSet
(Unknown Source)
at org.hsqldb.util.SqlFile.processSQL(Unknown 
Source)
at org.hsqldb.util.SqlFile.execute(Unknown Source)
at org.hsqldb.util.SqlFile.execute(Unknown Source)
at org.hsqldb.util.SqlTool.main(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

643
HyperSQL Database Engine (HSQLDB) / Bugs / #643 SELECT statement behave different in different platform
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqlDB version 1.8.0. I've re-compiled it
for Java 1.1 for the iPAQ platform. It was running
fine, except when I test a SELECT statement, I noticed
not all the records are returned from the result. But
if I run the same statement on the Linux/Windows using
the 1.8.0 for java 1.4.2. All the records will be
returned. 
Here is the select statement:
SELECT schedule_id_pk FROM schedules 
WHERE from_date <= '2005-09-02'
The problem is:
Any records that has the from_date='2005-09-02' will
not be returned on the iPAQ platform (hsqldb for Java
1.1), but they are returned if I run on Linux/Windows
(hsqldb for java 1.4.2).
The database table (cut down version):
CREATE TABLE schedules (
schedule_id_pk INTEGER GENERATED BY DEFAULT AS
IDENTITY (START WITH 1) NOT NULL PRIMARY KEY
, from_date DATE
, to_date DATE
);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

644
HyperSQL Database Engine (HSQLDB) / Bugs / #644 java.sql.SQLException: User not found :SA
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have lost two databases randomly from this and the
data is lost too. It appears to occur at shutdown that
the files are not being shutodwn properly. When the
application is restarted, the files become corrupted. I
have lost both a tomcat user database and an Apache
Mail database. I have also received copies of the
corrupt database from end users who are using an
application which has HSQLDB embedded.
The only thing in the script file is:
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET WRITE_DELAY 20
The properties file appears to be normal.
#HSQL Database Engine
#Fri Sep 02 07:32:04 EDT 2005
hsqldb.script_format=0
runtime.gc_interval=0
sql.enforce_strict_size=false
hsqldb.cache_size_scale=8
readonly=false
hsqldb.nio_data_file=true
hsqldb.cache_scale=14
version=1.8.0
hsqldb.default_table_type=memory
hsqldb.cache_file_scale=1
hsqldb.log_size=200
modified=yes
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.8.0
hsqldb.compatible_version=1.8.0
The exception I see in the log files is below:
java.sql.SQLException: User not found: SA
at org.hsqldb.jdbc.Util.sqlException(Unknown
Source)
at
org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown
Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:525)
at
java.sql.DriverManager.getConnection(DriverManager.java:171)
at org.hsqldb.util.RCData.getConnection(Unknown
Source)
at org.hsqldb.util.SqlTool.main(Unknown Source)
at org.hsqldb.util.SqlToolSprayer.main(Unknown
Source)
Failed instances: [mail]
The application is shutdown with this code snippet
which has worked on the all the databases from 1.7+.
Nothing has changed in the environment except now the
engine is 1.8.0.2.
StopService ()
{
ConsoleMessage "Stopping HSQLDB Database Engine"
exec "$JAVA_EXEC" -classpath "$CLASSPATH"
-Dsqltoolsprayer.propfile="$PROPERTY_FILE" \
-Dsqltoolsprayer.rcfile="$SQLTOOLRC"
org.hsqldb.util.SqlToolSprayer 'SHUTDOWN COMPACT;' >>
"$LOGFILE" 2>&1 &
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

645
HyperSQL Database Engine (HSQLDB) / Bugs / #645 java.sql.SQLException: Unexpected token: GROUP in statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have just upgraded to 1.8.0.2, from 1.7.2 and my code 
threw this error, when I was attempting to create a 
table. I have distilled it down to the attached example:
What seems to be happening is that the SQL statement 
is being truncated after the word group. I have an easy 
workaround by changing the name of that field. As far 
as I am aware the word GROUP is valid in this context, 
as it is just a field name but I am no SQL expert
Reverting back to 1.7.2 or cfhanging the name works fine
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

646
HyperSQL Database Engine (HSQLDB) / Bugs / #646 Create table failes after the table rename operation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code returns 
*java.sql.SQLException: Table not found in statement
[select * from ss]* in the last line. 
String driverClassName = "org.hsqldb.jdbcDriver" ; 
Properties properties = new Properties () ; 
properties.put ( "user" , "sa" ) ; 
properties.put ( "password" , "" ) ; 
String dbURL = "jdbc:hsqldb:file:/home/ali/deleteMe" ; 
Class.forName ( driverClassName) ; 
Connection connection = DriverManager.getConnection
(dbURL , properties ) ; 
connection.createStatement().execute( 
"create memory table ss(TIMED BIGINT NOT NULL IDENTITY
PRIMARY KEY)"); 
connection.createStatement().execute("alter table ss
rename to
ss2"); 
connection.createStatement().execute( 
"create memory table ss(TIMED BIGINT NOT NULL IDENTITY
PRIMARY KEY)"); 
connection.createStatement().execute("select * from ss"); 
Best,
Ali Salehi
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

647
HyperSQL Database Engine (HSQLDB) / Bugs / #647 Failed to upgrade database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Data Crow uses the database in byte mode
(hsqldb.script_format=3) as it can grow quite large
(images are stored in the database, etc). 
It is virtually impossible for Data Crow to pick up a
newer version (1.8) as we have to explain the user to
run a SQL statement on their (as can be read in the
documentation) old database / data crow version before
installing a newer version of Data Crow.
Is there a way to upgrade a "byte" database to 1.8
without having the user to run sql scripts ? Can we
solve this in the code ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

648
HyperSQL Database Engine (HSQLDB) / Bugs / #648 Script reading in Windows 98
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using hsqldb 1.7.2 or 1.8.0.1 on Windows 98 with
Sun JDK v 1.4.2, whenever a script has a line break
within an SQL statement, the reading of the script
fails with the message that there is an unexpected
token ' '. That is, it is stumbling on a non-printing
character. If I remove all the line breaks from within
each statement, it runs fine, so I figure it must be
choking on either the presence or lack thereof of the
CR in the newlines on Windows.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

649
HyperSQL Database Engine (HSQLDB) / Bugs / #649 1.8.0.1: NullPointerException in Index.child
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a NullPointerException in the HSQLDB 1.8.0.1 
engine during an INSERT. The problem always produces 
the same stack trace but doesn't necessarily happen on 
the same data when we re-run our program (hence, we 
can't provide a concrete test case). The problem only 
happens on Linux (we have a Red Hat 8.0), whether we 
use 1.4.2 or 1.5 (SUN VM).
Here is the stack trace:
java.lang.NullPointerException
at org.hsqldb.Index.child (Unknown Source)
at org.hsqldb.Index.balance (Unknown Source)
at org.hsqldb.Index.insert (Unknown Source)
at org.hsqldb.Table.indexRow (Unknown Source)
at org.hsqldb.Table.insertNoCheck(Unknown Source)
at org.hsqldb.Table.insertRow (Unknown Source)
at org.hsqldb.Table.insert(Unknown Source)
at 
org.hsqldb.CompiledStatementExecutor.executeInsertVa
luesStatement (Unknown Source)
at org.hsqldb.CompiledStatementExecutor.executeImpl
(Unknown Source)
at org.hsqldb.CompiledStatementExecutor.execute 
(Unknown Source)
at org.hsqldb.Session.sqlExecute (Unknown Source)
at org.hsqldb.Session.execute (Unknown Source)
at 
org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate
(Unknown Source)
...
We have an index on two columns of that table.
We don't have the problem with 1.7.3.3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

650
HyperSQL Database Engine (HSQLDB) / Bugs / #650 Ant does not build corret hsqldbmin.jar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For release 1.8.0.2, if build is exectuted with "ant
hsqldbmin" for the non-server jar, the resultant jar
file does not contain any class files.
D:[...]>dir ..\lib\hsqldbmin.jar
Volume in drive D is DATA
Volume Serial Number is B4CC-9308
Directory of D:[...]\hsqldb\lib
09/21/2005 01:13 PM 467 hsqldbmin.jar
1 File(s) 467 bytes
0 Dir(s) 2,916,093,952 bytes free
D:[...]\thirdparty\hsq
>jar tvf ..\lib\hsqldbmin.jar
0 Wed Sep 21 13:13:54 MDT 2005 META-INF/
362 Wed Sep 21 13:13:52 MDT 2005 META-INF/MANIFEST.MF
The other jar targets build fine.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

651
HyperSQL Database Engine (HSQLDB) / Bugs / #651 columnDefinition disallows NOT NULL DEFAULT value
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It appears that <columnDefinition> makes it either-or
choise, which is... unexpected and somewhat inconvenient.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

652
HyperSQL Database Engine (HSQLDB) / Bugs / #652 OOM when deleting from tables with a lot of  rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create cached table articles
( id integer generated by default as identity primary key
, submitted timestamp not null
, subject varchar(50)
, text varchar(1000)
);
all records have:
- subject = 'Test record NN'
- text = 'This is article NN in this batch (MM to go).'
There was 1983 "batches" 100 "articles" each, i.e.
198,300 rows in the table.
DELETE FROM articles;
java.lang.OutOfMemoryError: Java heap space
SQL Error at 'stdin' line 3:
"delete from articles"
out of memory
select count(*) from articles;
160293
DELETE FROM articles;
java.lang.OutOfMemoryError: Java heap space
SQL Error at 'stdin' line 5:
"delete from articles"
out of memory
select count(*) from articles;
119041
and so on...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

653
HyperSQL Database Engine (HSQLDB) / Bugs / #653 Cannot rollback to named savepoint
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Creating a named savepoint and attempting to rollback
to it after issuing a single SQL command fails with the
following error:
java.sql.SQLException: Savepoint not found: savepoint
Attached is a small example that demonstrates the problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

654
HyperSQL Database Engine (HSQLDB) / Bugs / #654 Scalar functions X Distinct
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
from : dellaColetta@hotmail.com
the query :
select distinct tipojuridico, left(razaosocial, 5) from 
pessoa;
raise :
ORDER BY item should be in the SELECT DISTINCT list
Error Code: -71 / State: 37000
for any scalar function used then left (ex. substr...)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

655
HyperSQL Database Engine (HSQLDB) / Bugs / #655 how IFNULL work?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Not really undestand why this dont work,
for examle, in engine in memory 
for execute use HSQL database manager,
Specification-Version: 1.8.0
Create Table Y(id int not null)
and statement
Insert Into y Select IFNULL(Max(ID),0) from y
give error 
Attempt to insert null a non-nullable column: column:ID 
table Y
how i may do that in one statement?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

656
HyperSQL Database Engine (HSQLDB) / Bugs / #656 HSQLDB will not load after a restart
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am having a problem where I have to reboot my app 
server anytime there is a problem or I make an app 
server change. This is because if I stop and start just 
the Cocoon application the HSQLDB does not start. On 
initial boot of the app server everything works just fine. I 
am running WebSphere 6, but I've also deployed this 
cocoon application on Tomcat and experience the same 
results. Things I have tried so far to resolve:
1) Upgraded to latest version of HSQLDB 1.8.0.1
2) Modified web.xml to use the ParanoidCocoonServlet
3) Changed the init-classloader parameter to true
Has anyone experienced similar problems with 
HSQLDB? I've done a netstat before trying to restart 
and the HSQLDB port (9002 in my case) had been 
successfully released. I can get around this by 
rebooting my app server every time, but it would 
certainly be a lot easier to just restart the cocoon 
application.
Relevant section of web.xml
<init-param>
<param-name>load-class</param-name>
<param-value>com.ibm.servlet.classloader.Handler 
org.hsqldb.jdbcDriver 
org.apache.cocoon.transformation.LDAPTransformer</pa
ram-value>
</init-param>
Relevant section of cocoon.xconf
<datasources>
<jdbc logger="core.datasources.dashboard" 
name="dashboard">
<pool-controller max="10" min="5"/>
<dburl>jdbc:hsqldb:hsql://localhost:9002</dburl>
<user>dashboard</user>
<password>d@1abas3</password>
</jdbc>
</datasources>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

657
HyperSQL Database Engine (HSQLDB) / Bugs / #657 TriggerSample doesn\'t work in Server mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the 1.8.0 release, I found the TriggerSample
example which run perfectly in Mem mode.
When I change the url for
jdbc:hsqldb:hsql://localhost/, I found two issues :
1) impossible to create audit table due to the fact
that the server needs an argument for tn VARCHAR
2) once the audit table created with tn
longvarchar, the server hang during the audit phase -
impossible to insert values in audit table. If I skip
this audit phase all run OK, but it is the audit
functionality that I want to use in an OOBase document.
Best Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

658
HyperSQL Database Engine (HSQLDB) / Bugs / #658 timestamp format bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hello,
it seems like timestamps are stored in a not
jdbc-typical way which causes the system to actually
store another value than the one provided. the problem
is the representation of the nano seconds: the
java.sql.Timestamp class likes to represent them in a
way where you can cut the ending zeros. so for example:
2005-10-13 19:31:34.046
has 46000000 nano seconds. hsql likes to cut the first
zeros and preserve the ending ones. the bad thing about
that is, that it seems to be mixed up in the code so
the result is flawed. because
2005-10-13 19:31:34.46000000 
has 460000000 nanos in jdbc representation (10 times
more than it should have). 
the problem occurs when the db is shut down and
restarted. after that the values are flawed. i've
attached a testcase to reproduce the problem. 
i'm using hsql 1.8.0_2 and it seems to work with cached
and memory tables. actually, when using memory tables
you can see the following line in the script:
INSERT INTO TIME VALUES(1,'2005-10-13 19:31:34.46000000')
which is pretty much different to 
INSERT INTO TIME VALUES(1,'2005-10-13 19:31:34.046')
as explained above
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

659
HyperSQL Database Engine (HSQLDB) / Bugs / #659 build for JDK1.3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Have any one successful build project for JDK 1.3?
It keep complaint about 
java.lang.NoClassDefFoundError: java/sql/Savepoint, 
which I believe it is JDK 1.4 things
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

660
HyperSQL Database Engine (HSQLDB) / Bugs / #660 can not make a remote jdbc connection
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am trying to make a remote connection to a hsqldb
server running on another windows xp desktop from my
latop, but got a java.sql.SQLException: socket creation
error:
java.sql.SQLException: socket creation error
at org.hsqldb.jdbc.Util.sqlException(Unknown
Source)
at
org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown
Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at
java.sql.DriverManager.getConnection(DriverManager.java:539)
at
java.sql.DriverManager.getConnection(DriverManager.java:189)
at org.hsqldb.util.RCData.getConnection(Unknown
Source)
at org.hsqldb.util.SqlTool.main(Unknown Source)
following is the section from sqltool.rc file:
urlid remote-sa
url jdbc:hsqldb:hsql://10.0.0.10:9001/xdb
username sa
password
the local connection on the desktop was ok, the
'netstat -a' shows that the hsqldb server is listening
on the default port 9001, and the firewall on the
desktop was disabled.
Not sure it is a bug (I don't beleive), but any
suggestion will be appericated.
Thanks,
Marlin
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

661
HyperSQL Database Engine (HSQLDB) / Bugs / #661 ArrayIndexOutOfBoundsException on index creating
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, hsql team!
The next exceptions happens very often when some
indexes are created.
If I restart the hsql server, the indexes are created
without problems. But, after sql statements described
beneath, creating of indexes causes this exception:
java.lang.ArrayIndexOutOfBoundsException
at java.lang.System.arraycopy(Native Method)
at
org.hsqldb.lib.ArrayUtil.copyAdjustArray(Unknown Source)
at org.hsqldb.Table.moveData(Unknown Source)
at org.hsqldb.TableWorks.createIndex(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.addIndexOn(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.processCreateIndex(Unknown
Sour
ce)
at
org.hsqldb.DatabaseCommandInterpreter.processCreate(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown
Source)
at
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown
Source)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown
Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:595)
To get the exception I repeat the next statements:
DROP VIEW vnavigation IF EXISTS CASCADE;
DROP TABLE vnavigation IF EXISTS CASCADE;
--CREATE VIEW vnavigation AS
SELECT
container_closure.container_id as id,
container_closure.parent_container_id,
container_lang.lang, container_lang.display_name AS
parent_display_name,
vcont_cat.catalog_id,
catalog_lang.abbr AS catalog_abbr,
container.container_type AS parent_container_type
INTO CACHED vnavigation
FROM container_closure
JOIN container_lang ON
container_closure.parent_container_id=container_lang.container_id
JOIN vcont_cat ON
container_closure.parent_container_id=vcont_cat.id
JOIN catalog_lang ON
vcont_cat.catalog_id=catalog_lang.container_id AND
container_lang.lang=catalog_lang.lang
JOIN container ON
container_closure.parent_container_id=container.id
ORDER BY container.container_type
;
DROP INDEX idx_vnavigation_id_lang_type IF EXISTS;
CREATE INDEX idx_vnavigation_id_lang_type ON
vnavigation (id,lang,parent_container_type);
Regards,
Yarick.
P.S. my profile: Pentium4, winXP, java 1.5.0_05,
hsqldb-1.8.0.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

662
HyperSQL Database Engine (HSQLDB) / Bugs / #662 NFS not supported anymore
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using HSQLDB with JBoss 3.2.7. When we use 
HSQLDB version 1.8.0.2 we can't start the database 
when the files are on a NFS mount. With 1.8.0.0 (default 
JBoss) it worked fine.
Vincent de Weger
hsqldb@traffic-its.nl
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

663
HyperSQL Database Engine (HSQLDB) / Bugs / #663 NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting this null pointer in the middle of a very
large transaction ~45000 records over 121 tables. The
version is 1.8.0.2 
And one of my tables becomes corrupted though I am not
sure if it is the cause or result of this exception.
While I can't send you the database due to security
issues, I can run instrumented code to test a fix. I
will also see if I can narrow it down over the weekend.
java.lang.NullPointerException
at
org.hsqldb.persist.DataFileCache.get(DataFileCache.java:551)
at org.hsqldb.Table$RowStore.get(Table.java:3453)
at org.hsqldb.Table.getRow(Table.java:3238)
at org.hsqldb.PointerNode.getRow(PointerNode.java:119)
at org.hsqldb.Index.insert(Index.java:292)
at org.hsqldb.Table.indexRow(Table.java:3290)
at org.hsqldb.Table.insertNoCheck(Table.java:1908)
at org.hsqldb.Table.insertRow(Table.java:1864)
at org.hsqldb.Table.insert(Table.java:1847)
at
org.hsqldb.CompiledStatementExecutor.executeInsertValuesStatement(CompiledStatementExecutor.java:297)
at
org.hsqldb.CompiledStatementExecutor.executeImpl(CompiledStatementExecutor.java:125)
at
org.hsqldb.CompiledStatementExecutor.execute(CompiledStatementExecutor.java:90)
at org.hsqldb.Session.sqlExecute(Session.java:1228)
at org.hsqldb.Session.execute(Session.java:846)
at
org.hsqldb.ServerConnection.run(ServerConnection.java:254)
at java.lang.Thread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

664
HyperSQL Database Engine (HSQLDB) / Bugs / #664 JOIN on columns fail if alias with same name exists
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create table test1 (
idtest int,
test varchar(100),
primary key(idtest));
create table test2 (
idtest2 int,
idtest int,
test varchar(100),
primary key(idtest2),
foreign key (idtest) REFERENCES test1(idtest));
INSERT INTO test1 (idtest, test) VALUES (1,'hello');
INSERT INTO test2 (idtest2,idtest, test) VALUES
(2,1,'world');
The following select statement
SELECT t1.test, t2.idtest2 as idtest from test1 t1
JOIN test2 t2 ON (t1.idtest=t2.idtest)
should return
test idtest
Hello 2
but returns an empty set.
Testing the following query you'll get a SQL Exception:
select t1.test, t1.test as idtest from test1 t1 JOIN
test2 t2 ON 
(t1.idtest=t2.idtest)
[Error Code: -16, SQL State: 37000] Wrong data type:
For input string: "hello" in statement [select t1.test,
t1.test as idtest from test1 t1 JOIN test2 t2 ON
(t1.idtest=t2.idtest)]
which is odd, since you won't get one with this statement:
select t1.test, t2.test as idtest from test1 t1 JOIN
test2 t2 ON (t1.idtest=t2.idtest)
but still an empty result which is wrong.
Regards
Stefan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

665
HyperSQL Database Engine (HSQLDB) / Bugs / #665 Desc order by doesn\'t work with alias columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hsqldb 1.8.0_2 has a bug in desc order by when using
columns aliases: it doesn't order data in descending
order. I found out this bug using Hibernate 3.0.5
generated queries.
The following commands are able to reproduce the bug
condition:
create table TEST (
TEST_COD bigint
);
insert into TEST values(1);
insert into TEST values(2);
insert into TEST values(3);
select TEST_COD as COD from TEST T order by T.COD desc;
Query results are:
COD 
------ 
1 
2 
3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

666
HyperSQL Database Engine (HSQLDB) / Bugs / #666 Mac OS X service instructions incomplete
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Mac OS X does not have a useradd command; instead, one needs 
to run the following to create an hsqldb group and user.
Unfortunately, the commands below do not autogenerate a uid/gid, 
so one has to be selected. I chose 101.
1. First make sure that the gid and uid of 101 are unused:
nireport / /groups name gid | grep "[0123456789][0123456789]"
nireport / /users name uid | grep "[0123456789][0123456789]"
If they are, pick a different number for the one that is in use.
2. Add the user and group:
sudo niutil -create / /groups/hsqldb
sudo niutil -createprop / /groups/hsqldb gid 101
sudo niutil -create / /users/hsqldb
sudo niutil -createprop / /users/hsqldb gid 101
sudo niutil -createprop / /users/hsqldb uid 101
sudo niutil -createprop / /users/hsqldb shell /bin/bash
Doing this eliminates the need to create a full-fledged System user, 
with it's own (fat) home directory while maintaining the security of an 
hsqldb user. For a home dir for hsqldb, create /Library/Hsqldb/ and 
store your data there. This is where OS X has other services keep 
their local files.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

667
HyperSQL Database Engine (HSQLDB) / Bugs / #667 null value as boolean error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create table test (state char(1));
insert into test (state) values ('1');
select * from test where state = '1' and false
the above select throws an error 'null values as
boolean', errorcode = 106.
The same problem occurs if instead of false a subselect
of the form 'id in (select id from othertable)' is used.
Release 1.8.1 and 1.8.2, not yet tested with earlier
release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

668
HyperSQL Database Engine (HSQLDB) / Bugs / #668 PreparedStatement: setInt() does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If i have created a Column with Type OTHER I cannot
save an Integer as Integer.
If I try to setInt I get an Exception which say cannot
convert from Long to ??? (since I already applied my
own workaround, don't know the EXACT ExceptionType -
but I remember clearly it has to do with conversin into
Long)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

669
HyperSQL Database Engine (HSQLDB) / Bugs / #669 PreparedStatement: setObject fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have created a Column with Type OTHER and I want to
save PageFormat I get an Exception.
java.lang.ClassCastException: java.awt.print.PageFormat
at
org.hsqldb.jdbc.jdbcPreparedStatement.setParameter(Unknown
Source)
at
org.hsqldb.jdbc.jdbcPreparedStatement.setObject(Unknown
Source)
Is it now supported or not?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

670
HyperSQL Database Engine (HSQLDB) / Bugs / #670 Error with the \'LIMIT\' at the and of \'SELECT\' statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Good day.
When i execute 'SELECT' statement without anything
between table name and 'LIMIT' at the end of statement,
for example:
SELECT * FROM customer LIMIT 5;
then error occurs with message:
'Unexpected token: 5 in statement [5] / Error Code: -11
/ State: 37000'
When i add 'ORDER BY' or 'GROUP BY' or 'WHERE' to the
statement, eg:
SELECT * FROM customer ORDER BY id LIMIT 5;
or
SELECT * FROM customer WHERE id > 5 LIMIT 5;
then it executed successfully.
Thank you for a great work (and sorry for my English).
Alexei.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

671
HyperSQL Database Engine (HSQLDB) / Bugs / #671 Built-in functions NOW, CURDATE, CURTIME return null
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The built-in functions NOW, CURDATE, CURTIME return 
null. See the related functions in org.hsqldb.Library.
In earlier releases (e.g. 1.7.1) the functions 
returned a valid Date, Time ir Timestamp.
So for instance
CREATE MEMORY TABLE MYTABLE(ID VARCHAR NOT NULL 
PRIMARY KEY,LASTMODIFIED TIMESTAMP)
INSERT INTO MYTABLE VALUES('MyID',NOW)
results in a null value i.s.o. the current timestamp 
in the LASTMODIFIED column of the newly created 
MYTABLE record.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

672
HyperSQL Database Engine (HSQLDB) / Bugs / #672 UNION fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Release: hsqldb 1.8.0.1
OS: Windows XP
I have a table called "sta_authentication", this 
table has >40000 rows.
When I tested UNION and got some strange results. Try 
and execute the following query:
SELECT SUM(inner_count) FROM (
SELECT COUNT(authentication_id) AS inner_count 
FROM sta_authentication 
WHERE authentication_id<10000
UNION
SELECT COUNT(authentication_id) AS inner_count 
FROM sta_authentication 
WHERE
authentication_id>10000 AND
authentication_id<20000
)
This results in 19999 rows, it's correct. 
Now change:
authentication_id>10000
To:
authentication_id>=10000
This results in 10000 rows, it's WRONG! 
The correct should be 20000 rows.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

673
HyperSQL Database Engine (HSQLDB) / Bugs / #673 Criteria order on date/time, setMaxResults/setFirstResult
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With Hibernate (3.0.5) and HSQL (1.8.0.2) when I'm
trying to get the latest object with Date/Time fields,
I get unexpected results which seems to point to off by
one errors.
With 10 objects, this returns unexpectedly the next to
last:
criteria.addOrder(Order.desc("startDate"));
criteria.addOrder(Order.desc("startTime"));
criteria.setMaxResults(1);
criteria.setFirstResult(0);
While this works:
criteria.addOrder(Order.desc("startDate"));
criteria.addOrder(Order.desc("startTime"));
criteria.setMaxResults(1);
criteria.setFirstResult(1);
I'll attach my testcase to demonstrate. Note that I've
found this at work and the same code with Microsoft SQL
worked.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

674
HyperSQL Database Engine (HSQLDB) / Bugs / #674 Transfer and QueryTool missing from standard jar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Transfer and QueryTool utilities are now missing 
from the standard jar (target "hsqldb"). I see this 
change was the result of revision 1.69 of build.xml, 
which has as log message only "post 1_8_0 RC11", 
which I cannot interpret. The documentation 
continues to claim that these utlities are included, 
so I don't know if this was an intentional change.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

675
HyperSQL Database Engine (HSQLDB) / Bugs / #675 Can not have filed with "#" in filed name
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create table tmp_1134119839218
(
SNAP_ID BIGINT,DBID BIGINT,INSTANCE_NUMBER 
BIGINT,TEXT_SUBSET VARCHAR(31),SQL_TEXT VARCHAR
(1000),SQL_ID VARCHAR(13),SHARABLE_MEM BIGINT,
SORTS BIGINT,MODULE VARCHAR(64),LOADED_VERSIONS 
BIGINT,FETCHES BIGINT,EXECUTIONS 
BIGINT,END_OF_FETCH_COUNT BIGINT,LOADS BIGINT,
INVALIDATIONS BIGINT,PARSE_CALLS BIGINT,DISK_READS 
BIGINT,DIRECT_WRITES BIGINT,BUFFER_GETS 
BIGINT,APPLICATION_WAIT_TIME BIGINT,
CONCURRENCY_WAIT_TIME BIGINT,CLUSTER_WAIT_TIME 
BIGINT,USER_IO_WAIT_TIME BIGINT,PLSQL_EXEC_TIME 
BIGINT,JAVA_EXEC_TIME BIGINT,
ROWS_PROCESSED BIGINT,COMMAND_TYPE BIGINT,HASH_VALUE 
BIGINT,OLD_HASH_VALUE BIGINT,VERSION_COUNT 
BIGINT,CPU_TIME BIGINT,
ELAPSED_TIME BIGINT,OUTLINE_SID 
BIGINT,OUTLINE_CATEGORY VARCHAR(64),CHILD_LATCH 
BIGINT,SQL_PROFILE VARCHAR(64),
PROGRAM_ID BIGINT,PROGRAM_LINE# 
BIGINT,PLAN_HASH_VALUE BIGINT,COST BIGINT 
)
fails due to use of "PROGRAM_LINE#" field. Table is 
created automatically by using metadata from other 
RDBMS.
Error: Unexpected Token: # in statement [...]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

676
HyperSQL Database Engine (HSQLDB) / Bugs / #676 data not fully loading in 1.8.0 with hibernate
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have an application that uses hibernate 2.1.8. We
are preloading data into the db with a small java app.
We have been loading this data into a postgresql
database for a while with out issue. Wanted to create
a portable version so we moved the database over to
hsql 1.8.0. The data loader would not load all data
completely and often varied in which data was being
loaded for certain tables. The majority of data was
there but a few rows were missing. Switching to 1.7.3
everything seems to work normally.
Using the hsql standalone engine.
Feel free to contact me for additional information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

677
HyperSQL Database Engine (HSQLDB) / Bugs / #677 \"Order by <column_alias>\" causes floating error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue: 
1. hsqldb would not issue streight SQL error during 
parsing
2. Error is floating - Order by works in one case and 
failes in another
SQL:
select 1 DELTA_TYPE ,a.value - b.value EXEC
...
order by 1, EXEC -- > Bad order by
Error:
java.lang.ClassCastException
at org.hsqldb.Column.compare(Column.java:735)
at org.hsqldb.Result.compareRecord
(Result.java:1095)
at org.hsqldb.Result.sortResult
(Result.java:1047)
at org.hsqldb.Select.sortResult
(Select.java:702)
at org.hsqldb.Select.getResult(Select.java:494)
at 
org.hsqldb.CompiledStatementExecutor.executeSelectState
ment(CompiledStatementExecutor.java:339)
at 
org.hsqldb.CompiledStatementExecutor.executeImpl
(CompiledStatementExecutor.java:119)
at org.hsqldb.CompiledStatementExecutor.execute
(CompiledStatementExecutor.java:90)
at org.hsqldb.Session.sqlExecute
(Session.java:1228)
at org.hsqldb.Session.execute(Session.java:846)
at 
org.hsqldb.jdbc.jdbcPreparedStatement.executeQuery
(jdbcPreparedStatement.java:377)
Code Section:
>>>>>>>>>>
case Types.NUMERIC :
case Types.DECIMAL :
i = ((BigDecimal) a).compareTo
((BigDecimal) b);
break;
>>>>>>>>>>>
Values:
Long - a=1929
Long - b=1928
Error:
((BigDecimal) a) -> Cannot cast an instance of "class 
java.lang.Long (no class loader)" to an instance 
of "class java.math.BigDecimal (no class loader)"<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

678
HyperSQL Database Engine (HSQLDB) / Bugs / #678 Name of constraint in case of vilolation not available
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Submitted by Michael Codini 
(mailto:mcodini@voiceobjects.com)
When running the following script a primary key 
violation is produced.
------------------------------
drop table test;
create table test (i numeric(1) not null, constraint 
test_pk primary key (i));
insert into test values (1);
insert into test values (1);
------------------------------
As a result you get the following SQL error message 
w/o the violated constraint name:
"Unique constraint violation: / Error Code: -104 / 
State: 23000"
What I have expected is the following message 
including the violated constraint name "test_pk":
"Unique constraint violation: test_pk / Error Code: -
104 / State: 23000"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

679
HyperSQL Database Engine (HSQLDB) / Bugs / #679 Synchronize problem with small .log
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.lang.NullPointerException at 
org.hsqldb.persist.DataFileCache.get(Unknown Source)
The NPE occurs when the .log file reaches its limit 
of 10 MB, while in the process of removing many rows 
in chunks of 1000 rows for each commit.
Using .log default size, 200 MB the NPE never occurs, 
my work-around for now.
I have tested both latest release and (module hsqldb-
dev) CVS-tags: hsqldb_1_8_0_3 and HEAD, same problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

680
HyperSQL Database Engine (HSQLDB) / Bugs / #680 Wrong error message (alter table)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had a create table intruction:
CREATE CACHED TABLE document (..., create_date timestamp)
The problem I am reporting:
After running
ALTER TABLE document ADD COLUMN create_date timestamp
I received this error message:
java.sql.SQLException: Column constraints are not
acceptable in statement [ALTER TABLE document ADD
COLUMN create_date timestamp]
although I should receive column already exists error.
Not a big thing, but I was looking for it for some time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

681
HyperSQL Database Engine (HSQLDB) / Bugs / #681 Exception caching gives incorrect stack traces
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Exceptions for features not supported are cached. 
For example; in Connection.getTypeMap() rather than
creating a new exception, it returns a reference to a
static final exception (stored in Util) that is
initialised when first refereneced, hence stack trace
is frozen to be the stack trace when exception is first
created.
public synchronized Map getTypeMap() 
{
throw Util.notSupported; // static final reference
}
This leads to very confusing debugging! (esp if the
execption is for a different feature than was first
called).
For example:
Connection c = DriverManager.getConnection( .. );
try
{
c.getTypeMap(); // XXX
}
catch( SQLException e )
{
; // swallow exception
}
System.out.println("Foo");
c.getTypeMap(); // YYY
The exception thrown from point YYY has the stack trace
of exception thrown from XXX! Even though 'Foo' is
printed to the console!
Fix - throw new UnsupportedException rather than using
static finals to cache.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

682
HyperSQL Database Engine (HSQLDB) / Bugs / #682 ResultSetMetaData.getTableName(int col)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
when doing a select with an alias as follows you don't get the alias but get 
the table name instead
select name as n from company as c;
ResultSetMetaData.getTableName(1) returns company not c like expected.
This happens in the latest 1.8.02 version of hsldb..
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

683
HyperSQL Database Engine (HSQLDB) / Bugs / #683 Multiple Sequences Cause Multirow Return with Next Value
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tested this under 1.7.2.2 and 1.8.0.2
Create multiple Sequences:
CREATE SEQUENCE test AS BIGINT START WITH 0;
CREATE SEQUENCE test1 AS BIGINT START WITH 0;
CREATE SEQUENCE test2 AS BIGINT START WITH 0;
Retrieve the next value for sequence test1:
SELECT NEXT VALUE FOR test1 FROM
INFORMATION_SCHEMA.SYSTEM_SEQUENCES;
This will return 3 rows instead of just one with the 
values:
1
2
3
Repeating the SELECT will produce a result of:
4
5
6
If you change the SELECT to a different sequence like
test2, it will return a rowset of 3 as follows:
1
2
3
So each sequence maintains individual counts but
instead of a single row being returned, the rowset is
based on the total number of system sequences created.
This makes it difficult to maintain multiple sequences
with the expected increment.
submitted by:
Shawn Potter <spotter@invoqsystems.com>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

684
HyperSQL Database Engine (HSQLDB) / Bugs / #684 Inserts if some variables not bound
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Code:
===
ps = conn.prepareStatement("INSERT INTO t (c) VALUES (?)");
// nothing here
ps.executeUpdate();
===
Executed successfully, however value for column c is not bound. 
SQLException should be thrown.
Found in 1.8.0.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

685
HyperSQL Database Engine (HSQLDB) / Bugs / #685 DISTINCT does`nt work for functions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DISTINCT does`nt work for functions in version 1.8.0.2
The bug is described in 
http://sourceforge.net/mailarchive/message.php?
msg_id=13893701
sql> create table tbl (dc date);
sql> insert into tbl values ('2004-11-10');
1 row updated
sql> insert into tbl values ('2004-9-12');
1 row updated
sql> insert into tbl values ('2005-11-18');
1 row updated
sql> select distinct year(dc) from tbl;
SQL Error at 'stdin' line 6:
"select distinct year(dc) from tbl"
ORDER BY item should be in the SELECT DISTINCT list: 
org.hsqldb.Expression@72ffb in statement [select 
distinct year(dc) from tbl]
I guess it caused because the code
} else if (exprType == FUNCTION) {
function.
collectInGroupByExpressions(colExps);
} else if (exprType == CASEWHEN) {
eArg2.
collectInGroupByExpressions(colExps);
was added to the specified version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

686
HyperSQL Database Engine (HSQLDB) / Bugs / #686 Add note that text tables not supported with res proto
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Per thread:
http://sourceforge.net/forum/forum.php?thread_id=1419495&forum_id=73674
Since text tables are not supported via the res
protocol it would be good to have a note stating such
in the documentation for the sections describing text
tables and the res protocol.
Bob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

687
HyperSQL Database Engine (HSQLDB) / Bugs / #687 Batch updates lose the original error message.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using HSQLDB 1.8.0.2 and am noticing batch updates
don't return detailed error messages. For example, if
an underlying update fails because of a unique
constraint violation, HSQLDB only reports "failed
batch" to the client. Here is a specific example:
I'm stepping through the code in the
Session.sqlExecuteBatch(Result) method.
Line 1093 looks like this:
in = compiledStatementExecutor.execute(cs);
This results in a unique constraint violation, so the
"in" Result object represents an error. Here are some
of the fields from that object:
mode = 2 (ResultConstants.ERROR)
mainString = "Unique constraint violation: SYS_CT_206
in statement [...]"
subString = "23000"
statementID = -104 (corresponding to
Trace.VIOLATION_OF_UNIQUE_CONSTRAINT)
So at this point, the "in" Result looks correct. But
the last few lines of the Session.sqlExecuteBatch
method seem to discard the error information:
out = new Result(ResultConstants.SQLEXECUTE,
updateCounts, 0);
return out;
So the "in" object that contains the error details is
never sent to the client, making it very difficult to
determine the true source of the problem.
Instead, clients see something like 
java.sql.BatchUpdateException: failed batch", with a
vendor code of 0.
Also see this forum posting:
http://sourceforge.net/forum/message.php?msg_id=3337445
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

688
HyperSQL Database Engine (HSQLDB) / Bugs / #688 multi-column index not always used
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb 1.8.0.2 does not seem to be using multi-column
indexes for multi-column queries if a single-column
index matches and was created earlier. Example: 
create cached table test 
( 
pk INTEGER NOT NULL PRIMARY KEY, 
a1 INTEGER, 
a2 INTEGER, 
a3 INTEGER 
) 
CREATE INDEX index1 ON test ( a1 ) 
CREATE INDEX index2 ON test ( a2 ) 
CREATE INDEX index3 ON test ( a3 ) 
create index indexMultiColumn ON test (a1,a2,a3) 
explain plan for 
select * from test 
where 
a1=1 
AND 
a2=2 
AND 
a3=3 
(important part in this explain plan is that it's using
index1) 
returns: 
OPERATION
--------------------------------------
org.hsqldb.Select@e61a35[
isDistinctSelect=[false]
isGrouped=[false]
isAggregated=[false]
columns=[
COLUMN TEST.PK
COLUMN TEST.A1
COLUMN TEST.A2
COLUMN TEST.A3
]
tableFilters=[
[
org.hsqldb.TableFilter@c2b2f6
table=[TEST]
alias=[TEST]
access=[INDEX PRED]
index=[INDEX1]
isOuterJoin=[false]
eStart=[
EQUAL arg1=[
COLUMN TEST.A1] arg2=[
VALUE = 1, TYPE = INTEGER]]
eEnd=[
EQUAL arg1=[
COLUMN TEST.A1] arg2=[
VALUE = 1, TYPE = INTEGER]]
eAnd=[
AND arg1=[
EQUAL arg1=[
COLUMN TEST.A2] arg2=[
VALUE = 2, TYPE = INTEGER]] arg2=[
EQUAL arg1=[
COLUMN TEST.A3] arg2=[
VALUE = 3, TYPE = INTEGER]]]
]]
eCondition=[
AND arg1=[
AND arg1=[
SET TRUE, WAS: EQUAL arg1=[
COLUMN TEST.A1] arg2=[
VALUE = 1, TYPE = INTEGER]] arg2=[
SET TRUE, WAS: EQUAL arg1=[
COLUMN TEST.A2] arg2=[
VALUE = 2, TYPE = INTEGER]]] arg2=[
SET TRUE, WAS: EQUAL arg1=[
COLUMN TEST.A3] arg2=[
VALUE = 3, TYPE = INTEGER]]]
havingCondition=[null]
groupColumns=[null]
PARAMETERS=[]
SUBQUERIES[] 
51 row(s) in 10 ms 
If I drop index1, the explain plan will then show
indexMultiColumn as being used, so it is a valid index,
it's just not being chosen when it would be the most
appropriate index...
--Erich
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

689
HyperSQL Database Engine (HSQLDB) / Bugs / #689 PreparedStatement run as Admin
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
All PreparedStatements are run with Admin privs. Giving
access to all tables for any user. This is a big
security problem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

690
HyperSQL Database Engine (HSQLDB) / Bugs / #690 Connection is broken: org/hsqldb/lib/ArrayCounter
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using version 1.8.0.2
I execute this query:
select * from xcl_lists where id = 469843432;
from the HSQL Database Manager and I get the titled error.
I execute this query:
select * from xcl_lists where id = 469843431;
and the result is returned fine.
I call script <script_file>
and all records are present. The table is a memory
table containing two columns: id and ref_count. id is a
primary key.
Within my code, I'm fairly sure something happened with
the write for this record and although JDBC reported a
successful update, the next call to identity() came
back with the previous written record's id.
Please let me know if I need to be concerned about this
behaviour.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

691
HyperSQL Database Engine (HSQLDB) / Bugs / #691 concat(round(xxx, 0), \' yy\') appends unwanted .0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello there, I observed the following behaviour with hsqldb distributed with OpenOffice Base 2.0 (with Button "Run SQL command directly" toggled):
select round("thickness",0) as "thickness"
from "material";
thickness
3
4
5
(thickness being a float column). This is what I expect. Now, trying to append a string to the result, I try
select concat(round("thickness",0), ' mm') as "thickness"
from "material";
which produces "3.0 mm" instead of "3 mm". Same behaviour with "||". Is this intended?
Regards, Ulf
<ulf.mehlig@gmx.net>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

692
HyperSQL Database Engine (HSQLDB) / Bugs / #692 Assert failed: beginNestedTransaction
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version 1.8.0.2 HSQL, JBoss 4.0.3
The following was thrown by JBossMQ when commiting a
transaction:
ERROR [BasicQueue] ( ) Caught unusual exception in
nackMessage for 3339334 msg=3695329 hard STORED
PERSISTENT queue=QUEUE.bill priority=4 lateClone=false
hashCode=26776089
org.jboss.mq.SpyJMSException: Could not update message:
3339334 msg=3695329 hard STORED PERSISTENT
queue=QUEUE.bill priority=4 lateClone=false
hashCode=26776089; - nested throwable:
(java.sql.SQLException: Assert failed:
beginNestedTransactionjava.lang.Exception
at org.hsqldb.Trace.getStackTrace(Unknown Source)
at org.hsqldb.Trace.doAssert(Unknown Source)
at
org.hsqldb.Session.beginNestedTransaction(Unknown Source)
at
org.hsqldb.CompiledStatementExecutor.executeUpdateStatement(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.executeImpl(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.execute(Unknown
Source)
at org.hsqldb.Session.sqlExecute(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at
org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown
Source)
at
org.jboss.resource.adapter.jdbc.CachedPreparedStatement.executeUpdate(CachedPreparedStatement.java:81)
at
org.jboss.resource.adapter.jdbc.WrappedPreparedStatement.executeUpdate(WrappedPreparedStatement.java:227)
at
org.jboss.mq.pm.jdbc2.PersistenceManager.update(PersistenceManager.java:1021)
at
org.jboss.mq.server.BasicQueue.nackMessage(BasicQueue.java:388)
at
org.jboss.mq.server.BasicQueue$RestoreMessageTask.run(BasicQueue.java:1115)
at org.jboss.mq.pm.Tx.commit(Tx.java:188)
at
org.jboss.mq.pm.TxManager.commitTx(TxManager.java:89)
at
org.jboss.mq.server.JMSDestinationManager.transact(JMSDestinationManager.java:435)
at
org.jboss.mq.server.JMSServerInvoker.transact(JMSServerInvoker.java:186)
at
org.jboss.mq.il.jvm.JVMServerIL.transact(JVMServerIL.java:327)
at
org.jboss.mq.Connection.send(Connection.java:1163)
at
org.jboss.mq.SpyXAResourceManager.rollback(SpyXAResourceManager.java:246)
at
org.jboss.mq.SpyXAResource.rollback(SpyXAResource.java:153)
at
org.jboss.tm.TransactionImpl$Resource.rollback(TransactionImpl.java:2257)
at
org.jboss.tm.TransactionImpl.rollbackResources(TransactionImpl.java:1817)
at
org.jboss.tm.TransactionImpl.rollback(TransactionImpl.java:394)
at
org.jboss.tm.TxManager.rollback(TxManager.java:348)
at
org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:323)
at
org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904)
at
org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160)
at org.jboss.mq.SpySession.run(SpySession.java:333)
at
org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180)
at
EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:748)
at java.lang.Thread.run(Thread.java:534)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

693
HyperSQL Database Engine (HSQLDB) / Bugs / #693 IndexOutOfBounds on delete table.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
am using Tomcat 5.0.28, jdk 1.5, HSQLDB 1.8.0_02 and 
access HSQLDB using a datasource. When executing: 
Statement stm = conn.createStatement(); 
stm.execute("DROP TABLE "+name+" IF EXISTS"); 
stm.close(); 
I get the exception below. I recompiles Hypersonic 
with debug.option on and stepped through the code. 
Here are some of my observations: 
In SchemaManager 
void dropTable(Session session, String name, String 
schemaName, 
boolean ifExists, boolean isView, 
boolean cascade) throws HsqlException { 
Table table = null; 
int dropIndex = -1; 
Schema schema = (Schema) schemaMap.get(schemaName); 
for (int i = 0; i < schema.tableList.size(); i++) { 
table = (Table) schema.tableList.get(i); 
if (table.equals(session, name) && isView == 
table.isView()) { 
dropIndex = i; 
break; 
} else { 
table = null; 
} 
} 

if (dropIndex == -1) {
if (ifExists) {
return;
} else {
throw Trace.error(isView ? Trace.VIEW_NOT_FOUND
Trace.TABLE_NOT_FOUND, name); 
} 
} 

session.checkAdmin(); 
session.checkDDLWrite(); 
dropTable(table, cascade); 
session.setScripting(!table.isTemp()); 
session.commit(); 
} 
dropIndex is not -1, so it reaches dropTable method 
call, but in 
void dropTable(Table table, boolean cascade) throws 
HsqlException { 
Schema schema = (Schema) schemaMap.get
(table.getSchemaName()); 
int dropIndex = schema.tableList.getIndex
(table.getName().name); 
if (table.isView()) { 
checkCascadeDropViews((View) table, cascade); 
} else { 
checkCascadeDropReferenced(table, cascade); 
checkCascadeDropViews(table, cascade); 
} 
// get it again as table object might be a different 
one 
table = (Table) schema.tableList.remove(dropIndex); 
removeExportedKeys(table); 
database.getUserManager().removeDbObject(table.getName
()); 
schema.triggerNameList.removeOwner(table.tableName); 
schema.indexNameList.removeOwner(table.tableName); 
schema.constraintNameList.removeOwner
(table.tableName); 
table.dropTriggers(); 
table.drop(); 
} 
dropIndex stays -1 because it's never assigned 
anything else since -1 is returned from the method 
below in HashMappedList: 
protected int getLookup(Object key, int hash) { 
int lookup = hashIndex.getLookup(hash); 
Object tempKey; 
for (; lookup >= 0; lookup = hashIndex.getNextLookup
(lookup)) { 
tempKey = objectKeyTable[lookup]; 
if (key.equals(tempKey)) { 
return lookup; 
} 
} 
return lookup; 
} 
returns -1 
java.lang.IndexOutOfBoundsException 
at org.hsqldb.lib.HashMappedList.checkRange
(HashMappedList.java:188) 
at org.hsqldb.lib.HashMappedList.remove
(HashMappedList.java:85) 
at org.hsqldb.SchemaManager.dropTable
(SchemaManager.java:741) 
at org.hsqldb.SchemaManager.dropTable
(SchemaManager.java:723) 
at 
org.hsqldb.DatabaseCommandInterpreter.processDropTable
(DatabaseCommandInterpreter.java:2940) 
at org.hsqldb.DatabaseCommandInterpreter.processDrop
(DatabaseCommandInterpreter.java:1991) 
at org.hsqldb.DatabaseCommandInterpreter.executePart
(DatabaseCommandInterpreter.java:331) 
at org.hsqldb.DatabaseCommandInterpreter.execute
(DatabaseCommandInterpreter.java:169) 
at org.hsqldb.Session.sqlExecuteDirectNoPreChecks
(Session.java:975) 
at org.hsqldb.Session.execute(Session.java:860) 
at org.hsqldb.jdbc.jdbcStatement.fetchResult
(jdbcStatement.java:1574) 
at org.hsqldb.jdbc.jdbcStatement.execute
(jdbcStatement.java:630) 
The table mentioned is existing.
This exact code runs without any problems in 1.7.2 
HSQLDB version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

694
HyperSQL Database Engine (HSQLDB) / Bugs / #694 The database is already in use by another process (embedded
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I run the following simple skript per jdbc in hsqldb
1.8.0.2 embedded mode twice.
(The bug does not appear in server mode).
The output of the 1st run is OK.
In the 2nd run i become an error.
If i wait 10 seconds i become in the 3rd run the OK output.
----------------------------------------------------
Sample SQL-Skript:
CREATE TABLE T (n int);
INSERT INTO T (n) VALUES (1);
SELECT * FROM T;
DROP TABLE T;
----------------------------------------------------
The output of the 1st and 3rd run:
--> hsqldb: User: "sa", Pwd.: "", jdbc:hsqldb:
C:\db\_data\hsqldb\data\testDatenbank_vonStandalone
Database connection is open
--> SQL-script: C:\temp\t.sql
CREATE TABLE T (n int) 
INSERT INTO T (n) VALUES (1) 
==> 1 row inserted.
SELECT * FROM T
+-------------+
| N |
+-------------+
| 1 |
+-------------+  
==> 1 row counted.
DROP TABLE T 
----------------------------------------------------
The output of the 2nd run:
--> hsqldb: Database connection was closed.
--> hsqldb: User: "sa", Pwd.: "", jdbc:hsqldb:
C:\db\_data\hsqldb\data\testDatenbank_vonStandalone
Database connection opening failed:
java.sql.SQLException: 
The database is already in use by another process: 
org.hsqldb.persist.NIOLockFile@3f87c4d4[file 
=C:\db\_data\hsqldb\data\testDatenbank_vonStandalone.lck,
exists=true, 
locked=false, valid=false, fl =null]:
java.lang.Exception: checkHeartbeat(): 
lock file
[C:\db\_data\hsqldb\data\testDatenbank_vonStandalone.lck]
is 
presumably locked by another process.
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source)
at org.hsqldb.jdbcDriver.getConnection(Unknown Source)
at org.hsqldb.jdbcDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection(Unknown Source)
at java.sql.DriverManager.getConnection(Unknown Source)
at DBuse.openConnection(DBuse.java:78)
at DBexecute.execute(DBexecute.java:113)
at DBexecute.<init>(DBexecute.java:58)
at DBexecute.main(DBexecute.java:27)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

695
HyperSQL Database Engine (HSQLDB) / Bugs / #695 Adding column to table before a column with an index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using 1.8.0.1. Consider the following SQL:
CREATE TABLE testtable (
col_two INT NULL,
col_four INT NULL
);
CREATE INDEX index_four on testtable(col_four);
ALTER TABLE testtable
ADD COLUMN col_one INT NULL BEFORE col_two;
ALTER TABLE testtable
ADD COLUMN col_three INT NULL BEFORE col_four;
The addition of col_one works fine, but the addition of
col_three fails with the error "There is an index on
the column to be removed". It appears that the code is
checking erroneously for indexes on the "BEFORE" column.
I glanced at the source and there does seem to be
common code that deals with addition, modification and
removal of columns, so you can imagine the removal
checking code being confused by the "BEFORE" column.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

696
HyperSQL Database Engine (HSQLDB) / Bugs / #696 HSQL WebServer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We are using hsql webserver to provide a java Applet
through the network.
It seems there is something wrong with request
processing since our applet cannot be downloaded to the
web browser. After a lot of debug and trace into the
processGet method of the webserver it seems that
flushing the output stream doesn't end and the stream
is closed before the applet jar is sent to the browser... 
Very strange isn't it ?
To strange bug, we have found an odd (and dirty) fix:
we added a sleep(2000) between the flush and the close
of the stream. Even if we know that this fix is really
dirty, it works in all cases for us. You should
probably investigate further to find the "real" fix
because all this looks like a thread problem.
NL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

697
HyperSQL Database Engine (HSQLDB) / Bugs / #697 NegativeArraySizeException from readUTF method
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.lang.NegativeArraySizeException
at org.hsqldb.lib.StringConverter.readUTF(Unknown Source)
at org.hsqldb.rowio.RowInputBinary.readString(Unknown
Source)
at org.hsqldb.rowio.RowInputBinary.readChar(Unknown
Source)
at org.hsqldb.rowio.RowInputBase.readData(Unknown Source)
at org.hsqldb.CachedRow.<init>(Unknown Source)
at org.hsqldb.Table$RowStore.get(Unknown Source)
at org.hsqldb.persist.DataFileCache.get(Unknown Source)
at org.hsqldb.Table$RowStore.get(Unknown Source)
at org.hsqldb.Table.getRow(Unknown Source)
at org.hsqldb.DiskNode.findNode(Unknown Source)
at org.hsqldb.DiskNode.getRight(Unknown Source)
at org.hsqldb.Index.child(Unknown Source)
at org.hsqldb.Index.insert(Unknown Source)
at org.hsqldb.Table.indexRow(Unknown Source) at
org.hsqldb.Table.insertNoCheck(Unknown Source)
at org.hsqldb.Table.insertRow(Unknown Source) at
org.hsqldb.Table.insert(Unknown Source)
at
org.hsqldb.CompiledStatementExecutor.executeInsertValuesStatement(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.executeImpl(Unknown
Source)
at
org.hsqldb.CompiledStatementExecutor.execute(Unknown
Source)
at org.hsqldb.Session.sqlExecute(Unknown Source) at
org.hsqldb.Session.execute(Unknown Source)
at
org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown
Source) at
org.jboss.resource.adapter.jdbc.CachedPreparedStatement.executeUpdate(CachedPreparedStatement.java:81)
I have the database file, if interested. It is quite
large.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

698
HyperSQL Database Engine (HSQLDB) / Bugs / #698 English collation is not supported
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran the following command 
SET DATABASE COLLATION 'English';
but I got an exception. All the other collation names
are working exceptin 'English'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

699
HyperSQL Database Engine (HSQLDB) / Bugs / #699 NullPointerException while reading a text table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get a NPE when I try to set the table source (SET
TABLE test SOURCE
"allow_full_path=true;mytest.data;ignore_first=true;encoding=UTF-8;all_quoted=false;fs=\semi").
StackTrace
NullPointerException:
at
org.hsqldb.persist.DataFileCache.get(DataFileCache.java:551)
at org.hsqldb.Table$RowStore.get(Table.java:3453)
at
org.hsqldb.TextTable.openCache(TextTable.java:101)
at
org.hsqldb.TextTable.setDataSource(TextTable.java:171)
at
org.hsqldb.DatabaseCommandInterpreter.processSet(DatabaseCommandInterpreter.java:2274)
at
org.hsqldb.DatabaseCommandInterpreter.executePart(DatabaseCommandInterpreter.java:305)
at
org.hsqldb.DatabaseCommandInterpreter.execute(DatabaseCommandInterpreter.java:169)
at
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Session.java:975)
at org.hsqldb.Session.execute(Session.java:860)
at
org.hsqldb.jdbc.jdbcStatement.fetchResult(jdbcStatement.java:1574)
at
org.hsqldb.jdbc.jdbcStatement.execute(jdbcStatement.java:630)
...
The file:
name;art;labelD;labelF
"A";"TestArt";"LabelD";"LabelF"
"B";"TestArt";"b-LabelD";"b-LabelF"
I traced it down into the code and it looks like hsqldb
doesn't count the leading quote as a quote and
therefore misses the end of the first data line (it
assumes it's still inside a quotation and therefore the
newline is part of the value. The NPE is due to the
parser reaching the end of the file and skipping the
last (empty) line. This leads to not reading a real
line of data which causes the NPE inside the
DataFileCache#get (the object got from the store is null).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

700
HyperSQL Database Engine (HSQLDB) / Bugs / #700 allow double args for modulo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently mod() only allows ints, so you get weird
results if you try to use it on a table with doubles.
For example:
call mod(4.4, 2)
gives you 0 when you would expect .4.
I think the mod function should be expended to allow
double arguments. This might be as simple as changing
public static int mod(int i1, int i2) { 
return i1 % i2;
}
to
public static double mod(double i1, double i2) { 
return i1 % i2;
}
in Library.java and updating
src/org/hsqldb/resources/org_hsqldb_Library.properties.
But if mod should only be used with integer arguments
for some other reason, then mod(4.4, 2) should cause an
error instead of converting the arguments to integers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

701
HyperSQL Database Engine (HSQLDB) / Bugs / #701 Failing NULL value checks with complex expressions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are still problems with complex expressions
evaluating to NULL in hsqldb 1.8.0.2, as I've already
mentioned in
Bug 1242448 [COALESCE/NVL/IFNULL(MAX(...), ...)
returns NULL]
and
Patch 1243098 [DECODE function].
After executing
CREATE TABLE DUAL(DUMMY VARCHAR);
INSERT INTO DUAL VALUES('X');
in hsqldb 1.8.0.2 the following calls produce false
results:
SELECT CASE NULLIF(23,23) WHEN NULLIF(23,23) THEN 1
ELSE 2 END FROM DUAL; -- 2!!
SELECT CASE NULLIF(23,23) WHEN null THEN 1 ELSE 2 END
FROM DUAL; -- 2!!
SELECT CASE null WHEN null THEN 1 ELSE 2 END FROM
DUAL; -- error!!
Suggestion: The evaluation error for NULL values should
be fixed somewhere in the object comparison code as it
affects some more functions and expressions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

702
HyperSQL Database Engine (HSQLDB) / Bugs / #702 NULL Pointer Exception from DatabaseMetaData
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A NULL pointer exception is thrown if the
jdbcDatabaseMetaData class is instantiated from a
stored procedure. This occurs if the getMetaData method
of the Connection object passed into the procedure by
the database server is used. 
The problem appears to be that the connProperties
member of jdbcConnection is accessed directly from the
jdbcDatabaseMetaData constructor. The Connection that
is passed to stored procedures as an automatic first
argument has connProperties set to NULL.
I have added a check to jdbcDatabaseMetaData to check
for NULL, and setting the useSchemaDefault to true by
default. I have noticed no adverse effects; all
DatabaseMetaData functionality seems to be fine.
However, this is just a work-around.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

703
HyperSQL Database Engine (HSQLDB) / Bugs / #703 Query failures/syntax errors.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following have been tried on 1.7.3.3 and 1.8.0.2 
and the results were the same. 1.8.0.4 failed as we 
could not get the server started. 
We are looking to find versions of the queries that 
will work across HSQL, Oracle and SQL Server. 
Example 1
This query works as written:
Select e.UserID, e.EventTime, cast (e.EventTime as 
DATE),
l.LogStart, cast(l.LogStart as DATE)
from LogEvent e left outer join LogDaily l on (
e.UserID = l.UserID)
This does not:
Select e.UserID, e.EventTime, cast (e.EventTime as 
DATE),
l.LogStart, cast(l.LogStart as DATE)
from LogEvent e left outer join LogDaily l on (
cast(e.EventTime as DATE) = cast(l.LogStart as DATE)
This does
Select e.UserID, e.EventTime, e.EventDate, l.LogStart, 
LogStartDate
from (Select UserID, EventTime, cast(EventTime as 
DATE) as EventDate
from LogEvent) e
left outer join (Select LogStart, cast(LogStart as 
DATE) as LogStartDate
from LogDaily) l
on (e.EventDate = l.LogStartDate)
Example 2
This query works as written:
Select e.UserID, e.EventTime, DAYOFYEAR(e.EventTime ),
l.LogStart, DAYOFYEAR(l.LogStart)
from LogEvent e left outer join LogDaily l on (
e.UserID = l.UserID)
This does not:
Select e.UserID, e.EventTime, DAYOFYEAR(e.EventTime ),
l.LogStart, DAYOFYEAR(l.LogStart)
from LogEvent e left outer join LogDaily l on (
DAYOFYEAR(e.EventTime) = DAYOFYEAR(l.LogStart)
A strategy similar to Example 1 works here as well.
Example 3
This does work:
Select Cast(EventTime as DATE) as EventDate from 
LogEvent
This does not work:
Select Cast(EventTime as DATE) as EventDate, count(*) 
from LogEvent
Group by EventDate
A strategy similar to Example 1 works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

704
HyperSQL Database Engine (HSQLDB) / Bugs / #704 IndexOutOfBoundsException, SHUTDOWN deleted .data file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB 1.8.0.1 ... The DB was probably nearing the 1GB
mark.
2006-04-26 20:21:53,961 WARN [TransactionImpl]
(BL28008R CONN) XAException:
tx=TransactionImpl:XidImpl[FormatId=257,
GlobalId=bl2-prod/11577405, BranchQual=,
localId=11577405] errorCode=XAER_RMERR
org.jboss.mq.SpyXAException: - nested throwable:
(org.jboss.mq.SpyTransactionRolledBackException:
Transaction was rolled back.; - nested throwable:
(org.jboss.mq.SpyJMSException: Could not remove
message: 2728396 msg=332514 hard STORED PERSISTENT
queue=QUEUE.smxsend priority=4 lateClone=false
hashCode=2046943; - nested throwable:
(java.sql.SQLException: S1000 General error
java.lang.IndexOutOfBoundsException in statement
[UPDATE JMS_MESSAGES SET TXID=?, TXOP=? WHERE
MESSAGEID=? AND DESTINATION=?])))
at
org.jboss.mq.SpyXAResource.commit(SpyXAResource.java:87)
at
org.jboss.tm.TransactionImpl$Resource.commit(TransactionImpl.java:2233)
at
org.jboss.tm.TransactionImpl.commitResources(TransactionImpl.java:1764)
at
org.jboss.tm.TransactionImpl.commit(TransactionImpl.java:322)
at
org.jboss.tm.TxManager.commit(TxManager.java:224)
at
org.jboss.jms.asf.StdServerSession.onMessage(StdServerSession.java:341)
at
org.jboss.mq.SpyMessageConsumer.sessionConsumerProcessMessage(SpyMessageConsumer.java:904)
at
org.jboss.mq.SpyMessageConsumer.addMessage(SpyMessageConsumer.java:160)
at org.jboss.mq.SpySession.run(SpySession.java:333)
at
org.jboss.jms.asf.StdServerSession.run(StdServerSession.java:180)
at
EDU.oswego.cs.dl.util.concurrent.PooledExecutor$Worker.run(PooledExecutor.java:748)
at java.lang.Thread.run(Thread.java:534)
Caused by:
org.jboss.mq.SpyTransactionRolledBackException:
Transaction was rolled back.; - nested throwable:
(org.jboss.mq.SpyJMSException: Could not remove
message: 2728396 msg=332514 hard STORED PERSISTENT
queue=QUEUE.smxsend priority=4 lateClone=false
hashCode=2046943; - nested throwable:
(java.sql.SQLException: S1000 General error
java.lang.IndexOutOfBoundsException in statement
[UPDATE JMS_MESSAGES SET TXID=?, TXOP=? WHERE
MESSAGEID=? AND DESTINATION=?]))
at
org.jboss.mq.server.JMSDestinationManager.transact(JMSDestinationManager.java:442)
at
org.jboss.mq.server.JMSServerInvoker.transact(JMSServerInvoker.java:186)
at
org.jboss.mq.il.jvm.JVMServerIL.transact(JVMServerIL.java:327)
at
org.jboss.mq.Connection.send(Connection.java:1163)
at
org.jboss.mq.SpyXAResourceManager.commit(SpyXAResourceManager.java:149)
at
org.jboss.mq.SpyXAResource.commit(SpyXAResource.java:83)
... 11 more
Caused by: org.jboss.mq.SpyJMSException: Could not
remove message: 2728396 msg=332514 hard STORED
PERSISTENT queue=QUEUE.smxsend priority=4
lateClone=false hashCode=2046943; - nested throwable:
(java.sql.SQLException: S1000 General error
java.lang.IndexOutOfBoundsException in statement
[UPDATE JMS_MESSAGES SET TXID=?, TXOP=? WHERE
MESSAGEID=? AND DESTINATION=?])
at
org.jboss.mq.pm.jdbc2.PersistenceManager.remove(PersistenceManager.java:1136)
at
org.jboss.mq.server.BasicQueue.acknowledge(BasicQueue.java:564)
at
org.jboss.mq.server.JMSQueue.acknowledge(JMSQueue.java:156)
at
org.jboss.mq.server.ClientConsumer.acknowledge(ClientConsumer.java:328)
at
org.jboss.mq.server.JMSDestinationManager.acknowledge(JMSDestinationManager.java:519)
at
org.jboss.mq.server.JMSDestinationManager.transact(JMSDestinationManager.java:431)
... 16 more
Caused by: java.sql.SQLException: S1000 General error
java.lang.IndexOutOfBoundsException in statement
[UPDATE JMS_MESSAGES SET TXID=?, TXOP=? WHERE
MESSAGEID=? AND DESTINATION=?]
at org.hsqldb.jdbc.Util.throwError(Unknown Source)
at
org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown
Source)
at
org.jboss.resource.adapter.jdbc.CachedPreparedStatement.executeUpdate(CachedPreparedStatement.java:81)
at
org.jboss.resource.adapter.jdbc.WrappedPreparedStatement.executeUpdate(WrappedPreparedStatement.java:227)
at
org.jboss.mq.pm.jdbc2.PersistenceManager.remove(PersistenceManager.java:1124)
... 21 more
Unfortunately, the SHUTDOWN command deleted the
existing data file (but the .log was preserved)
2006-04-26 20:27:17,848 WARN [HypersonicDatabase] ( )
Stopping failed
jboss:database=DefaultDS,service=Hypersonic
java.sql.SQLException: error in script file line: 10
S1000 General error java.lang.IndexOutOfBoundsException
in statement [SET TABLE JMS_MESSAGES INDEX'184570416
87385128 187818128 0'] in statement [SHUTDOWN COMPACT]
at org.hsqldb.jdbc.Util.sqlException(Unknown
Source)
at
org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown Source)
at
org.hsqldb.jdbc.jdbcStatement.executeQuery(Unknown Source)
at
org.jboss.jdbc.HypersonicDatabase.stopStandaloneDatabase(HypersonicDatabase.java:733)
at
org.jboss.jdbc.HypersonicDatabase.stopService(HypersonicDatabase.java:713)
at
org.jboss.system.ServiceMBeanSupport.jbossInternalStop(ServiceMBeanSupport.java:300)
at
org.jboss.system.ServiceMBeanSupport.jbossInternalLifecycle(ServiceMBeanSupport.java:232)
at
sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

705
HyperSQL Database Engine (HSQLDB) / Bugs / #705 SCHEMA and reloading server make tables public
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These are the steps I am performing: 
- Define my schema and nest all of the tables and
indexes with that definitions. These are CACHED tables.
Run with no problem 
- I insert some data into a couple of maintenance
tables that I just created. 
- I can select the table data by using the schema name.
It is running as designed. 
- I then take the server down cold and restart it I see
the following. The schema that I created is still
there.but the tables that I defined to that schema are
now not associated with it. The tables are now public. 
I am running the current 1.8.0.4
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

706
HyperSQL Database Engine (HSQLDB) / Bugs / #706 Erroneous rejection of input sql?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using HSQLDB 1.8.0.
The following query:
Select Top 100 * From SampleStars as a Group By
a.RA, a.DEC 
fails with the following error:
-----
java.sql.SQLException: Not in aggregate function or
group by clause: org.hsqldb.Expression@30cd64 in
statement [Select Top 100 * From SampleStars as a Group
By a.RA, a.DEC ] using 'Select Top 100 * From
SampleStars as a Group By a.RA, a.DEC ':
-----
Since RA and DEC are valid columns in the SampleStars
table, I would expect this query to work - it certainly
does on the other DBMSs that I've tried.
Is this a bug or a feature request from your point of view?
NB The query :
Select Top 100 * From SampleStars as a 
is fine.
Thanks,
Kona Andrews / kea@ast.cam.ac.uk
AstroGrid project
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

707
HyperSQL Database Engine (HSQLDB) / Bugs / #707 docs for SQL features of TEXT tables erroneous
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think HSQL is a great application and I love the text
table feature, but would you please change the
documentation on Text Tables to indicate that (as fredt
stated in April 2005) "Alterations to the table
structure are not supported for TEXT tables," even in
version 1.8.0.4
As was pointed out in the thread below, the docs
erroneously indicate that full SQL is supported by text
tables. The cryptic, "This operation is not supported
in statement <alter statement>" does little to disabuse
the user of that misconception.
From: fredt <fredt@us...>
Re: Add Column-not working for text tables
2005-04-22 11:51
Alterations to the table structure are not supported
for TEXT tables.
Fred
----- Original Message ----- 
From: <sudhakar@da...>
To: <hsqldb-user@li...>
Sent: 22 April 2005 06:54
Subject: [Hsqldb-user] Add Column-not working for text
tables
Hi,
I tried adding a column to a TEXT table through
the HsqlDbManager, it 
gave the following error-
This Operation is not supported in Statement[alter
table dual add column 
test_column varchar(5)]:Error code-73
Cant we add column"s in TEXT tables as we do in normal
tables ?.As described 
in the documentation "The full range of SQL queries
can be performed on 
these files", we should be able to alter the text
table. Am i missing 
something?
please reply,
thanking in advance,
sudhakar.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

708
HyperSQL Database Engine (HSQLDB) / Bugs / #708 Possible bug causing exception in subselect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code throws an exception with a message
"Column not found: MY_VALUE in statement". Note the
very similar query in the comment that happens to do
the same thing, but does not throw an exception:
///////////////////////////////////
Class.forName("org.hsqldb.jdbcDriver");
Connection connection =
DriverManager.getConnection("jdbc:hsqldb:mem:"+this.hashCode(),
"sa", "");
String createTableMessages = "CREATE TABLE TESTTABLE
(ID IDENTITY, MY_VALUE VARCHAR, MY_ROW_TYPE VARCHAR)";
Statement stmt = connection.createStatement();
stmt.executeUpdate(createTableMessages);
stmt.close();
PreparedStatement insertStatement = connection
.prepareStatement("INSERT INTO TESTTABLE (MY_VALUE,
MY_ROW_TYPE) VALUES ('A', 'B')");
insertStatement.execute();
PreparedStatement selectLatestExecutionStatement =
connection
.prepareStatement("SELECT ID, MY_VALUE FROM TESTTABLE
AS TBL1 WHERE ID = (SELECT MAX(ID) AS ID FROM TESTTABLE
AS TBL2 WHERE TBL1.MY_VALUE=TBL2.MY_VALUE)");
selectLatestExecutionStatement.execute();
// NOTE that if you use IN instead of = to join
// the subquery, you do not get an exception. E.g.
//
//SELECT ID, MY_VALUE FROM TESTTABLE AS TBL1 WHERE ID
//IN (SELECT MAX(ID) AS ID FROM TESTTABLE AS TBL2 WHERE 
//TBL1.MY_VALUE=TBL2.MY_VALUE)
////////////////////////////////////
This is on version 1.8.0.4, binary release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

709
HyperSQL Database Engine (HSQLDB) / Bugs / #709 NullPointerException while calling Server.shutdown() method
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
i'm starting and stopping a hsqldb server (1.8.0.4) 
from my application. 
If i want to stop the hsqldb server i use the shutdown
() from the org.hsqldb.Server class. While executing 
the shutdown() method it came to the following 
NullPointerException 
[Server@15b9e68]: Initiating shutdown sequence... 
[Server@15b9e68]: Initiating shutdown sequence... 
Exception in thread "HSQLDB Server @15b9e68" 
java.lang.NullPointerException 
at org.hsqldb.Server.shutdown(Unknown Source) 
at org.hsqldb.Server.run(Unknown Source) 
at org.hsqldb.Server.access$000(Unknown Source) 
at org.hsqldb.Server$ServerThread.run(Unknown Source) 
[Server@15b9e68]: Shutdown sequence completed in 100 
ms. 
[Server@15b9e68]: 2006-05-09 12:32:16.953 SHUTDOWN : 
System.exit() was not called 
It seems that the "protected void shutdown(boolean 
error)" method called two times. One time from me and 
another time from the finally statement at the end of 
the run() method in the Server class which is called 
after closing the socket from the first running 
shutdown() method. I think both methods runs at the 
same time and without synchronize this error occurs. 
So I found a solution for that problem. I 
changed "protected void shutdown(boolean error)" 
to "protected synchronized void shutdown(boolean 
error)". This change make sure that only one shutdown
() method is executed and not two or more.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

710
HyperSQL Database Engine (HSQLDB) / Bugs / #710 hoe to get next value of sequence
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i want next value of sequence to store this as a
student ID. for example the rows of table are student
ID (integer),name (String) and Data of join(Date).in
application i called sequence.nextval to getting unique
ID for student to store student information. when i
call this statement like seq_student.nextval which is
showing syntex error.how can i solve this
problem.please give a solution.while inserting how to
get seq_student.nextval.
my query is "insert into student
values(seq_student.nextval,name,12-03-2003)";
it is showing syntex error.please tell me how to solve
this solution.
sorry for my bad english.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

711
HyperSQL Database Engine (HSQLDB) / Bugs / #711 Column Alias Incompatibility   
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB supports this: 
SELECT ID I FROM TEST WHERE I>0 
Other databases don't support it. I think HSQLDB
shouldn't support it as well, as it leads to
incompatibilities: the same query means something else
depending on the database used. Example: 
CREATE TABLE TEST(ID INT); 
INSERT INTO TEST VALUES(1); 
SELECT ID+1 AS ID FROM TEST WHERE ID>1; 
HSQLDB returns 1 row, all other databases 0 rows. It is
a valid query for all databases, but the result is
different. This is really bad if you want to write an
application that runs on multiple databases. 
I suggest the behaviour should be changed in HSQLDB so
it is compatible to all other databases. 
Thomas 
(P.S. this is a forum post, but as I didn't get any
feedback there I create a bug entry for it).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

712
HyperSQL Database Engine (HSQLDB) / Bugs / #712 Column Alias Incompatibility   
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB supports this: 
SELECT ID I FROM TEST WHERE I>0 
Other databases don't support it. I think HSQLDB
shouldn't support it as well, as it leads to
incompatibilities: the same query means something else
depending on the database used. Example: 
CREATE TABLE TEST(ID INT); 
INSERT INTO TEST VALUES(1); 
SELECT ID+1 AS ID FROM TEST WHERE ID>1; 
HSQLDB returns 1 row, all other databases 0 rows. It is
a valid query for all databases, but the result is
different. This is really bad if you want to write an
application that runs on multiple databases. 
I suggest the behaviour should be changed in HSQLDB so
it is compatible to all other databases. 
Thomas 
(P.S. this is a forum post, but as I didn't get any
feedback there I create a bug entry for it).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

713
HyperSQL Database Engine (HSQLDB) / Bugs / #713 NullPointerException in jdbcConnection.close()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb v1.8.0.4
When I use Eclipse to turn on a break point exception for
NullPointerException I see that the Finalizer thread is
throwing a NullPointerException in
jdbcConnection.close() if the Connection object has
already been closed.
According to the source code there can be only one culprit:
sessionProxy.close();
should be 
if (sessionProxy != null) {
sessionProxy.close();
}
Thanks for HSQLDB !
Tony.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

714
HyperSQL Database Engine (HSQLDB) / Bugs / #714 Expression.toString makes debugging difficult
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ERROR hibernate.util.JDBCExceptionReporter - Not in
aggregate function or group by clause: org.hsqld
b.Expression@182ef6b in statement [select top ?
count(distinct context_id) as cnt, org_id from (sele
ct context_id, org_id from spm_invocation where
invoke_date between ? and ? and bs_id = ? group by
org_id, context_id) order by 1 DESC]
Note the Expression.toString() does not return anything
of any use so it is impossible to know exactly which
part of this query is causing a problem. I had to plug
it into mysql to get more helpful info.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

715
HyperSQL Database Engine (HSQLDB) / Bugs / #715 Delete with unknown column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Having a table 'foo' with one column 'bar', the
following query returns an update count of '0' (zero):
"delete from foo where xyz = 'bla'". I would have
expected an exception, like "column 'xyz' not found for
table 'bla'" (at least Oracle behaves like that).
Did I miss something or is it a bug?
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

716
HyperSQL Database Engine (HSQLDB) / Bugs / #716 Not a condition error when alias=real name
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1.8.0.4
using the sample database,
SELECT SUM(TOTAL) AS TOTAL
FROM INVOICE
HAVING SUM(TOTAL) > 0
leads to the error
Not a condition/Error Code: -106
After changing the alias from TOTAL to TOTAL1 
(something different from the real name), the error 
is evaded.
The software I'm using needs to set an alias with the 
same name as the real column name. Needs to have it 
fixed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

717
HyperSQL Database Engine (HSQLDB) / Bugs / #717 HSQL startup too slowly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Now I use HSQL text DB to store data which are saved 
into .CSV files. In the HSQL text DB, there are five 
text tables, one of the tables is much larger than 
others, called [table A]. 
I do a performance test for my application, made the 
HSQL DB be about 500M Bytes. I think there are about 1 
million records in [table A]. Then I restart the 
application, it cost nearly 1 hour to startup the HSQL 
text DB, too slowly. And after the HSQL text DB 
startup, almost any operation could not be processed.
How to resolve the problems? thanks very much!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

718
HyperSQL Database Engine (HSQLDB) / Bugs / #718 SELECT: S1000 General error java.util.NoSuchElementException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Simple SELECT statements like SELECT COUNT(*) FROM 
TABLE fail:
Unable to get row count for table PUBLIC.SENDJOBS.
Using value '0': java.sql.SQLException: S1000 General 
error java.util.NoSuchElementException
java.util.NoSuchElementException
at 
org.hsqldb.Index$IndexRowIterator.nextUnknown Source)
at org.hsqldb.TableFilter.next(Unknown Source)
at org.hsqldb.Select.buildResult(Unknown 
Source)
at org.hsqldb.Select.getSingleResult(Unknown 
Source)
at org.hsqldb.Select.getResult(Unknown Source)
at 
org.hsqldb.CompiledStatementExecutor.executeSelectState
ment(Unknown Source)
at 
org.hsqldb.CompiledStatementExecutor.executeImpl
(Unknown Source)
at org.hsqldb.CompiledStatementExecutor.execute
(Unknown Source)
at 
org.hsqldb.Session.sqlExecuteCompiledNoPreChecks
(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.executePart
(Unknown Source)
at 
org.hsqldb.DatabaseCommandInterpreter.execute(Unknown 
Source)
at 
org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown 
Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.fetchResult
(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.executeQuery
(Unknown Source)
at 
org.hsqldb.util.DatabaseManagerSwing.getRowCounts
(Unknown Source)
Database seems corrupted. Files are available.
Are there any tools available to repair hsqldb files?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

719
HyperSQL Database Engine (HSQLDB) / Bugs / #719 Refer to constants by name in Server.getState() javadoc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Clarify javadoc of Server.getState():
from:
* Typically, this will be one of: <p>
*
* <ol>
* <li>SERVER_ONLINE
* <li>SERVER_OPENING
* <li>SERVER_CLOSING
* <li>SERVER_SHUTDOWN
* </ol>
to 
* Typically, this will be one of: <p>
*
* <ol>
* <li>ServerConstants.SERVER_STATE_ONLINE
* <li>ServerConstants.SERVER_STATE_OPENING
* <li>ServerConstants.SERVER_STATE_CLOSING
* <li>ServerConstants.SERVER_STATE_SHUTDOWN
* </ol>
I'm reporting this because I had to look at the source
to find out the symbolic name of the constants.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

720
HyperSQL Database Engine (HSQLDB) / Bugs / #720 Max Aggregate function does not work for me
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have this table schema:
create table CORE_COMPANY (id bigint generated by
default as identity (start with 1), name varchar(255),
taxID varchar(255), dunsNumber varchar(255),
doingBusinessAs varchar(255), legalClassification
varchar(255), industryCode varchar(255), headCount
varchar(255), description varchar(255),
organizationalUnitName varchar(255), internetWebAddress
varchar(255), companyLogo varchar(255), primary key (id))
create table CORE_COMP_NOTE (ID_COMPANY bigint not
null, ID_NOTE bigint not null, primary key (ID_COMPANY,
ID_NOTE), unique (ID_NOTE))
create table CORE_NOTE (CORE_NOTE_ID bigint not null,
body varchar(255), primary key (CORE_NOTE_ID))
create table FWK_SOSINFO (id bigint generated by
default as identity (start with 1), type varchar(255),
creationTime timestamp, modifiedTime timestamp,
creatorID bigint, modifierID bigint, primary key (id))
alter table CORE_COMP_NOTE add constraint
CORE_COMP_NOTE_NOTE_FK foreign key (ID_NOTE) references
CORE_NOTE
alter table CORE_COMP_NOTE add constraint
CORE_COMP_NOTE_COMP_FK foreign key (ID_COMPANY)
references CORE_COMPANY
- When i run the following query:
select company.id as companyID,
max(noteInfo.creationTime) as noteCreationTime,
note.body as noteBody, note.CORE_NOTE_ID as noteID
from CORE_COMPANY company left outer join
CORE_COMP_NOTE companyNote on
company.id=companyNote.ID_COMPANY
left outer join CORE_NOTE note
on companyNote.ID_NOTE=note.CORE_NOTE_ID
left outer join FWK_SOSINFO
noteInfo on note.CORE_NOTE_ID=noteInfo.id
group by company.id
order by companyID asc, noteCreationTime asc
I get an exception:
"Not in aggregate function or group by clause"
The same query in posgrees and MySQL works fine.
Regards, Pablo
PS: I've tried this with hsqdb v 1.8.0.5 and 1.8.0.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

721
HyperSQL Database Engine (HSQLDB) / Bugs / #721 getColumnClassName returns "double" for function columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Java API for 
ResultSetMetaData.getColumnClassName(int i) says that 
it should return the "fully-qualified name of the Java 
class" type that will be returned by getObject for a 
column.
However, when it is called for a column that is the 
result of a function returning a double, the result is 
the String "double". Since this is not a class name, 
it cannot be used to get a Class object through 
Class.forName. It also does not follow the description 
quoted above.
This can be most easily demonstrated by opening a 
connection to an existing database (server or local), 
choosing a table from that database, and running the 
query: "select pi() from TABLE_NAME", replacing the 
table name. This will need to be done in code, so that 
you can call getResultSetMetaData() on the ResultSet, 
and then call getColumnClassName(1) on the meta data 
object. It will return "double".
This does not only happen with pi, however. I first 
noticed it with floor, but have tested it with acos 
and abs as well.
For, example in an table called EXAMPLE with a column 
a of type bigint, and data:
a = (100, 150, 200) Each item is a record.
Execute the query "SELECT floor(A/5) from EXAMPLE" and 
you will get the same results from above.
One workaround is to nest the select statement inside 
another statement, such as "select * from (select 
floor(a/5) from example)" This fixes the problem, 
causing getColumnClassName to return 
"java.lang.Double," but this isn't feasible for our 
application.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

722

    
        SourceForge.net: Log In to SourceForge.net
    

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

723
HyperSQL Database Engine (HSQLDB) / Bugs / #723 When adding a primary two column in one table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Error When adding a primary, two column in one table. 
find HSQL1.8.0rc1 ~ HSQL1.8.0rc5 
error message :
[Server@1270b73]: [Thread[main,5,main]]: checkRunning
(false) entered 
[Server@1270b73]: [Thread[main,5,main]]: checkRunning
(false) exited 
[Server@1270b73]: Startup sequence initiated from main
() method 
[Server@1270b73]: Loaded properties from 
[C:\hsqldb_1_8_0_5\hsqldb\data\server.properties] 
[Server@1270b73]: Initiating startup sequence... 
[Server@1270b73]: Server socket opened successfully 
in 16 ms. 
[Server@1270b73]: [Thread[HSQLDB Server 
@1270b73,5,main]]: Database [index=0db=file:test, 
alias=] di 
d not open: org.hsqldb.HsqlException: error in script 
file line: 16 org.hsqldb.HsqlException: Unique 
constraint violation: SYS_IDX_46 
[Server@1270b73]: [Thread[HSQLDB Server 
@1270b73,5,main]]: run()/openDatabases(): 
[Server@1270b73]: Initiating shutdown sequence... 
[Server@1270b73]: Shutdown sequence completed in 0 
ms. 
[Server@1270b73]: 2006-08-23 18:11:49.156 SHUTDOWN : 
System.exit() is called next 
============================================ 
run this script :
CREATE TABLE TMODEL_DOC_DESCR ( TMODEL_KEY VARCHAR
(41) NOT NULL, TMODEL_DOC_DESCR_ID INT NOT NULL, 
LANG_CODE VARCHAR(5) NULL, DESCR VARCHAR(255) NOT 
NULL ) 
ALTER TABLE TMODEL_DOC_DESCR ADD CONSTRAINT PK 
PRIMARY KEY (TMODEL_KEY, TMODEL_DOC_DESCR_ID) 
INSERT INTO TMODEL_DOC_DESCR 
(TMODEL_KEY,TMODEL_DOC_DESCR_ID,LANG_CODE,DESCR) 
VALUES ('uuid:DB77450D-9FA8-45D4-A7BC-
04411D14E384',0,'en','This tModel defines the UNSPSC 
product taxonomy.') 
INSERT INTO TMODEL_DOC_DESCR 
(TMODEL_KEY,TMODEL_DOC_DESCR_ID,LANG_CODE,DESCR) 
VALUES ('uuid:DB77450D-9FA8-45D4-A7BC-
04411D14E384',1,'en','This tModel defines the UNSPSC 
product taxonomy.') 
=================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

724
HyperSQL Database Engine (HSQLDB) / Bugs / #724 PK constraint picking up name of FK constraint.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run the ant build file in the attached archive. It
creates a small db in /tmp/bugdb The script will
execute successfully. Run it again. It will remove the
contents of the existing db and recreate it - again
successfully. Run the script a third time and it breaks
with the following error:
java.sql.SQLException: error in script file line: 15
Constraint already exists: FK_QUESTIONS_1_FROM_N_UQID
in statement [CREATE CACHED TABLE
QUESTIONS_1_FROM_N(UQID INTEGER NOT NULL,ANSWER
VARCHAR(255),ANSWER_COUNT INTEGER,CONSTRAINT
FK_QUESTIONS_1_FROM_N_UQID PRIMARY KEY(UQID),CONSTRAINT
FK_QUESTIONS_1_FROM_N_UQID FOREIGN KEY(UQID) REFERENCES
QUESTIONS(UQID) ON DELETE CASCADE,CONSTRAINT
FK_QUESTIONS_1_FROM_N_ANSWER FOREIGN KEY(UQID,ANSWER)
REFERENCES POSSIBLE_1_FROM_N_ANSWERS(UQID,ANSWER))]
The constraint FK_QUESTIONS_1_FROM_N_UQID was given to
a foreign key constraint and yet the script file
assigns it to a primary key constraint. This is very
wierd and very wrong.
Possibly related to 1387237 ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

725
HyperSQL Database Engine (HSQLDB) / Bugs / #725 Add OSX-friendly path to search for hsqldb.cfg
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OS X likes to have non-system daemon configs stored in
/Library rather than /etc. Please add the following
path to the hsqldb $candidate search path:
/Library/Hsqldb/conf/hsqldb.cfg
and 
/Library/Hsqldb/hsqldb.cfg
(Yes, Hsqld is capitalized on purpose).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

726
HyperSQL Database Engine (HSQLDB) / Bugs / #726 Tables/Views not found after db restart.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After running the attaced build set (similar to that
used to identify bug #1547479), I reconnect to the
database and a large number of tables and views are
missing. No trace of them exists in either the .script
or .log file and no data can be selected.
There appears to be a cut-off point after which all
table creation statements, data entries and view
creations are lost. No SQL error is reported in the
schema creation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

727
HyperSQL Database Engine (HSQLDB) / Bugs / #727 Correct HSQL version number
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi there,
HSQL Database Engine - 1.8.0
is the result of 
logger.info(metaData.getDatabaseProductName() + " - "
+
metaData.getDatabaseProductVersion());
Yet I'm using 1.8.0 version 5.
I suppose there were fixes between 1.8.0.1 and xxx.5 ?
For correctness, I believe the version number should be
the full one.
cheers,
Geert
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

728
HyperSQL Database Engine (HSQLDB) / Bugs / #728 The .script got corrupted!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When connecting the following NPE occurs:
SQL error: S1000 General error 
java.lang.NullPointerException in statement [SET TABLE 
STA_NODE INDEX'32 32 2'] error-code=40, state=S1000
What has happened, why is my .script file corrupted? 
Please test the attached database to reproduce the 
problem.
How can I restore the database?
Best Regards,
Krister
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

729
HyperSQL Database Engine (HSQLDB) / Bugs / #729 Version Number out of date
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL Version Number
org.hsqldb.persist.HsqlDatabaseProperties.THIS_FULL_VERSION
is out of date: 1.8.0.5 (needs to be 1.8.0.7).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

730
HyperSQL Database Engine (HSQLDB) / Bugs / #730 Negative SQLException error code
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current behavior:
The method org.hsqldb.Trace.error(int, int, 
final Object[]) has the last
line "return new HsqlException(sb.toString(), state,
-code);" with negative error code. This adds Math.abs()
confusion to client code like:
try {
openDB();
} catch (SQLException e) {
if (Math.abs(e.getErrorCode()) ==
Trace.DATABASE_NOT_EXISTS) {
createDB();
} else {
throw e;
}
}
Expected behavior: SQLException.getErrorCode() returns
int value which could be compared to Trace.XXXX without
Math.abs()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

731
HyperSQL Database Engine (HSQLDB) / Bugs / #731 NullPointerException on Tomcat 5.5 at org.hsqldb.lib.HsqlTim
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are experiencing a persistent NPE after database 
shutdown with an application running in Tomcat 5.5.
Stack track from catalina.out follows:
Exception in thread "HSQLDB Timer @165d2be" 
java.lang.NullPointerException
at org.hsqldb.lib.HsqlTimer.nextTask(Unknown Source)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(Unknown 
Source)
at java.lang.Thread.run(Thread.java:595)
HSQLDB version is 1.8.0.7
Tomcat version is 5.5.20. 
The error does not seem to manifest on Tomcat 5.0.28.
We do an explicit SQL SHUTDOWN call from the 
application when the application is shutdown.
With "hsqldb.applog=1" we see "Database closed" in 
the .app.log file. A few seconds later the above 
stack dump is generated in catalina.out.
.properties file follows:
hsqldb.script_format=0
runtime.gc_interval=0
hsqldb.applog=1
sql.enforce_strict_size=false
hsqldb.cache_size_scale=10
readonly=false
hsqldb.nio_data_file=true
hsqldb.cache_scale=14
version=1.8.0
hsqldb.default_table_type=memory
hsqldb.cache_file_scale=1
hsqldb.log_size=200
modified=no
hsqldb.cache_version=1.7.0
hsqldb.original_version=1.8.0
hsqldb.compatible_version=1.8.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

732
HyperSQL Database Engine (HSQLDB) / Bugs / #732  patch 1329486 is not merged with latest release
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have just downloaded the hsqldb1_8_0_7, however I do
not see patch 1329486 "ensure HsqlTimer thread quits".
Moreover I checked the references of
org.hsqldb.lib.HsqlTimer.shutDown() and it has appeared
there is no call of this method within hsqldb sources.
Is that expeced?
I use hsqldb with webapp: without mentioned patch each
webapp server's shutdown results in following exception:
Exception in thread "HSQLDB Timer @1136019"
java.lang.NullPointerException
at org.hsqldb.lib.HsqlTimer.nextTask(Unknown Source)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(Unknown
Source)
at java.lang.Thread.run(Thread.java:595)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

733
HyperSQL Database Engine (HSQLDB) / Bugs / #733 Read-Only setting is ignored
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Just to follow the discussion at the Help-Forum:
I include the Log from my application which shows, that
the update is executed without any problems. No
exceptions, nothing.
I would expect, that an SQL-Update would either result
in an Exception AND the values are not stored in the
DB. I get neither an Exception NOR a rejected update of
the DB (=values remain the same).
Either I have missed an option or ...????
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

734
HyperSQL Database Engine (HSQLDB) / Bugs / #734 can't create view with aggregate extract select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
this fails in 1.5 Java with 1.8 hsqldb
CREATE VIEW trades_scores AS SELECT (EXTRACT(YEAR FROM 
opened) || '-' || EXTRACT(MONTH FROM opened) || '-' || 
EXTRACT(DAY FROM opened)) AS date, userid, SUM(points) 
AS score FROM trades_a GROUP BY date, userid
thrown:
java.sql.SQLException: Not in aggregate function or 
group by clause: org.hsqldb.Expression@12dacd1 in 
statement [ SELECT (EXTRACT(YEAR FROM opened) || '-' 
|| EXTRACT(MONTH FROM opened) || '-' || EXTRACT(DAY 
FROM opened)) AS date, userid, SUM(points) AS score 
FROM trades_a GROUP BY date, userid]
Have managed to get this operating with the 1.4 JVM. 
It's the "extract" that is not liked.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

735
HyperSQL Database Engine (HSQLDB) / Bugs / #735 Order by is not working correctly?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
First create table:
create table a(
id int,
name varchar(100)
)
Then insert these:
insert into a (id,name) values (1, 'eli-T-1');
insert into a (id,name) values (2, 'eli-T-2');
insert into a (id,name) values (3, 'eli-j-test');
insert into a (id,name) values (4, 'eli-T-3');
Then query:
SELECT * FROM a ORDER BY name
Will produce:
1 eli-T-1
2 eli-T-2
4 eli-T-3
3 eli-j-test
Shouldn't this be:
3 eli-j-test
1 eli-T-1
2 eli-T-2
4 eli-T-3
Am I missing something?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

736
HyperSQL Database Engine (HSQLDB) / Bugs / #736 Inner select with union returns bad results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
bellow is a sample SQL script to demonstrate the 
problem. The last select should show two rows, the row 
with event_id=100 should show value=100, but the value 
is empty (or null). When I change the
select id, null as value from Event_A
to
select id, 999 as value from Event_A
the value for event_id=100 is shown correctly
Tested with HSQL 1.8.0.7 (in memory).
Thanks for your support, Jan
drop table Test;
drop table Event_A;
drop table Event_B;
create table Test (
id integer,
event_id integer);
insert into Test values (1, 1);
insert into Test values (1, 100);
create table Event_A (
id integer);
insert into Event_A values (1);
create table Event_B (
id integer,
value integer);
insert into Event_B values (100, 1);
select
t.id as id,
t.event_id as event_id,
event.value as event_value
from Test as t
left outer join
(
select id, null as value from Event_A
union select id, value from Event_B
) event
on t.event_id = event.id
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

737
HyperSQL Database Engine (HSQLDB) / Bugs / #737 ClassCastException with union query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A ClassCastException is thrown by the server when
executing an union query with constants.
Here is a simple example:
CREATE TABLE TEST
(
MY_COL NUMERIC(10)
)
insert into TEST (MY_COL) values (100)
select 
my_col,
0 mycol
from test
union
select
0 mycol2,
my_col
from test
An SQLException, wrapping the ClassCastException is thrown.
With a more complex query the ClassCastException is not
thrown by the JDBC driver within an SQLException but
only logged in hsql trace. After that the server
doesn't work anymore.
Regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

738
HyperSQL Database Engine (HSQLDB) / Bugs / #738 SHUTDOWN COMPACT aborts at a TEXT table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since my DB.data file continued to grow I discovered
"SHUTDOWN ABORT". Result (embedded DB driver):
--- snip (console output of my program) ----
SQL-DB update with command SHUTDOWN COMPACT
Couldn't shutdown DB.
java.sql.SQLException: error in script file line: 40
Header not allowed or too long in statement [SET TABLE
"Ships4History" SOURCE HEADER "shipclassnumber
"] in statement [SHUTDOWN COMPACT]
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown
Source)
at org.hsqldb.jdbc.jdbcStatement.executeUpdate(Unknown
Source)
at
de.retsiemuab.witpDecoder.HsqlDB.update(HsqlDB.java:119)
at
de.retsiemuab.witpDecoder.gui.MainGuiAdaptor.shutdownDB(MainGuiAdaptor.java:127)
.....
---- snip ----
The lines of the respective table in the script file
looks as follows:
----- snip ----
CREATE TEXT TABLE "Ships4History"("shiptypeID" TINYINT
DEFAULT 0 NOT NULL,CONSTRAINT SYS_FK_3243 FOREIGN
KEY("shiptypeID") REFERENCES "ShipTypes"("shiptypeID"))
SET TABLE "Ships4History" READONLY TRUE
SET TABLE "Ships4History" SOURCE
"ships4history.csv;ignore_first=true"
SET TABLE "Ships4History" SOURCE HEADER
"shipclassnumber\u000a"
---- snip ----
The last line is line 40.
(note that the table has only one column)
In the csv file there is no such character:
---- snip ----
% od -xc ships4history.csv
0000000 6873 7069 6c63 7361 6e73 6d75 6562 0a72
s h i p c l a s s n u m
b e r \n
0000020 0a31 0a32 0a33 0a34 0a35 0a36 0a37 0a38
1 \n 2 \n 3 \n 4 \n 5 \n 6 \n
7 \n 8 \n
0000040 0a39 3031 310a 0a31 3231 310a 0a36 3931
9 \n 1 0 \n 1 1 \n 1 2 \n 1
6 \n 1 9
0000060 340a 0a31 3234 340a 0a33 3534 340a 0a37
\n 4 1 \n 4 2 \n 4 3 \n 4 5
\n 4 7 \n
0000100
---- snip ---
Maybe HSQLDB has a problem with TEXT tables with only
one column?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

739
HyperSQL Database Engine (HSQLDB) / Bugs / #739 length of binary is wrong by factor 2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
The length function on columns of type "binary" 
returns a wrong value, its two times of the value it 
should be:
create table hallo (zack binary)
insert into hallo (zack) values ('0004ff')
select length(zack) from hallo
the last query returns a single row of 6, but it 
should return 3.
From the docs:
Binary data starts and ends with ' (singlequote), the 
format is hexadecimal. '0004ff' for example is 3 
bytes, first 0, second 4 and last 255 (0xff).
Apart from the wrong length, storing and fetching the 
binary data works well. So a "select zack from hallo" 
returns the correct 3 bytes. The behaviour does not 
change when using prepared statements. The length 
function is wrong in the same way when using it in a 
check constraint. Using varbinary or longvarbinary 
shows the same results. Using function "octet_length" 
instead of "length" returns 12 instead of 6.
The documentation specifies function "length" and 
"octet_length" for strings only - nothing is said 
about binary. I think, both functions should return 3 
here.
Ralf.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

740
HyperSQL Database Engine (HSQLDB) / Bugs / #740 buildJDK12.bat: ant jar building for Java 1.3 won't compile
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since 1.8.0.5 - "NIOScaledRAFile.java" is missed in the
src-persist directory.
And buildJDK12.bat:
...
C:\hsqldb_1_8_0_7\src>javac -O -nowarn -d ../classes
-classpath ";../classes;../lib/servlet.jar;." ./*.java
org/hsqldb/*.java
org/hsqldb/jdbc/*.java org/hsqldb/persist/*.java
org/hsqldb/rowio/*.java org/hsqldb/scriptio/*.java
org/hsqldb/store/*.java org/hs
qldb/lib/*.java org/hsqldb/util/*.java
org/hsqldb/jdbc/jdbcConnection.java:405:
org.hsqldb.jdbc.jdbcConnection is not abstract and does
not override abstract method prep
areStatement(java.lang.String,java.lang.String[]) in
java.sql.Connection
public class jdbcConnection implements Connection {
^
org/hsqldb/jdbc/jdbcStatement.java:127:
org.hsqldb.jdbc.jdbcStatement is not abstract and does
not override abstract method getRes
ultSetHoldability() in java.sql.Statement
public class jdbcStatement implements Statement {
^
org/hsqldb/jdbc/jdbcPreparedStatement.java:205:
org.hsqldb.jdbc.jdbcPreparedStatement is not abstract
and does not override abstra
ct method getParameterMetaData() in
java.sql.PreparedStatement
public class jdbcPreparedStatement extends jdbcStatement
^
org/hsqldb/jdbc/jdbcCallableStatement.java:295:
org.hsqldb.jdbc.jdbcCallableStatement is not abstract
and does not override abstra
ct method getURL(java.lang.String) in
java.sql.CallableStatement
public class jdbcCallableStatement extends
jdbcPreparedStatement
^
org/hsqldb/jdbc/jdbcResultSet.java:325:
org.hsqldb.jdbc.jdbcResultSet is not abstract and does
not override abstract method update
Array(java.lang.String,java.sql.Array) in
java.sql.ResultSet
public class jdbcResultSet implements ResultSet {
^
org/hsqldb/jdbc/jdbcDatabaseMetaData.java:279:
org.hsqldb.jdbc.jdbcDatabaseMetaData is not abstract
and does not override abstract
method supportsStatementPooling() in
java.sql.DatabaseMetaData
public class jdbcDatabaseMetaData implements
DatabaseMetaData {
^
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
6 errors
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

741
HyperSQL Database Engine (HSQLDB) / Bugs / #741 Bug in org.hsqldb.Servlet
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I found a minor bug but a show stopper within org.hsqldb.Servlet class.
In 
public void init(ServletConfig config) {
if (!dbStr.equals(".") 
&& "true".equalsIgnoreCase(useWebInfStr)) {
dbStr = getServletContext().getRealPath("/") 
+ "WEB-INF" + dbStr;
}
}
You need to add forward slash before WEB-INF, otherwise if the real path will return C:\myproject\WebContent, dbStr will be C:\myproject\WebContentWEB-INF/database
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

742
HyperSQL Database Engine (HSQLDB) / Bugs / #742 Wrong Information in your guide documentation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following section written like this:
Hsqldb Servlet
This uses the same protocol as the Web Server. It is used when a separate servlet engine (or application
server) such as Tomcat or Resin provides access to the database. The Servlet Mode cannot be started independently
from the servlet engine. The hsqlServlet class, in the HSQLDB jar, should be installed
on the application server to provide the connection. The database is specified using an application server
property. Refer to the source file hsqlServlet.java to see the details.
Correction:
It's not hsqlServlet.java but org/hsqldb/Servlet.java. There are no details in hsqlServlet.java because it's a dummy servlet class.
Also, could you add how to make connection to hsqldb servlet like putting the following line of code:
Connection c = DriverManager.getConnection("jdbc:hsqldb:http://localhost:8080/hsql-servlet-name/dbname","username","passsword");
I have to trace & debug the source code just to figure-out the correct connection string for hsqldb servlet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

743
HyperSQL Database Engine (HSQLDB) / Bugs / #743 Not in aggregate function or group by clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
this statement work in every other dbms I use (PostgreSQL, Ingres, Oracle):
java.sql.SQLException: Not in aggregate function or group by clause: org.hsqldb.Expression@1664f in statement [ select
g.gleis_nr AS gleis_nr 
, g.leitstelle AS leitstelle 
, g.gleis_laenge_max AS gleis_laenge_max 
, g.gleis_laenge AS gleis_laenge_nutz 
, g.gleis_text AS gleis_text 
, g.richtung AS richtung 
, g.art AS art 
, g.gleiskopf1 AS gleiskopf1 
, g.gleiskopf2 AS gleiskopf2 
, g.orientierung AS orientierung 
, g.schienenform AS schienenform 
, g.aufstellung AS aufstellung 
, g.gesperrt AS gesperrt 
, COUNT(w.wagen_nr) AS anzahl_wagen 
, COALESCE( SUM(w.luep),0.0 ) AS gleis_laenge_belegt 
, g.gleis_laenge - COALESCE( SUM(w.luep),0.0 ) AS gleis_laenge_frei 
, COALESCE( SUM(w.gewicht_brutto),0.0 ) AS summe_brutto 
, COALESCE( SUM(w.gewicht_brutto) - SUM(w.gewicht_tara),0.0 ) AS summe_netto
from gleisplan g left join wagen w 
on g.mandant = w.mandant 
and g.gleis_nr = w.gleis_nr_standort 
where g.mandant = ? 
and g.gleis_nr = ? group by 
g.gleis_nr 
, g.leitstelle 
, g.gleis_laenge_max
, g.gleis_laenge 
, g.gleis_text 
, g.richtung 
, g.art 
, g.gleiskopf1 
, g.gleiskopf2 
, g.orientierung 
, g.schienenform 
, g.aufstellung 
, g.gesperrt ]
at org.hsqldb.jdbc.Util.throwError(Unknown Source)
at org.hsqldb.jdbc.jdbcPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

744
HyperSQL Database Engine (HSQLDB) / Bugs / #744 Inner select not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The inner select is not working properly.
e.g. if we have a 1 column table: -
TEST (ID VARCHAR (10))
and we populate with some example data and do:
select * from test where exists (select * from test limit 0 2) 
... does not work. I think its a problem with the limit 0 2 inside the inner select.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

745
HyperSQL Database Engine (HSQLDB) / Bugs / #745 Locate function not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Locate function to search for the index for particular string in any string is not working and returning 0 in all cases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

746
HyperSQL Database Engine (HSQLDB) / Bugs / #746 Trigger Issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have created a trigger on insert in the table and also define proper java file for trigger.Now after inserting a row in a table db is calling fire() method implemented in my java file. My problem is when i am trying to execute an statement in java file after trigger is fired, my database is getting hang.i can't do anything. After going through my trace i found that some problem is coming while calling DriverManager.getConnection(url,login,pw).
I am attaching the code to make it more clear.
Thanks
Aslam
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

747
HyperSQL Database Engine (HSQLDB) / Bugs / #747 TEXT(cvs) tables does not work well with identity column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In any case that the db had a unsafe shutdown. or reopen a modified CSV file.
auto increment identity does not reset itself to a correct value. And duplicate key exception happen on next insert statement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

748
HyperSQL Database Engine (HSQLDB) / Bugs / #748 Not in aggregate function or group by clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
i've a problem with group by and having clause in inner queries, when the having clause references aliases from the outer select. This works fine in DerbyDB.
I get the following error:
SQL Error: -67, SQLState: 37000
Not in aggregate function or group by clause: 
Here is the script to recreate the problem:
drop table PROCESSDETAIL if exists;
create table PROCESSDETAIL (
ID bigint not null,
ALERTLEVEL integer not null,
VALUE varchar(255) not null,
TSTAMP timestamp not null,
ATTRIBUTEKEY integer not null,
PROCESSID bigint not null,
primary key (ID)
);
-- testdata (not important to show this problem)
insert 
into
PROCESSDETAIL
(ALERTLEVEL, VALUE, TSTAMP, ATTRIBUTEKEY,
PROCESSID, ID) 
values
(1, 66, '2007-01-01 08:00:00', 28, 9, 1);
insert 
into
PROCESSDETAIL
(ALERTLEVEL, VALUE, TSTAMP, ATTRIBUTEKEY, 
PROCESSID, ID) 
values
(0, 67, '2007-01-01 07:59:40', 28, 9, 2);
select *
from
PROCESSDETAIL t1 
where
exists (
select
t2.PROCESSID,
t2.ATTRIBUTEKEY 
from
PROCESSDETAIL t2 
where
t2.PROCESSID=t1.PROCESSID 
and t2.ATTRIBUTEKEY=t1.ATTRIBUTEKEY 
and t2.PROCESSID=9 
and t2.TSTAMP<='2007-01-01 08:00:00' 
group by
t2.PROCESSID ,
t2.ATTRIBUTEKEY 
having
max(t2.TSTAMP)=t1.TSTAMP
);
Thanks in Advance,
Frank
(frank.meilinger@gmx.de)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

749
HyperSQL Database Engine (HSQLDB) / Bugs / #749 forgets primary key constraint name
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In an empty database I create a new table with a named primary key constraint:
create table tab ( col integer, constraint blah primary key (col))
Then I ask for the name of this constraint:
select CONSTRAINT_NAME from INFORMATION_SCHEMA.SYSTEM_TABLE_CONSTRAINTS
With hsqldb_1_8_0_2 this correctly returns "BLAH", but with hsqldb_1_8_0_7 it returns "SYS_IDX_46".
This does not happen for check/unique/foreignkey constraints, there the name is ok in both hsqldb versions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

750
HyperSQL Database Engine (HSQLDB) / Bugs / #750 Data loss when on rapid startup -> shutdown sequence
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The attached sample application does the following:
First it registers a shutdown handler for itself. Then it calls startDatabase() to start a network-capable HSQLDB server using the Server class, and opens a JDBC connection to the server. Next it calls accessDatabase() to prepare, execute, close and null some PreparedStatements, which are:
DROP TABLE foo IF EXISTS
CREATE TABLE foo (bar INT)
INSERT INTO foo (bar) VALUES (123)
COMMIT
OPTIONALLY it then calls Thread.sleep()
to avoid the bug. Currently that is commented out.
Having accessed the database, it calls System.exit(0) to trigger the shutdown thread. The shutdown thread calls stopDatabase() which closes and nulls the JDBC connection, issues Server.stop() then Server.shutdown(), and nulls the server.
Bug:
If the above process runs without calling Thread.sleep(), the database engine shuts down without data getting flushed to disk. Data loss occurs, but when Thread.sleep() is called, it doesn't and "db.log" contains the right data.
Tested:
On 1.5 and 1.6 series Sun JDK in a Gentoo Linux environment. Tested on different computers. The 1.6 JDK on one computer was installed from a Sun binary, the 1.5 JDK on the other computer from Portage.
Recreating:
Grab the attached Demo.java, copy hsqldb.jar into the same directory. Check sources and having ascertained their safety, issue:
javac -cp hsqldb.jar Demo.java
jar cvf demo.jar -C . *.class
rm *.class
java -cp demo.jar:hsqldb.jar Demo
I stumbled upon this by accident, while chasing another bug. For me it's non-critical, I can let it sleep. It however seemed like capable of biting someone, and I'm
not proficient enough with HSQLDB to fix it myself.
Best regards, lots of thanks for a neat database to play with, and good luck hunting those bugs! :)
Complication / fooException.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

751
HyperSQL Database Engine (HSQLDB) / Bugs / #751 German 'ß' character breaks "like" operations
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found a bug in the German language / HSQLDB. HSQLDB does case insensitive "like" operations by making the comparison string upper case. Unfortunately, the upper case of "ß" is "SS". I was able to patch HSQLDB to resolve this issue, but I'm not comfortable that the fix is appropriate.
Here is a diff of src/org/hsqldb/Like.java that fixes the problem (and probably introduces others):
@@ -141,6 +141,22 @@
return s.toString();
}
+ /**
+ * Convert to upper case for comparison, not display.
+ *
+ * @param s The string to convert.
+ */
+ private String toDataUpper(String s)
+ {
+ int len = s.length();
+ char[] charBuff = new char[len];
+ for (int i = 0; i < len; i++)
+ {
+ charBuff[i] = Character.toUpperCase(s.charAt(i));
+ }
+ return new String(charBuff);
+ }
+
/**
* Method declaration
*
@@ -156,7 +172,7 @@
}
if (isIgnoreCase) {
- s = session.database.collation.toUpperCase(s);
+ s = toDataUpper(s);
}
return compareAt(s, 0, 0, s.length()) ? Boolean.TRUE
@@ -228,7 +244,7 @@
isNull = pattern == null;
if (!isNull && isIgnoreCase) {
- pattern = session.database.collation.toUpperCase(pattern);
+ pattern = toDataUpper(pattern);
}
iLen = 0;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

752
HyperSQL Database Engine (HSQLDB) / Bugs / #752 Out of memory when manipulating indexes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a database with approximately 350 tables is manipulated by using either CREATE INDEX or the DROP INDEX statement, then it starts taking insane amounts of time to complete on tables with less than 10 records in them. This eventually runs the JVM out of memory. The JVM is already using the maximum amount of memory that will work cross platform. We are using the JDBC connection for communication.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

753
HyperSQL Database Engine (HSQLDB) / Bugs / #753 hsqldbmin target doesn't produce jar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello
Regarding build target hsqldbmin:
"ant hsqldbmin" doesn't produce the related jar file in the lib directory but produces a manifest-only jar file without classes nor resources.
I think this is due to a <include > tag present in the "hsqldbmin" target in the build.xml that override all.
Removing this "include" tag - and including all *.properties files in the build process - produce the correct and working jar file hsqldbmin.jar
bye
thanks for this great product anyway
bye
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

754
HyperSQL Database Engine (HSQLDB) / Bugs / #754 Explicitly calling shutdown() causes low-probability hangs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Attached is a demo program which starts an HSQLDB server using the Server class.
It tries to terminate the server by calling stop() and then shutdown(). With a rather low but still real probability (about a once per 100 runs) the shutdown() call hangs.
I have observed that omitting the explicit shutdown() call and nulling the Server object instead works more reliably, perhaps even 100% reliably. It seems like some race condition or threading issue, but I'm not qualified to dig deeper.
You can compile the sample using:
javac -cp hsqldb.jar Demo.java
jar cvf demo.jar -C . *.class
rm *.class
You can run it using:
java -cp demo.jar:hsqldb.jar Demo
Best regards and good luck!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

755
HyperSQL Database Engine (HSQLDB) / Bugs / #755 A duplicate of bug 1400344 (almost)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My query is virtually identical to bug 1400344, 
except that the column is of type DateTime, and I wish to discard the Time part.
SELECT DISTINCT convert(element.deadline,Date) FROM element ORDER BY convert(element.deadline,Date) ASC
Because convert is not treated as a function it fails in the same manner a functions did.
I fixed the problem by adding CONVERT to the iscolumn
code 
case CONVERT:
return eArg.isColumn();
I am not convinced this is the correct fix, but is probably no worse than treating ADD etc in this manner.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

756
HyperSQL Database Engine (HSQLDB) / Bugs / #756 org.hsqldb.jdbc.* can not be compiled with jdk 1.6
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As some interfaces (java.sql.*) have changed since Java 5, several files in org.hsqldb.jdbc can not be compiled any more with javac 1.6.0.
This is a stopper for using Java 6 in Openoffice. Please make hsqldb compatible with Java 6.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

757
HyperSQL Database Engine (HSQLDB) / Bugs / #757 No support for reading data from older version using 1.8 jar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I try to read from older version of HSQLDB( in my case 1.7.2) using version 1.8 JDBC driver i get the following error:-
SQLException: java.sql.SQLException: Connection is broken: java.lang.OutOfMemoryError: Requested array size exceeds VM limit
I think newer version of JDBC driver should support reading from older database version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

758
HyperSQL Database Engine (HSQLDB) / Bugs / #758 Database URL of type res: is converted to lowercase
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A Database URL of type res: is converted to lowercase
while parsing it (DatabaseURL.java:238). Thus it is impossible to open a database contained in a package hierarchy whose name contains uppercase characters. Java class loading is case sensitive with respect to both Class and Package names.
Package names containing uppercase characters are discouraged but not forbidden, so converting a database URL to lowercase should not take place, at least not for database type S_RES.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

759
HyperSQL Database Engine (HSQLDB) / Bugs / #759 Throwing Exception: Starting Server using J9 in Windows CE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Server@309f309f]: [Thread[main,5,main]]: checkRunning(false) entered 
[Server@309f309f]: [Thread[main,5,main]]: checkRunning(false) exited 
[Server@309f309f]: Startup sequence initiated from main() method 
[Server@309f309f]: Loaded properties from [\server.properties] 
[Server@309f309f]: Initiating startup sequence... 
[Server@309f309f]: Server socket opened successfully in 58 ms. 
[Server@309f309f]: [Thread[HSQLDB Server @309f309f,5,main]]: Database [index=0db=file:symbol, alias=symbol] did not open: org.hsqldb.HsqlException: General error: java.lang.IllegalAccessError: java/util/Calendar.setTimeInMillis(J)V 
[Server@309f309f]: [Thread[HSQLDB Server @309f309f,5,main]]: run()/openDatabases():
[Server@309f309f]: Initiating shutdown sequence... 
[Server@309f309f]: Shutdown sequence completed in 20 ms.
java.lang.NoClassDefFoundError: org.hsqldb.HsqlDateTime 
at java.lang.Class.initialize(Unknown Source) 
at org.hsqldb.Server.printWithTimestamp(Unknown Source) 
at org.hsqldb.Server.shutdown(Unknown Source) 
at org.hsqldb.Server.run(Unknown Source)
at org.hsqldb.Server.access$000(Unknown Source) 
at org.hsqldb.Server$ServerThread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

760
HyperSQL Database Engine (HSQLDB) / Bugs / #760 Exception: Starting Server in J9 under Windows CE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Throwing Exception: Starting Server using J9 in Windows CE Private: (?) 
No
[Server@309f309f]: [Thread[main,5,main]]: checkRunning(false) entered 
[Server@309f309f]: [Thread[main,5,main]]: checkRunning(false) exited 
[Server@309f309f]: Startup sequence initiated from main() method 
[Server@309f309f]: Loaded properties from [\server.properties] 
[Server@309f309f]: Initiating startup sequence... 
[Server@309f309f]: Server socket opened successfully in 58 ms. 
[Server@309f309f]: [Thread[HSQLDB Server @309f309f,5,main]]: Database
[index=0db=file:symbol, alias=symbol] did not open:
org.hsqldb.HsqlException: General error: java.lang.IllegalAccessError:
java/util/Calendar.setTimeInMillis(J)V 
[Server@309f309f]: [Thread[HSQLDB Server @309f309f,5,main]]:
run()/openDatabases(): 
[Server@309f309f]: Initiating shutdown sequence... 
[Server@309f309f]: Shutdown sequence completed in 20 ms.
java.lang.NoClassDefFoundError: org.hsqldb.HsqlDateTime 
at java.lang.Class.initialize(Unknown Source) 
at org.hsqldb.Server.printWithTimestamp(Unknown Source) 
at org.hsqldb.Server.shutdown(Unknown Source) 
at org.hsqldb.Server.run(Unknown Source) 
at org.hsqldb.Server.access$000(Unknown Source) 
at org.hsqldb.Server$ServerThread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

761
HyperSQL Database Engine (HSQLDB) / Bugs / #761 SELECT LIST Does not allow literal 'ALL' as first column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Does not all 'ALL' (uppercase) as first column in the SELECT list.
Example:
CREATE TABLE dual ( name char(10) );
SELECT 'ALL' FROM dual;
You get error "Unexpected token: FROM in statement" .
Now change to lower case like:
SELECT 'All' FROM dual; 
or 
SELECT 'all' FROM dual; 
Query works fine.
This happens only when 'ALL' is the first literal in the select field list. 
Understand that ALL is a reserved keyword but it is not same as literal 'ALL' or is it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

762
HyperSQL Database Engine (HSQLDB) / Bugs / #762 select(select... union select...) broken (!!)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
on (at least) the latest hsqldb release (1.8.0.7) there's a bug in union when it's the source of a select. There's an older report of this which is filed as "feature request":
http://sourceforge.net/tracker/index.php?func=detail&aid=1573125&group_id=23316&atid=378134
The problem is that these queries are not as uncommon as one might assume. E.g. when using hibernate for relational persistence and using union-subclassing, these queries are used often.
So i would consider this as a bug with high relevance rather than a feature request.
I've attached a test case that shows this bug.
Michael.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

763
HyperSQL Database Engine (HSQLDB) / Bugs / #763 java.sql.Connection#createBlob() not implemented
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Exception in thread "main" java.lang.AbstractMethodError: org.hsqldb.jdbc.jdbcConnection.createBlob()Ljava/sql/Blob;
do it ASAP, i do not want to introduce HSQLDB-specific code like "new org.hsqldb.jdbc.jdbcBlob(byte_array_var)" into my app, as it SHOULD be DB invariant.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

764
HyperSQL Database Engine (HSQLDB) / Bugs / #764 STUCT typo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In table INFORMATION_SCHEMA.SYSTEM_ALLTYPEINFO the record for the STRUCT type has "STUCT" as the value for the TYPE_NAME field.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

765
HyperSQL Database Engine (HSQLDB) / Bugs / #765 Temporary Tables lose ON COMMIT PRESERVE ROWS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a temporary table with option ON COMMIT PRESERVE ROWS, then you add columns with ALTER TABLE ... ADD COLUMN... the attribute ON COMMIT PRESERVE ROWS gets lost.
example 1 (working):
CREATE TEMPORARY TABLE MYTABLE (ID INTEGER, DESCRIPTION LONGVARCHAR) ON COMMIT PRESERVE ROWS
example 2 (not working):
CREATE TEMPORARY TABLE MYTABLE (ID INTEGER) ON COMMIT PRESERVE ROWS;
ALTER TABLE MYTABLE ADD COLUMN DESCRIPTION LONGVARCHAR;
Using the second form, the attribute ON COMMIT PRESERVE ROWS gets lost (as you can see in the database script file)
It seems that this problem exists with any subsequent ALTER TABLE command, not only ALTER TABLE ... ADD COLUMN...
Greetings,
-- 
Alex
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

766
HyperSQL Database Engine (HSQLDB) / Bugs / #766 ORDER BY item should not be in the SELECT DISTINCT list
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is the script to create the test data:
create table test (pos integer, str varchar(50));
insert into test values (1, 'A');
insert into test values (2, 'A');
insert into test values (3, 'B');
When I now execute the following statement:
select distinct str from test order by pos;
I get following error message:
ORDER BY item should be in the SELECT DISTINCT list: org.hsqldb.Expression@90cb03 in statement [select distinct str from test order by pos] / Error Code: -71 / State: 37000
The spec of SQL does not require an ORDER BY item to be in
the SELECT DISTINCT list.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

767
HyperSQL Database Engine (HSQLDB) / Bugs / #767 Critical Date bug in latest version (1.8.0_7)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Suppose you insert a Date in a Date field (not a long representing an UTC for that Date) from a hsqldb table.
Then, when you read the date inserted it's not the same as the original date.
The 2 dates differ by a day or two. Even if you use TimeZone and Calendar and proper formating of the dates this still doesn't work.
This bug was not present in 1.7.3.3 version.
aureldu@gmail.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

768
HyperSQL Database Engine (HSQLDB) / Bugs / #768 Session Class Swallowing Stacktrace
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The sqlExecuteBatch method in the Session class calls into the execute(CompiledStatement cs, Object[] paramValues) method of CompiledStateExecutor, which contains this code:
try {
cs.materializeSubQueries(session);
result = executeImpl(cs);
} catch (Throwable t) {
result = new Result(t, cs.sql);
}
But when control returns to the Session.sqlExecuteBatch method, the result is not checked for errors.
Adding the following code to the org.hsqldb.Session class:
while (record != null) {
Result in;
Object[] pvals = record.data;
in = sqlExecuteCompiledNoPreChecks(cs, pvals);
// On the client side, iterate over the vals and throw
// a BatchUpdateException if a batch status value of
// esultConstants.EXECUTE_FAILED is encountered in the result
if (in.mode == ResultConstants.UPDATECOUNT) {
updateCounts[count++] = in.updateCount;
/* Added Code*/
} else if (in.mode == ResultConstants.ERROR) { 
out = new Result(in.getException(), in.getMainString());
return out;
/*End added code */
} else if (in.isData()) {
// FIXME: we don't have what it takes yet
// to differentiate between things like
// stored procedure calls to methods with
// void return type and select statements with
// a single row/column containg null
updateCounts[count++] = ResultConstants.SUCCESS_NO_INFO;
} else {
updateCounts = ArrayUtil.arraySlice(updateCounts, 0, count);
break;
}
Results in the actual SQL exception being displayed. This is much better than what you now see, which is "Failed Batch".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

769
HyperSQL Database Engine (HSQLDB) / Bugs / #769 SQL: CALL TRUE; failes in 1.8.0.7
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you enter the statement
call true;
in the DataBaseManager connected to a HSQLDB server you will get an exception.
I stumbled on it while running the JUnit tests. Is a test case in testSQL.java, in particular testX1(). It will affect any stored procedure returning a boolean.
It does not occur when using when using the in memory engine.
Attached is a JUnit test.
The problem is in Expression.java.
A patch for 1.8.0.7 is attached.
In the repository it has already been fixed as I have seen. I filed this bug only for users of the current version. It will go away with 1.8.1.
Regards
Walter
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

770
HyperSQL Database Engine (HSQLDB) / Bugs / #770 Exception using "sum" function in "case when" else clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
An exception is thrown for the following query:
select 
case when 1<0 then 1 else sum(10) end as res from SOME_TABLE
Error: java.sql.SQLException: Not a condition, SQL State: S1000, Error Code: -106
However the following query succeeds executing:
select 
case when 1<0 then sum(10) else 1 end as res from SOME_TABLE
The only difference is in the position of the aggregation function.
Both queries work on Oracle,DB2 and MSSQL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

771
HyperSQL Database Engine (HSQLDB) / Bugs / #771 RESTART WITH on text tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue 1251640 needs to be reopened for 1.8.0.7.
The description was as follows:
"When using generated keys on text tables, the engine
adds ALTER COLUMN RESTART WITH statements in the script
file. If, after adding new records to the table the db
shuts down incorrectly, these values may not be
updated. If the db is then restarted, future inserts
into the table cause a unique constraint violation.
If the ALTER COLUMN statements are removed, the
database oprates correctly and continues with the next
number."
This issue was reportedly fixed in 1.8.0.2, but we are still experiencing the problem in 1.8.0.7.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

772
HyperSQL Database Engine (HSQLDB) / Bugs / #772 Exception while using any of the Transfer Tool
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
There is a exception that occurs when using the Transfer,Dump,Restore Tools under the DB Manager(Below). This occurs for the version above 1.8.0.
java.lang.NoClassDefFoundError: org/hsqldb/util/Transfer
at org.hsqldb.util.DatabaseManagerSwing.actionPerformed(Unknown Source)
at javax.swing.AbstractButton.fireActionPerformed(Unknown Source)
at javax.swing.AbstractButton$ForwardActionEvents.actionPerformed(Unknow
n Source)
at javax.swing.DefaultButtonModel.fireActionPerformed(Unknown Source)
at javax.swing.DefaultButtonModel.setPressed(Unknown Source)
at javax.swing.AbstractButton.doClick(Unknown Source)
at javax.swing.plaf.basic.BasicMenuItemUI.doClick(Unknown Source)
at javax.swing.plaf.basic.BasicMenuItemUI$MouseInputHandler.mouseRelease
d(Unknown Source)
at java.awt.Component.processMouseEvent(Unknown Source)
at java.awt.Component.processEvent(Unknown Source)
at java.awt.Container.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl(Unknown Source)
at java.awt.Container.dispatchEventImpl(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown Source)
at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
at java.awt.Container.dispatchEventImpl(Unknown Source)
at java.awt.Window.dispatchEventImpl(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown Source)
at java.awt.EventQueue.dispatchEvent(Unknown Source)
at java.awt.EventDispatchThread.pumpOneEventForHierarchy(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

773
HyperSQL Database Engine (HSQLDB) / Bugs / #773 identity() doesn't work with preparedStatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I create a new record using a prepared statement and then, with the same connection, create a new preparedStatement and execute "CALL IDENTITY();" the ResultSet contains an Integer '0', not the ID of the IDENTITY column.
If I do the same thing, but use a standard Statement to call IDENTITY(), I get back the expected result.
I would expect to get the correct value of the new ID with either a Statement or a PreparedStatement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

774
HyperSQL Database Engine (HSQLDB) / Bugs / #774 ON UPDATE CASCADE does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using hsqldb version 1.8.0.7.
A virgin in-memory db, connecting with: jdbc:hsqldb:file:<path to folder + dbName> (nothing else touched and no configs altered).
While defining the following tables i get: error code: -11, state 37000... it says UPDATE from the fk cascade definition is an unexpected token - no matter if defined with constraint <name> or if i do it in table definition itself. 
Here is a simple script that shows the problem:
CREATE TABLE artist(
id int identity,
name varchar(75) NOT NULL,
type varchar(25)
);
CREATE TABLE interpret(
id int identity,
name varchar(75) NOT NULL,
type varchar(25)
);
CREATE TABLE interpret_rel_artist(
interpret_id int NOT NULL,
artist_id int NOT NULL
);
ALTER TABLE interpret_rel_artist
ADD CONSTRAINT FK_INTERPRET FOREIGN KEY (interpret_id) REFERENCES interpret(id) 
ON DELETE CASCADE 
ON UDPATE CASCADE;
ALTER TABLE interpret_rel_artist
ADD CONSTRAINT FK_ARTIST FOREIGN KEY (artist_id) REFERENCES artist(id) 
ON DELETE CASCADE 
ON UDPATE CASCADE;
great job done guys and hopefully this is easy to fix...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

775
HyperSQL Database Engine (HSQLDB) / Bugs / #775 Unsupported parenthesis on JOIN 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query doesn't work:
"SELECT * 
FROM (table1 INNER JOIN table2 ON table1.id=table2.id)"
It throws a SQLException with the message:
"Unexpected token TABLE1, requires SELECT in statement [SELECT * 
FROM (table1], SQL State: 37000, Error Code: -11"
If I remove the parenthesis, then the query works perfectly.
The problem is that, even if for this query the parenthesis aren't needed, for queries with several outer and inner join you have to use parenthesis to manage the "join priority".
In other words, it isn't possibile to execute many real-world queries.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

776
HyperSQL Database Engine (HSQLDB) / Bugs / #776 unsupported NUMERIC(precision,scale)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The engine does not understand the numeric type like standard SQL dictates.
Like DECIMAL NUMERIC can get a precision AND also a scale. But it looks like scales are not allowed today.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

777
HyperSQL Database Engine (HSQLDB) / Bugs / #777 Incorrect right outer join result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Right join output incorrect result, when using after inner join.
-- creating table, and insert initial data
create table a (id integer primary key);
create table b (id integer primary key);
create table c (id integer primary key);
insert into a values (1);
insert into b values (1);
insert into c values (1);
insert into c values (2);
--then run select
select a.id, b.id, c.id from a inner join b on a.id=b.id right outer join c on c.id=a.id;
we see output:
+----+----+----+
| ID | ID | ID |
+----+----+----+
| 1 | 1 | 1 |
+----+----+----+
but this output incorrect.
correct output must be:
+----+----+----+
| ID | ID | ID |
+----+----+----+
| 1 | 1 | 1 |
+----+----+----+
| | | 2 |
+----+----+----+
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

778
HyperSQL Database Engine (HSQLDB) / Bugs / #778 Constructor of org.hsqldb.test.TestBase has wrong assignment
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The power of the Eclipse syntax check reveals:
"Assignment has no effect":
public TestBase(String name, String url, boolean network) {
super(name);
this.isNetwork = isNetwork; // <---- HERE
this.url = url;
}
Probably has to be changed to:
this.isNetwork = network;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

779
HyperSQL Database Engine (HSQLDB) / Bugs / #779 org.hsqldb.ServerConnection close()es incorrectly in run
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In org.hsqldb.ServerConnection.run(), the close() is called outside of try/catch, which sometimes leads to non-closure (in this case observed in TestSql, which throws due to ClassCastException and does not stop correctly)
The close() has to be called inside a finally, like
this:
public void run() {
init();
if (session != null) {
try {
while (keepAlive) {
// something something
} catch (IOException e) {
server.printWithThread(....);
} catch (HsqlException e) {
server.printStackTrace(e);
}
finally {
close(); // <--- HERE close in finally
}
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

780
HyperSQL Database Engine (HSQLDB) / Bugs / #780 org.hsqldb.test.TestSql.tearDown should call super.tearDown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
org.hsqldb.test.TestSql.tearDown() should call super.tearDown():
Instead of:
protected void tearDown() {
try {
connection.close();
} catch (Exception e) {
e.printStackTrace();
System.out.println("TestSql.tearDown() error: " + e.getMessage());
}
}
It should look like this, because super.tearDown() calls connection.close() and calls super.tearDown() which calls server.stop():
protected void tearDown() { 
try {
connection.close();
} catch (Exception e) {
e.printStackTrace();
System.out.println("TestSql.tearDown() error: " + e.getMessage());
}
finally {
super.tearDown();
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

781
HyperSQL Database Engine (HSQLDB) / Bugs / #781 org.hsqldb.test.TestSql.testX1() fails with ClassCastExcep..
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See Bug #1737389, which is the same with another title, this is just a duplicate in case someone looks for "ClassCastException".
Problems occurs in the code:
connection.setAutoCommit(false);
java.sql.Savepoint savepoint =
connection.setSavepoint("savepoint");
Statement stmt = connection.createStatement();
stmt.executeQuery("CALL true;"); <----- here
This will cause the server to end
Exception in thread "HSQLDB Connection @1add2dd" java.lang.ClassCastException: java.lang.Boolean
at org.hsqldb.rowio.RowOutputBase.writeData(RowOutputBase.java:221)
at org.hsqldb.Result.write(Result.java:1257)
at org.hsqldb.Result.write(Result.java:1339)
at org.hsqldb.ServerConnection.run(ServerConnection.java:255)
at java.lang.Thread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

782
HyperSQL Database Engine (HSQLDB) / Bugs / #782 setNull(..) in preparedStatement behaves strange
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use the follwing code:
preparedStatement.setString(1, categoryName); statement.setNull(2, java.sql.Types.BIGINT); resultSet = statement.executeQuery();
where the prepared statement is "SELECT ID FROM 
FB_KATEGORY WHERE NAME=? AND PARENT=?"
the code does not cause any errors or SQLExceptions, but the result set is empty after the call, though it shouldn't be.
If I replace the statement with 
"SELECT ID FROM 
FB_KATEGORY WHERE NAME=? AND PARENT IS NULL"
everything works fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

783

    
        SourceForge.net: Log In to SourceForge.net
    

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

784
HyperSQL Database Engine (HSQLDB) / Bugs / #784 ArrayIndexOutOfBoundsException on condition of type char
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using the latest code from svn (https://hsqldb.svn.sourceforge.net/svnroot/hsqldb/base/trunk), but when I use a condition on a character column, and include a subquery in the from clause, I receive the error:
S1000 General error java.lang.ArrayIndexOutOfBoundsException: 1 in statement [SELECT T1.COL1
FROM TABLE1 T1 INNER JOIN
(SELECT COL1 FROM TABLE2) T2 ON T1.COL1 = T2.COL1
WHERE T1.COL2 = 'X'] / Error Code: 40 / State: S1000
I originally received the error in a larger piece of sql, but have reproduced the error with a much smaller example.
I create two tables:
CREATE TABLE TABLE1 (COL1 INTEGER, COL2 CHAR(1))
CREATE TABLE TABLE2 (COL1 INTEGER)
Then execute the following sql:
SELECT T1.COL1
FROM TABLE1 T1 INNER JOIN
(SELECT COL1 FROM TABLE2) T2 ON T1.COL1 = T2.COL1
WHERE T1.COL2 = 'X'
The error doesn't occur when I remove the subquery or change the condition to use COL1
The stack trace for the error when running from java is:
java.lang.ArrayIndexOutOfBoundsException: 1
at org.hsqldb.Table.getIndexForColumns(Table.java:1332)
at org.hsqldb.RangeVariableResolver.assignToRangeVariable(RangeVariableResolver.java:431)
at org.hsqldb.RangeVariableResolver.assignToRangeVariables(RangeVariableResolver.java:331)
at org.hsqldb.RangeVariableResolver.processConditions(RangeVariableResolver.java:135)
at org.hsqldb.Select.setRangeVariableConditions(Select.java:550)
at org.hsqldb.Select.resolveTypesAndPrepare(Select.java:568)
at org.hsqldb.Select.finishPrepare(Select.java:344)
at org.hsqldb.Parser.readQueryExpression(Parser.java:537)
at org.hsqldb.Parser.compileSelectStatement(Parser.java:3517)
at org.hsqldb.Parser.compileStatement(Parser.java:3041)
at org.hsqldb.Session.compileStatement(Session.java:676)
at org.hsqldb.CompiledStatementManager.compile(CompiledStatementManager.java:421)
at org.hsqldb.Session.execute(Session.java:750)
at org.hsqldb.jdbc.jdbcPreparedStatement.<init>(jdbcPreparedStatement.java:3596)
at org.hsqldb.jdbc.jdbcConnection.prepareStatement(jdbcConnection.java:641)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

785
HyperSQL Database Engine (HSQLDB) / Bugs / #785 NPE in Database.connect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting this wierd error and not able to figure this out. Also, If I try to perform the action in debug mode, I do not get this error. 
Help? 
java.util.concurrent.ExecutionException: com.qr.data.processor.ProcessorException: org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is java.lang.NullPointerException 
at java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:205) 
at java.util.concurrent.FutureTask.get(FutureTask.java:80) 
at com.qr.data.processor.impl.DefaultQueueProcessorJob$WorkerBeeFuturesAggregator.call(DefaultQueueProcessorJob.java:161) 
at com.qr.data.processor.impl.DefaultQueueProcessorJob$WorkerBeeFuturesAggregator.call(DefaultQueueProcessorJob.java:1) 
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) 
at java.util.concurrent.FutureTask.run(FutureTask.java:123) 
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) 
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) 
at java.lang.Thread.run(Thread.java:613) 
Caused by: com.qr.data.processor.ProcessorException: org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is java.lang.NullPointerException 
at com.qr.translation.wrds.processor.FundamentalT1ProcessorJob.processRecord(FundamentalT1ProcessorJob.java:71) 
at com.qr.translation.wrds.processor.FundamentalT1ProcessorJob.processRecord(FundamentalT1ProcessorJob.java:1) 
at com.qr.data.processor.impl.DefaultQueueProcessorJob$WorkerBee.call(DefaultQueueProcessorJob.java:209) 
at com.qr.data.processor.impl.DefaultQueueProcessorJob$WorkerBee.call(DefaultQueueProcessorJob.java:1) 
... 5 more 
Caused by: org.springframework.transaction.CannotCreateTransactionException: Could not open Hibernate Session for transaction; nested exception is java.lang.NullPointerException 
at org.springframework.orm.hibernate3.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:541) 
at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:350) 
at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:262) 
at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:101) 
at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171) 
at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204) 
at $Proxy16.saveAsset(Unknown Source) 
at com.qr.translation.wrds.processor.FundamentalT1ProcessorJob.processRecord(FundamentalT1ProcessorJob.java:47) 
... 8 more 
Caused by: java.lang.NullPointerException 
at org.hsqldb.Database.connect(Unknown Source) 
at org.hsqldb.DatabaseManager.newSession(Unknown Source) 
at org.hsqldb.jdbc.jdbcConnection.<init>(Unknown Source) 
at org.hsqldb.jdbcDriver.getConnection(Unknown Source) 
at org.hsqldb.jdbcDriver.connect(Unknown Source) 
at java.sql.DriverManager.getConnection(DriverManager.java:525) 
at java.sql.DriverManager.getConnection(DriverManager.java:140) 
at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:283) 
at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:271) 
at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnectionFromDriverManager(DriverManagerDataSource.java:255) 
at org.springframework.jdbc.datasource.DriverManagerDataSource.getConnection(DriverManagerDataSource.java:236) 
at org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider.getConnection(LocalDataSourceConnectionProvider.java:81) 
at org.hibernate.jdbc.ConnectionManager.openConnection(ConnectionManager.java:423) 
at org.hibernate.jdbc.ConnectionManager.getConnection(ConnectionManager.java:144) 
at org.hibernate.jdbc.JDBCContext.connection(JDBCContext.java:119) 
at org.hibernate.transaction.JDBCTransaction.begin(JDBCTransaction.java:57) 
at org.hibernate.impl.SessionImpl.beginTransaction(SessionImpl.java:1326) 
at org.springframework.orm.hibernate3.HibernateTransactionManager.doBegin(HibernateTransactionManager.java:510) 
... 15 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

786
HyperSQL Database Engine (HSQLDB) / Bugs / #786 Error casewhen in condition
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Error occurs when in condition use casewhen for example:
select * from "Table1" 
where casewhen("ID"=3,true,false)
the error is "wrong data type".
this script work if write:
select * from "Table1" 
where casewhen("ID"=3,true,false)=true
thanks 
Danilo
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

787
HyperSQL Database Engine (HSQLDB) / Bugs / #787 umlaut not working with text tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After inserting a "ü" into a text table via jdbc, the text file contains corrupt characters. Reading the file via jdbc returns "?".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

788
HyperSQL Database Engine (HSQLDB) / Bugs / #788 Empty rows in text tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Deleted rows in a text table are not reused.
Insert a row into a text table. Delete the row from the text table. Insert the row again. 
The result is a file like this:
START
\n
abc|def|ghi
EOF
Redo the process....result 
START
\n
\n
abc|def|ghi
EOF
etc...
Do not know if this is documented somewhere but for sure not the behaviour expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

789
HyperSQL Database Engine (HSQLDB) / Bugs / #789 Using database as file, no exception for unwritable file.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am attempting to validate that the choise the user does, when selecting the database output file, is valid.
So for 
server.setDatabasePath(0, "a:/mydb.db");
hsqldb does indeed prints to stderr:
[Server@29428e]: [Thread[HSQLDB Server @29428e,6,main]]: Database [index=0db=file:a:/mydb.db, alias=shiponline] did not open: org.hsqldb.HsqlException: The database is already in use by another process: org.hsqldb.persist.NIOLockFile@1f06edd4[file =A:\mydb.db.lck, exists=false, locked=false, valid=false, fl =null]: java.io.FileNotFoundException: A:\mydb.db.lck (The system cannot find the path specified)
[Server@29428e]: [Thread[HSQLDB Server @29428e,6,main]]: Shutting down because there are no open databases
However no RuntimeException is thrown, and I seem not to be able to detect this condition and warn the user.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

790
HyperSQL Database Engine (HSQLDB) / Bugs / #790 Dates are written wrong with hsqldb-server
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I found a bug in the Server code or the JDBC Driver Client code.
If I write a Date via a PreparedStatement into a database via network (with a "jdbc:hsqldb:hsql://..."-URL) the date in the database is one day before the right date.
Try code like this:
PreparedStatement statement = conn.prepareStatement("call dayofmonth(?)");
statement.setDate(1, new Date(0)); // 01-01-1970
statement.execute();
ResultSet rs = statement.getResultSet();
rs.next();
System.out.println(rs.getInt(1));
With a "file:"-URL, it prints "1" (January the "1"st). With a "hsql:"-URL it prints "31". :-(
I am using hsqldb.jar 1.8.0-9 (the newest one) with Sun Java6 on the client and the Debian Etch package with Sun Java6 on the Server (Version 1.8.0.7-1).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

791
HyperSQL Database Engine (HSQLDB) / Bugs / #791 TEXT tbl - source file is locked until restarting the engine
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, hsql team!
TEXT table - after making it READONLY the source file is still locked and cannot be changed until restarting the DB-engine.
It happens only when the table is switched from read-write to read-only mode. When the table has already been READONLY, the source file is not locked.
I hope, that the source file should be unlocked after setting READONLY and/or DESC mode.
Regards,
Yarick.
P.S. my profile: Pentium4, winXP, java 1.6.0_03,
hsqldb-1.8.0.9
P.P.S. I have tested this behavior via runManagerSwing.bat
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

792
HyperSQL Database Engine (HSQLDB) / Bugs / #792 TEXT tables with DESC attribute are not re-read on select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, hsql team!
I tried the "re-reading" TEXT tables functionality via runManagerSwing.bat:
- I created a TEXT table and assigned it nonempty source file with option DESC.
- after restarting runManagerSwing.bat (see #1854704), "select * from my_text_table" returned correct values. 
- I added a new row to the table's source file
- "select * from my_text_table" returned the rows without the new one :-/
From the documentation I have understood, that when option "DESC" is specified in 'SET TABLE my_text_table SOURCE "my_text_table_file" DESC', then the source file must be reread on every 'select'.
(Doc: "This feature provides functionality similar to the Unix tail command, by re-reading the file each time a select is executed").
Regards,
Yarick.
P.S. my profile: Pentium4, winXP, java 1.6.0_03,
hsqldb-1.8.0.9
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

793
HyperSQL Database Engine (HSQLDB) / Bugs / #793 javadoc on jdbcDataSource is unhelpful
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The class level javadoc on jdbcDataSource is just copied from javax.sql.DataSource. This is highly unuseful as it doesn't say anything about the implementation such as if this datasource supports pooling or not. If you're just going to copy the documentation, then you should just put an @see reference.D
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

794
HyperSQL Database Engine (HSQLDB) / Bugs / #794 Infinite loop
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello.
I recently downloaded 1.8.0.9 and ran our JUnit test suite for our app. on it. A simple query produces an infinite loop in the Select.buildResult(Session, in) method.
In the while loop on line 873:
873: while (notempty && level >= 0) {
the loop terminates if nontempty is false or level is less than 0. notempty is set on 869 and, in my case, remains true. level, on the other hand, never gets a value less than 4. It alternates between 4 and 5 infinitely.
if (!found &&!outerfound) {
level--;
continue;
}
if (level < filter - 1) {
level++;
continue;
}
One iteration decrements level to 4, but then the next iteration increments it to 5 and back again. It goes on forever.
Here is the query that is being executed. Table names have been changed to protect the innocent:
SELECT
table6_1.someColumn someColumn_4,
... and a lot more columns
FROM table1 table1_5,
table2 table2_9,
table3 table3_17,
table4 table4_22,
table5 table5_12,
table6 table6_1,
table7 table7_7 
WHERE table6_1.id = table5_12.id
AND table6_1.id = table2_9.id
AND table6_1.id = table4_22.id
AND table6_1.id = table1_5.id
AND table6_1.id = table7_7.id
AND table6_1.id = table3_17.id
AND table6_1.someColumn = 'xjfje046zyh00k90iun41s68e6b1h1f200000000000000000000000000000001'
All of the id fields are indexed, but someColumn is not. Yes, it is a six way join but there are only a hundred records in each table. The query runs fine on MySQL, PostgreSQL, Oracle, and SQL server.
The funny thing is, almost an identical query executes in our test suite prior to this one without any problems. The only difference with the previous query is that it participates in a UNION ALL with another SELECT statement and criteria is specified on a different column.
I dug a little deeper and noticed TableFilter.findFirst(session) method on line 525:
525: Object value = eStart.getArg2().getValue(session);
Since the tables involved in my query only have a hundred rows, I put a break point on this line and looked at the value of "value". Turns out the same result set from the query is being iterated over again and again.
Let me know if you need anymore contextual information.
I would like to use HsqlDB for unit testing, as it is very fast.
Thanks!
-Nathan
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

795
HyperSQL Database Engine (HSQLDB) / Bugs / #795 HsqlTimer$Task.cancel() hangs on shutdown in 1.8.0.9
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I'm getting a deadlock when doing a database shutdown. The deadlock is easier to reproduce on slower system.
It appears that HsqlTimer$Task first locks the cancel_mutex and then inside HsqlTimer$TaskQueue.signalTaskCancelled, a task queue.
The HsqlTimer.nextTask first locks the queue, and then inside HsqlTimer$Task.isCancelled, the cancel_mutex.
Thank you,
- Gene
----------------------
Thread [main] (Suspended) 
HsqlTimer$TaskQueue.signalTaskCancelled(HsqlTimer$Task) line: not available
HsqlTimer$Task.cancel() line: not available 
HsqlTimer.cancel(Object) line: not available 
ScriptWriterText(ScriptWriterBase).stop() line: not available 
ScriptWriterText(ScriptWriterBase).close() line: not available 
Log.closeLog() line: not available 
Log.close(boolean) line: not available 
Logger.closeLog(int) line: not available 
Database.close(int) line: not available 
DatabaseCommandInterpreter.processShutdown() line: not available 
DatabaseCommandInterpreter.executePart(int, String) line: not available 
DatabaseCommandInterpreter.execute(String) line: not available 
Session.sqlExecuteDirectNoPreChecks(String) line: not available 
Session.execute(Result) line: not available 
jdbcStatement.fetchResult(String) line: not available 
jdbcStatement.execute(String) line: not available 
StorageManager.shutDownHsqldb() line: 187 
StorageManager.stop() line: 104 
PlaybackServiceTest(StorageTestBase).tearDown() line: 81 
PlaybackServiceTest.tearDown() line: 62 
PlaybackServiceTest(TestCase).runBare() line: 140 
TestResult$1.protect() line: 110 
TestResult.runProtected(Test, Protectable) line: 128 
TestResult.run(TestCase) line: 113 
PlaybackServiceTest(TestCase).run(TestResult) line: 124 
TestSuite.runTest(Test, TestResult) line: 232 
TestSuite.run(TestResult) line: 227 
JUnit38ClassRunner.run(RunNotifier) line: 81 
JUnit4TestAdapter.run(TestResult) line: 36 
JUnitTestRunner.run() line: 421 
JUnitTestRunner.launch(JUnitTest, boolean, boolean, boolean, boolean, boolean, boolean, Properties) line: 912 
JUnitTestRunner.main(String[]) line: 766 
Daemon Thread [HSQLDB Timer @1cfb802] (Suspended) 
HsqlTimer$Task.isCancelled() line: not available [local variables unavailable] 
HsqlTimer$TaskQueue.peekTask() line: not available [local variables unavailable] 
HsqlTimer.nextTask() line: not available [local variables unavailable] 
HsqlTimer$TaskRunner.run() line: not available [local variables unavailable] 
Thread.run() line: 619
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

796
HyperSQL Database Engine (HSQLDB) / Bugs / #796 getMetaData().getPrimaryKeys is not working in v1.8.0.9
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here is what my SQL used to create the table:
CREATE TABLE roles (
id integer NOT NULL,
name varchar(100) NOT NULL ,
company_id integer NOT NULL ,
create_date timestamp NOT NULL ,
edit_date timestamp,
comment varchar(100),
PRIMARY KEY (id)
) ;
When running the following code it does not return any rows. 
RestultSet r =con.getMetaData().getPrimaryKeys(null,null,"roles");
I am running the latest version of hsqldb v1.8.0.9
Here my java version running on Windows 2000:
java version "1.6.0_03"
Java(TM) SE Runtime Environment (build 1.6.0_03-b05)
Java HotSpot(TM) Client VM (build 1.6.0_03-b05, mixed mode, sharing)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

797
HyperSQL Database Engine (HSQLDB) / Bugs / #797 Servlet NullPointerException guaranteed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
org.hsqld.Servlet.doPost() calls 
Session session = DatabaseManager.newSession(dbType,
dbPath, resultIn.getMainString(),
resultIn.getSubString(), null);
This null in the 5th arg propagates as props=null. This argument is not modified anywhere and ends up in Database.<init> calling
urlProperties.getProperty("fileaccess_class_name"); where urlProperties will be guaranteed to be null. Stack trace follows.
java.lang.NullPointerException
at org.hsqldb.Database.<init>(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabaseObject(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.Servlet.doPost(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

798
HyperSQL Database Engine (HSQLDB) / Bugs / #798 Rollback is not performed, leaving an inconsistent state
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class: org/hsqldb/sample/FindFile.java, Method: fillFileNames
Problem: When executeUpdate throws an exception, a rollback should be performed on the database to prevent the inconsistent state.
Solution: The below code snippet in the function should be modified:
// Try to drop the table
try {
stat.executeUpdate("DROP TABLE Files");
} catch (SQLException e) { // Ignore Exception, because the table may not yet exist
}
to 
// Try to drop the table
try {
stat.executeUpdate("DROP TABLE Files");
} catch (SQLException e) { // Ignore Exception, because the table may not yet exist
conn.rollback();
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

799
HyperSQL Database Engine (HSQLDB) / Bugs / #799 Allocated resources are not released properly in ZaurusEdito
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class: org/hsqldb/util/ZaurusEditor.java, Method: getAllTables
Problem: 
The function getPrimaryKeys of DatabaseMetaData can throw exception and a close() function on its return should be invoked to close the corresponding resource.
Solution:
The below code snippet in the function getAllTables 
…
ResultSet primKeys = dbmeta.getPrimaryKeys(null, null,
aktTable);
// take only table with a primary key
if (primKeys.next()) {
result.addElement(aktTable);
}
primKeys.close();
…
should be changed to 
…
ResultSet primKeys = null;
try {
primKeys = dbmeta.getPrimaryKeys(null, null,
aktTable);
// take only table with a primary key
if (primKeys.next()) {
result.addElement(aktTable);
}
} finally {
if(primKeys != null) { primKeys.close(); }
}
…
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

800
HyperSQL Database Engine (HSQLDB) / Bugs / #800 Prepared Statement is not closed in ZaurusTableForm.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class: org/hsqldb/util/ZaurusTableForm.java, Methods: searchRows, saveNewRow, saveChanges, deleteRow
Problem: PreparedStatement.close() should be executed when an exception occurs while executing Connection.prepareStatement()
Solution:
The code snippets such as the one shown below in those functions should be modified to close the corresponding resource. For example:
try {
pStmt = cConn.prepareStatement(stmtString
+ this.generatePKWhere());
} catch (SQLException e) {
System.out.println("SQL Exception: " + e.getMessage());
} // end of try-catch
should be changed to 
try {
pStmt = cConn.prepareStatement(stmtString
+ this.generatePKWhere());
… 
} catch (SQLException e) {
System.out.println("SQL Exception: " + e.getMessage());
} finally {
if(pStmt != null) { pStmt.close(); }
}
The same case applies to other methods saveNewRow, saveChanges, deleteRow
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

801
HyperSQL Database Engine (HSQLDB) / Bugs / #801 Prepared Statement is not closed in ZaurusTableForm.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Class: org/hsqldb/util/ZaurusTableForm.java, Methods: searchRows, saveNewRow, saveChanges, deleteRow
Problem: PreparedStatement.close() should be executed when an exception occurs while executing Connection.prepareStatement()
Solution:
The code snippets such as the one shown below in those functions should be modified to close the corresponding resource. For example:
try {
pStmt = cConn.prepareStatement(stmtString
+ this.generatePKWhere());
} catch (SQLException e) {
System.out.println("SQL Exception: " + e.getMessage());
} // end of try-catch
should be changed to 
try {
pStmt = cConn.prepareStatement(stmtString
+ this.generatePKWhere());
… 
} catch (SQLException e) {
System.out.println("SQL Exception: " + e.getMessage());
} finally {
if(pStmt != null) { pStmt.close(); }
}
The same case applies to other methods saveNewRow, saveChanges, deleteRow
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

802
HyperSQL Database Engine (HSQLDB) / Bugs / #802 SQL CHECK constraints with CASE statement fail
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Like the post at [0] suggests, HSQL CHECK constraints can not be used together with CASE WHEN statements.
If you try to insert/update, you will receive a non-informative "S1000 General error java.lang.ClassCastException", followed by the whole SQL statement. (here I have HSQL 1.8.0.9).
If you have something like:
ALTER TABLE personnel ADD CONSTRAINT salary_types_constraint 
CHECK (
CASE 
WHEN pos = 0 AND (salary < 1000 OR salary > 5000)
THEN FALSE -- personal
WHEN pos = 1 AND (salary < 10000 OR salary > 20000)
THEN FALSE -- manager
ELSE TRUE
END 
);
It will not work. It will give you a "S1000 General error java.lang.ClassCastException" error message.
Replace with:
ALTER TABLE personnel ADD CONSTRAINT salary_types_constraint 
CHECK (
(pos = 0 AND (salary > 1000 OR salary < 5000)) 
OR 
(pos = 1 AND (salary < 10000 OR salary > 20000))
);
* [0] http://osdir.com/ml/java.hsqldb.user/2006/msg00278.html
I'd liked to add that information to the post, however I don't know how to access it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

803
HyperSQL Database Engine (HSQLDB) / Bugs / #803 Multiple servlets does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you deploy two org.hsqldb.Servlet in the same JVM they will not work. 
Servlet.doPost() has a line
int dbId = resultIn.databaseID;
int sessionId = resultIn.sessionID;
Session session = DatabaseManager.getSession(dbId,sessionId);
But the dbId is always zero so it can't find the right database, hence can't find the right session hence throws a NullPointerException when the session is attempted to be used
adamb@datacom.co.nz
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

804
HyperSQL Database Engine (HSQLDB) / Bugs / #804 HsqlTimer.TaskRunner thread must nullify contextClassLoader 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Upon shutdown, the HsqlTimer.TaskRunner needs to nullify the thread "taskRunnerThread" contextClassLoader property via a setContextClassloader(null) on shutdown()
By not doing this, if hsql is used in a hot-deployed environment, such as in Tomcat. When the context is destroyed and if shutdown() is called on the database, this thread retains a reference to the WebappClassloader, which will never be cleaned up out of the heap because a JVM thread group retains a reference to this thread. Over time this will lead to a permgen out of memory exception
[jvm thread group] -> [hsqltimer.taskRunner thread].contextClassLoader -> WebappClassloader -> [entire application]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

805
HyperSQL Database Engine (HSQLDB) / Bugs / #805 Literal null in subquery overrides subsequent values
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given this temp table:
create table temp (id int, value int)
insert into temp (id, value) values (0, null)
insert into temp (id, value) values (1, 1)
These four queries should return the same results:
-- works:
select id, value from temp where id = 0
union
select id, value from temp where id = 1
-- works:
select * from (
select id, value from temp where id = 0
union
select id, value from temp where id = 1
)
-- works:
select 0 as id, null as value from temp
union
select 1 as id, 1 as value from temp
-- fails:
select * from (
select 0 as id, null as value from temp
union
select 1 as id, 1 as value from temp
)
However, the last query returns null as the value for both rows.
This causes grief when using Hibernate with a table-per-subclass strategy.
This is in HSQLDB 1.8.0.9.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

806
HyperSQL Database Engine (HSQLDB) / Bugs / #806 TIMESATMP in UTC and CEST/CET change (Daylightsavingtime)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When adding values at(28.10.2007) 2:30 CEST and 2:30 CET both will yield after hard storing/retrieving into db as 2:30 CET.
this is due because the given calendar is not hounored properly.
when changing this to store proper UTC values you have to look for the opposite change (at 25.03.2007 CET-> CEST) because time jumps 1 hour forward....
This problem exists in other jdbc drivers (jaybird-jdbc from firebird) also. So I don't know if this is a bug in hsqldb or in jdbc...
see attached junit-test.
Thanks in advance
Arne Plöse
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

807
HyperSQL Database Engine (HSQLDB) / Bugs / #807 Simple inserts / updates take randomly more than a minute
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use the hsqldb in a process oriented system where process and store records in the database within a few milliseconds.
The hsqldb performs great most of the time, but randomly after inserting data @ 3000 records per minute, the database randomly takes a very long time to execute even a simple update query on a table less than 25 records.
I am currently on a trial and error mode to create and try to fix the problem.
How the current implementation is.
1. HSQLDB version 1.7.2 I it also happens in the current release), running in Server mode.
2. Tables definitions are Cached.
3. updating through Java prepared statements (JDK 1.5).
4. Rate of data input 3000 records per minute.
output from my logs
Mon Apr 07 08:48:30 EDT 2008 | Thread-39 | Step 18 | START : executeUpdate
Mon Apr 07 08:56:20 EDT 2008 | Thread-39 | Step 19 | END : executeUpdate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

808
HyperSQL Database Engine (HSQLDB) / Bugs / #808 OutOfMemory if telnet to port and enter two times enter key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I played around with HSQLDB which comes with Spring Framework 2.5.3, the MANIFEST says it is version 1.8.0.
When I start the server and telnet to the port it started on and press the ENTER key twice I get an OutOfMemoryError. It is reproducible. The stacktrace is:
Exception in thread "HSQLDB Connection @1a457b6" java.lang.OutOfMemoryError: Java heap space
at org.hsqldb.lib.HsqlByteArrayOutputStream.reset(Unknown Source)
at org.hsqldb.rowio.RowOutputBinary.reset(Unknown Source)
at org.hsqldb.rowio.RowInputBinary.resetRow(Unknown Source)
at org.hsqldb.Result.read(Unknown Source)
at org.hsqldb.ServerConnection.init(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:619)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

809
HyperSQL Database Engine (HSQLDB) / Bugs / #809 DatabaseMetaData.getTypeInfo.caseSensitive flag is incorrect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The JDBC DatabaseMetaData method getTypeInfo() describe the database types. There is a boolean column 
"CASE_SENSITIVE".
http://java.sun.com/j2se/1.4.2/docs/api/java/sql/DatabaseMetaData.html#getTypeInfo\()
With HSQLDB 1.8.0.1 it returns "false" (case-insensitive)
for VARCHAR and "true" (case-sensitive) for VARCHAR_IGNORECASE.
It should be the other way around.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

810
HyperSQL Database Engine (HSQLDB) / Bugs / #810 more than one tab in CREATE VIEW STMT leads to a failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have formated my code with more than one tab. The statement looked like:
create view x as select a.* from a union all select b.* from b
This is only a simple example.
I have formatted the code like the following:
create view x as[newline][whitespace][tab]select[newline][whitespace][tab][tab]a.*[newline][whitespace][tab]from[newline][whitespace][tab][tab]a[newline][whitespace]union all[newline][whitespace][tab]select[newline][whitespace][tab][tab]b.*[newline][whitespace][tab]from[newline][whitespace][tab][tab]b
This doesn´t work. HSQLDB allows only one [tab].
More tabs are generally used within "more complex" querries.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

811
HyperSQL Database Engine (HSQLDB) / Bugs / #811 Union Query returns different results with/without params
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following SQL statement (with parameters values inlined), returns the correct (expected) number of records:
select count(*) from location where id in ((select location_id from stop where job_id = 0) union (select 9550 from job))
If, however, I run the query as a PreparedStatement with parameters, it returns only the results from the first part of the UNION (ignoring the row from the secondary table-- job):
PreparedStatement ps = con.prepareStatement("select count(*) from location where id in ((select location_id from stop where job_id = ?) union (select ? from job))");
ps.setInt(1, 0);
ps.setInt(2, 9550);
The first query returns 136 records (the expected number); the second returns only 135. If the problem is with the query itself, I would expect a SQLException trying to create the PreparedStatement (which is the behavior I get when running the same query using H2). Instead, the query seems to work (i.e, no exceptions are raised), but returns the wrong number of records.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

812
HyperSQL Database Engine (HSQLDB) / Bugs / #812 Problem for operations with ifnull HSQL1.8.0.9 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think of having to find a problem in HSQL 1.8.0.9 
Here the query 
select
(datediff('mm','2000-01-01','2001-08-01')-ifnull(null,0))/12 as test1, (datediff('mm','2000-01-01','2001-08-01')/12)-(ifnull(null,0)/12) as test2, 
(datediff('mm','2000-01-01','2001-07-01')-ifnull(null,0))/12 as test3, 
(datediff('mm','2000-01-01','2001-07-01')/12)-(ifnull(null,0)/12) as test4 
from "xxxxx" 
Here results
« test1 » --> 2 
« test2 » --> 1 
« test3 » --> 1 
« test4 » --< 1 
« test1 » != « test2 » ?????????????????????????????????
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

813
HyperSQL Database Engine (HSQLDB) / Bugs / #813 NPE on  jdbcPreparedStatement.executeQuer(String)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi we're getting the following exception:
Caused by: java.sql.SQLException: S1000 General error java.lang.NullPointerException in statement [INSERT INTO MT_1_1_E_BLOBTES (UID_STR, WRITE_XTN_ID, TYPE_OF_WRITE_LOCK, EXPIRATION_TIME, SCN, VERSION_ID, ENT_ORDER ,"_DATA","HASHCODE_DATA","_ID","_STR" ) VALUES ( ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? ) ]
at org.hsqldb.jdbc.Util.throwError(Unknown Source)
at org.hsqldb.jdbc.jdbcPreparedStatement.executeUpdate(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

814
HyperSQL Database Engine (HSQLDB) / Bugs / #814 Insert trigger not working Version 1.8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
Can someone test to see if they are getting the same result. I wrote a trigger and the insert action is not populating the old and new objects.
As a test I ran the TriggerSample.java supplied with the project, and for the insert statements I get: 
---------------------------------------- 
TRIGGER : INS_AFTER AFTER INSERT ON TRIG_TEST
old row : null 
new row : null 
---------------------------------------- 
TRIGGER : INS_BEFORE BEFORE INSERT ON TRIG_TEST
old row : null 
new row : null 
These is the output following the test inserts into the trig_test table as outlined in the bottom of the TriggerSample.java example file.
I tried version 1.8.0.9 and 1.8.0.10 with the same result.
I am curretly running Java 1.6.0_03.
Thanks,
Scott
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

815
HyperSQL Database Engine (HSQLDB) / Bugs / #815 Missing StringComparator.java from (1.8.0.10) release
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The StringComparator.java is missing from (1.8.0.10) release.
It should be in the org.hsqldb.lib package.
It's referenced in the TestSelf.java test.
Looking in the source repository, I can see that org.hsqldb.lib.Sort has the StringComparator as an inner class - the org.hsqldb.lib.Sort in the source distribution does not.
I've tried to build using the source repository version for Sort, but it fails (which in hindsight is no surprise). The test builds and works if I extract the StringComparator from Sort and put it in its own file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

816
HyperSQL Database Engine (HSQLDB) / Bugs / #816 DATE in a HAVING clause gives wrong datatype error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seems that the text to date conversion in SQL statements is not handled when in a HAVING clause. 
See the following example:
------------------------------------------------
CREATE TABLE DATE_TEST (
DATECOL DATE
)
INSERT INTO DATE_TEST VALUES ('2006-01-01')
INSERT INTO DATE_TEST VALUES ('2007-01-01')
INSERT INTO DATE_TEST VALUES ('2008-01-01')
SELECT * FROM DATE_TEST
SELECT * FROM DATE_TEST
WHERE DATECOL > '2007-01-01'
SELECT * FROM DATE_TEST
HAVING DATECOL > '2007-01-01'
------------------------------------------------
The last two statements should give the same result (ie they're not using column aliases). Tested this with HSQLDB 1.8.0.7 & 1.8.0.10. In my test the last statement gives the error: 
Wrong data type / Error Code: -16 / State: 37000 
Seems specific to DATES. The same test with INTEGER for example works fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

817
HyperSQL Database Engine (HSQLDB) / Bugs / #817 Index conflicts for multiple schemas
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have attached an SQL scripts that create two schemas: BOOKS and SONGS. Each schema has a table named PUBLISHER. Each table creates an index and constraint with name PK_PUBLISHER. The DDL succeeds but the SYSTEM_INDEXINFO becomes corrupted. This can detected by using the \di command in the SqlTool browser. Dropping the second occurance fixes the corruption. The bug is that two indexes of the same name but in separate schemas should be allowed. Another example occurs for the UK01_PUBLISHER example. (FYI, UK is my abbreviation for User Key).
A second bug is schemas cannot be created using a database user as the owner / grantee.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

818
HyperSQL Database Engine (HSQLDB) / Bugs / #818 casting bigint to numeric or decimal type does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I have a table with bigint datatype columns and I need to perform some division operations between them, and for that I apply a cast operation to decimal (or numeric).
To my surprise, that cast seems to have zero or fuzzy effect, because the casted values still behave like integers (division gives no decimals). This should be something related to the bigint datatype itself, if I cast to double for example or if the column is just int then I get the expected result (worth to mention that in my samples, the bigint values were not even very big really).
I picked up decimal/numeric cause they offer exact precision, but with this problem the workaround for me will be using double cast, which is just approximation but looks more stable.
I just read the documentation and it tells that decimal divisions will have the larger scale of the operands ... in this case, both have no decimal part ... mmm, could that be the cause? Anyway, the result seems counterintuitive for me ... I would expect full precision in division as well (although maybe, that is not implemented yet). 
Regards.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

819
HyperSQL Database Engine (HSQLDB) / Bugs / #819 Testdb throws NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A trivial problem.
member variable conn is not initialized.
line 69:
Connection c = dataSource.getConnection("sa", "");
should be changed to:
conn = dataSource.getConnection("sa", "");
My email is bench_wang@hotmail.com
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

820
HyperSQL Database Engine (HSQLDB) / Bugs / #820 Bug in org.hsqldb.persist.ScaledRAFi
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In my opinion there's a bug in org.hsqldb.persist.ScaledRAFile in all write methods.
Instdead of:
if (seekPosition >= bufferOffset && seekPosition < bufferOffset + buffer.length) {
bufferDirty = true;
}
In void write(byte[] b, int off, int len) it should be:
if (seekPosition < bufferOffset+buffer.length && seekPosition+len > bufferOffset) {
bufferDirty = true;
}
In void writeInt(int i) it should be:
if (seekPosition < bufferOffset+buffer.length && seekPosition+4 > bufferOffset) {
bufferDirty = true;
}
In void writeLong(long i) it should be:
if (seekPosition < bufferOffset+buffer.length && seekPosition+8 > bufferOffset) {
bufferDirty = true;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

821
HyperSQL Database Engine (HSQLDB) / Bugs / #821 Database shutdown closes System.out (log problem)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Whenever a process database is shut down, the System.out is being closed by SimpleLog.close(). No other output (e.g. further logging in the calling application) can then be sent to the console.
Call Stack:
org.hsqldb.lib.SimpleLog.close()
-- org.hsqldb.persist.Logger.closeLog(CLOSEMODE_NORMAL)
-- org.hsqldb.Database.close(CLOSEMODE_NORMAL)
-- org.hsqldb.Database.closeIfLast()
-- org.hsqldb.Session.close()
-- org.hsqldb.jdbc.jdbcConnection.close()
Thx for fixing this....
Markus
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

822
HyperSQL Database Engine (HSQLDB) / Bugs / #822 1.9.0 - 'Numeric' boolean/bit columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
According to the HSQLDB documentation on bit and boolean types:
'This type of column can also be initialised using values of any numeric type. In this case 0 is translated to false and any other value such as 1 is translated to true.'
On attempting to use numeric values during an INSERT, this was stopped by method convertToType in the BooleanType.class (otherType.Type was Numeric, which resulted in the 'default' case being invoked, and a consequent cryptic message 'Value too long').
Some background: I am planning on migrating to 1.9.0 from MySQL community edition, which uses 1 and 0 representing true and false respectively in its boolean columns. This is for the SourceForge project Kangas Sound Editor (http://sourceforge.net/projects/kangasound/).
In anticipation of your help, thank you!
Paul
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

823
HyperSQL Database Engine (HSQLDB) / Bugs / #823 1.9.0: RETURN_GENERATED_KEYS
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
In 1.9.0, the behaviour to return generated keys from method calls such as executeUpdate(String sql,int[] columnIndexes) followed by getGeneratedKeys() doesn't appear to work - is it implemented yet? A quick look at the source code (in Session.java) indicates that this might be implemented for prepared statements (there is a call to cs.setGeneratedColumnInfo() which looks relevant), but not yet for direct statements.
In anticipation of your help, thank you!
Paul
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

824
HyperSQL Database Engine (HSQLDB) / Bugs / #824 Text tables with FK to memory tables produce an FK violation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a database that uses a text table that has a foreign key to a memory table. I insert data into both tables and shut down the applicaiton.
The data for the text table is persisted correctly in the .csv file, and the data for the schema and the memory tables is persisted in the .script file.
However, when the application starts again a FK violation is thrown.
I suspect that this happens because the engine initializes the text table first, and then add the constraint without first populating the memory table (the INSERT statements are below the ALTER TABLE statements in the .script file).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

825
HyperSQL Database Engine (HSQLDB) / Bugs / #825 documentation not uptodate and missleading
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
when trying to configure my server using the server.properties, I noticed, that the documentation of the possible properties is not consistent. Unfortunately I read the section shortly after table 4.1 in "Advanced Topics"(URL: http://hsqldb.org/doc/guide/ch04.html\), which still shows the old property names like "database.i" and dbname.i" instead of "server.database.i" and server.dbname.I". Although the correct property names are noted somewhere else in the same webpage, it is still confusing and personally took me a long time to sort it out. 
The server itself also doesn't help, since it does not show an error or hint when using wrong or old property names. It just says "Properties read from..." even, if the server.properties file doesn't exist. It would save newbies a lot of time, if the docs would be updated and the server would tell the user about wrong configurations.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

826
HyperSQL Database Engine (HSQLDB) / Bugs / #826 precision on DOUBLE unsupported, contradicting docs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to:
http://hsqldb.org/doc/guide/ch09.html#datatypes-section
"In table definition statements, HSQLDB accepts size, precision and scale qualifiers only for certain types: CHAR(s), VARCHAR(s), DOUBLE(p), NUMERIC(p), DECIMAL(p,s) and TIMESTAMP(p)."
It seems that DOUBLE should support precision (although the precision is ignored by default). However, as of hsqldb 1.8.0.10 (also affecting earlier version), a table creation of the form:
create table foo (bar DOUBLE(x));
(where x is some number for precision) results in:
SQL Error at 'stdin' line 2:
"create table foo(bar DOUBLE(22))"
Unexpected token in statement [create table foo(bar DOUBLE(22]
Either the engine needs to be fixed to reflect the documentation, or the documentation needs to be fixed to remove DOUBLE as supporting precision.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

827
HyperSQL Database Engine (HSQLDB) / Bugs / #827 "checkpoint compact" causes server.shutdown to block
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In version 1.8.0.10 having a database connection issue the command "checkpoint compact" causes the shutdown method in the server (when run from within an existing process, ie. using server.start()) to block. When calling server.stop() and checking for the server's state, the state never changes to shutdown.
It worked fine in 1.8.0.9.
Also, in the documentation, the getState() return values are referred to as in ServerProperties where they are in ServerConstants.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

828
HyperSQL Database Engine (HSQLDB) / Bugs / #828 (1.8.0.5) S1000 General error java.lang.NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am using HSQL v1.8.0.5 and I found a bug in statements execution resulting in the following error:
root cause: java.sql.SQLException: S1000 General error java.lang.NullPointerException in statement [ ... ]
at org.hsqldb.jdbc.Util.throwError(Unknown Source)
at org.hsqldb.jdbc.jdbcPreparedStatement.execute(Unknown Source)
I understand that this bug was fixed in HSQL 1.8.0.7 but I didn't find the root cause or scenario causing this problem. 
This information is important to me for the following reasons:
- I prefer not to upgrade the HSQL from 1.8.0.5 to 1.8.0.7 because it's a risky change for me at this point. If I'll know what causes the problem maybe I'll be able to avoid it in my code.
- If I'll get to the conclusion that I have to upgrade to 1.8.0.7 I will want to verify that the problem was really solved by trying to recreate it.
Any help would be appreciated... 
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

829
HyperSQL Database Engine (HSQLDB) / Bugs / #829 CALL IDENTITY()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The example use of CALL IDENTITY() in Chapter 9. SQL Syntax doesn't work as a prepared statement.
INSERT INTO Test (Id, Name) VALUES (NULL,'Test');
CALL IDENTITY();
This implies that the correct way is to use multiple statements in a single statement which is not allowed in prepared statements.
Clearer guidance on the use of CALL IDENTITY() especially in prepared statements is needed.
It is not clear what happens if multiple threads are adding records. If CALL IDENTITY() is used in a separate statement what guarantees are there that the correct value is returned to each thread?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

830
HyperSQL Database Engine (HSQLDB) / Bugs / #830 bug in BitType.convertToDefaultType()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The code involved is from the svn trunk (I wanted to test HSQLDB with connection.prepareStatement(String sql, int autoGeneratedKeys)).
I think the BitType.convertToDefaultType() has a bug. When I try to convert a Boolean to sybase BIT, it throw an error: 
public Object convertToDefaultType(Object a) throws HsqlException {
if (a == null)
return a;
else
throw Trace.error(95);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

831
HyperSQL Database Engine (HSQLDB) / Bugs / #831 Lost data in temp table from union select.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have three tables (think table per subclass from hibernate) they all have two of the same columns, two tables have two additional fields each. I'm going to union select the three tables. 
table1 (field1 VARCHAR, field2 VARCHAR) 
table2 (field1 VARCHAR, field2 VARCHAR, field3 VARCHAR, field4 VARCHAR) 
table3 (field1 VARCHAR, field2 VARCHAR, field5 VARCHAR, field6 VARCHAR) 
There is one row of data in table2. The following sql returns the correct results (the data row from table2 with two nulls for the values of field5 and field6 that are not present in that table). 
select field1, field2, null as field3, null as field4, null as field5, null as field6 from table1 
union select field1, field2, field3, field4, null as field5, null as field6 from table2 
union select field1, field2, null as field3, null as field4, field5, field6 from table3 
However if that select is put into a temporary table the values of field3 and field4 come back null as well. 
select t1.field1, t1.field2, t1.field3, t1.field4, t1.field5, t1.field6 from ( 
select field1, field2, null as field3, null as field4, null as field5, null as field6 from table1 
union select field1, field2, field3, field4, null as field5, null as field6 from table2 
union select field1, field2, null as field3, null as field4, field5, field6 from table3) t1 
I tried this in versions 1.8.0.9 and 1.8.0.10
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

832
HyperSQL Database Engine (HSQLDB) / Bugs / #832 1.9: Delete trigger does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Delete SQL triggers doesn't seem to work in 1.9 (svn 22. Sep 2008).
Here's a script to test (deletion should trigger an entry in log table):
drop table test if exists;
drop table log if exists;
create cached table test(id integer, data varchar(20));
create cached table log(id integer, data varchar(20), op varchar(10));
create trigger trig after delete on test referencing old row as oldrow
for each row 
insert into log values (oldrow.id, oldrow.data, 'deleted')
insert into test values(1,'one');
insert into test values(2,'two');
delete from test where id=1;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

833
HyperSQL Database Engine (HSQLDB) / Bugs / #833 SELECT DISTINCT (exp) ORDER BY 1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a non-trivial expression is used in an ORDER BY clause in a SELECT DISTINCT, a variety of inappropriate error messages get triggered.
For example: SELECT DISTINCT (base.Ref IS NULL) FROM Base base ORDER BY 1 gives "ORDER BY item should be in the SELECT DISTINCT list"; obviously, item #1 from the SELECT DISTINCT list is in that list.
This error can be avoided by putting the column used in the SELECT DISTINCT list, but I've been getting problems with a "Wrong Data Type" exception in some circumstances (which I haven't been able to characterize) even then.
I can provide schemas and detailed examples, but it seems to happen with all of the commands of this form that I've tried.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

834
HyperSQL Database Engine (HSQLDB) / Bugs / #834 SQLC has been renamed to jIncarnate
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
On your web site (http://www.hsqldb.org/web/hsqlUsing.html) you reference SQLC tool. I'd like to inform you that the name of the tool was changed to jIncarnate.
On a similar note, you may want to add Hammurapi code review tool (http://www.hammurapi.biz/hammurapi-biz/ef/xmenu/hammurapi-group/products/hammurapi/index.html) to the list of software which uses HSQLDB. Hammurapi stores code review information into HSQLDB.
---
Best regards, Pavel.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

835
HyperSQL Database Engine (HSQLDB) / Bugs / #835 Incorrect Wrong Date Type from "is null" as column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you have a schema like:
create table tasks(done timestamp)
and you've got a row with a non-null done,
select (done is null) from tasks;
will give a Wrong Date Type error when it tries (done).getValue(session, Types.BOOLEAN) on line 3339 of Expression.java. It looks to me like that section should only run for an exprType of ADD, SUBTRACT, etc. (the non-default branches of the case statement following).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

836
HyperSQL Database Engine (HSQLDB) / Bugs / #836 Foreign keys between schemas don't work.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
You can't make a foreign key between tables in different schemas.
These few lines of sql set it up:
> create schema schema1 authorization dba;
> create table schema1.table1 ( table1_id integer primary key);
> create schema schema2 authorization dba;
All three of the following options incorrectly produce errors:
1)
> create table schema2.table2 (table2_id integer primary key, table1_id integer, foreign key (table1_id) references schema1.table1);
produces
"invalid schema name: SCHEMA1 in statement [create table schema2.table2 (table2_id integer primary key, table1_id integer, foreign key (table1_id) references schema1.table1]"
2)
> create table schema2.table2 (table2_id integer primary key, table1_id integer);
> alter table schema2.table2 add constraint fktbl1 foreign key (table1_id) references schema1.table1;
produces
"invalid schema name: SCHEMA1 in statement [alter table schema2.table2 add constraint fktbl1 foreign key (table1_id) references schema1.table1]"
3)
> create table schema2.table2 (table2_id integer primary key, table1_id integer);
> alter table schema2.table2 add constraint fktbl1 foreign key (table1_id) references schema1.table1 (table1_id);
produces
"invalid schema name: SCHEMA1 in statement [alter table schema2.table2 add constraint fktbl1 foreign key (table1_id) references schema1.table1]"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

837
HyperSQL Database Engine (HSQLDB) / Bugs / #837 Typo on home page
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a typo at http://hsqldb.org/
"In it's current version" should be "In its current version"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

838
HyperSQL Database Engine (HSQLDB) / Bugs / #838 Incorrect result with statement.setMaxRows(1)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
please have a look at this code:
String sSqlStatement = "SELECT count(*) as Anzahl FROM LAGER";
statement = connection.createStatement();
statement.setMaxRows(1); // => incorrect results with HSQLDB V1.8.0.10
rs = statement.executeQuery(sSqlStatement);
rs.next();
System.out.println(rs.getObject(1)); // => 1 (incorrect!!!!)
statement.setMaxRows(2);
rs = statement.executeQuery(sSqlStatement);
rs.next();
System.out.println(rs.getObject(1)); // => 82 (correct)
The select statement always returns just one row.
But when I define statement.setMaxRows(1) I always get as result "1" (for other sql statements as well) instead of the correct result.
Ciao
Holger
hst1@online.de
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

839
HyperSQL Database Engine (HSQLDB) / Bugs / #839 Function call syntax
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
jdbcConnection requires using exactly "?= call" for function call.
I'd prefer less strong check, because simply using "? = call" causes much time loss to find out why it doesn't work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

840
HyperSQL Database Engine (HSQLDB) / Bugs / #840 cancel trigger action
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i tried to throw an RuntimeException from a triggers fire method expecting the corresponding data not to be written to the database. instead it was.
could/should be a way to cancel a triggers action.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

841
HyperSQL Database Engine (HSQLDB) / Bugs / #841 1.8.0.10: Deadlock when using setWriteDelay
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hi,
while executing "SET WRITE DELAY" I get a deadlock (as usual not every time)
between the Timer thread and the thread executing the SQL. Here's the thread 
dump:
Java stack information for the threads listed above:
"HSQLDB Timer @77546dbc":
at org.hsqldb.lib.HsqlTimer$Task.getNextScheduled(Unknown Source)
- waiting to lock <0x00007f33625cfe10> (a org.hsqldb.lib.HsqlTimer$Task)
at org.hsqldb.lib.HsqlTimer.compare(Unknown Source)
at org.hsqldb.lib.HsqlArrayHeap.remove(Unknown Source)
- locked <0x00007f3367d09310> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer$TaskQueue.removeTask(Unknown Source)
at org.hsqldb.lib.HsqlTimer.nextTask(Unknown Source)
- locked <0x00007f3367d09310> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(Unknown Source)
at java.lang.Thread.run(Thread.java:619)
"Thread-1":
at org.hsqldb.lib.HsqlTimer$TaskQueue.signalTaskCancelled(Unknown Source)
- waiting to lock <0x00007f3367d09310> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer$Task.cancel(Unknown Source)
at org.hsqldb.lib.HsqlTimer$Task.setPeriod(Unknown Source)
- locked <0x00007f33625cfe10> (a org.hsqldb.lib.HsqlTimer$Task)
at org.hsqldb.lib.HsqlTimer.setPeriod(Unknown Source)
at org.hsqldb.scriptio.ScriptWriterBase.setWriteDelay(Unknown Source)
at org.hsqldb.persist.Log.setWriteDelay(Unknown Source)
at org.hsqldb.persist.Logger.setWriteDelay(Unknown Source)
- locked <0x00007f3362590098> (a org.hsqldb.persist.Logger)
at org.hsqldb.DatabaseCommandInterpreter.processSet(Unknown Source)
at org.hsqldb.DatabaseCommandInterpreter.executePart(Unknown Source)
at org.hsqldb.DatabaseCommandInterpreter.execute(Unknown Source)
at org.hsqldb.Session.sqlExecuteDirectNoPreChecks(Unknown Source)
- locked <0x00007f336258fe40> (a org.hsqldb.Database)
at org.hsqldb.Session.execute(Unknown Source)
- locked <0x00007f336258fe40> (a org.hsqldb.Database)
at org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.jdbcStatement.execute(Unknown Source)
at de.fzj.unicore.wsrflite.persistence.HsqldbPersist.createTablesAndPreparedStatements(HsqldbPersist.java:118)
at de.fzj.unicore.wsrflite.persistence.HsqldbPersist.init(HsqldbPersist.java:156)
[....]
best regards,
Bernd.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

842
HyperSQL Database Engine (HSQLDB) / Bugs / #842 trigger acitions executed after commit!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the acions of a before-update-trigger are executed after commit! in the example i provided you read different values in two consecutive selects after a commit!
the example prodces:
1 0
10 11
this shouldn't happen, especially not after a commit!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

843
HyperSQL Database Engine (HSQLDB) / Bugs / #843 HSQL jdbcConnection has no socket timeout?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If something bad happens (like a rogue firewall rule that drops packets) to a jdbcConnection to an HSQLDB after it's already been opened, operations on the connection will hang for a long time. There's appears to be no socket.setSoTimeout() call in the connection setup to allow this to be controlled.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

844
HyperSQL Database Engine (HSQLDB) / Bugs / #844 General SQL Error/NullPointerException in cascading deletes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a schema with two tables METRIC and SLICE. SLICE references METRIC with ON DELETE CASCADE foreign key. METRIC has hierarchical structure, i.e. it has PARENT column.
When I issue delete in METRIC I get General SQL Exception / NullPointerException. Once it happens other connections start getting NullPointerException for no reason. The database server has to be restarted to fix this.
I had this error in some other case with three tables connected with FK with ON DELETE CASCADE. 
I'm not privy to HSQLDB internals, my speculation is that it happens when some particular record has two cascading deletion paths, when the first path is executed it sets something to null. When the second path is executed, it dereference that something without checking for null and it results in NullPointerException.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

845
HyperSQL Database Engine (HSQLDB) / Bugs / #845 Types.getTypeString returns NULL for BIT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to the JavaDoc Types.getTypeString should return the SQL type string usable in HSQLDB for a given java.sql.Types int. Since BIT is one of the supported types in HSQLDB this method should return either "BIT" or "BOOLEAN" for it.
I suppose a simple "typeNames.put(Types.BIT, "BOOLEAN");" in the static initialization should be enough.
Affects: HSQLDB 1.8.0.10
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

846
HyperSQL Database Engine (HSQLDB) / Bugs / #846 DatabaseMetaData getColumns doesn't include IS_AUTOINCREMENT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to the Java API for DatabaseMetaData the ResultSet retrieved by getColumns(...) should include a column which states whether the table column is autoincrement. HSQLDBs method does not return this information.
(Quote JavaAPI:
getColumns
Retrieves a description of table columns available in the specified catalog. 
...
Each column description has the following columns: 
...
IS_AUTOINCREMENT String => Indicates whether this column is auto incremented)
PS: Is there any other way to get my hands on that piece of information right now?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

847
HyperSQL Database Engine (HSQLDB) / Bugs / #847 Documentation: SET LOGSIZE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the documentation on the web site http://hsqldb.org/web/hsqlDocsFrame.html Chapter 4, Table 4.8 it says
you have to issue "SET LOG_SIZE ..." to set the log file max size. 
It should be "SET LOGSIZE" instead.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

848
HyperSQL Database Engine (HSQLDB) / Bugs / #848 1.8.0.10 Lock File Does Not Work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the latest release the Database in use exception is no longer thrown. I have tracked this down to substantial changes in the lock file functionality. I turned on the new hsqldb.lock_file property. 
In this new version instead of getting a SQL State 08001 with a nice Database in use message you get
File input/output error XXXX.backup java.io.FileNotFoundException: XXXX.data (The requested operation cannot be performed on a file with a user-mapped section open)
In some cases during my testing my database got corrupted and I had to restore a backup in order to continue testing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

849
HyperSQL Database Engine (HSQLDB) / Bugs / #849 "ALTER USER SET PASSWORD" fails unconditionally
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was exploring your svn head yesterday and I noticed that ALTER USER SET PASSWORD="..." fails unconditionally. I'd see things like:
<code>
Internal error
java.lang.RuntimeException: unsupported internal operation: StatementCommand
at org.hsqldb.Error.runtimeError(Error.java:65)
at org.hsqldb.StatementCommand.<init>(StatementCommand.java:78)
at org.hsqldb.ParserDDL.compileAlterUser(ParserDDL.java:4212)
at org.hsqldb.ParserDDL.compileAlter(ParserDDL.java:296)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:200)
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:87)
at org.hsqldb.Session.executeDirectStatement(Session.java:1041)
at org.hsqldb.Session.execute(Session.java:862)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1803)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:631)
</code>
Naturally I looked at StatementCommand.java and it looks like a really simple fix. ParserDDL.compileAlterUser is compiling a list of Expressions instead of a list of Objects. (Why that distinction exists I'm not sure.) So StatementCommand overloaded for Expressions fails unconditionally when receiving a SET_PASSWORD type, since there's just no code to handle it. StatementCommand overloaded for Objects on the other hand already has code to handle receiving a SET_PASSWORD type. Just switching Object in place of Expression in compileAlterUser seems to fix the problem, though I'm no veteran of this project. I attached a patch against the SVN HEAD though, so do take a look and please apply if I haven't horribly misunderstood the situation.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

850
HyperSQL Database Engine (HSQLDB) / Bugs / #850 get_column_name defaults false in 1.8.0.10?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation at http://hsqldb.org/doc/guide/ch04.html#N109E6 states that get_column_name defaults to TRUE (so that getColumnName and getColumnLabel will return the values I would expect them to)
However after a quick test, it would seem that this is not the case, and it is actually defaulting to FALSE :-/
Not sure if this is an issue with the documentation, or the engine itself, my guess would be the latter...
Here's the code to demonstrate the problem:
//-------------------------------------
Class.forName("org.hsqldb.jdbcDriver" );
Connection c = DriverManager.getConnection( "jdbc:hsqldb:mem:aname", "sa", "" ) ;
// Connection c = DriverManager.getConnection( "jdbc:hsqldb:mem:aname;get_column_name=true", "sa", "" ) ; // This works, but should be the default?
Statement s = c.createStatement() ;
s.execute( "CREATE TABLE test( name VARCHAR, age INTEGER )" ) ;
ResultSet r = s.executeQuery( "SELECT name AS n, age AS a FROM test" ) ;
ResultSetMetaData d = r.getMetaData() ;
for( int i = 1 ; i <= d.getColumnCount() ; i++ ) {
System.out.printf( "Col %d: Name:%s Label:%s\n", i, d.getColumnName( i ), d.getColumnLabel( i ), d.getColumnTypeName( i ) ) ;
}
r.close();
s.close();
c.close();
//-------------------------------------
And the output currently is:
Col 1: Name:N Label:N
Col 2: Name:A Label:A
But I would expect the output to be the same as when using the commented out connection above, ie:
Col 1: Name:NAME Label:N
Col 2: Name:AGE Label:A
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

851
HyperSQL Database Engine (HSQLDB) / Bugs / #851 primary key on varchar does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
with the example below the HSQLDB says there is a unique constraint violdation in the column FIRSTFIELD
???
bizar
---
CREATE SCHEMA TESTSCHEMA AUTHORIZATION DBA
CREATE TABLE TEST ( FIRSTFIELD VARCHAR(11) NOT NULL PRIMARY KEY, CREATION_DATE TIMESTAMP(6) NOT NULL);
CREATE USER SA PASSWORD "" 
GRANT DBA TO SA
SET WRITE_DELAY 20
SET SCHEMA TESTSCHEMA
Insert into TEST (FIRSTFIELD,CREATION_DATE) values ('12312312312','04-09-08 14:30:51.520000000');
Insert into TEST (FIRSTFIELD,CREATION_DATE) values ('74454020382','02-09-08 14:59:50.715000000');
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

852
HyperSQL Database Engine (HSQLDB) / Bugs / #852 prepared Statement with subselect doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tested it with folloing statement:
PreparedStatement stmt =
conn.prepareStatement("SELECT * FROM (SELECT ? a, ? b FROM dual) abc");
stmt.setString(1, "ABC");
stmt.setInt(2, 122);
Expected result is:
ABC 122
but the result is:
null null
I did a quickfix in the constructor of CompiledStatement line 312 (version 1.8.0.9)
for (int i = 0; i < subqueries.length; ++i) {
for (int j = 0; j < subqueries[i].select.exprColumns.length; ++j) {
Expression colexpr = subqueries[i].select.exprColumns[j];
if (colexpr.getDataType() == Types.NULL) {
colexpr.setDataType(Types.VARCHAR);
}
}
}
This solved the problem for me.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

853
HyperSQL Database Engine (HSQLDB) / Bugs / #853 NullPointerException in HSQL engine
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NullPointerException in HSQL engine
While running HSQLDB 1.8.0.10 in-process during a day with multiple insertions (more than 20 000 in a day), some insertions are rejected with a NullPointerException.
The VM Xmx parameter is set to 2048m. 
I have modified the Result(Throwable t, String statement) constructor in order to trace the Full Stack of the exception. Here are the logs: 
14:12:26,841 WARN [JDBCExceptionReporter] SQL Error: 40, SQLState: S1000
14:12:26,841 ERROR [JDBCExceptionReporter] S1000 General error java.lang.NullPointerException 
at org.hsqldb.Index.balance(Index.java:386)
at org.hsqldb.Index.insert(Index.java:341)
at org.hsqldb.Table.indexRow(Table.java:3304)
at org.hsqldb.Table.insertNoCheck(Table.java:1938)
at org.hsqldb.Table.insertRow(Table.java:1895)
at org.hsqldb.Table.insert(Table.java:1878)
at org.hsqldb.CompiledStatementExecutor.executeInsertValuesStatement(CompiledStatementExecutor.java:307)
at org.hsqldb.CompiledStatementExecutor.executeImpl(CompiledStatementExecutor.java:134)
at org.hsqldb.CompiledStatementExecutor.execute(CompiledStatementExecutor.java:99)
at org.hsqldb.Session.sqlExecuteCompiledNoPreChecks(Session.java:1043)
at org.hsqldb.Session.sqlExecute(Session.java:1186)
at org.hsqldb.Session.sqlExecute(Session.java:1182)
at org.hsqldb.Session.execute(Session.java:884)
at org.hsqldb.ServerConnection.run(ServerConnection.java:252)
at java.lang.Thread.run(Thread.java:619) in statement [insert into ... ]
We also get NPE trying to delete rows :
02:09:10,993 WARN [JDBCExceptionReporter] SQL Error: 40, SQLState: S1000
02:09:10,993 ERROR [JDBCExceptionReporter] S1000 General error java.lang.NullPointerException 
at org.hsqldb.DiskNode.isFromLeft(Unknown Source)
at org.hsqldb.Index.delete(Unknown Source)
at org.hsqldb.Table.deleteNoCheck(Unknown Source)
at org.hsqldb.Table.deleteNoRefCheck(Unknown Source)
at org.hsqldb.Table.delete(Unknown Source)
at org.hsqldb.CompiledStatementExecutor.executeDeleteStatement(Unknown Source)
at org.hsqldb.CompiledStatementExecutor.executeImpl(Unknown Source)
at org.hsqldb.CompiledStatementExecutor.execute(Unknown Source)
at org.hsqldb.Session.sqlExecuteCompiledNoPreChecks(Unknown Source)
at org.hsqldb.Session.sqlExecute(Unknown Source)
at org.hsqldb.Session.sqlExecute(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:619) in statement [delete from ...]
Thanks
Romain
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

854
HyperSQL Database Engine (HSQLDB) / Bugs / #854 Union in subselect yields incorrect results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following scenario:
create table foo (bar int);
insert into foo values (1);
select *
from ( 
select null as A, 4 as B from foo
union select 5 as A, 6 as B from foo
) 
is expected to output: 
A B
<null> 4
5 6
but does output:
A B
<null> 4
<null> 6
Running just the inner query does generate the expected result. 
This also appears to be the cause of the issue 2102123.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

855
HyperSQL Database Engine (HSQLDB) / Bugs / #855 NullPointerException on shutdown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I start up my HSQL Database and want to connect to it and shutdown properly. I wrote a simple class to make the connection and issue the shutdown statement. The code looks like this:
Class.forName("org.hsqldb.jdbcDriver");
String url = "jdbc:hsqldb:hsql://localhost/" + dbname;
Connection con = DriverManager.getConnection(url, user, pwd);
String sql = "SHUTDOWN";
Statement stmt = con.createStatement();
stmt.executeUpdate(sql);
stmt.close();
System.out.println("The database was shutdown successfully.");
When I call this code I see an exception on the server console (I built with Javac debug so the stack trace has useful line numbers):
Exception in thread "HSQLDB Connection @1543c88" java.lang.NullPointerException
[Server@116471f]: Initiating shutdown sequence...
at org.hsqldb.ServerConnection.close(ServerConnection.java:170)
at org.hsqldb.ServerConnection.run(ServerConnection.java:270)
at java.lang.Thread.run(Thread.java:619)
The exception doesn't cause any trouble. The ServerConnection is trying to close a socket and the variable was never initialized. 
It would be nice to have this fixed. I have tried this on Windows XP and OpenSUSE 11 with the same results.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

856
HyperSQL Database Engine (HSQLDB) / Bugs / #856 patch for avoiding recursive call on ConnectionPool.setDatab
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Current setDatabase(String) in org/hsqldb/jdbc/pool/JDBCConnectionPoolDataSource.java is erroneously a recursive function. This patch fixes the problem.
The patch has been checked against 1.9.0-alpha1
Bye,
Giuseppe
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

857
HyperSQL Database Engine (HSQLDB) / Bugs / #857 Hard to find how to set server IP address
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be helpful if you mentioned the "server.address" configuration option in the "Server and Web Server Properties" section of the "Advanced Topics" section of the documentation (http://hsqldb.org/doc/guide/ch04.html#N10AC1).
The existence of this option is implied in the java docs for org.hsqldb.Server (http://hsqldb.org/doc/src/org/hsqldb/Server.html), but it's not obvious from the "guide" (http://hsqldb.org/doc/guide): The "Server Modes" section of chapter 1 (http://hsqldb.org/doc/guide/ch01.html#N1013D) says "Server modes can use preset properties or command line arguments as detailed in the Advanced Topics chapter", but the relevant section of the "Advanced Topics" chapter (http://hsqldb.org/doc/guide/ch04.html#N10AC1) doesn't include the "server.address" option. Chapter 1 does mention that org.hsqldb.Server takes '-?' to give a usage summary (why not '-h' or '--help' or '-help' ?), which does mention the '-address' arg from which the 'server.address' config can be inferred, but it would be better if it was mentioned explicitly in chapter 4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

858
HyperSQL Database Engine (HSQLDB) / Bugs / #858 JDBC driver does not respect nested Properties objects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Creation of a connection using DriverManager.getConnection(url, props) does not read the properties correctly if the Properties object passed in was created using the Properties(Properties defaults) constructor. It treats values in the nested Properties object as though they do not exist. I'm sure there is a simpler demonstration, but below is code approximating what is used. The shutdown property is not respected. When the line "props = new Properties(props);" is removed, the shutdown property is respected as it should be. With the code as is, the result is 42 printed twice. The expected result (and what is seen if the Properties object is not nested) is a single print out of 42, and then a SQL exception caused by "org.hsqldb.HsqlException: user lacks privilege or object not found: FOO". This is expected because the database should have been shutdown and cleared between connections. This was tested in versions 1.8.0.7 and 1.9.0-alpha2
Class.forName("org.hsqldb.jdbcDriver");
String database = "db1";
String url = "jdbc:hsqldb:mem:" + database + ":";
Properties props = new Properties();
props.setProperty("shutdown", "true");
props = new Properties(props);
props.setProperty("user", "sa");
props.setProperty("password", "");
Connection connection = DriverManager.getConnection(url, props);
Statement createStatement = connection.createStatement();
createStatement.execute("create table foo (id integer)");
createStatement.execute("insert into foo values (42)");
ResultSet executeQuery = createStatement.executeQuery("select * from foo");
while(executeQuery.next()) {
System.out.println("Num: " + executeQuery.getInt("ID"));
}
executeQuery.close();
createStatement.close();
connection.close();
connection = DriverManager.getConnection(url, props);
createStatement = connection.createStatement();
executeQuery = createStatement.executeQuery("select * from foo");
while(executeQuery.next()) {
System.out.println("Num: " + executeQuery.getInt("ID"));
}
executeQuery.close();
createStatement.close();
connection.close();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

859
HyperSQL Database Engine (HSQLDB) / Bugs / #859 create table fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using alpha2.
CREATE TABLE TEST1
(
t1 VARCHAR(200) NOT NULL,
t2 VARCHAR(200) NULL,
);
fails with
Caused by: java.sql.SQLException: unexpected token: NULL
BTW. alpha2 distribution goes with only one hsqldb.jar compiled with java 1.6, so in order to use it for older javas recompilation is needed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

860
HyperSQL Database Engine (HSQLDB) / Bugs / #860 timestampdiff does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying use timestampdiff.
sql> select * from b;
B C
--------------------- ---------------------
2009-04-08 00:53:30.0 2009-04-09 00:53:30.0
select timestampdiff(SQL_TSI_FRAC_SECOND, b,c) from b;
8.4.2009 14:05:13 org.hsqldb.cmdline.SqlTool main
SEVERE: SQL Error at 'stdin' line 7:
"select timestampdiff(SQL_TSI_FRAC_SECOND, b,c) from b"
data exception: interval field overflow
Dodumentation says you have to use format
TIMESTAMPDIFF ( <datetime value expr 1>, datetime value expr 2>, <tsi datetime field> )
If I try that format, then HSQL crash:
sql> select timestampdiff(SQL_TSI_HOUR, b,c) from b;
8.4.2009 14:06:21 org.hsqldb.cmdline.SqlTool main
SEVERE: Rolling back SQL transaction.
Exception in thread "main" java.lang.ClassCastException: java.lang.Long cannot be cast to org.hsqldb.types.TimestampData
at org.hsqldb.jdbc.JDBCResultSet.getTimestamp(JDBCResultSet.java:748)
at org.hsqldb.cmdline.SqlFile.displayResultSet(SqlFile.java:3125)
at org.hsqldb.cmdline.SqlFile.processSQL(SqlFile.java:2911)
at org.hsqldb.cmdline.SqlFile.scanpass(SqlFile.java:707)
at org.hsqldb.cmdline.SqlFile.execute(SqlFile.java:555)
at org.hsqldb.cmdline.SqlFile.execute(SqlFile.java:462)
at org.hsqldb.cmdline.SqlTool.objectMain(SqlTool.java:683)
at org.hsqldb.cmdline.SqlTool.main(SqlTool.java:263)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

861
HyperSQL Database Engine (HSQLDB) / Bugs / #861 Deadlock in 1.9a2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using hsqldb 1.9 alpha2, I encountered a deadlock, wherein one thread was attempting to get a new connection to the db, while another was in the middle of checkpoint.
I'm using a mixture of cached and memory tables.
Relevant bits from the stack dump below.
Thank you!
===================================================
"Resource-RecoveryRunnable":
at org.hsqldb.persist.Logger.logConnectUser(Logger.java:248)
- waiting to lock <0x36237230> (a org.hsqldb.persist.Logger)
at org.hsqldb.Database.connect(Database.java:455)
- locked <0x3626bfb8> (a org.hsqldb.Database)
at org.hsqldb.DatabaseManager.newSession(DatabaseManager.java:153)
at org.hsqldb.jdbc.JDBCConnection.<init>(JDBCConnection.java:3244)
at org.hsqldb.jdbc.JDBCDriver.getConnection(JDBCDriver.java:289)
at org.hsqldb.jdbc.JDBCDriver.connect(JDBCDriver.java:247)
at java.sql.DriverManager.getConnection(DriverManager.java:525)
- locked <0x31972df8> (a java.lang.Class)
at java.sql.DriverManager.getConnection(DriverManager.java:171)
- locked <0x31972df8> (a java.lang.Class)
"P2PNoficationClientImpl-Resource-ClientDispatcher":
at org.hsqldb.Database.isStoredFileAccess(Database.java:830)
- waiting to lock <0x3626bfb8> (a org.hsqldb.Database)
at org.hsqldb.persist.DataFileCache.open(DataFileCache.java:199)
at org.hsqldb.persist.Log.checkpoint(Log.java:408)
at org.hsqldb.persist.Logger.checkpoint(Logger.java:342)
- locked <0x36237230> (a org.hsqldb.persist.Logger)
at org.hsqldb.Session.performPostExecute(Session.java:1022)
at org.hsqldb.Session.execute(Session.java:869)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1801)
at org.hsqldb.jdbc.JDBCStatement.executeUpdate(JDBCStatement.java:204)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

862
HyperSQL Database Engine (HSQLDB) / Bugs / #862 missing changelog of 1.8.10
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is only a changelog up to 1.8.0 but 1.8.1-1.8.10 are not documented.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

863
HyperSQL Database Engine (HSQLDB) / Bugs / #863 HSQLDB doesn't complain about, but others do...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
select
bean04x0_.F_id as F_id
from
T_Bean04 bean04x0_
inner join
T_Bean03 bean04x0_1_
on bean04x0_.F_id=bean04x0_1_.F_id
where
F_id=?
The problem: the field "F_id" can be found in both tables. HSQLDB doesn't complain about this, but other DB do.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

864
HyperSQL Database Engine (HSQLDB) / Bugs / #864 Clob:  SetClobParamter : Invalidad argument
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have added support for HSQLDB inSun's OpenESB (BPEL-SE). It seem to be working fine except Clob data.
JDBCPrepareStatement.java: setCharacterStream() : When java.io.Reader is type of CharacterArray, it goes into else condition of (reader instanceof java.io.StringReader) where it's calling setParamter(paramterIndex, sb.toString()). Here sb is StringBuffer.
setPatameter() calles setClobParamter() which throws invalid argument exception because sb (StringBuffer) is not instance of Clob.
void setClobParameter(int i, Object o) throws SQLException {
if (o instanceof Clob) {
parameterValues[i - 1] = o;
parameterSet[i - 1] = true;
return;
}
throw Util.invalidArgument();
}
I have tried following things:
1. I tried converting sb (StringBuffer) to JDBCClob in setCharacterStream() but in RowOutputBase.java:writeData(): case Types.SQL_CLOB:
writeClob tries to convert into ClobData and throws exception.
2. I also tried to create ClobDataID object in setcharacterStram() function and modified setClobParamter() function to accept type:ClobData .
I this case, in JDBCPrepareStatement.java:performPreExecute() function, it throws exception when it type class to Clob.
I would really appreciate if you can give some hint. 
NOTE: I have fixed one bug in TIMESTAMPDIFF function which I will submit a patch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

865
HyperSQL Database Engine (HSQLDB) / Bugs / #865 transaction rollback: serialization failure" error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Fred,
Today when I started the loadtest, I am get transaction rollback: serialization failure" error so couldn't continue load test. If I run single test, It doesn't happen but if I run same test in loop for let's say 10 times, I was able to reproduce it every time and out of 10, it could happen 2-3 times.
Please find attached compressed log file. See the ThreadID=41.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

866
HyperSQL Database Engine (HSQLDB) / Bugs / #866 Randomly "Table not found: SYSTEM_TABLES"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.sql.SQLException: Table not found: SYSTEM_TABLES in statement [SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TABLES] 
at org.hsqldb.jdbc.Util.sqlException(Unknown Source) 
at org.hsqldb.jdbc.jdbcStatement.fetchResult(Unknown Source) 
at org.hsqldb.jdbc.jdbcStatement.executeQuery(Unknown Source) 
at org.hsqldb.jdbc.jdbcDatabaseMetaData.execute(Unknown Source) 
at org.hsqldb.jdbc.jdbcDatabaseMetaData.getTables(Unknown Source) 
... 
occures randomly in our junit load tests using multiple threads simultanously.
each thread opens his own connection to his own database file via "jdbc:hsqldb:file:/home/foo/testdb_<some_guid>;shutdown=true"
if this error occures once, all following attempts to read the system table (of newly created databases) dying with the same error. the jvm has to be terminated in order to successfully read table names again. 
used version: HSQLDB 1.8.0.10
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

867
HyperSQL Database Engine (HSQLDB) / Bugs / #867 Alter table resets identity
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I work with hsqldb 1.8.0.8.
Altering a table with an identity results in a reset of the identity.
Example:
CREATE TABLE TEST (
ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1),
FIELD1 VARCHAR
);
INSERT INTO TEST (FIELD1) VALUES ('Entry with Id 1');
INSERT INTO TEST (FIELD1) VALUES ('Entry with Id 2');
DELETE FROM TEST;
ALTER TABLE TEST ADD COLUMN FIELD2 VARCHAR;
INSERT INTO TEST (FIELD1) VALUES ('Entry with expected Id 3, but actual Id 1');
SELECT * FROM TEST;
The object inserted after the "alter table" statement is created with ID 1, altough objects with ID 1 and 2 have already existed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

868
HyperSQL Database Engine (HSQLDB) / Bugs / #868 Regression from 1.8 upon COALESCE and COUNT with GROUP BY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Versions 1.8 and 1.9 alpha 2 (latest build as of 2009-05-22) behave differently
upon doing the following experiment. I would appreciate if you could tell
if this is by design, a bug which can be fixed, or something I should work around.
You can recreate my results like this:
1) Create a test table
CREATE CACHED TABLE test (
id INTEGER IDENTITY,
something_or_null VARCHAR(50)
);
2) Insert some data
INSERT INTO test (something_or_null) VALUES ('test');
INSERT INTO test (something_or_null) VALUES (NULL);
3) Verify that you inserted two records
SELECT * FROM test;
4) Try to execute the following query, which attempts to count records
which use a given value or null (transformed into an empty string using COALESCE)
in the "something_or_null" column:
SELECT
COALESCE(something_or_null,'') something_or_empty_string,
COUNT(id) count_of_such_records
FROM test
GROUP BY something_or_empty_string
5) What you should see:
On version 1.9, the query fails.
On version 1.8, the query succeeds and you should see a result set:
SOMETHING_OR_EMPTY_STRING COUNT_OF_SUCH_RECORDS 
------------------------- --------------------- 
test 1 
1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

869
HyperSQL Database Engine (HSQLDB) / Bugs / #869 LOCK TABLE <TABLE> WRITE causes NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When you perform a "LOCK TABLE <TABLENAME> WRITE" the following exception is thrown.
java.lang.NullPointerException
at org.hsqldb.TransactionManager.setWaitedSessionsTPL(TransactionManager.java:903)
at org.hsqldb.TransactionManager.beginActionTPL(TransactionManager.java:873)
at org.hsqldb.TransactionManager.beginAction(TransactionManager.java:773)
at org.hsqldb.Session.beginAction(Session.java:468)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1122)
at org.hsqldb.Session.executeDirectStatement(Session.java:1057)
at org.hsqldb.Session.execute(Session.java:867)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1793)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:629)
I believe this is caused in the org/hsqldb/ParserCommand.java in the compileLock method (Line numbers are from 1.9.0-alpha2, but this bug exists in trunk as well).
Line 1037: cs.writeTableNames = new HsqlName[writeSet.size()];
Line 1039: readSet.toArray(cs.writeTableNames);
Line 1039 should instead read:
Line 1039: writeSet.toArray(cs.writeTableNames);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

870
HyperSQL Database Engine (HSQLDB) / Bugs / #870 Duplicate constraint name generated
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using liquibase to generate the schema for a particular db, the generated .script file for a file-based database contains duplicate constraint names.
The db properties being use are:
db.password=
db.user=sa
db.url=jdbc\:hsqldb\:file\:../../../data/db
db.driver=org.hsqldb.jdbcDriver
The relevant liquibase change sets used to generate the schema are:
<changeSet author="security-base" id="2">
<createTable tableName="authorities">
<column name="user_id" type="bigint">
<constraints nullable="false" />
</column>
<column name="element" type="varchar(64)">
<constraints nullable="false" />
</column>
</createTable>
</changeSet>
<changeSet author="security-base" id="3">
<addPrimaryKey columnNames="user_id"
constraintName="authorities_pkey" tableName="authorities" />
</changeSet>
<changeSet author="security-base" id="7">
<dropPrimaryKey constraintName="authorities_pkey" tableName="authorities" />
</changeSet>
<changeSet author="security-base" id="8">
<addPrimaryKey columnNames="user_id,element"
constraintName="authorities_pkey" tableName="authorities" />
</changeSet>
After executing the above change sets, the generated .script file contains an entry for the AUTHORITIES table that looks like this:
CREATE MEMORY TABLE AUTHORITIES(USER_ID BIGINT NOT NULL,ELEMENT VARCHAR(64) NOT NULL,CONSTRAINT FK_AUTHORITIES_USER_ACCOUNT PRIMARY KEY(USER_ID,ELEMENT),CONSTRAINT FK_AUTHORITIES_USER_ACCOUNT FOREIGN KEY(USER_ID) REFERENCES USER_ACCOUNT(ID))
Note the duplicate name CONSTRAINT FK_AUTHORITIES_USER_ACCOUNT where the primary key constraint should be AUTHORITIES_PKEY. Also note that in the liquibase change sets, the primary key constraint is added, then removed, then added again (with an additional column name added).
This error is observed in versions 1.8.0.9 and 1.8.0.10 but not in 1.8.0.7
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

871
HyperSQL Database Engine (HSQLDB) / Bugs / #871 Regression: poor execution plans for SELECT with LEFT JOIN..
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug causes HSQLDB 1.9 build 2999 to form very poor execution plans
for SELECT queries featuring LEFT JOIN and WHERE statements.
You can recreate it this way:
1) Create a test database with the following tables both under 1.8 and 1.9
--------------------------------------------------------------------------
CREATE CACHED TABLE article (
id INTEGER IDENTITY,
name VARCHAR(50)
);
CREATE CACHED TABLE salesorder_row (
id INTEGER IDENTITY,
salesorder_id INTEGER,
article_id INTEGER,
needed DECIMAL(10,2),
CONSTRAINT fk_salesorder_row_article FOREIGN KEY (article_id) REFERENCES article (id) ON DELETE CASCADE
);
CREATE INDEX idx_salesorder_row_article ON salesorder_row (article_id);
CREATE INDEX idx_salesorder_row_salesorder ON salesorder_row (salesorder_id);
2) Request the execution plan for the following query under 1.8 and 1.9
-----------------------------------------------------------------------
EXPLAIN PLAN FOR
SELECT article.name, salesorder_row.needed
FROM salesorder_row
LEFT JOIN article ON salesorder_row.article_id = article.id
WHERE (salesorder_row.salesorder_id = 1234)
3) The execution plan under 1.9 is problematic
-----------------------------------------------------
You should notice that the "salesorder_row" table is accessed using
the "FULL SCAN" method, without any "EQUAL" condition added.
While testing with a real-life database, this caused every order row
in existence to be joined to an article, consuming massive amounts
of CPU time.
HSQLDB 1.8 does it right, resulting in fast execution,
by planning for "INDEX_PRED" access and including an "EQUAL"
condition early, before the join.
4) Temporary relief
-------------------
Under 1.9, temporary help can be obtained by using a subquery
in the following manner.
SELECT article.code, article.name, salesorder_row.needed, salesorder_row.done
FROM
(SELECT * FROM salesorder_row WHERE salesorder_id = 3942201) salesorder_row
LEFT JOIN article ON salesorder_row.article_id = article.id
5) Unrelated comments
---------------------
Also, OpenOffice puts automatically added WHERE statements
at the end of SQL queries, and isn't smart enough to check for JOIN statements
and automatically build subqueries. I've already observed this causing problems
with OO 3.1 when I attempted to use an external HSQLDB 1.9 database.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

872
HyperSQL Database Engine (HSQLDB) / Bugs / #872 Deadlock in b3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
hsqldb.b3
Circular dependency between SessionManager and Logger causes thread deadlocks (see attachment). However, it seems to be easily avoided in this instance by removing line Log.java:430 in addition to the code commented out below it.
There's a second reference to database.sessionManager on 780, but it seems safe.
thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

873
HyperSQL Database Engine (HSQLDB) / Bugs / #873 hsqldb.b3 locks up
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I ran a multithreaded test and had several threads lock up in this state:
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x0000002ac0c33f20> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:52)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1149)
at org.hsqldb.Session.executeDirectStatement(Session.java:1072)
at org.hsqldb.Session.execute(Session.java:880)
1. latch (org.hsqldb.Session:134) doesn't seem to be actually used in Session at the moment
2. I haven't been able to reproduce this yet, nor do I fully understand the reason, but looks like this is a result of a bug in org.hsqldb.lib.CountUpDownLatch: line 43 probably meant to be this.count = 0/1 (?), instead it worked because count was set to a default 0. Can't tell why it failed in my environment yet.
I'm running on 1.6.0_03-b05/RHEL 2.6.9
thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

874
HyperSQL Database Engine (HSQLDB) / Bugs / #874 1.9 Beta 3 Bugs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While using v 1.9 beta3 . . . noted a few items for your consideration. 
1, I too, had problems with Shutdown Compact problem. 
2. When using some SQL functions ( in a select clause ) like, Substr, Substing, Concat ( seems to be string functions ) . . . returns with the error . . . 
General error java.lang.ArrayIndexOutOfBoundsException: 3 / Error Code -40 / State:S1000 
Note: the function Substring(fieldname FROM 1 FOR 3 ) DOES work, but, Substr(fieldname, 1, 3) does not. 
3. While attempting to use OpenOffice Base, while also using HSQL as the server ( not the embedded server ), any "Select" clause with an alias name . . . for example . . . 
Select fieldname AS NewName 
will NOT return a column name. Not sure if this is an issue with OpenOffice, or, the HSQL server. 
4. When using OpenOffice in a select clause . . . with TO_CHAR . . . cannot get it to return a day of the month AS 2 CHARACTERS ( for example, 05 ) with the documented format of: 
TO_CHAR(datefield,'DD-MM-YYYY') 
In the above, in OpenOffice, it would return a 1 character day . . . but . . . 'dd-MM-YYYY' would return a two character date . . . BUT . . . it is NOT in the GUIDE.PDF documentation. 
5. In documenation . . . ch07.html, or, guide.pdf . . . System Functions has no reference to:
CASE v1 WHEN...
CASE WHEN...
CASEWHEN(exp,v1,v2)
CAST(term AS type)
COALESCE(expr1,expr2,expr3,...)
Sliderule
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

875
HyperSQL Database Engine (HSQLDB) / Bugs / #875 java.sql.SQLException: not allowed in OUTER JOIN condition
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Creating a view I get an unexpected java.sql.SQLException:
No problem with this statement (well, the equivalent statement as of the different DDL syntax and data types) in other data bases (Oracle, Ingres). Complete data model of the underlying tables see below:
CREATE TABLE bremsen_dl_fzg
( bremsen_dl_id integer not null
, lfd_nr integer not null
, bremse_dl_fzgtyp char(1) 
, bremse_dl_art char(1) 
, bremse_dl_verf char(1) 
, bremse_dl_bauart varchar(4) 
, bremse_dl_typ char(1) 
, ort_bedienung varchar(4) 
, loesigkeit char(1) 
, beschreibung varchar(30) 
, bremse_dl_gew_id integer 
, uhrzeit_ende timestamp not null
);
ALTER TABLE bremsen_dl_fzg add constraint pk_bremsen_dl_fzg primary key
( bremsen_dl_id , lfd_nr );
ALTER TABLE bremsen_dl_fzg add constraint chk_bremsen_dl_fzg check
(
( bremse_dl_fzgtyp is null or bremse_dl_fzgtyp in ( 'W', 'T', 't') )
and
( bremse_dl_art is null or bremse_dl_art in ( 'B', 'F') )
and
( bremse_dl_verf is null or bremse_dl_verf in ( 'D', 'H', 'M', 'W') )
and
( bremse_dl_bauart is null or bremse_dl_bauart in ( 'ALaH', 'ALaT', 'H2Lw', 'H3Lw') )
and
( bremse_dl_typ is null or bremse_dl_typ in ( 'D', 'B', 'S', 'H', 'K', 'F') )
and
( ort_bedienung is null or ort_bedienung in ( 'BO', 'ST', 'BOST') )
and
( loesigkeit is null or loesigkeit in ( 'e', 'm', 'M') )
);
CREATE TABLE bremsen_dl_gewichte
( bremse_dl_gew_id integer not null
, lfd_nr integer not null
, bremse_stellung varchar(2) 
, gewicht_brutto float 
, gewicht_bremse float 
, uhrzeit_ende timestamp not null
);
ALTER TABLE bremsen_dl_gewichte add constraint pk_bremsen_dl_gewichte primary key
( bremse_dl_gew_id , lfd_nr );
ALTER TABLE bremsen_dl_gewichte add constraint chk_bremsen_dl_gewichte check
(
( bremse_stellung is null or bremse_stellung in ( 'G', 'GE', 'P', 'PE', 'R') )
);
CREATE VIEW lok_bremse_lfdnr1_view
( bremsen_dl_id
, bremse_dl_gew_id
, bremse_dl_art
, bremse_dl_verf
, bremse_dl_bauart
, bremse_dl_typ
, ort_bedienung
, loesigkeit
, beschreibung
, gewicht_bremse_g
, gewicht_bremse_p
, gewicht_bremse_r
)
as 
select 
br.bremsen_dl_id
, br.bremse_dl_gew_id
, br.bremse_dl_art
, br.bremse_dl_verf
, br.bremse_dl_bauart
, br.bremse_dl_typ
, br.ort_bedienung
, br.loesigkeit
, br.beschreibung
, gew_g.gewicht_bremse
, gew_p.gewicht_bremse
, gew_r.gewicht_bremse
from bremsen_dl_fzg br
left join bremsen_dl_gewichte gew_g on
br.bremse_dl_gew_id = gew_g.bremse_dl_gew_id 
and gew_g.bremse_stellung = 'G'
and gew_g.gewicht_bremse IS NOT NULL
left join bremsen_dl_gewichte gew_p on
br.bremse_dl_gew_id = gew_p.bremse_dl_gew_id 
and gew_p.bremse_stellung = 'P'
and gew_p.gewicht_bremse IS NOT NULL
left join bremsen_dl_gewichte gew_r on
br.bremse_dl_gew_id = gew_r.bremse_dl_gew_id 
and gew_r.bremse_stellung = 'R'
and gew_r.gewicht_bremse IS NOT NULL
where br.lfd_nr = 1 
AND br.bremse_dl_bauart IN 
( 'ALaH','H2Lw');
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

876
HyperSQL Database Engine (HSQLDB) / Bugs / #876 build.xml don't allow calling from other ant task
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a "parent" build.xml that build a few other project, including hsqldb.
The structure is:
myproject/ 
myproject/build.xml
myproject/hsqldb
myproject/hsqldb/build/build.xml
myproject/hsqldb/src/...
....
Starting from 1.9.0beta, this ant command no longer works:
<ant antfile="build/build.xml" dir="${hsqldb}" />
(this work in 1.8.0.10)
I have created a patch, please check the attachment.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

877
HyperSQL Database Engine (HSQLDB) / Bugs / #877 SELECT causes NullPointerException at ExpressionLogical.java
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running this query with HSQL 1.9 b3, the following NullPointerException occurs. This is working with HSQL 1.8
SELECT *
FROM emp 
WHERE deptid = 1 
AND SIGN(flag) IN (-1,1)
ORDER BY empid; 
Exception occurred. 
java.lang.NullPointerException 
at org.hsqldb.ExpressionLogical.resolveTypesForLogicalOp(ExpressionLogical.java:609) 
at org.hsqldb.ExpressionLogical.resolveTypes(ExpressionLogical.java:496) 
at org.hsqldb.QuerySpecification.resolveExpressionTypes(QuerySpecification.java:595) 
at org.hsqldb.QuerySpecification.resolveTypesPartOne(QuerySpecification.java:679) 
at org.hsqldb.QuerySpecification.resolveTypes(QuerySpecification.java:661) 
at org.hsqldb.QueryExpression.resolve(QueryExpression.java:170) 
at org.hsqldb.ParserDQL.compileCursorSpecification(ParserDQL.java:4464) 
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:128) 
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:86) 
at org.hsqldb.Session.executeDirectStatement(Session.java:1071) 
at org.hsqldb.Session.execute(Session.java:898) 
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1805) 
at org.hsqldb.jdbc.JDBCStatement.executeQuery(JDBCStatement.java:179) 
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

878
HyperSQL Database Engine (HSQLDB) / Bugs / #878 incompatible data type in conversion when binding a boolean
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When binding a boolean object to a numeric parameter in a PreparedStatement with the stm.setObject command, it fails with the following exception :
java.sql.SQLException: incompatible data type in conversion
at org.hsqldb.jdbc.Util.throwError(Util.java:81)
at org.hsqldb.jdbc.JDBCPreparedStatement.setParameter(JDBCPreparedStatement.java:3985)
at org.hsqldb.jdbc.JDBCPreparedStatement.setObject(JDBCPreparedStatement.java:1021)
CREATE TABLE test (
col NUMERIC
);
boolean b = false;
PreparedStatement stm = conn.prepareStatement("INSERT INTO test (col) VALUES (?)");
stm.setObject(1, b);
This is a regression, works perfectly with HSQL 1.8
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

879
HyperSQL Database Engine (HSQLDB) / Bugs / #879 INSERT not working correctly with DECIMAL columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider the following sql tool session:
sql> create table sum_test (some_value decimal);
sql> commit;
sql> insert into sum_test values (1.1);
1 row updated.
sql> commit;
sql> insert into sum_test values (1.1);
1 row updated.
sql> commit;
sql> insert into sum_test values (1.1);
1 row updated.
sql> commit;
sql> select sum(some_value) from sum_test;
3
sql>
The result should be 3.3 not 3
When retrieving the value from within a Java program using getDouble() as printl() also prints 3.0
The above script was run against a newly created empty 1.9b3 database.
The generated .log file of the database contains the following content:
CREATE USER SA PASSWORD '' ADMIN
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
/*C1*/SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,1073741824,0)
COMMIT
/*C2*/SET SCHEMA PUBLIC
SET SCHEMA PUBLIC
create table sum_test (some_value decimal)
INSERT INTO SUM_TEST VALUES(1)
COMMIT
INSERT INTO SUM_TEST VALUES(1)
COMMIT
INSERT INTO SUM_TEST VALUES(1)
COMMIT
As you can see no fractions in the INSERT statements. 
Running a SELECT against the table displays the following:
sql> select * from sum_test;
1
1
1
Fetched 3 rows.
sql>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

880
HyperSQL Database Engine (HSQLDB) / Bugs / #880 SELECT .. INTO foo does not work in trunk - r3012
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SELECT * INTO newtab FROM oldtab 
gives ErrorCode.X_42581 on INTO token.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

881
HyperSQL Database Engine (HSQLDB) / Bugs / #881 1.9beta3 identity generator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to access a 1.8 database with the new 1.9 beta3.
I got the following exception. The bean that is mapped with Hibernate 
uses "native" as id generator.
org.hibernate.HibernateException: The database returned no natively 
generated identity value
at 
org.hibernate.id.IdentifierGeneratorFactory.getGeneratedIdentity(IdentifierGeneratorFactory.java:33)
at 
org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:1970)
at 
org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2405)
at 
org.hibernate.action.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:37)
at org.hibernate.engine.ActionQueue.execute(ActionQueue.java:248)
at 
org.hibernate.event.def.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:269)
at 
org.hibernate.event.def.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:167)
at 
org.hibernate.event.def.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:101)
at 
org.hibernate.event.def.DefaultMergeEventListener.entityIsTransient(DefaultMergeEventListener.java:166)
at 
org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener.entityIsTransient(IdTransferringMergeEventListener.java:58)
at 
org.hibernate.event.def.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:103)
at 
org.hibernate.event.def.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:52)
at org.hibernate.impl.SessionImpl.fireMerge(SessionImpl.java:672)
at org.hibernate.impl.SessionImpl.merge(SessionImpl.java:656)
at org.hibernate.impl.SessionImpl.merge(SessionImpl.java:660)
at 
de.scarus.intellicleaner.dao.hibernate.GenericDAOHibernate.makePersistent(GenericDAOHibernate.java:135)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at 
org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:310)
at 
org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:182)
at 
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:149)
at 
org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:106)
at 
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:171)
at 
org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:204)
at $Proxy20.makePersistent(Unknown Source)
at 
de.scarus.intellicleaner.service.impl.DatabaseService.checkDefaultProject(DatabaseService.java:33)
...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

882
HyperSQL Database Engine (HSQLDB) / Bugs / #882 Must use fully qualified names to use PUBLIC tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that tables that are created in the PUBLIC schema are not accessible unless you fully qualify the name of the table. In previous versions, tables in the PUBLIC schema did not need to be fully qualified to access them. It seems that any object that is in the PUBLIC schema should be accessible if it is not in the current schema.
Example:
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE MEMORY TABLE PUBLIC.TEST_TABLE (ID INTEGER)
Then, opening up a new connection via jdbc:
SELECT * FROM TEST_TABLE
running this query will produce an SQLException with code X_42501 (user lacks privilege or object not found).
but
SELECT * FROM PUBLIC.TEST_TABLE
will return the desired results.
I fixed it by adding the following to the getTable method in the SchemaManager.java (around line 483 in beta-3 code)
if (t == null) {
t = findUserTable(session, name, SqlInvariants.PUBLIC_SCHEMA);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

883
HyperSQL Database Engine (HSQLDB) / Bugs / #883 JDBC Connections opened with the :res: option fail to open
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Changing a jdbc url from jdbc:hsqldb:file:<path to db> to jdbc:hsqldb:res:<db on classpath> the following exception is always thrown (with 1.9.0-beta-3):
Caused by: java.sql.SQLException: invalid schema name: SYSTEM_LOBS
at org.hsqldb.jdbc.Util.sqlException(Util.java:111)
at org.hsqldb.jdbc.JDBCConnection.<init>(JDBCConnection.java:3260)
at org.hsqldb.jdbc.JDBCDriver.getConnection(JDBCDriver.java:287)
at org.hsqldb.jdbc.JDBCDriver.connect(JDBCDriver.java:245)
This makes it impossible to package a database in a jar (which is very useful for unit testing).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

884
HyperSQL Database Engine (HSQLDB) / Bugs / #884 sqltool cannot SELECT varbinary column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sql> create table test_table(id bigint, hexval varbinary(128));
sql> insert into test_table values(1, X'30 31');
1 row updated.
sql> select * from test_table;
01.07.2009 14:46:29 org.hsqldb.cmdline.SqlTool main
SCHWERWIEGEND: SQL Error at 'stdin' line 3:
"select * from test_table"
incompatible data type in conversion: from SQL type VARBINARY to java.lang.String, value: instance of org.hsqldb.types.BinaryData
It should be possible to select rows which contain VARBINARY columns. Handling of String conversion from BinaryData seems to be broken in sqltool.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

885
HyperSQL Database Engine (HSQLDB) / Bugs / #885 readonly fails in 1.9b3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm creating a simple file: database. Creating and using it works fine both in 1.8 and 1.9, but in 1.9 I can't use it when it is readonly. Setting readonly to true in either the properties file or the jdbc url fails and gives me this error message (from SqlTool):
Failed to get a connection to 'jdbc:hsqldb:file:Database/foo;readonly=true' as user "SA".
Cause: invalid schema name: SYSTEM_LOBS
This seems to work fine in 1.8. My database has no CLOB or BLOB columns, in case it is relevant. Shutting down with 'shutdown compact' does not help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

886
HyperSQL Database Engine (HSQLDB) / Bugs / #886 setting UNIQUE constraint on a column fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to create a table with a column having UNIQUE constraint. This works in 1.8.0, but fails with 1.9.0 beta3.
Here is the SQL statement:
CREATE CACHED TABLE table_name (
...
value VARCHAR NOT NULL,
UNIQUE (value),
...
};
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

887
HyperSQL Database Engine (HSQLDB) / Bugs / #887 DROP TABLE IF EXISTS does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to execute a DROP TABLE sql statement but it fails. Said error at EXISTS keyword.
It works in 1.8.0 but fails in 1.9.0 beta3.
My SQL:
DROP TABLE IF EXISTS table_name;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

888
HyperSQL Database Engine (HSQLDB) / Bugs / #888 Regression: SET LOGSIZE (and other settings) refused
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Threre is an error in trunk revision r3023, r3006 works well.
Execution of "SET LOGSIZE..." leads to
java.sql.SQLException: user lacks privilege or object not found: LOGSIZE
at org.hsqldb.jdbc.Util.sqlException(Util.java:200)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1805)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:630)
at HsqldbTest.createTable(HsqldbTest.java:154)
at HsqldbTest.<init>(HsqldbTest.java:27)
at HsqldbTest.main(HsqldbTest.java:173)
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: LOGSIZE
at org.hsqldb.Error.error(Error.java:76)
at org.hsqldb.ParserDQL.readColumnName(ParserDQL.java:4401)
at org.hsqldb.ParserDML.readSetClauseList(ParserDML.java:672)
at org.hsqldb.ParserRoutine.compileSetStatement(ParserRoutine.java:174)
at org.hsqldb.ParserCommand.compileSet(ParserCommand.java:770)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:167)
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:83)
at org.hsqldb.Session.executeDirectStatement(Session.java:1071)
at org.hsqldb.Session.execute(Session.java:898)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1797)
... 4 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

889
HyperSQL Database Engine (HSQLDB) / Bugs / #889 SET SESSION CHARACTERISTICS R/W does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I migrated from version 8 to beta 3 version 9 recently and it does not permits table modifications in local transactions.
The tables are cached tables. When I made the first tests and tryed to modify any table I got the error
SQL state [25006]; error code [-3706]; invalid transaction state: read-only SQL-transaction;
Then I tried to execute at the begining SET SESSION CHARACTERISTICS AS READ WRITE and it worked only for
the very first transaction. Then I tried excecuting this statement at the beginning of every transaction
and it seemed to work until the same error came back again. I gave up and decided it might be a bug.
Sincerly, gerardo.leon@cablevision.net.mx
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

890
HyperSQL Database Engine (HSQLDB) / Bugs / #890 sql state for  foreign key violation is incorrest
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On foreign key according to SQL-92 standard have to be 23503. The 1.9beta3 returns 23502 which is an insert or update a value to null , but the column cannot contain null values. The patch which fixes it is attached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

891
HyperSQL Database Engine (HSQLDB) / Bugs / #891 Timezone and Timezones off by a factor of 1000
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In DateTimeType, the following code adjusts the date by one day, not one hour. This is because session.getZoneSeconds is subtracted *before* the multiplicaton by 1000, not after.
case Types.SQL_DATE : {
long seconds = ((TimestampData) a).getSeconds()
- session.getZoneSeconds();
return new java.sql.Date(seconds * 1000);
}
I believe the below code fixes this:
case Types.SQL_DATE : {
return new java.sql.Date(
((TimestampData) a).getSeconds() * 1000 - session.getZoneSeconds()
); 
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

892
HyperSQL Database Engine (HSQLDB) / Bugs / #892 Issues with DATEDIFF in 1.9.0-beta3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am having a problem with the DATEDIFF function in 1.9.0-beta3. Below are reproduction steps. These worked in 1.8.0.10 (although the DATEDIFF function has changed it's parameter order)
CREATE TABLE PUBLIC.T1 (D1 DATETIME, D2 DATETIME)
INSERT INTO PUBLIC.T1 VALUES (CURRENT_TIMESTAMP, TIMESTAMP'2008-02-01 20:30:40')
SELECT D1, D2 FROM PUBLIC.T1
SELECT D1, D2, DATEDIFF(D1, D2,'ss') AS D3 FROM PUBLIC.T1
gives error - user lacks privilege or object not found: DATEDIFF / Error Code: -5501 / State: 42501 
CREATE VIEW PUBLIC.V1 AS SELECT D1, D2 FROM PUBLIC.T1
SELECT D1, D2 FROM PUBLIC.V1
CREATE VIEW PUBLIC.V2 AS SELECT D1, D2, DATEDIFF(D1, D2,'ss') AS D3 FROM PUBLIC.T1
gives error - user lacks privilege or object not found: D1 / Error Code: -5501 / State: 42501
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

893
HyperSQL Database Engine (HSQLDB) / Bugs / #893 java.lang.NullPointerException in ExpressionColumn.getValue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am upgrading our unit tests from using 1.8.0.10 to 1.9.0-beta3. I have quite a complex piece of SQL which is now causing a java.lang.NullPointerException in the ExpressionColumn.getValue method. I have also tried with the latest SVN code (revision 3031) and get the same error. I have managed to extract the part of the SQL which is causing the issue and put the statements required to reproduce below along with the stack trace.
CREATE TABLE T1 (COL1 INT, COL2 INT)
INSERT INTO T1 VALUES (101, 201) 
INSERT INTO T1 VALUES (102, 201)
INSERT INTO T1 VALUES (103, 202)
INSERT INTO T1 VALUES (106, 202)
INSERT INTO T1 VALUES (104, 203)
INSERT INTO T1 VALUES (105, 203)
CREATE TABLE T2 (COLA INT, COL2 INT, COLC INT, COLD DATETIME)
INSERT INTO T2 VALUES (1001, 101, 101, '2007-08-10 10:00:00.0')
INSERT INTO T2 VALUES (1002, 102, 101, '2007-08-10 10:00:00.0')
INSERT INTO T2 VALUES (1003, 103, 101, '2007-08-10 10:00:00.0')
INSERT INTO T2 VALUES (1004, 104, 101, '2007-08-10 10:00:00.0')
INSERT INTO T2 VALUES (1004, 105, 101, '2007-08-10 10:00:00.0')
SELECT
T1A.COL1,
T2A.COLA,
MIN(T1A.COL2) AS COL2
FROM
T1 T1A INNER JOIN
T2 T2A ON T1A.COL2 = T2A.COL2
WHERE
T2A.COLD =
(SELECT
MIN(T2B.COLD)
FROM
T1 T1B INNER JOIN
T2 T2B ON T1B.COL2 = T2B.COL2
WHERE
T1A.COL1 = T1B.COL1 AND
T2A.COLA = T2B.COLA AND
T2A.COLC = T2B.COLC)
GROUP BY
T1A.COL1,
T2A.COLA
java.lang.NullPointerException
at org.hsqldb.ExpressionColumn.getValue(ExpressionColumn.java:428)
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:935)
at org.hsqldb.Expression.testCondition(Expression.java:1261)
at org.hsqldb.RangeVariable$RangeIteratorMain.findNext(RangeVariable.java:957)
at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:784)
at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1100)
at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1044)
at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1032)
at org.hsqldb.SubQuery.materialise(SubQuery.java:189)
at org.hsqldb.SubQuery.materialiseCorrelated(SubQuery.java:169)
at org.hsqldb.Expression.getValue(Expression.java:1249)
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:935)
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:884)
at org.hsqldb.Expression.testCondition(Expression.java:1261)
at org.hsqldb.RangeVariable$RangeIteratorMain.findNext(RangeVariable.java:957)
at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:784)
at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1100)
at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1044)
at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1032)
at org.hsqldb.StatementQuery.getResult(StatementQuery.java:75)
at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:202)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1158)
at org.hsqldb.Session.executeDirectStatement(Session.java:1071)
at org.hsqldb.Session.execute(Session.java:889)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

894
HyperSQL Database Engine (HSQLDB) / Bugs / #894 user lacks privilege & create alias error  in 1.9.0 beta 3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Code works well in 1,8.x release, but two errors I got
user lacks privilege
// use function in SQL
String sp2 = "SELECT Value, \"java.lang.Math.sqrt\"(Value) AS SQRT FROM Test";
// String sp2 = "SELECT Value FROM Test";
resultSet = stm.executeQuery(sp2);
Now I get 
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found
at org.hsqldb.Error.error(Error.java:111)
at org.hsqldb.Error.error(Error.java:81)
CREATE Alias:
// bind PL/SQL to static methods
// Load the alias.
final String SP = "CREATE ALIAS random FOR \"com.example.TestPLSQL.random\";";
stm.execute(SP);
stm.execute("call random()");
resultSet = stm.getResultSet();
Now I got it is not supported
Caused by: org.hsqldb.HsqlException: feature not supported:: ALIAS
at org.hsqldb.Error.error(Error.java:76)
see attachment.
Really bad feeling for the updates
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

895
HyperSQL Database Engine (HSQLDB) / Bugs / #895 Multiple start possible - lock file does not work [patch]
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The lock file does not work - at least in NON NIO case.
The attached patch improves the situation for me.
The issue #2547727 may be related.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

896
HyperSQL Database Engine (HSQLDB) / Bugs / #896 1.9rc4: Deadlock
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
hsqldb went into a deadlock (please see attachment stack_trace.txt for stack trace).
Beginning of the script file is at the end of the above attachment.
Scenario:
multiple, concurrent read threads, setup using
Connection conn = DriverManager.getConnection( dbInitString, "sa", "" ); // dbInitString has no engine settings
conn.setReadOnly( true );
single write thread, executing concurrently with the reads.
db is a mixture of memory and cached tables, cached table has blobs, total db size ~1GB
Thank you!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

897
HyperSQL Database Engine (HSQLDB) / Bugs / #897 JDBC Stored Procedure calls don't work with null parameters
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I use a Spring org.springframework.jdbc.object.StoredProcedure to call a stored procedure that has at least one java.sql.Date parameter, and pass a null value for that parameter (via StoredProcedure's execute(Map) method) then a NullPointerException is thrown by org.hsqldb.types.DateTimeType line 806 (of 1.9.0rc4).
Note that org.hsqldb.FunctionSQLInvoked's this.routine.parameterNullable[i] field (line 113) correctly detects this parameter as being nullable.
Possible fix: org.hsqldb.FunctionSQLInvoked line 118 "if (this.routine.isPSM())" should be "if (this.routine.isPSM() || value == null)" - this would prevent a conversion to a java type even being attempted if the value was null.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

898
HyperSQL Database Engine (HSQLDB) / Bugs / #898 re-sourcing a text table doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using SET TABLE .... SOURCE a second time on a text table, the new contents are not immediately reflected.
I continue to see the old, original data when executing selects until I restart my application. Closing and re-opening the connection does not help. Somewhere in memory, independent of the connection, it appears that my data is being cached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

899
HyperSQL Database Engine (HSQLDB) / Bugs / #899 1.9rc4: rollback handling
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looks like a similar issue to comment #2 to 2828178.
Transaction failed with index constraint violation (which shouldn't be possible, but I'm investigating), and an attempt to rollback caused a series of calamities (please see attached stack trace).
Another unfortunate consequence was the fact that the CountUpDownLatch was left in locked state:
"NoficationClientImpl-ClientDispatcher" daemon prio=10 tid=0x0000002bac1f5c00 nid=0x174e
waiting on condition [0x0000000041e46000..0x0000000041e46cb0]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x0000002aafe20228> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:52)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1120)
at org.hsqldb.Session.executeDirectStatement(Session.java:1050)
at org.hsqldb.Session.execute(Session.java:865)
- locked <0x0000002aafe202e0> (a org.hsqldb.Session)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1797)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(JDBCStatement.java:179)
- locked <0x0000002aafe20630> (a org.hsqldb.jdbc.JDBCStatement)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

900
HyperSQL Database Engine (HSQLDB) / Bugs / #900 Meta data COLUMN_SIZE returns 0 in 1.9.0-rc4
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While testing the new 1.9.0-rc4 release, I ran into a situation where the JDBC meta data doesn't return the correct COLUMN_SIZE for string types. The attached code, has the following output for 1.9.0-rc4:
Column TESTTABLE.SOMESTRING VARCHAR(0)
In contrast, 1.8.0.10 returned the following:
Column TESTTABLE.SOMESTRING VARCHAR(64).
This seems like a regression.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

901
HyperSQL Database Engine (HSQLDB) / Bugs / #901 UPDATE statement fails 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For version: HSQL Database Engine, version: 1.8.0
I am using the follwing native SQL query from withign hibernate:
<sql-query name="obtainAllAvailableTokensForJobNative"><![CDATA[
UPDATE ENGINE_TOKEN
SET OWNER_ID = :jobID
WHERE OWNER_ID IS NULL
AND EXISTS (
SELECT * FROM ENGINE_JDSTKN_MAP tmap INNER JOIN ENGINE_JOB_DESCRIPTOR jd 
ON tmap.JOB_DESCRIPTOR_ID = jd.ID INNER JOIN ENGINE_JOB job 
ON job.DESCRIPTOR_ID = jd.ID 
WHERE tmap.TOKEN_ID = ENGINE_TOKEN.ID
AND job.ID = :jobID 
)
]]></sql-query> 
This fails on error:
java.sql.SQLException: Column already exists: ID in statement [UPDATE ENGINE_TOKEN
SET OWNER_ID = ?
WHERE OWNER_ID IS NULL
AND EXISTS (
SELECT * FROM ENGINE_JDSTKN_MAP tmap INNER JOIN ENGINE_JOB_DESCRIPTOR jd ON tmap.JOB_DESCRIPTOR_ID = jd.ID INNER JOIN ENGINE_JOB job ON job.DESCRIPTOR_ID = jd.ID 
WHERE tmap.TOKEN_ID = ENGINE_TOKEN.ID
AND job.ID = ? 
)]
at org.hsqldb.jdbc.Util.throwError(Unknown Source)
at org.hsqldb.jdbc.jdbcPreparedStatement.<init>(Unknown Source)
It seems like HSQL is choking on the ENGINE_TOKEN.ID part of "WHERE tmap.TOKEN_ID = ENGINE_TOKEN.ID". As HSQL doesn't support UPDATE ... FROM ..., there is no other way to transfer the ID to the inner statement.
The very same SQL query works fine on MySQL 5.1, and Microsoft SQL Server 2005, and is only a problem on HSQL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

902
HyperSQL Database Engine (HSQLDB) / Bugs / #902 fail restart server after shutdown 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1) start the server
cd ../data
c:\Program Files\Java\jdk1.6.0_13\bin\java" -classpath ../lib/hsqldb.jar org.hsqldb.server.Server
[Server@19b49e6]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@19b49e6]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@19b49e6]: Startup sequence initiated from main() method
[Server@19b49e6]: Loaded properties from [C:\Temp\hsqldb-1.9.0-rc4\hsqldb\Data\server.properties]
[Server@19b49e6]: Initiating startup sequence...
[Server@19b49e6]: Server socket opened successfully in 16 ms.
[Server@19b49e6]: Database [index=0, id=0, db=file:Adidb0.db0, alias=] opened sucessfully in 359 ms.
[Server@19b49e6]: Startup sequence completed in 375 ms.
[Server@19b49e6]: 2009-08-07 11:15:34.384 HSQLDB server 1.9.0 is online on port 9001
[Server@19b49e6]: To close normally, connect and execute SHUTDOWN SQL
[Server@19b49e6]: From command line, use [Ctrl]+[C] to abort abruptly
[Server@19b49e6]: Initiating shutdown sequence...
[Server@19b49e6]: Shutdown sequence completed in 109 ms.
[Server@19b49e6]: 2009-08-07 11:15:57.632 SHUTDOWN : System.exit() is called next
2) open DB Manager
"c:\Program Files\Java\jdk1.6.0_13\bin\java" -classpath ..\lib\hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
execute in the menu <Options>/Insert Test Data
execute the command "SHUTDOWN"
3) 1) start the server
cd ../data
c:\Program Files\Java\jdk1.6.0_13\bin\java" -classpath ../lib/hsqldb.jar org.hsqldb.server.Server
[Server@19b49e6]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@19b49e6]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@19b49e6]: Startup sequence initiated from main() method
[Server@19b49e6]: Loaded properties from [C:\Temp\hsqldb-1.9.0-rc4\hsqldb\Data\s
erver.properties]
[Server@19b49e6]: Initiating startup sequence...
[Server@19b49e6]: Server socket opened successfully in 0 ms.
[Server@19b49e6]: [Thread[HSQLDB Server @19b49e6,5,main]]: Database [index=0, db=file:Adidb0.db0, alias=] did not open: org.hsqldb.HsqlException: error in scrip
t file line: 25 unexpected token: NOT required: :
[Server@19b49e6]: [Thread[HSQLDB Server @19b49e6,5,main]]: Shutting down because there are no open databases
[Server@19b49e6]: Initiating shutdown sequence...
[Server@19b49e6]: Shutdown sequence completed in 0 ms.
[Server@19b49e6]: 2009-08-07 11:16:42.363 SHUTDOWN : System.exit() is called next
Regards
Adolf Rieger
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

903
HyperSQL Database Engine (HSQLDB) / Bugs / #903 1.9rc4: Index NPE, locks
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
apologies, enountered an issue when re-running the tests using the trunk/svn (rev 3114).
During delete, this exception was generated...
Caused by: java.lang.NullPointerException
at org.hsqldb.index.IndexAVL.delete(IndexAVL.java:699)
at org.hsqldb.index.IndexAVL.delete(IndexAVL.java:570)
at org.hsqldb.persist.RowStoreAVL.delete(RowStoreAVL.java:120)
at org.hsqldb.TransactionManager.deleteRows(TransactionManager.java:621)
at org.hsqldb.TransactionManager.rowActionMapRemoveTransaction(TransactionManager.java:595)
at org.hsqldb.TransactionManager.commitTransaction(TransactionManager.java:389)
at org.hsqldb.Session.commit(Session.java:517)
at org.hsqldb.jdbc.JDBCConnection.commit(JDBCConnection.java:1012)
...which did leave the lock stuck:
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x0000002a9f605d58> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchro
nizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueued
Synchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSy
nchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1126)
at org.hsqldb.Session.executeDirectStatement(Session.java:1056)
at org.hsqldb.Session.execute(Session.java:873)
- locked <0x0000002a9f605bb8> (a org.hsqldb.Session)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1797)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(JDBCStatement.java:179)
- locked <0x0000002a9f6089c0> (a org.hsqldb.jdbc.JDBCStatement)
thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

904
HyperSQL Database Engine (HSQLDB) / Bugs / #904 bitand function not same as Oracle
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
A table with a bitmap column like :
ID | BITMAP | DATA
----|----------------|----------
1 | 01 | DATA1
2 | 03 | DATA2
3 | 04 | DATA3
4 | 02 | DATA4
I need to count the rows for each bit of the bitmap like :
SELECT sum(bitand(t.BITMAP, 1)) / 1,
sum(bitand(t.BITMAP, 2)) / 2,
sum(bitand(t.BITMAP, 3)) / 3,
sum(bitand(t.BITMAP, 4)) / 4
FROM TBL_DATA t;
Under Oracle, the result is an array of integer : [2, 2, 1, 0]
Under Hsqldb (1.8.0.10), the result is an array of integer : [2, 2, 2, 2]
But if you execute the request for each bit individually, the result is correct !
SELECT sum(bitand(t.BITMAP, 1)) / 1 FROM TBL_DATA t;
Result=2.
SELECT sum(bitand(t.BITMAP, 2)) / 2 FROM TBL_DATA t;
Result=2.
SELECT sum(bitand(t.BITMAP, 3)) / 3 FROM TBL_DATA t;
Result=1.
SELECT sum(bitand(t.BITMAP, 4)) / 4 FROM TBL_DATA t;
Result=0.
What do you think ?
Thanks,
Steve
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

905
HyperSQL Database Engine (HSQLDB) / Bugs / #905 MERGE ... WHEN MATCHED clause column reference
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The MERGE ... WHEN MATCHED THEN UPDATE clause does not recognize new cursor rows during update operations. Instead, the entire target table of the merge is updated with uniform values across all rows. 
This behavior appears to be constrained only to this portion of the clause. The attached script shows that the WHEN NOT MATCHED THEN clause behaves as expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

906
HyperSQL Database Engine (HSQLDB) / Bugs / #906 Cannot add a foreign key with existing data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a table has a text primary key then a foreign key can be created to that table fine.
However if the table already has existing data it will fail. This works fine if the key is of type integer.
Here's a simple example which shows the problem:
create table a
(
a_id varchar(32) primary key
);
create table b
(
b_id varchar(32) primary key,
a varchar(33) not null
);
insert into a values ('TESTA');
insert into b values ('TESTB','TESTA');
alter table b add constraint b_fk_a foreign key (a) references a (a_id);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

907
HyperSQL Database Engine (HSQLDB) / Bugs / #907 1.9rc4  Interval Bug?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Why is it that when executing the below SQL using JdbcTemplate.queryForInt(..) Oracle returns 14421 but HsqlDB returns 1245974400? Clearly, Oracle is returning the days between the two dates and hsqldb is returning the number of seconds...who is right?
select (date '2009-06-26' - date '1970-01-01') day(5) to second(0) from dual;
(note: for the above to work on hsqldb you need to create a table called 'dual')
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

908
HyperSQL Database Engine (HSQLDB) / Bugs / #908 Some comments NOT ignored by some JDK versions...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While building revision 3158 locally, I found a quite odd problem
which I tracked down to comment syntax in "JDBCConnection.java".
If I check out an unmodified copy of revision 3158 from SVN,
and try building it on my Debian / OpenJDK / Ant based system,
it fails to compile with the following error message:
[javac] hsqldb/base/trunk/tmp/switchedsrc/org/hsqldb/jdbc/JDBCConnection.java:2899:
ex is already defined in setClientInfo(java.lang.String,java.lang.String)
[javac]  } catch (SQLException ex) {
The source of the problem appears to be in the comment syntax:
code located between the "//#ifdef JAVA6" and "//#endif JAVA6" lines
contains an additional comment enclosed by /* and */ tags.
For some reason, my JDK apparently refuses to treat this as a comment,
and only compiles the code if I alter the commented-out "ifdef" directives
by inserting a space between the comment tag // and the "ifdef" directive
like this:
// #ifdef JAVA6
.....some code......
// #endif JAVA6
I realize that strictly speaking, this is not an HSQLDB bug,
but since it might confuse others too, I thought I'd mention it.
used to comment out
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

909
HyperSQL Database Engine (HSQLDB) / Bugs / #909 incorrect empty results from select on indexed cached table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i have a table built from various bits of Java code which seems to have got itself into an inconsistent state.
This is using the patched 1.9 build from 27th August on the support page.
Running a select statement matching the PK does not return any rows but doing certain other queries does return a row which the original query should have found.
So for example:
select * from si_sd_data_attribute where attr_id = 'log-record.is-cookie-new'
returns 0 rows but there is a row with that value in attr_id (the PK)
select * from si_sd_data_attribute where attr_id like 'log-r%'
Again this returns 0 rows
select * from si_sd_data_attribute where attr_id like 'log%new'
This however returns 1 row with the expected attr_id value of 'log-record.is-cookie-new'
I have attached a copy of the db chopped down to the the smallest I can get it to be.
It only has the problematic table remaining.
The table is defintely in an inconsistent state.
Running deletes against it will apparently delete rows but then after exiting and restarting the JVM the rows are no longer all deleted but the number of rows is not necessarily the same as before the delete either.
Certain deletes will cause the missing row to reappear.
Dropping columns also seems to make it reappear.
I'm guessing it rebuilds the table somehow and that's what "fixes" things.
I can probably provide the inserts that got the table into that state if that's helpful but will take a bit of work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

910
HyperSQL Database Engine (HSQLDB) / Bugs / #910 1.9.0-rc4: PreparedStatement failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SQL-PreparedStatement of type "INSERT INTO t1 SELECT ..., ? FROM t2" fails with 1.9.0-rc4. It works perfectly with 1.8.0-10.
Same problem I have with "INSERT INTO t1 SELECT ..., CONVERT( ?, CHAR ) FROM t2".
I use Sun's JRE v1.6.0_16.
Attached file show a simple Java program for testing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

911
HyperSQL Database Engine (HSQLDB) / Bugs / #911 Table never unlocked after select with autoCommit off
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Seems to me this is another aspect to bug 2805121 but I couldn't attach to that so here's a new bug. This is against the latest support snapshot (3rd Sep)
Simply doing a select statement in a session with autoCommit off will mean the referenced table(s) NEVER get unlocked. Obviously this is bad.
The statement in bug 2805121 that the latch count does not increase for select statmeents seems to be false. I originally hit this with 3 sessions doing selects from a table and another trying to do an insert (each in separate threads). The count in the CountUpDownLatch was 3 and never changed causing the program to lock up.
This can be easily reproduced with the code attached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

912
HyperSQL Database Engine (HSQLDB) / Bugs / #912 1.9.0-rc4 HEAD: Problem with foreign key constraint + (a,b) 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have been trying out hsqldb-1.9.0-rc4. I've found a problem with both the released jar and the latest trunk for 1.9.0.
Consider the following sequence of SQL statements:
drop table if exists test_trips;
drop table if exists test_routes;
create table test_routes (agencyId varchar(50) not null, id varchar(255) not null, primary key (agencyId, id));
create table test_trips (agencyId varchar(50) not null, id varchar(255) not null, route_agencyId varchar(50), route_id varchar(255), primary key (agencyId, id));
alter table test_trips add constraint test_trips_routes foreign key (route_agencyId, route_id) references test_routes;
insert into test_routes (agencyId, id) values ('a','r1'),('a','r2');
insert into test_trips (agencyId, id,route_agencyId,route_id) values ('a','1','a','r1'),('a','2','a','r2');
select * from test_trips where (route_agencyId, route_id) in (('a', 'r1'));
I expect only one result to be returned in the select statement, but I'm getting two. Now, if I rerun the same code but remove the foreign key constraint, I get the expected result. I'm not sure if this is a bug in my understanding of SQL, but this code executes correctly on MySQL 5.0, so I think the problem is with HSQLDB and the interaction between foreign key constraints and multi-column IN statements.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

913
HyperSQL Database Engine (HSQLDB) / Bugs / #913 count(distinct *) always returns 1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See the following example.
Run with latest 1.9 snapshot using a file based database.
create table test ( test_id integer);
insert into test values (1);
insert into test values (2);
select count(*) from test;
- Correctly returns 2
select count(distinct test_id) from test;
-- Also correctly returns 2
select count(distinct *) from test;
- Returns 1. This is wrong. Should also be 2, surely.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

914
HyperSQL Database Engine (HSQLDB) / Bugs / #914 1.9: Different date/datetime after migration from 1.8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem: Different date/datetime in cached tables after migration from 1.8.0.7 to RC
I migrated a HSQLDb database from 1.8.0.7 to 1.9 (RC from 10. Sept 2009) by shuting down the database under 1.8 and starting it up on 1.9. I did nothing special. On the first look everything went well - but when I did take a closer look on tables with date and datetime columns, I have recognized that the date content was wrong (e.g. 2009-02-01 is after the migration 41056-03-31).
Further it seems to be that this is only a migration problem for cached tables. With memory tables this problem does not occur (may be due to the fact that the data is "stored" as script).
In the following I provide you with some steps to reproduce the problem:
a.) Create table in HSQLDb Versioan 1.8.0.7
create cached table testupgrade (datefield date, datetimefield datetime, varcharfield varchar(10));
b.) Insert data into table 
insert into testupgrade (datefield,datetimefield,varcharfield) values ('2009-02-01', now(),'2009-03-01');
c.) Retrieve data by using following statement: "select * from testupgrade":
DATEFIELD DATETIMEFIELD VARCHARFIELD
2009-02-01 2009-09-12 16:08:50.439000000 2009-03-01
(Note: Output is done via resultset function getString())
d.) Migrate: Shutdown database with HSQLDB 1.8x and start it with HSQLDB 1.9x
e.) retrieve data as in step c.) - I get the following result:
DATEFIELD DATETIMEFIELD VARCHARFIELD
41056-03-31 41668-07-11 11:13:20.439000 2009-03-01 
As you can see the dates where changed/shifted.
f.) Check if this is a migration problem:
Now I did the creation of the table in the insert of the table compoletly with version 1.9x
create cached table testupgrade_new (datefield date, datetimefield datetime, varcharfield varchar(10));
insert into testupgrade_new (datefield,datetimefield,varcharfield) values ('2009-02-01', now(),'2009-03-01');
The output is as follows (select * from testupgrade_new):
DATEFIELD DATETIMEFIELD VARCHARFIELD
2009-02-01 2009-09-12 16:28:36.636000 2009-03-01
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

915
HyperSQL Database Engine (HSQLDB) / Bugs / #915 res: databases with text tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This item includes a jar containing a small database. This is a demonstration of packaging a database with text tables into a jar. Note the SET TABLE SOURCE commands and how the text files are referenced there.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

916
HyperSQL Database Engine (HSQLDB) / Bugs / #916 Sequence not incrementing
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There seems to be a problem getting the next sequence value when multiple "call next" statements are executed in the same HSQLDB session. Verified using Hibernate 3.3.2.GA and SQuirreL SQL Client.
It seems as if the problem occurs only in the same HSQLDB session (found when debugging the problem in context of Hibernate 3.3.2.GA). When a new HSQLDB session is used then a new sequence value is returned, but succeeding calls to "call next" will then return the then-new value again without incrementation (until a new HSQLDB session is used).
Steps to reproduce (using in-memory HSQLDB from SQuirreL SQL Client):
create sequence myseq as bigint
call next value for myseq
-- Returns 0
call next value for myseq
-- Returns 0 (should be a value greater than 0?)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

917
HyperSQL Database Engine (HSQLDB) / Bugs / #917 Scale not respected for numeric (BigDecimal)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems as if the scale of numerics are not respected when inserting and retrieving BigDecimal objects using the "snaphot jar of HSQLDB 1.9 Release Candidate compiled on or after 16 Sept 2009 ".
ResultSet.getObject(String) returns the right value, but both ResultSet.getBigDecimal(String) and ResultSet.getBigDecimal(String, int) rounds the value prior to returning it. I have little experience with the inner workings of HSQLDB, but it may originate from JDBCResultSet.getColumnInType(int, Type) as it seems as if the source type lookup in "resultMetaData.columnTypes" is offset by one.
I have attached a small java program that creates a table with a "numeric(32,16)" column, inserts a BigDecimal and retrieves it. Retrieved values are output to the console. When I run it with the "snaphot jar of HSQLDB 1.9 Release Candidate compiled on or after 16 Sept 2009 " I get the following output:
Connecting
Creating table: create table testtable ( testcolumn numeric(32,16) )
Inserting: insert into testtable (testcolumn) values (?)
Binding: 200.88888
Selecting: select * from testtable
Got object: 200.8888800000000000
Got bigDecimal: 201
Got bigDecimalScaled: 201.0000000000000000
Got double: 200.88888
Got float: 200.88889
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

918
HyperSQL Database Engine (HSQLDB) / Bugs / #918 1.9: Different date after migration from 1.8 (reopen)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1.9: Different date/datetime after migration from 1.8 (refer to ID: 2857537)
The problem described in bug ID 2857537 is still occurring:
When I migrate from a database on version 1.8.0.7 to 1.9 the date/datetime values are changed.
I took the jar from the support page as requested by you in your last
comment of the bug 2857537 (source:
http://hsqldb.org/support/hsqldb.jar\)
Unfortunately I got the same results as explained in in the last bug request 
(means the date/datetime values are changed).
I get it with the JAR file from the 10th September as well as with the actual jar file (I took them both from the support page!!)
Then I tried the jar from the RC Package:
http://sourceforge.net/projects/hsqldb/files/alpha_beta/hsqldb_1_9_0_rc4/hsqldb-1.9.0-rc4.zip/download
Using this package everything works as expected - the dates are migrated
properly from 1.8x to 1.9x RC.
For me it seems to be that there is a regression which was already in the JAR file of 10th september.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

919
HyperSQL Database Engine (HSQLDB) / Bugs / #919 1.9: Different date after migration from 1.8 (reopen)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1.9: Different date/datetime after migration from 1.8 (refer to ID: 2857537)
The problem described in bug ID 2857537 is still occurring:
When I migrate from a database on version 1.8.0.7 to 1.9 the date/datetime values are changed.
I took the jar from the support page as requested by you in your last
comment of the bug 2857537 (source:
http://hsqldb.org/support/hsqldb.jar\)
Unfortunately I got the same results as explained in in the last bug request 
(means the date/datetime values are changed).
I get it with the JAR file from the 10th September as well as with the actual jar file (I took them both from the support page!!)
Then I tried the jar from the RC Package:
http://sourceforge.net/projects/hsqldb/files/alpha_beta/hsqldb_1_9_0_rc4/hsqldb-1.9.0-rc4.zip/download
Using this package everything works as expected - the dates are migrated
properly from 1.8x to 1.9x RC.
For me it seems to be that there is a regression which was already in the JAR file of 10th september.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

920
HyperSQL Database Engine (HSQLDB) / Bugs / #920 Ordering a "SELECT DISTINCT" by a "CASE WHEN"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB 1.8.1.1 fails to execute a "SELECT DISTINCT" if it is ordered by a "CASE WHEN" even though the "CASE WHEN" is also part of the SELECT list.
Example reproduced using SQuirreL SQL Client:
-- Create a test table
create table testtable (id varchar(32), myvalue varchar(32));
-- Works
select distinct id, case when not myvalue is null then myvalue else id end
from testtable;
-- Fails with "Error: ORDER BY item should be in the SELECT DISTINCT list"
select distinct id, case when not myvalue is null then myvalue else id end
from testtable
order by case when not myvalue is null then myvalue else id end;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

921
HyperSQL Database Engine (HSQLDB) / Bugs / #921 Hard-to-pinpoint regression: unsupported internal operation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While making preparations to transfer a database which is in production use
under HSQLDB 1.8 to HSQLDB 1.9, I encountered several queries
which 1.8 executes successfully, but which cause 1.9 to freeze the thread
servicing the JDBC connection, so that from a client's perspective,
the query seems to take forever, while the server reports:
Exception in thread "HSQLDB Connection @9980d5" java.lang.RuntimeException: unsupported internal operation: Result
at org.hsqldb.error.Error.runtimeError(Error.java:66)
at org.hsqldb.result.Result.write(Result.java:1304)
at org.hsqldb.result.Result.write(Result.java:1324)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:359)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1526)
at java.lang.Thread.run(Unknown Source)
First, I tried iteratively simplifying the queries involved to their
most compact form which still reliably crashes. The query I got was:
SELECT article.id, MIN(saldo.address) first_address 
FROM article
LEFT JOIN saldo ON article.id = saldo.article_id
WHERE article.id = 0
GROUP BY article.id
Next, I tried finding the simplest change which averts the crash.
What I found to work was:
SELECT article.id, MIN(COALESCE(saldo.address,'')) first_address 
FROM article
LEFT JOIN saldo ON article.id = saldo.article_id
WHERE article.id = 0
GROUP BY article.id
However, when I tried generating a minimal data set to attach to this report,
I encountered difficulties. No data set of a convenient number of records,
no matter how deviously I crafted it, was able to cause this crash.
However, real-world data from a customer's database, most probably error-free
but containing 240'000 articles and nearly 100'000 warehouse saldos,
do realiably cause this crash, and I'm still working to pinpoint how.
Thus, despite my current inability to accompany my bug report with any solution
beyond a crude work-around, I decided to submit it anyway, in hope
that someone might figure it out.
------------------------------ DATABASE STRUCTURE -----------------------------
The structure of the tables involved in my scenario is like this:
-- Table for product articles, most fields are likely not involved
-- in the crash.
CREATE CACHED TABLE article (
id INTEGER IDENTITY PRIMARY KEY,
code VARCHAR(20),
name VARCHAR(50),
unit VARCHAR(10),
address VARCHAR(15),
sectorgroup_id INTEGER,
unlock DATETIME,
weight DECIMAL(10,2),
rvsaldo DECIMAL(10,2),
product_group VARCHAR(10),
suppliers_code VARCHAR(40),
CONSTRAINT uq_article_code UNIQUE (code)
);
CREATE INDEX idx_article_code ON article (code);
CREATE INDEX idx_article_address ON article (address);
CREATE INDEX idx_article_sectorgroup ON article (sectorgroup_id);
-- Table for warehouse saldos which the crash-producing query tries to join
-- to product articles (involving a limited number of articles and saldos, with
-- lots of Java heap space available, so I don't think it's an out-of-memory condition).
-- The address column MAY contain null values, and articles may exist for which no saldo exists.
-- Saldos for which no article exists, should not exist, and get deleted by the foreign key constraint.
CREATE CACHED TABLE saldo (
id INTEGER IDENTITY PRIMARY KEY,
article_id INTEGER,
pickingbatch_id INTEGER,
batch VARCHAR(10),
address VARCHAR(15),
quantity DECIMAL(10,2),
price DECIMAL(10,2),
purchase_price DECIMAL(10,2),
modified DATETIME,
CONSTRAINT fk_saldo_article FOREIGN KEY (article_id) REFERENCES article (id) ON DELETE CASCADE,
CONSTRAINT fk_saldo_pickingbatch FOREIGN KEY (pickingbatch_id) REFERENCES pickingbatch (id) ON DELETE SET NULL
);
CREATE INDEX idx_saldo_article ON saldo (article_id);
CREATE INDEX idx_saldo_pickingbatch ON saldo (pickingbatch_id);
CREATE INDEX idx_saldo_batch ON saldo (batch);
CREATE INDEX idx_saldo_address ON saldo (address);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

922
HyperSQL Database Engine (HSQLDB) / Bugs / #922 Defrag failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hit this problem during a long-running load test (multiple inserts/deletes over a long time).
2009-09-27 20:34:44,538 FATAL [ClientDispatcher] [%R/%S/%U] HSQLDB23C4331B11.org.hsqldb.persist.Logger: defrag failure
org.hsqldb.HsqlException: java.lang.StackOverflowError
at org.hsqldb.error.Error.error(Error.java:89)
at org.hsqldb.persist.DataFileDefrag.process(DataFileDefrag.java:183)
at org.hsqldb.persist.DataFileCache.defrag(DataFileCache.java:508)
at org.hsqldb.persist.Log.defrag(Log.java:527)
at org.hsqldb.persist.Log.checkpoint(Log.java:395)
at org.hsqldb.persist.Logger.checkpoint(Logger.java:677)
at org.hsqldb.StatementCommand.getResult(StatementCommand.java:246)
at org.hsqldb.StatementCommand.execute(StatementCommand.java:170)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1159)
at org.hsqldb.Session.commit(Session.java:535)
at org.hsqldb.jdbc.JDBCConnection.commit(JDBCConnection.java:1012)
<snip>
Caused by: java.lang.StackOverflowError
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:522)
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:554)
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:555)
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:554)
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:555)
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:554)
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:555)
at org.hsqldb.lib.DoubleIntIndex.quickSort(DoubleIntIndex.java:554)
After the error the app seemed to have recovered, however. Haven't been able to reproduce this yet (I've been running the , but I thought it may be useful.
Here're the settings for the db (from the script):
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL NAMES FALSE
SET DATABASE TRANSACTION CONTROL MVLOCKS
SET FILES WRITE DELAY 1
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 1000000
SET FILES CACHE ROWS 1000000
SET FILES SCALE 8
SET FILES DEFRAG 20
SET FILES NIO TRUE
SET FILES LOG SIZE 20
SET DATABASE TEXT TABLE DEFAULTS ''
CREATE USER SA PASSWORD ''
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

923
HyperSQL Database Engine (HSQLDB) / Bugs / #923 select count returns wrong number of rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found this bug in the latest version, but also appears to be in 1.9
The below code should be self-explanatory, but in a nutshell, it doesn't appear to deal with the same column appearing twice in the predicate list for a select count
================================
package memento.db;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;
import memento.util.Util;
final public class Test
{
final static public void main(final String[] args)
{
{
try
{
final String url = "jdbc:hsqldb:mem:temp2";
final Properties properties = new Properties();
properties.put("username", "");
properties.put("password", "");
properties.put("shutdown", "true");
final Connection connection = DbJdbc.connection("org.hsqldb.jdbcDriver", url, properties);
final Statement statement = connection.createStatement();
statement.executeUpdate("create table table1(column1 int not null, column2 varchar(255) not null,primary key(column1))");
statement.executeUpdate("insert into table1(column1,column2) values(100,'string1')");
statement.executeUpdate("insert into table1(column1,column2) values(200,'string2')");
statement.executeUpdate("insert into table1(column1,column2) values(300,'string3')");
// Check the number of rows in the table
final ResultSet resultSet1 = statement.executeQuery("select count(1) rows from table1");
while (resultSet1.next())
{
final int count1 = resultSet1.getInt(1);
System.out.println("count1:" + count1);
}
// Check the number of rows using 3 predicates, where the same column
// appears twice
final ResultSet resultSet2 = statement.executeQuery("select count(1) rows from table1 where column1<300 and column1>=200 and column1<1");
while (resultSet2.next())
{
final int count2 = resultSet2.getInt(1);
System.out.println("count2:" + count2);
}
// Check the number of rows using 3 predicates, where the same column
// appears twice
// This query is the same as #2 but the order of the predicates is
// different, but should return the same result
final ResultSet resultSet3 = statement.executeQuery("select count(1) rows from table1 where column1<1 and column1<300 and column1>=200");
while (resultSet3.next())
{
final int count3 = resultSet3.getInt(1);
System.out.println("count3:" + count3 + " - *ERROR* should be 0");
}
int count4 = 0;
final ResultSet resultSet4 = statement.executeQuery("select * from table1 where column1<1 and column1<300 and column1>=200");
while (resultSet4.next())
{
count4++;
}
System.out.println("count4:" + count4 + " - *but* seems ok if you select * rather than select count!!!");
}
catch (final Exception e)
{
Util.exit(e);
}
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

924
HyperSQL Database Engine (HSQLDB) / Bugs / #924 invalid ORDER BY expression error when sorting on aggregate
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When sorting on an aggregate the following exception is thrown:
Error: invalid ORDER BY expression
SQLState: 42576
ErrorCode: -5576
This was working fine in hsql 1.8
Sample sql:
create table testa (a int)
create table testb (b int)
select a from testa left outer join testb on a = b group by a order by count(b)
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

925
HyperSQL Database Engine (HSQLDB) / Bugs / #925 SQLException when using upper(?) in query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When we use the upper function on query parameters, prepareStatement fails with this exception:
Exception in thread "main" java.sql.SQLException: data type cast needed for parameter or null literal
at org.hsqldb.jdbc.Util.sqlException(Util.java:208)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3654)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(JDBCConnection.java:635)
at HsqlUpper.main(HsqlUpper.java:14)
This works fine in Hsql 1.8.
See attached sample program.
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

926
HyperSQL Database Engine (HSQLDB) / Bugs / #926 limit with offset works different when selecting PK or not
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have 2 similar tables, when selecting with limit and offset parameters, the results are different if the table has a PK or not.
When the table has a PK the behaviour is not compatible hsql 1.8.
Example sql:
-- table with PK
create table testlimit1 (l int, primary key (l))
insert into testlimit1 (l) values (1)
insert into testlimit1 (l) values (2)
insert into testlimit1 (l) values (3)
-- table without PK
create table testlimit2 (l int)
insert into testlimit2 (l) values (1)
insert into testlimit2 (l) values (2)
insert into testlimit2 (l) values (3)
-- returns row 1 to 2 (only value 2)
select limit 1 2 l from testlimit1 order by l asc
-- returns 2 rows starting at row 1 (values 2 and 3)
select limit 1 2 l from testlimit2 order by l asc
In HSQL 1.8 both queries return 2 rows.
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

927
HyperSQL Database Engine (HSQLDB) / Bugs / #927 invalid HAVING expression error when using query parameters
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using query parameters in the having clause the following error is thrown:
Exception in thread "main" java.sql.SQLException: invalid HAVING expression
at org.hsqldb.jdbc.Util.sqlException(Util.java:208)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3654)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(JDBCConnection.java:635)
at HsqlHaving.main(HsqlHaving.java:18)
The same code works fine using Hsqldb 1.8.
See attached sample program.
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

928
HyperSQL Database Engine (HSQLDB) / Bugs / #928 Suggestion: add more classes to the "hsqljdbc" build target?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My use case: a HSQL JDBC client is installed on a Windows CE handheld computer, and it connects to a HSQL server on a Debian Linux box. The handheld computer has rather limited RAM and Flash memory, so minimizing the disk footprint of .jar files is important.
My concern: the build target "hsqldbmain" generates .jar files of about 1.5 MB, which also contain server classes. However, when I tried using "hsqljdbc" instead (it produced packages of about 380 KB), they didn't contain enough classes for JDBC client functionality to actually work - right as I tried loading the driver, I got a crash since the VM couldn't load necessary classes.
It thus appears that the "hsqljdbc" build target is too compact to support a functioning JDBC client. Perhaps it's compete enough when considered from some other aspect, but I found that I needed to add about 20 classes to it, increasing the .jar size to slightly above 500 KB.
I'm attaching a diff of "build.xml" to this message.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

929
HyperSQL Database Engine (HSQLDB) / Bugs / #929 validateSpecifiedUserAndPassword has to be improved
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
tried JDBCConnectionPo#olDataSourcevalidateSpecifiedUserAndPassword with 1.9 version. Implementation could be completely fine if it need to compare two string objects, but since it should compare username and password, implementation needs to be improved.
From pure technical point of view null reference to string is not equal to zero length string, but from semantic point of view its one and the same thing. So if for example user input argument is null reference and configuredUser local variable is zero lenght string, function should not throw exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

930
HyperSQL Database Engine (HSQLDB) / Bugs / #930 SYSTEM_COLUMNS difference betw. 1.8 / 1.9: bug or by design?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm currently trying to discover why OpenOffice form filters break
when run against HSQL 1.9.
Among the possible reasons for breakage are different results which 1.9 gives
when OpenOffice queries "INFORMATION_SCHEMA.SYSTEM_COLUMNS"
to determine table structure.
I have the following table and index:
CREATE CACHED TABLE product (
id INTEGER IDENTITY PRIMARY KEY,
code VARCHAR(50),
name VARCHAR(50)
);
CREATE INDEX idx_product ON product (code);
OpenOffice runs the following queries (slight differences between 1.8 and 1.9,
since in case of 1.9, it also specified the catalog in addition to the schema).
1.8:
SELECT * FROM INFORMATION_SCHEMA.SYSTEM_COLUMNS
WHERE 1=1 AND TABLE_SCHEM = 'PUBLIC' AND TABLE_NAME = 'PRODUCT'
AND COLUMN_NAME LIKE '%'
1.9:
SELECT * FROM INFORMATION_SCHEMA.SYSTEM_COLUMNS
WHERE TRUE AND TABLE_CAT = 'PUBLIC' AND TABLE_SCHEM = 'PUBLIC' AND TABLE_NAME = 'PRODUCT'
AND COLUMN_NAME LIKE '%'
Result columns differ more significantly, however, since on 1.9:
- COLUMN_SIZE appears for integer columns.
- BUFFER_LENGTH disappears for all columns.
- DECIMAL_DIGITS value appears for integer columns.
- NUM_PREC_RADIX changes for integer columns.
- CHAR_OCTET_LENGTH appears with a value of 0 for integer columns.
- TYPE_SUB column changes position.
Sample results for the table in question look like:
1.8:
TABLE_CAT TABLE_SCHEM TABLE_NAME COLUMN_NAME DATA_TYPE TYPE_NAME COLUMN_SIZE BUFFER_LENGTH DECIMAL_DIGITS NUM_PREC_RADIX NULLABLE REMARKS COLUMN_DEF SQL_DATA_TYPE SQL_DATETIME_SUB CHAR_OCTET_LENGTH ORDINAL_POSITION IS_NULLABLE SCOPE_CATLOG SCOPE_SCHEMA SCOPE_TABLE SOURCE_DATA_TYPE TYPE_SUB 
--------- ----------- ---------- ----------- --------- --------- ----------- ------------- -------------- -------------- -------- ------- ---------- ------------- ---------------- ----------------- ---------------- ----------- ------------ ------------ ----------- ---------------- -------- 
[null] PUBLIC PRODUCT ID 4 INTEGER 4 10 0 [null] [null] 4 1 NO [null] [null] [null] [null] 1 
[null] PUBLIC PRODUCT CODE 12 VARCHAR 50 100 1 [null] [null] 12 100 2  YES [null] [null] [null] [null] 1 
[null] PUBLIC PRODUCT NAME 12 VARCHAR 50 100 1 [null] [null] 12 100 3 YES [null] [null] [null] [null] 1 
1.9:
TABLE_CAT TABLE_SCHEM TABLE_NAME COLUMN_NAME DATA_TYPE TYPE_NAME COLUMN_SIZE BUFFER_LENGTH DECIMAL_DIGITS NUM_PREC_RADIX NULLABLE REMARKS COLUMN_DEF SQL_DATA_TYPE SQL_DATETIME_SUB CHAR_OCTET_LENGTH ORDINAL_POSITION IS_NULLABLE SCOPE_CATLOG SCOPE_SCHEMA SCOPE_TABLE SOURCE_DATA_TYPE IS_AUTOINCREMENT TYPE_SUB 
--------- ----------- ---------- ----------- --------- --------- ----------- ------------- -------------- -------------- -------- ------- ---------- ------------- ---------------- ----------------- ---------------- ----------- ------------ ------------ ----------- ---------------- ---------------- -------- 
PUBLIC PUBLIC PRODUCT ID 4 INTEGER 32 0 2 0 [null] [null] 4 0 1 NO [null] [null] [null] [null] YES 1 
PUBLIC PUBLIC PRODUCT CODE 12 VARCHAR 50 1 [null] [null] 12 50 2 YES [null] [null] [null] [null] NO 1 
PUBLIC PUBLIC PRODUCT NAME 12 VARCHAR 50 1 [null] [null] 12 50 3 YES [null] [null] [null] [null] NO 1
P.S.
Please don't take my report too seriously, I'm not sure yet whether this difference
is actually involved in breakage. I am currently testing this behaviour
with the 1.9 RC6 .jar file obtained from "http://www.hsqldb.org/support/hsqldb.jar".
If testing with an SVN build would likely help, I can try that too - I picked the binary
for the convenience of OO folks, so they could easier obtain the same conditions
which I tested in.
If you wish to discover more about the context of my situation,
the bug report I've filed about form filter breakage in OpenOffice
can be found at:
http://qa.openoffice.org/issues/show_bug.cgi?id=105872
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

931
HyperSQL Database Engine (HSQLDB) / Bugs / #931 wrong package name in documentation and runServer.bat
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HyperSQL v. 1.9.0-rc6
Documenation says to start the server use: java -cp ../lib/hsqldb.jar org.hsqldb.Server -database.0 file:mydb -dbname.0 xdb
The package name is wrong. It must be: org.hsqldb.server.Server (read this exactly!)
The same bug is in the start script runServer.bat.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

932
HyperSQL Database Engine (HSQLDB) / Bugs / #932 Select keeps readlock even if resultset is processed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that a select issued in 1 connection (autoCommit=false) keeps a lock on the table even if the select is completely processed (it does not have any results in our case).
An insert executed from another connection blocks on the select statement.
See attached sample program, this program completes using hsql 1.8 but hangs using version 1.9.
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

933
HyperSQL Database Engine (HSQLDB) / Bugs / #933 UPDATE statement with IN criterion recently broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I suspect that some fairly recent change to the codebase has broken
the following scenarion in 1.9 (testing with revision 3262):
-- table creation --
CREATE CACHED TABLE product (
id INTEGER IDENTITY PRIMARY KEY,
code VARCHAR(50),
name VARCHAR(50)
);
-- insert sample data --
INSERT INTO product (code,name) VALUES ('001','First product');
INSERT INTO product (code,name) VALUES ('002','Second product');
INSERT INTO product (code,name) VALUES ('003','Third product');
-- verify that product ID value "1" is valid --
SELECT * FROM product
-- try to invoke an UPDATE statement --
-- targeting that ID with an IN criterion --
UPDATE product SET name = 'foo product' WHERE id IN (1)
Instead of performing 1 update on the product table,
the last statement returns an error:
java.sql.SQLException: java.lang.NullPointerException null
at org.hsqldb.jdbc.Util.sqlException(Util.java:200)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1808)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:635)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(DatabaseManagerSwing.java:1647)
at org.hsqldb.util.DatabaseManagerSwing.access$1000(DatabaseManagerSwing.java:188)
at org.hsqldb.util.DatabaseManagerSwing$StatementExecRunnable.run(DatabaseManagerSwing.java:1619)
at java.awt.event.InvocationEvent.dispatch(Unknown Source)
at java.awt.EventQueue.dispatchEvent(Unknown Source)
at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

934
HyperSQL Database Engine (HSQLDB) / Bugs / #934 Documentation update needed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current documentation reflects old paths to HSQLDB server mode startup. the startup command should be:
java -classpath hsqldb.jar org.hsqldb.server.Server instead of just org.hsqldb.Server ... should be easy to modify and update.
Regards
Vyas, Anirudh
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

935
HyperSQL Database Engine (HSQLDB) / Bugs / #935 PreparedStatement did not return generated keys
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to retrieve an auto-generated key from an INSERT statement, but the generated keys result set is empty. See my test case below. The assert statement at the end fails. I am using 1.9.0-rc6. The code works fine with MySQL, PostgreSQL and Oracle.
Class.forName("org.hsqldb.jdbcDriver");
Connection c = DriverManager.getConnection("jdbc:hsqldb:mem:aname", "sa", "");
Statement s = c.createStatement();
s.execute("CREATE TABLE test (c1 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY, c2 VARCHAR(20))");
PreparedStatement ps = c.prepareStatement("INSERT INTO test (c2) VALUES (?)", new String[]{"c1"});
ps.setString(1, "testValue");
ps.executeUpdate();
assert ps.getGeneratedKeys().next();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

936
HyperSQL Database Engine (HSQLDB) / Bugs / #936 Suspecting a memory leak (OOM after day's work)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While stress-testing an installation of HSQLDB 1.9 in real use
with about 30 database clients of various sorts performing warehouse transactions,
I obtained an OOM by the evening, despite having allowed 1.2 GB of Java heap space.
Maximum log size is about 200 MB, and 1.8 never required nearly as much,
yet 1.9 seems to quite reliably exhaust any amount of memory given to it.
Before the crash, about 3.79 million statements were processed.
I unfortunately only obtained a thread dump, not knowing how to obtain more.
I had internal event monitoring running on level 2, but its log shows nothing of interest.
The thread dump however indicates a massive amount of objects in the "Old" generation.
I suspect this is a result of their handles remaining in memory, and garbage collection
being unable to collect them... that is assuming that garbage collection *tries*
to do that, which I sort of assume it *must* try without any extra encouragement.
I have not, however, tried enabling explicit GC calls.
Any ideas about what might be happening are very welcome.
[Server@1a626f]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@1a626f]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@1a626f]: Startup sequence initiated from main() method
[Server@1a626f]: Loaded properties from [/opt/hsqldb-test/server.properties]
[Server@1a626f]: Initiating startup sequence...
[Server@1a626f]: Server socket opened successfully in 3 ms.
[Server@1a626f]: Database [index=0, id=0, db=file:ladu, alias=ladu] opened sucessfully in 351 ms.
[Server@1a626f]: Startup sequence completed in 355 ms.
[Server@1a626f]: 2009-11-04 07:15:24.246 HSQLDB server 1.9.0 is online on port 9002
[Server@1a626f]: To close normally, connect and execute SHUTDOWN SQL
[Server@1a626f]: From command line, use [Ctrl]+[C] to abort abruptly
1 / 3 ladu.properties... 
2 / 3 ladu.script... 
3 / 3 ladu.data... 
org.hsqldb.HsqlException: Network client is not a HSQLDB JDBC driver
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.error.Error.error(Error.java:82)
at org.hsqldb.server.ServerConnection.handshake(ServerConnection.java:1647)
at org.hsqldb.server.ServerConnection.init(ServerConnection.java:252)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1514)
at java.lang.Thread.run(Thread.java:619)
org.hsqldb.HsqlException: Network client is not a HSQLDB JDBC driver
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.error.Error.error(Error.java:82)
at org.hsqldb.server.ServerConnection.handshake(ServerConnection.java:1647)
at org.hsqldb.server.ServerConnection.init(ServerConnection.java:252)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1514)
at java.lang.Thread.run(Thread.java:619)
org.hsqldb.HsqlException: Network client is not a HSQLDB JDBC driver
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.error.Error.error(Error.java:82)
at org.hsqldb.server.ServerConnection.handshake(ServerConnection.java:1647)
at org.hsqldb.server.ServerConnection.init(ServerConnection.java:252)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1514)
at java.lang.Thread.run(Thread.java:619)
org.hsqldb.HsqlException: Network client is not a HSQLDB JDBC driver
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.error.Error.error(Error.java:82)
at org.hsqldb.server.ServerConnection.handshake(ServerConnection.java:1647)
at org.hsqldb.server.ServerConnection.init(ServerConnection.java:252)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1514)
at java.lang.Thread.run(Thread.java:619)
org.hsqldb.HsqlException: Network client is not a HSQLDB JDBC driver
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.error.Error.error(Error.java:82)
at org.hsqldb.server.ServerConnection.handshake(ServerConnection.java:1647)
at org.hsqldb.server.ServerConnection.init(ServerConnection.java:252)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1514)
at java.lang.Thread.run(Thread.java:619)
Exception in thread "HSQLDB Connection @16a3700" java.lang.OutOfMemoryError: Java heap space
at org.hsqldb.result.Result.newResult(Result.java:233)
at org.hsqldb.result.Result.newResult(Result.java:314)
at org.hsqldb.result.Result.newResult(Result.java:255)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:333)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
[Server@1a626f]: Initiating shutdown sequence...
Exception in thread "HSQLDB Connection @305a74" java.lang.OutOfMemoryError: Java heap space
2009-11-04 14:15:49
Full thread dump Java HotSpot(TM) Server VM (11.2-b01 mixed mode):
"HSQLDB Connection @1b910a6" prio=10 tid=0x57b48c00 nid=0x1cba runnable [0x56918000..0x56918e30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0xace50120> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @e864b1" prio=10 tid=0x57b48000 nid=0x1c74 runnable [0x5745c000..0x5745cdb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0xace3dff0> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @948cb9" prio=10 tid=0x57950c00 nid=0x1c40 runnable [0x5725d000..0x5725e130]
java.lang.Thread.State: RUNNABLE
at java.io.RandomAccessFile.length(Native Method)
at org.hsqldb.persist.ScaledRAFile.seek(ScaledRAFile.java:169)
at org.hsqldb.persist.DataFileCache.readObject(DataFileCache.java:803)
at org.hsqldb.persist.DataFileCache.getFromFile(DataFileCache.java:732)
at org.hsqldb.persist.DataFileCache.get(DataFileCache.java:709)
at org.hsqldb.persist.RowStoreAVLDisk.get(RowStoreAVLDisk.java:114)
at org.hsqldb.index.NodeAVLDisk.findNode(NodeAVLDisk.java:188)
at org.hsqldb.index.NodeAVLDisk.getRight(NodeAVLDisk.java:252)
at org.hsqldb.index.IndexAVL.next(IndexAVL.java:1113)
at org.hsqldb.index.IndexAVL.next(IndexAVL.java:1070)
at org.hsqldb.index.IndexAVL$IndexRowIterator.getNextRow(IndexAVL.java:1577)
at org.hsqldb.RangeVariable$RangeIteratorMain.findNext(RangeVariable.java:877)
at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:705)
at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1173)
at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1117)
at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1105)
at org.hsqldb.StatementQuery.getResult(StatementQuery.java:64)
at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:203)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1194)
at org.hsqldb.Session.executeDirectStatement(Session.java:1101)
at org.hsqldb.Session.execute(Session.java:891)
- locked <0xacd69368> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @cf83bd" prio=10 tid=0x58826000 nid=0x1b50 runnable [0x576fe000..0x576fef30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0xab2a2e20> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @9a6051" prio=10 tid=0x580dd000 nid=0x1584 runnable [0x56cfe000..0x56cff130]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0xaa17f7f8> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @46d3db" prio=10 tid=0x5794d800 nid=0x326 runnable [0x56969000..0x56969f30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x8edc5e98> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1342b52" prio=10 tid=0x5794c800 nid=0x30b runnable [0x569ba000..0x569baeb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x8eb707a0> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1bdc046" prio=10 tid=0x58880400 nid=0x7e7e runnable [0x56a0b000..0x56a0bdb0]
java.lang.Thread.State: RUNNABLE
at org.hsqldb.Session.getCurrentDate(Session.java:1431)
- locked <0x8a5457b8> (a org.hsqldb.Session)
at org.hsqldb.FunctionSQL.getValue(FunctionSQL.java:1019)
at org.hsqldb.FunctionSQL.getValue(FunctionSQL.java:544)
at org.hsqldb.ExpressionOp.getValue(ExpressionOp.java:469)
at org.hsqldb.Expression.getValue(Expression.java:1179)
at org.hsqldb.FunctionSQL.getValue(FunctionSQL.java:540)
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:993)
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:943)
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:943)
at org.hsqldb.Expression.testCondition(Expression.java:1242)
at org.hsqldb.RangeVariable$RangeIteratorMain.findNext(RangeVariable.java:895)
at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:705)
at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1173)
at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1117)
at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1105)
at org.hsqldb.SubQuery.materialise(SubQuery.java:191)
at org.hsqldb.StatementDMQL.materializeSubQueries(StatementDMQL.java:353)
at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:200)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1194)
at org.hsqldb.Session.execute(Session.java:875)
- locked <0x8a5457b8> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @3ae9fa" prio=10 tid=0x5825cc00 nid=0x76ed runnable [0x574fe000..0x574fef30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x84985798> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @165fb66" prio=10 tid=0x58828800 nid=0x7188 runnable [0x56aad000..0x56aaddb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x7c6cb048> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @184d884" prio=10 tid=0x58827400 nid=0x6b14 runnable [0x56afe000..0x56aff0b0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x76449a58> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @d0fe78" prio=10 tid=0x58826400 nid=0x69f9 waiting on condition [0x56c5c000..0x56c5d030]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0xad24d950> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1175)
at org.hsqldb.Session.execute(Session.java:875)
- locked <0x75541d88> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1e3b891" prio=10 tid=0x588d4400 nid=0x60db runnable [0x5765c000..0x5765d0b0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x67d5fb10> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @f265fb" prio=10 tid=0x5827d800 nid=0x60d2 waiting for monitor entry [0x57aad000..0x57aadeb0]
java.lang.Thread.State: BLOCKED (on object monitor)
at org.hsqldb.scriptio.ScriptWriterText.writeRowOutToFile(ScriptWriterText.java:294)
- waiting to lock <0x5fae0f18> (a java.io.BufferedOutputStream)
at org.hsqldb.scriptio.ScriptWriterText.writeRow(ScriptWriterText.java:183)
at org.hsqldb.scriptio.ScriptWriterText.writeInsertStatement(ScriptWriterText.java:215)
at org.hsqldb.persist.Log.writeInsertStatement(Log.java:652)
at org.hsqldb.persist.Logger.writeInsertStatement(Logger.java:637)
- locked <0x5d5e5d48> (a org.hsqldb.persist.Logger)
at org.hsqldb.TransactionManager2PL.commitTransaction(TransactionManager2PL.java:251)
at org.hsqldb.Session.commit(Session.java:516)
- locked <0x67cb5730> (a org.hsqldb.Session)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1230)
at org.hsqldb.Session.execute(Session.java:875)
- locked <0x67cb5730> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1a7508a" prio=10 tid=0x588dd000 nid=0x5d8e waiting on condition [0x583fe000..0x583fedb0]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0xab408780> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1175)
at org.hsqldb.Session.execute(Session.java:875)
- locked <0x5d4b3fd0> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"DestroyJavaVM" prio=10 tid=0x085e5800 nid=0x5c50 waiting on condition [0x00000000..0xb7d80070]
java.lang.Thread.State: RUNNABLE
"HSQLDB Timer @1d6776d" daemon prio=10 tid=0x5887fc00 nid=0x5c5e runnable [0x585d9000..0x585da030]
java.lang.Thread.State: RUNNABLE
at java.io.FileDescriptor.sync(Native Method)
at org.hsqldb.lib.FileUtil$FileSync.sync(FileUtil.java:311)
at org.hsqldb.scriptio.ScriptWriterBase.sync(ScriptWriterBase.java:176)
- locked <0x5fae0f18> (a java.io.BufferedOutputStream)
at org.hsqldb.scriptio.ScriptWriterBase.run(ScriptWriterBase.java:380)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(HsqlTimer.java:644)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Server @1a626f" prio=10 tid=0x08782800 nid=0x5c5d waiting for monitor entry [0x5862a000..0x5862afb0]
java.lang.Thread.State: BLOCKED (on object monitor)
at org.hsqldb.Session.close(Session.java:193)
- waiting to lock <0x5d4b3fd0> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.close(ServerConnection.java:213)
at org.hsqldb.server.ServerConnection.signalClose(ServerConnection.java:203)
at org.hsqldb.server.Server.releaseDatabase(Server.java:1394)
- locked <0x5d574d50> (a org.hsqldb.server.Server)
at org.hsqldb.server.Server.shutdown(Server.java:2211)
- locked <0x5d574d50> (a org.hsqldb.server.Server)
at org.hsqldb.server.Server.run(Server.java:2167)
at org.hsqldb.server.Server.access$000(Server.java:243)
at org.hsqldb.server.Server$ServerThread.run(Server.java:313)
"Low Memory Detector" daemon prio=10 tid=0x086a6400 nid=0x5c5b runnable [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"CompilerThread1" daemon prio=10 tid=0x086a4400 nid=0x5c5a waiting on condition [0x00000000..0x5872c2e8]
java.lang.Thread.State: RUNNABLE
"CompilerThread0" daemon prio=10 tid=0x086a2800 nid=0x5c59 waiting on condition [0x00000000..0x587ad228]
java.lang.Thread.State: RUNNABLE
"Signal Dispatcher" daemon prio=10 tid=0x086a1000 nid=0x5c58 waiting on condition [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"Finalizer" daemon prio=10 tid=0x08691800 nid=0x5c57 in Object.wait() [0x587fe000..0x587ff0b0]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x5d5b0050> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)
- locked <0x5d5b0050> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)
at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)
"Reference Handler" daemon prio=10 tid=0x0868cc00 nid=0x5c56 in Object.wait() [0x58a18000..0x58a19030]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x5d5afdd8> (a java.lang.ref.Reference$Lock)
at java.lang.Object.wait(Object.java:485)
at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
- locked <0x5d5afdd8> (a java.lang.ref.Reference$Lock)
"VM Thread" prio=10 tid=0x08689400 nid=0x5c55 runnable 
"GC task thread#0 (ParallelGC)" prio=10 tid=0x085ec800 nid=0x5c51 runnable 
"GC task thread#1 (ParallelGC)" prio=10 tid=0x085ee000 nid=0x5c52 runnable 
"GC task thread#2 (ParallelGC)" prio=10 tid=0x085ef400 nid=0x5c53 runnable 
"GC task thread#3 (ParallelGC)" prio=10 tid=0x085f0c00 nid=0x5c54 runnable 
"VM Periodic Task Thread" prio=10 tid=0x086a8400 nid=0x5c5c waiting on condition 
JNI global references: 619
Heap
PSYoungGen total 110976K, used 55404K [0xab050000, 0xb4bd0000, 0xb4bd0000)
eden space 73600K, 75% used [0xab050000,0xae66b188,0xaf830000)
from space 37376K, 0% used [0xb2750000,0xb2750000,0xb4bd0000)
to space 42816K, 0% used [0xaf830000,0xaf830000,0xb2200000)
PSOldGen total 1274368K, used 1274367K [0x5d3d0000, 0xab050000, 0xab050000)
object space 1274368K, 99% used [0x5d3d0000,0xab04fff8,0xab050000)
PSPermGen total 16384K, used 6725K [0x593d0000, 0x5a3d0000, 0x5d3d0000)
object space 16384K, 41% used [0x593d0000,0x59a61478,0x5a3d0000)
[Server@1a626f]: Shutdown sequence completed in 548577 ms.
[Server@1a626f]: 2009-11-04 14:16:03.729 SHUTDOWN : System.exit() is called next
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

937
HyperSQL Database Engine (HSQLDB) / Bugs / #937 Apparent deadlock with r 3281
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While running an application against a HSQL server which imports and exports
XML files, I found that after upgrading from HSQL 1.9 revision 3271 (or perhaps 3274)
to revision 3281, situations which resemble a deadlock started occurring.
They involve the affected client only - other clients connected to the same server
can continue working undisturbed, and the server still responds to them.
Basing on the method in which the client hangs, it could be attempting
to execute something like:
private final String UPDATE_SALESORDER_ROW =
"UPDATE salesorder_row SET done = done + ? WHERE (id = ?)";
public void fulfillSalesOrderRow(String rowId, double addedQtty) {
PreparedStatement st = null;
try {
st = conn.prepareStatement(UPDATE_SALESORDER_ROW);
st.setDouble(1, addedQtty);
st.setString(2, rowId);
if (st.executeUpdate() != 1) {
logger.error("Error fulfilling sales order row " + rowId + ", did not affect 1 rows.");
}
} catch (SQLException e) {
logger.error("Error fulfilling sales order row.",e);
} finally {
cleanUp(null,st);
}
}
...but I am not sure if this is always the method which hangs.
Others might be involved, simultaneous activities by other clients
might be involved, and the SQL involved might vary.
A thread dump from the client looks like this:
-------------------------------------------------------------
Full thread dump Java HotSpot(TM) Server VM (11.2-b01 mixed mode):
"Low Memory Detector" daemon prio=10 tid=0x84ab1000 nid=0x79a4 runnable [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"CompilerThread1" daemon prio=10 tid=0x84aaf000 nid=0x79a3 waiting on condition [0x00000000..0x846c8528]
java.lang.Thread.State: RUNNABLE
"CompilerThread0" daemon prio=10 tid=0x84aad400 nid=0x79a2 waiting on condition [0x00000000..0x847495e8]
java.lang.Thread.State: RUNNABLE
"Signal Dispatcher" daemon prio=10 tid=0x84aabc00 nid=0x79a1 waiting on condition [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"Finalizer" daemon prio=10 tid=0x84a9c400 nid=0x79a0 in Object.wait() [0x84b60000..0x84b60e30]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x890d8240> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)
- locked <0x890d8240> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)
at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)
"Reference Handler" daemon prio=10 tid=0x84a9b000 nid=0x799f in Object.wait() [0x847eb000..0x847ebeb0]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x890d8260> (a java.lang.ref.Reference$Lock)
at java.lang.Object.wait(Object.java:485)
at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
- locked <0x890d8260> (a java.lang.ref.Reference$Lock)
"main" prio=10 tid=0x0883e800 nid=0x7999 runnable [0xb7e19000..0xb7e1a1f8]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x891d94b0> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.result.Result.newResult(Result.java:242)
at org.hsqldb.ClientConnection.read(ClientConnection.java:489)
at org.hsqldb.ClientConnection.execute(ClientConnection.java:209)
- locked <0x890d84e8> (a org.hsqldb.ClientConnection)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4501)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(JDBCPreparedStatement.java:307)
- locked <0xb025d7b8> (a org.hsqldb.jdbc.JDBCPreparedStatement)
at xmlrelay.Database.fulfillSalesOrderRow(Unknown Source)
at xmlrelay.Database.exportPickingBatch(Unknown Source)
at xmlrelay.Main.exportFiles(Unknown Source)
at xmlrelay.Main.<init>(Unknown Source)
at xmlrelay.Main.main(Unknown Source)
"VM Thread" prio=10 tid=0x84a97800 nid=0x799e runnable
"GC task thread#0 (ParallelGC)" prio=10 tid=0x08845800 nid=0x799a runnable
"GC task thread#1 (ParallelGC)" prio=10 tid=0x08847000 nid=0x799b runnable
"GC task thread#2 (ParallelGC)" prio=10 tid=0x08848800 nid=0x799c runnable
"GC task thread#3 (ParallelGC)" prio=10 tid=0x08849c00 nid=0x799d runnable
"VM Periodic Task Thread" prio=10 tid=0x84ab3000 nid=0x79a5 waiting on condition
JNI global references: 941
Heap
PSYoungGen total 25152K, used 9625K [0xafeb0000, 0xb1f20000, 0xb4c70000)
eden space 19392K, 20% used [0xafeb0000,0xb027a688,0xb11a0000)
from space 5760K, 99% used [0xb1270000,0xb180c030,0xb1810000)
to space 6912K, 0% used [0xb1860000,0xb1860000,0xb1f20000)
PSOldGen total 11904K, used 7390K [0x89070000, 0x89c10000, 0xafeb0000)
object space 11904K, 62% used [0x89070000,0x897a7ad0,0x89c10000)
PSPermGen total 16384K, used 6029K [0x85070000, 0x86070000, 0x89070000)
object space 16384K, 36% used [0x85070000,0x85653678,0x86070000)
A thread dump from the server looks like this
----------------------------------------------------------
Full thread dump Java HotSpot(TM) Client VM (11.2-b01 mixed mode, sharing):
"HSQLDB Connection @aae949" prio=10 tid=0xb5217800 nid=0x79a6 waiting on condition [0xa470d000..0xa470e130]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x285615b0> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1174)
at org.hsqldb.Session.execute(Session.java:874)
- locked <0x27dfa6f8> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @8e3a01" prio=10 tid=0xb5216400 nid=0x7774 runnable [0xa48f3000..0xa48f40b0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x27c3eaa8> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @eb2497" prio=10 tid=0xb525c800 nid=0x7661 runnable [0xa48a2000..0xa48a2e30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x27a94750> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1590460" prio=10 tid=0xb5239400 nid=0x7469 runnable [0xa4c6e000..0xa4c6edb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x27973d00> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1045171" prio=10 tid=0xb5214000 nid=0x7329 runnable [0xa4851000..0xa4851f30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x276f4f80> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @5e898b" prio=10 tid=0xb525e000 nid=0x72c6 runnable [0xa46bc000..0xa46bceb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x274fa850> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @4cd5bf" prio=10 tid=0xb5238000 nid=0x7234 runnable [0xa4cbf000..0xa4cbffb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x272bdd08> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @194f987" prio=10 tid=0xb5218c00 nid=0x713a runnable [0xa4995000..0xa49960b0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x25989810> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @113f000" prio=10 tid=0xb525b400 nid=0x6e85 runnable [0xa475e000..0xa475edb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x2224c028> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1124fc5" prio=10 tid=0xb525a000 nid=0x6e54 waiting on condition [0xa47af000..0xa47aff30]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x274edac8> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1174)
at org.hsqldb.Session.execute(Session.java:874)
- locked <0x21e32bc0> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @10ef738" prio=10 tid=0xb5215400 nid=0x665c runnable [0xa4944000..0xa4944f30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x21a93818> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1d181ee" prio=10 tid=0xb5212800 nid=0x6535 runnable [0xa49e6000..0xa49e6fb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x218deeb8> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1de69f2" prio=10 tid=0xb5211400 nid=0x652f waiting on condition [0xa4a37000..0xa4a38130]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x2475f8e8> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1174)
at org.hsqldb.Session.execute(Session.java:874)
- locked <0x2181c9b0> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @12d5b7f" prio=10 tid=0xb5210400 nid=0x6524 runnable [0xa4a88000..0xa4a88e30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x2178dcb0> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @1453924" prio=10 tid=0xb523f400 nid=0x651c runnable [0xa4ad9000..0xa4ad9db0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x216eb7e0> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @117e672" prio=10 tid=0xb523e000 nid=0x651b waiting on condition [0xa4b2a000..0xa4b2af30]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x28561758> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1174)
at org.hsqldb.Session.execute(Session.java:874)
- locked <0x216ede00> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @179336b" prio=10 tid=0xb523d000 nid=0x64fe runnable [0xa4b7b000..0xa4b7beb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x21525ee8> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @a958f" prio=10 tid=0xb523b800 nid=0x647a runnable [0xa4bcc000..0xa4bcd030]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x214c8ac8> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @e322f7" prio=10 tid=0xb523a400 nid=0x6479 runnable [0xa4c1d000..0xa4c1dfb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x214cabe8> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @bd3671" prio=10 tid=0xb5236c00 nid=0x642d runnable [0xa4d10000..0xa4d10e30]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x214ccd08> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @10907b6" prio=10 tid=0xb5235400 nid=0x641e runnable [0xa4d61000..0xa4d61eb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x212453a8> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @d979dd" prio=10 tid=0xb5258400 nid=0x641d runnable [0xa4db2000..0xa4db3030]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x210db388> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @7c0def" prio=10 tid=0xb5257000 nid=0x62ae runnable [0xa4e03000..0xa4e03fb0]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x210a2988> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1519)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Connection @bf2d5e" prio=10 tid=0xb5254800 nid=0x614f waiting on condition [0xa4e5b000..0xa4e5c130]
java.lang.Thread.State: WAITING (parking)
at sun.misc.Unsafe.park(Native Method)
- parking to wait for <0x210bde88> (a java.util.concurrent.CountDownLatch$Sync)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:905)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1217)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
at org.hsqldb.lib.CountUpDownLatch.await(CountUpDownLatch.java:51)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1174)
at org.hsqldb.Session.execute(Session.java:874)
- locked <0x1cbf7298> (a org.hsqldb.Session)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
"DestroyJavaVM" prio=10 tid=0xb5253c00 nid=0x6102 waiting on condition [0x00000000..0xb7dfd070]
java.lang.Thread.State: RUNNABLE
"HSQLDB Timer @f72617" daemon prio=10 tid=0x090e4400 nid=0x610b in Object.wait() [0xb4eb4000..0xb4eb50b0]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x1cbf7648> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer$TaskQueue.park(HsqlTimer.java:882)
- locked <0x1cbf7648> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer.nextTask(HsqlTimer.java:530)
- locked <0x1cbf7648> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(HsqlTimer.java:610)
at java.lang.Thread.run(Thread.java:619)
"HSQLDB Server @47b480" prio=10 tid=0xb5244400 nid=0x610a runnable [0xb4f19000..0xb4f19e30]
java.lang.Thread.State: RUNNABLE
at java.net.PlainSocketImpl.socketAccept(Native Method)
at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:384)
- locked <0x1cbf7740> (a java.net.SocksSocketImpl)
at java.net.ServerSocket.implAccept(ServerSocket.java:453)
at java.net.ServerSocket.accept(ServerSocket.java:421)
at org.hsqldb.server.Server.run(Server.java:2155)
at org.hsqldb.server.Server.access$000(Server.java:243)
at org.hsqldb.server.Server$ServerThread.run(Server.java:313)
"Low Memory Detector" daemon prio=10 tid=0xb5207c00 nid=0x6108 runnable [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"CompilerThread0" daemon prio=10 tid=0xb5205c00 nid=0x6107 waiting on condition [0x00000000..0xb51fe958]
java.lang.Thread.State: RUNNABLE
"Signal Dispatcher" daemon prio=10 tid=0xb5204400 nid=0x6106 waiting on condition [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"Finalizer" daemon prio=10 tid=0x08fea800 nid=0x6105 in Object.wait() [0xb53e7000..0xb53e7fb0]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x1cbf7a48> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:116)
- locked <0x1cbf7a48> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:132)
at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:159)
"Reference Handler" daemon prio=10 tid=0x08fe9000 nid=0x6104 in Object.wait() [0xb5438000..0xb5439130]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x1cbf7200> (a java.lang.ref.Reference$Lock)
at java.lang.Object.wait(Object.java:485)
at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:116)
- locked <0x1cbf7200> (a java.lang.ref.Reference$Lock)
"VM Thread" prio=10 tid=0x08fe7400 nid=0x6103 runnable 
"VM Periodic Task Thread" prio=10 tid=0xb520a000 nid=0x6109 waiting on condition 
JNI global references: 893
Heap
def new generation total 30464K, used 7814K [0x13060000, 0x15160000, 0x1ca30000)
eden space 27136K, 16% used [0x13060000, 0x134c1a20, 0x14ae0000)
from space 3328K, 99% used [0x14e20000, 0x1515fff8, 0x15160000)
to space 3328K, 0% used [0x14ae0000, 0x14ae0000, 0x14e20000)
tenured generation total 403624K, used 378829K [0x1ca30000, 0x3545a000, 0x90060000)
the space 403624K, 93% used [0x1ca30000, 0x33c23430, 0x33c23600, 0x3545a000)
compacting perm gen total 12288K, used 3159K [0x90060000, 0x90c60000, 0x94060000)
the space 12288K, 25% used [0x90060000, 0x90375f68, 0x90376000, 0x90c60000)
ro space 8192K, 74% used [0x94060000, 0x946580d8, 0x94658200, 0x94860000)
rw space 12288K, 58% used [0x94860000, 0x94f73618, 0x94f73800, 0x95460000)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

938
HyperSQL Database Engine (HSQLDB) / Bugs / #938 "Integrity constraint violation" after prolonged work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While attempting to track the reasons of great memory use (which I mentioned in another report),
with revision 3282, I also observed an effect which I believe might be separate from it,
but might be worth reporting.
It occurs after an HSQL server has operated and serviced clients for a notable time,
often as long as 6 hours. Out of the multitude of clients this server services,
it *seems* to be occurring with one particular client -- a client which frequently
disconnects from the server and reconnects to it, since its network link
is unstable and it's been designed this way to gracefully resume operation.
I have never seen it with the same database and nearly the same client
previously on HSQL 1.8.
The error message the server issues, implies that a problem with indexes
was encountered while inserting a value into an index, but surprisingly
the call stack suggests that the call actually originated from a rollback operation.
I am unsure what to think about it:
org.hsqldb.HsqlException: integrity constraint violation: unique constraint or index violation
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.error.Error.error(Error.java:82)
at org.hsqldb.index.IndexAVL.insert(IndexAVL.java:489)
at org.hsqldb.persist.RowStoreAVL.indexRow(RowStoreAVL.java:130)
at org.hsqldb.TransactionManager2PL.rollbackPartial(TransactionManager2PL.java:362)
at org.hsqldb.TransactionManager2PL.rollbackAction(TransactionManager2PL.java:320)
at org.hsqldb.Session.endAction(Session.java:458)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1197)
at org.hsqldb.Session.execute(Session.java:874)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:357)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1522)
at java.lang.Thread.run(Thread.java:619)
When this happens, it does seem to effectively guarantee that a SHUTDOWN COMPACT
statement won't execute correctly, while an onling backup with the BLOCKING option,
followed by a SHUTDOWN IMMEDIATELY (my usual way of recovering
from this situation) generally does execute correctly.
I have no reason to suspct that at the time of this error ocurring,
an actual integrity constraint violation would occur, since the data this program processes
is repetitive in nature, and then I'd be getting these errors multiple times per day.
What is meanwhile ocurring on the client (in case it provides any insight into the problem),
is typically a saldo import operation, whereby a lot (usually about 40'000) warehouse saldos 
are read from an XML file, which has been supplied by a separate program.
In the below excerpt from my logs, the client has successfully imported 19'000 saldos,
then suddenly seems to pause for several minutes, reports the error, and proceeds to skip the rest,
since its ability to find article records from the article table has apparently been impaired
by something:
2009-11-14 18:35:52,980 [main] DEBUG xmlrelay.Main - Importing saldo 18000
2009-11-14 18:36:23,570 [main] DEBUG xmlrelay.Main - Importing saldo 19000
2009-11-14 18:41:06,202 [main] ERROR xmlrelay.Main - Error updating saldo timestamps.
java.sql.SQLTransientConnectionException: connection exception: connection failure: java.io.EOFException
at org.hsqldb.jdbc.Util.sqlException(Util.java:259)
at org.hsqldb.jdbc.Util.sqlException(Util.java:103)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4503)
at org.hsqldb.jdbc.JDBCPreparedStatement.execute(JDBCPreparedStatement.java:1102)
at xmlrelay.Database.updateSaldoTimestamps(Unknown Source)
at xmlrelay.Database.importSaldos(Unknown Source)
at xmlrelay.Main.importSaldos(Unknown Source)
at xmlrelay.Main.importFile(Unknown Source)
at xmlrelay.Main.importFiles(Unknown Source)
at xmlrelay.Main.<init>(Unknown Source)
at xmlrelay.Main.main(Unknown Source)
Caused by: org.hsqldb.HsqlException: connection exception: connection failure: java.io.EOFException
at org.hsqldb.error.Error.error(Error.java:77)
at org.hsqldb.ClientConnection.execute(ClientConnection.java:211)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4501)
... 8 more
2009-11-14 18:41:06,252 [main] ERROR xmlrelay.Main - Skipping saldo, article 148-E122HD187 batch is unknown!
2009-11-14 18:41:06,254 [main] ERROR xmlrelay.Main - Skipping saldo, article 148-E128HD24 batch is unknown!
2009-11-14 18:41:06,256 [main] ERROR xmlrelay.Main - Skipping saldo, article 148-E12HD53 batch is unknown!
2009-11-14 18:41:06,258 [main] ERROR xmlrelay.Main - Skipping saldo, article 148-E134HD06 batch is unknown!
2009-11-14 18:41:06,276 [main] ERROR xmlrelay.Main - Skipping saldo, article 148-E134HD31 batch is unknown!
2009-11-14 18:41:06,278 [main] ERROR xmlrelay.Main - Skipping saldo, article 148-E135HD14 batch is unknown!
...etc...
I can additionally certify that no network connectivity problems could have been involved,
since the HSQL server and client were operating on the same host.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

939
HyperSQL Database Engine (HSQLDB) / Bugs / #939 "unique constraint or index violation" inadequate message
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a table with two foreign key constraints and two unique constraints with specific different names. I am using Spring Framework's JDBC tools to add data to the table. If I add a row to the table in violation of one of the foreign keys, HSQL throws an error like this:
org.hsqldb.HsqlException: integrity constraint violation: foreign key no parent; CODE_MAP_ENTRIES_FKCODE table: LOOKUP_CODES
Spring then wraps this with a DataIntegrityViolationException from which I can extract the name of the foreign key constraint to determine what kind of error to throw of my own.
However, if I insert a row in violation of one of the unique keys, HSQL throws an error like this:
org.hsqldb.HsqlException: integrity constraint violation: unique constraint or index violation
Spring appropriately wraps this in a DuplicateKeyException, however, since HSQL provides no constraint names in this error like it does with foreign key errors, I have no way of telling which unique constraint was violated. To make troubleshooting easier, the error should be changed to be:
org.hsqldb.HsqlException: integrity constraint violation: unique constraint or index violation; CODE_MAP_ENTRIES_TABLEOLDCODE table: LOOKUP_CODES
Or something similar.
I've tracked down at least where a change needs to be made to org/hsqldb/index/IndexAVL.java line 541:
throw Error.error(ErrorCode.X_23505);
This should be changed to something similar to org/hsqldb/Constraint.java line 748:
throw Error.error(null, ErrorCode.X_23503, ErrorCode.CONSTRAINT, info);
Something along the lines of:
throw Error.error(null, ErrorCode.X_23505, ErrorCode.CONSTRAINT, {
$constraintName, $tableName
});
However, I am simply not familiar enough with HSQLDB source code to be comfortable contributing a change like this to it because the table name and/or violated constraint name are not readily available within the body of that method from what I can tell. The table name isn't totally necessary, but the constraint name is definitely necessary. Every other major SQL vendor supplies the violated constraint name in the JDBC exception.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

940
HyperSQL Database Engine (HSQLDB) / Bugs / #940 1.9 rc 6: database.data file has no up-to-date last-modify
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a database with a cached table in it.
For reasons of doing a catalogue file backup, I looked to the timestamps of the various catalogue files.
Thereby observing that the last modify date of the .data file was several weeks in the past although updates to the table
had taken place more recently.
Is this a feature or a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

941
HyperSQL Database Engine (HSQLDB) / Bugs / #941 poor query performance 1.9
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have used v 1.8 for the last year and performance was great. Thought I'd try out 1.9 so I downloaded it last week and converted my database. The following query runs in less than one sec in 1.8 but over 15 seconds in 1.9.
select te.tense_name "Tense", vx.description "Description", sp.name "ES Pronoun" , s.conjugation "ES Conjugation", ep.name "EN Pronoun", e.conjugation "En Conjugation", s.id_conjugation, e.id_conjugation, s.id_tense, s.verbxid from verb v inner join translate t on v.id_verb = t.id_to inner join conjugations s on v.id_verb = s.id_verb inner join conjugations e on t.id_from = e.id_verb and s.verbxid = e.verbxid and s.id_tense = e.id_tense inner join tenses te on s.id_tense = te.id_tense inner join verbx vx on s.verbxid = vx.verbxid inner join (select verbxid, (min(name) + ', ' + max(name)) name from pronoun where language = 'ES' and gender is not null group by verbxid union select verbxid, name from pronoun where language = 'ES' and gender is null group by verbxid, name) sp on s.verbxid = sp.verbxid inner join (select verbxid, (min(name) + ', ' + max(name)) name from pronoun where language = 'EN' and gender is not null group by verbxid union select verbxid, name from pronoun where language = 'EN' and gender is null group by verbxid, name) ep on e.verbxid = ep.verbxid where v.infinitivo = 'abandonar' and v.language = 'ES' and s.id_tense in (0,1,2,3,4,5,6,7,8) and s.verbxid in (0,1,2,3,4,5,6,8) order by s.id_verb, s.id_tense, s.verbxid
I can provide 27MB zip of data on request. Tried to attach but got failure message.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

942
HyperSQL Database Engine (HSQLDB) / Bugs / #942 1.8 Script stops working in 1.9 rc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DROP VIEW V1 IF EXISTS;
DROP TABLE T1 IF EXISTS;
CREATE TABLE T1 (id INT, name VARCHAR(32), age int);
CREATE VIEW V1 AS (SELECT * FROM T1 WHERE age < 21);
--------------------------------------------------------------------------------
I have no problem to execute the SQL statement above in one JDBC statement or on the SWING Manager from HSQLDB. Now it stops working on 1.9.0-rc6. This is error message I got - "user lacks privilege or object not found: T1 / Error Code: -5501 / State: 42501"
Does anyone know what have changed in 1.9.0-XX which made it not working?
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

943
HyperSQL Database Engine (HSQLDB) / Bugs / #943 set ignorecase true doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 1.9.0.RC6, set ignorecase true doesn't work. I looked at the code and I see that Database.setIgnoreCase() is called when processing the command, but I couldn't find anywhere that Database.getIgnoreCase() was used when setting the column type. Perhaps that should be passed to the constructor of ColumnSchema so the data type can be changed to VARCHAR_IGNORECASE? 
Here is some test sql.
SET IGNORECASE TRUE
CREATE TABLE markets (
market_id int NOT NULL,
name varchar(64) NOT NULL,
PRIMARY KEY ( market_id )
)
INSERT INTO markets (market_id, name) VALUES (1, 'NYSE')
select * from markets where name = 'nyse'
select * from markets where name = 'NYSE'
select column_name, data_type from information_schema.columns where table_name = 'MARKETS'
The data_type in the last query shows name as 'CHARACTER VARYING' not VARCHAR_IGNORECASE as one would expect. Defining the column type explicitly as VARCHAR_IGNORECASE works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

944
HyperSQL Database Engine (HSQLDB) / Bugs / #944 ClassNotFoundException while testing r3310
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While trying to gather data about the deadlock problem which I described previously,
I attempted to start testing with SVN revision 3310. However, transitioning to this revision
in regular manner failed, producing ClassNotFoundExceptions.
After issuing these exceptions, the server utilized a lot of CPU for 7 minutes
(sorry, couldn't wait longer), and didn't manage to reach readiness for work.
That's when I sent it the "-QUIT" signal to produce a thread dump.
1) Starting up and log extract
--------------------------------------
laoserver:/opt/hsqldb# /etc/init.d/hsqldb start
Removing lock files: /opt/hsqldb/*.lck
Starting hsqldb:
[Server@1975b59]: 2009-12-01 12:57:41.552 SHUTDOWN : System.exit() is called next
[Server@1975b59]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@1975b59]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@1975b59]: Startup sequence initiated from main() method
[Server@1975b59]: Loaded properties from [/opt/hsqldb/server.properties]
[Server@1975b59]: Initiating startup sequence...
[Server@1975b59]: Server socket opened successfully in 4 ms.
2) Exception messages
-------------------------
2009-12-01T12:58:20.925+0200 WARNING user lacks privilege or object not found org.hsqldb.Library org.hsqldb.Library in statement [CREATE FUNCTION PUBLIC."org.hsqldb.Library.getDatabaseProductName"() RETURNS VARCHAR(32768) SPECIFIC "org.hsqldb.Library.getDatabaseProductName_10259" LANGUAGE JAVA NOT DETERMINISTIC NO SQL CALLED ON NULL INPUT EXTERNAL NAME 'CLASSPATH:org.hsqldb.Library.getDatabaseProductName']
org.hsqldb.HsqlException: user lacks privilege or object not found org.hsqldb.Library org.hsqldb.Library
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.Routine.getMethods(Routine.java:618)
at org.hsqldb.Routine.getMethod(Routine.java:547)
at org.hsqldb.Routine.resolve(Routine.java:444)
at org.hsqldb.StatementSchema.getResult(StatementSchema.java:794)
at org.hsqldb.StatementSchema.execute(StatementSchema.java:264)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1207)
at org.hsqldb.scriptio.ScriptReaderText.readDDL(ScriptReaderText.java:102)
at org.hsqldb.scriptio.ScriptReaderBase.readAll(ScriptReaderBase.java:65)
at org.hsqldb.persist.Log.processScript(Log.java:786)
at org.hsqldb.persist.Log.open(Log.java:195)
at org.hsqldb.persist.Logger.openPersistence(Logger.java:242)
at org.hsqldb.Database.reopen(Database.java:201)
at org.hsqldb.Database.open(Database.java:173)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:225)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:177)
at org.hsqldb.server.Server.openDatabases(Server.java:1799)
at org.hsqldb.server.Server.run(Server.java:2132)
at org.hsqldb.server.Server.access$000(Server.java:243)
at org.hsqldb.server.Server$ServerThread.run(Server.java:313)
Caused by: java.lang.ClassNotFoundException: org.hsqldb.Library
at java.net.URLClassLoader$1.run(URLClassLoader.java:217)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(URLClassLoader.java:205)
at java.lang.ClassLoader.loadClass(ClassLoader.java:323)
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:294)
at java.lang.ClassLoader.loadClass(ClassLoader.java:268)
at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:336)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:186)
at org.hsqldb.Routine.getMethods(Routine.java:616)
... 18 more
2009-12-01T12:58:20.927+0200 WARNING user lacks privilege or object not found org.hsqldb.Library org.hsqldb.Library in statement [CREATE FUNCTION PUBLIC."org.hsqldb.Library.getDatabaseProductVersion"() RETURNS VARCHAR(32768) SPECIFIC "org.hsqldb.Library.getDatabaseProductVersion_10264" LANGUAGE JAVA NOT DETERMINISTIC NO SQL CALLED ON NULL INPUT EXTERNAL NAME 'CLASSPATH:org.hsqldb.Library.getDatabaseProductVersion']
org.hsqldb.HsqlException: user lacks privilege or object not found org.hsqldb.Library org.hsqldb.Library
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.Routine.getMethods(Routine.java:618)
at org.hsqldb.Routine.getMethod(Routine.java:547)
at org.hsqldb.Routine.resolve(Routine.java:444)
at org.hsqldb.StatementSchema.getResult(StatementSchema.java:794)
at org.hsqldb.StatementSchema.execute(StatementSchema.java:264)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1207)
at org.hsqldb.scriptio.ScriptReaderText.readDDL(ScriptReaderText.java:102)
at org.hsqldb.scriptio.ScriptReaderBase.readAll(ScriptReaderBase.java:65)
at org.hsqldb.persist.Log.processScript(Log.java:786)
at org.hsqldb.persist.Log.open(Log.java:195)
at org.hsqldb.persist.Logger.openPersistence(Logger.java:242)
at org.hsqldb.Database.reopen(Database.java:201)
at org.hsqldb.Database.open(Database.java:173)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:225)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:177)
at org.hsqldb.server.Server.openDatabases(Server.java:1799)
at org.hsqldb.server.Server.run(Server.java:2132)
at org.hsqldb.server.Server.access$000(Server.java:243)
at org.hsqldb.server.Server$ServerThread.run(Server.java:313)
Caused by: java.lang.ClassNotFoundException: org.hsqldb.Library
at java.net.URLClassLoader$1.run(URLClassLoader.java:217)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(URLClassLoader.java:205)
at java.lang.ClassLoader.loadClass(ClassLoader.java:323)
at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:294)
at java.lang.ClassLoader.loadClass(ClassLoader.java:268)
at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:336)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:186)
at org.hsqldb.Routine.getMethods(Routine.java:616)
... 18 more
3) Thread dump
------------------
2009-12-01 13:06:49
Full thread dump OpenJDK Server VM (1.6.0_0-b11 mixed mode):
"HSQLDB Timer @79717e" daemon prio=10 tid=0x09568000 nid=0x99a in Object.wait() [0x4d5b0000..0x4d5b1124]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x567dd990> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer$TaskQueue.park(HsqlTimer.java:883)
- locked <0x567dd990> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer.nextTask(HsqlTimer.java:531)
- locked <0x567dd990> (a org.hsqldb.lib.HsqlTimer$TaskQueue)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(HsqlTimer.java:611)
at java.lang.Thread.run(Thread.java:636)
"HSQLDB Server @1975b59" prio=10 tid=0x094d9c00 nid=0x994 waiting on condition [0x4d616000..0x4d6170a4]
java.lang.Thread.State: RUNNABLE
at org.hsqldb.store.HashIndex.reset(HashIndex.java:85)
at org.hsqldb.store.HashIndex.<init>(HashIndex.java:72)
at org.hsqldb.store.BaseHashMap.<init>(BaseHashMap.java:160)
at org.hsqldb.lib.HashSet.<init>(HashSet.java:50)
at org.hsqldb.lib.OrderedHashSet.<init>(OrderedHashSet.java:49)
at org.hsqldb.SchemaManager.getSQLArray(SchemaManager.java:1702)
at org.hsqldb.Database.getScript(Database.java:624)
at org.hsqldb.scriptio.ScriptWriterBase.writeDDL(ScriptWriterBase.java:258)
at org.hsqldb.scriptio.ScriptWriterBase.writeAll(ScriptWriterBase.java:221)
at org.hsqldb.persist.Log.writeScript(Log.java:761)
at org.hsqldb.persist.Log.close(Log.java:257)
at org.hsqldb.persist.Log.open(Log.java:197)
at org.hsqldb.persist.Logger.openPersistence(Logger.java:242)
at org.hsqldb.Database.reopen(Database.java:201)
at org.hsqldb.Database.open(Database.java:173)
- locked <0x5687b618> (a org.hsqldb.Database)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:225)
- locked <0x5687b618> (a org.hsqldb.Database)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:177)
at org.hsqldb.server.Server.openDatabases(Server.java:1799)
at org.hsqldb.server.Server.run(Server.java:2132)
at org.hsqldb.server.Server.access$000(Server.java:243)
at org.hsqldb.server.Server$ServerThread.run(Server.java:313)
"Low Memory Detector" daemon prio=10 tid=0x094c4400 nid=0x992 runnable [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"CompilerThread1" daemon prio=10 tid=0x094c2800 nid=0x991 waiting on condition [0x00000000..0x4d87f424]
java.lang.Thread.State: RUNNABLE
"CompilerThread0" daemon prio=10 tid=0x094c1400 nid=0x990 waiting on condition [0x00000000..0x4d9003a4]
java.lang.Thread.State: RUNNABLE
"Signal Dispatcher" daemon prio=10 tid=0x094c0000 nid=0x98f runnable [0x00000000..0x00000000]
java.lang.Thread.State: RUNNABLE
"Finalizer" daemon prio=10 tid=0x094a6c00 nid=0x98e in Object.wait() [0x4dadc000..0x4dadcfa4]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x56610290> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:133)
- locked <0x56610290> (a java.lang.ref.ReferenceQueue$Lock)
at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:149)
at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:177)
"Reference Handler" daemon prio=10 tid=0x094a2800 nid=0x98d in Object.wait() [0x4db2d000..0x4db2e124]
java.lang.Thread.State: WAITING (on object monitor)
at java.lang.Object.wait(Native Method)
- waiting on <0x565ee150> (a java.lang.ref.Reference$Lock)
at java.lang.Object.wait(Object.java:502)
at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)
- locked <0x565ee150> (a java.lang.ref.Reference$Lock)
"main" prio=10 tid=0x093f3400 nid=0x987 waiting on condition [0xb7322000..0xb73231e0]
java.lang.Thread.State: TIMED_WAITING (sleeping)
at java.lang.Thread.sleep(Native Method)
at org.hsqldb.server.Server.start(Server.java:1249)
at org.hsqldb.server.Server.main(Server.java:2389)
"VM Thread" prio=10 tid=0x0949f400 nid=0x98c runnable
"GC task thread#0 (ParallelGC)" prio=10 tid=0x093fa400 nid=0x988 runnable
"GC task thread#1 (ParallelGC)" prio=10 tid=0x093fb400 nid=0x989 runnable
"GC task thread#2 (ParallelGC)" prio=10 tid=0x093fc400 nid=0x98a runnable
"GC task thread#3 (ParallelGC)" prio=10 tid=0x093fd800 nid=0x98b runnable
"VM Periodic Task Thread" prio=10 tid=0x094c5c00 nid=0x993 waiting on condition
JNI global references: 664
Heap
PSYoungGen total 162304K, used 3268K [0xa9ae0000, 0xb4180000, 0xb4180000)
eden space 162240K, 2% used [0xa9ae0000,0xa9e0d218,0xb3950000)
from space 64K, 25% used [0xb4160000,0xb4164000,0xb4170000)
to space 64K, 0% used [0xb4170000,0xb4170000,0xb4180000)
PSOldGen total 10368K, used 3546K [0x56580000, 0x56fa0000, 0xa9ae0000)
object space 10368K, 34% used [0x56580000,0x568f6a08,0x56fa0000)
PSPermGen total 16384K, used 6281K [0x4e580000, 0x4f580000, 0x56580000)
object space 16384K, 38% used [0x4e580000,0x4eba2428,0x4f580000)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

945
HyperSQL Database Engine (HSQLDB) / Bugs / #945 .Net Provider Connection Times out
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In System.Data.HSQL.Client assembly, file HSqlConnection.Api.cs, in the following method, the milliseconds is converted from seconds by doing a binary "and" with 1000. Shouldnt that be multiplying by 1000 ? As a result no connection is getting opened because of the low timeout value
public int ConnectionTimeoutMillis
{
get
{
int timeoutSeconds = ConnectionTimeout;
int timeoutMillis = (timeoutSeconds <= 0)
? Threading.Timeout.Infinite
: (1000 & timeoutSeconds);
return timeoutMillis;
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

946
HyperSQL Database Engine (HSQLDB) / Bugs / #946 Database corrupted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Embledded mode, cache table, 1.9 b6. After restart software - 
error in script file line: 36 java.io.IOException: java.lang.IndexOutOfBoundsException in statement [SET TABLE PUBLIC.PAYMENTS INDEX '8085 8085 8337 277 1106 720']
org.hsqldb.Error.error(Error.java:111)
org.hsqldb.scriptio.ScriptReaderText.readDDL(ScriptReaderText.java:132)
org.hsqldb.scriptio.ScriptReaderBase.readAll(ScriptReaderBase.java:88)
org.hsqldb.persist.Log.processScript(Log.java:721)
org.hsqldb.persist.Log.open(Log.java:187)
org.hsqldb.persist.Logger.openPersistence(Logger.java:209)
org.hsqldb.Database.reopen(Database.java:265)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

947
HyperSQL Database Engine (HSQLDB) / Bugs / #947 Procedures - declarations for more than one variable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i tried to implement a procedure which inserts data and also uses the internal keys:
CREATE PROCEDURE insert_flags(IN flag INT, IN name1 VARCHAR(128) , IN name2 VARCHAR(32))
MODIFIES SQL DATA
BEGIN ATOMIC
DECLARE id1 , id2 INTEGER;
SET id1 =SELECT MIN(ID) FROM ids WHERE ids.item=name1; 
SET id2 =SELECT MIN(ID) FROM numbers WHERE numbers.item=name2;
INSERT INTO flagtable VALUES ( id1,id2, flag, name1, name2 )
END
it says the same every time: 
java.sql.SQLException: unexpected token: ID1
at org.hsqldb.jdbc.Util.sqlException(Util.java:200)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1808)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:635)
if i change 
" DECLARE id1 , id2 INTEGER; " 
to
"DECLARE id1 INTEGER; 
DECLARE id2 INTEGER; " 
the application throws no error and hangs himself.
i'm using the current RC6 from HSQLDB 1.9.0 and jdk-1.6.0_14
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

948
HyperSQL Database Engine (HSQLDB) / Bugs / #948 New release should be compiled for Java5, not Java6 only
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The RC6 is compiled for Java6 only (i get an java.lang.UnsupportedClassVersionError: Bad version number in .class file loading the JDBC driver)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

949
HyperSQL Database Engine (HSQLDB) / Bugs / #949 LIKE behavior 1.9.0_RC7 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
LIKE statements aren"t working as expected.
I seem to have the following behavior.
In a LIKE statment the '%' matches on a single character, so the '%' has the same result as an '_'.
Example: ... LIKE '123%' 
will match 1234
will not match 12345
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

950
HyperSQL Database Engine (HSQLDB) / Bugs / #950 Script file error in RC7
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After moving from RC6 to RC7, application runs only once, on second run I got exception "java.sql.SQLException: error in script file line: 8 unexpected end of statement". Statement on line 8 is really incomplete: "SET DATABASE DEFAULT ISOLATION LEVEL ".
Here is the first lines of script file:
----------
SET DATABASE UNIQUE NAME HSQLDB24D2AA9F0B
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL NAMES FALSE
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL 
SET DATABASE DEFAULT TABLE TYPE CACHED
SET FILES WRITE DELAY 10
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 8
SET FILES LOB SCALE 32
...
----------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

951
HyperSQL Database Engine (HSQLDB) / Bugs / #951 Hibernate and use of getColumnName() for column mapping
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have migrated our Hibernate 3.2 application to HSQLDB 2.0 RC7 and certain code started to fail.
Investigation showed that queries where we are inner joining to the same table caused this issue (since column names were duplicated)
The following QUERY
select A.A_CD, Ba.B_CD, Ba.B_VALUE, Bb.B_CD, Bb.B_VALUE 
from A
join B Ba on Ba.A_ID = A.A_ID and Ba.B_CD='B10'
join B Bb on Bb.A_ID = A.A_ID and Bb.B_CD='B11'
where A.A_ID = 1;
would fail if it was through hibernate, since getColumnName for Ba.B_VALUE and Bb.B_VALUE causes hibernate looks up column names for each column. getColumnName(1) -> "B_CD" and getColumnName(3) -> "B_CD". Then when hibernate runs the query, it looks up by "B_CD" and gets the first one both times.
I have been looking at ways to get the JDBC Metadata getColumnName() to return the aliases, and have explored "get_column_name=false" parameter, but this has not worked.
I think this bug issued for mySql actually summarizes the issue better than I can: http://bugs.mysql.com/bug.php?id=35150
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

952
HyperSQL Database Engine (HSQLDB) / Bugs / #952 user-defined nested function call fails RC7
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
setup:
create table dual(dummy int);
CREATE FUNCTION replicate(str char , length int) RETURNS char varying(100) return space(length);
These two work:
select replicate(' ', 10) from dual;
select char_length('asdf' + char_length('asdf')) from dual;
But this doesn't:
select replicate(' ', char_length('asdf')) from dual;
The error message I get back is "user lacks privilege or object not found".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

953
HyperSQL Database Engine (HSQLDB) / Bugs / #953 UnsupportedEncodingException for existing encoding
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In SqlFile class in setEncoding method is this:
if (Charset.isSupported(newEncoding))
throw new UnsupportedEncodingException(newEncoding);
It raise exception on existing encoding.
Related to 2.0.0 RC8 version
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

954
HyperSQL Database Engine (HSQLDB) / Bugs / #954 NPE when passing null to a date argument of a Java SP
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a stored procedure in Java with a java.sql.Date as the type of one of the parameters then when you pass a null to that parameter HSQLDB throws a NPE. This is in 2.0rc8.
The FunctionSQLInvoked class has the following starting at line 111:
if (value == null) {
if (routine.isNullInputOutput()) {
return null;
}
if (!routine.getParameter(i).isNullable()) {
throw Error.error(ErrorCode.X_39004);
}
}
if (routine.isPSM()) {
data[i] = value;
} else {
//*** A null 'value' still gets converted, and the DateTimeType.convertSQLToJava function can't handle nulls
data[i + extraArg] = e.dataType.convertSQLToJava(session, 
value);
You could either make the DateTimeType handle nulls or change line 121 to be:
if (routine.isPSM() || value == null)
This will ensure all parameter values given as null will not be converted - they will be passed to the SP as null.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

955
HyperSQL Database Engine (HSQLDB) / Bugs / #955 hsqldb_2_0_0_rc8: syntax error saving view to .script
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have created the following view
CREATE VIEW PUBLIC.OOMEP1WS_JOIN_TMEMBERHASTASK (TASK,TEAM_MEMBER) AS SELECT T.OBJECT_ID AS TASK,A.TEAM_MEMBER AS TEAM_MEMBER FROM PUBLIC.OOMEP1WS_TASK T INNER JOIN PUBLIC.OOMEP1WS_TEAMMEMBERASSIGNMENT A ON A."P$$PARENT" =T.OBJECT_ID
When I shut down hsqldb the view is stored in the .script file, however with a syntax error. Instead of '... OOMEP1WS_TEAMMEMBERASSIGNMENT A ON A."P$$PARENT" ...' it is written as '... OOMEP1WS_TEAMMEMBERASSIGNMENT AON A."P$$PARENT" ...'. There is a missing blank between 'A' and 'ON'. As a result the db can not be started anymore.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

956
HyperSQL Database Engine (HSQLDB) / Bugs / #956 Deadlock in 2.0.0 RC8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Concurrent transactions frequently cause deadlock. Downgrade to 1.8 fixes the issues
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

957
HyperSQL Database Engine (HSQLDB) / Bugs / #957 Execute default & unrevokable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It appears (in 2.0.0 RC 8) that accounts have execute access to procedures by default, and it cannot be revoked.
Accounts should only be able to call procedures that they have been granted access to.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

958
HyperSQL Database Engine (HSQLDB) / Bugs / #958 Parameter before "IN (SELECT..)" throws NPE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 2.0.0 RC8
When executing a SELECT containing a parameter before a subselect an NPE is thrown.
Example: select p.id from PropertyType p where ? in (select a.elt from aliases a where p.id=a.id)
Exception: java.lang.NullPointerException
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3910)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(JDBCConnection.java:635)
Workaround: Don't use a parameter at this point.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

959
HyperSQL Database Engine (HSQLDB) / Bugs / #959 Wrong select result in hsqldb 1.8.1.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
i created the following table:
CREATE CACHED TABLE A_KLASSEABS (
ERHEBUNGSJAHR_ID NUMERIC not null,
SCHULE_NR NUMERIC not null,
KLASSENBEZ CHAR(20) not null,
KLASSENART_ID NUMERIC not null,
FOLGEKLASSE CHAR(20) null,
UEORS_ID NUMERIC null,
SCHULNR_FIKTIV NUMERIC null,
KLASSENSTUFE_ID NUMERIC null, 
ERRORFLAG CHAR(1) default 'N' null, 
G8GTS CHAR(1) null,
constraint A_KLASSEABS_PK primary key (ERHEBUNGSJAHR_ID, SCHULE_NR, KLASSENBEZ ) ); 
Then insert these rows:
INSERT INTO A_KLASSEABS VALUES(2010,11379,'1 a',2,NULL,NULL,NULL,1,'J',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'1 b',2,NULL,NULL,NULL,1,'J',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'1 c',2,NULL,NULL,NULL,1,'J',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'1 d',2,NULL,NULL,NULL,1,'J',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'2 a',2,NULL,NULL,NULL,2,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'2 b',2,NULL,NULL,NULL,2,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'2 c',2,NULL,NULL,NULL,2,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'2 d',2,NULL,NULL,NULL,2,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'2 e',2,NULL,NULL,NULL,2,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,11379,'3 a',2,NULL,NULL,NULL,3,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'3 b',2,NULL,NULL,NULL,3,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'3 c',2,NULL,NULL,NULL,3,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'3 d',2,NULL,NULL,NULL,3,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'4 a',2,NULL,NULL,NULL,4,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'4 b',2,NULL,NULL,NULL,4,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'4 c',2,NULL,NULL,NULL,4,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,11379,'4 d',2,NULL,NULL,NULL,4,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'101',2,NULL,NULL,NULL,10,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'102',2,NULL,NULL,NULL,10,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'103',2,NULL,NULL,NULL,10,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'104',2,NULL,NULL,NULL,10,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'105',2,NULL,NULL,NULL,10,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'106',2,NULL,NULL,NULL,10,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'107',2,NULL,NULL,NULL,10,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'11',3,NULL,NULL,NULL,11,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'12',3,NULL,NULL,NULL,12,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'13',3,NULL,NULL,NULL,13,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'51',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'52',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'53',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'54',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'55',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'56',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'57',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'58',2,NULL,NULL,NULL,5,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'61',2,NULL,NULL,NULL,6,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'62',2,NULL,NULL,NULL,6,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'63',2,NULL,NULL,NULL,6,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'64',2,NULL,NULL,NULL,6,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'65',2,NULL,NULL,NULL,6,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'66',2,NULL,NULL,NULL,6,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'67',2,NULL,NULL,NULL,6,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'71',2,NULL,NULL,NULL,7,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'72',2,NULL,NULL,NULL,7,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'73',2,NULL,NULL,NULL,7,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'74',2,NULL,NULL,NULL,7,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'75',2,NULL,NULL,NULL,7,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'76',2,NULL,NULL,NULL,7,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'77',2,NULL,NULL,NULL,7,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'81',2,NULL,NULL,NULL,8,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'82',2,NULL,NULL,NULL,8,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'83',2,NULL,NULL,NULL,8,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'84',2,NULL,NULL,NULL,8,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'85',2,NULL,NULL,NULL,8,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'86',2,NULL,NULL,NULL,8,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'87',2,NULL,NULL,NULL,8,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'91',2,NULL,NULL,NULL,9,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'92',2,NULL,NULL,NULL,9,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'93',2,NULL,NULL,NULL,9,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'94',2,NULL,NULL,NULL,9,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'95',2,NULL,NULL,NULL,9,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'96',2,NULL,NULL,NULL,9,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,50510,'97',2,NULL,NULL,NULL,9,'N',NULL)
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05001',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05002',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05003',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05004',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05005',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05006',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05007',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'05008',2,NULL,NULL,NULL,5,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'06001',2,NULL,NULL,NULL,6,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'06002',2,NULL,NULL,NULL,6,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'06003',2,NULL,NULL,NULL,6,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'06004',2,NULL,NULL,NULL,6,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'06005',2,NULL,NULL,NULL,6,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'06006',2,NULL,NULL,NULL,6,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'06007',2,NULL,NULL,NULL,6,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'07001',2,NULL,NULL,NULL,7,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'07002',2,NULL,NULL,NULL,7,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'07003',2,NULL,NULL,NULL,7,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'07004',2,NULL,NULL,NULL,7,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'07005',2,NULL,NULL,NULL,7,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'07006',2,NULL,NULL,NULL,7,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'07007',2,NULL,NULL,NULL,7,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08001',2,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08002',2,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08003',2,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08004',2,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08005',2,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08006',2,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08007',2,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'08008',31,NULL,NULL,NULL,8,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'09001',2,NULL,NULL,NULL,9,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'09002',2,NULL,NULL,NULL,9,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'09003',2,NULL,NULL,NULL,9,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'09004',2,NULL,NULL,NULL,9,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'09005',2,NULL,NULL,NULL,9,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'09006',2,NULL,NULL,NULL,9,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'10001',2,NULL,NULL,NULL,10,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'10002',2,NULL,NULL,NULL,10,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'10003',2,NULL,NULL,NULL,10,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'10004',2,NULL,NULL,NULL,10,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'10005',2,NULL,NULL,NULL,10,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'10007',31,NULL,NULL,NULL,10,'J','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'11000',3,NULL,NULL,NULL,11,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'12000',3,NULL,NULL,NULL,12,'N','N')
INSERT INTO A_KLASSEABS VALUES(2010,51364,'13000',3,NULL,NULL,NULL,13,'N','N')
the following SELECT returns an emtpy result set:
SELECT * from A_KLASSEABS where ERHEBUNGSJAHR_ID = 2010 and SCHULE_NR = 50510 and KLASSENART_ID = 3
That's wrong - but
SELECT * from A_KLASSEABS where ERHEBUNGSJAHR_ID = 2010 and SCHULE_NR = 50510 and KLASSENART_ID in (3)
returns 3 correct rows.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

960
HyperSQL Database Engine (HSQLDB) / Bugs / #960 build.xml target bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In order to build hsqldb and sqltool jars with jdk15, it's necessary to edit the target store in the following way. Instead of:
<target name="store" depends="switchtojdk11,switchtojdk12,switchtojdk14,switchtojdk16"
description="compiles the /store folder">
the depends list must be changed to: depends="switchtojdk11,switchtojdk12,switchtojdk14,switchtojdk15"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

961
HyperSQL Database Engine (HSQLDB) / Bugs / #961 sqltool.jar has dependency on hsqldb.jar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
attempts to use sqltool fail in 2.00 rc8 because org.hsqldb.lib.RefCapableRBInterface is not present in sqltool.jar. Works if put hsqldb.jar on the classpath
but this is not consistent with the documentation
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

962
HyperSQL Database Engine (HSQLDB) / Bugs / #962 Error upon indexing a DateTime field
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Testing with a fairly recent (but not assuredly latest) SVN version, I noticed the following:
1) I have the following table:
CREATE CACHED TABLE move (
id INTEGER IDENTITY PRIMARY KEY,
employee_id INTEGER,
article_id INTEGER,
batch VARCHAR(10),
source_address VARCHAR(15),
dest_address VARCHAR(15),
quantity DECIMAL(10,2),
done DATETIME,
CONSTRAINT fk_move_article FOREIGN KEY (article_id) REFERENCES article (id) ON DELETE CASCADE,
CONSTRAINT fk_move_employee FOREIGN KEY (employee_id) REFERENCES employee (id) ON DELETE CASCADE
);
CREATE INDEX idx_move_employee ON move (employee_id);
CREATE INDEX idx_move_article ON move (article_id);
CREATE INDEX idx_move_batch ON move (batch);
-- FIXME: more indexes?
2) I try to add an index to a DateTime field:
CREATE INDEX idx_move_done ON move (done);
3) The following error occurs:
java.sql.SQLException:
data exception:
string data, right truncation in statement [CREATE INDEX idx_move_done ON move (done)]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

963
HyperSQL Database Engine (HSQLDB) / Bugs / #963 view does not work dep. where it is defined
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have an application which creates several tables and views and then populates the database with some data.
hsqldb-2.0.0-rc8.jar.
I observed that one view did not work after the database had been shutdown and restarted again.
I was able to track the situation down to the following observation:
if the respective view is defined after the create table statements (as is done in the script file), it does not work afterwards.
If it is defined after the tables have been populated, it works.
I think, it should work independently of where it is defined, hence this incident.
I add the sql file with which the problem is reproducable (see the comments in it).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

964
HyperSQL Database Engine (HSQLDB) / Bugs / #964 2.0.0-rc8 - Merge does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the version 2.0.0-rc8 to test the merge insert update but it seems that there is some error being thrown from hsqldb.
I have Oracle Merge in my application code and I wanted to use HSQLDB to be be able to do some good standalone testing.
If this issue has been fixed already for some reason, could you let me know which version i can use?
If it will be fixed, then could you also let know when it will be available for release?
The following is the error:
Exception in thread "HSQLDB Connection @56a499" java.lang.RuntimeException: unsupported internal operation: StatementDMQL
at org.hsqldb.error.Error.runtimeError(Unknown Source)
at org.hsqldb.StatementDMQL.getResultMetaData(Unknown Source)
at org.hsqldb.result.Result.newPrepareResponse(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.server.ServerConnection.receiveResult(Unknown Source)
at org.hsqldb.server.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Thread.java:619)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

965
HyperSQL Database Engine (HSQLDB) / Bugs / #965 tree style data in single table,delete all failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1.8 and 2.0rc same error
Test code :
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
public class Main {
/**
* @param args
* @throws Exception 
*/
public static void main(String[] args) throws Exception {
Class.forName("org.hsqldb.jdbcDriver");
Connection con=DriverManager.getConnection("jdbc:hsqldb:mem:testdb","sa","");
Statement s=con.createStatement();
s.execute("create table department (depid identity primary key,depname varchar(20),parentid int)");
s.execute("ALTER TABLE department ADD FOREIGN KEY (parentid) REFERENCES department(depid)");
s.execute("insert into department (depid,depname) values(1,'dep1')");
s.execute("insert into department values(2,'depchild',1)");
s.execute("delete from department");//---------failure---------
s.close();
con.close();
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

966
HyperSQL Database Engine (HSQLDB) / Bugs / #966 hsqldb does not work on java <6
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Does HSQL really require Java 6, or will it work on Java 5? I suspect it would. In that case can it please be compiled using target Java version 5. Otherwise we can't use it in websphere 6.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

967
HyperSQL Database Engine (HSQLDB) / Bugs / #967 HsqlException: incompatible data type in operation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Error in 2.0.0-rc8 with Hibernate, works fine in 1.8.0.9 and Hibernate.
The SQL statement below fails to compile with the following Exception :
<< other stack entries >>
Caused by: org.hibernate.exception.SQLGrammarException: could not execute native bulk manipulation query
at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:67)
at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)
at org.hibernate.engine.query.NativeSQLQueryPlan.performExecuteUpdate(NativeSQLQueryPlan.java:174)
at org.hibernate.impl.SessionImpl.executeNativeUpdate(SessionImpl.java:1163)
at org.hibernate.impl.SQLQueryImpl.executeUpdate(SQLQueryImpl.java:334)
at com.infor.financials.multibooks.aer.balances.dao.AERHierarchyStructureCacheDAO$5.doInHibernate(AERHierarchyStructureCacheDAO.java:307)
at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:419)
... 25 more
Caused by: java.sql.SQLException: incompatible data type in operation
at org.hsqldb.jdbc.Util.sqlException(Util.java:200)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3870)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(JDBCConnection.java:635)
at org.apache.commons.dbcp.DelegatingConnection.prepareStatement(DelegatingConnection.java:185)
at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.prepareStatement(PoolingDataSource.java:278)
at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:505)
at org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:94)
at org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:87)
at org.hibernate.engine.query.NativeSQLQueryPlan.performExecuteUpdate(NativeSQLQueryPlan.java:157)
... 29 more
Caused by: org.hsqldb.HsqlException: incompatible data type in operation
at org.hsqldb.error.Error.error(Error.java:112)
at org.hsqldb.error.Error.error(Error.java:82)
at org.hsqldb.ExpressionLogical.resolveTypes(ExpressionLogical.java:578)
at org.hsqldb.ExpressionLogical.resolveTypes(ExpressionLogical.java:511)
at org.hsqldb.ExpressionLogical.resolveTypes(ExpressionLogical.java:511)
at org.hsqldb.ExpressionOp.resolveTypes(ExpressionOp.java:310)
at org.hsqldb.ParserDML.resolveUpdateExpressions(ParserDML.java:665)
at org.hsqldb.ParserDML.compileUpdateStatement(ParserDML.java:518)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:149)
at org.hsqldb.ParserCommand.compileStatement(ParserCommand.java:63)
at org.hsqldb.Session.compileStatement(Session.java:839)
at org.hsqldb.StatementManager.compile(StatementManager.java:303)
at org.hsqldb.Session.execute(Session.java:927)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3867)
... 36 more
SQL Statement :
UPDATE AGL_AER_HRY_STRUCTURE_CACHE
SET C_NEW_TARGET_CODE_AE = :newTargetCodeAE,
C_NEW_TARGET_CODE_VALUE = :newTargetCodeValue,
C_RETRY_REQUIRED = CASE WHEN (:newTargetCodeValue IS NOT NULL AND C_TARGET_CODE_VALUE IS NULL) THEN 1 ELSE 0 END
WHERE C_TENANT_ID = :tenantId
AND C_HIERARCHY_KEY = :hierarchyKey
AND C_SOURCE_CODE_LIST_ID = :sourceCodeListId
AND C_SOURCE_CODE_AE = :sourceCodeAccountingEntityId
AND C_SOURCE_CODE_VALUE = :sourceCodeValue
AND C_TARGET_CODE_LIST_ID = :targetCodeListId
The error is caused by the ':newTargetCodeValue IS NOT NULL' part of the CASE WHEN statement. It doesn't matter what value I pass for :newTargetCodeValue, any value or null causes the error.
If I change the SQL Statement to the following (by removing the parameter from the CASE WHEN, it works fine (except the behaviour is now different obviously :)).
UPDATE AGL_AER_HRY_STRUCTURE_CACHE
SET C_NEW_TARGET_CODE_AE = :newTargetCodeAE,
C_NEW_TARGET_CODE_VALUE = :newTargetCodeValue,
C_RETRY_REQUIRED = CASE WHEN (C_TARGET_CODE_VALUE IS NULL) THEN 1 ELSE 0 END
WHERE C_TENANT_ID = :tenantId
AND C_HIERARCHY_KEY = :hierarchyKey
AND C_SOURCE_CODE_LIST_ID = :sourceCodeListId
AND C_SOURCE_CODE_AE = :sourceCodeAccountingEntityId
AND C_SOURCE_CODE_VALUE = :sourceCodeValue
AND C_TARGET_CODE_LIST_ID = :targetCodeListId
So looks like parameters within a 'CASE WHEN' bulk update statement are not working.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

968
HyperSQL Database Engine (HSQLDB) / Bugs / #968 create schema v2.0-rc8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I try to use my hsql script which works fine in v1.8 with the current 2.0-rc8 release
---
CREATE SCHEMA SCHMA AUTHORIZATION DBA;
CREATE SEQUENCE SCHMA.DEFAULT_SEQ AS BIGINT START WITH 1000000;
CREATE USER SCHMA
PASSWORD '9EDC11207BFC5B4A';
CREATE TABLE SCHMA.MESSAGE
(
ID INTEGER NOT NULL,
MSGTEXT VARCHAR(250) NOT NULL
);
ALTER TABLE SCHMA.MESSAGE ADD CONSTRAINT MESSAGE_PK PRIMARY KEY (ID);
---
the error:
java.sql.SQLException: invalid schema name: SCHMA
at org.hsqldb.jdbc.Util.sqlException(Util.java:200)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1805)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:636)
at org.hsqldb.util.DatabaseManager.execute(DatabaseManager.java:820)
at org.hsqldb.util.DatabaseManager.actionPerformed(DatabaseManager.java:530)
at java.awt.Button.processActionEvent(Unknown Source)
at java.awt.Button.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown Source)
at java.awt.EventQueue.dispatchEvent(Unknown Source)
at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown Source)
Caused by: org.hsqldb.HsqlException: invalid schema name: SCHMA
at org.hsqldb.error.Error.error(Error.java:77)
at org.hsqldb.SchemaManager.getSchemaHsqlName(SchemaManager.java:293)
at org.hsqldb.Session.getSchemaHsqlName(Session.java:1800)
at org.hsqldb.ParserDDL.compileAlterTable(ParserDDL.java:765)
at org.hsqldb.ParserDDL.compileAlter(ParserDDL.java:280)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:208)
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:88)
at org.hsqldb.Session.executeDirectStatement(Session.java:1102)
at org.hsqldb.Session.execute(Session.java:908)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1797)
... 14 more
SQLState(3F000) vendor code(-4850)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

969
HyperSQL Database Engine (HSQLDB) / Bugs / #969 NullPointerException getting column for sub-query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB Version : Latest develpment build dates 19th Feb. 2010.
The SQL statement below (generated by Hibernate) results in a NullPointerException :
... 27 more
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 48 more
Caused by: java.lang.NullPointerException
at org.hsqldb.QueryExpression.getColumns(Unknown Source)
at org.hsqldb.TableUtil.setTableColumnsForSubquery(Unknown Source)
at org.hsqldb.SubQuery.prepareTable(Unknown Source)
at org.hsqldb.ParserDQL$CompileContext.getSubqueries(Unknown Source)
at org.hsqldb.StatementDMQL.setDatabseObjects(Unknown Source)
at org.hsqldb.StatementQuery.<init>(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
... 49 more
select this_.C_PERSIST_ID as C1_2060_10_, this_.C_PERSIST_VERSION as C2_2060_10_,
this_.C_TENANT_ID as C3_2060_10_, this_.C_ACCOUNTING_ENTITY as C4_2060_10_,
this_.C_LAST_BATCH_NUMBER as C5_2060_10_, this_.C_BOOK_KEY as C6_2060_10_,
this_. << other columns selected here >>
rollup1_.C_PERSIST_ID as C1_2057_0_, rollup1_.C_TENANT_ID as C2_2057_0_,
rollup1_.C_ACCOUNTING_ENTITY as C3_2057_0_, rollup1_.C_ACC_CODE as C4_2057_0_,
rollup1_.C_IS_BALANCE as C5_2057_0_, rollup1_.C_ORIG_CURRENCY as C6_2057_0_,
rollup1_.C_SRC_CURRENCY as C7_2057_0_, rollup1_.C_JRNL_TYPE_KEY as C8_2057_0_,
rollup1_.C_BOOK_KEY as C9_2057_0_, rollup1_.C_BOOK_DEF_ENTRY_KEY as C10_2057_0_,
rollup1_.C_REVAL_CODE as C11_2057_0_, rollup1_.C_MAJOR_KEY as C12_2057_0_,
rollup1_.C_SKPART1 as C13_2057_0_, rollup1_.C_SKPART2 as C14_2057_0_,
rollup1_.C_SKPART3 as C15_2057_0_, rollup1_.C_SKPART4 as C16_2057_0_,
rollup1_.C_SKPART5 as C17_2057_0_, rollup1_.C_SKPART6 as C18_2057_0_,
rollup1_.C_SKPART7 as C19_2057_0_, rollup1_.C_SKPART8 as C20_2057_0_,
searchkeyp4_.C_PERSIST_ID as C1_2059_1_, searchkeyp4_.C_KEYPART as C2_2059_1_,
searchkeyp4_.C_HASH as C3_2059_1_, searchkeyp5_.C_PERSIST_ID as C1_2059_2_,
searchkeyp5_.C_KEYPART as C2_2059_2_, searchkeyp5_.C_HASH as C3_2059_2_,
searchkeyp6_.C_PERSIST_ID as C1_2059_3_, searchkeyp6_.C_KEYPART as C2_2059_3_,
searchkeyp6_.C_HASH as C3_2059_3_, searchkeyp7_.C_PERSIST_ID as C1_2059_4_,
searchkeyp7_.C_KEYPART as C2_2059_4_, searchkeyp7_.C_HASH as C3_2059_4_,
searchkeyp8_.C_PERSIST_ID as C1_2059_5_, searchkeyp8_.C_KEYPART as C2_2059_5_,
searchkeyp8_.C_HASH as C3_2059_5_, searchkeyp9_.C_PERSIST_ID as C1_2059_6_,
searchkeyp9_.C_KEYPART as C2_2059_6_, searchkeyp9_.C_HASH as C3_2059_6_,
searchkeyp10_.C_PERSIST_ID as C1_2059_7_, searchkeyp10_.C_KEYPART as C2_2059_7_,
searchkeyp10_.C_HASH as C3_2059_7_, searchkeyp11_.C_PERSIST_ID as C1_2059_8_,
searchkeyp11_.C_KEYPART as C2_2059_8_, searchkeyp11_.C_HASH as C3_2059_8_,
searchkeyp12_.C_PERSIST_ID as C1_2059_9_, searchkeyp12_.C_KEYPART as C2_2059_9_,
searchkeyp12_.C_HASH as C3_2059_9_
from AGL_DAILY_MOVEMENT this_
inner join AGL_ROLLUP rollup1_ on this_.C_FKROLLUP=rollup1_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp4_ on rollup1_.C_MAJOR_KEY=searchkeyp4_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp5_ on rollup1_.C_SKPART1=searchkeyp5_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp6_ on rollup1_.C_SKPART2=searchkeyp6_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp7_ on rollup1_.C_SKPART3=searchkeyp7_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp8_ on rollup1_.C_SKPART4=searchkeyp8_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp9_ on rollup1_.C_SKPART5=searchkeyp9_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp10_ on rollup1_.C_SKPART6=searchkeyp10_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp11_ on rollup1_.C_SKPART7=searchkeyp11_.C_PERSIST_ID
left outer join AGL_SEARCH_KEY_PARTS searchkeyp12_ on rollup1_.C_SKPART8=searchkeyp12_.C_PERSIST_ID
where (this_.C_TENANT_ID=? and this_.C_ACCOUNTING_ENTITY=?
and (exists (select * from AGL_ROLLUP rollup
inner join AGL_ROLLUP_DIMENSION dim on rollup.C_PERSIST_ID = dim.C_ROLLUP_ID
where rollup.C_PERSIST_ID = this_.C_FKROLLUP and dim.C_NAME = ? and dim.C_VALUE like 'code1'))
and lower(rollup1_.C_ACC_CODE) like ?)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

970
HyperSQL Database Engine (HSQLDB) / Bugs / #970 HsqlException : incompatible data types in combination
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Found in latest development build of 2.0.0-rc8 (dated Feb. 19th).
Getting an "HsqlException : incompatible data types in combination" when attempting to run a bulk INSERT statement. The statement runs without issue on version 1.8.0.9 of HSQLDB and also other RDBMSes.
Script for table creation and failing INSERT statement are attached. The scripts are SQL Server scripts as I do not have HSQLDB equivalents (Hibernate creates the tables automatically when using HSQLDB).
Stack Trace :
<< other non-interesting stack entries >>
... 40 more
Caused by: java.sql.SQLException: incompatible data types in combination
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at org.apache.commons.dbcp.DelegatingConnection.prepareStatement(DelegatingConnection.java:185)
at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.prepareStatement(PoolingDataSource.java:278)
at org.hibernate.jdbc.AbstractBatcher.getPreparedStatement(AbstractBatcher.java:505)
at org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:94)
at org.hibernate.jdbc.AbstractBatcher.prepareStatement(AbstractBatcher.java:87)
at org.hibernate.engine.query.NativeSQLQueryPlan.performExecuteUpdate(NativeSQLQueryPlan.java:157)
... 44 more
Caused by: org.hsqldb.HsqlException: incompatible data types in combination
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.types.NumberType.getAggregateType(Unknown Source)
at org.hsqldb.types.Type.getAggregateType(Unknown Source)
at org.hsqldb.QuerySpecification.resolveTypesPartOne(Unknown Source)
at org.hsqldb.QuerySpecification.resolveTypes(Unknown Source)
at org.hsqldb.QueryExpression.resolve(Unknown Source)
at org.hsqldb.ParserDML.compileInsertStatement(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 52 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

971
HyperSQL Database Engine (HSQLDB) / Bugs / #971 Incorrect calc when using an Alias in a group by expression
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using a column alias which matches the name of the original column in a GROUP BY clause. The GROUP BY clause appears to pass the value calculated in the SELECT statement back into the function in the GROUP BY clause which can result in duplicate rows for example:
CREATE TABLE group_by_bug
( order_id INTEGER NOT NULL
, item_id INTEGER NOT NULL
, price FLOAT NOT NULL
, tax_rate FLOAT NOT NULL
, quantity INTEGER NOT NULL );
INSERT INTO group_by_bug ( order_id, item_id, price, tax_rate, quantity ) VALUES ( 1000, 100, 10, 10, 5 );
INSERT INTO group_by_bug ( order_id, item_id, price, tax_rate, quantity ) VALUES ( 1001, 100, 10.45, 15, 3 );
SELECT item_id, ROUND(price / (1+(tax_rate/100)),2) AS price_net, SUM(quantity) AS quantity
FROM group_by_bug
GROUP BY item_id, ROUND(price / (1+(tax_rate/100)),2)



ITEM_ID




100


---------+-----------+----------


This is the expected (correct) result!



Re-run the query using the column alias "price"
SELECT item_id, ROUND(price / (1+(tax_rate/100)),2) AS price, SUM(quantity) AS quantity
FROM group_by_bug
GROUP BY item_id, ROUND(price / (1+(tax_rate/100)),2)



ITEM_ID




100


100


---------+-----------+----------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

972
HyperSQL Database Engine (HSQLDB) / Bugs / #972 DatabaseManager.removeDatabase must be synchronized
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DatabaseManager.removeDatabase method changes fields like memDatabaseMap and databaseIDMap w/o proper synchronization. Other methods that change the fields (e.g. addDatabaseObject) are synchronized.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

973
HyperSQL Database Engine (HSQLDB) / Bugs / #973 getUpdateCount should return -1 on second call
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In RC 8, the following will cause an infinite loop:
-------------------
Class.forName(org.hsqldb.jdbcDriver.class.getName());
Connection con = DriverManager.getConnection("jdbc:hsqldb:mem:test-database");
PreparedStatement ps = con.prepareStatement(
"CREATE TABLE TestTable ( field1 int )",
ResultSet.TYPE_SCROLL_SENSITIVE,
ResultSet.CONCUR_READ_ONLY);
//execute the SQL statement
boolean hasResultSet = ps.execute();
//we want to go until there is no result set and there are no more
//results. hasResultSet will get set at the end of each cycle,
//and when there are no more results, it will be false and the
//update count will be -1.
//see the JavaDocs for getMoreResults() for more detail.
while (!(hasResultSet && ps.getUpdateCount() == -1)){
if (hasResultSet){
System.out.println("Has result set");
ResultSet rs = ps.getResultSet();
} else {
System.out.println("Does not have a result set, update count: " + ps.getUpdateCount()); 
}
//close the current result set and move on to the next result, if any
hasResultSet = ps.getMoreResults(Statement.CLOSE_CURRENT_RESULT);
}
--------------------
ps.getUpdateCount() should be returning -1, but is always returning 0. This appears to happen for INSERTs as well
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

974
HyperSQL Database Engine (HSQLDB) / Bugs / #974 outer join result null or 0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
on making an outer join to a table with "not null" columns you get in the query result a REALLY ZERO in case of an integer instead of NULL
"not null" date columns are returned with the value '03.01.0001' instead of NULL
"null" columns are returned correctly with null
SELECT t1.n, t2.n, t2.d FROM t1 LEFT OUTER JOIN t2 ON t1.n = t2.n 
t1 has one record with value 1
t2 is empty
results in case of all columns in the table t2 definition are null allowed
1, null, null
results in case of all columns in the table t2 definition are not null allowed
1,1,03.01.0001
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

975
HyperSQL Database Engine (HSQLDB) / Bugs / #975 Differences in date after conversion from 1.8 to 2.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tested OOo with hsqldb 2.0 latest (and earlier) snapshot version 2010.02.21, and found a bug with it, I tried to test it with standalone hsqldb server.
I'm not java developer only tested with scripts.
I used test database for conversion testing and found, that not all date, time and timstamp values converted vell, in date I get minus 1 day, in time minus one hour, in timestamp, somtimes both changed sometimes only date, another times correct conversions.
I used for testing standalone hsqldb servers, too. I created a table with test data in 1.8.0.10, stopped server. copied all files (test.script etc,) from 1.8 data folder to 2.0 data folder. Sstarted 2.0 server, the conversion went through without error message.
I saved scripts to file system, I attach both version scripts, 1.8 with original data, and 2.0 with erroneous one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

976
HyperSQL Database Engine (HSQLDB) / Bugs / #976 \'getBinaryStream\' returns null over BLOB type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tested with hsqldb-2.0.0-rc8.
Executing \'ResultSet.getBinaryStream()\' over a BLOB field returns null, even if the variable has been stored correctly. 
The code works fine for BINARY fields.
Sample code attached.
The code creates a new table (either BLOB or BINARY type), stores a file (RampartSample01), and tries to read it from the DB and store the content to a new file.
Using BLOB throws NullPointerException.
Using BINARY works properly.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

977
HyperSQL Database Engine (HSQLDB) / Bugs / #977 More complex SQL scripts stopped working in with 2.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After migrating from 1.8 to 2.0rc8 my sql scripts stopped working. Apparently with 2.0 its no longer possible to create an object and refer to the new object in a later statement within the same script. 
Please see attached unit test for details.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

978
HyperSQL Database Engine (HSQLDB) / Bugs / #978 Row not found when it does exists.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have many cases where existing rows are not found by SELECT statements when they do match.
I have narrowed down the problem and have created a simple example that creates 2 tables T1 and T2. T1 has a foreign key to T2. There is one row in each table.
Executing a select from T1 joined to T2 does not return the existing row using the WHERE clause defined in the example.
In the example, I am using a parameterised query to obtain the data. 2 parameters are on T1 (alias 'a'), and a third parameter on T2 (alias 'b'). The query in the example fails. However, if I remove *either* of the WHERE clause clauses for T1, the query works! It's only when both clauses from T1 are used that the query fails. The query also works if you remove the clause for T2 but include both clauses for T1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

979
HyperSQL Database Engine (HSQLDB) / Bugs / #979 Row not found when it does exists.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have many cases where existing rows are not found by SELECT statements when they do match.
I have narrowed down the problem and have created a simple example that creates 2 tables T1 and T2. T1 has a foreign key to T2. There is one row in each table.
Executing a select from T1 joined to T2 does not return the existing row using the WHERE clause defined in the example.
In the example, I am using a parameterised query to obtain the data. 2 parameters are on T1 (alias 'a'), and a third parameter on T2 (alias 'b'). The query in the example fails. However, if I remove *either* of the WHERE clause clauses for T1, the query works! It's only when both clauses from T1 are used that the query fails. The query also works if you remove the clause for T2 but include both clauses for T1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

980
HyperSQL Database Engine (HSQLDB) / Bugs / #980 NullPointerException in BitType.compare().
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BitType.compare() throws a NullPointerException if both values (a and b) are null.
Fixed version:
public int compare(Session session, Object a, Object b) {
int i = super.compare(session, a, b);
if (i == 0) {
// super.compare() returns 0 if both values are null.
if (a == null) {
return 0;
}
if (((BinaryData) a).bitLength(null)
== ((BinaryData) b).bitLength(null)) {
return 0;
}
return ((BinaryData) a).bitLength(null)
> ((BinaryData) b).bitLength(null) ? 1
: -1;
}
return i;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

981
HyperSQL Database Engine (HSQLDB) / Bugs / #981 PreparedStatement TYPE_SCROLL_INSENSITIVE is broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TYPE_SCROLL_INSENSITIVE queries are not supported for PreparedStatements in 2.0rc8
It looks like the Result.rsProperties isn't getting propagated correctly somewhere along the way.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

982
HyperSQL Database Engine (HSQLDB) / Bugs / #982 NPE on RC8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get this while trying to compile my schema using sqltool:
Exception in thread "main" java.lang.NullPointerException
at org.hsqldb.QuerySpecification.setUpdatability(QuerySpecification.java:1705)
at org.hsqldb.QuerySpecification.resolveTypesPartTwo(QuerySpecification.java:761)
at org.hsqldb.QuerySpecification.resolveTypes(QuerySpecification.java:712)
at org.hsqldb.QueryExpression.resolve(QueryExpression.java:173)
at org.hsqldb.ParserDDL.compileCreateView(ParserDDL.java:1697)
at org.hsqldb.ParserDDL.compileCreate(ParserDDL.java:175)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:204)
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:88)
at org.hsqldb.Session.executeDirectStatement(Session.java:1102)
at org.hsqldb.Session.execute(Session.java:908)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1797)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:636)
at org.hsqldb.cmdline.SqlFile.processSQL(SqlFile.java:3076)
at org.hsqldb.cmdline.SqlFile.scanpass(SqlFile.java:833)
at org.hsqldb.cmdline.SqlFile.execute(SqlFile.java:660)
at org.hsqldb.cmdline.SqlTool.objectMain(SqlTool.java:667)
at org.hsqldb.cmdline.SqlTool.main(SqlTool.java:252)
It is caused by the following view definition in the attached schema:
CREATE VIEW CURRENT_USER_UNORDERED_LIST_STYLE AS
SELECT USER_ID, NUMBER, 'p.unordered_list'||NUMBER||'{ clear:left; margin-left:'||MARGIN_LEFT1||'; text-indent:'||TEXT_INDENT||';} p.unordered_list'||NUMBER||':before{ content:url("image:bullet.gif"); float:left; margin-left:'||MARGIN_LEFT2||';}' AS TEXT FROM CURRENT_USER_UNORDERED_LIST;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

983
HyperSQL Database Engine (HSQLDB) / Bugs / #983 OOM Truncating a cached table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I created one simple cached table:
CREATE CACHED TABLE TABLE1 (A BIGINT PRIMARY KEY,B INTEGER,C BOOLEAN,D BOOLEAN,E INTEGER,F TINYINT,G INTEGER)
and filled if with 5 million rows.
When i preform a DELETE FROM TABLE1 a java.lang.OutOfMemoryError: Java heap space occurs. I'm expecting this as a rollback segment must be used. But the sames occurs when trying to truncate: TRUNCATE TABLE TABLE1.
This I wasn't expecting as no rollback segment is used. Is this a bug, or am I assuming something wrong?
A work around is to drop-create the table. Is this advisable?
Thanks in advance.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

984
HyperSQL Database Engine (HSQLDB) / Bugs / #984 NullPointerException at updateRow()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm calling updateRow() on a "SELECT * from singleTable" ResultSet. The singleTable has a private key two other tables depend on (FOREIGN KEY constraints with ON DELETE CASCADE). 
When I call updateRow() (after updating some insignificant fields, not the private key), I get the following stack trace:
java.sql.SQLException: java.lang.NullPointerException null
at org.hsqldb.jdbc.Util.sqlException(Util.java:200)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4505)
at org.hsqldb.jdbc.JDBCResultSet.performUpdate(JDBCResultSet.java:7236)
at org.hsqldb.jdbc.JDBCResultSet.updateRow(JDBCResultSet.java:4043)
after removing the FOREIGN KEY constraints - all works fine.
I'm using 2.0.0 rc8, jdk1.6.0_11.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

985
HyperSQL Database Engine (HSQLDB) / Bugs / #985 Incorrect query result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I wish I could find a more concise way of reproducing this bug but here goes:
Please run the attached schema.
Then please run the attached test data script.
The following query incorrectly returns one row:
SELECT TEMPLATE_GROUP_ID, TEMPLATE_ID FROM CLAUSE WHERE (TEMPLATE_GROUP_ID='all' OR TEMPLATE_GROUP_ID='decision') AND (TEMPLATE_ID='all' OR TEMPLATE_ID='technical');
result:
TEMPLATE_GROUP_ID TEMPLATE_ID
----------------- -----------
test all
To make it even more clear that this result is incorrect, we can change the query to the following:
SELECT TEMPLATE_GROUP_ID, TEMPLATE_ID, (TEMPLATE_GROUP_ID='all' OR TEMPLATE_GROUP_ID='decision') AS CLAUSE1,(TEMPLATE_ID='all' OR TEMPLATE_ID='technical') AS CLAUSE2 FROM CLAUSE WHERE (TEMPLATE_GROUP_ID='all' OR TEMPLATE_GROUP_ID='decision') AND (TEMPLATE_ID='all' OR TEMPLATE_ID='technical');
here, the 'clause1' and 'clause2' columns are exactly the same as the two parts of the 'where' clause which are ANDed together:
TEMPLATE_GROUP_ID TEMPLATE_ID CLAUSE1 CLAUSE2
----------------- ----------- ------- -------
test all FALSE TRUE
So effectively FALSE and TRUE is evaluating to TRUE...
I've been staring at this all afternoon to see if there's something I'm doing wrong, but I can't find anything.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

986
HyperSQL Database Engine (HSQLDB) / Bugs / #986 Exception in RC9
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When testing RC9, a query which worked in RC8 is giving a runtime exception in RC9
Please see my schema attached
SELECT R2.NODE_ID FROM RADIO_GROUP_ITEM R1 JOIN RADIO_GROUP_ITEM R2 ON R1.RADIO_GROUP_ID=R2.RADIO_GROUP_ID AND R1.TEMPLATE_GROUP_ID=R2.TEMPLATE_GROUP_ID AND R1.NODE_ID!=R2.NODE_ID WHERE TEMPLATE_GROUP_ID=? AND R1.NODE_ID=?
Gives the following exception
org.hsqldb.HsqlException: duplicate column name in derived table
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.ExpressionColumn.resolveColumnReferences(Unknown Source)
at org.hsqldb.Expression.resolveColumnReferences(Unknown Source)
at org.hsqldb.Expression.resolveColumnReferences(Unknown Source)
at org.hsqldb.QuerySpecification.resolveColumnReferencesAndAllocate(Unknown Source)
at org.hsqldb.QuerySpecification.resolveColumnReferences(Unknown Source)
at org.hsqldb.QuerySpecification.resolveReferences(Unknown Source)
at org.hsqldb.QueryExpression.resolve(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

987
HyperSQL Database Engine (HSQLDB) / Bugs / #987 Table alias doesn't work is ResultSet.getString()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have the following query:
SELECT branch_id FROM user_targets AS ut;
When trying to access the column value with table alias I get Column not found SQL exception.
rs.getString("ut.branch_id") This doesn't work
rs.getString("user_targets.branch_id") Works
rs.getString("branch_id") Works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

988
HyperSQL Database Engine (HSQLDB) / Bugs / #988 Memory issues with HSQL DB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using HSQL db as an in memory engine for our data processing. We do fire large set of sql insert and select statements during data processing. Once the processing is complete, we are deleting the rows inserted initially. These operations are done using JDBC connection. Once the deletion is completed, we see that the inserted rows are actually deleted from database successfully. But the additional memory taken by HSQL db at the time of insertion of rows is found not to be released even after deletion. This is creating problem for us as the used memory of the product keeps on increasing over a period of continuous usage. We need to know if there is some way to address this issue or if this is a bug with HSQL db, we would like to get a solution to this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

989
HyperSQL Database Engine (HSQLDB) / Bugs / #989 Testdb example not working in RC 9
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The testdb sample does not work any longer - throws "resource not found" exception in class Thread
(when run in debugger, tested in Eclipse and IntelliJ)
xception in thread "main" java.lang.ExceptionInInitializerError
at org.hsqldb.Database.reopen(Database.java:218)
at org.hsqldb.Database.open(Database.java:167)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:225)
at org.hsqldb.DatabaseManager.newSession(DatabaseManager.java:148)
at org.hsqldb.jdbc.JDBCConnection.<init>(JDBCConnection.java:3235)
at org.hsqldb.jdbc.JDBCDriver.getConnection(JDBCDriver.java:285)
at org.hsqldb.jdbc.JDBCDriver.connect(JDBCDriver.java:245)
at java.sql.DriverManager.getConnection(DriverManager.java:582)
at java.sql.DriverManager.getConnection(DriverManager.java:185)
at org.hsqldb.sample.Testdb.<init>(Testdb.java:68)
at org.hsqldb.sample.Testdb.main(Testdb.java:156)
Caused by: java.util.MissingResourceException: Can't find bundle for base name org/hsqldb/resources/sql-state-messages, locale de_DE
at java.util.ResourceBundle.throwMissingResourceException(ResourceBundle.java:1521)
at java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1260)
at java.util.ResourceBundle.getBundle(ResourceBundle.java:787)
at org.hsqldb.resources.BundleHandler.getBundle(BundleHandler.java:232)
at org.hsqldb.resources.BundleHandler.getBundleHandle(BundleHandler.java:139)
at org.hsqldb.error.Error.<clinit>(Error.java:55)
... 11 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

990
HyperSQL Database Engine (HSQLDB) / Bugs / #990 data exception: string data, right truncation in select stat
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the query "select a.ordine, a.dtins, a.dtvar, a.cliente as codcli, a.rifcli as riferimento, b.codacq, c.nominativo as nomacq, d.ragsoc as nomcli, a.progetto, a.dtcons, a.dtclos, a.dtrels, a.catalogo, a.lricata, b.userins, b.flagimport, count(e.codcri) as errors from qgchf00 a left join qgcjp00 b on a.societa=b.societa and a.ordine=b.ordine left join anagrafica c on b.codacq=c.codice left join qgcid00 d on a.cliente=d.cliente and d.societa='1' left join qgcdr00 e on e.ordine=a.ordine and e.CODCRI='EROOK' and e.numriga!='000'where 1=1 group by a.ordine, a.dtins, a.dtvar, a.cliente, a.rifcli , b.codacq, c.nominativo, d.ragsoc, a.progetto, a.dtcons, a.dtclos, a.dtrels, a.catalogo, a.lricata, b.userins, b.flagimport"
works perfectly with version 1.8, but gives "java.sql.SQLException: data exception: string data, right truncation" at the first "rs.next()" on the resultset with version 2.0 RC9. The db is too big to upload
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

991
HyperSQL Database Engine (HSQLDB) / Bugs / #991 WRITE DELAY needs underscore
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My env. : "JDK 1.6 , windows, hibernate 3.5.0 CR2, Netbeans latest version, HSQLDB 2.0 RC9"
I lost many hours testing and looking the source code of HSQLDB and finally found the bug.
In the documentation "guide.pdf", table 12.3, the property hsqldb.write_delay informs that we have to change/set the property "WRITE DELAY", but it needs an underscore to work correctly, i.e. "WRITE_DELAY".
After that there is a mention about "SET FILES WRITE DELAY". I think it is also wrong . It should be "SET WRITE_DELAY". 
Furthermore other properties had worked as part of my URL connection, but "hsqldb.write_delay" NOT. I think it is a bug related to the Engine 2.0. Part of my URL is 
String conurl = "jdbc:hsqldb:file:" + path + "/" + cfg.getSchema() + 
";check_params=true;hsqldb.default_table_type=cached;hsqldb.log_size=10;"
+ "hsqldb.write_delay=2;shutdown=true";
But the database.script shows always the default value "SET FILES WRITE DELAY 500 MILLIS" instead of "SET FILES WRITE DELAY 2" when I create the db in the first time. 
It works only when I explicitly execute the statement below.
log.debug("write delay executed? : " + conn.prepareStatement("SET WRITE_DELAY " + writeDelay + " MILLIS").execute());
check_params does not seem to work also. I changed "hsqldb.write_delay" in the previous URL to "hsqldb.write_delaz" but no error is returned. In the documentation informs : 
"If the property is true, every database property that is specified on the URL or in connection properties is checked
and if it is not used correctly, an error is returned"
Well, thanks to hear me!
Best regards,
Jocafi
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

992
HyperSQL Database Engine (HSQLDB) / Bugs / #992 getColumnClassName returns "Integer" for bigint field  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was using apache common beanutils RowSetDynaClass to process the result set. It throws an exception about not being able to convert Long to Integer. 
BeanUtils creates properties based on the types returned from ResultSetMetaData.getColumnClassName(). It returns "java.lang.Integer" for bigint fields. Later when BeanUtils tries to populate the property value, it calls ResultSet.getObject(columnName) which returns an object of java.lang.Long. Therefore, BeanUtils throws out the abovementioned exception.
From the documentation, my understanding is bigint is mapped as java.lang.Long in HSSQLDB. Isn't the returned column data's type be the same as what is returned from the ResultSetMetaData.getColumnClassName()?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

993
HyperSQL Database Engine (HSQLDB) / Bugs / #993 order by on aggregate no longer works with latest snapshot
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I downloaded the latest snapshot (April 9, java 1.5 version), in this snapshot the order by on count-aggregate throws Error: invalid ORDER BY expression
Sample sql:
create table test1 (a integer not null, b varchar(50) default null, primary key (a))
create table test2 (test2 integer not null, a integer not null, c varchar(50) default null, primary key (test2))
select test1.b from test1 left outer join test2 on test1.a=test2.a group by test1.b order by count(test2.c)
This worked with hsql1.8 and with earlier snapshots of hsql 2.0
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

994
HyperSQL Database Engine (HSQLDB) / Bugs / #994 name of the constraint is different between CREATE and ALTER
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use Apache DDLutils to manage HSQL database and we have a problem with the name of the constraints.
The result of name of the constraint is different between CREATE UNIQUE INDEX CONSTRAINT_NAME ON TABLE_NAME (COLUMN_NAME ASC) and ALTER TABLE TABLE_NAME ADD CONSTRAINT CONSTRAINT_NAME UNIQUE (COLUMN_NAME). In the first case, the constraint name is CONSTRAINT_NAME and in the second case the constraint name is SYS_IDX_CONSTRAINT_NAME_989.
thanks for your response and sorry for my vocabulary
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

995
HyperSQL Database Engine (HSQLDB) / Bugs / #995 ArrayIndexOutOfBoundsException: 2 2 while creating function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to create function:
create function get_person(int) returns table 
( 
id int, 
shortname varchar(255),
...
)
reads sql data 
language java parameter style java 
external name 'CLASSPATH:StoredProcedures.getPerson'
I have 3 overloaded methods in StoredProcedures class:
public static ResultSet getPerson(Connection connection, String name, String postalCode, String city) throws SQLException {
Statement st = connection.createStatement();
return st.executeQuery("select * from persons where name like '" + name + "' and postal_code='" + postalCode + "' and city like '" + city + "'");
}
public static ResultSet getPerson(Connection connection, String name, String id_no) throws SQLException {
Statement st = connection.createStatement();
return st.executeQuery("select * from persons where name like '" + name + "' and id_no='" + id_no + "'");
}
public static ResultSet getPerson(Connection connection, int id) throws SQLException {
Statement st = connection.createStatement();
return st.executeQuery("select * from persons where id=" + id);
}
Functions with varchar parameters works well. The one with int parameter does not. I'm getting java.lang.ArrayIndexOutOfBoundsException: 2 2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

996
HyperSQL Database Engine (HSQLDB) / Bugs / #996 Dropped function is still dependent object.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In RC9, When I drop a function F that reads from a view V, and then drop V, it tells me that it cannot drop V because of dependent object F, even though F has already been dropped.
Eg...
CREATE VIEW TEST_VIEW AS SELECT COUNT(*) AS TEST_COLUMN FROM INFORMATION_SCHEMA.SYSTEM_TABLES;
CREATE FUNCTION TEST_FUNCTION() RETURNS INTEGER
READS SQL DATA
BEGIN ATOMIC
DECLARE RESULT INTEGER;
SELECT TEST_COLUMN INTO RESULT FROM TEST_VIEW;
RETURN RESULT;
END
DROP FUNCTION TEST_FUNCTION;
DROP VIEW TEST_VIEW;
This gives me... 
dependent objects exist: PUBLIC.TEST_FUNCTION_10799 in statement [DROP VIEW TEST_VIEW]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

997
HyperSQL Database Engine (HSQLDB) / Bugs / #997 NPE on RC9 and latest snapshot
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please run my schema below.
Then enter the following test data:
insert into custom_style values('sa', 'test', '3cm', '-1cm', '', '', 'bold', '', '', 'courier','16pt');
Then do
select * from ranked_custom_style_text;
On RC9 and the latest snapshot I get...
java.lang.NullPointerException null
The query which makes up this view, however, when run on its own, works...
SELECT USER_ID, NAME, TEXT,
(SELECT COUNT(*) FROM CUSTOM_STYLE_TEXT CST2 WHERE CST2.USER_ID=CST1.USER_ID AND CST2.NAME<=CST1.NAME) AS RANK
FROM CUSTOM_STYLE_TEXT CST1;
But when it is part of a view, it doesn't.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

998
HyperSQL Database Engine (HSQLDB) / Bugs / #998 Query returns inconsistent results.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I adapted my schema to work around issue 2987677 that I raised a couple of days ago.
Now I get another issue (which could be a manifestation of the same issue)...
Run my schema on the latest snapshot and insert the following test data:
insert into custom_style values('SA', 'test', '3cm', '-1cm', '', '', 'bold', '', '', 'courier','16pt');
Then try the following query:
select * from user_custom_stylesheet;
This returns 0 rows, which is incorrect.
Then run:
select get_custom_stylesheet(user_name) from information_schema.system_users;
This returns >0 rows, which is correct.
Then try that first query again...
select * from user_custom_stylesheet;
This time it returns >0 rows, which is correct.
So the same query has returned different results even though the intermediate query does not update any data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

999
HyperSQL Database Engine (HSQLDB) / Bugs / #999 order by null desc
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"order by desc" does not work correctly for null values.
Try:
create table Zack ( name varchar(80), num integer)
insert into Zack values ('A', 1)
insert into Zack values ('B', 2)
insert into Zack values ('C', null)
Then
select * from Zack order by num
returns
C null
A 1
B 2
which is correct.
But
select * from Zack order by num desc
returns
C null
B 2
A 1
which is not correct. It should return
B 2
A 1
C null
as it did with 1.8.0.8.
BTW, the new behaviour would be ok,
if DatabaseMetaData.nullsAreSortedAtStart would return true,
but nullsAreSortedLow returns true, bout in 1.8.0.8 and 2.0.0 rc9
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1000
HyperSQL Database Engine (HSQLDB) / Bugs / #1000 2.0.0-rc9 MERGE bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Under 2.0.0.-rc9, attempting to INSERT a 1-column row INTO a 2-column table via MERGE INTO ... WHEN NOT MATCHED fails. The attached script produces the following error with to my eyes a valid MERGE construction:
[pilcrow@linux-2.6]$ $ /usr/java/jre1.6.0_17/bin/java -jar hsqldb/lib/sqltool.jar mem merge.sql
SEVERE SQL Error at 'merge.sql' line 30:
"MERGE INTO tbl
USING (SELECT 'foo' AS x FROM dual) d
ON (tbl.vc = d.x)
WHEN NOT MATCHED THEN
INSERT (vc) VALUES (x)"
row column count mismatch
SEVERE Rolling back SQL transaction.
org.hsqldb.cmdline.SqlTool$SqlToolException
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1001
HyperSQL Database Engine (HSQLDB) / Bugs / #1001 ata exception: string data, right truncation (26.April snap)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.sql.SQLDataException: data exception: string data, right truncation interleaves length: 1133879
java.sql.SQLDataException: data exception: string data, right truncation
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.throwError(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.setParameter(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.setString(Unknown Source)
at eu.jucy.database.HSQLDB.addOrUpdateInterleave(HSQLDB.java:430)
at eu.jucy.database.HSQLDB.addOrUpdateFile(HSQLDB.java:374)
at uc.files.filelist.OwnFileList$4.hashedFile(OwnFileList.java:398)
at eu.jucy.hashengine.HashEngine$HashFileJob.run(HashEngine.java:312)
at eu.jucy.hashengine.HashEngine$HashFileJob$1.run(HashEngine.java:267)
at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
Caused by: org.hsqldb.HsqlException: data exception: string data, right truncation
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.types.CharacterType.castOrConvertToType(Unknown Source)
at org.hsqldb.types.CharacterType.convertToType(Unknown Source)
at org.hsqldb.types.CharacterType.convertToDefaultType(Unknown Source)
... 8 more
This happens when trying to insert a 1133879 Bytes long string into a LONGVARCHAR field
CREATE CACHED TABLE interleaves (tthroot CHARACTER(39) PRIMARY KEY,interleaves LONGVARCHAR
PreparedStatement insertInterleaves = c.prepareStatement( 
"INSERT INTO interleaves (tthroot, interleaves ) VALUES ( ?, ?) ");
insertInterleaves.setString(1, tth.toString());
insertInterleaves.setString(2, inter.toString()); <-- here the exception is thrown
insertInterleaves.execute();
insertInterleaves.close();
This all happens with rc9 as well as with the snapshot I downloaded yesterday...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1002
HyperSQL Database Engine (HSQLDB) / Bugs / #1002 Unique constraint messes up select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am trying to upgrade from 1.8.0.7 to 2.0.0-rc9. I have a problem
with a unique constraint with multiple columns. The simplest test
case that I can manage is this:
CREATE TABLE T(
a BIGINT, b BIGINT, c BIGINT, d BIGINT,
UNIQUE(a,b,c,d));
INSERT INTO T VALUES(NULL,1,NULL,NULL);
INSERT INTO T VALUES(NULL,1,NULL,1);
SELECT * FROM T WHERE a IS NULL AND b = 1 AND c IS NULL AND d = 1;
The select does return no rows, although of course the second row
should match. This used to work in 1.8.0.7. I reproduce this using
the HSQL Database Manager.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1003
HyperSQL Database Engine (HSQLDB) / Bugs / #1003 servlet mode not in the ROOT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I had tried to use hsqldb in servlet mode:
I have this in my web.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app>
<display-name>hsqldb</display-name>
<description>hypersonic database</description>
<servlet>
<servlet-name>hsqldb</servlet-name>
<servlet-class>org.hsqldb.Servlet</servlet-class>
<init-param>
<param-name>hsqldb.server.database</param-name>
<param-value>/data/db</param-value>
</init-param>
<init-param>
<param-name>hsqldb.server.use_web-inf_path</param-name>
<param-value>true</param-value>
</init-param>
<load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
<servlet-name>hsqldb</servlet-name>
<url-pattern>/servlet</url-pattern>
</servlet-mapping>
<session-config>
<session-timeout>720</session-timeout>
</session-config>
</web-app>
The status webpage http://hostname:80/hsqldb/servlet says:
The servlet is running.
The database is also running. 
When I try to connect from Eclipse DataSource Explorer I get an error java.sql.SQLException: Connection is broken: java.io.EOFException I am using URL jdbc:hsqldb:http://hostname:80/hsqldb/servlet
There is nothing in the tomcat access log, so it looks like it had not reached the servlet at all.
When I retry it with Url jdbc:hsqldb:http://hlaseninu.lf3.cuni.cz:80/hsqldb and <url-pattern>/</url-pattern> I got the same error but in the tomcat accesslog there is a new line:
123.123.123.123 - - [11/May/2010:19:03:17 +0200] "POST / HTTP/1.0" 302 - On ROOT (/) of the tomcat I already have another application running which is not reponding to this POST request.
I was desperately trying to debug the org.hsql.jdbcDriver source but my Eclipse cound not build it with Java 6 nor Java 1.4 nor Java 1.1 - main problems about missing some methods implementation in teh jdbc driver classes - so I give up, but it looks like the answer lies somewhere in the DatabaseURL.parseURL.
zdenek
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1004
HyperSQL Database Engine (HSQLDB) / Bugs / #1004 CASE WHEN space-pads results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have this kind of CASE WHEN expression (this is a Hibernate subclass
discriminator):
CASE
WHEN col IS NULL
THEN 'abcdef'
ELSE 'x'
END
In 2.0.0 (snapshot from 2010-05-05) this expression pads 'x' with
spaces to the length of 'abcdef'.
Testcase:
CREATE TABLE T ( col INT );
INSERT INTO T VALUES (NULL);
INSERT INTO T VALUES (1);
SELECT '"' || CASE WHEN col IS NULL THEN 'abcdef' ELSE 'x' END || '"' FROM T;
This has so far worked as expected in 1.8.0.7, and it works without
padding in Postgres and Oracle.
I find that I can add TRIM to fix the code for now, but I wonder if
this is intentional or a bug? It seems to me that the branches of the
CASE WHEN should be independent of each other and so there is no good
reason to pad the result.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1005
HyperSQL Database Engine (HSQLDB) / Bugs / #1005 data truncation error in WHERE clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using a too long string in a WHERE clause I get a data truncation error, when I use a PreparedStatement and a placeholder. Rejecting too long data in INSERT/UPDATE is really o.k., but in my understanding of SQL using a too long string value as parameter in a WHERE clause I should get an empty result set (or so, depending of what was selected, of cause), and not a SQLException.
When I use a "Statement" instead of a "PreparedStatement" the behavior of HSQLDB is o.k.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1006
HyperSQL Database Engine (HSQLDB) / Bugs / #1006 MINUS operator doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I performed the following queries:
SELECT DISTINCT rank FROM combo_option
{1,2,3,4,5}
SELECT DISTINCT rank FROM combo_option_presentation
{1,2}
SELECT DISTINCT rank FROM combo_option MINUS SELECT DISTINCT rank FROM combo_option_presentation
{1,2|
It seems that MINUS always returns the second argument.
I can provide my schema if you can't reproduce it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1007
HyperSQL Database Engine (HSQLDB) / Bugs / #1007 Foreign Key problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have two tables like so:
CREATE TABLE COMBO_OPTION(
TEMPLATE_GROUP_ID TEMPLATE_GROUP_ID,
COMBO_ID COMBO_ID,
LANGUAGE_ID LANGUAGE_ID FOREIGN KEY REFERENCES LANGUAGE(LANGUAGE_ID) ON DELETE CASCADE ON UPDATE CASCADE,
RANK RANK,
NAME NAME,
PRIMARY KEY(TEMPLATE_GROUP_ID,COMBO_ID,LANGUAGE_ID,RANK),
FOREIGN KEY(TEMPLATE_GROUP_ID,COMBO_ID) REFERENCES COMBO(TEMPLATE_GROUP_ID,COMBO_ID) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE CONTROLLER_COMBO_NODE_FORMAT(
TEMPLATE_GROUP_ID TEMPLATE_GROUP_ID,
NODE_ID NODE_ID,
RANK RANK,
COMBO_ID COMBO_ID,
COMBO_OPTION_RANK RANK,
LANGUAGE_ID LANGUAGE_ID FOREIGN KEY REFERENCES LANGUAGE(LANGUAGE_ID) ON DELETE CASCADE ON UPDATE CASCADE,
FROM_RANK RANK,
TO_RANK RANK,
PRIMARY KEY(TEMPLATE_GROUP_ID,NODE_ID,RANK,COMBO_OPTION_RANK),
FOREIGN KEY(TEMPLATE_GROUP_ID,NODE_ID,RANK,COMBO_ID) REFERENCES COMBO_NODE_FORMAT(TEMPLATE_GROUP_ID,NODE_ID,RANK,COMBO_ID) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(TEMPLATE_GROUP_ID,NODE_ID,FROM_RANK) REFERENCES NODE_FORMAT(TEMPLATE_GROUP_ID,NODE_ID,RANK) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(TEMPLATE_GROUP_ID,NODE_ID,TO_RANK) REFERENCES NODE_FORMAT(TEMPLATE_GROUP_ID,NODE_ID,RANK) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY(TEMPLATE_GROUP_ID,COMBO_ID,LANGUAGE_ID,COMBO_OPTION_RANK) REFERENCES COMBO_OPTION(TEMPLATE_GROUP_ID,COMBO_ID,LANGUAGE_ID,RANK) ON DELETE CASCADE ON UPDATE CASCADE
);
The final foreign key in the second table, ie
FOREIGN KEY(TEMPLATE_GROUP_ID,COMBO_ID,LANGUAGE_ID,COMBO_OPTION_RANK) REFERENCES COMBO_OPTION(TEMPLATE_GROUP_ID,COMBO_ID,LANGUAGE_ID,RANK) ON DELETE CASCADE ON UPDATE CASCADE
causes a problem if I rearrange the order of the attributes to be different from the order that they are expressed in the primary key of the referenced table,
eg this is how I had it originally:
FOREIGN KEY(TEMPLATE_GROUP_ID,COMBO_ID,COMBO_OPTION_RANK,LANGUAGE_ID) REFERENCES COMBO_OPTION(TEMPLATE_GROUP_ID,COMBO_ID,RANK,LANGUAGE_ID) ON DELETE CASCADE ON UPDATE CASCADE
Notice that although the types of the attributes in the 'foreign key' and 'references' parts of the clause match each other, and the schema compiles ok, when I try to insert data into this table I get an exception
Caused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String
at org.hsqldb.types.CharacterType.compare(Unknown Source)
at org.hsqldb.index.IndexAVL.compareRowNonUnique(Unknown Source)
at org.hsqldb.index.IndexAVL.findNode(Unknown Source)
at org.hsqldb.index.IndexAVL.existsParent(Unknown Source)
at org.hsqldb.Constraint.checkInsert(Unknown Source)
at org.hsqldb.StatementDML.performIntegrityChecks(Unknown Source)
at org.hsqldb.StatementDML.insertSingleRow(Unknown Source)
at org.hsqldb.StatementInsert.getResult(Unknown Source)
It seems to be because this order of attributes doesn't match the order in the primary key clause for the first table ie
PRIMARY KEY(TEMPLATE_GROUP_ID,COMBO_ID,LANGUAGE_ID,RANK),
When I changed the foreign key clause to the configuration shown at the top, with the attributes in the same order as the primary key, then it worked.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1008
HyperSQL Database Engine (HSQLDB) / Bugs / #1008 Docs: read_only > readonly property
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please change the docs for chapter 12 for property 'read_only' to 'readonly'. The underscore version won't work for 2.0 (and I think 1.8 neither). Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1009
HyperSQL Database Engine (HSQLDB) / Bugs / #1009 Missing artifactId in pom for release 2.0.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using maven, builds fail with this error :
[ERROR] FATAL ERROR
[INFO] ------------------------------------------------------------------------
[INFO] An invalid artifact was detected.
This artifact might be in your project's POM, or it might have been included transitively during the resolution process. Here is the information we do have for this artifact:
o GroupID: org.hsqldb
o ArtifactID: <<< MISSING >>>
o Version: 2.0.0
o Type: jar
It seems that artifactId is missing from the 2.0.0 release.
It can be fixed by adding this to the pom :
<artifactId>hsqldb</artifactId>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1010
HyperSQL Database Engine (HSQLDB) / Bugs / #1010 NullPointerException when using remote_open=true
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Test case:
1. Start the server by running runServer.bat -remote_open true.
2. Start the database manager by running runManagerSwing.bat. Enter the following settings: Type: HSQL Database Engine Server, URL: jdbc:hsqldb:hsql://localhost/myTest;filepath=myTest. Click OK.
Actual result:
Database manager reports a NullPointerException.
My analysis:
The exception originates at the server. It happens in situations when the server loads without any databases, such as when running with remote_open=true and without additional database.x/dbname.x parameters.
The reason is circularity in static initialization of org.hsqldb.Collation. During its static initialization, it performs: defaultCollation = new Collation(). This, in turn, causes the constructor of CharacterType to call Collation.getDefaultInstance(). Since this happens during the construction of the default instance, the getDefaultInstance() method returns null.
This doesn't happen when the server loads with a database, since the classes are loaded in a different order.
To reproduce, put breakpoints at Collation.java:156 (final static Collation defaultCollation = new Collation();) and Collation.java:177 (getDefaultInstance()) and compare running the server with remote_open=true vs. false.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1011
HyperSQL Database Engine (HSQLDB) / Bugs / #1011 UNION CORRESPONDING causes npe
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried changing a view from union to union corresponding and I get a NPE.
Please see the attached schema
If you run the scripts domains.sql then templates.sql that should be enough.
The view is all_node_format in templates.sql
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1012
HyperSQL Database Engine (HSQLDB) / Bugs / #1012 TABLE T with view causes NPE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The expression "TABLE T" causes an NPE if T is a view.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1013
HyperSQL Database Engine (HSQLDB) / Bugs / #1013 Dead lock with Hibernate test suite
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I tried to update Hibernate test suite to use hsqldb 2.0 but it seems there is a dead lock. You can get the code from http://anonsvn.jboss.org/repos/hibernate/core/trunk. Simply update parent/pom.xml to use org.hsqldb:hsqldb:2.0.0 instead of hsqldb:hsqldb:1.8.0.2 and run mvn clean test -Phsqldb
The build is stuck on test org.hibernate.test.jpa.lock.JPALockTest.
Here is the thread dump: http://pastebin.com/rFx0KL60
Do you have an idea of the cause of the issue.
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1014
HyperSQL Database Engine (HSQLDB) / Bugs / #1014 SqlFile pass error - create function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Execute a SQL file with SqlFile.execute() that contains create function failed. Reported error is as following:
java.lang.Error: Error: could not match input
at org.hsqldb.cmdline.sqltool.SqlFileScanner.zzScanError(Unknown Source)
at org.hsqldb.cmdline.sqltool.SqlFileScanner.yylex(Unknown Source)
at org.hsqldb.cmdline.SqlFile.scanpass(Unknown Source)
at org.hsqldb.cmdline.SqlFile.execute(Unknown Source)
at org.hsqldb.cmdline.SqlFile.processSpecial(Unknown Source)
at org.hsqldb.cmdline.SqlFile.scanpass(Unknown Source)
at org.hsqldb.cmdline.SqlFile.execute(Unknown Source)
at au.gov.wa.dpi.trelis.domain.HSQLDBConnectionFactory.startup(HSQLDBConnectionFactory.java:155)
at au.gov.wa.dpi.trelis.domain.HSQLDBConnectionFactory.getConnection(HSQLDBConnectionFactory.java:121)
at au.gov.wa.dpi.trelis.util.jdbc.SQLStatement.openConnection(SQLStatement.java:290)
at au.gov.wa.dpi.trelis.util.jdbc.SQLStatement.prepare(SQLStatement.java:314)
at au.gov.wa.dpi.trelis.util.jdbc.SQLStatement.executeStatement(SQLStatement.java:295)
at au.gov.wa.dpi.trelis.util.jdbc.Update.execute(Update.java:25)
at au.gov.wa.dpi.trelis.domain.TestClientBuilder.save(TestClientBuilder.java:179)
at au.gov.wa.dpi.trelis.domain.driver.impl.DriverRepositoryImplDatabaseTest.insertJackBrown(DriverRepositoryImplDatabaseTest.java:79)
at au.gov.wa.dpi.trelis.domain.driver.impl.DriverRepositoryImplDatabaseTest.dbSetUp(DriverRepositoryImplDatabaseTest.java:63)
at au.gov.wa.dpi.trelis.domain.DatabaseTestCase.setUp(DatabaseTestCase.java:64)
Create function SQL is correct, it can be execute by a JDBC client, for example SQuirellSQL:
CREATE FUNCTION TRUNC(d DATE)
RETURNS DATE
NO SQL
LANGUAGE JAVA PARAMETER STYLE JAVA
EXTERNAL NAME 'CLASSPATH:au.gov.wa.dpi.trelis.domain.HsqlDBFunctionHelper.trunc'
This happend when migrating unit test based on HSQLDB from 1.8.0 to 2.0.0 to replace the deprecated CREATE ALIAS ... FOR HsqlDB SQL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1015
HyperSQL Database Engine (HSQLDB) / Bugs / #1015 When execute query : incompatible data types in combination
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if the 'outdate' filed is Integer type, I use "select * from user where outdate=0 " execute query , that is fine. but when use "select * from user where outdate='0' " will throw exception...
see:
2010-06-21 10:58:19 ERROR org.hibernate.util.JDBCExceptionReporter - incompatible data types in combination
2010-06-21 10:58:19 ERROR XXXXXXXXXXXXXXXXXXXXXXXXXXX.service.impl.ProductManagerImpl - could not execute query
org.hibernate.exception.SQLGrammarException: could not execute query
at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:67)
at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)
at org.hibernate.loader.Loader.doList(Loader.java:2223)
at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2104)
at org.hibernate.loader.Loader.list(Loader.java:2099)
at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:378)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1016
HyperSQL Database Engine (HSQLDB) / Bugs / #1016 INTERVAL Constant '0:0:0' Not Support
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Interval constant '0:0:0' (HOUR TO SECOND) not supported. Only '00:00:00' can be recognized. It is too restrict and it is not easy for the calling application to format the interval string.
Oracle supports '0:0:0' interval constant. HsqlDB should support it also.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1017
HyperSQL Database Engine (HSQLDB) / Bugs / #1017 When execute query : incompatible data types in combination
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if the 'outdate' filed is Integer type, I use "select * from user where outdate=0 " execute query , that is fine. but when use "select * from user where outdate='0' " will throw exception...
int the HSQLDB 1.8 and mysql , it's fine。
Developers is not easy to judge the “outdate” data type。
see:
2010-06-21 10:58:19 ERROR org.hibernate.util.JDBCExceptionReporter - incompatible data types in combination
2010-06-21 10:58:19 ERROR XXXXXXXXXXXXXXXXXXXXXXXXXXX.service.impl.ProductManagerImpl - could not execute query
org.hibernate.exception.SQLGrammarException: could not execute query
at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:67)
at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)
at org.hibernate.loader.Loader.doList(Loader.java:2223)
at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2104)
at org.hibernate.loader.Loader.list(Loader.java:2099)
at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:378)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1018
HyperSQL Database Engine (HSQLDB) / Bugs / #1018 select null throws exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
select null reports following error:
data type cast needed for parameter or null literal
for example,
select null from dual;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1019
HyperSQL Database Engine (HSQLDB) / Bugs / #1019 hsqldb2.0 has a bug, about fetchsize
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Use hsqldb2.0 database, when the implementation of the query, PreparedStatement set fetchSize value, query the value of the number of records than fetchsize, hsqldb there will be a mistake. Here is test code:
Class.forName("org.hsqldb.jdbcDriver");
Connection conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/test", "SA", "");
java.sql.PreparedStatement ps = conn.prepareStatement("select * from customer");
//customer table in the number of records more than 50;
ps.setFetchSize(15);
java.sql.ResultSet rs = ps.executeQuery();
while(rs.next()){
System.out.println(" -- "+rs.getString(2)+" -- "+rs.getString(3));
}
rs.close();
ps.close();
conn.close();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1020
HyperSQL Database Engine (HSQLDB) / Bugs / #1020 Uncommitted records in COUNT aggregate
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
Not sure if this is fixed on trunk.
Uncommitted records get included in following statement,
SELECT count (*) FROM TEST;
-thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1021
HyperSQL Database Engine (HSQLDB) / Bugs / #1021 Committed data lost if no SHUTDOWN issued
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Committed data for CACHED tables lost if no SHUTDOWN issued.
Steps to reproduce:
1. Start swing gui with 'java -jar hsqldb.jar'
2. Open standalone database with CACHED tables
3. Update some data and COMMIT
4. Just close GUI
Result - commited changes was lost.
Expected result - commited data never lost, even if no SHUTDOWN command issued.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1022
HyperSQL Database Engine (HSQLDB) / Bugs / #1022 Transaction broken in 2.0.1?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
I downloaded the latest version from June 26 (this is 2.0.1, I think), the java 1.5 version.
Following sql gives me unexpected results:
create table test(x int)
start transaction
insert into test (x) values (1)
rollback
select * from test
The insert was not rolled back.
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1023
HyperSQL Database Engine (HSQLDB) / Bugs / #1023 left outer join on temporary table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
One of our tests with the latest 2.0.1 version fails, (June 26 version, java 1.5).
Data setup:
create table a (x varchar(1))
insert into a (x) values ('A')
create table b(x varchar(1))
declare local temporary table MODULE.HT_B (x varchar(1))
A left outer join on b works fine, 1 row is returned as expected:
select a.* from a left outer join b on upper(a.x) = upper(b.x) where b.x is null
However, the same on the temporary table does not return the single row:
select a.* from a left outer join MODULE.HT_B b on upper(a.x) = upper(b.x) where b.x is null
Rob
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1024
HyperSQL Database Engine (HSQLDB) / Bugs / #1024 COUNT gives wrong results when using aliased table names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a regression. The following code performs correctly on 1.8.0.7, but fails on 2.0.0.
import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;
public class BugReport {
public static void main(String[] args) throws Exception {
final String jdbcUrl = "jdbc:hsqldb:mem:bugreport";
Properties props = new Properties();
props.put("user", "sa");
props.put("password", "");
Class.forName("org.hsqldb.jdbcDriver"); // for pre 2.0.0 HSQLDB
Driver driver = DriverManager.getDriver(jdbcUrl); 
Connection conn = driver.connect(jdbcUrl, props);
try {
Statement stmt = null;
ResultSet rs = null;
try {
stmt = conn.createStatement();
stmt.executeUpdate("create table A (id int not null primary key, fk1 int, fk2 int)");
stmt.executeUpdate("create table B (id int not null primary key)");
stmt.executeUpdate("insert into A values (1, 1, null)");
stmt.executeUpdate("insert into A values (2, 1, null)");
stmt.executeUpdate("insert into A values (3, 1, null)");
stmt.executeUpdate("insert into A values (4, null, 1)");
stmt.executeUpdate("insert into A values (5, null, 1)");
stmt.executeUpdate("insert into B values (1)");
rs = stmt.executeQuery("select count(B1.id), count(B2.id) from A left outer join B B1 on A.fk1 = B1.id left outer join B B2 on A.fk2 = B2.id");
while (rs.next()) {
System.out.println(rs.getInt(1)); // expected 3
System.out.println(rs.getInt(2)); // expected 2 - but returns 3
}
// same query with count statements swapped
rs = stmt.executeQuery("select count(B2.id), count(B1.id) from A left outer join B B1 on A.fk1 = B1.id left outer join B B2 on A.fk2 = B2.id");
while (rs.next()) {
System.out.println(rs.getInt(1)); // expected 2
System.out.println(rs.getInt(2)); // expected 3 - but returns 2
} 
} finally {
if (rs != null) {
rs.close();
}
if (stmt != null) {
stmt.close();
}
}
} finally {
if (conn != null && !conn.isClosed()) {
conn.close();
}
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1025
HyperSQL Database Engine (HSQLDB) / Bugs / #1025 ch09.html bad compression
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Navigating to http://www.hsqldb.org/doc/guide/ch09.html in Firefox 3.6.6 on Windows XP SP3 yields an error:
Content Encoding Error
The page you are trying to view cannot be shown because it uses an invalid or unsupported form of compression.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1026
HyperSQL Database Engine (HSQLDB) / Bugs / #1026 ArrayIndexOutOfBoundsException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the Class of org.hsqldb.util.ZaurusTableForm, Version 1.8.1.3.
In the function of "private void fetchColumns() ":
If exception raised in "tempType.addElement(new Short(colList.getShort("DATA_TYPE")));"(because cloList.getShort("DATA_TYPE")may raise an SQLException), when the program reaches "columnTypes[i] = ((Short) tempType.elementAt(i)).shortValue();" in the loop, a new exception ArrayIndexOutOfBoundsException will be thrown and the program will exit, becasue the array columnTypes has one more element than the array tempType. 
private void fetchColumns() {
Vector temp = new Vector(20);
Vector tempType = new Vector(20);
try {
if (cConn == null) {
return;
}
if (dbmeta == null) {
dbmeta = cConn.getMetaData();
}
ResultSet colList = dbmeta.getColumns(null, null, tableName, "%");
while (colList.next()) {
temp.addElement(colList.getString("COLUMN_NAME"));
tempType.addElement(new Short(colList.getShort("DATA_TYPE")));
}
colList.close();
} catch (SQLException e) {
ZaurusEditor.printStatus("SQL Exception: " + e.getMessage());
}
columns = new String[temp.size()];
temp.copyInto(columns);
columnTypes = new short[temp.size()];
for (int i = 0; i < columnTypes.length; i++) {
columnTypes[i] = ((Short) tempType.elementAt(i)).shortValue();
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1027
HyperSQL Database Engine (HSQLDB) / Bugs / #1027 IDENTITY increase even shouldn't
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I noticed that the Identity id will be increased even if insert statements fail because of primary key violation.
CREATE MEMORY TABLE S_PRODUCTID(OLDID VARCHAR(50),NEWID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,CONSTRAINT UNIQUE_OLDID UNIQUE(OLDID))
Now each time the Identity id will be increase:
INSERT INTO S_PRODUCTID (OLDID, NEWID) VALUES (1, NULL)
INSERT INTO S_PRODUCTID (OLDID, NEWID) VALUES (1, NULL)
INSERT INTO S_PRODUCTID (OLDID, NEWID) VALUES (1, NULL)
INSERT INTO S_PRODUCTID (OLDID, NEWID) VALUES (1, NULL)
But just the first statement inserted a value to the database!
Testet with V1.8.0 and 1.8.1.3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1028
HyperSQL Database Engine (HSQLDB) / Bugs / #1028 Table meta-data for tables created in quotes is wrong case
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following class demonstrates the problem. When the table user is created using quotes then the meta-data for the table name is "user" when the table is created without the name in quotes the meta-data for the table name is "USER". Liquibase automatically quotes the table when it is called user.
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;
public class BugReport {
public static void main(String[] args) throws Exception {
final String jdbcUrl = "jdbc:hsqldb:mem:bugreport";
Properties props = new Properties();
props.put("user", "sa");
props.put("password", "");
Driver driver = DriverManager.getDriver(jdbcUrl); 
Connection conn = driver.connect(jdbcUrl, props);
try {
Statement stmt = null;
try {
stmt = conn.createStatement();
stmt.executeUpdate("create table \"user\" (id varchar(36) not null primary key)");
stmt.executeUpdate("create table users (id varchar(36) not null primary key)");
DatabaseMetaData md = conn.getMetaData();
ResultSet rs = md.getTables(null, null, "USERS", null);
if (rs.next()) {
System.out.println(rs.getString("TABLE_NAME"));
} else {
System.out.println("No USERS table");
}
rs = md.getTables(null, null, "users", null);
if (rs.next()) {
System.out.println(rs.getString("TABLE_NAME"));
} else {
System.out.println("No users table");
}
rs = md.getTables(null, null, "USER", null);
if (rs.next()) {
System.out.println(rs.getString("TABLE_NAME"));
} else {
System.out.println("No USER table");
}
rs = md.getTables(null, null, "user", null);
if (rs.next()) {
System.out.println(rs.getString("TABLE_NAME"));
} else {
System.out.println("No user table");
}
} finally {
if (stmt != null) {
stmt.close();
}
}
} finally {
if (conn != null && !conn.isClosed()) {
conn.close();
}
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1029
HyperSQL Database Engine (HSQLDB) / Bugs / #1029 wrong query result wth Multi-column (A,B) IN (,,)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The version 2.0 provides new expression types as "Multi-column (A,B,C) IN ((,,), (,,), ) both with literals and queries" but returns unfortunately wrong results. I've tried the following request with Hibernate (which is working with MySQL) and get 10 rows back instead of 2 rows as it should. In fact it seems that the constraint "IN" isn't taking into account.
The query 
"select * from kundendaten kundendate0_, kunde kunde1_ where kundendate0_.kunde_id=kunde1_.id and kunde1_.berater_id=2 and ((kundendate0_.version_datum, kundendate0_.kunde_id) in (select max(kundendate4_.version_datum), kundendate4_.kunde_id from kundendaten kundendate4_, kunde kunde5_ where kundendate4_.kunde_id=kunde5_.id and kunde5_.berater_id=2 group by kundendate4_.kunde_id))" 
returns 10 rows where the sub-query 
"select max(kundendate4_.version_datum), kundendate4_.kunde_id from kundendaten kundendate4_, kunde kunde5_ where kundendate4_.kunde_id=kunde5_.id and kunde5_.berater_id=2 group by kundendate4_.kunde_id" 
returns only 2 rows.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1030
HyperSQL Database Engine (HSQLDB) / Bugs / #1030 INSERT INTO texttable (SELECT * ...) does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The same as https://sourceforge.net/tracker/index.php?func=detail&aid=1110913&group_id=23316&atid=378131
Only reproduced with 2.0.0 instead of 1.8.0.
I didn't find any way to reopen that, so copying:
1) Create test tables
2) create a text table identical to customer (call it test)
3) set test source to "test.csv"
4) Execute insert into test (select * from customer)
I get this ex:
java.sql.SQLFeatureNotSupportedException: feature not supported
Thanks, Ondra
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1031
HyperSQL Database Engine (HSQLDB) / Bugs / #1031 JDBCResultSetMetaData.getScale() doesn't check column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JDBCResultSetMetaData.getScale() does not check to make sure that the column that is being accessed actually exists as the other get*() methods in this class. Instead it throws an ArrayIndexOutOfBoundsException when accessing data for a column off the end of the type array. I expect to get a SQLException like the other methods.
This behavior exists in the current 2.0.0 GA as well as the current development tree. It is reproducible by examining the code for JDBCResultSetMetaData.getScale() or by calling the method with an out-of-bounds column number (eg. -1 or Integer.MAX_VALUE).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1032
HyperSQL Database Engine (HSQLDB) / Bugs / #1032 JDBCArray.getResultSet(JI) doesn't report all data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When calling the getResult() methods of JDBCArray with the position and count parameters not all the data is retrieved. For example, if the retrieved array has 3 values and getResult(2, 2) is invoked then only one value (at position 2) is returned instead of the expected values at 2 and 3. See the attached Java program that reproduces the problem.
The probable cause is JDBCArray.newColumnResult() at around line 545 in the current work branch. At that line the for loop iterates from 'position' to 'count' instead of 'position' to 'count + position'.
This problem is observable in both 2.0.0 and the current work branch.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1033
HyperSQL Database Engine (HSQLDB) / Bugs / #1033 java.lang.ArrayIndexOutOfBoundsException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I use hsqbdb 1.8 and I have no problem. I downloaded the 2.0 distribution and found that the following query fails in 2.0 (was working in 1.8) :
-- sample query : 
create table rp
(
ref1 BIGINT NOT NULL,
ref2 BIGINT NOT NULL,
PRIMARY KEY (ref1)
);
create table o
(
id BIGINT NOT NULL,
someref BIGINT NOT NULL,
PRIMARY KEY (id)
);
select * from rp
where 
exists
(
select 0
from 
(
select o.id as p0, o.id as p1 from o
) source
where source.p0 = rp.ref1
and source.p1 = rp.ref2
)
this query raises :
Error: java.lang.ArrayIndexOutOfBoundsException: -1 -1
SQLState: S1000
ErrorCode: -458
unfortunately, as the query is generated, i cannot change it...
(tip : when changing "o.id as p1" to "o.someref as p1", the query runs again with no error, but that is not what i need...)
Any idea ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1034
HyperSQL Database Engine (HSQLDB) / Bugs / #1034 NPE when referencing a table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See the attached Java program which will throw a NPE.
If you remove the "REFERENCES file(id)" on line 19, the NPE goes away.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1035
HyperSQL Database Engine (HSQLDB) / Bugs / #1035 NPE when trying to drop a column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug looks similar to the one I reported yesterday (thanks for the quick turn-around btw!!).
See the attached program.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1036
HyperSQL Database Engine (HSQLDB) / Bugs / #1036 Wrong union select result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When doing select with union subselect like following:
select * from (
select c.*, null test from contract c
union all
select c.*, 1 test from contract c
)
on any table (contract is irrelevant) values of test field are all null but should not. For first select in union should be null but for second should be 1.
Without sorrounding select like this:
select c.*, null test from contract c
union all
select c.*, 1 test from contract c
query result is proper.
The problem is only with null values, if I change column definiotion from null test to 0 test result is right.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1037
HyperSQL Database Engine (HSQLDB) / Bugs / #1037 HSQLDB 2.0 and Eclipselink errors
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I just updated from 1.8.0.10 to 2.0 and suddenly my tests stopped working. I'm using this config:
<properties>
<property name="javax.persistence.jdbc.driver" value="org.hsqldb.jdbcDriver"/>
<property name="javax.persistence.jdbc.url" value="jdbc:hsqldb:mem:test"/>
<property name="javax.persistence.jdbc.user" value="sa"/>
<property name="javax.persistence.jdbc.password" value=""/>
<property name="eclipselink.ddl-generation" value="drop-and-create-tables"/>
<property name="eclipselinklink.ddl-generation.output-mode" value="database"/>
</properties>
and I'm getting these errors (none of which appeared before):
[EL Info]: 2010-08-13 13:52:50.851--ServerSession(1714554380)--EclipseLink, version: Eclipse Persistence Services - 2.1.0.v20100311-r6779
[EL Info]: 2010-08-13 13:52:51.396--ServerSession(1714554380)--file:/Users/wakko/Documents/source/git/coos-internal/Components/GenericDataEnabler/entities/target/test-classes/_testMsg login successful
[EL Warning]: 2010-08-13 13:52:51.437--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOSUBSCRIPTION
Error Code: -5501
Call: ALTER TABLE TOSUBSCRIPTION DROP CONSTRAINT UNQ_TOSUBSCRIPTION_0
Query: DataModifyQuery(sql="ALTER TABLE TOSUBSCRIPTION DROP CONSTRAINT UNQ_TOSUBSCRIPTION_0")
[EL Warning]: 2010-08-13 13:52:51.44--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOUID
Error Code: -5501
Call: ALTER TABLE TOUID DROP CONSTRAINT UNQ_TOUID_0
Query: DataModifyQuery(sql="ALTER TABLE TOUID DROP CONSTRAINT UNQ_TOUID_0")
[EL Warning]: 2010-08-13 13:52:51.44--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOMESSAGE in statement [DROP TABLE TOMESSAGE]
Error Code: -5501
Call: DROP TABLE TOMESSAGE
Query: DataModifyQuery(sql="DROP TABLE TOMESSAGE")
[EL Warning]: 2010-08-13 13:52:51.442--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: primary key already exist
Error Code: -5532
Call: CREATE TABLE TOMESSAGE (MESSAGEID BIGINT IDENTITY NOT NULL, TOPIC VARCHAR(255), SERIALIZATIONINFO VARCHAR(255), MD5SUM VARCHAR(255), messageBody LONGVARBINARY, MESSAGETYPE VARCHAR(255), DESTINATION VARCHAR(255), MESSAGENAME VARCHAR(255), ts TIMESTAMP, SOURCE VARCHAR(255), PRIORITY INTEGER, JMSMESSAGEID VARCHAR(255), INSERTTS TIMESTAMP, PRIMARY KEY (MESSAGEID))
Query: DataModifyQuery(sql="CREATE TABLE TOMESSAGE (MESSAGEID BIGINT IDENTITY NOT NULL, TOPIC VARCHAR(255), SERIALIZATIONINFO VARCHAR(255), MD5SUM VARCHAR(255), messageBody LONGVARBINARY, MESSAGETYPE VARCHAR(255), DESTINATION VARCHAR(255), MESSAGENAME VARCHAR(255), ts TIMESTAMP, SOURCE VARCHAR(255), PRIORITY INTEGER, JMSMESSAGEID VARCHAR(255), INSERTTS TIMESTAMP, PRIMARY KEY (MESSAGEID))")
[EL Warning]: 2010-08-13 13:52:51.443--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOSUBSCRIPTION in statement [DROP TABLE TOSUBSCRIPTION]
Error Code: -5501
Call: DROP TABLE TOSUBSCRIPTION
Query: DataModifyQuery(sql="DROP TABLE TOSUBSCRIPTION")
[EL Warning]: 2010-08-13 13:52:51.444--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOUID in statement [DROP TABLE TOUID]
Error Code: -5501
Call: DROP TABLE TOUID
Query: DataModifyQuery(sql="DROP TABLE TOUID")
[EL Warning]: 2010-08-13 13:52:51.445--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: primary key already exist
Error Code: -5532
Call: CREATE TABLE TOUID (ID BIGINT IDENTITY NOT NULL, UIDSTRING VARCHAR(255), DestinationType VARCHAR(255), PRIMARY KEY (ID))
Query: DataModifyQuery(sql="CREATE TABLE TOUID (ID BIGINT IDENTITY NOT NULL, UIDSTRING VARCHAR(255), DestinationType VARCHAR(255), PRIMARY KEY (ID))")
[EL Warning]: 2010-08-13 13:52:51.446--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOUID
Error Code: -5501
Call: ALTER TABLE TOUID ADD CONSTRAINT UNQ_TOUID_0 UNIQUE (uidString)
Query: DataModifyQuery(sql="ALTER TABLE TOUID ADD CONSTRAINT UNQ_TOUID_0 UNIQUE (uidString)")
[EL Warning]: 2010-08-13 13:52:51.448--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: SEQ_GEN_SEQUENCE in statement [DROP SEQUENCE SEQ_GEN_SEQUENCE]
Error Code: -5501
Call: DROP SEQUENCE SEQ_GEN_SEQUENCE
Query: DataModifyQuery(sql="DROP SEQUENCE SEQ_GEN_SEQUENCE")
[EL Warning]: 2010-08-13 13:52:51.449--ServerSession(1714554380)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: SEQ_GEN_SEQUENCE
Error Code: -5501
Call: CALL NEXT VALUE FOR SEQ_GEN_SEQUENCE
Query: ValueReadQuery(sql="CALL NEXT VALUE FOR SEQ_GEN_SEQUENCE")
[EL Warning]: 2010-08-13 13:52:51.682--UnitOfWork(780857040)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOMESSAGE
Error Code: -5501
Call: INSERT INTO TOMESSAGE (TOPIC, SERIALIZATIONINFO, MD5SUM, messageBody, MESSAGETYPE, DESTINATION, MESSAGENAME, ts, SOURCE, PRIORITY, JMSMESSAGEID, INSERTTS) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
bind => [testing-1-2-3, null, 321c3cf486ed509164edec1e1981fec8, [B@2344b18f, HTTP, null, null, 2010-08-13 13:52:49.087, tjodiruttab, 0, null, 2010-08-13 13:52:51.679]
Query: InsertObjectQuery(no.telenorobjects.gde.entities.TOMessage[id=null])
[EL Warning]: 2010-08-13 13:52:51.93--UnitOfWork(1543103262)--Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.1.0.v20100311-r6779): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLException: user lacks privilege or object not found: TOMESSAGE
Error Code: -5501
Call: INSERT INTO TOMESSAGE (TOPIC, SERIALIZATIONINFO, MD5SUM, messageBody, MESSAGETYPE, DESTINATION, MESSAGENAME, ts, SOURCE, PRIORITY, JMSMESSAGEID, INSERTTS) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
bind => [testing-1-2-3, null, 321c3cf486ed509164edec1e1981fec8, [B@72adf5be, HTTP, null, puddlibuu, 2010-08-13 13:52:49.429, tjodiruttan, 0, null, 2010-08-13 13:52:51.93]
Query: InsertObjectQuery(no.telenorobjects.gde.entities.TOMessage[id=null])
Tests run: 5, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 2.476 sec <<< FAILURE!
Running no.telenorobjects.core.entities.AppTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.048 sec
Running no.telenorobjects.core.entities.TestTOMessageResponse
<?xml version="1.0" encoding="UTF-8" standalone="yes"?><messageresponse><messages/></messageresponse>
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.055 sec
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1038
HyperSQL Database Engine (HSQLDB) / Bugs / #1038 lock java process.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
When I use the latest version of hsqldb, after insert data with unitils-dbunit, I have a lock of java process.
Below, the tread dump.
autocommit = false
isolation = default
memory database is used.
"main" prio=1 tid=0x08bd8e00 nid=0x74a7 waiting on condition [0xbfb0e000..0xbfb0fae8]
at sun.misc.Unsafe.park(Native Method)
at java.util.concurrent.locks.LockSupport.park(LockSupport.java:118)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:716)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:872)
at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1179)
at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:199)
at org.hsqldb.lib.CountUpDownLatch.await(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
- locked <0x895da548> (a org.hsqldb.Session)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
- locked <0x88b1f070> (a org.hsqldb.jdbc.JDBCPreparedStatement)
at org.hibernate.jdbc.AbstractBatcher.getResultSet(AbstractBatcher.java:208)
at org.hibernate.loader.Loader.getResultSet(Loader.java:1808)
at org.hibernate.loader.Loader.doQuery(Loader.java:697)
at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:259)
at org.hibernate.loader.Loader.doList(Loader.java:2228)
at org.hibernate.loader.Loader.listUsingQueryCache(Loader.java:2157)
at org.hibernate.loader.Loader.list(Loader.java:2117)
at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:401)
at org.hibernate.hql.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:361)
at org.hibernate.engine.query.HQLQueryPlan.performList(HQLQueryPlan.java:196)
at org.hibernate.impl.SessionImpl.list(SessionImpl.java:1148)
at org.hibernate.impl.QueryImpl.list(QueryImpl.java:102)
at org.hibernate.impl.AbstractQueryImpl.uniqueResult(AbstractQueryImpl.java:835)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1039
HyperSQL Database Engine (HSQLDB) / Bugs / #1039 Duplicate table aliases in SELECT do not cause an error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I would expect a query such as the following to generate a parse error along the lines of "table alias 't' used twice":
SELECT * FROM table1 t, table2 t
This is not the case in HSQL 2.0 - instead, the alias appears to be bound to both table names, which is unexpected and presumably not the correct behaviour according to the SQL standard.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1040
HyperSQL Database Engine (HSQLDB) / Bugs / #1040 to_date() function missing
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try and call the to_date() function I get: user lacks privilege or object not found: TO_DATE
to_char() works fine. Other functions also don't exist, e.g. to_timestamp.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1041
HyperSQL Database Engine (HSQLDB) / Bugs / #1041 Java function syntax doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The syntax for creating a Java function given in the documentation doesn't work:
CREATE FUNCTION zero_pad(x BIGINT, digits INT, maxsize INT)
RETURNS CHAR VARYING(100)
NO SQL
LANGUAGE JAVA PARAMETER STYLE JAVA
EXTERNAL NAME
'CLASSPATH:org.hsqldb.lib.StringUtil.toZeroPaddedString'
It complains that the JAVA keyword should not be present.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1042
HyperSQL Database Engine (HSQLDB) / Bugs / #1042 array comparison doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i wanted to compare arrays in tables, but the result is always true. example:
CREATE Table ttt (ITEM Int PRIMARY KEY, test int array default array[]) 
insert into ttt values (11,array [1])
insert into ttt values (12,array [2,3]);
insert into ttt values (13,array [6,7,4,5,6]);
select CARDINALITY(t1.test),CARDINALITY(t2.test),t1.item,t2.item from ttt as t2, ttt as t1 where ( t1.test=t2.test)
gives 
1 1 11 11
2 1 12 11
5 1 13 11
1 2 11 12
2 2 12 12
5 2 13 12
1 5 11 13
2 5 12 13
5 5 13 13
which can't be. all arrays are different, even the number of elements doesn't match. my understanding of the documentation is that comparison of whole arrays is possible.
i'm using a current stable version 2.0.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1043
HyperSQL Database Engine (HSQLDB) / Bugs / #1043 NPE in LobManager
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.lang.NullPointerException
at org.hsqldb.persist.LobManager.adjustUsageCount(LobManager.java:1207)
at org.hsqldb.SessionData.adjustLobUsageCount(SessionData.java:389)
at org.hsqldb.TransactionManagerCommon.persistCommit(TransactionManagerCommon.java:100)
at org.hsqldb.TransactionManager2PL.commitTransaction(TransactionManager2PL.java:145)
at org.hsqldb.Session.commit(Session.java:539)
at org.hsqldb.jdbc.JDBCConnection.commit(JDBCConnection.java:1026)
This is in HSQL 2.0. Line 1207 of LobManager.java is:
int count = ((Number) data[LOB_IDS.LOB_USAGE_COUNT]).intValue();
presumably some entry in the data array is null and this wasn't anticipated, or the count is incorrect. Unfortunately this error seems to be intermittent and happens deep inside quite a complicated application, so I can't give precise reproduction steps.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1044
HyperSQL Database Engine (HSQLDB) / Bugs / #1044 SET FILES SCALE not migrated from 1.8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When upgrading a 1.8 HSQL database the SET FILES SCALE setting isn't getting migrated properly. It appears that its by design (from what I can tell) that this can only be set on a fresh database with no data. In my testing my 1.8 database has a scale of 8, after upgrade it is changed to 1; which limits my upgraded db to 2GB (if its being honored, since it's not listed as a valid setting). If it's not being honored, the setting should be set to 8 rather than 1 (in the .script file).
I'm using 2.0.0.3754
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1045
HyperSQL Database Engine (HSQLDB) / Bugs / #1045 Joins with parenthesis
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I create the following tables:
create table table1(pk integer,val integer)
create table table2(pk integer)
and try to execute the following sql:
select table2.pk 
from (table2 join table1 on table1.pk=table2.pk) 
where table1.val=1
The I get this error message
[Error Code: -5501, SQL State: 42501] user lacks privilege or object not found: TABLE1.VAL
I tried making it work using aliases for both tables and the joined table, but nothing did work. The same code works for MySQL, Oracle and PostgreSQL. 
This bug is related to #1763757 , which applied to 1.8.x.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1046
HyperSQL Database Engine (HSQLDB) / Bugs / #1046 ISO Year Format Incorrect Implementation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version of HSQLDB 2.0
to_char function using IYYY returns incorrect year.
E.g. 2009-01-01 is a Thursday and thereby according to ISO rules, 2008-12-29, 2008-12-30, 2008-12-31 must be part of year 2009 as they belong to first week of 2009.
to_char(date '2008-12-29', 'IYYY') returns incorrectly 2008 instead of 2009.
Note that to_char(date '2008-12-29', 'IW') returns correctly 1
Java Used:
java version "1.6.0_21"
Java(TM) SE Runtime Environment (build 1.6.0_21-b07)
Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1047
HyperSQL Database Engine (HSQLDB) / Bugs / #1047 it is failed that connect to DB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
it is failed that connect to DB when exclamation mark in the full path of hsqldb.jar .
if running the following source, error occurred .
Class.forName("org.hsqldb.jdbcDriver");
DriverManager.getConnection("jdbc:hsqldb:file:" + dbPath, "sa", "");
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1048
HyperSQL Database Engine (HSQLDB) / Bugs / #1048 "in" clause in case or if statement not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create a new database with the following script:
create table inv_txn (id bigint primary key, inv_account_target bigint);
create table inv_element (id bigint primary key, inv_txn bigint, product bigint, quantity bigint);
insert into inv_txn values (1, 1);
insert into inv_txn values(2, 2);
insert into inv_element values (1, 1, 1, 25);
insert into inv_element values (2, 1, 1, 10);
insert into inv_element values (3, 1, 2, 15);
insert into inv_element values (4, 1, 2, 5);
insert into inv_element values (5, 1, 3, 50);
insert into inv_element values (6, 1, 3, 30);
insert into inv_element values (7, 1, 4, 5);
insert into inv_element values (8, 1, 4, 15);
insert into inv_element values (9, 1, 5, 100);
insert into inv_element values (10, 1, 6, 75);
insert into inv_element values (11, 2, 1, 25);
insert into inv_element values (12, 2, 1, 10);
insert into inv_element values (13, 2, 2, 15);
insert into inv_element values (14, 2, 2, 5);
insert into inv_element values (15, 2, 3, 50);
insert into inv_element values (16, 2, 3, 30);
insert into inv_element values (17, 2, 4, 5);
insert into inv_element values (18, 2, 4, 15);
insert into inv_element values (19, 2, 5, 100);
insert into inv_element values (20, 2, 6, 75);
Then run this select statement on it:
select
inv_element.product,
sum(casewhen(inv_txn.inv_account_target in (1), quantity, 0)) as badtarget1qty,
sum(casewhen(inv_txn.inv_account_target = 1, quantity, 0)) as goodtarget1qty,
sum(casewhen(inv_txn.inv_account_target in (2), quantity, 0)) as badtarget2qty,
sum(casewhen(inv_txn.inv_account_target = 2, quantity, 0)) as goodtarget2qty,
sum(casewhen(inv_txn.inv_account_target in (1, 2), quantity, 0)) as badtotalqty,
sum(casewhen(inv_txn.inv_account_target = 1 or inv_txn.inv_account_target = 2, quantity, 0)) as goodtotalqty
from inv_txn
inner join inv_element on inv_txn.id = inv_element.inv_txn
group by product;
As you can see from the results of the select, the "in" clauses in the "casewhen"s never match, but equals does. This is a regression from v1.8, where "in" worked in a "casewhen".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1049
HyperSQL Database Engine (HSQLDB) / Bugs / #1049 Java driver does not handle fractions for TIME data type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The TIME data type discards fraction of second when storing to database as well as when getting from database. Note that in JAVA VM, all temporal data is managed in millis since epoch. Thus when TIME(6) is used, it must be possible to retain the millis and round-trip to database must retain Date that has same millis since epoch. This is not the case in current implementation - HSQL 2.0.
E.g. update MyTable set timeCol=TIME'10:20:30.450' where mypk=25;
This stores 10:20:30 in database and 450 millis are lost.
I do have following recommendation to fix the code:
The culprits are following conversion methods in org.hsqldb.types.DateTimeType class:
In convertJavaToSQL for TIME data type switch the code must be as follows:
if (a instanceof java.sql.Timestamp) {
nanos = ((java.sql.Timestamp) a).getNanos();
nanos = normaliseFraction(nanos, scale);
}
else
{
nanos = (millis%1000) * 1000000;
}
Currently it is
if (a instanceof java.sql.Timestamp) {
nanos = ((java.sql.Timestamp) a).getNanos();
nanos = normaliseFraction(nanos, scale);
}
In convertSQLToJava:
long millis = HsqlDateTime.convertMillisToCalendar(cal,
((TimeData) a).getSeconds() * 1000 + ((TimeData) a).getNanos()/1000000);
Currently it is
long millis = HsqlDateTime.convertMillisToCalendar(cal,
((TimeData) a).getSeconds() * 1000);
In convertSQLToJavaGMT:
millis = ((TimeData) a).getSeconds() * 1000 + ((TimeData) a).getNanos()/1000000
Currently it is
millis = ((TimeData) a).getSeconds() * 1000;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1050
HyperSQL Database Engine (HSQLDB) / Bugs / #1050 Nullpointer in hsqldb-2.0.0 TransactionManager
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting a nullpointer when banging the same tables with multiple queries and inserts from different threads. The exception seems to be happend in hsqldb's internal TransactionManager.
Caused by: java.lang.NullPointerException
at org.hsqldb.TransactionManagerCommon.endActionTPL(Unknown Source)
at org.hsqldb.TransactionManager2PL.completeActions(Unknown Source)
at org.hsqldb.Session.endAction(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:643)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)
at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:636)
at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:665)
at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:673)
at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:713)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1051
HyperSQL Database Engine (HSQLDB) / Bugs / #1051 Deadlock between LobManager and TransactionManager2PL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using HSQLDB 2.0.0 (in-memory) with Hibernate and am experiencing a deadlock when multiple threads persist lobs concurrently. I've replicated the problem in a very simple test case, and it happens immediately. See below for stack traces from deadlocked threads.
Name: Thread-1
State: BLOCKED on org.hsqldb.persist.LobManager@61ae717f owned by: Thread-2
Total blocked: 46 Total waited: 3
Stack trace: 
org.hsqldb.persist.LobManager.adjustUsageCount(Unknown Source)
org.hsqldb.SessionData.adjustLobUsageCount(Unknown Source)
org.hsqldb.TransactionManagerCommon.persistCommit(Unknown Source)
org.hsqldb.TransactionManager2PL.commitTransaction(Unknown Source)
org.hsqldb.Session.commit(Unknown Source)
- locked org.hsqldb.Session@4af429d7
org.hsqldb.jdbc.JDBCConnection.commit(Unknown Source)
- locked org.hsqldb.jdbc.JDBCConnection@233244cd
org.hibernate.transaction.JDBCTransaction.commitAndResetAutoCommit(JDBCTransaction.java:170)
org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:146)
org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:76)
<DELETED>
java.lang.Thread.run(Thread.java:619)
Name: Thread-2
State: WAITING on java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync@34cf935a owned by: Thread-1
Total blocked: 2 Total waited: 1
Stack trace: 
sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)
org.hsqldb.TransactionManager2PL.commitTransaction(Unknown Source)
org.hsqldb.Session.commit(Unknown Source)
- locked org.hsqldb.Session@394300c8
org.hsqldb.Session.executeCompiledStatement(Unknown Source)
org.hsqldb.persist.LobManager.createBlob(Unknown Source)
- locked org.hsqldb.persist.LobManager@61ae717f
org.hsqldb.Session.createBlob(Unknown Source)
org.hsqldb.jdbc.JDBCPreparedStatement.performPreExecute(Unknown Source)
org.hsqldb.jdbc.JDBCPreparedStatement.addBatch(Unknown Source)
- locked org.hsqldb.jdbc.JDBCPreparedStatement@5de867d6
org.hibernate.jdbc.BatchingBatcher.addToBatch(BatchingBatcher.java:53)
org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2418)
org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2858)
org.hibernate.action.EntityInsertAction.execute(EntityInsertAction.java:79)
org.hibernate.engine.ActionQueue.execute(ActionQueue.java:267)
org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:259)
org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:178)
org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321)
org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:51)
org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1206)
org.hibernate.impl.SessionImpl.managedFlush(SessionImpl.java:375)
org.hibernate.transaction.JDBCTransaction.commit(JDBCTransaction.java:137)
org.hibernate.ejb.TransactionImpl.commit(TransactionImpl.java:76)
<DELETED>
java.lang.Thread.run(Thread.java:619)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1052
HyperSQL Database Engine (HSQLDB) / Bugs / #1052 RAWTOHEX NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I do the following:
create table tab ( col blob )
insert into tab values ( X'aabbcc' )
select RAWTOHEX(col) from tab
and the last command throws an
java.sql.SQLException: java.lang.NullPointerException null
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
I use one of the latest jars from the support page. It declared itself as "HSQL Database Engine 2.0.1". I used in-memory database: jdbc:hsqldb:mem:test
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1053
HyperSQL Database Engine (HSQLDB) / Bugs / #1053 Low performance in CREATE TABLE statements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After having upgraded from HSQLDB v1.8.x to HSQLDB v.2.0.0 the Performance of "CREATE TABLE" statement decreased remarkably (I feel it take ten times longer, maybe measured exactly could show a five times longer durance.)
We use an in-memory-instance, very small tables with check-, foreign key- and primary key constraints, and every table is created with default, what should mean "in memory".
Has there been added any new feature in v2.0.0, which is responsible for this low performance, and how should I deal with it?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1054
HyperSQL Database Engine (HSQLDB) / Bugs / #1054 is null stop working in HSQLDB 2.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following sql works fine in HSQLDB 1.8, but the query return nothing after the 2.0 upgrade.
If I change the query to display "is not null", it returns correct number of rows.
======================================================================
create table A(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, name varchar(16))
create table B(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, name varchar(16))
insert into A(name) values('Tom')
insert into B(name) values('Tom')
insert into B(name) values('May')
select *
from B left join A on B.name = A.name
where A.id is null
============================================================================
Thanks
Jacklty
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1055
HyperSQL Database Engine (HSQLDB) / Bugs / #1055 Power() doesnt work for negative arguments
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Power(2,-1) turns out with "invalid argument for power function". This is not normal behaviour in standard SQL. Negative number is a legal argument to Power,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1056
HyperSQL Database Engine (HSQLDB) / Bugs / #1056 ad-hoc resultsets not supported
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
select 1 as n
gives
unexpected end of statement
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1057
HyperSQL Database Engine (HSQLDB) / Bugs / #1057 One prepareStatement method does not support generated keys
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using version 2.0, I found that calling this method:
ps = connection.prepareStatement(query, new String[]{autoIncrementColumnName});
results in a statement that when executed with executeUpdate, does not return any auto generated keys. However by simply replacing that line with this one:
ps = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS );
then the query starts to return the generated keys. This seems like a bug to me. The javadoc (http://hsqldb.org/doc/2.0/apidocs/org/hsqldb/jdbc/JDBCConnection.html) indicates that the first method *should* return a statement capable of returning auto generated keys:
prepareStatement(String sql, String[] columnNames) 
Creates a default PreparedStatement object capable of returning the auto-generated keys designated by the given array.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1058
HyperSQL Database Engine (HSQLDB) / Bugs / #1058 duplicate column name in derived table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I receive an error if I mix * with derived column.
=================================================================
create Table Test(A int, B int, C int)
insert into TEST values(1,1,1)
insert into TEST values(2,2,2)
select *, A+B as D
from TEST
java.sql.SQLException: duplicate column name in derived table
Error Code: -5578
State: 42578
========================================================================
If I list out all individual columns, it runs fine.
select A, B, C, A+B as D
from TEST
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1059
HyperSQL Database Engine (HSQLDB) / Bugs / #1059 database engine fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using HSQL database to replace Oracle in a web application.
My connection is currently stored as an application attribute in Tomcat.
I am not using a connection pool, but just this one connection.
To test the web application I am using JMeter to hit multiple pages with 8 users.
The web application works fine with Oracle, but when I use HSQL I get the following error:
Exception in thread "HSQLDB Connection @8730b8" java.lang.NullPointerException
at org.hsqldb.result.Result.readSimple(Unknown Source)
at org.hsqldb.result.Result.newResult(Unknown Source)
at org.hsqldb.result.Result.newResult(Unknown Source)
at org.hsqldb.server.ServerConnection.receiveResult(Unknown Source)
at org.hsqldb.server.ServerConnection.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
Then the server dies.
And I don't get any errors in Tomcat.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1060
HyperSQL Database Engine (HSQLDB) / Bugs / #1060 Problem setting transaction level
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tested latest snapshot jar (2010/10/04) from http://hsqldb.org/support/index.html.
Setting transaction level to Connection.TRANSACTION_READ_UNCOMMITTED sets connection into read-only-transaction mode. This behavior is different to 2.0.0 GA.
I can't beleave that this is defined in SQL standard.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1061
HyperSQL Database Engine (HSQLDB) / Bugs / #1061 Cannot create table containing column "filter"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get a SQL exception when I try to create a table containing column "filter":
CREATE TABLE t1 ( filter VARCHAR( 2 ) );
Escaping this column name does not help.
This is new with latest snapshot jar (2010/10/04), but was not in 2.0.0 GA.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1062
HyperSQL Database Engine (HSQLDB) / Bugs / #1062 substring omits last character
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After preparation:
create table ding (s varchar(20))
insert into ding values ('1234567890')
this command
select substring(s,0,6) from ding
returns '12345'. However
select left(s,6) from ding
correctly returns '123456'
I used latest bugfix jar (revision 3808) for java 1.5. This problem was not present in 1.8.0.8
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1063
HyperSQL Database Engine (HSQLDB) / Bugs / #1063 rawtohex and empty blob
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After preparation
create table dong (x blob)
insert into dong values (X'')
the statement
select octet_length(X) from dong
correctly returns 0, but
select rawtohex(X) from dong
fails with
[Error Code: -3474, SQL State: 0F502] lob is no longer valid
I used latest bugfix jar (revision 3808) for java 1.5 and in-memory database. This problem was not present in 1.8.0.8.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1064
HyperSQL Database Engine (HSQLDB) / Bugs / #1064 Round() - Inconsistent behavior
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The build-in function - round() doesn't give consistent result.
Can you please take a look?
Thank you so much
======================================================
create table test (num double)
insert into test values(0.004)
insert into test values(0.005)
insert into test values(0.015)
insert into test values(0.025)
insert into test values(0.035)
insert into test values(1312.125)
insert into test values(1312.135)
select num, round(num, 2)
from test
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1065
HyperSQL Database Engine (HSQLDB) / Bugs / #1065 Memory Leak when using Java Language Routines
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I use any JRT functions in sql query, somehow the statement object creates an extra connection.
Even though I close my own connection with "Shutdowm" then JDBC close(), I could not get rid of both connections.
JProfiler shows that both connections are holding the entire database in memory which causing a leak.
The version I used is 2.0.1 RC1, and 2.0.0 doesn't have this problem.
Can you take a look? thanks
Here is my JRT example
import java.util.GregorianCalendar;
import java.util.Calendar;
public class JRT {
//End of the month
public static java.sql.Date END_OF_MONTH(java.sql.Date d) {
if (d==null) return null;
GregorianCalendar cal = new GregorianCalendar();
cal.setTime(d);
int eom = cal.getMaximum(Calendar.DAY_OF_MONTH);
cal.set(Calendar.DAY_OF_MONTH, eom);
return new java.sql.Date(cal.getTimeInMillis());
}
}
=================================================================
create table test (d1 date, d2 date)
insert into test values('2010-01-01', '2010-02-01')
select EOM(d1), d2 from test
shutdown
===========================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1066
HyperSQL Database Engine (HSQLDB) / Bugs / #1066 Don't work Native L&F on start in DatabaseManagerSwing
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When start DatabaseManagerSwing, native L&F don't work (checkbox enabled), when choose Native L&F directly, then work.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1067
HyperSQL Database Engine (HSQLDB) / Bugs / #1067 Error message duplicate
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When use c = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/testdb");
and testdb not exists, catching exception java.sql.SQLException: java.lang.RuntimeException: database alias does not exist database alias does not exist.
*using hsqldb 2.0.1-rc2.
So, don't work "... a new, empty database is created if no database exists at the given path".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1068
HyperSQL Database Engine (HSQLDB) / Bugs / #1068 NullPointerException in Swing JTree
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On right-click on JTree root NullPointerException throws:
Exception in thread "AWT-EventQueue-0" java.lang.NullPointerException
at org.hsqldb.util.DatabaseManagerSwing.quoteTableName(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.access$1300(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing$PopupListener.getCommandString(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing$PopupListener.toString(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.handlePopup(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.mouseReleased(Unknown Source)
at java.awt.AWTEventMulticaster.mouseReleased(Unknown Source)
at java.awt.Component.processMouseEvent(Unknown Source)
at javax.swing.JComponent.processMouseEvent(Unknown Source)
at java.awt.Component.processEvent(Unknown Source)
at java.awt.Container.processEvent(Unknown Source)
at java.awt.Component.dispatchEventImpl(Unknown Source)
at java.awt.Container.dispatchEventImpl(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown Source)
at java.awt.LightweightDispatcher.retargetMouseEvent(Unknown Source)
at java.awt.LightweightDispatcher.processMouseEvent(Unknown Source)
at java.awt.LightweightDispatcher.dispatchEvent(Unknown Source)
at java.awt.Container.dispatchEventImpl(Unknown Source)
at java.awt.Window.dispatchEventImpl(Unknown Source)
at java.awt.Component.dispatchEvent(Unknown Source)
at java.awt.EventQueue.dispatchEvent(Unknown Source)
at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
at java.awt.EventDispatchThread.run(Unknown Source)
Stopping
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1069
HyperSQL Database Engine (HSQLDB) / Bugs / #1069 Command line wrong input not checked
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>java -cp ..\lib\hsqldb.jar org.hsqldb.util.DatabaseManagerSwing -driver
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 1
at org.hsqldb.util.DatabaseManagerSwing.main(Unknown Source)
:)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1070
HyperSQL Database Engine (HSQLDB) / Bugs / #1070 redundant parenthesis in check constraints
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I create a check constraint like this:
create table primes ( prim integer, constraint isPrim check( prim in (2,3,5,7) ) )
then the information schema (INFORMATION_SCHEMA.CHECK_CONSTRAINTS) reports a check clause of 
(PUBLIC.PRIMES.PRIM) IN ((2),(3),(5),(7))
The parenthesis around PUBLIC.PRIMES.PRIM and the numbers are redundant, and should be removed.
I do use one of the latest releases fromm the support page for jdk1.5.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1071
HyperSQL Database Engine (HSQLDB) / Bugs / #1071 ArrayIndexOutOfBoundsException With Array Out Parameters
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We're using HSQLDB to do the unit testing for MyBatis (formerly iBATIS). We found an issue with stored procedures output parameters that are arrays. Calling CallableStatement.getArray() returns ArrayIndexOutOfBoundsException. Here's a test case. I'm using version 2.0.1 rc2.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1072
HyperSQL Database Engine (HSQLDB) / Bugs / #1072 Loading Binary File Hangs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Java 1.6
HSQLDB 2.0.1-rc2
[test-data.sql]
create table testtable (id BIGINT NOT NULL, testdata LONGVARBINARY, PRIMARY KEY (id))
insert into testtable (id) values (100);
\bl ./binaryFile
\bp
update testtable set testdata= ? where id = 100;
[/test-data.sql]
[code]
SqlFile sqlFile = new SqlFile(binaryDataFile);
Connection connection = dataSource.getConnection();
sqlFile.setConnection(connection);
sqlFile.execute();
[/code]
The table is properly created, the row is properly added, the binary data is properly load. When I attempt to update the table I end up in a recursive loop here.
[code]
public class CountUpDownLatch {
...
public void await() throws InterruptedException {
if (count == 0) {
return;
}
latch.await();
}
...
}
[/code]
Not sure if this comes into play as I am just getting familiar with the HSQLDB code base but the txManager is TransactionManager2PL. Please let me know if this is an error or bug or a PEBKAC issue.
Sincerely,
Tim
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1073
HyperSQL Database Engine (HSQLDB) / Bugs / #1073 PSM (PL/SQL) routines do not see variables in MERGE statemen
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to use variables as arguments in MERGE statement, I get 'user lacks' error.
There is a script in attachement that creates database schema.
And here is a procedure that can not be compiled but probably is correct ('lack' on 'vstrTrunc' and 'vnID'):
CREATE PROCEDURE PR_UPDATE_LOGIC_LINE()
MODIFIES SQL DATA
BEGIN ATOMIC
FOR SELECT strTrunc AS vstrTrunc, nID AS vnID FROM TM_DISCRETE_TYPE DO
-- import hourly incremental statistics
MERGE INTO
TM_VOICE_MENU_STAT AS ST
USING
(
SELECT
TRUNC(dtDateTime, vstrTrunc) AS dtDateTime,
strAccNum,
strOmLabel,
strMenuName,
SUM(nServiceDuration) AS nServiceDuration,
COUNT(nServiceDuration) AS nCallsCount
FROM
TM_VOICE_MENU_IMP
GROUP BY
TRUNC(dtDateTime, vstrTrunc),
strAccNum,
strOmLabel,
strMenuName
) AS CT
ON
(
(ST.dtDateTime = CT.dtDateTime) AND
(ST.strAccNum = CT.strAccNum) AND
(ST.strOmLabel = CT.strOmLabel) AND
(ST.strMenuName = CT.strMenuName) AND
(ST.nDiscrType = vnID)
)
WHEN MATCHED THEN
UPDATE SET
ST.nServiceDuration = ST.nServiceDuration + CT.nServiceDuration,
ST.nCallsCount = ST.nCallsCount + CT.nCallsCount,
ST.nID = NEXT VALUE FOR SQ_VOICE_MENU_STAT_ID
WHEN NOT MATCHED THEN
INSERT
(nID, dtDateTime, nDiscrType, strAccNum, strOmLabel,
strMenuName, nServiceDuration, nCallsCount)
VALUES
(NEXT VALUE FOR SQ_VOICE_MENU_STAT_ID, CT.dtDateTime, vnID,
CT.strAccNum, CT.strOmLabel, CT.strMenuName,
CT.nServiceDuration, CT.nCallsCount)
END FOR;
END;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1074
HyperSQL Database Engine (HSQLDB) / Bugs / #1074 Perfectly invalid date/time truncation in TRUNC() function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Simple test case:
CREATE TABLE DUAL ( dummy numeric NOT NULL);
INSERT INTO DUAL (dummy) values ('0');
SELECT
CURRENT_TIMESTAMP AS TIMESTAMP,
TRUNC(CURRENT_TIMESTAMP, 'YYYY') AS YEAR,
TRUNC(CURRENT_TIMESTAMP, 'MM') AS MONTH,
TRUNC(CURRENT_TIMESTAMP, 'DD') AS DAY,
TRUNC(CURRENT_TIMESTAMP, 'HH24') AS HOUR,
TRUNC(CURRENT_TIMESTAMP, 'MI') AS MINUTE
FROM DUAL;
So I get :
TIMESTAMP=2010-11-11 21:25:04.133
YEAR=2010-01-01 03:00:00.0
MONTH=2010-11-12 00:25:04.0
DAY=2010-11-11 03:00:00.0
HOUR=2010-11-12 00:00:00.0
MINUTE=2010-11-12 00:25:04.0
Also, my time zone is GMT+3
And function TRUNC() does not know anything about 'SS' specificator.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1075
HyperSQL Database Engine (HSQLDB) / Bugs / #1075 Invalid sequence number generation on UPDATE in MERGE stmt
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Script to create test schema is in attachement.
When there is no data in TM_VOICE_MENU_STAT table, values for nID column are generated sequentially and correctly.
So this MERGE statement works:
MERGE INTO
TM_VOICE_MENU_STAT AS ST
USING
(
SELECT
TRUNC(dtDateTime, 'HH24') AS dtDateTime,
strAccNum,
strOmLabel,
strMenuName,
SUM(nServiceDuration) AS nServiceDuration,
COUNT(nServiceDuration) AS nCallsCount
FROM
TM_VOICE_MENU_IMP
GROUP BY
TRUNC(dtDateTime, 'HH24'),
strAccNum,
strOmLabel,
strMenuName
) AS CT
ON
(
(ST.dtDateTime = CT.dtDateTime) AND
(ST.strAccNum = CT.strAccNum) AND
(ST.strOmLabel = CT.strOmLabel) AND
(ST.strMenuName = CT.strMenuName) AND
(ST.nDiscrType = 1)
)
WHEN MATCHED THEN
UPDATE SET
ST.nServiceDuration = ST.nServiceDuration + CT.nServiceDuration,
ST.nCallsCount = ST.nCallsCount + CT.nCallsCount,
ST.nID = NEXT VALUE FOR SQ_VOICE_MENU_STAT_ID
WHEN NOT MATCHED THEN
INSERT
(nID, dtDateTime, nDiscrType, strAccNum, strOmLabel,
strMenuName, nServiceDuration, nCallsCount)
VALUES
(NEXT VALUE FOR SQ_VOICE_MENU_STAT_ID, CT.dtDateTime, 1,
CT.strAccNum, CT.strOmLabel, CT.strMenuName,
CT.nServiceDuration, CT.nCallsCount);
But when I execute it again, it fails on 'UNIQUE constraint or index violation'.
That can only be when value for update ST.nID is generated once.
Tested on revision 3889 from subversion repository.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1076
HyperSQL Database Engine (HSQLDB) / Bugs / #1076 In JTree of DatabaseManagerSwing view and data is the same.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When choose View->Show row counts, And right-click on table (for example, "AUTHORIZATIONS ( 5 )"), and choose SELECT * from AUT..., then created wrong query SELECT * FROM INFORMATION_SCHEMA."AUTHORIZATIONS ( 5 )"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1077
HyperSQL Database Engine (HSQLDB) / Bugs / #1077 'set database sql syntax ORA' statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In documentation:
Use <set database sql syntax ORA statement> to enable support for DUAL, ROWNUM, CURRVAL, NEXTVAL and non-standard data types.
But in fact 'set database sql syntax ORA;' does not work: 'unexpected token ;'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1078
HyperSQL Database Engine (HSQLDB) / Bugs / #1078 convert for double returns exponent 0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I do the following:
create table tab ( x double)
insert into tab values ( 0 )
insert into tab values ( 5 )
insert into tab values ( 5.5 )
insert into tab values ( 5.56789 )
the this statement
select x, convert(x,varchar(40)) from tab
returns the following result:
0.0 0.0E0
5.0 5.0E0
5.5 5.5E0
5.56789 5.56789E0
I think, that all the trailing "E0" should be ommitted. As in MySQL, Oracle, PostgreSQL and hsqldb 1.8x. I use one of the latest releases from the support page.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1079
HyperSQL Database Engine (HSQLDB) / Bugs / #1079 Invalid database restoration using log file.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
TEST CASE 1:
1. Create database using hsqldb.sql file.
2. Execute test from Tm_HSQLDBTransactionTest.java.
Test case does simple: it inserts data into memory table (TM_MENU_ITEM_IMP), then executes procedure (PR_UPD_MENU_ITEM_STAT). This procedure:
- moves data from memory table (TM_MENU_ITEM_IMP) to cached table (TM_MENU_ITEM_STAT);
- removes data from memory table (TM_MENU_ITEM_IMP).
After procedure call it commits a transaction.
3. When test finishes normally, cached data is written to binary data file, but database log looks like:
/*C3*/SET SCHEMA PUBLIC
INSERT INTO TM_MENU_ITEM_IMP VALUES('2010-11-15 18:53:12.579000','5555555','test_om_label','test_menu_name',10)
COMMIT
INSERT INTO TM_MENU_ITEM_IMP VALUES('2010-11-15 18:53:12.620000','5555555','test_om_label','test_menu_name',10)
COMMIT
INSERT INTO TM_MENU_ITEM_IMP VALUES('2010-11-15 18:53:12.634000','5555555','test_om_label','test_menu_name',10)
COMMIT
DISCONNECT
So there is:
- no procedure call, no PSQ statements;
- no deletions from memory table;
- no sequence alteration;
4. Connect to database with DatabaseManagerSwing and perform 'SELECT * TM_MENU_ITEM_IMP': There are records in memory table!
TEST CASE 2:
Do similar but terminate test case abnormally (by killing process or java machine) when it reaches instruction 'System.out.println("Not terminated abnormally");'
Now you can see that there are records in memory table and no committed data in a cached table!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1080
HyperSQL Database Engine (HSQLDB) / Bugs / #1080 Deadlock between LobManager and TransactionManager2PL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Similar to the bug 3072706, i can reproduce this problem with hsql in-memory (14-Nov-2011,2.0.1-rc3SNAPSHOT) and hibernate 3.6.
I got a deadlock when multiple threads persist lobs concurrently. 
One thread got a lock on the database, but have to wait before a synchronized method (LobManager.adjustUsageCount)
The other thread wants the lock too, but is in the synchronized method LobManager.setCharsForNewClob.
See below for stack traces from deadlocked threads.
Thx.
Thread [Thread-23] (Suspended)
LobManager.adjustUsageCount(Session, long, int) line: 1215 
SessionData.adjustLobUsageCount(TableBase, Object[], int) line: 403 
TransactionManager2PL(TransactionManagerCommon).persistCommit(Session, Object[], int) line: 104 
TransactionManager2PL.commitTransaction(Session) line: 149 
Session.commit(boolean) line: 553 
JDBCConnection.commit() line: 1028 
NewProxyConnection.commit() line: 803 
JDBCTransaction.commitAndResetAutoCommit() line: 166
JDBCTransaction.commit() line: 142 
HibernateTransactionManager.doCommit(DefaultTransactionStatus) line: 656
HibernateTransactionManager(AbstractPlatformTransactionManager).processCommit(DefaultTransactionStatus) line: 754 
HibernateTransactionManager(AbstractPlatformTransactionManager).commit(TransactionStatus) line: 723 
TransactionInterceptor(TransactionAspectSupport).commitTransactionAfterReturning(TransactionAspectSupport$TransactionInfo) line: 393 
TransactionInterceptor.invoke(MethodInvocation) line: 120 
ReflectiveMethodInvocation.proceed() line: 172 
JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 202 
$Proxy60.insertBpd(BpdPrimaryKey, String, Integer, InvokerMap) line: not available 
TestBpdUpdConfigStateParallelThreads$ConnRaw.run() line: 292 
Thread [Thread-27] (Suspended)
Unsafe.park(boolean, long) line: not available [native method] [local variables unavailable]
LockSupport.park(Object) line: not available
ReentrantReadWriteLock$NonfairSync(AbstractQueuedSynchronizer).parkAndCheckInterrupt() line: not available
ReentrantReadWriteLock$NonfairSync(AbstractQueuedSynchronizer).acquireQueued(AbstractQueuedSynchronizer$Node, int) line: not available
ReentrantReadWriteLock$NonfairSync(AbstractQueuedSynchronizer).acquire(int) line: not available 
ReentrantReadWriteLock$WriteLock.lock() line: not available [local variables unavailable] 
TransactionManager2PL.commitTransaction(Session) line: 134 
Session.commit(boolean) line: 553 
Session.executeCompiledStatement(Statement, Object[]) line: 1332 
LobManager.createBlockAddresses(long, int, int) line: 1303 
LobManager.setBytesIS(long, InputStream, long, boolean) line: 1017 
LobManager.setCharsForNewClob(long, InputStream, long, boolean) line: 1148 
SessionData.allocateLobForResult(ResultLob, InputStream) line: 470 
Session.allocateResultLob(ResultLob, InputStream) line: 1807
JDBCPreparedStatement.performPreExecute() line: 4559
JDBCPreparedStatement.fetchResult() line: 4607 
JDBCPreparedStatement.executeUpdate() line: 308 
NewProxyPreparedStatement.executeUpdate() line: 105 
NonBatchingBatcher.addToBatch(Expectation) line: 46 
SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], boolean[], int, String, Object, SessionImplementor) line: 2416 
SingleTableEntityPersister(AbstractEntityPersister).insert(Serializable, Object[], Object, SessionImplementor) line: 2856 
EntityInsertAction.execute() line: 79 
ActionQueue.execute(Executable) line: 273 
ActionQueue.executeActions(List) line: 265 
ActionQueue.executeActions() line: 184 
DefaultFlushEventListener(AbstractFlushingEventListener).performExecutions(EventSource) line: 321 
DefaultFlushEventListener.onFlush(FlushEvent) line: 51 
SessionImpl.flush() line: 1216 
SessionImpl.managedFlush() line: 383
JDBCTransaction.commit() line: 133 
HibernateTransactionManager.doCommit(DefaultTransactionStatus) line: 656
HibernateTransactionManager(AbstractPlatformTransactionManager).processCommit(DefaultTransactionStatus) line: 754 
HibernateTransactionManager(AbstractPlatformTransactionManager).commit(TransactionStatus) line: 723 
TransactionInterceptor(TransactionAspectSupport).commitTransactionAfterReturning(TransactionAspectSupport$TransactionInfo) line: 393 
TransactionInterceptor.invoke(MethodInvocation) line: 120 
ReflectiveMethodInvocation.proceed() line: 172 
JdkDynamicAopProxy.invoke(Object, Method, Object[]) line: 202 
$Proxy60.insertBpd(BpdPrimaryKey, String, Integer, InvokerMap) line: not available 
TestBpdUpdConfigStateParallelThreads$ConnRaw.run() line: 292
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1081
HyperSQL Database Engine (HSQLDB) / Bugs / #1081 SQLException with NullPointerException in cause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Database creation scipt (sql), empty database snapshot (tar.gz) will provide.
Tested under jdk 1.5.0.12. For tests used latest snasphot from Subversion.
Also, test case is in attachement, too.
SELECTOR2: SQL exception
java.lang.NullPointerException null
org.hsqldb.jdbc.Util.sqlException(Util.java:223)
org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4629)
org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(JDBCPreparedStatement.java:284)
test.Tm_MultiThreadTest$Tm_SelectorThread2.run(Tm_MultiThreadTest.java:323)
SELECTOR1: SQL exception
java.lang.NullPointerException null
org.hsqldb.jdbc.Util.sqlException(Util.java:223)
org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4629)
org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(JDBCPreparedStatement.java:284)
test.Tm_MultiThreadTest$Tm_SelectorThread1.run(Tm_MultiThreadTest.java:243)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1082
HyperSQL Database Engine (HSQLDB) / Bugs / #1082 Embeded Blocks in Multithreaded environment
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm usgin v2.0.1RC2 embeded with my application.
It get blocked arbitrarily when two threads that share the same connection executes two statements (one each).
Is not possible to share connections?
Thanks a lot...
Good work!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1083
HyperSQL Database Engine (HSQLDB) / Bugs / #1083 HSQL can't read it's own timestamps
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I want to transfer some data from one database to the next I would select the columns from one database connection and then insert into the other database connection. This works fine for strings and numbers, but when it comes to times and timestamps, the output format of the select is incompatible with the input format of the insert. It would be really nice if HSQL could reads it's own output. The error is: Wrong data type: java.lang.IllegalArgumentException: Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
I've seen this in both 1.8.x and 2.0.1-rc2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1084
HyperSQL Database Engine (HSQLDB) / Bugs / #1084 NullPointerException in changeToDiskTable (session==null)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I got a NullPointerException on an Select (<tt>SELECT LIMIT 0 1000 * FROM ViewJoinedItems;</tt>) on a View which has more than 10000 items and following prev. statement set:
<pre>
SET FILES CACHE SIZE 10000
</pre>
I think the problem is in the call to <tt>changeToDiskTable</tt> here (<tt>RowStoreAVLHybrid.getNewCachedObject(Session, Object) line: 235</tt>):
<pre>
if (useDisk && memoryRowCount > maxMemoryRowCount) {
changeToDiskTable(session);
return getNewCachedObject(session, object);
}
</pre>
where <tt>useDisk</tt> is <tt>true</tt> and <tt>memoryRowCount > maxMemoryRowCount</tt> is true. The call to <tt>getNewCachedObject</tt> was done from here <tt>TableDerived(Table).insertData(Session, PersistentStore, Object[]) line: 2590</tt>:
<pre>
Row row = (Row) store.getNewCachedObject(null, data);
</pre>
as you can see the session parameter is set to <tt>null</tt>, this case will not be checked in <tt>getNewCachedObject</tt> and <tt>changeToDiskTable</tt>!
here is the Stack:
<pre>
RowStoreAVLHybrid.changeToDiskTable(Session) line: 392 
RowStoreAVLHybrid.getNewCachedObject(Session, Object) line: 235 
TableDerived(Table).insertData(Session, PersistentStore, Object[]) line: 2590 
TableDerived(Table).insertResult(Session, PersistentStore, Result) line: 2569 
SubQuery.materialise(Session) line: 285 
StatementQuery(StatementDMQL).materializeSubQueries(Session) line: 286
StatementQuery(StatementDMQL).execute(Session) line: 187 
Session.executeCompiledStatement(Statement, Object[]) line: 1296 
Session.executeDirectStatement(Result) line: 1185 
Session.execute(Result) line: 974 
</pre>
I use the the newest hsqldb-2.0 version.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1085
HyperSQL Database Engine (HSQLDB) / Bugs / #1085 OutOfMemory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After updating to hsqldb (02 December 2010. HyperSQL 2.0.1 RC3 ) my previous problem is fixed, thanks.
But now, my whole TestSuite doesn't work in the in memory-variant. The server-standalone is still okay, in the last stable version the test was okay with heapspace 512m, now with a lot more heapspace (1568m) I get a OutOfMemory at all.
The attached stacktrace only tell us the part where the memory is called, but not where the other memory is hold.
If you tell me what you need, I will give your extra information.
Greetings
Christian
org.springframework.dao.TransientDataAccessResourceException: PreparedStatementCallback; SQL [INSERT INTO BPD (BANK_CODE,COUNTRY_CODE,FINTS_VER,TRANSPORT_CHANNEL,OPTLOCK,BPD,BPD_VER) VALUES ('XXX','XXX',400,?,1,?,1)]; java.lang.OutOfMemoryError: Java heap space; nested exception is java.sql.SQLException: java.lang.OutOfMemoryError: Java heap space
at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:107)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602)
at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:811)
at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:867)
at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:875)
at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.update(SimpleJdbcTemplate.java:249)
at de.ppi.travic.retail.performancetest.servlet.TestPerformanceTestFinTs30.afterTest(TestPerformanceTestFinTs30.java:50)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.test.context.transaction.TransactionalTestExecutionListener.runAfterTransactionMethods(TransactionalTestExecutionListener.java:236)
at org.springframework.test.context.transaction.TransactionalTestExecutionListener.afterTestMethod(TransactionalTestExecutionListener.java:186)
at org.springframework.test.context.TestContextManager.afterTestMethod(TestContextManager.java:406)
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:90)
at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)
at org.junit.runners.Suite.runChild(Suite.java:128)
at org.junit.runners.Suite.runChild(Suite.java:24)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.junit.runners.Suite.runChild(Suite.java:128)
at org.junit.runners.Suite.runChild(Suite.java:24)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.sql.SQLException: java.lang.OutOfMemoryError: Java heap space
at org.hsqldb.jdbc.Util.sqlException(Util.java:380)
at org.hsqldb.jdbc.Util.sqlException(Util.java:103)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4611)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(JDBCPreparedStatement.java:308)
at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105)
at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:817)
at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:1)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)
... 47 more
Caused by: org.hsqldb.HsqlException: java.lang.OutOfMemoryError: Java heap space
at org.hsqldb.error.Error.error(Error.java:108)
at org.hsqldb.SessionData.allocateLobForResult(SessionData.java:424)
at org.hsqldb.Session.allocateResultLob(Session.java:1811)
at org.hsqldb.jdbc.JDBCPreparedStatement.performPreExecute(JDBCPreparedStatement.java:4559)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4607)
... 52 more
Caused by: java.lang.OutOfMemoryError: Java heap space
at org.hsqldb.persist.LobStoreMem.setBlockBytes(LobStoreMem.java:97)
at org.hsqldb.persist.LobManager.setBytesIS(LobManager.java:1189)
at org.hsqldb.persist.LobManager.setCharsForNewClob(LobManager.java:1296)
at org.hsqldb.SessionData.allocateLobForResult(SessionData.java:416)
at org.hsqldb.Session.allocateResultLob(Session.java:1811)
at org.hsqldb.jdbc.JDBCPreparedStatement.performPreExecute(JDBCPreparedStatement.java:4559)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4607)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(JDBCPreparedStatement.java:308)
at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105)
at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:817)
at org.springframework.jdbc.core.JdbcTemplate$2.doInPreparedStatement(JdbcTemplate.java:1)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)
at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:811)
at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:867)
at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:875)
at org.springframework.jdbc.core.simple.SimpleJdbcTemplate.update(SimpleJdbcTemplate.java:249)
at de.ppi.travic.retail.performancetest.servlet.TestPerformanceTestFinTs30.afterTest(TestPerformanceTestFinTs30.java:50)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.springframework.test.context.transaction.TransactionalTestExecutionListener.runAfterTransactionMethods(TransactionalTestExecutionListener.java:236)
at org.springframework.test.context.transaction.TransactionalTestExecutionListener.afterTestMethod(TransactionalTestExecutionListener.java:186)
at org.springframework.test.context.TestContextManager.afterTestMethod(TestContextManager.java:406)
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:90)
at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1086
HyperSQL Database Engine (HSQLDB) / Bugs / #1086 USING keyword not accepted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We normally run our application with a Oracle 10g R2 database.
For unit testing reasons we'd like to use HSQLDB (we downloaded hsqldb-2.0.0).
We setup a JUnit test environment were we read in our DB scripts to create the DB.
We adapted current scripts by converting VARCHAR2 --> VARCHAR, NUMBER ---> INTEGER or NUMERIC or similar.
But we thought, the USING keyword is allowed since it is on the feature list.
But we got following error
java.sql.SQLException: unexpected token: USING : line: 18
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at <a company>.DAS2.DAS2TestHelper.executeSqlStatements(DAS2TestHelper.java:171)
...
at junit.framework.TestCase.runBare(TestCase.java:132)
at junit.framework.TestResult$1.protect(TestResult.java:110)
at junit.framework.TestResult.runProtected(TestResult.java:128)
at junit.framework.TestResult.run(TestResult.java:113)
at junit.framework.TestCase.run(TestCase.java:124)
at junit.framework.TestSuite.runTest(TestSuite.java:232)
at junit.framework.TestSuite.run(TestSuite.java:227)
at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:79)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.hsqldb.HsqlException: unexpected token: USING : line: 18
at org.hsqldb.error.Error.parseError(Unknown Source)
at org.hsqldb.ParserBase.unexpectedToken(Unknown Source)
at org.hsqldb.ParserDDL.compileCreateTableBody(Unknown Source)
at org.hsqldb.ParserDDL.compileCreateTable(Unknown Source)
at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 21 more
when we executed this script:
CREATE TABLE FRAMEWORK_MST_PP
(
RAWID INTEGER NOT NULL,
FRAMEWORK_SET_ID VARCHAR(30) NOT NULL,
FRAMEWORK_ID VARCHAR(30) NOT NULL,
MEMBER_ID VARCHAR(30) NOT NULL,
SERVER_IP VARCHAR(30) NOT NULL,
SHELL_PATH VARCHAR(30) NOT NULL,
PRIORITY INTEGER NOT NULL,
SUPERVISOR_START_YN CHAR NOT NULL,
FAILOVER_YN CHAR NOT NULL,
CREATE_DTTS TIMESTAMP(6),
CREATE_BY VARCHAR(30),
LAST_UPDATE_DTTS TIMESTAMP(6),
LAST_UPDATE_BY VARCHAR(30),
CONSTRAINT IDX_FRAMEWORK_PK
PRIMARY KEY
(RAWID) USING INDEX TABLESPACE EES_MST_IDX,
CONSTRAINT IDX_FRAMEWORK_UK02
UNIQUE (FRAMEWORK_ID, PRIORITY) USING INDEX TABLESPACE EES_MST_IDX,
CONSTRAINT IDX_FRAMEWORK_UK01
UNIQUE (FRAMEWORK_ID, MEMBER_ID) USING INDEX TABLESPACE EES_MST_IDX 
)
TABLESPACE EES_MST_DAT
;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1087
HyperSQL Database Engine (HSQLDB) / Bugs / #1087 Query with result errors when mixing subquery and group by
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
to view the error, try:
prepare data with this querry:
create table a (a varchar(10), b varchar(10))
insert into a (a,b) values ('a1', 'b')
insert into a (a,b) values ('a2', 'b')
create table b (a varchar(10), c integer)
insert into b (a,c) values ('a1', 1)
insert into b (a,c) values ('a1', 1)
insert into b (a,c) values ('a2', 1)
insert into b (a,c) values ('a2', 1)
next try:
1) 
select 
a.b,
(select sum(b.c) from b where b.a = a.a) as z
from a 
ok, returns 
b - 2
b - 2
2) now try
select 
a.b,
sum( 
(select sum(b.c) from b where b.a = a.a) 
) as z
from a
group by a.b
errors !!
must be return a record with 
b - 4
3) now, if you write
select 
a.b,
(select sum(b.c) from b where b.a = a.a) as z
from a
group by a.b
error, return a record with
b - 2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1088
HyperSQL Database Engine (HSQLDB) / Bugs / #1088 SYSDATE not accepted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
At http://www.hsqldb.org/doc/guide/ch09.html we can read that SYSDATE can be used:
-----
When specifying default values for date / time columns in CREATE TABLE statements, or in SELECT,INSERT, and UPDATE statements, special SQL functions: NOW, SYSDATE, TODAY, CURRENT_TIMESTAMP, CURRENT_TIME and CURRENT_DATE (case independent) can be used
----
But using hsqldb-2.0.1-rc3 and executing our scripts like
CREATE TABLE CTX_CONTEXT_MST_PP
(
ID INTEGER NOT NULL,
CONTEXT_ID VARCHAR(500),
CONTEXT_NAME VARCHAR(500),
VIEW_NAME VARCHAR(500),
VALUE_FIELD VARCHAR(500),
CREATE_DTTS TIMESTAMP DEFAULT SYSDATE,
CREATE_BY VARCHAR(256),
LAST_UPDATE_DTTS TIMESTAMP DEFAULT SYSDATE,
LAST_UPDATE_BY VARCHAR(256)
)
we got following Exception:
Caused by: org.hsqldb.HsqlException: unexpected token: SYSDATE : line: 21
at org.hsqldb.error.Error.parseError(Error.java:95)
at org.hsqldb.ParserBase.unexpectedToken(ParserBase.java:794)
at org.hsqldb.ParserRoutine.readDefaultClause(ParserRoutine.java:201)
at org.hsqldb.ParserDDL.readColumnDefinitionOrNull(ParserDDL.java:2299)
at org.hsqldb.ParserDDL.compileCreateTableBody(ParserDDL.java:967)
at org.hsqldb.ParserDDL.compileCreateTable(ParserDDL.java:882)
at org.hsqldb.ParserDDL.compileCreate(ParserDDL.java:151)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:206)
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:88)
at org.hsqldb.Session.executeDirectStatement(Session.java:1170)
at org.hsqldb.Session.execute(Session.java:972)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1818)
... 20 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1089
HyperSQL Database Engine (HSQLDB) / Bugs / #1089 datediff 'ms' returns nanoseconds
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that in hsqldb-2.0.0, the following returns units in nanoseconds.
select datediff('ms', CURRENT_TIMESTAMP, dateadd('ss', 1, CURRENT_TIMESTAMP)) from dummy
According to the documentation, it should return 1000 (milliseconds). But it returns 1000000000 (nanoseconds).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1090
HyperSQL Database Engine (HSQLDB) / Bugs / #1090 wrong result set for query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When i run the following query on the attached database (2.0.1-rc3 version) i get 2 results instead of one.
You can see that the join does not work correctly:
select this_.id,this_.name,agentdbpro1_.DB_ID,agentdbpro1_.AGENT_ID from AGENTS this_ left outer join AGENTS_FOR_SERVERS this_1_ on this_.ID=this_1_.AGENT_ID inner join DBS_FOR_AGENTS agentdbpro1_ on this_.ID=agentdbpro1_.AGENT_ID where this_.IS_DEFAULT<>'Y' and this_.IS_MERGED<>'Y' and agentdbpro1_.DB_ID=103;
Checked the same on 2.0.0 version and it was fine
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1091
HyperSQL Database Engine (HSQLDB) / Bugs / #1091 CountUpDownLatch seems insufficiently concurrent
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a highly threaded environment (64-256 simultaneous connections all accessing an embedded db with a mix of read/write, mostly read), I get stuck at the latch.await() call in Session.executeCompiledStatement(); various others have reported this on the forum. It is a bear to replicate, but seems more prone to happen with more cores (my machine is a quad-core).
In looking at the code, CountUpDownLatch seems problematic; the filed 'count' is not volaitle, which means under concurrent access, different threads can increment incorrectly. FOr example:
assume count=3
Thread 1 calls countDown(), in its memory picture 3-1 becomes 2.
at the same time
Thread 2 call countUp(); in its memory picture it has it's own copy of count, no volatile, so 3+1 becomes 4, when it should have been 3.
In fact, while volatile will help, it should probably be an AtomicInteger, or similar structure. Volatile would however be enough if the CountUpDownLatch is accessed by separate threads under an exclusive lock; a surface look indicates this is the case. Exclusive locking however does not guarantee the memory barrier effect of volatile.
Without doing more looking in TransactionManagerCommon et al, I can't tell if the methods within CountUpDownLatch are meant to be atomic; setCount() in particular seems like it should execute synchronized from all other CountUpDownLatch methods, but the usage pattern of CountUpDownLatch may protect against this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1092
HyperSQL Database Engine (HSQLDB) / Bugs / #1092 Case/When unsupported internal operation: ExpressionOp
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I had a query that used to work with V1.8.1 but now fails in V2.0.0 with ArrayIndexOutOfBounds exception and now in V2.0.1RC3 with 'unsupported internal operation: ExpressionOp'.
(Just create a single column table t1 with A set to some string value, then try the query)
select
(case 
when A like 'A%' 
then 'Foo'
when A like 'B%' 
then 'Foo B' 
end) as NO_WORKY
from
t1
(Below is the stack trace)
Caused by: java.lang.RuntimeException: unsupported internal operation: ExpressionOp
at org.hsqldb.error.Error.runtimeError(Error.java:66)
at org.hsqldb.ExpressionOp.resolveTypes(ExpressionOp.java:459)
at org.hsqldb.ExpressionLogical.resolveTypes(ExpressionLogical.java:567)
at org.hsqldb.ExpressionLogical.resolveTypes(ExpressionLogical.java:567)
at org.hsqldb.ExpressionLike.resolveTypes(ExpressionLike.java:122)
at org.hsqldb.ExpressionOp.resolveTypesForCaseWhen(ExpressionOp.java:476)
at org.hsqldb.ExpressionOp.resolveTypes(ExpressionOp.java:449)
at org.hsqldb.ExpressionOp.resolveTypesForCaseWhen(ExpressionOp.java:504)
at org.hsqldb.ExpressionOp.resolveTypes(ExpressionOp.java:449)
at org.hsqldb.QuerySpecification.resolveExpressionTypes(QuerySpecification.java:678)
at org.hsqldb.QuerySpecification.resolveTypesPartOne(QuerySpecification.java:807)
at org.hsqldb.QueryExpression.resolve(QueryExpression.java:197)
at org.hsqldb.ParserDQL.compileCursorSpecification(ParserDQL.java:5437)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:133)
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:88)
at org.hsqldb.Session.executeDirectStatement(Session.java:1170)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1093
HyperSQL Database Engine (HSQLDB) / Bugs / #1093 Uncaught Exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have downloaded the latest driver for 1.6, today, and the problem still exists:
We have a DB-connection monitoring, which catch Exceptions due to connection-lost. This works quite fine. Since we have implemented a generic UncaughtExceptionHandler for all running Threads in the app the Exceptions from HSQLDB are also caught:
java.lang.RuntimeException
at org.hsqldb.jdbc.JDBCConnection$1.run(JDBCConnection.java:2829)
Little bit annoying is, that this exception cannot be handled in our app. Anyway, is there a chance that this exception is caught within HSQLDB-driver?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1094
HyperSQL Database Engine (HSQLDB) / Bugs / #1094 INTERVAL Constant '0:0:0' Not Support (oringal Id  3019349)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have report the same bug (Id 3019349 ) before but it is closed as invalid. But when I check ANSI SQL-92 standard, your comment is incorrect. '0:0:0' is a valid hour to send interval according to ANSI SQL 92 standard:
_________Table_7-Valid_values_for_fields_in_INTERVAL_items_________
_Keyword______Valid_values_of_INTERVAL_fields______________________
| YEAR | Unconstrained except by <interval leading field |
precision
| MONTH | Months (within years) (0-11) |
| | |
| DAY | Unconstrained except by <interval leading field |
precision
| HOUR | Hours (within days) (0-23) |
| | |
| MINUTE | Minutes (within hours) (0-59) |
| | |
|_SECOND_____|_Seconds_(within_minutes)_(0-59.999...)______________|
| | |
Values in interval fields other than SECOND are integers. SECOND,
however, can be defined to have an <interval fractional seconds
precision> that indicates the number of decimal digits maintained
following the decimal point in the seconds value.
<day-time interval> ::=
<days value>
[ <space> <hours value> [ <colon> <minutes value> [ <colon> <seconds value> ] ] ]
<hours value> ::= <datetime value>
<minutes value> ::= <datetime value>
<datetime value> ::= <unsigned integer>
_________Table_11-Valid_values_for_fields_in_INTERVAL_items________
_Keyword______Valid_values_of_INTERVAL_fields______________________
| MONTH | 0 to 11 |
| | |
| HOUR | 0 to 23 |
| | |
| MINUTE | 0 to 59 |
| | |
| SECOND | 0 to 59.9(N) where "9(N)" indicates the number of |
digits specified by <interval fractional seconds
______________precision>_in_the_<interval_qualifier>.______________
|8) An item o| type interval can contain positive or negative inter|
| vals. | |
| | |
Leveling Rules
Because I can't reopen the original bug, I create it again.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1095
HyperSQL Database Engine (HSQLDB) / Bugs / #1095 NPE in RowStoreAVLDisk
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using hsqldb 2.0.1-rc3 compiled for JDK 1.5 with hsqldb.default_table_type=cached
The problem occurs when 2 threads are both deleting rows from the same table. 
I get this exception :
java.sql.SQLException: java.lang.NullPointerException null
at org.hsqldb.jdbc.Util.sqlException(Util.java:223)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4629)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(JDBCPreparedStatement.java:310)
at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105)
at org.hibernate.hql.ast.exec.MultiTableDeleteExecutor.execute(MultiTableDeleteExecutor.java:116)
at org.hibernate.hql.ast.QueryTranslatorImpl.executeUpdate(QueryTranslatorImpl.java:421)
at org.hibernate.engine.query.HQLQueryPlan.performExecuteUpdate(HQLQueryPlan.java:283)
at org.hibernate.impl.SessionImpl.executeUpdate(SessionImpl.java:1169)
at org.hibernate.impl.QueryImpl.executeUpdate(QueryImpl.java:117)
at net.entropysoft.cetl.mirroring.persistance.MirroringTaskDao$1.doInHibernate(MirroringTaskDao.java:65)
at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:406)
... 33 more
And the cause is that cache is null at RowStoreAVLDisk.add:130
Thread [pool-1-thread-2] (Suspended (exception java.lang.NullPointerException)) 
org.hsqldb.persist.RowStoreAVLDisk.add(org.hsqldb.persist.CachedObject) line: 130 
org.hsqldb.persist.RowStoreAVLDisk.getNewCachedObject(org.hsqldb.Session, java.lang.Object, boolean) line: 151 
org.hsqldb.Table.insertSingleRow(org.hsqldb.Session, org.hsqldb.persist.PersistentStore, java.lang.Object[], int[]) line: 2498 
org.hsqldb.StatementInsert(org.hsqldb.StatementDML).insertRowSet(org.hsqldb.Session, org.hsqldb.navigator.RowSetNavigator, org.hsqldb.navigator.RowSetNavigator) line: 771
org.hsqldb.StatementInsert.getResult(org.hsqldb.Session) line: 139 
org.hsqldb.StatementInsert(org.hsqldb.StatementDMQL).execute(org.hsqldb.Session) line: 190
org.hsqldb.Session.executeCompiledStatement(org.hsqldb.Statement, java.lang.Object[]) line: 1294 
org.hsqldb.Session.execute(org.hsqldb.result.Result) line: 956 
org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult() line: 4621 
org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate() line: 310 
I don't get this NPE when I use memory table. Instead I get "java.sql.SQLException: user lacks privilege or object not found: HT_MIRRORING_TASK" where HT_MIRRORING_TASK is an hibernate temporary table. I use default isolation level
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1096
HyperSQL Database Engine (HSQLDB) / Bugs / #1096 OutOfMemoryError when using cached tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using hsqldb 2.0.1-rc3 compiled for JDK 1.5 with hsqldb.default_table_type=cached
I added 50000 items in my table while using cached table (As expected I get an OutOfMemoryError when I use memory tables)
When I try to delete these items , I get an OutOfMemoryError :
Caused by: java.sql.SQLException: java.lang.OutOfMemoryError: Java heap space
at org.hsqldb.jdbc.Util.sqlException(Util.java:223)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4629)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(JDBCPreparedStatement.java:310)
at com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeUpdate(NewProxyPreparedStatement.java:105)
at org.hibernate.hql.ast.exec.BasicExecutor.execute(BasicExecutor.java:101)
at org.hibernate.hql.ast.QueryTranslatorImpl.executeUpdate(QueryTranslatorImpl.java:421)
at org.hibernate.engine.query.HQLQueryPlan.performExecuteUpdate(HQLQueryPlan.java:283)
at org.hibernate.impl.SessionImpl.executeUpdate(SessionImpl.java:1169)
at org.hibernate.impl.QueryImpl.executeUpdate(QueryImpl.java:117)
at net.entropysoft.cetl.mirroring.persistance.MirroredItemDao$1.doInHibernate(MirroredItemDao.java:195)
at org.springframework.orm.hibernate3.HibernateTemplate.doExecute(HibernateTemplate.java:406)
... 28 more
Here is where this OutOfMemoryError occurs :
Thread [main] (Suspended (exception java.lang.OutOfMemoryError))
org.hsqldb.persist.DataFileCache.getFromFile(int, org.hsqldb.persist.PersistentStore, boolean) line: 741
org.hsqldb.persist.DataFileCache.get(int, org.hsqldb.persist.PersistentStore, boolean) line: 704
org.hsqldb.persist.RowStoreAVLDisk.get(int, boolean) line: 106 
org.hsqldb.index.NodeAVLDisk.findNode(org.hsqldb.persist.PersistentStore, int) line: 192
org.hsqldb.index.NodeAVLDisk.getLeft(org.hsqldb.persist.PersistentStore) line: 234 
org.hsqldb.index.IndexAVL.next(org.hsqldb.persist.PersistentStore, org.hsqldb.index.NodeAVL) line: 1262 
org.hsqldb.index.IndexAVL.next(org.hsqldb.Session, org.hsqldb.persist.PersistentStore, org.hsqldb.index.NodeAVL, int) line: 1186
org.hsqldb.index.IndexAVL$IndexRowIterator.getNextRow() line: 1779 
org.hsqldb.RangeVariable$RangeIteratorMain.findNext() line: 1141
org.hsqldb.RangeVariable$RangeIteratorMain.next() line: 972 
org.hsqldb.StatementDML.executeDeleteStatement(org.hsqldb.Session) line: 1064 
org.hsqldb.StatementDML.getResult(org.hsqldb.Session) line: 206 
org.hsqldb.StatementDML(org.hsqldb.StatementDMQL).execute(org.hsqldb.Session) line: 190 
org.hsqldb.Session.executeCompiledStatement(org.hsqldb.Statement, java.lang.Object[]) line: 1294 
org.hsqldb.Session.execute(org.hsqldb.result.Result) line: 956 
org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult() line: 4621 
org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate() line: 310
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1097
HyperSQL Database Engine (HSQLDB) / Bugs / #1097 missing syncronized block for time conversion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following error occurs on HSQL version 1.8.0 & 1.8.1:
Frame : java.sql.SQLException: Wrong data type: type: TIMESTAMP (93) expected: CHAR value: 2010-05-18 15:41:29.332
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSet.getColumnInType(Unknown Source)
at org.hsqldb.jdbc.jdbcResultSet.getString(Unknown Source)
Problem is in class: HsqlDateTime
the following method should be fixed - to add syncronized block on the calendar object:
/**
* Creates a full length timestamp string, with 9 digist for nanos
*/
public static String getTimestampString(Timestamp x, Calendar cal)
{
synchronized (sdfts)
{
Calendar c = cal == null ? tempCalDefault : cal;
synchronized (c)
{
sdfts.setCalendar(c);
String n = String.valueOf(x.getNanos());
return sdfts.format(x) + zeronanos.substring(n.length())
+ n;
}
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1098
HyperSQL Database Engine (HSQLDB) / Bugs / #1098 incompatible data type in conversion with java.lang.Boolean
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When adding a java.lang.Boolean as an Argument of a PreparedStatement via
java.sql.PreparedStatement.setObject(int, Object)
im getting a Stacktrace like this:
java.sql.SQLException: incompatible data type in conversion
at org.hsqldb.jdbc.Util.throwError(Util.java:81)
at org.hsqldb.jdbc.JDBCPreparedStatement.setParameter(JDBCPreparedStatement.java:4264)
at org.hsqldb.jdbc.JDBCPreparedStatement.setObject(JDBCPreparedStatement.java:1056)
...
The Query looks like this:
SELECT * FROM X WHERE 0=?
I tried 2.x rc2 and rc3 and it seemed to be no problem in 1.8.x
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1099
HyperSQL Database Engine (HSQLDB) / Bugs / #1099 'incompatible data types in combination' with timestamps
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm getting an SQLException, running an arithmetic operation on a Timestamp.
My java code looks like:
Connection connection = getConnection();
connection.createStatement().executeUpdate("CREATE TABLE A (a_timestamp TIMESTAMP NOT NULL)");
connection.createStatement().executeQuery("SELECT (a_timestamp + a_timestamp) TSDIFF FROM A");
The query fails with an SQLException saying: incompatible data types in combination
[code=-5562, state=42562]
This query happened to be no problem in hsql1.8.x. I already tried hsql2 rc3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1100
HyperSQL Database Engine (HSQLDB) / Bugs / #1100 'LIMIT 0' broken 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'select * from anytable limit 0' is a valid query (I agree, doesn't make a lot of sense) and HSQLDB 1.8 correctly returned zero rows. Release 2.0 (including 2.0.1 RC3) throws an error: 'Data exception: invalid row count in fetch first clause, Sql state: 2201W, Error Code: -3452'.
The bogus part is in org.hsqldb.QuerySpecification, lines 1178-1187:
1178 if (value == null || value.intValue() <= 0) {
1179 throw Error.error(ErrorCode.X_2201W);
1180 }
1181
1182 if (value.intValue() == 0) {
1183 limitRows = Integer.MAX_VALUE;
1184 } else {
1185 limitRows = value.intValue();
1186 hasLimits = true;
1187 }
Line 1178 checks for <= 0. Line 1182 allows 0 as a valid value, but asigns 'no limit'(!) which again would be wrong, if line 1178 were fixed.
In my opinion, 'LIMIT 0' should, as in the earlier release, return a result with zero rows. All other rdbms behave like this.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1101
HyperSQL Database Engine (HSQLDB) / Bugs / #1101 invalid results for queries on indexed columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Those 2 examples demonstrate strange behaviour relating to queries on indexed columns.
Example1 - expected row is missing:
-- create simple table
CREATE TABLE TESTTABLE (TESTCOL VARCHAR(255), ID BIGINT NOT NULL, PRIMARY KEY (ID));
-- insert example data
INSERT INTO TESTTABLE VALUES('000000000000201', 1);
INSERT INTO TESTTABLE VALUES('000000000999202', 2);
INSERT INTO TESTTABLE VALUES('000000000111201', 3);
INSERT INTO TESTTABLE VALUES('000000001000201', 4);
-- select with LIKE functionality -> returns 3 rows - correct
SELECT * FROM TESTTABLE WHERE TESTCOL LIKE '00%01';
-- create an index
CREATE INDEX I_U_TESTCOL ON TESTTABLE (TESTCOL);
-- same select as above -> return 2 rows - 1 is missing
SELECT * FROM TESTTABLE WHERE TESTCOL LIKE '00%01';
Example2 - unexepcted row:
-- create simple table
CREATE TABLE TESTTABLE2 (TESTCOL VARCHAR(255), ID BIGINT NOT NULL, PRIMARY KEY (ID));
-- insert example data
INSERT INTO TESTTABLE2 VALUES('1111', 1);
-- select returns 1 row - correct
SELECT * FROM TESTTABLE2 WHERE TESTCOL = '1111' or TESTCOL = 'x' or TESTCOL = '1111';
-- create an index
CREATE INDEX I_U_TESTCOL2 ON TESTTABLE2 (TESTCOL);
-- same select as above -> returns 2 rows - each row represents the same entry
SELECT * FROM TESTTABLE2 WHERE TESTCOL = '1111' or TESTCOL = 'x' or TESTCOL = '1111';
We used the 1.5 compiled version of hsql2X (Specification-Version: 2.0.1-rc3SNAPSHOT)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1102
HyperSQL Database Engine (HSQLDB) / Bugs / #1102 Discrepancy between getObject(int) and getArray(int)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have found a discrepancy between the two PreparedStatement methods getObject(int) and getArray(int) for DATE ARRAY columns.
It can be reproduced as follows:
SQL code
-------------------------------------------
CREATE TABLE arr (
date_array DATE ARRAY
);
INSERT INTO arr (date_array) values (ARRAY['1981-07-10']);
Java code
-------------------------------------------
PreparedStatement stmt = getConnection().prepareStatement("select date_array, date_array[1] from arr");
ResultSet rs = stmt.executeQuery();
rs.next();
Object[] array1 = (Object[]) rs.getArray(1).getArray();
Object[] array2 = (Object[]) rs.getObject(1);
Object date = rs.getObject(2);
System.out.println(array1[0]);
System.out.println(array1[0].getClass());
System.out.println(array2[0]);
System.out.println(array2[0].getClass());
System.out.println(date);
System.out.println(date.getClass());
Output
-------------------------------------------
1981-07-10
class java.sql.Date
org.hsqldb.types.TimestampData@15aba800
class org.hsqldb.types.TimestampData
1981-07-10
class java.sql.Date
Interpretation
-------------------------------------------
The getArray(1).getArray() returns an array containing java.sql.Date classes, which is the expected mapping. This also happens when selecting getObject(2). But getObject(1) returns an array holding a HSQLDB-internal class. I guess the automatic mapping was forgotten for datetime types? It seems to work for numeric or string types...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1103
HyperSQL Database Engine (HSQLDB) / Bugs / #1103 NullPointerException in insert into INTERVAL Type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have found a NullPointerException on insert into INTERVAL Type.
It can be reproduced as follows:
SQL code
-------------------------------------------
CREATE TABLE INTERVALTABLE (interval1 INTERVAL YEAR TO MONTH, interval2 INTERVAL DAY TO SECOND(3))
Java code
-------------------------------------------
PreparedStatement statement = connection.prepareStatement(
"INSERT INTO INTERVALTABLE values (CAST (? AS INTERVAL YEAR TO MONTH), CAST (? AS INTERVAL DAY TO SECOND))");
statement.setString(1, "1-10"); // NullPointerException
statement.setString(2, "10 02:15:30.333");
statement.executeUpdate();
Interpretation
-------------------------------------------
Usage on INTERVAL Type is correct?
I use by default as VARCHAR.
I guess the problem is in the call to IntervalType.convertToDefaultType method here (IntervalType.convertToType(SessionInterface session, Object a, Type otherType) line: 620):
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1104
HyperSQL Database Engine (HSQLDB) / Bugs / #1104 hsqldb.init & SERVER_ADDL_CLASSPATH
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting from line 400 variables are being exported because the jvm is started in a new shell with eval exec.
But variable SERVER_ADDL_CLASSPATH has been forgotten.
And thus user defined classpath is not given to jvm.
So line 401 should read: export SERVER_ADDL_CLASSPATH
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1105
HyperSQL Database Engine (HSQLDB) / Bugs / #1105 Parameterization of days number causes NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SQL query: "select current_date - ? day from document"
("document" might be any table)
Exception: java.lang.NullPointerException
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3925)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(JDBCConnection.java:641)
at org.apache.commons.dbcp.DelegatingConnection.prepareStatement(DelegatingConnection.java:281)
at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.prepareStatement(PoolingDataSource.java:313)
HSQLDB version: 2.1.0-rc4
Note: The query "select current_date - 20 day from document" works fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1106
HyperSQL Database Engine (HSQLDB) / Bugs / #1106 dead lock when checkpoint
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When hsqldb execute a checkpoint, the entry point is org.hsqldb.persist.Logger.checkpoint, at here it will get a lock of logger, Then it will go to session.commit, in here, it will try to get a write lock of transaction, that's ok. But when we execute a select sequence statement, the execute order of updating of sequence is: get a write lock of transaction,then try to get a lock of logger, that's dead lock.
====================================================================================================
NAME: pool-1-thread-1
Status: BLOCKED (org.hsqldb.persist.Logger@fa5f71 ) owner: pool-1-thread-10
total blocked : 10,922 total waiting: 863
stack trace: 
org.hsqldb.persist.Logger.writeSequenceStatement(Unknown Source)
org.hsqldb.Session.logSequences(Unknown Source)
org.hsqldb.TransactionManagerCommon.persistCommit(Unknown Source)
org.hsqldb.TransactionManager2PL.commitTransaction(Unknown Source)
org.hsqldb.Session.commit(Unknown Source)
- locked org.hsqldb.Session@1f2c60d
org.hsqldb.Session.executeCompiledStatement(Unknown Source)
org.hsqldb.Session.execute(Unknown Source)
- locked org.hsqldb.Session@1f2c60d
org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
- locked org.hsqldb.jdbc.JDBCPreparedStatement@1d02a8f
xxxxx.getNewSEQ(xxxxx.java:286)
xxxxx.insert(xxxxx.java:193)
===================================================================================================
NAME: pool-1-thread-10
Status: WAITING (java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync@19a3044 ) owner: pool-1-thread-1
total blocked : 11,021 total waiting : 920
stack trace: 
sun.misc.Unsafe.park(Native Method)
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:842)
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1178)
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)
org.hsqldb.TransactionManager2PL.commitTransaction(Unknown Source)
org.hsqldb.Session.commit(Unknown Source)
- locked org.hsqldb.Session@143db33
org.hsqldb.Session.executeCompiledStatement(Unknown Source)
org.hsqldb.persist.LobManager.deleteUnusedLobs(Unknown Source)
- locked org.hsqldb.persist.LobManager@1ec11b7
org.hsqldb.persist.Logger.checkpoint(Unknown Source)
- locked org.hsqldb.persist.Logger@fa5f71
org.hsqldb.StatementCommand.getResult(Unknown Source)
org.hsqldb.StatementCommand.execute(Unknown Source)
org.hsqldb.Session.executeCompiledStatement(Unknown Source)
org.hsqldb.Session.executeDirectStatement(Unknown Source)
org.hsqldb.Session.execute(Unknown Source)
- locked org.hsqldb.Session@1d65595
org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
- locked org.hsqldb.jdbc.JDBCStatement@10dbf13
xxxxx.doCheckPoint(xxxxx.java:483)
================================================================================================
Note: I am running on a non-English environment, so I translate some key-word to English by myself, maybe some words are different.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1107
HyperSQL Database Engine (HSQLDB) / Bugs / #1107 FrameworkLogger resets application log configuration
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
it seems very odd to me that an embedded database would feel free to reset the logging configuration of the entire application. as it is, our application does programmatic configuration of the java.util.logging framework upon startup. however, when we attempt to open an hsqldb database, the FrameworkLogger class resets the jdk LogManager to its original configuration.
i'm surprised that this is not the default behavior, but at the very least there should be a configuration setting for telling hsqldb to leave the logmanager alone.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1108
HyperSQL Database Engine (HSQLDB) / Bugs / #1108 hsqldbmin build target does not seem to work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i built the 2.1.0-rc4 release using the ant targets "switchtojdk16 hsqldbmin". however, the resulting jar file would not work in my test code (using a simple, single threaded, embedded db). 
Exception trace:
java.lang.NoClassDefFoundError: Could not initialize class org.hsqldb.error.Error
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection(DriverManager.java:582)
at java.sql.DriverManager.getConnection(DriverManager.java:185)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1109
HyperSQL Database Engine (HSQLDB) / Bugs / #1109 jdk Logger leak in FrameworkLogger
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when using the jdk logging system, each new database adds a logger to loggerInstances, but these loggers are never cleaned out. they should be removed when a database is "shutdown". (in our application, databases tend to be transient, and we may open many different dbs while the app is running). 
using hsqldb version 2.1.0-rc4.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1110
HyperSQL Database Engine (HSQLDB) / Bugs / #1110 Query with DISTINCT erroneously returns no results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As you can see when running the attached SQL, some queries using DISTINCT return no results,
but correctly return repeated results when DISTINCT is omitted.
This bug is in all of the 2.1.0/2.0.1 release candidates, but not 2.0.0GA, nor 1.8.1.3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1111
HyperSQL Database Engine (HSQLDB) / Bugs / #1111 Failed to use Hibernate StatelessSession with version 2.1 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems there is an issue when you try to get a result from an Hibernate query using a StatelessSession, no result is returned and it causes a dead lock. When using version 1.8 everything works fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1112
HyperSQL Database Engine (HSQLDB) / Bugs / #1112 wrong property name in docs for max memory rows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
the database property for the max number of rows in memory is "result_max_memory_rows", but the (2.0) documentation refers to the property as "max_result_memory_rows".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1113
HyperSQL Database Engine (HSQLDB) / Bugs / #1113 Can't delete db files after shutdown with NIO
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If HSQLDB uses NIO to access data files, I can't delete the database data files after the database is shutdown. This looks like a symptom of long standing JDK Bug 4724038 (http://bugs.sun.com/view_bug.do?bug_id=4724038). When calling FileChannel.map(), the returned MappedByteBuffer will hold a handle to the underlying file until it is garbage collected. Windows can't delete files with open handles.
I've attached a test case that demonstrates this problem and a patch to ScaledRAFileNIO that implements the workaround described in JDK Bug 4724038. I believe this workaround should be safe for HSQLDB since the buffer is unmapped immediately before removing all references to it. The patch has only been tested with Sun JDK 1.6.23 on Windows x64.
It looks like the folks at H2 hit a similar issue: http://groups.google.com/group/h2-database/browse_thread/thread/eadcb2d44fddc5bd
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1114
HyperSQL Database Engine (HSQLDB) / Bugs / #1114 Throwing Exception: Running an HTTP server to use batch file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I couldn't have run an HTTP server by ClassNotFoundException when starting to use runWebServer.bat.
------------------------
C:\hsqldb-2.1.0\hsqldb\bin>runWebServer.bat --database.0 file:../data/samplehsqldb --dbname.0 sampledb
C:\hsqldb-2.1.0\hsqldb\bin>cd ..\data
Exception in thread "main" java.lang.NoClassDefFoundError: org/hsqldb/WebServer
Caused by: java.lang.ClassNotFoundException: org.hsqldb.WebServer
at java.net.URLClassLoader$1.run(Unknown Source)
at java.security.AccessController.doPrivileged(Native Method)
at java.net.URLClassLoader.findClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
at java.lang.ClassLoader.loadClass(Unknown Source)
Could not find the main class: org.hsqldb.WebServer. Program will exit.
------------------------
The package name mistakes?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1115
HyperSQL Database Engine (HSQLDB) / Bugs / #1115 Exception while upgrading to version 2.1 from working 1.8.7
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I did upgrade from version 1.8.7 to the latest 2.1.0 and I am getting following exception for a code which was working before. I am trying to insert
a PDF binary file into a table like this
CREATE TABLE BATCH_FILE_STORE (
ID BIGINT IDENTITY NOT NULL PRIMARY KEY,
DATA LONGVARBINARY NOT NULL
) ;
following is the java code which was working on 1.8.7 and is failing on 2.1.0
public Number storeFileAndReturnId(File file) throws Exception {
SimpleJdbcInsert insertFile = new SimpleJdbcInsert(getDataSource())
.withTableName("BATCH_FILE_STORE").usingGeneratedKeyColumns(
"id");
SqlParameterSource parameters = new MapSqlParameterSource().addValue(
"data", FileUtils.readFileToByteArray(file));
return insertFile.executeAndReturnKey(parameters);
}
org.springframework.dao.DataIntegrityViolationException: PreparedStatementCallback; SQL []; data exception: string data, right truncation; nested exception is java.sql.SQLException: data exception: string data, right truncation
at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:602)
at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:842)
at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyHolderInternal(AbstractJdbcInsert.java:435)
at org.springframework.jdbc.core.simple.AbstractJdbcInsert.executeInsertAndReturnKeyInternal(AbstractJdbcInsert.java:416)
at org.springframework.jdbc.core.simple.AbstractJdbcInsert.doExecuteAndReturnKey(AbstractJdbcInsert.java:383)
at org.springframework.jdbc.core.simple.SimpleJdbcInsert.executeAndReturnKey(SimpleJdbcInsert.java:120)
at com.smartwish.batch.domain.filestore.internal.JdbcFileStoreDao.storeFileAndReturnId(JdbcFileStoreDao.java:37)
at com.smartwish.batch.common.job.Manager.storeFileAndReturnId(Manager.java:73)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoCachedMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:229)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:52)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:40)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:124)
at pollManager.run(pollManager.groovy:8)
at groovy.util.GroovyScriptEngine.run(GroovyScriptEngine.java:515)
at com.smartwish.batch.scripting.ScriptRunner.run(ScriptRunner.java:51)
at com.smartwish.batch.polling.ScriptedPollManager.fileMoved(ScriptedPollManager.java:49)
at org.sadun.util.polling.DefaultListener.receive(DefaultListener.java:37)
at com.deltax.util.listener.SignalQueue.run(Unknown Source)
Caused by: java.sql.SQLException: data exception: string data, right truncation
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source)
at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:102)
at org.springframework.jdbc.core.JdbcTemplate$3.doInPreparedStatement(JdbcTemplate.java:844)
at org.springframework.jdbc.core.JdbcTemplate$3.doInPreparedStatement(JdbcTemplate.java:1)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:586)
... 22 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1116
HyperSQL Database Engine (HSQLDB) / Bugs / #1116 "database does not exist" opening jdbc:hsqldb:res: catalog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In revision 4124, org.hsqldb.lib.FileUtil.FileAccessRes.openInputStreamElement(...) was updated to use the thread context classloader if the current classloader was unable to load the requested resource.
However, the isStreamElement(...) method - which is used to verify that the resource exists before calling openInputStreamElement(...) - uses only the current classloader.
This prevents a jdbc:hsqldb:res: catalog from being opened in situations where the use of the thread context classloader is called for, and results in an exception like the following:
Mar 18, 2011 11:20:39 PM org.hsqldb.persist.Logger logSevereEvent
SEVERE: could not reopen database
org.hsqldb.HsqlException: Database does not exists: /META-INF/db/mydb
at org.hsqldb.error.Error.error(Error.java:81)
at org.hsqldb.error.Error.error(Error.java:70)
at org.hsqldb.persist.Logger.openPersistence(Logger.java:247)
at org.hsqldb.Database.reopen(Database.java:223)
at org.hsqldb.Database.open(Database.java:189)
at org.hsqldb.DatabaseManager.getDatabase(DatabaseManager.java:240)
at org.hsqldb.DatabaseManager.newSession(DatabaseManager.java:157)
at org.hsqldb.jdbc.JDBCConnection.<init>(JDBCConnection.java:3556)
at org.hsqldb.jdbc.JDBCDriver.getConnection(JDBCDriver.java:322)
at org.hsqldb.jdbc.JDBCDataSource.getConnection(JDBCDataSource.java:179)
at org.hsqldb.jdbc.JDBCDataSource.getConnection(JDBCDataSource.java:138)
...
Method org.hsqldb.lib.FileUtil.FileAccessRes.isStreamElement(...) should be updated to use the thread context classloader in the same manner as openInputStreamElement(...); a proposed SVN patch for base/trunk is attached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1117
HyperSQL Database Engine (HSQLDB) / Bugs / #1117 databasemetadata not showing 2.1 info
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Database product version still at: 2.0.0
Database Minor Version: 0 -- is this correct?
Jdbc Driver Minor Version: 0 -- is this correct?
Database Product Name ------------------: HSQL Database Engine
Datbase Url ----------------------------: jdbc:hsqldb:mem:memdb
Database Product Version ---------------: 2.0.0
Database Major Version -----------------: 2
Database Minor Version -----------------: 0
Jdbc Driver Name -----------------------: HSQL Database Engine Driver
Jdbc Driver Version --------------------: 2.0.0
Jdbc Driver Major Version --------------: 2
Jdbc Driver Minor Version --------------: 0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1118
HyperSQL Database Engine (HSQLDB) / Bugs / #1118 index and ordering by multiple columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a database with about 500k user PROFILES. There is an index on LAST_LOGIN column. Because there are sometimes multiple rows for same values of LAST_LOGIN for queries I use ordering by LAST_LOGIN and ID. This is very useful when using queries for paginating results. For example when I have last previously received LAST_LOGIN and ID, I create query like " select * from PROFILES where LAST_LOGIN > ? or (LAST_LOGIN = ? and ID > ?) order by LAST_LOGIN asc, ID asc". For reversed direction query looks like " select * from PROFILES where LAST_LOGIN < ? or (LAST_LOGIN = ? and ID < ?) order by LAST_LOGIN desc, ID desc". The same query ordered by single column takes 15 ms, ordered by both columns takes 15 seconds, so I suspect index is ignored when ordered by additional column despite the fact second column in order by clause have small impact of returned results.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1119
HyperSQL Database Engine (HSQLDB) / Bugs / #1119 NullPointerException using MINUS with large tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When executing a minus statement such as "SELECT item_id FROM TABLE1 MINUS SELECT item_id FROM TABLE2" with tables with many rows I get a null pointer exception in RowSetNavigatorDataTable (see below). Attached is a test to reproduce this. It happens when I populate the tables with at least 100000 rows but not when less than 10000 rows. I'm seeing this in hsqldb 2.1.
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at MinusTest.testMinus(MinusTest.java:71)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at junit.framework.TestCase.runTest(TestCase.java:164)
at junit.framework.TestCase.runBare(TestCase.java:130)
at junit.framework.TestResult$1.protect(TestResult.java:106)
at junit.framework.TestResult.runProtected(TestResult.java:124)
at junit.framework.TestResult.run(TestResult.java:109)
at junit.framework.TestCase.run(TestCase.java:120)
at junit.framework.TestSuite.runTest(TestSuite.java:230)
at junit.framework.TestSuite.run(TestSuite.java:225)
at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 21 more
Caused by: java.lang.NullPointerException
at org.hsqldb.navigator.RowSetNavigatorDataTable.getCurrent(Unknown Source)
at org.hsqldb.navigator.RowSetNavigator.getNext(Unknown Source)
at org.hsqldb.navigator.RowSetNavigatorDataTable.removeDuplicates(Unknown Source)
at org.hsqldb.navigator.RowSetNavigatorDataTable.except(Unknown Source)
at org.hsqldb.QueryExpression.getResult(Unknown Source)
at org.hsqldb.StatementQuery.getResult(Unknown Source)
... 25 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1120
HyperSQL Database Engine (HSQLDB) / Bugs / #1120 Util.sqlException for Result throws base SQLException 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
org.hsqldb.jdbc.Util.sqlException(Result r) does NOT delegate to the sqlException function that throws the correct SQLException depending on the sqlState. 
This means you can't catch any of the SQLException hierarchy from the client code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1121
HyperSQL Database Engine (HSQLDB) / Bugs / #1121 sql.enforce_size property does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Whilst upgrading from 1.8 to 2.1 ran into the problem of the change in VARCHAR length behavior that is well described in the documentation. However, one can't work around this with properties after all.
Setting the sql.enforce_size property to FALSE (before creating tables) does NOT prevent exceptions from exceeding specified VARCHAR lengths in version 2.1.
Checking the .script file shows that the statement "SET DATABASE SQL SIZE TRUE" is always present, regardless of whether the property is set to false or not.
Also, using the "older" property described in the documentation, "sql.enforce_strict_size" triggers an invalid property exception.
David
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1122
HyperSQL Database Engine (HSQLDB) / Bugs / #1122 Adding support of org.hsqldb.types.Types.DATE as a Timestamp
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using HSQL as an Oracle DB emulation and needed this fix to support Dates as timetamps.
The attached patch fix this issue from 2.1RC3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1123
HyperSQL Database Engine (HSQLDB) / Bugs / #1123 Adding support of Inserting boolean in number(1)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using HSQL as an Oracle DB emulation. Oracle supports inserting a boolean in a number(1) column. The attached patch adds this functionality.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1124
HyperSQL Database Engine (HSQLDB) / Bugs / #1124 Adding support of NVARCHAR2 & dotted selects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using HSQL as an Oracle DB emulation. The attached patches adds support of NVARCHAR2 and dotted queries like this :
select table.col1 from table
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1125
HyperSQL Database Engine (HSQLDB) / Bugs / #1125 deadlock in ScriptWriterBase (checkpoint)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Specification-Version: 2.1.0 (current GA release)
sync order against BufferedOutputStream and ScriptWriterText are inconsistent; checkpoint causes deadlock:
"DeleteDataThread":
at org.hsqldb.scriptio.ScriptWriterBase.forceSync(ScriptWriterBase.java:193)
- waiting to lock <0xaaf58b88> (a java.io.BufferedOutputStream)
- locked <0xaaf58ba0> (a org.hsqldb.scriptio.ScriptWriterText)
at org.hsqldb.persist.Log.synchLog(Log.java:632)
at org.hsqldb.persist.Log.checkpointClose(Log.java:384)
at org.hsqldb.persist.Log.checkpoint(Log.java:363)
at org.hsqldb.persist.Logger.checkpoint(Logger.java:841)
- locked <0xa3f3eb80> (a org.hsqldb.persist.Logger)
at org.hsqldb.StatementCommand.getResult(StatementCommand.java:281)
at org.hsqldb.StatementCommand.execute(StatementCommand.java:198)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1318)
at org.hsqldb.Session.execute(Session.java:977)
- locked <0xa52525f8> (a org.hsqldb.Session)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4632)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(JDBCPreparedStatement.java:311)
- locked <0xaaf58cc0> (a org.hsqldb.jdbc.JDBCPreparedStatement)
at org.apache.commons.dbcp.DelegatingPreparedStatement.executeUpdate(DelegatingPreparedStatement.java:102)
"HSQLDB Timer @e8606c":
at org.hsqldb.scriptio.ScriptWriterBase.forceSync(ScriptWriterBase.java:187)
- waiting to lock <0xaaf58ba0> (a org.hsqldb.scriptio.ScriptWriterText)
at org.hsqldb.scriptio.ScriptWriterBase.sync(ScriptWriterBase.java:180)
- locked <0xaaf58b88> (a java.io.BufferedOutputStream)
at org.hsqldb.scriptio.ScriptWriterBase.run(ScriptWriterBase.java:392)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(HsqlTimer.java:645)
at java.lang.Thread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1126
HyperSQL Database Engine (HSQLDB) / Bugs / #1126 Using ARRAY in with recursive
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create the following table 'RECUR' and execute the provided 'with recursive' statement the error 
' [Error Code: -5593, SQL State: 42593] column count mismatch in column name list'
will be thrown. The same statement works with PostgreSQL. I used HSQLDB 2.1.0.
CREATE CACHED TABLE RECUR 
(ID INTEGER NOT NULL PRIMARY KEY,
PARENT_ID INTEGER NOT NULL);
with recursive cte (id, parent_id) as
(select id, parent_id, ARRAY[id] as branch from recur where id = 15143 
UNION ALL
select r.id, r.parent_id, branch || id from recur r 
inner join cte c on (r.id = c.parent_id)
)
select * from cte
order by branch desc;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1127
HyperSQL Database Engine (HSQLDB) / Bugs / #1127 Concurrent write while backup
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
sorry if this issue was already discussed in another thread that I didn't find. 
We're currently implementing a solution where the backup is performed while the server is running. The SQL statements are executed using the JDBC connection. As you know, while the backup is performed, the database is locked. This means all reading/writing processes are blocked. 
Here comes the bug description:
After the backup is complete, all writing processes are unblocked, thus a new .log file is being created. And it starts with the INSERT statement (for table XXX). If you close the Java program without closing the database (e.g. process got killed, power failure,..), the log file continues to exist. On next startup, you get an exception that the table XXX was not found and the rest of the log file is being ignored. Finally, the log file is deleted so it's not even obvious WHY the table XXX was not found.
And here comes the workaround:
if you perform a checkpoint right after the backup, everything seems to be fine (was not able to reproduce this error) - but I won't bet ..
Attached, you have a cropped version of the source code to reproduce the problem (~80% of executions). You may need to adjust the iterations and backup waiting time. The idea is that the backup starts WHILE the thread is writing data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1128
HyperSQL Database Engine (HSQLDB) / Bugs / #1128 Upload 2.1.0 jar to maven repository
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please upload the "Latest stable version" (i.e. 2.1.0) release artifact(s) to the Maven central repository.
I have some unit test scripts that use nvarchar, which work with 2.1.0 but give an "unknown data type" with the latest version currently available there (2.0.0).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1129
HyperSQL Database Engine (HSQLDB) / Bugs / #1129 Allow column defaults of form "(1)"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A table definition I extracted from a MS SQLServer database had columns specified with the form
MSG_ID int DEFAULT (1),
"DESTINATION" VARCHAR(10) DEFAULT ('DFLT') NOT NULL
but when I try to run these into an in-memory hsql database, it gives an "unexpected token" error at the opening brackets.
I assume the "literal" definition in
<default option> ::= <literal> | ...
(http://hsqldb.org/doc/2.0/guide/databaseobjects-chapt.html#N10F1B) doesn't allow for this. It would be handy if it did, at least when
SET DATABASE SQL SYNTAX MSS TRUE
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1130
HyperSQL Database Engine (HSQLDB) / Bugs / #1130 ClassCastException when casting to longvarchar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm getting a ClassCastException from the hsqldb driver when executing this SQL statement:
select * from information_schema.sequences
where sequence_schema = cast('PUBLIC' as longvarchar)
This doesn't work anymore with the newly released version 2.1.0. It worked with 2.0.0. The stacktrace from the HSQL Database Manager:
java.sql.SQLException: java.lang.ClassCastException java.lang.ClassCastException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(Unknown Source)
[...]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1131
HyperSQL Database Engine (HSQLDB) / Bugs / #1131 Cannot have procedure parameters of type longvarchar array
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This used to work with version 2.0.0.
CREATE PROCEDURE p_arrays3(IN in_array longvarchar array, OUT out_array longvarchar array)
BEGIN ATOMIC
SET out_array = in_array;
END
With version 2.1.0 it doesn't anymore, I get an error:
java.sql.SQLException: unexpected token: ARRAY : line: 2
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(Unknown Source)
[...]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1132
HyperSQL Database Engine (HSQLDB) / Bugs / #1132 SQL DATA access clause is now mandatory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm not sure if this is wrong now in 2.1.0 or if it was wrong in 2.0.0 and fixed now. But it's not really documented here:
http://hsqldb.org/doc/2.0/guide/sqlroutines-chapt.html#N12B06
I didn't find a comment about that in the release notes either.
This used to work in 2.0.0:
--
CREATE FUNCTION f_author_exists (author_name varchar(50)) 
RETURNS INTEGER 
RETURN (SELECT COUNT(*) FROM t_author) 
This is the error I'm getting:
java.sql.SQLException: wrong or missing data impact clause in declaration: READS SQL in statement [...]
Now I seem to have to specify the SQL DATA access clause (for some functions). Like this it works in 2.1.0:
--
CREATE FUNCTION f_author_exists (author_name varchar(50)) 
RETURNS INTEGER 
READS SQL DATA
RETURN (SELECT COUNT(*) FROM t_author)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1133
HyperSQL Database Engine (HSQLDB) / Bugs / #1133 Cannot create CHAR[ACTER] LARGE OBJECT type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to the documentation, I can use CHAR[ACTER] LARGE OBJECT as synonyms for CLOB when creating tables:
http://hsqldb.org/doc/2.0/guide/sqlgeneral-chapt.html#N104F1
This doesn't work in 2.1.0, though:
--
create table x(b char large object)
I'm getting this error:
java.sql.SQLException: unexpected token: LARGE required: null exception message : line: 4
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(Unknown Source)
[...]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1134
HyperSQL Database Engine (HSQLDB) / Bugs / #1134 LONGVARCHAR seems to default to LOB now
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The newly added setting seems to be defaulted to TRUE (maybe after upgrading from 2.0.0 to 2.1.0? I'm not quite sure...):
SET DATABASE SQL LONGVAR IS LOB TRUE
It would be more backwards compatible, if it were set to FALSE by default.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1135
HyperSQL Database Engine (HSQLDB) / Bugs / #1135 SessionManager.closeAllSessions() can cause deadlock
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am experiencing deadlock when two different threads attempt to close the database with hsqldb 2.0.0 and 2.1.0. The issue is that Thread-1 acquires a lock on SessionManager@58a983 when SessionManager.closeAllSession() is called. Thread-1 is also attempting to invoke Session.close() the active sessions (i.e. Session@e107d9) which requires a lock on the session. Meanwhile, Thread-2 has already acquired a lock on Session@e107d9 when it called Session.execute(). Thread-2 is also attempting to acquire a lock on SessionManager@58a983 for SessionManager.closeAllSessions, but the lock was already obtained by Thread-1. I have posted a more concise summary and the relevant thread dumps below.
[code]
Deadlock summary
Thread-1 is waiting to lock org.hsqldb.Session@e107d9 which is held by Thread-2
Thread-2 is holding a lock on org.hsqldb.Session@e107d9 and is waiting to lock org.hsqldb.SessionManager@58a983 which is held by Thread-1
Thread stacks
Thread-1 [BLOCKED; waiting to lock org.hsqldb.Session@e107d9]
org.hsqldb.Session.close(unknown source)
org.hsqldb.SessionManager.closeAllSessions(unknown source)
org.hsqldb.Database.close(unknown source)
org.hsqldb.StatementCommand.getResult(unknown source)
org.hsqldb.StatementCommand.execute(unknown source)
org.hsqldb.Session.executeCompiledStatement(unknown source)
org.hsqldb.Session.executeDirectStatement(unknown source)
org.hsqldb.Session.execute(unknown source)
org.hsqldb.jdbc.JDBCStatement.fetchResult(unknown source)
org.hsqldb.jdbc.JDBCStatement.execute(unknown source)
org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer.shutdown(AbstractEmbeddedDatabaseConfigurer.java:42)
org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.shutdownDatabase(EmbeddedDatabaseFactory.java:184)
org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.destroy(EmbeddedDatabaseFactoryBean.java:57)
org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:184)
org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487)
org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:463)
org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:431)
org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1048)
org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1022)
org.springframework.context.support.AbstractApplicationContext$3.run(AbstractApplicationContext.java:940)
Thread-2 [BLOCKED; waiting to lock org.hsqldb.SessionManager@58a983]
org.hsqldb.SessionManager.closeAllSessions(unknown source)
org.hsqldb.Database.close(unknown source)
org.hsqldb.StatementCommand.getResult(unknown source)
org.hsqldb.StatementCommand.execute(unknown source)
org.hsqldb.Session.executeCompiledStatement(unknown source)
org.hsqldb.Session.executeDirectStatement(unknown source)
org.hsqldb.Session.execute(unknown source)
org.hsqldb.jdbc.JDBCStatement.fetchResult(unknown source)
org.hsqldb.jdbc.JDBCStatement.execute(unknown source)
org.springframework.jdbc.datasource.embedded.AbstractEmbeddedDatabaseConfigurer.shutdown(AbstractEmbeddedDatabaseConfigurer.java:42)
org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.shutdownDatabase(EmbeddedDatabaseFactory.java:184)
org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean.destroy(EmbeddedDatabaseFactoryBean.java:57)
org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:184)
org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487)
org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:463)
org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:431)
org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1048)
org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1022)
org.springframework.context.support.AbstractApplicationContext$3.run(AbstractApplicationContext.java:940)
[/code]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1136
HyperSQL Database Engine (HSQLDB) / Bugs / #1136 LIMIT 0 returns one record
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These two queries return the same record:
select 1 from information_schema.system_users limit 0
select 1 from information_schema.system_users limit 1
I would expect "LIMIT 0" to return nothing (like MySQL, Postgres. SQLite, H2) or raise an error (like Derby). Is this the expected behaviour or is it a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1137
HyperSQL Database Engine (HSQLDB) / Bugs / #1137 DatabaseManagerSwing won't start with -noexit 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
org/hsqldb/util/DatabaseManagerSwing.java:
DatabaseManagerSwing -noexit
won't start and throw exception "No value for argument".
In main(String[] arg),
if (i == arg.length) {
throw new IllegalArgumentException("No value for argument "
+ lowerArg);
}
throws exception when there is no arg for -noexit.
This will fix the issue:
if (i == arg.length && lowerArg.equals("-noexit") == false) {
throw new IllegalArgumentException("No value for argument "
+ lowerArg);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1138
HyperSQL Database Engine (HSQLDB) / Bugs / #1138 DatabaseManagerSwing throws exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Rev 4201,
489 } else if (i == arg.length - 1) {
490 throw new IllegalArgumentException("No value for argument "
491 + currentArg);
492 }
Only works for --noexit or --help; all other switches throw exception (No value for argument or ArrayIndexOutOfBoundsException).
This will fix the issue:
489 } else if (i == arg.length) {
In addition, 
489 } else if (i == arg.length || arg[i].startsWith("--")) {
This will also check for the case DatabaseManagerSwing --user --password. The addition won't take --password as the argument of --user.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1139
HyperSQL Database Engine (HSQLDB) / Bugs / #1139 rolling back to unnamed savepoint rolls back entire txn
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
i'm using hsqldb 2.1.0GA. in testing savepoint functionality, i found out that rolling back to an unnamed savepoint (created via Connection.setSavepoint()) seems to roll back the entire transaction. when i run my test with a named savepoint it works as expected.
my test is essentially:
- insert first row
- set savepoint
- insert second row
- rollback to savepoint
- commit
- assert only first row is in table
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1140
HyperSQL Database Engine (HSQLDB) / Bugs / #1140 Clarify LOCK TABLE behavior
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The behavior of LOCK TABLE statement as described in the documentation does not specify whether READ lock is shared and WRITE lock is exclusive. Is it an implementation of "readers-writer lock" as exists in Oracle/PostgreSQL "lock table {table_name} in share|exclusive mode" statement?
If not, please adjust the documentation, if yes, there is a problem with taking locks (assume 2 concurrent transactions):
READ lock in Tx1, successful READ lock in Tx2 = OK, multiple readers allowed,
WRITE lock in Tx1, waiting for READ lock in Tx2 = OK, readers are blocked when there is an exclusive writer,
WRITE lock in Tx1, waiting for WRITE lock in Tx2 = OK, only one exclusive writer,
READ lock in Tx1, successful WRITE lock in Tx2 = ERROR, exclusive lock must wait until all shared locks are released!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1141
HyperSQL Database Engine (HSQLDB) / Bugs / #1141 Array and wasNull-Call
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I figured out that the resultSet.wasNull() does not work correctly while using SQL arrays.
example:
row 1: 
resultSet.getArray(1) --> returns a not empty array
resultSet.wasNull() --> returns false, all correct
row2:
resultSet.getArray(1) --> returns an empty array
resultSet.wasNull() --> returns true, all correct
row3:
resultSet.getArray(1) --> returns a not empty array
resultSet.wasNull() --> true! not correct!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1142
HyperSQL Database Engine (HSQLDB) / Bugs / #1142 The SQLSyntaxErrorException while createArrayOf in 2.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Any call of the createArrayOf("TIMESTAMP", new Date[] {new Date()}) method for a JDBCConnection in HSQLDB 2.2 throws an exception.
The same thing for HSQLDB 2.1 is OK.
My systems were:
* OpenSUSE 11.4, Java SE 6 Update 24
* SliTaz 3.0, OpenJDK 6 22
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1143
HyperSQL Database Engine (HSQLDB) / Bugs / #1143 Table and Schema information missing from metadata at random
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that under certain conditions, Hypersonic will return empty schema and tableName metadata even when such data should be available. For example, this query:
select invoice_element.*, prod_product.*, prod_type.*, invoice_invoice.*, invoice_type.*, order_element.*, order_order.*, cust_customer.*, core_company.* 
from invoice_element
inner join invoice_invoice on ( invoice_element.fk_invoice_invoice = invoice_invoice.id)
inner join prod_product on ( invoice_element.fk_prod_product = prod_product.id)
left outer join order_element on ( invoice_element.fk_order_element_order = order_element.id)
left outer join order_order on ( order_element.fk_order_order = order_order.id)
inner join route_visit on ( invoice_invoice.fk_route_visit = route_visit.id)
inner join route_day on ( route_visit.fk_route_day = route_day.id)
inner join prod_type on ( prod_product.fk_prod_type = prod_type.id)
inner join invoice_type on ( invoice_invoice.fk_invoice_type = invoice_type.id)
inner join cust_customer on ( invoice_invoice.fk_cust_customer = cust_customer.id)
inner join core_company on ( cust_customer.fk_core_company = core_company.id)
inner join prod_branch on ( prod_product.id = prod_branch.fk_prod_product)
WHERE route_day.fk_core_user = 116 AND invoice_invoice.delivery between '2011-05-13' and '2011-05-14' 
AND prod_branch.fk_core_group = 17 AND invoice_invoice.hid in (17, 0) AND prod_product.hid in (17, 0) 
AND ( order_element.hid in (17, 0) OR order_element.hid is null )
AND ( order_order.hid in (17, 0) OR order_order.hid is null ) AND route_visit.hid in (17, 0) 
AND route_day.hid in (17, 0) AND prod_type.hid in (17, 0) AND invoice_type.hid in (17, 0) AND cust_customer.hid in (17, 0) 
AND core_company.hid in (17, 0) AND prod_branch.hid in (17, 0) AND invoice_element.hid in (17, 0) 
AND cust_customer.active_state = 1 order by invoice_invoice.invoiceid asc
Results in metadata only for the invoice_invoice, prod_product, and invoice_element tables. The rest have schemaName and tableName values that are left blank. Shuffling the joins around does affect which tables are missing metadata, but not in a predictable way. For instance, sticking the two outer joins in the query above at the very end of the list of joins results in all tables except prod_type having metadata. I can provide a database for examination upon request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1144
HyperSQL Database Engine (HSQLDB) / Bugs / #1144 NullPointerException when ordering by NULL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a minor issue. When I run this:
select 1 from information_schema.system_users order by null
I get a NullPointerException:
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(Unknown Source)
This works:
select 1 from information_schema.system_users order by 1
This doesn't
select 1 from information_schema.system_users order by 2
java.sql.SQLSyntaxErrorException: invalid ORDER BY expression
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
I think the NPE should also have an associated error message. On the other hand, why is 1 permitted, and no other value is?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1145
HyperSQL Database Engine (HSQLDB) / Bugs / #1145 offset/limit broken with unique-index
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like, a unique-constraint breaks the behavior of offset/limit. I attached a sample db, which was stripped down from our production table. Decoupled from our project, it doesn't make a lot of sense, but it shows the bug.
The following query lists the rows I'm interested in:
select * from cg_grouplink where schemeident in ('color', 'place') order by rid
RID SCHEMEIDENT CLIENTTYPE CLIENTID VARIANTID GROUPIDENT
82 color CUSTOMER C_C <NULL> blue 
83 color CUSTOMER C_C 45 green 
84 color CUSTOMER C_B 11 blue 
85 color CUSTOMER C_B 12 red 
86 color CUSTOMER C_B <NULL> yellow
87 color CUSTOMER C_A 52 blue 
88 color CUSTOMER C_A 48 yellow
89 color CUSTOMER C_A 49 red 
90 color CUSTOMER C_A 50 blue 
91 color CUSTOMER C_A 51 yellow
92 place PERSON P_A 5 switzerland 
93 place PERSON P_A 1 switzerland 
94 place PERSON P_A 2 europe
95 place PERSON P_A 3 restOfTheWorld
96 place PERSON P_A 4 switzerland 
Now using offset/limit, I would expect to be able to get the same result piece by piece. For example, the following query should return the rows with rid 82 and 83, but it returns 88 and 89:
select * from cg_grouplink where schemeident in ('color', 'place') order by rid offset 0 limit 2
Or from offset 4, I would expect rows 86 and 87, but I get 90 and 91:
select * from cg_grouplink where schemeident in ('color', 'place') order by rid offset 4 limit 2
With offsets 6, I get the same result as with 4. Same for 2 and 8. Same problem with other offsets.
I then observed that after removing the unique-constraint for the four columns SCHEMEIDENT,CLIENTTYPE,CLIENTID,VARIANTID it works as expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1146
HyperSQL Database Engine (HSQLDB) / Bugs / #1146 Comparing DATE column to DATETIME produces error in 2.2.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Comparing a column of type DATE to DATETIME values no longer works in HSQLDB 2.2.2. The build made on May 17, 2011 to address the metadata issue does not have this problem. The expected results for the below queries that produce errors are the same as the results of the previous query.
Sample script:
create table hires (hired date, name varchar(50));
insert into hires values ('2011-01-01', 'Matt');
insert into hires values ('2011-02-01', 'Dave');
insert into hires values ('2011-03-01', 'Chris');
select * from hires;
HIRED NAME
-----------------
2011-01-01 Matt
2011-02-01 Dave
2011-03-01 Chris
select * from hires where hired >= '2011-02-01';
HIRED NAME
-----------------
2011-02-01 Dave
2011-03-01 Chris
select * from hires where hired >= '2011-02-01 00:00:00.0';
SQL Error
--------------------------------------------------------------------------
data exception: invalid datetime format / Error Code: -3407 / State: 22007
select * from hires where hired between '2011-02-01' and '2011-02-28';
HIRED NAME
----------------
2011-02-01 Dave
select * from hires where hired between '2011-02-01 00:00:00.0' and '2011-02-28 23:59:59.9';
SQL Error
--------------------------------------------------------------------------
data exception: invalid datetime format / Error Code: -3407 / State: 22007
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1147
HyperSQL Database Engine (HSQLDB) / Bugs / #1147 JDBCClobFile length() bug for fixed width enc > 1 byte
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm just posting this here so that it is a known bug between releases 2.1 and 2.2.2.
Basically, the bug results from failing to provide a sufficiently rigorous unit test, togther with an inadertent typo where the file length is multipled (*) by the fixed character byte width, where it should be divided (/).
This will only manifest for truely fixed width encodings of over 1 byte per character, such as "UTF-16BE" and UTF-16LE" (which are hopefully rather uncommon)
This will not manifest for UTF8 or UTF16, since they are not fixed width encodings, and will not manifest for latinxxx or any other single byte encoding, since multiplication and division by one both yeild the same value.
The fix and updated unit tests will be commited today.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1148
HyperSQL Database Engine (HSQLDB) / Bugs / #1148 Exception getting connection
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
org.hsqldb.jdbc.JDBCDataSource.getConnection(String, String) checks field user for not being null instead of corresponding accepted argument.
It leads to exception "invalid argument: user" if user was not set previously explicitly with setUser(String)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1149
HyperSQL Database Engine (HSQLDB) / Bugs / #1149 Create Temporary Table as select WITH DATA
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if you create a table from a select statement, and the data is to be published into the created table, doesnt work.
Create Table t1 as (Select * from t2) WITH DATA (this doesn't work)
This only solution is to create with no data and then insert the the rows.
Create Table t1 as (Select * from t2) WITH NO DATA ;
insert into t1 Select * from t2;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1150
HyperSQL Database Engine (HSQLDB) / Bugs / #1150 session hangs with invalid use of table function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This can be reproduced most easily with the HSQL DatabaseManager. Create this function (or probably any function returning a table):
------------------------------------------------
CREATE FUNCTION table_function ()
RETURNS TABLE (ID INT)
READS SQL DATA
BEGIN ATOMIC
RETURN TABLE(SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS);
END
------------------------------------------------
Select it:
------------------------------------------------
select table_function() from information_schema.system_users
------------------------------------------------
The session hangs. The database server is not affected, i.e. new connections are possible. Also, it doesn't seem to matter whether the database is run in in-memory mode, or server-mode. I have observed this with both versions 2.2.1 and 2.2.4. Here's a thread-dump of the hanging thread:
------------------------------------------------
SocketInputStream.socketRead0(FileDescriptor, byte[], int, int, int) line: not available [native method]
SocketInputStream.read(byte[], int, int) line: 129
BufferedInputStream.fill() line: 218
BufferedInputStream.read() line: 237
DataInputStream.readByte() line: 248
Result.newResult(DataInput, RowInputBinary) line: not available 
ClientConnection.read() line: not available 
ClientConnection.execute(Result) line: not available
JDBCStatement.fetchResult(String, int, int, int[], String[]) line: not available
JDBCStatement.execute(String) line: not available 
DatabaseManagerSwing.executeSQL() line: not available 
DatabaseManagerSwing.access$1000(DatabaseManagerSwing) line: not available 
DatabaseManagerSwing$StatementExecRunnable.run() line: not available
InvocationEvent.dispatch() line: 209
EventQueue.dispatchEventImpl(AWTEvent, Object) line: 642
EventQueue.access$000(EventQueue, AWTEvent, Object) line: 85
EventQueue$1.run() line: 603
EventQueue$1.run() line: 601
AccessController.doPrivileged(PrivilegedAction<T>, AccessControlContext) line: not available [native method]
AccessControlContext$1.doIntersectionPrivilege(PrivilegedAction<T>, AccessControlContext, AccessControlContext) line: 87 
EventQueue.dispatchEvent(AWTEvent) line: 612
EventDispatchThread.pumpOneEventForFilters(int) line: 269 
EventDispatchThread.pumpEventsForFilter(int, Conditional, EventFilter) line: 184
EventDispatchThread.pumpEventsForHierarchy(int, Conditional, Component) line: 174 
EventDispatchThread.pumpEvents(int, Conditional) line: 169 
EventDispatchThread.pumpEvents(Conditional) line: 161 
EventDispatchThread.run() line: 122
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1151
HyperSQL Database Engine (HSQLDB) / Bugs / #1151 INFORMATION_SCHEMA.COLUMNS regression or new feature?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There seems to be a regression between versions 2.2.1 and 2.2.3/2.2.4 in the INFORMATION_SCHEMA.COLUMNS view (I didn't check 2.2.2). If it's intended, then I didn't see it in the release notes:
http://hsqldb.org/doc/2.0/changelist_2_0.txt
I think this is quite an important change between such minor releases for it not to be mentioned, that's why I thought it might be a regression. Here's what I observed. For this table:
--------------------------------------------------
CREATE TABLE t_arrays (
id integer not null,
string_array VARCHAR(20) ARRAY,
number_array INTEGER ARRAY,
date_array DATE ARRAY,
CONSTRAINT pk_t_arrays PRIMARY KEY (ID)
);
--------------------------------------------------
I used to get these values in 2.2.1:
--------------------------------------------------
select COLUMN_NAME, DATA_TYPE, DECLARED_DATA_TYPE
from INFORMATION_SCHEMA.COLUMNS 
where TABLE_NAME = 'T_ARRAYS';
ID INTEGER INTEGER
STRING_ARRAY VARCHAR ARRAY VARCHAR ARRAY
NUMBER_ARRAY INTEGER ARRAY INTEGER ARRAY
DATE_ARRAY DATE ARRAY DATE ARRAY
--------------------------------------------------
Now I get these values in 2.2.4:
--------------------------------------------------
select COLUMN_NAME, DATA_TYPE, DECLARED_DATA_TYPE, DTD_IDENTIFIER
from INFORMATION_SCHEMA.COLUMNS 
where TABLE_NAME = 'T_ARRAYS';
ID INTEGER INTEGER INTEGER
STRING_ARRAY ARRAY ARRAY VARCHAR(20) ARRAY
NUMBER_ARRAY ARRAY ARRAY INTEGER ARRAY
DATE_ARRAY ARRAY ARRAY DATE ARRAY
--------------------------------------------------
DATA_TYPE and DECLARED_DATA_TYPE only hold the "ARRAY" value, no reference to the array type anymore. On the other hand, there is a new column DTD_IDENTIFIER that holds more information than the original DECLARED_DATA_TYPE column (see VARCHAR(20), vs VARCHAR)...
What do you think about this?
Cheers
Lukas
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1152
HyperSQL Database Engine (HSQLDB) / Bugs / #1152 INFORMATION_SCHEMA.ELEMENT_TYPES doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In your release notes, I found that you have added this new INFORMATION_SCHEMA.ELEMENT_TYPES view in 2.2.3:
http://hsqldb.org/doc/2.0/changelist_2_0.txt
I have tried selecting from it and got an unhandled exception:
select * from INFORMATION_SCHEMA.ELEMENT_TYPES
------------------------------------------------------
java.lang.RuntimeException: unsupported internal operation: PersistentStoreCollectionSession java.lang.RuntimeException: unsupported internal operation: PersistentStoreCollectionSession / Error Code: -458 / State: S1000
------------------------------------------------------
java.sql.SQLException: java.lang.RuntimeException: unsupported internal operation: PersistentStoreCollectionSession java.lang.RuntimeException: unsupported internal operation: PersistentStoreCollectionSession
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.access$1000(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing$StatementExecRunnable.run(Unknown Source)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:642)
at java.awt.EventQueue.access$000(EventQueue.java:85)
at java.awt.EventQueue$1.run(EventQueue.java:603)
at java.awt.EventQueue$1.run(EventQueue.java:601)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:612)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1153
HyperSQL Database Engine (HSQLDB) / Bugs / #1153 java.lang.Bug on query handling
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.lang.ArrayIndexOutOfBoundsException encountered on a queries to a particular view structured as demonstrated by the attached test program
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1154
HyperSQL Database Engine (HSQLDB) / Bugs / #1154 Error in handing update/insert/delete on a view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Thanks for the prompt response. However, it looks as though the fix for 3354244 had introduced new bugs. It is no longer possible to prepare statements to update/insert/delete on that particular structured view.This is demonstrated by the attached test program
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1155
HyperSQL Database Engine (HSQLDB) / Bugs / #1155 union and character padding
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I do the following:
create table tab (n integer)
insert into tab values (1)
select t from(
(select 'aa' t from tab) union 
(select 'bbbbb' t from tab)
) b
then the first result row is not 'aa' as expected, but 'aa ' with three trailing white spaces.
This is easier to see with
select concat(t,'x') from(
(select 'aa' t from tab) union 
(select 'bbbbb' t from tab)
) b
I used
Bundle-Version: 2.1.0
Bnd-LastModified: 1300071888199
Specification-Version: 2.1.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1156
HyperSQL Database Engine (HSQLDB) / Bugs / #1156 RuntimeException with ORDER BY CASE...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is how to reproduce it (with 2.2.5):
create table x (i int);
insert into x values(1), (2), (3), (4), (5);
Now this works (3 and 1 are inlined, no bind variables):
-------------------------------------------------------------------------
PreparedStatement stmt = connection.prepareStatement("select * from x order by case i when 3 then 1 end asc");
stmt.executeQuery();
So does this (the cast seems to be important. why? Most other RDBMS don't need the cast in such a situation):
---------------------------------------------------------------------------------------------------------------------------------------------------
PreparedStatement stmt = connection.prepareStatement("select * from x order by case i when ? then cast(? as int) end asc");
stmt.setInt(1, 3);
stmt.setInt(2, 1);
stmt.executeQuery();
But this doesn't:
---------------------
PreparedStatement stmt = connection.prepareStatement("select * from x order by case i when ? then ? end asc");
stmt.setInt(1, 3);
stmt.setInt(2, 1);
The exception is a bit cryptic:
java.sql.SQLException: java.lang.RuntimeException: unsupported internal operation: NullType java.lang.RuntimeException: unsupported internal operation: NullType
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
stmt.executeQuery();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1157
HyperSQL Database Engine (HSQLDB) / Bugs / #1157 ClassCastException with < ALL operator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here's another one of those highly unlikely queries that I tend to come up with for my own integration tests :-)
Create this table with 2.2.5:
-----------------------------------
create table x (i int);
insert into x values(1), (2), (3), (4), (5);
This runs smoothly
-------------------------
PreparedStatement stmt = connection.prepareStatement("select * from x where i < all (select 4 from information_schema.system_users)");
stmt.executeQuery();
So does this (necessary cast, again)
-------------------------------------------------
PreparedStatement stmt = connection.prepareStatement("select * from x where i < all (select cast(? as int) from information_schema.system_users)");
stmt.setInt(1, 4);
stmt.executeQuery();
This doesn't
----------------
PreparedStatement stmt = connection.prepareStatement("select * from x where i < all (select ? from information_schema.system_users)");
stmt.setInt(1, 4);
stmt.executeQuery();
java.sql.SQLException: java.lang.ClassCastException java.lang.ClassCastException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
The problem seems to appear for all <operator> { all | any | some } combinations
Note, this, however works well:
-----------------------------------------
PreparedStatement stmt = connection.prepareStatement("select * from x where i < (select ? from information_schema.system_users)");
stmt.setInt(1, 4);
stmt.executeQuery();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1158
HyperSQL Database Engine (HSQLDB) / Bugs / #1158 NullPointerException when calling char_length
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Casting again. 
This works fine:
--------------------
PreparedStatement stmt = connection.prepareStatement("select char_length(cast(? as varchar(5))) from information_schema.system_users");
stmt.setString(1, "abc");
stmt.executeQuery();
This doesn't:
-----------------
PreparedStatement stmt = connection.prepareStatement("select char_length(?) from information_schema.system_users");
stmt.setString(1, "abc");
stmt.executeQuery();
I get this exception (already at line 1)
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at org.jooq.impl.AbstractQuery.execute(AbstractQuery.java:97)
Note also, this works:
----------------------------
PreparedStatement stmt = connection.prepareStatement("select octet_length(?) from information_schema.system_users");
stmt.setString(1, "abc");
stmt.executeQuery();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1159
HyperSQL Database Engine (HSQLDB) / Bugs / #1159  Statement.RETURN_GENERATED_KEYS in Batch broken sine 2.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have Batch insert operations that works with generated keys
{ id generated by default as identity (start with 1)}
The flow that used to work in hsqldb 2.1.0 is now broken in 2.2.5 (and 2.2.4) (BTW the same code is on in Oracle and MySQL)
The error I'm getting now is:" java.sql.SQLException: invalid cursor state: identifier cursor not positioned on row in UPDATE, DELETE, SET, or GET statement: ; ResultSet is empty"
JDB code is as flowing:
stmt = connection.prepareStatement("INSERT INTO TEST_PROVINCE (NAME) VALUES (?)", Statement.RETURN_GENERATED_KEYS);
stmt.setString(1, "b1");
stmt.addBatch();
stmt.setString(1, "b1");
stmt.addBatch();
stmt.executeBatch();
ResultSet keys= stmt.getGeneratedKeys();
keys.next();
keys.getLong(1)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1160
HyperSQL Database Engine (HSQLDB) / Bugs / #1160 incompatible data type in operation for call parameter
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
prepareCall("select (X'cafebabe' || ?) from dual") fails with 'incompatible data type in operation'
adding a cast for the parameter eliminates the error, but should not be required because the LHS of the catenation is unambiguous (binary type)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1161
HyperSQL Database Engine (HSQLDB) / Bugs / #1161 Doubts about new ELEMENT_TYPES table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Fred,
I'm trying to get a hang of all the new equijoins between dictionary views that you impose on me :-) I have found an inconsistency in version 2.2.5 (or maybe I'm misunderstanding something?). Consider these three simple stored procedures:
------------------------------------------------------------------------
CREATE PROCEDURE p_arrays1(IN in_array int array, OUT out_array int array)
BEGIN ATOMIC
SET out_array = in_array;
END
CREATE PROCEDURE p_arrays2(IN in_array bigint array, OUT out_array bigint array)
BEGIN ATOMIC
SET out_array = in_array;
END
CREATE PROCEDURE p_arrays3(IN in_array varchar(1000) array, OUT out_array varchar(1000) array)
BEGIN ATOMIC
SET out_array = in_array;
END
------------------------------------------------------------------------
They all take a typed array as input and echo it to the OUT parameter
When I now run this statement:
------------------------------------------------------------------------
select * from INFORMATION_SCHEMA.ELEMENT_TYPES
------------------------------------------------------------------------
I get 5 result rows. The BIGINT ARRAY and INT ARRAY rows are duplicated (maybe due to a cartesian product somewhere in the ELEMENT_TYPES view implementation?). Only the VARCHAR(1000) ARRAY is returned once, only
This statement only returns the expected 3 rows:
------------------------------------------------------------------------
select distinct * from INFORMATION_SCHEMA.ELEMENT_TYPES
------------------------------------------------------------------------
I can use the DISTINCT keyword as a workaround, for now... What should be the correct behaviour? Because if duplication is correct (due to explicit matching by parameter ordinal), then I'd be missing the ordinal information from the INFORMATION_SCHEMA.PARAMETERS view
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1162
HyperSQL Database Engine (HSQLDB) / Bugs / #1162 Bad link on hsqlUsing.html
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On this page here:
http://hsqldb.org/web/hsqlUsing.html
...the link to ObJectRelationalBridge - OJB is "broken", i.e. the OJB project has been retired in favour of Apache's OpenJPA implementation:
http://attic.apache.org/projects/ojb.html
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1163
HyperSQL Database Engine (HSQLDB) / Bugs / #1163 Duplicate Column Names even with Alias
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create a table with 2 fields. 
Select both fields and a third using substring of one of them with an Alias. 
HSQL throws an exception "Duplicate Column name in derived table"
I think it doesn't take the alias into consideration as the new name of the field.
To reproduce the bug: execute the following 2 statements
CREATE TABLE "t1"("f1" VARCHAR(10),"f2" VARCHAR(10))
SELECT * ,substring("f1",1,3)as "newf1" from "t1"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1164
HyperSQL Database Engine (HSQLDB) / Bugs / #1164 Aggregate Function - unsupported internal operation: Type 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After updating HSQLDB from 2.1rc4 to 2.2.5, I can no longer perform the following SQL query anymore (calculate weighted average with 2 columns)
CREATE TABLE tick (tick varchar(16), price double, volume double)
SELECT tick, SUM(price * volume) / SUM(volume)
FROM TRX
GROUP BY tick
I will receive an exception:
Caused by: org.hsqldb.HsqlException: java.lang.RuntimeException: unsupported internal operation: Type
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 29 more
Could you take a look of it?
Thank you
jacklty
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1165
HyperSQL Database Engine (HSQLDB) / Bugs / #1165 NullPointerException when dropping schema
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create schema "first";
create schema "second";
create table "first"."firstTable" ("id" integer primary key);
create table "second"."secondTable" ("ref" integer references "first"."firstTable");
drop schema "second" cascade; 
drop schema "first" cascade; -- null pointer exception
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing.access$1000(Unknown Source)
at org.hsqldb.util.DatabaseManagerSwing$StatementExecRunnable.run(Unknown Source)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:641)
at java.awt.EventQueue.access$000(EventQueue.java:84)
at java.awt.EventQueue$1.run(EventQueue.java:602)
at java.awt.EventQueue$1.run(EventQueue.java:600)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:611)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementSchema.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 19 more
Caused by: java.lang.NullPointerException
at org.hsqldb.SchemaManager.removeSchemaObject(Unknown Source)
at org.hsqldb.SchemaManager.removeSchemaObjects(Unknown Source)
at org.hsqldb.SchemaManager.dropSchema(Unknown Source)
at org.hsqldb.StatementSchema.dropSchema(Unknown Source)
at org.hsqldb.StatementSchema.getResult(Unknown Source)
... 23 more
Hsqldb 2.2.5
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1166
HyperSQL Database Engine (HSQLDB) / Bugs / #1166 subselect doesn't work correctly with a view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
when using a view in an inner select as described in the following example, no results are returned.
create table test (id bigint, val varchar(1));
insert into test values 1,'a' ;
insert into test values 2,'b' ;
insert into test values 3,'c' ;
insert into test values 4,'a' ;
insert into test values 5,'b' ;
insert into test values 6,'c' ;
insert into test values 6,'a' ;
insert into test values 7,'b' ;
insert into test values 8,'c' ;
create view test_view as select * from test;
SELECT
*
FROM
TEST TV0
WHERE
TV0.ID IN
(
SELECT
TV1.ID
FROM
TEST_VIEW TV1
WHERE
TV1.ID < 4
AND TV1.VAL = TV0.VAL
)
when the view usage is replaced with the table or tvo.val in the where clause is replaced by a hard-coded string, results are returned as expected. 
The query is a simplified example of SQL generated by Hibernate-Envers so modifying the SQL is no option for us. We use a database view to support legacy code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1167
HyperSQL Database Engine (HSQLDB) / Bugs / #1167 Identity colum: Inconsistency between documentation and code
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The documentation suggests at http://hsqldb.org/doc/guide/ch09.html#create_table-section states the following syntax for column definition
columnname Datatype [(columnSize[,precision])]
[{DEFAULT <defaultValue> |
GENERATED BY DEFAULT AS IDENTITY
(START WITH <n>[, INCREMENT BY <m>])}] |
[[NOT] NULL] [IDENTITY] [PRIMARY KEY]
The key (for this issue) is the comma (,) between START WITH <n> and INCREMENT BY <m>. When I do this I get an exception "saying unexpected token: , required: )". Basically saying it is expecting a space instead of a comma. If I remove the comma between start with and increment by it works. So it would seem that the documentation needs updating, right?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1168
HyperSQL Database Engine (HSQLDB) / Bugs / #1168 BooleanType.convertToDefaultType() does not support numbers
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
BooleanType.convertToDefaultType() does not properly convert a number object to a boolean for insert/update into a database. It seems to only handle Boolean and String types.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1169
HyperSQL Database Engine (HSQLDB) / Bugs / #1169 Exception over an HTTPConnection on huge records insertion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The Java test file is uploaded here.
The test results are below:
TEST SERVER=org.hsqldb.server.WebServer@1d99a4d, WRITE DELAY=500 MILLISECONDS
--------------------------------------------------------------------------------
[WebServer@1d99a4d]: [Thread[main,5,main]]: setSilent(true)
[WebServer@1d99a4d]: Initiating startup sequence...
[WebServer@1d99a4d]: Server socket opened successfully in 5 ms.
[WebServer@1d99a4d]: Database [index=0, id=0, db=file:test/db, alias=test] opened sucessfully in 560 ms.
[WebServer@1d99a4d]: Startup sequence completed in 569 ms.
[WebServer@1d99a4d]: 2011-08-28 12:47:32.979 HSQLDB web server 2.2.5 is online on port 23999
[WebServer@1d99a4d]: To close normally, connect and execute SHUTDOWN SQL
[WebServer@1d99a4d]: From command line, use [Ctrl]+[C] to abort abruptly
12:47:33: 0
12:47:38: 10000
12:47:42: 20000
12:47:45: 28229
java.sql.SQLTransientConnectionException: java.net.NoRouteToHostException: Cannot assign requested address
OK
[WebServer@1d99a4d]: Initiating shutdown sequence...
[WebServer@1d99a4d]: Shutdown sequence completed in 0 ms.
[WebServer@1d99a4d]: 2011-08-28 12:47:45.965 SHUTDOWN : System.exit() was not called
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.execute(Unknown Source)
at bug2.Bug2.main(Bug2.java:46)
Caused by: org.hsqldb.HsqlException: java.net.NoRouteToHostException: Cannot assign requested address
at org.hsqldb.ClientConnection.openConnection(Unknown Source)
at org.hsqldb.ClientConnectionHTTP.execute(Unknown Source)
... 3 more
Caused by: java.net.NoRouteToHostException: Cannot assign requested address
at java.net.PlainSocketImpl.socketConnect(Native Method)
at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:351)
at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:213)
at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:200)
at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
at java.net.Socket.connect(Socket.java:529)
at java.net.Socket.connect(Socket.java:478)
at java.net.Socket.<init>(Socket.java:375)
at java.net.Socket.<init>(Socket.java:189)
at org.hsqldb.server.HsqlSocketFactory.createSocket(Unknown Source)
... 5 more
HSQL connection is OK:
TEST SERVER=org.hsqldb.server.Server@1d99a4d, WRITE DELAY=500 MILLISECONDS
--------------------------------------------------------------------------------
[Server@1d99a4d]: [Thread[main,5,main]]: setSilent(true)
[Server@1d99a4d]: Initiating startup sequence...
[Server@1d99a4d]: Server socket opened successfully in 5 ms.
[Server@1d99a4d]: Database [index=0, id=0, db=file:test/db, alias=test] opened sucessfully in 513 ms.
[Server@1d99a4d]: Startup sequence completed in 521 ms.
[Server@1d99a4d]: 2011-08-28 12:52:32.062 HSQLDB server 2.2.5 is online on port 23999
[Server@1d99a4d]: To close normally, connect and execute SHUTDOWN SQL
[Server@1d99a4d]: From command line, use [Ctrl]+[C] to abort abruptly
12:52:32: 0
12:52:33: 10000
12:52:34: 20000
12:52:34: 30000
12:52:35: 40000
12:52:36: 50000
12:52:37: 60000
12:52:38: 70000
12:52:38: 80000
12:52:39: 90000
OK
[Server@1d99a4d]: Initiating shutdown sequence...
[Server@1d99a4d]: Shutdown sequence completed in 101 ms.
[Server@1d99a4d]: 2011-08-28 12:52:40.543 SHUTDOWN : System.exit() was not called
My systems were:
1) Mandriva 2010.2 i586, Oracle JRE 6 Update 26 (home computer)
2) OpenSUSE 11.4 x86_64, Oracle JRE 6 Update 26 (office computer)
The results are same.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1170
HyperSQL Database Engine (HSQLDB) / Bugs / #1170 Create table hangs after writing to another table
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using HSQLDB 2.2.5, if I do the following:
1. Create connection1
2. Create table1 using connection1
3. Create connection2
4. Write to table1 using connection2
5. Create table2 using connection1
The call to create the 2nd table hangs. Is this expected behavior? See the attached test case.
Using HSQLDB 2.1.0, the attached test case passes.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1171
HyperSQL Database Engine (HSQLDB) / Bugs / #1171 parameter of type char(1) in merge takes 32K of memory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After upgrading from HSQDBL 2.2.4 to 2.2.5 we noticed a dramatic increase in HSQLDB's cache's memory consumption. After some investigation we discovered that a parameter on a CHAR(1) value in a MERGE statement was being padded out to CHAR(32K). For a cache size of 50,000 rows this translates into roughly 1.5GB of additional memory usage.
Here's the table definition and the merge statement:
CREATE TABLE items (item_id VARCHAR(512) PRIMARY KEY, item_code CHAR(1))
MERGE INTO items
USING (VALUES(CAST(? AS VARCHAR(512)), CAST(? AS CHAR(1)))) AS params(item_id, item_code)
ON items.item_id = params.item_id
WHEN MATCHED THEN 
UPDATE SET items.item_code = params.item_code
WHEN NOT MATCHED THEN 
INSERT (item_id, item_code) VALUES(params.item_id, params.item_code)
The problem does not reproduce if we change the data type in the merge statement to a varchar. I've also attached a JUnit test that shows the problem and will lead to OutOfMemoryErrors when run with a max heap size of 1GB.
It looks like this behavior was introduced in r4345.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1172
HyperSQL Database Engine (HSQLDB) / Bugs / #1172 NPE when data fiel is locked on disk
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL Database Engine 1.8.1 
java.lang.NullPointerException
at org.hsqldb.Session.execute(Session.java:881)
at org.hsqldb.jdbc.jdbcPreparedStatement.<init>(jdbcPreparedStatement.java:1830)
at org.hsqldb.jdbc.jdbcConnection.prepareStatement(jdbcConnection.java:1513)
I think, HSQLDB should throw a meaningful exception that cane be recognized as "datafile is locked".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1173
HyperSQL Database Engine (HSQLDB) / Bugs / #1173 error parsing a parameterised SQL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query is legal
ResultSet set = stmt.executeQuery("select to_number(to_char((select current_timestamp + c0 day from dual), 'YYYYMMDD')) from dual");
but this parameterised version of it is not 
PreparedStatement pstmt = c.prepareStatement("select to_number(to_char((select ? + c0 day from dual), 'YYYYMMDD')) from dual");
pstmt.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
set = pstmt.executeQuery();
...
Exception in thread "main" java.sql.SQLSyntaxErrorException: incompatible data type in operation
at org.hsqldb.jdbc.Util.sqlException(Util.java:376)
at org.hsqldb.jdbc.Util.sqlException(Util.java:247)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3893)
The above SQL is accepted by both Oracle and DB2.
Attached is a test program for this
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1174
HyperSQL Database Engine (HSQLDB) / Bugs / #1174 Missing caused-by exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When an IOException occurs during the JDBCPreparedStatement.setBinaryStream() the causing exception is lost because not given as cause to Util.sqlException().
hsqldb 2.2.5,class JDBCPreparedstatement, line 2703:
} catch (Throwable e) {
throw Util.sqlException(ErrorCode.JDBC_INPUTSTREAM_ERROR, e.toString());
}
should become:
throw Util.sqlException(e,ErrorCode.JDBC_INPUTSTREAM_ERROR,e.toString());
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1175
HyperSQL Database Engine (HSQLDB) / Bugs / #1175 VARCHAR is space padded or trims trailing spaces
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
VARCHAR appears to be padded with trailing spaces (or trailing spaces are trimmed), which means that VARCHAR columns with a unique constraint can't have 2 entries differing only by trailing spaces. I would expect this behavior from CHARACTER but not VARCHAR. See the attached test case.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1176
HyperSQL Database Engine (HSQLDB) / Bugs / #1176 NPE at ServerConnection thread
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We had been using HSQLDB for a long time and some time ago have switched to 2.x version. Unfortunately, recently we have got freezing of our application in our old and reliable DB related code.
The reason is NPE in HSQLDB's ServerConnection thread. The problem is stable reproduced on the latest HSQLDB 2.2.5 and looks like this
Exception in thread "HSQLDB Connection @1ebd75b" java.lang.NullPointerException
at org.hsqldb.SessionData.getDataResultSlice(SessionData.java:228)
at org.hsqldb.Session.execute(Session.java:1146)
at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:387)
at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1524)
at java.lang.Thread.run(Thread.java:662)
This NPE brings to opening new server socket without closing the old one. As result, client code doesn't know anything about server side problem and waiting answer on the old socket forever:
"main" prio=6 tid=0x02451800 nid=0xff8 runnable [0x004ef000]
java.lang.Thread.State: RUNNABLE
at java.net.SocketInputStream.socketRead0(Native Method)
at java.net.SocketInputStream.read(SocketInputStream.java:129)
at java.io.BufferedInputStream.fill(BufferedInputStream.java:218)
at java.io.BufferedInputStream.read(BufferedInputStream.java:237)
- locked <0x09c51b20> (a java.io.BufferedInputStream)
at java.io.DataInputStream.readByte(DataInputStream.java:248)
at org.hsqldb.result.Result.newResult(Result.java:245)
at org.hsqldb.ClientConnection.read(ClientConnection.java:493)
at org.hsqldb.ClientConnection.execute(ClientConnection.java:213)
- locked <0x09c51b88> (a org.hsqldb.ClientConnection)
at org.hsqldb.ClientConnection.getRows(ClientConnection.java:228)
- locked <0x09c51b88> (a org.hsqldb.ClientConnection)
at org.hsqldb.navigator.RowSetNavigatorClient.getBlock(RowSetNavigatorClient.java:259)
at org.hsqldb.navigator.RowSetNavigatorClient.getCurrent(RowSetNavigatorClient.java:118)
at org.hsqldb.jdbc.JDBCResultSet.getCurrent(JDBCResultSet.java:7175)
at org.hsqldb.jdbc.JDBCResultSet.getColumnInType(JDBCResultSet.java:7245)
at org.hsqldb.jdbc.JDBCResultSet.getInt(JDBCResultSet.java:596)
at org.hsqldb.jdbc.JDBCResultSet.getInt(JDBCResultSet.java:1147)
at ServerNPEExample.executeQueries(ServerNPEExample.java:108)
at ServerNPEExample.main(ServerNPEExample.java:38)
I've attached java example for the problem reproducing. Just start it and NPE will appear.
For now, I've found temp. workaround for the problem: set FETCH_SIZE const in the example to zero. Another known workaround is to use separate connection per table access via ResultSet.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1177
HyperSQL Database Engine (HSQLDB) / Bugs / #1177 DISTINCT crashes in 2.2.6-SNAPSHOT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Attached test case blows up on SVN 4417 + 4421(HEAD)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1178
HyperSQL Database Engine (HSQLDB) / Bugs / #1178 2.2.5 Memory Leak on 'MERGE INTO' with sample code
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Scenario: 
1) I start with no existing database on the file system
2) After 'INSERT INTO' 10000 records in a table using an prepared statement, and closing down the connection, about 10MB is in use in the Java VM after Garbage Collecting 3x with 2 second sleeps in between.
3) I remove the database files from the file system, and change the prepared statement to use 'MERGE INTO', and shoot the same 10000 records into the database. Result: about 700MB(!) are in use after 3x GC
Other trial run scenarios:
- I executed on both Java 1.7 and 1.6 and the results are similar.
- I executed the prepared statement in batch mode, as described in the manual: Still same results.
- I changed the scenario to 5000 records, and the 'in use memory' after closing down the connection varies significantly (to me this denotes a second kind of memory leak, as it applies both to the INSERT and MERGE scenarios.
Here are the numbers.
*** Initial *** Used memory: 671,296
'INSERT INTO 10000x': Used memory: 13,642,880
'MERGE INTO 10000x': Used memory: 715,594,704
'INSERT INTO 5000x': Used memory: 10,382,992
'MERGE INTO 5000x': Used memory: 348,795,544
Attached is the sample code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1179
HyperSQL Database Engine (HSQLDB) / Bugs / #1179 JDBC 2.0 ResultSet updateRow is not working as expected
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have simple ResultSet with update of current row (if required by application).
It works in MySQL and Oracle. But Breaks in HSQLDB.
Can you please be so kind to look at it?
Environment tested hsqldb v 2.2.5 and any before. Java 7 or Java 6
----
Exception in thread "main" java.sql.SQLException: invalid cursor state: identified cursor is not open
at org.hsqldb.jdbc.Util.sqlException(Util.java:418)
at org.hsqldb.jdbc.Util.sqlException(Util.java:247)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4647)
at org.hsqldb.jdbc.JDBCResultSet.performUpdate(JDBCResultSet.java:7374)
at org.hsqldb.jdbc.JDBCResultSet.updateRow(JDBCResultSet.java:4104)
at com.pyx4j.entity.rdb.hsql.HSQLBug.main(HSQLBug.java:61)
Caused by: org.hsqldb.HsqlException: invalid cursor state: identified cursor is not open
at org.hsqldb.error.Error.error(Error.java:134)
at org.hsqldb.error.Error.error(Error.java:104)
at org.hsqldb.Session.executeResultUpdate(Session.java:1539)
at org.hsqldb.Session.execute(Session.java:1061)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4639)
... 3 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1180
HyperSQL Database Engine (HSQLDB) / Bugs / #1180 Upload 2.2.5 jar to maven repository
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
please deploy the latest version to central maven repository
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1181
HyperSQL Database Engine (HSQLDB) / Bugs / #1181 Integrity constraint violation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Summary how to represent situation is in attached SQL script.
First we create schema with 3 tables (dictionary, temporary table, storage table) and 1 view to select data.
Then we create procedure that merges data from temporary table into storage table.
When there is data in a temporary table, all is ok.
But when there is no data in a temporary table, call statement:
CALL PR_UPD_LOGIC_LINE_STAT()
Fails with:
java.sql.SQLException: integrity constraint violation: NOT NULL check constraint; SYS_CT_10033 table: TM_LOGIC_LINE_STAT column: DTDATETIME
at org.hsqldb.jdbc.Util.sqlException(Util.java:255)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1838)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:636)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(DatabaseManagerSwing.java:1632)
at org.hsqldb.util.DatabaseManagerSwing.access$1000(DatabaseManagerSwing.java:156)
at org.hsqldb.util.DatabaseManagerSwing$StatementExecRunnable.run(DatabaseManagerSwing.java:1603)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:641)
at java.awt.EventQueue.access$000(EventQueue.java:84)
at java.awt.EventQueue$1.run(EventQueue.java:602)
at java.awt.EventQueue$1.run(EventQueue.java:600)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:611)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)
Caused by: org.hsqldb.HsqlException: integrity constraint violation: NOT NULL check constraint; SYS_CT_10033 table: TM_LOGIC_LINE_STAT column: DTDATETIME
at org.hsqldb.error.Error.error(Error.java:134)
at org.hsqldb.Table.enforceRowConstraints(Table.java:2292)
at org.hsqldb.Table.insertSingleRow(Table.java:2533)
at org.hsqldb.StatementDML.insertRowSet(StatementDML.java:809)
at org.hsqldb.StatementDML.executeMergeStatement(StatementDML.java:758)
at org.hsqldb.StatementDML.getResult(StatementDML.java:200)
at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:190)
at org.hsqldb.StatementCompound.executeForLoop(StatementCompound.java:494)
at org.hsqldb.StatementCompound.execute(StatementCompound.java:332)
at org.hsqldb.StatementCompound.executeBlock(StatementCompound.java:376)
at org.hsqldb.StatementCompound.execute(StatementCompound.java:327)
at org.hsqldb.StatementProcedure.executePSMProcedure(StatementProcedure.java:234)
at org.hsqldb.StatementProcedure.getProcedureResult(StatementProcedure.java:173)
at org.hsqldb.StatementProcedure.getResult(StatementProcedure.java:122)
at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:190)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1331)
at org.hsqldb.Session.executeDirectStatement(Session.java:1214)
at org.hsqldb.Session.execute(Session.java:1000)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1830)
... 18 more
This bug can be reproduced with latest Subversion checkout (revision 4518).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1182
HyperSQL Database Engine (HSQLDB) / Bugs / #1182 ORA compatibility:rownum misunderstood in DELETE query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a DELETE query, ROWNUM can be used to restrict the number of records to delete in one query, like for example:
DELETE FROM hugetable WHERE ROWNUM < 1000;
The above statement should delete 1000 rows from 'hugetable'. However, in HSQLDB this statement has no effect if the total number of rows in the table exceeds 999 rows (0 rows deleted). ROWNUM seems to be interpreted as the total number of rows in 'hugetable', which is not correct. ROWNUM (in Oracle) means the current row it is acting upon, meaning it will run from 1 to the maximum rows in the table.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1183
HyperSQL Database Engine (HSQLDB) / Bugs / #1183 SQL Routine NOT FOUND handler not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From the doc, it said whenever update affected 0, should go to not found handler, but it did not do that.
In below example, you can see table B, msg is empty always.
Example:
CREATE TABLE AA (F_1 VARCHAR(12),F_2 BOOLEAN)
CREATE TABLE B (msg VARCHAR(2048))
insert into aa(f_1,f_2) values('A',TRUE);
insert into aa(f_1,f_2) values('B',TRUE);
insert into aa(f_1,f_2) values('C',TRUE);
CREATE PROCEDURE test()
MODIFIES SQL DATA
BEGIN ATOMIC
DECLARE UNDO HANDLER FOR NOT FOUND INSERT INTO B (msg) VALUES ('ok');
UPDATE AA
SET AA.F_2 = FALSE
WHERE AA.F_1 = 'A';
UPDATE AA
SET AA.F_2 = TRUE
WHERE AA.F_1 = 'B' AND AA.F_2 = FALSE;
UPDATE AA
SET AA.F_2 = FALSE
WHERE AA.F_1 = 'C';
END;
CALL fix.test();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1184
HyperSQL Database Engine (HSQLDB) / Bugs / #1184 Trigger+Merge do not see variables in Merge statment
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Similar to an old bug:3107413 - PSM (PL/SQL) routines do not see variables in MERGE statement.
This time is a trigger. The trigger cannot compile, it said cannot see newRow pointer for the NEW data.
Thanks Fred!
CREATE TABLE FIX.AA 
(
F_1 VARCHAR(12),
F_2 BOOLEAN
)
CREATE TABLE FIX.IDX_TBL
(
I_1 BOOLEAN,
I_2 VARCHAR(12)
)
CREATE TRIGGER tgr AFTER UPDATE ON fix.aa
REFERENCING NEW AS newrow FOR EACH ROW
MERGE INTO FIX.IDX_TBL USING (VALUES(newrow.F_2, newrow.F_1))
AS vals(x,y) ON FIX.IDX_TBL.I_1 = vals.x
WHEN MATCHED THEN UPDATE SET FIX.IDX_TBL.I_2 = vals.y
WHEN NOT MATCHED THEN INSERT VALUES vals.x, vals.y;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1185
HyperSQL Database Engine (HSQLDB) / Bugs / #1185 Allow for omitting parentheses when calling procedures
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to the Javadoc of CallableStatement (and to some SQL dialects, especially that of Oracle), stored procedures without any arguments can be called without parentheses, e.g. these two should be the same
{ call my_procedure }
{ call my_procedure() }
See the Javadoc here:
http://download.oracle.com/javase/6/docs/api/java/sql/CallableStatement.html
Or some older documentation:
http://download.oracle.com/javase/1.4.2/docs/guide/jdbc/getstart/callablestatement.html
With HSQLDB I get:
java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: F_ONE
at org.hsqldb.jdbc.Util.sqlException(Util.java:376)
at org.hsqldb.jdbc.Util.sqlException(Util.java:247)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3893)
at org.hsqldb.jdbc.JDBCCallableStatement.<init>(JDBCCallableStatement.java:4864)
at org.hsqldb.jdbc.JDBCConnection.prepareCall(JDBCConnection.java:702)
at org.jooq.test.jOOQAbstractTest.testStoredFunctions(jOOQAbstractTest.java:4790)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1186
HyperSQL Database Engine (HSQLDB) / Bugs / #1186 Calling org.hsqldb.Server.main with the argument  "--props" 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Whensoever you call "java -cp ../lib/hsqldb.jar org.hsqldb.Server --props ../bin/config/server.properties" following exception is thrown:
[Server@e0e1c6]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@e0e1c6]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@e0e1c6]: [Thread[main,5,main]]: Failed to set properties
org.hsqldb.HsqlException: no valid database paths: unsupported property: server.props
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.server.Server.setProperties(Unknown Source)
at org.hsqldb.server.Server.main(Unknown Source)
Debugging results in following: The main method finds the server.properties file and it can read the properties in this file, too. But then the main method merges the properties from the file with the properties from the arguments (local variable named argProps).
{code}
String propsPath = argProps.getProperty(ServerProperties.sc_key_props);
String propsExtension = "";
if (propsPath == null) {
propsPath = "server";
propsExtension = ".properties";
}
propsPath = FileUtil.getFileUtil().canonicalOrAbsolutePath(propsPath);
ServerProperties fileProps = ServerConfiguration.getPropertiesFromFile(
ServerConstants.SC_PROTOCOL_HSQL, propsPath, propsExtension);
ServerProperties props =
fileProps == null
? new ServerProperties(ServerConstants.SC_PROTOCOL_HSQL)
: fileProps;
props.addProperties(argProps);
{code} 
But the argProps has still the property named system.props=../bin/config/server.properties and this property is for the server an invalid property, so in the method Server.setProperties(HsqlProperties) the calling of HsqlProperties.validate is thrown the org.hsqldb.HsqlException. 
The patch removes the server.props property from the argProps if the propsPath is not null.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1187
HyperSQL Database Engine (HSQLDB) / Bugs / #1187 MVCC+READ_COMMITTED: sql in SQL routine fail to acquire lock
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please see attached doc file for description and related ready-to-run files.
In a normal SQL, if we use MVCC+Read_Committed, and setAutoCommit(false), then when issue SQL like "Update xx", we will get the row lock until commit.
In SQL routine, we cannot acquire row lock when issue SQL like "Update xx".
However, it will be able to detect the lock acquired by other transactions. [Will pause if lock acquired by other transactions]
Below is a simple example to simulate the case:
1. A Java program called Locker to acquired a row lock on a row on FIX.LOCK_TBL table;
2. A Java program called SPRunner to run a SQL routine.
The SQL routine will run below.
2.1 UPDATE BB SET BB.F_2 = 9 WHERE BB.execID = '100';
2.2 UPDATE LOCK_TBL SET LOCK_TBL.F_2 = 2 WHERE LOCK_TBL.execID = '100';
Note that when the SQL routine run to 2.2, it will pause because a open transaction by 1.
This is to simulate a "Sleep" inside the SQL routine.
3. A Java program called Attacker to run
update fix.BB set f_2=6 where execid= '100'
If the row lock of BB table execId='100' has been taken by SPRunner, then Attacker should wait until SPRunner release.
However, the result is that
Attacker can run immediately, check the table, found the f_2 value changed to 6. It proves sql statement in SQL routine fail to acquire row lock.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1188
HyperSQL Database Engine (HSQLDB) / Bugs / #1188 Trigger "Instead of update" fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Update is not working on views with "instead of update" trigger.
org.hsqldb.jdbc.ScriptedTest[PROGRESS]: Opened test script: /my/sql/TestInsteadOfUpdateViewTrigger.txt
org.hsqldb.jdbc.ScriptedTest[PROGRESS]: section starting at line 8
org.hsqldb.jdbc.ScriptedTest[PROGRESS]: returned an unexpected result.
org.hsqldb.jdbc.ScriptedTest[EXCEPTION]: 
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Util.java:418)
at org.hsqldb.jdbc.Util.sqlException(Util.java:247)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1830)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:636)
at org.hsqldb.testbase.BaseScriptedTestCase$BaseSection.execute(BaseScriptedTestCase.java:491)
...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1189
HyperSQL Database Engine (HSQLDB) / Bugs / #1189 Can't drop view if any table is being locked
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Even though the view and table are unrelated
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1190
HyperSQL Database Engine (HSQLDB) / Bugs / #1190 bug in parsing create table statment
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As diescribed in the doc a create table statment with auto incremented key should have following syntax:
GENERATED BY DEFAULT AS IDENTITY
(START WITH <n>[, INCREMENT BY <m>])}] |
[[NOT] NULL] [IDENTITY] [PRIMARY KEY]
example:
CREATE TABLE ADRESS (
ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, 
GEBURTSDATUM DATE, 
NAME VARCHAR(255), 
ORT VARCHAR(255), 
PLZ INTEGER, 
STRASSE VARCHAR(255), 
TELEFONGESCHAEFT VARCHAR(255), 
TELEFONPRIVATE VARCHAR(255), 
VORNAME VARCHAR(255), 
PRIMARY KEY (ID)
)
after START WITH <n> should by a comma, but the current version hsqldb-2.2.5 throws an parsing error.
The version 2.2.5 accept the folwoing statment, with out a comma after START WITH 1
CREATE TABLE ADRESS (
ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, 
GEBURTSDATUM DATE, 
NAME VARCHAR(255), 
ORT VARCHAR(255), 
PLZ INTEGER, 
STRASSE VARCHAR(255), 
TELEFONGESCHAEFT VARCHAR(255), 
TELEFONPRIVATE VARCHAR(255), 
VORNAME VARCHAR(255), 
PRIMARY KEY (ID)
)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1191
HyperSQL Database Engine (HSQLDB) / Bugs / #1191 bug in parsing create table statment
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As diescribed in the doc a create table statment with auto incremented key should have following syntax:
GENERATED BY DEFAULT AS IDENTITY
(START WITH <n>[, INCREMENT BY <m>])}] |
[[NOT] NULL] [IDENTITY] [PRIMARY KEY]
example:
CREATE TABLE ADRESS (
ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL, 
GEBURTSDATUM DATE, 
NAME VARCHAR(255), 
ORT VARCHAR(255), 
PLZ INTEGER, 
STRASSE VARCHAR(255), 
TELEFONGESCHAEFT VARCHAR(255), 
TELEFONPRIVATE VARCHAR(255), 
VORNAME VARCHAR(255), 
PRIMARY KEY (ID)
)
after START WITH <n> should by a comma, but the current version hsqldb-2.2.5 throws an parsing error.
The version 2.2.5 accept the folwoing statment, with out a comma after START WITH 1
CREATE TABLE ADRESS (
ID BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, 
GEBURTSDATUM DATE, 
NAME VARCHAR(255), 
ORT VARCHAR(255), 
PLZ INTEGER, 
STRASSE VARCHAR(255), 
TELEFONGESCHAEFT VARCHAR(255), 
TELEFONPRIVATE VARCHAR(255), 
VORNAME VARCHAR(255), 
PRIMARY KEY (ID)
)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1192
HyperSQL Database Engine (HSQLDB) / Bugs / #1192 Cascaded Views + Sub-Select » ArrayIndexOutOfBoundsException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following schema cannot be imported into 2.2.6-SNAPSHOT
--
-- BEGIN
--
CREATE TABLE test1 (
test1_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
test1_login VARCHAR(100) NOT NULL,
test1_field VARCHAR(100) NOT NULL,
PRIMARY KEY (test1_id)
);
CREATE TABLE test2 (
test1_id BIGINT,
test2_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
test2_field VARCHAR(100) NOT NULL,
PRIMARY KEY (test2_id),
FOREIGN KEY (test1_id) 
REFERENCES test1(test1_id)
MATCH FULL 
ON UPDATE CASCADE 
ON DELETE CASCADE
);
CREATE TABLE test3 (
test2_id BIGINT,
test3_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
test3_field VARCHAR(100) NOT NULL,
PRIMARY KEY (test3_id),
FOREIGN KEY (test2_id) 
REFERENCES test2(test2_id)
MATCH FULL 
ON UPDATE CASCADE 
ON DELETE CASCADE
);
CREATE VIEW view_test1 AS
SELECT * FROM test1 
WHERE test1_login=USER()
OR 'DBA' IN (SELECT authorization_name FROM information_schema.authorizations WHERE authorization_type = 'ROLE');
CREATE VIEW view_test2 AS
SELECT * FROM test2 WHERE test1_id IN (SELECT test1_id FROM view_test1)
WITH CASCADED CHECK OPTION;
CREATE VIEW view_test3 AS
SELECT * FROM test3 WHERE test2_id IN (SELECT test2_id FROM view_test2)
WITH CASCADED CHECK OPTION;
--
-- END
--
The creation of 'view_test3' leads into the following exception:
java.sql.SQLException: java.lang.ArrayIndexOutOfBoundsException: 1 java.lang.ArrayIndexOutOfBoundsException: 1
at org.hsqldb.jdbc.Util.sqlException(Util.java:255)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1838)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:636)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(DatabaseManagerSwing.java:1632)
at org.hsqldb.util.DatabaseManagerSwing.access$1000(DatabaseManagerSwing.java:156)
at org.hsqldb.util.DatabaseManagerSwing$StatementExecRunnable.run(DatabaseManagerSwing.java:1603)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:251)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:705)
at java.awt.EventQueue.access$000(EventQueue.java:101)
at java.awt.EventQueue$3.run(EventQueue.java:666)
at java.awt.EventQueue$3.run(EventQueue.java:664)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:76)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:675)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:211)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:128)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:117)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:113)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:105)
at java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
The problem does NOT occur with HSQLDB 2.2.5. I was able to reproduce it with the J5 and J6 build.
The problem does also NOT occur, if the sub-select of 'view_test3' is changed to an 'INNER JOIN':
--
-- BEGIN
--
CREATE VIEW view_test3 AS
SELECT * FROM test3 a INNER JOIN test2 b ON (a.test2_id=b.test2_id)
WITH CASCADED CHECK OPTION;
--
-- END
--
I'll keep my fingers crossed, that you'll find a solution to this problem. ;)
Cheers,
Andy
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1193
HyperSQL Database Engine (HSQLDB) / Bugs / #1193 getGeneratedKeys() multiple row inserts does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inserting multiple rows with PreparedStatement (sql, "generatedColumnName") and addBatch()/executeBatch does not return generatedkeys with HSQLDB 2.2.5, 2.0.0.0 works fine with no code changes, just changing the HSQLDB jar.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1194
HyperSQL Database Engine (HSQLDB) / Bugs / #1194 DbBackup missed command line option for AbortUponModify
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I saw DbBackup has the setter/getter for AbortUponModify, but don't know how to change it's value from just command line.
When backup a database, will do below.
$JAVA_HOME/bin/java org.hsqldb.lib.tar.DbBackup --save --overwrite ./backup/$CUR_TIME.tar ./data/fix
But if I want to AbortUponModify=false, i cannot pass value in command line, Seems have to write code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1195
HyperSQL Database Engine (HSQLDB) / Bugs / #1195 Referenced views are absent in VIEW_TABLE_USAGE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http://hsqldb.org/doc/2.0/guide/databaseobjects-chapt.html#N11665
It stated that VIEW_TABLE_USAGE should provide information on TABLE and VIEW objects that have been referenced in the query expressions of the VIEW objects, but it provides only tables:
CREATE TABLE table1 (col1 int);
CREATE VIEW view1 AS SELECT * FROM table1;
CREATE VIEW view2 AS SELECT * FROM view1;
select * from INFORMATION_SCHEMA.VIEW_TABLE_USAGE
Result is:
VIEW_CATALOG VIEW_SCHEMA VIEW_NAME TABLE_CATALOG TABLE_SCHEMA TABLE_NAME
PUBLIC PUBLIC VIEW1 PUBLIC PUBLIC TABLE1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1196
HyperSQL Database Engine (HSQLDB) / Bugs / #1196 One SqlTool function definition variant broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Needs to be verified, but I think that creating functions from buffer fails if an "appendage" string is not given.
I.e. this succeeds
\.
content
.
/: fname() appendage
But this fails:
\.
congtent
.
/: fname()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1197
HyperSQL Database Engine (HSQLDB) / Bugs / #1197 doc mistake re. raw mode terminator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think that online docs (and maybe Util guide) state the wrong characters to terminate raw input. The examples or user guide fragments must be correct, because I know some people are using the feature successfully. Another possibility is that the incorrectly documented usage applies only to either interactive or non-interactive usage so that not all users are affected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1198
HyperSQL Database Engine (HSQLDB) / Bugs / #1198 INFORMATION_SCHEMA.SYSTEM_COLUMNS field name typo
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the table INFORMATION_SCHEMA.SYSTEM_COLUMNS field header for "table_schema" is missing trailing "a" so it stands as "table_schem".
See query:
SELECT * FROM "INFORMATION_SCHEMA"."SYSTEM_COLUMNS" WHERE TABLE_SCHEMA = '%'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1199
HyperSQL Database Engine (HSQLDB) / Bugs / #1199 HSQLDB 2.1 fails with a core dump
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please see the attached core dumps.
--------------- S Y S T E M ---------------
OS: Windows NT 6.1 , 64 bit Build 7601 Service Pack 1
vm_info: Java HotSpot(TM) Client VM (20.4-b02) for windows-x86 JRE (1.6.0_29-b11)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1200
HyperSQL Database Engine (HSQLDB) / Bugs / #1200 statement.execute executes multiple sql statements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The statement.execute(String) method executes multiple sql statements separated by semicolon. This might allow sql code to be injected into a sadly programmed application. 
Example (modified from sample directory):
Class.forName("org.hsqldb.jdbc.JDBCDriver");
Connection conn = DriverManager.getConnection("jdbc:hsqldb:db_file","SA","");
Statement st = conn.createStatement(); 
st.executeUpdate("CREATE TABLE sample_table ( id INTEGER IDENTITY, str_col VARCHAR(256), num_col INTEGER)");
st.executeUpdate("INSERT INTO sample_table(str_col,num_col) VALUES('Ford', 100)");
st.executeUpdate("INSERT INTO sample_table(str_col,num_col) VALUES('Toyota', 200)");
// execute multiple sql statements in one execute call:
st.execute("SELECT * FROM sample_table; update sample_table set num_col=500 where str_col='Ford'");
st.execute("SHUTDOWN");
conn.close();
Please do not understand me wrong: There might be some space for interpretation in the jdbc specification of the Statement interface. So this behavior might be ok in the sense of the specs. BUT: an app that uses code like this:
String sql = "select * from foo where bar = '" + user_input + '";
stmt.execute(sql);
is vulnerable for sql-injection if the user inputs some thing like this:
baz' ; update foo set bar = 'evil value
As this is bad programming it might not be the problem of hsqldb either! 
BUT: for example the oracle jdbc driver does not allow mutliple statements in the Statement.execute method. This adds an additional level of security that hsqldb is not having.
I stumbled across this behavior when working with owasp's webgoat intrusion example webapp and was quite shocked to find a way to add update/insert statements into a read-only application. I had not thought that this was possible.
So if this is intentional behavior, please think about its usefulness in comparison to the security impact. If it is a bug, please fix it :-)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1201
HyperSQL Database Engine (HSQLDB) / Bugs / #1201 Failing NULL value check with decode in ORA SYNTAX mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Detected in versions:
- 2.2.6
- 2.2.7-SNAPSHOT (2012-04-01) (hsqldb-2.2.7-20120103.113705-1.jar)
Decode function fails to identify null value in ORA SYNTAX mode (sql.syntax_ora=true)
POC:
--------
SET DATABASE SQL SYNTAX ORA TRUE;
SELECT DECODE(VAL,null,'OK_NULL_DETECTED_BY_DECODE','KO_NULL_NOT_DETECTED_BY_DECODE') AS TEST_DECODE from (select null AS VAL from dual)
RESULT:
--------------
TEST_DECODE=KO_NULL_NOT_DETECTED_BY_DECODE
Thanks for your help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1202
HyperSQL Database Engine (HSQLDB) / Bugs / #1202 Table / column aliasing doubts in nested selects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have found some weird behaviour when aliasing tables and fields. This here is pretty clear:
----------------------------------------------------------
select 1 as id from information_schema.system_users;
returns:
ID: 1
----------------------------------------------------------
The following makes use of some "advanced" aliasing syntax, aliasing table and columns in one clause:
----------------------------------------------------------
select * from (
select 1 as id from information_schema.system_users
) as x(y)
where x.y = 1
returns:
Y: 1
----------------------------------------------------------
But when I nest the select again, the aliasing is lost!
----------------------------------------------------------
select * from (
select * from (
select 1 as id from information_schema.system_users
) as x(y)
)
returns:
ID: 1 (expected Y: 1)
----------------------------------------------------------
Both of these predicates will result in errors:
----------------------------------------------------------
where x.y = 1
where x.id = 1
----------------------------------------------------------
This works:
----------------------------------------------------------
where id = 1
----------------------------------------------------------
In Postgres, which also knows aliasing using table(field), the above query is wrong because the outermost subselect has to be aliased as well, e.g.
----------------------------------------------------------
select * from (
select * from (
select 1 as id
) as x(y)
) as a
----------------------------------------------------------
But then, I can still add this predicate using "y":
----------------------------------------------------------
where a.y = 1
----------------------------------------------------------
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1203
HyperSQL Database Engine (HSQLDB) / Bugs / #1203 NullPointerException when unnesting empty array literal
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
These statements result in a NullPointerException:
-------------------------------------------
select * from unnest(ARRAY[])
select * from unnest(cast(ARRAY[] as int array))
-------------------------------------------
Stack trace:
-------------------------------------------
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Util.java:418)
at org.hsqldb.jdbc.Util.sqlException(Util.java:247)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1830)
at org.hsqldb.jdbc.JDBCStatement.execute(JDBCStatement.java:636)
at org.hsqldb.util.DatabaseManagerSwing.executeSQL(DatabaseManagerSwing.java:1632)
at org.hsqldb.util.DatabaseManagerSwing.access$1000(DatabaseManagerSwing.java:156)
at org.hsqldb.util.DatabaseManagerSwing$StatementExecRunnable.run(DatabaseManagerSwing.java:1603)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:642)
These statements work:
-------------------------------------------
select * from unnest(ARRAY[1])
select * from unnest(cast(ARRAY[1] as int array))
-------------------------------------------
Is this a syntax error? According to the documentation, it seems to be. At least one value expression has to be provided between the brackets. But then how to construct empty arrays?
<array value constructor by enumeration> ::= ARRAY <left bracket or trigraph> <array element list> <right bracket or trigraph>
<array element list> ::= <value expression> [ { <comma> <value expression> }... ]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1204
HyperSQL Database Engine (HSQLDB) / Bugs / #1204 object not found when fully qualifying it in nested JOINs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here's a funny thing I have stumbled upon. Create this database:
---------------------------------
create table a (id int);
create table b (id int);
create table c (id int);
insert into a values (1);
insert into b values (1);
insert into c values (1);
---------------------------------
Now, this query with a somewhat odd syntax works well:
---------------------------------
select a.id, b.id, c.id
from a
join (b join c on b.id = c.id)
on a.id = b.id
---------------------------------
But none of these work:
---------------------------------
select public.a.id, public.b.id, public.c.id
from a
join (b join c on b.id = c.id)
on a.id = b.id
---------------------------------
select a.id, b.id, c.id
from a
join (b join c on b.id = c.id)
on a.id = public.b.id
---------------------------------
etc...
It looks like the tables b and c are somehow implicitly renamed and no longer form a part of the "PUBLIC" schema. I'm guessing this is a bug, as I couldn't find any explicit reason in the documentation around this definition that would justify this behaviour:
<parenthesized joined table> ::= <left paren> <parenthesized joined table> <right paren> | <left paren> <joined table> <right paren>
Also, HSQLDB is the only database I know that has this behaviour.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1205
HyperSQL Database Engine (HSQLDB) / Bugs / #1205 HSQLDB breaks my logs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I establish a connection to HSQLDB, logging no longer works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1206
HyperSQL Database Engine (HSQLDB) / Bugs / #1206  current value for sequence is null !!!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create table test
(
i integer
);
create sequence seq;
insert into test values (next value for seq);
insert into test values (current value for seq);
select * from test;
results:
0
(null)
hsqldb version: 2.2.6, 2.2.8
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1207
HyperSQL Database Engine (HSQLDB) / Bugs / #1207 NOT IN predicate and NULL values not SQL standard compliant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Maybe I have not grasped some subtlety in how this really *should* be according to the SQL standards... In my understanding, the following should return an empty result set:
---------------------------------------------
select * from (
select 1 as id from information_schema.system_users union all
select 2 as id from information_schema.system_users union all
select 3 as id from information_schema.system_users 
) 
where id not in (1, null)
---------------------------------------------
The rationale taken from the SQL 1992 standard chapter 8.4 <in predicate>:
---------------------------------------------
<in predicate> ::=
<row value constructor>
[ NOT ] IN <in predicate value>
<in predicate value> ::=
<table subquery>
| <left paren> <in value list> <right paren>
<in value list> ::=
<value expression> { <comma> <value expression> }...
---------------------------------------------
And then, further down:
---------------------------------------------
2) Let RVC be the <row value constructor> and
let IPV be the <in predicate value>.
3) The expression
RVC NOT IN IPV
is equivalent to
NOT ( RVC IN IPV )
4) The expression
RVC IN IPV
is equivalent to
RVC = ANY IPV
---------------------------------------------
In the case of my example:
ID NOT IN (1, NULL) is equivalent to
NOT (ID IN (1, NULL)), equivalent to
NOT (ID = ANY(1, NULL)), equivalent to
NOT (ID = 1 OR ID = NULL), equivalent to
NOT (ID = 1) AND NOT (ID = NULL), which is always UNKNOWN
But maybe I'm missing something? These databases behave like I'd expect:
DB2
Derby
H2
Ingres
Oracle
Postgres
SQL Server
SQLite
Sybase
These ones behave like HSQLDB:
HSQLDB
MySQL
Sybase ASE
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1208
HyperSQL Database Engine (HSQLDB) / Bugs / #1208 Regression in TRUNCATE statement after upgrade to 2.2.8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have detected a regression in my jOOQ integration tests for the TRUNCATE TABLE statement after upgrading from 2.2.6 to 2.2.8. The following is specified in the documentation:
"If the table is referenced in a FOREIGN KEY constraint defined on another table, the statement causes an exception"
http://hsqldb.org/doc/2.0/guide/dataaccess-chapt.html#dac_truncate_statement
Most other databases also behave this way. But HSQLDB 2.2.8 seems to silently execute such table truncations. Note, I'm not using the NO CHECK clause
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1209
HyperSQL Database Engine (HSQLDB) / Bugs / #1209 Cannot unnest arrays resulting from nested selects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I seem to have a regression when unnesting arrays that result from nested selects. Create the following schema:
--------------------------------------
CREATE TABLE t_arrays (
id integer not null,
string_array VARCHAR(20) ARRAY,
number_array INTEGER ARRAY,
date_array DATE ARRAY,
CONSTRAINT pk_t_arrays PRIMARY KEY (ID)
);
INSERT INTO t_arrays VALUES (1, null, null, null);
INSERT INTO t_arrays VALUES (2, ARRAY[], ARRAY[], ARRAY[]);
INSERT INTO t_arrays VALUES (3, ARRAY['a'], ARRAY[1], ARRAY['1981-07-10']);
INSERT INTO t_arrays VALUES (4, ARRAY['a', 'b'], ARRAY[1, 2], ARRAY['1981-07-10', '2000-01-01']);
--------------------------------------
Run this query:
--------------------------------------
select * from unnest((select string_array from t_arrays where id = 4))
--------------------------------------
It returns an empty result. I'd expect a table containing 'a' and 'b' just as in this query:
--------------------------------------
select * from unnest(ARRAY['a', 'b'])
--------------------------------------
I have observed the issue in HSQLDB 2.2.6 and 2.2.8. I think I had seen this working before, but maybe it's just a syntax confusion?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1210
HyperSQL Database Engine (HSQLDB) / Bugs / #1210 Error when unnesting arrays from "preceding tablereferences"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
See also possibly related issue here:
https://sourceforge.net/tracker/?func=detail&aid=3480923&group_id=23316&atid=378131
I'm running a test against this schema:
--------------------------------------
CREATE TABLE t_arrays (
id integer not null,
string_array VARCHAR(20) ARRAY,
number_array INTEGER ARRAY,
date_array DATE ARRAY,
CONSTRAINT pk_t_arrays PRIMARY KEY (ID)
);
INSERT INTO t_arrays VALUES (1, null, null, null);
INSERT INTO t_arrays VALUES (2, ARRAY[], ARRAY[], ARRAY[]);
INSERT INTO t_arrays VALUES (3, ARRAY['a'], ARRAY[1], ARRAY['1981-07-10']);
INSERT INTO t_arrays VALUES (4, ARRAY['a', 'b'], ARRAY[1, 2], ARRAY['1981-07-10', '2000-01-01']);
--------------------------------------
The test query looks like this:
--------------------------------------
select 
"PUBLIC"."T_ARRAYS"."ID", 
"t"."COLUMN_VALUE" 
from 
"PUBLIC"."T_ARRAYS", 
(select * from unnest("PUBLIC"."T_ARRAYS"."STRING_ARRAY") as "t"("COLUMN_VALUE")) as "t" 
order by "PUBLIC"."T_ARRAYS"."ID" asc
--------------------------------------
According to the documentation of UNNEST the above should work:
http://hsqldb.org/doc/2.0/guide/dataaccess-chapt.html#N127AD
The documentation reads:
"The array expression can contain references to any column of the table references preceding the current table reference."
In the example, "STRING_ARRAY" is a column of "T_ARRAYS", which has been referenced precedingly. Nevertheless, I get the following exception:
--------------------------------------
java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: STRING_ARRAY
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
--------------------------------------
It does work like this, however:
--------------------------------------
select 
"PUBLIC"."T_ARRAYS"."ID", 
"t"."COLUMN_VALUE"
from 
"PUBLIC"."T_ARRAYS", 
unnest(STRING_ARRAY) as "t"("COLUMN_VALUE")
order by "PUBLIC"."T_ARRAYS"."ID" asc
--------------------------------------
I think I had seen this working in a previous version of HSQLDB, but I'm not 100% sure.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1211
HyperSQL Database Engine (HSQLDB) / Bugs / #1211 select distinct * from ( select...) doesn't work any more.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following select worked until 2.2.6-snapshot (2.2.6 pre-release). Since then, it returns:
Error: user lacks privilege or object not found: C8
SQLState: 42501
ErrorCode: -5501
I think it's something with the 'distinct': if we ommit him, it works.
select distinct * from (
select CR.FKTABLE_SCHEM, CR.FKTABLE_NAME, CR.FKCOLUMN_NAME, 
CR.PKTABLE_SCHEM, CR.PKTABLE_NAME, CR.PKCOLUMN_NAME, CR.KEY_SEQ, 
CONVERT(SC.NULLABLE,VARCHAR(1)), CR.FK_NAME
FROM INFORMATION_SCHEMA.SYSTEM_CROSSREFERENCE CR 
inner join INFORMATION_SCHEMA.SYSTEM_COLUMNS SC 
on (CR.FKTABLE_SCHEM=SC.TABLE_SCHEM AND CR.FKTABLE_NAME = SC.TABLE_NAME AND CR.FKCOLUMN_NAME = SC.COLUMN_NAME) 
)
Thank you,
Lúcio I.P.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1212
HyperSQL Database Engine (HSQLDB) / Bugs / #1212 DECODE fails as of 2.2.7
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting with 2.2.7, this statement started failing for me:
SELECT DECODE(COLUMNREQUIRED, 'Some required data', 'good answer', 'Another value', 'bad answer', 'default') FROM TEST1
I've tracked the change that broke it to SVN revision 4878 in ParserDQL. With OpTypes.MATCH_FULL passesd in, flow ends up going into case "OpTypes.MATCH_FULL" in ExpressionLogical.getValue(). This results in a call to ExpressionLogical.testMatchCondition(), which throws an exception of "row column count mismatch". Prior to 2.2.7, flow goes to case "OpTypes.EQUAL" in ExpressionLogical.getValue(). This results in a correct evaluation of the data.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1213
HyperSQL Database Engine (HSQLDB) / Bugs / #1213 update LOCAL TEMPORARY TABLE leave COMMIT in *.log
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I used an local temp table. Then I frequently insert/delete record from it. Yes, it will not write those SQL into *.log, however, it left many COMMIT in the log and cause it huge. In fact, I've disable the auto check point, because I found that the auto check point will cause HSQLDB hung. So the *.log file will be very big and full of only "COMMIT". Any idea?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1214
HyperSQL Database Engine (HSQLDB) / Bugs / #1214 Unnecesary SQLWarning:cursor updatability mismatch
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
prepareStatement for update created unnecessary warning "cursor updatability mismatch" W_36502
The code example is in attachment, All executed just fine in HSQL, Oracle and MySQL.
Only warning are annoying when executing Unit tests using HSQL.
BTW: This is related to example that have you already fixed https://sourceforge.net/tracker/?func=detail&aid=3417469&group_id=23316&atid=378131
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1215
HyperSQL Database Engine (HSQLDB) / Bugs / #1215 EOFException when database grows past ~5GB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running 2.2.8, we are randomly hitting an EOFException when our database size goes over ~5GB. We run our database with the settings:
"hsqldb.log_data=false",
"hsqldb.result_max_memory_rows=5000",
"hsqldb.cache_file_scale=128",
"hsqldb.lob_file_scale=1",
"hsqldb.default_table_type=CACHED",
"hsqldb.defrag_limit=40",
"hsqldb.nio_data_file=true"
The exception trace is:
java.io.EOFException
at org.hsqldb.persist.ScaledRAFile.read(ScaledRAFile.java:265)
at org.hsqldb.persist.ScaledRAFile.readInt(ScaledRAFile.java:256)
at org.hsqldb.persist.ScaledRAFileHybrid.readInt(ScaledRAFileHybrid.java:100)
at org.hsqldb.persist.DataFileCache.readObject(DataFileCache.java:934)
at org.hsqldb.persist.DataFileCache.getFromFile(DataFileCache.java:856)
at org.hsqldb.persist.DataFileCache.get(DataFileCache.java:833)
at org.hsqldb.persist.RowStoreAVLDisk.get(RowStoreAVLDisk.java:108)
at org.hsqldb.index.NodeAVLDisk.findNode(NodeAVLDisk.java:192)
at org.hsqldb.index.NodeAVLDisk.getLeft(NodeAVLDisk.java:234)
at org.hsqldb.index.IndexAVL.findNode(IndexAVL.java:1405)
at org.hsqldb.index.IndexAVL.findFirstRow(IndexAVL.java:972)
at org.hsqldb.RangeVariable$RangeIteratorMain.getFirstRow(RangeVariable.java:1164)
at org.hsqldb.RangeVariable$RangeIteratorMain.initialiseIterator(RangeVariable.java:1074)
at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:1008)
at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1351)
at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1262)
at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1252)
at org.hsqldb.StatementQuery.getResult(StatementQuery.java:66)
at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:196)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1331)
at org.hsqldb.Session.execute(Session.java:984)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4652)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(JDBCPreparedStatement.java:283)
I poked around a little bit in ScaledRAFile, specifically looking at how the fileLength member is maintained. It seems like the logic in the write() method "if(!extendLength" might not be correct. I ran some test with the logic reversed "if(extendLength" and that may clear up the problem (although, i can't guarantee that since the issue is not 100% reproducible).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1216
HyperSQL Database Engine (HSQLDB) / Bugs / #1216 Pathological Query Performance in 2.2.8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My company is trying to integrate hsqldb into our product and while trying it out with some test data, we hit a class of queries that result in pathological query performance -- about 5 minutes on my machine. For comparison, the same query runs against MySQL in about 300ms. Here's the query:
select jobimpl2_.id as col_0_0_
from ec_property abstractpr0_
inner join ec_property_sheet propertysh1_ on abstractpr0_.parent_sheet_id=propertysh1_.id
cross join ec_job jobimpl2_
left outer join ec_schedule scheduleim3_ on jobimpl2_.schedule_id=scheduleim3_.id
cross join ec_project projectimp4_
cross join ec_job_step jobstepimp5_
where jobimpl2_.project_id=projectimp4_.id
and jobimpl2_.root_step_id=jobstepimp5_.id
and projectimp4_.name='CI Dash 1'
and scheduleim3_.name='Main Branch'
and jobstepimp5_.status='completed'
and abstractpr0_.name='preflight'
and abstractpr0_.numeric_value=0
and jobstepimp5_.property_sheet_id=propertysh1_.id
order by jobstepimp5_.finish_millis desc limit 20 
An "explain plan" showed that some joins used some indices, but at some point, it did a full table scan of the ec_job table. The MySQL explain resulted in no full scans and a very different plan. See attached file.
I've also attached a zip file of the hsqldb we were testing with. How to connect to it:
username: commander
password: commander
jdbc url: jdbc:hsqldb:file:C:/src/hsqldb/cmdr;check_params=true;hsqldb.default_table_type=cached;hsqldb.applog=2;hsqldb.tx=mvcc;hsqldb.cache_size=1000000;hsqldb.cache_rows=1000000;hsqldb.nio_max_size=1024;shutdown=true
I was running on an 8GB laptop with 64-bit IntelliJ IDEA with 2GB heap. I used the database console to issue the query.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1217
HyperSQL Database Engine (HSQLDB) / Bugs / #1217 NullPointerException concatenating empty blob
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Precondition:
Table containg an empty blob value
SQL-Statement leading to the exception:
update TEST.BLOBTEST set BT_BLOB = CONCAT(BT_BLOB,?)
An non-empty byte-Array is passed to the prepared statement (details see unit-test):
updateStatement.setBytes(1, new byte[] {1, 2, 3})
Stacktrace:
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source)
at de.allianz.ats.test.BlobTest.runTestScript(BlobTest.java:46)
at de.allianz.ats.test.BlobTest.testCreateATSSchema(BlobTest.java:19)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at junit.framework.TestCase.runTest(TestCase.java:168)
at junit.framework.TestCase.runBare(TestCase.java:134)
at junit.framework.TestResult$1.protect(TestResult.java:110)
at junit.framework.TestResult.runProtected(TestResult.java:128)
at junit.framework.TestResult.run(TestResult.java:113)
at junit.framework.TestCase.run(TestCase.java:124)
at junit.framework.TestSuite.runTest(TestSuite.java:243)
at junit.framework.TestSuite.run(TestSuite.java:238)
at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:127)
at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at java.lang.reflect.Method.invoke(Method.java:597)
at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 27 more
Caused by: java.lang.NullPointerException
at org.hsqldb.types.BlobDataID.setBytes(Unknown Source)
at org.hsqldb.types.BinaryType.concat(Unknown Source)
at org.hsqldb.ExpressionArithmetic.getValue(Unknown Source)
at org.hsqldb.StatementDML.getUpdatedData(Unknown Source)
at org.hsqldb.StatementDML.executeUpdateStatement(Unknown Source)
at org.hsqldb.StatementDML.getResult(Unknown Source)
... 30 more
Attachment:
The attachment contains a maven project with a junit-test reprocuding the error.
The test can be executed using "mvn test" in the project root directory (assuming maven bin-directory on the path)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1218
HyperSQL Database Engine (HSQLDB) / Bugs / #1218 Double.NaN equals any DOUBLE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB supports NaN, INF and -INF in its DOUBLE datatype. Equality for NaN appears to be broken.
SET DATABASE SQL DOUBLE NAN FALSE;
CREATE TABLE TEST (VALUE DOUBLE);
INSERT INTO TEST VALUES (SQRT(-1));
SELECT * FROM TEST WHERE VALUE=42;
The result is one row one column containing NaN. It appears that (NaN=x) is TRUE for any x, including NaN. I believe that's exactly the wrong way around. (NaN=x) should be FALSE for any x, including NaN itself.
HSQLDB 2.2.8 release, Java 6, OS X, observed on in-memory database.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1219
HyperSQL Database Engine (HSQLDB) / Bugs / #1219 Exception when comparing empty (zero-length) BLOB or CLOB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CREATE TABLE TEST (VALUE CLOB);
INSERT INTO TEST VALUES ('');
SELECT * FROM TEST WHERE VALUE='Derp';
Result is an ArrayIndexOutOfBoundsException, see stack trace below. The same happens when comparing to any other value. The same problem occurs with empty BLOBs.
HSQLDB 2.2.8 release, Java 6, OS X, observed on in-memory database.
Exception in thread "main" java.lang.RuntimeException: java.sql.SQLException: java.lang.ArrayIndexOutOfBoundsException: 0 java.lang.ArrayIndexOutOfBoundsException: 0
at de.fuberlin.wiwiss.d2rq.helpers.HSQLDatabase.selectObject(HSQLDatabase.java:153)
at de.fuberlin.wiwiss.d2rq.datatypes.HSQLDBDatatypeTest.main(HSQLDBDatatypeTest.java:24)
Caused by: java.sql.SQLException: java.lang.ArrayIndexOutOfBoundsException: 0 java.lang.ArrayIndexOutOfBoundsException: 0
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(Unknown Source)
at de.fuberlin.wiwiss.d2rq.helpers.HSQLDatabase.selectObject(HSQLDatabase.java:146)
... 1 more
Caused by: org.hsqldb.HsqlException: java.lang.ArrayIndexOutOfBoundsException: 0
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 4 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: 0
at org.hsqldb.persist.LobManager.compare(Unknown Source)
at org.hsqldb.types.ClobType.compare(Unknown Source)
at org.hsqldb.ExpressionLogical.compareValues(Unknown Source)
at org.hsqldb.ExpressionLogical.getValue(Unknown Source)
at org.hsqldb.Expression.testCondition(Unknown Source)
at org.hsqldb.RangeVariable$RangeIteratorMain.findNext(Unknown Source)
at org.hsqldb.RangeVariable$RangeIteratorMain.next(Unknown Source)
at org.hsqldb.QuerySpecification.buildResult(Unknown Source)
at org.hsqldb.QuerySpecification.getSingleResult(Unknown Source)
at org.hsqldb.QuerySpecification.getResult(Unknown Source)
at org.hsqldb.StatementQuery.getResult(Unknown Source)
... 8 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1220
HyperSQL Database Engine (HSQLDB) / Bugs / #1220 IllegalArgumentException in multi-threaded application
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The current version 2.2.8 is not completely thread safe. Under heavy load the method org.hsqldb.HsqlDateTime.convertMillisFromCalendar may fail. You get an IllegalArgumentException, if this happens.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1221
HyperSQL Database Engine (HSQLDB) / Bugs / #1221 OutOfMemory error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Revision # 4531
In heap dump (512 megabytes allocated for java machine):
2138586 instances of class org.hsqldb.index.NodeAVLDisk
1974382 instances of class org.hsqldb.types.TimestampData
1022982 instances of class org.hsqldb.RowAVLDisk
43575 instances of class org.hsqldb.index.NodeAVL
21792 instances of class org.hsqldb.RowAVL
10323 instances of class org.hsqldb.store.HashIndex
9244 instances of class org.hsqldb.lib.OrderedHashSet
8014 instances of class org.hsqldb.HsqlNameManager$HsqlName
7556 instances of class org.hsqldb.ExpressionColumn
7028 instances of class [Lorg.hsqldb.Expression;
6854 instances of class org.hsqldb.ColumnSchema
3245 instances of class [Lorg.hsqldb.types.Type; 
!!! Can provide heap dump (~ 100k in tar.gz format). !!!
Used JDK: 1.5.0.11.
JVM arguments:
-Xmx512M -Dfile.encoding=UTF-8 -server -Djava.awt.headless=true -XX:+AggressiveHeap -XX:+UseParallelGC -XX:MaxPermSize=128m -XX:+HeapDumpOnOutOfMemoryError
OS: Linux, 32-bit 
Problem didn't happen instantly. System worked for some days then this situation happened.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1222
HyperSQL Database Engine (HSQLDB) / Bugs / #1222 OutOfMemory error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem has been too quickly closed but I think resolution is not correct.
Revision # 4531
In heap dump (512 megabytes allocated for java machine):
2138586 instances of class org.hsqldb.index.NodeAVLDisk
1974382 instances of class org.hsqldb.types.TimestampData
1022982 instances of class org.hsqldb.RowAVLDisk
43575 instances of class org.hsqldb.index.NodeAVL
21792 instances of class org.hsqldb.RowAVL
10323 instances of class org.hsqldb.store.HashIndex
9244 instances of class org.hsqldb.lib.OrderedHashSet
8014 instances of class org.hsqldb.HsqlNameManager$HsqlName
7556 instances of class org.hsqldb.ExpressionColumn
7028 instances of class [Lorg.hsqldb.Expression;
6854 instances of class org.hsqldb.ColumnSchema
3245 instances of class [Lorg.hsqldb.types.Type;
!!! Can provide heap dump (~ 100k in tar.gz format). !!!
Used JDK: 1.5.0.11.
JVM arguments:
-Xmx512M -Dfile.encoding=UTF-8 -server -Djava.awt.headless=true -XX:+AggressiveHeap -XX:+UseParallelGC -XX:MaxPermSize=128m -XX:+HeapDumpOnOutOfMemoryError
OS: Linux, 32-bit
Problem didn't happen instantly. System worked for some days then this situation happened.
Last resolution:
Well, this dump indicates you have one million rows in MEMORY tables. These
tables are stored in memory and quickly fill up large memory allocations.
If you can manage with a larger heap, you can continue using MEMORY tables,
otherwise you need to convert some of these tables to CACHED tables.
But that's not right. That's initial script in attachement of database scheme.
Application (3 threads) does insert in *_IMP tables and then calls PR_UPD_*_STAT(). Then an insert in TM_DATAPROCJOURNAL is made and then commit.
Also 3 threads perform select of all rows from *_STAT tables ordered by date to export into text file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1223
HyperSQL Database Engine (HSQLDB) / Bugs / #1223 BINARY field display as [B@12345 in Database Manager
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Other data types are represented in roughly the same syntax as their literals. The current display of Binary types is unusable.
INSERT INTO BINTEST (id) VALUES (X'012345')
SELECT id FROM BINTEST
ID
-------------------
[B@556860
This should be:
ID
-------------------
X'012345'
Or
ID
----------------------
012345
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1224
HyperSQL Database Engine (HSQLDB) / Bugs / #1224 Server fails with ClassCastException 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create custom function with declared result NUMERIC, but actual result is TABLE. When function is called, server fails.
Example:
CREATE FUNCTION GET_RATE(RATE_DATE DATE, CURR_FROM BIGINT, CURR_TO BIGINT) RETURNS NUMERIC(19, 6)
READS SQL DATA
BEGIN ATOMIC
RETURN (SELECT TOP 1 RATE.RATE, RATE.RATE_DATE
FROM RATE
WHERE RATE.RATE_DATE <= RATE_DATE AND RATE.CURR_FROM = CURR_FROM AND RATE.CURR_TO = CURR_TO
ORDER BY RATE.RATE_DATE DESC);
END;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1225
HyperSQL Database Engine (HSQLDB) / Bugs / #1225 Inaccurate documentation on the datetime TRUNC() function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've tried using the TRUNC() function as specified here:
http://hsqldb.org/doc/guide/builtinfunctions-chapt.html#bfc_datetime_arithmetic
It says
---------------------------------------------------------------
TRUNC ( <datetime value expr> [ , <char value expr> ] ) 
[...]
The <char value expr> is a format string for YEAR, MONTH, WEEK OF YEAR, DAY, HOUR, MINUTE or SECOND as listed in the table for TO_CHAR and TO_DATE format elements (see above).
---------------------------------------------------------------
But that's not correct. I've tried using 'DAY' as a literal, but that doesn't work:
---------------------------------------------------------------
select trunc(current_timestamp, 'DAY') 
from information_schema.system_users
---------------------------------------------------------------
This works, though:
---------------------------------------------------------------
select trunc(current_timestamp, 'DD') 
from information_schema.system_users
---------------------------------------------------------------
The same seems to apply for ROUND()
I'm not sure if this is an engine bug, or a documentation bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1226
HyperSQL Database Engine (HSQLDB) / Bugs / #1226 Datetime TRUNC() truncates to UTC, not to local timezone
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This query here:
--------------------------------------------------------
select trunc(current_timestamp, 'DD') 
from information_schema.system_users
--------------------------------------------------------
Returns 2012-04-20 02:00:00.0. It seems to truncate the timestamp to UTC, but displays it in CEST (my local timezone). I'd expect the outcome to be 2012-04-20 00:00:00.0
The same applies for ROUND()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1227
HyperSQL Database Engine (HSQLDB) / Bugs / #1227 NPE in CharacterType.substring
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
( version 2.2.4 )
Getting a null pointer exception in CharacterType.substring
Here's the SQL to reproduce, the error and the stack trace:
create table sample_table(
col1 varchar(10),
col2 varchar(10)
)
create index ix1 on SAMPLE_TABLE(col1)
create index ix2 on SAMPLE_TABLE(col2)
insert into SAMPLE_TABLE (col1, col2)
values(NULL, '1')
select count (*) from SAMPLE_TABLE where col1 like 'A%' OR col2 = '1' 
Error: java.lang.NullPointerException java.lang.NullPointerException
SQLState: S1000
ErrorCode: -458
Caused by: java.lang.NullPointerException: null
at org.hsqldb.types.CharacterType.substring(CharacterType.java:843) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.ExpressionOp.getValue(ExpressionOp.java:737) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:1156) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:1112) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.ExpressionLogical.getValue(ExpressionLogical.java:1106) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.Expression.testCondition(Expression.java:1488) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.RangeVariable$RangeIteratorMain.findNext(RangeVariable.java:1223) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:1018) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1378) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1297) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1287) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.StatementQuery.getResult(StatementQuery.java:66) ~[hsqldb.jar:private-2011/06/16-15:35:33]
at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:190) ~[hsqldb.jar:private-2011/06/16-15:35:33]
The work-around for now is to add not null clause: 
select count (*) from SAMPLE_TABLE where (col1 is not null AND col1 like 'A%') OR col2 = '1' 
Not very convenient but does the trick
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1228
HyperSQL Database Engine (HSQLDB) / Bugs / #1228 missing hsqldb.init
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The hsqldb.init script is not to be found at locations given in Appendix D: those are dead links.
Also, FWIW, it seems arbitrary to paste the hsqldb.cfg and hsqldb.rc scripts verbatim into the docs but not hsqldb.init.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1229
HyperSQL Database Engine (HSQLDB) / Bugs / #1229 foreign key constraint name not shown in GUI db manager
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I create a named foreign key constraint, say with name FK1, in the left pane under indices I can see, e.g., SYS_IDX_10037 instead of SYS_IDX_FK1_10037 as expected but in INFORMATION_SCHEMA.TABLE_CONSTRAINTS I do see my FK1. It looks like the GUI tool has wrongly used "" as the constraint name.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1230
HyperSQL Database Engine (HSQLDB) / Bugs / #1230 procedure returns updateCount even with READS SQL DATA
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A CallableStatement's execute() method will always return false when calling a stored procedure; that is, the first result will always be the update count and getMoreResults() must be called to obtain the first ResultSet, if it exists.
While this is expected behavior for a procedure capable of modifying data (e.g. when the procedure has the parameter MODIFIES SQL DATA), the update count should not be returned when the procedure has the parameter READS SQL DATA; such a read-only stored procedure will always return an update count of 0 and is therefore redundant and non-standard API.
Currently, statementRetType in JDBCPreparedStatement is always set to StatementTypes.RETURN_COUNT regardless of whether the stored procedure is MODIFIES SQL DATA or READS SQL DATA. Solution: when READS SQL DATA is specified, statementRetType should be changed to StatementTypes.RETURN_RESULT so that getMoreResults() inside the JDBCPreparedStatement.fetchResult() method is automatically called (on line 4667).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1231
HyperSQL Database Engine (HSQLDB) / Bugs / #1231 ClassCastException when doing simple select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a table definition:
create table SINK_SESSION_SEC (
sessionId integer not null,
sessionCreation timestamp(6) DEFAULT current_timestamp not null,
status char(1) not null,
statusUpdate timestamp(6) not null,
sourceSystem varchar(256),
loadName varchar(256), data longvarchar not null,
namespaceId integer not null,
messageId varchar(50) not null,
CONSTRAINT SINK_SESSION_SEC_PK PRIMARY KEY (SESSIONID),
CONSTRAINT SS_NI_SEC_NAMESPACEID_FK FOREIGN KEY (NAMESPACEID) REFERENCES NAMESPACE_INSTANCE_SEC (NAMESPACEID))
using a memory hsql instance:
<property name="connection.driver_class">org.hsqldb.jdbcDriver</property>
<property name="connection.url">jdbc:hsqldb:mem:migrateTestDb;shutdown=true</property>
Executing a select statement:
resultSet = statement.executeQuery(sql);
Where the sql is:
select s.sessionId as sessionId, s.statusupdate as statusUpdate from sink_session_SEC s where s.namespaceid=0 and s.status in ('C') order by statusUpdate, sessionId
resuting in the following error:
2012-05-16 11:11:44,178 INFO [1-sinkDBMessageQuery-0] reloader.MessageQueryIterator - NamespaceToReload: Namespace{namespaceId=0, namespaceName='NS1', identityAttributes={Organisational Unit,STRING=Other, Date,DATE=2008-09-05}, tagReloadSessionId=150}
java.lang.RuntimeException: Error retrieving sink messages from database for DBQueryType{sink1Type=dbNSId=0,status=[C], Namespace{namespaceId=0, namespaceName='NS1', identityAttributes={Organisational Unit,STRING=Other, Date,DATE=2008-09-05}, tagReloadSessionId=150}, sink2Type=dbNamespaceId=0,status=[C], Namespace{namespaceId=0, namespaceName='NS1', identityAttributes={Organisational Unit,STRING=Other, Date,DATE=2008-09-05}, tagReloadSessionId=150}}: SQLException querying for sink 1 messages : java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData
at com.rbsfm.foundry.resultsink.database.reloader.MessageQueryIterator.computeNext(MessageQueryIterator.java:145)
at com.rbsfm.foundry.resultsink.database.reloader.MessageQueryIterator.computeNext(MessageQueryIterator.java:41)
at com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:141)
at com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:136)
at com.rbsfm.foundry.resultsink.database.reloader.SinkMigrator.loadSessions(SinkMigrator.java:114)
at com.rbsfm.foundry.resultsink.database.reloader.SinkMigrator.processMigration(SinkMigrator.java:100)
at com.rbsfm.foundry.resultsink.database.reloader.SinkMigrator.migrateNamespace(SinkMigrator.java:84)
at com.rbsfm.foundry.test.reloader.tag.TagsReloadTest.runNamespaceMigration(TagsReloadTest.java:167)
at com.rbsfm.foundry.test.reloader.tag.TagsReloadTest.testReloadTagsFromDB(TagsReloadTest.java:175)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:59)
at org.junit.internal.runners.MethodRoadie.runTestMethod(MethodRoadie.java:98)
at org.junit.internal.runners.MethodRoadie$2.run(MethodRoadie.java:79)
at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:87)
at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:77)
at org.junit.internal.runners.MethodRoadie.run(MethodRoadie.java:42)
at org.junit.internal.runners.JUnit4ClassRunner.invokeTestMethod(JUnit4ClassRunner.java:88)
at org.junit.internal.runners.JUnit4ClassRunner.runMethods(JUnit4ClassRunner.java:51)
at org.junit.internal.runners.JUnit4ClassRunner$1.run(JUnit4ClassRunner.java:44)
at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:27)
at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:37)
at org.junit.internal.runners.JUnit4ClassRunner.run(JUnit4ClassRunner.java:42)
at org.junit.runner.JUnitCore.run(JUnitCore.java:130)
at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:62)
Caused by: java.lang.RuntimeException: SQLException querying for sink 1 messages : java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData
at com.rbsfm.foundry.resultsink.database.reloader.sink1.Sink1DBRetriever.getSessionsToLoad(Sink1DBRetriever.java:140)
at com.rbsfm.foundry.resultsink.database.reloader.MessageQueryIterator.findSessionsToLoad(MessageQueryIterator.java:267)
at com.rbsfm.foundry.resultsink.database.reloader.MessageQueryIterator.populateQueue(MessageQueryIterator.java:160)
at com.rbsfm.foundry.resultsink.database.reloader.MessageQueryIterator.access$300(MessageQueryIterator.java:41)
at com.rbsfm.foundry.resultsink.database.reloader.MessageQueryIterator$2.run(MessageQueryIterator.java:106)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
at java.lang.Thread.run(Thread.java:619)
Caused by: java.sql.SQLException: java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(Unknown Source)
at com.mchange.v2.c3p0.impl.NewProxyStatement.executeQuery(NewProxyStatement.java:35)
at com.rbsfm.foundry.resultsink.database.reloader.sink1.Sink1DBRetriever.getSessionsToLoad(Sink1DBRetriever.java:130)
... 7 more
Caused by: org.hsqldb.HsqlException: java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 11 more
Caused by: java.lang.ClassCastException: java.sql.Timestamp cannot be cast to org.hsqldb.types.TimestampData
at org.hsqldb.types.DateTimeType.compare(Unknown Source)
at org.hsqldb.index.IndexAVL.compareRow(Unknown Source)
at org.hsqldb.navigator.RowSetNavigatorData.compare(Unknown Source)
at org.hsqldb.lib.ArraySort.insertionSort(Unknown Source)
at org.hsqldb.lib.ArraySort.sort(Unknown Source)
at org.hsqldb.navigator.RowSetNavigatorData.sortOrder(Unknown Source)
at org.hsqldb.QuerySpecification.getSingleResult(Unknown Source)
at org.hsqldb.QuerySpecification.getResult(Unknown Source)
at org.hsqldb.StatementQuery.getResult(Unknown Source)
... 15 more
Why do we get this ClassCastException?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1232
HyperSQL Database Engine (HSQLDB) / Bugs / #1232 Servlet server mode fixes for 2.2.8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For me the Servlet server mode operation was not working, and Iooking at some postings on the net it has been broken for quite a while. There were 3 distinct issues causing servlet more to fail:
1) The servlet as is would only work in the root of the webserver
2) The client-code would not correctly set the content-length of the post-request, causing an EOFexcpetion on the server when reading the payload
3) A similar issue to 2) on the reponse being generated on the server: The response content-length was not set correctly by the server, causing EOFEXceptions on the client
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1233
HyperSQL Database Engine (HSQLDB) / Bugs / #1233 HSQLDB 2.2.8 server not shutting down cleanly
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB 2.2.8 server is not shutting down cleanly when given the "shutdown compact" command. The server begins the shutdown sequence, but never exits. I have a small sample database that I'm using (I can make this database available if necessary).
The process I'm following is:
- start up the server from the command-line using "java -cp ~/jdbc/hsqldb-2.2.8.jar org.hsqldb.server.Server"
- connect to the local server using DBVisualizer 8.0.2
- issue a "shutdown compact" command
- DBVisualizer reports that the command returned successfully. The console window shows the server process is shutting down, but never returns to the command prompt.
I have also used a java class to create a JDBC connection (rather than using DBVisualizer) and get the same results.
I have attached the output from the server process on the command-line. Let me know if there's anything more you need.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1234
HyperSQL Database Engine (HSQLDB) / Bugs / #1234 WITH RECURSIVE returns only first level children
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Query using WITH RECURSIVE returns only first level children, even for query in docs:
http://hsqldb.org/doc/guide/dataaccess-chapt.html#dac_with_clause
CREATE TABLE pptree (pid INT, id INT);
INSERT INTO pptree VALUES (NULL, 1) ,(1,2), (1,3),(2,4),(4,5),(3,6),(3,7);
WITH RECURSIVE tree (gen, par, child) AS (
VALUES(1, CAST(null as int), 1)
UNION
SELECT gen + 1, pid, id FROM pptree, tree WHERE pid = child
) SELECT * FROM tree;
result is
GEN PAR CHILD 
--- ------ ----- 
1 (null) 1 
2 1 2 
2 1 3 
As I see union/unionAll methods in RowSetNavigatorData cleans result which is used later.
tempResult = rightQueryExpression.getResult(session, 0);
tempNavigator = (RowSetNavigatorData) tempResult.getNavigator();
...
rowSet.unionAll(session, tempNavigator); //after this tempResult is empty
...
table.insertIntoTable(session, tempResult); //nothing happens
Removing other.release(); from union/unionAll solves the problem, but I have no idea how it may affect other parts.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1235
HyperSQL Database Engine (HSQLDB) / Bugs / #1235 2.2.8 Hangs with select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm having trouble with an update where I have the following:
@Entity
Charge {
...
@ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
@JoinColumn
private Decision decision;
...
}
Decision {
...
@OneToMany(cascade = CascadeType.ALL, mappedBy = "decision")
private List<Charge> charges = new ArrayList<Charge>();
...
}
The initial state of the database is a charge with a decision attached.
The action perform is a replacement of the decision on the charge with a new decision.
I've attached full logs of update, and result of "SELECT* FROM INFORMATION_SCHEMA.SYSTEM_SESSIONS"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1236
HyperSQL Database Engine (HSQLDB) / Bugs / #1236 Unsupported WITH clause in subselect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Usage of WITH works fine in HSQLDB 8.2, but apparently not in a subselect.
Try
CREATE TABLE test (id bigint);
INSERT INTO test (id) VALUES (1);
WITH tmp(id) AS (SELECT id from test) SELECT id FROM tmp -> 1
SELECT * FROM test WHERE id IN (WITH tmp(id) AS (SELECT id from test) SELECT id FROM tmp); -> "unexpected token: WITH"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1237
HyperSQL Database Engine (HSQLDB) / Bugs / #1237 COUNT(DISTINCT(ID)) returns 1 instead 0 for VARCHAR NULLs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given the table: CREATE TABLE Q(ID VARCHAR(1))
and the data: INSERT INTO Q VALUES(NULL)
and running the query: SELECT COUNT(DISTINCT(ID)) FROM Q
we expect 0, but receive 1.
Same happens for a CHAR column. Does not happen (0 is properly returned) for an INTEGER column.
JUnit test class attached.
Reproduced on 2.2.6, also reproducible with 2.2.8 and latest snapshot.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1238
HyperSQL Database Engine (HSQLDB) / Bugs / #1238 Caused by: org.hsqldb.HsqlException: expression not in aggre
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
The simple request below doesn't work whith HSQLDB 2.2.8 but works fine with MySQL.
select userId, ?*count(userId)
from PostCommentStatistic 
group by userId, postId
Is this a bug in HSQLDB ?
Anyone knows a workaround ?
Here is the stack trace :
Caused by: org.hsqldb.HsqlException: expression not in aggregate or GROUP BY columns: (?)*( COUNT()
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.QuerySpecification.resolveGroups(Unknown Source)
at org.hsqldb.QuerySpecification.resolveTypesPartTwo(Unknown Source)
at org.hsqldb.QueryExpression.resolveTypesPartTwo(Unknown Source)
at org.hsqldb.QueryExpression.resolveTypes(Unknown Source)
at org.hsqldb.ParserDQL.XreadTableSubqueryOrNull(Unknown Source)
at org.hsqldb.ParserDQL.readTableOrSubquery(Unknown Source)
at org.hsqldb.ParserDQL.XreadTableReference(Unknown Source)
at org.hsqldb.ParserDQL.XreadFromClause(Unknown Source)
at org.hsqldb.ParserDQL.XreadTableExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 34 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1239
HyperSQL Database Engine (HSQLDB) / Bugs / #1239 "set table source ..." fails since 2.2.6
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems there was a bug introduced in release 2.2.6 in the area of text tables. Up until 2.2.5 it was possible to set the java system property textdb.allow_full_path=true and then attach CSV files using the SET TABLE statement as follows:
SET TABLE X SOURCE '/some/path/x.csv;ignore_first=true;fs=\\semi;encoding=Cp1252'
HSQLDB would try to attach the file /some/path/x.csv. However, since release 2.2.6 this doesn’t work anymore. I didn’t check 2.2.7, but 2.2.8 behaves like 2.2.6 in this area. Instead, HSQLDB fails with the following exception:
java.sql.SQLException: bad TEXT table source file - line number: 0 org.hsqldb.HsqlException: file input/output erroropenning file: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory) error: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv in statement [SET TABLE "TXN:zaviation/branches/5.8".T_TEXT SOURCE '/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv;ignore_first=true;fs=\semi;encoding=Cp1252' DESC]
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at consor.tool.delta.helper.HsqldbHelper.executeNoCatch(HsqldbHelper.java:92)
at consor.tool.metadata.data.DataFileManager.attachTextTableSource(DataFileManager.java:139)
... 8 more
Caused by: org.hsqldb.HsqlException: bad TEXT table source file - line number: 0 org.hsqldb.HsqlException: file input/output erroropenning file: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory) error: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.TextTable.connect(Unknown Source)
at org.hsqldb.TextTable.openCache(Unknown Source)
at org.hsqldb.TextTable.setDataSource(Unknown Source)
at org.hsqldb.StatementCommand.getResult(Unknown Source)
at org.hsqldb.StatementCommand.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 12 more
Caused by: org.hsqldb.HsqlException: file input/output erroropenning file: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory) error: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.persist.TextCache.open(Unknown Source)
at org.hsqldb.persist.Logger.openTextFilePersistence(Unknown Source)
... 20 more
Caused by: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory)
at java.io.RandomAccessFile.open(Native Method)
at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)
at java.io.RandomAccessFile.<init>(RandomAccessFile.java:98)
at org.hsqldb.persist.ScaledRAFile.<init>(Unknown Source)
at org.hsqldb.persist.ScaledRAFile.newScaledRAFile(Unknown Source)
... 22 more
Note the path in the SET TABLE statement differs from the path actually to be opened. I checked the docs and it seems the behavior of release 2.2.5 and earlier is consistent with the docs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1240
HyperSQL Database Engine (HSQLDB) / Bugs / #1240 Incorrect result sets when using WITH and aggregates
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB 2.2.8
I think the following 3 queries should be equivalent and return the same
results, however, only the 1st is correct. I originally found this as
queries referencing a CTE in a WHERE clause were giving incorrect
results.
PostgreSQL returns the correct result for all 3.
Correct result
CREATE TABLE ExamResults
(
student_name CHAR(10),
grade INTEGER
);
INSERT INTO ExamResults (student_name, grade) VALUES
('Anna', 50),
('Belle', 85);
SELECT *
FROM ExamResults
WHERE grade = (SELECT MIN(grade) FROM ExamResults);
Returns single row ('Anna', 50)
Incorrect result 1.
WITH ExamResultsWith(student_name, grade)
AS
(
VALUES ('Anna', 50), ('Belle', 85)
)
SELECT *
FROM ExamResultsWith
WHERE grade = (SELECT MIN(grade) FROM ExamResultsWith);
Returns empty result set
Incorrect result 2
WITH ExamResultsWith(student_name, grade)
AS
(
VALUES ('Anna', 50), ('Belle', 85)
)
SELECT *
FROM (VALUES ('Anna2', 50),('Belle', 85)) AS temp(student_name, grade)
WHERE grade = (SELECT MIN(grade) FROM ExamResultsWith);
Returns empty result set
ps. I was going to submit this several months ago :( Anyway, finding
HSQLDB fantastic so far.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1241
HyperSQL Database Engine (HSQLDB) / Bugs / #1241 JDBCCommonDataSource isn't Serializable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since JDBCCommonDataSource isn't serializable and the subclass is, Java doesn't store the values from the class JDBCCommonDataSource when the datasource is serializaed. Therefore when deserializing the url is null.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1242
HyperSQL Database Engine (HSQLDB) / Bugs / #1242 incorrect results for subqueries within a view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It appears that hsqldb (v2.2.8) is botching queries against views
defined with more than one subquery. The following SQL test case
will explain this far more clearly than English:
-- table of 'bar'
create table bar ( id INTEGER );
-- table of 'foo' which link back to 'bar'
create table foo ( id INTEGER, bar INTEGER, a INTEGER, b INTEGER );
-- view of bar which counts related foo with particular qualities
create view barsum as
select id, 
(select count(*) from foo f
where f.bar = b.id
and f.a = 1 and f.b = 1) as oneone,
(select count(*) from foo g
where g.bar = b.id
and g.a = 1 and g.b = 0) as onezero
from bar b;
-- Set up bar and foo.
insert into bar (id) values (1, 2, 3, 4, 5);
insert into foo (id, bar, a, b, c) 
values ( (1, 1, 1, 0, 0),
(2, 1, 1, 1, 1),
(3, 1, 1, 0, 1),
(4, 1, 1, 1, 1),
(5, 1, 1, 0, 1),
(6, 1, 1, 1, 1),
(7, 0, 0, 0, 0) );
commit;
-- This select returns *incorrect* result for onezero.
select id, oneone, onezero from barsum where id = 1;
commit;
-- This select returns *correct* result for onezero.
select id, 
(select count(*) from foo f
where f.bar = b.id
and f.a = 1
and f.b = 1) as xoneone,
(select count(*) from foo g
where g.bar = b.id
and g.a = 1
and g.b = 0) as xonezero
from bar b
where id = 1;
commit;
In general, the first subselect in the view is evaluated correctly, 
and the rest are not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1243
HyperSQL Database Engine (HSQLDB) / Bugs / #1243 DDL session is never freed by TransactionManagerMVCC
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
version 2.2.8
0. Set tx=MVCC
1. Session A. Perform any create table,
2. Session B. Try to perform any other DDL statement against the same database -> infinity lock
The problem is probably in MVCC and in the following piece of code:
Session.commit(bolean)
{
...
if (!isTransaction && rowActionList.size() == 0) {
...
return;
}
if (!database.txManager.commitTransaction(this)) {
So txManager.commitTransaction - never happens in the session A and cannot release TransactionManagerMVCC.catalogWriteSession
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1244
HyperSQL Database Engine (HSQLDB) / Bugs / #1244 PreparedStatement keeps references even after closed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JDBCPreparedStatment.close() does not nullify the session variable. The session variable hangs on to a cache object. This means that PreparedStatements take up much more memory than needed after they are closed. In my application, this is adding up to about 42 megabytes of RAM. I know that I can fix the problem by nullifying my PreparedStatements when I'm done (and that's what I'm doing now), but I thought it would be a good idea to fix this by nullifying the session variable in PreparedStatement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1245
HyperSQL Database Engine (HSQLDB) / Bugs / #1245 Text table: Delimiters not encoding-aware
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using hsqldb 2.2.8.
Text tables can be declared with a text encoding parameter, if the encoding of the underlying file is not ASCII. Unfortunately, this encoding is not applied to field delimiter and line separator characters. This fails with encodings that are not strict supersets of ASCII, most prominently UTF-16.
Example:
CREATE TEXT TABLE enctest (id INTEGER, t VARCHAR(10));
SET TABLE enctest SOURCE "enctest.txt;encoding=UTF-16LE;fs=\t";
INSERT INTO enctest VALUES (1, 'one');
COMMIT;
enctest.txt now contains:
0000 31 00 09 6f 00 6e 00 65 00 0d 0a 1 . . o . n . e . . .
As you see, the fs (tab) and the CRLF at the end have not been properly encoded as UTF-16.
Attempting to configure a text table with a properly encoded text file which already contains data also fails because HSQL does not recognize the delimiter/separator characters.
The manual states that "[t]he default is encoding=ASCII and the option encoding=UTF-8 or other supported encodings can be used". I have not been able to find a list of "supported encodings".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1246
HyperSQL Database Engine (HSQLDB) / Bugs / #1246 a UNIQUE constraint does not exist on referenced columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Tested on: v2.2.8, and the latest snapshot of 2.2.9 posted on the hsqldb homepage
Also tested on MySQL, and works correctly there.
Minimal SQL to reproduce error:
CREATE TABLE "NonDefaultReferenced"( "id" BINARY(16) NOT NULL, "field_targetString" varchar(160), "meta_org_id" BINARY(16) NOT NULL, PRIMARY KEY("meta_org_id", "id") );
CREATE TABLE "NonDefaultPositive"( "id" BINARY(16) NOT NULL, "field_remoteString" varchar(16), "meta_org_id" BINARY(16) NOT NULL, PRIMARY KEY("meta_org_id", "id") );
CREATE UNIQUE INDEX "NonDefaultReferenced_index_targetString" on "NonDefaultReferenced"( "meta_org_id","field_targetString" );
ALTER TABLE "NonDefaultPositive" ADD FOREIGN KEY ( "meta_org_id","field_remoteString") REFERENCES "NonDefaultReferenced" ("meta_org_id","field_targetString");
Expected outcome:
The add foreign key works as expected.
Actual outcome: 
Error message:
a UNIQUE constraint does not exist on referenced columns: "NonDefaultReferenced" in statement [ ALTER TABLE "NonDefaultPositive" ADD FOREIGN KEY ( "meta_org_id","field_remoteString") REFERENCES "NonDefaultReferenced" ("meta_org_id","field_targetString")] / Error Code: -5529 / State: 42529
If you need more info please let me know.
Thanks
Chris
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1247
HyperSQL Database Engine (HSQLDB) / Bugs / #1247 Select for varchar with new line does not work [2.2.x]
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example col in DB with following content:
A|B|C|
ABC
NOTE: there is new line after "C|"
attempt to query like this:
select * from table_name where col like 'A|B|C|%' does NOT work => nth is found
NOTE: on hsqldb family 1.8 such selects worked perfeclty - on 2.2.x they are not working
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1248
HyperSQL Database Engine (HSQLDB) / Bugs / #1248 The precision of BLOB column types is ignored
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trying to save a BLOB value longer than the maximum length allowed for a column will always succeed, effectively ignoring the specified column maximum length. A check similar to what's done in {{BinaryType.castOrConvertToType}} should be used here as well.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1249
HyperSQL Database Engine (HSQLDB) / Bugs / #1249 Exception when a value exceeds the precision of CLOB column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Normally, CLOB values should be truncated to the maximum allowed length (precision) of the target column. However, because org.hsqldb.Session.performLOBOperation(ResultLob) doesn't have a switch case for REQUEST_GET_TRUNCATE_LENGTH, an exception is thrown, causing the transaction to fail.
The solution would be to add a switch case for REQUEST_GET_TRUNCATE_LENGTH which would call database.lobManager.getTruncateLength(id)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1250
HyperSQL Database Engine (HSQLDB) / Bugs / #1250 Cannot create a VARCHAR type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After I've created a type with:
CREATE TYPE PUBLIC.LONGTEXT AS VARCHAR(1000000)
or
CREATE TYPE PUBLIC.LONGTEXT AS CLOB
in an instance of hsqldb server, I shutdown that instance with SHUTDOWN command. When I try to restart I got the following exception:
2012-08-27T15:28:19.289+0200 SEVERE could not reopen database
org.hsqldb.HsqlException: error in script file line: 39 unexpected token: INFORMATION_SCHEMA
The guilty line is this:
CREATE TYPE PUBLIC.LONGTEXT AS VARCHAR(1000000) COLLATE INFORMATION_SCHEMA.SQL_TEXT
If I modify the line removing the information_ schema part or removing the collate part, the script seem to work, bringing up instance
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1251
HyperSQL Database Engine (HSQLDB) / Bugs / #1251 NullPointerException on subquery with group by
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given the following definition:
create table ta (a int,b int)
The following query runs OK:
select b,(select sum(a) from ta) from ta
But the following fails:
select b,(select sum(a) from ta) from ta group by b
Exception below:
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(Unknown Source)
at test.Toto.main(Toto.java:28)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 3 more
Caused by: java.lang.NullPointerException
at org.hsqldb.QuerySpecification.collectOuterColumnExpressions(Unknown Source)
at org.hsqldb.Expression.isComposedOf(Unknown Source)
at org.hsqldb.QuerySpecification.resolveGroups(Unknown Source)
at org.hsqldb.QuerySpecification.resolveTypesPartTwo(Unknown Source)
at org.hsqldb.QueryExpression.resolve(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
... 5 more
I am using the latest version (2.2.9) as an in-process, in-memory database.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1252
HyperSQL Database Engine (HSQLDB) / Bugs / #1252 Unquoted identifiers handled differently from PostgreSQL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using HSQLDB in PostgreSQL compatibility mode and it appears that unquoted identifiers are handled differently between PostgreSQL and HSQLDB.
In PostgreSQL unquoted identifiers are converted to lower case whereas in HSQLDB unquoted identifiers are converted to upper case.
This seems like it should be a relatively simple configuration option to include and would help improve compatibility between HSQLDB and PostgreSQL.
I am currently using version 2.2.8.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1253
HyperSQL Database Engine (HSQLDB) / Bugs / #1253 Defrag does not trigger properly at checkpoint
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I repeat the process of adding a million rows to a table, then truncating the table, the data file continues to increase in size when I have hsqldb.defrag_limit=5. My output is the following:
File size before truncate: 67108kb
File size after truncate: 67108kb
File size before truncate: 134217kb
File size after truncate: 134217kb
File size before truncate: 201326kb
File size after truncate: 201326kb
File size before truncate: 268435kb
File size after truncate: 268435kb
File size before truncate: 322961kb
File size after truncate: 322961kb
After the first run, the size of the data file is 67108kb, which should be the max size needed at any time because I am only adding a million rows and deleting them. After the second run, the size of the data file is 134217kb - twice the size of my data, which means 50% of the db file is wasted, so a defrag should be triggered at the next checkpoint. However as you can see, the defrag is not triggered.
When I reduce hsqldb.defrag_limit to 1, the defrag is triggered and the file size stays at 67108kb. But it should also trigger when the limit is 5.
Test code is attached. This was run against hsqldb 2.2.5.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1254
HyperSQL Database Engine (HSQLDB) / Bugs / #1254 wrong shutdown from sqltool
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The bug seems to be appeared at 2.2.9 release. It reports an error, when shutting down non-interactively from sqltool, i.e.
WRONG BEHAVIOUR (password is defined, or url from resources): 
$hsqldb-sqltool-2 --inlineRc=url=jdbc:hsqldb:hsql://localhost,user=SA,password= --debug --sql 'shutdown;'
SEVERE SQL Error at '--sql' line 1:
"shutdown"
connection exception: connection failure: java.io.EOFException
org.hsqldb.cmdline.SqlTool$SqlToolException
RIGHT BEHAVIOUR (interactive password enter):
hsqldb-sqltool-2 --inlineRc=url=jdbc:hsqldb:hsql://localhost,user=SA --debug --sql 'shutdown;' 
Enter password for SA:
Disconnected from JDBC Data Source
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1255
HyperSQL Database Engine (HSQLDB) / Bugs / #1255 cannot attach text tables (CSV files) with absolute path
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there
I reported bug ID 3535299 against 2.2.6 on June 14. You reported the bug as fixed in 2.2.9 - thanks for paying attention to the bug report! However, I just upgraded to 2.2.9 and I still get the same error as I reported in 3535299. (I just copied the stack trace from bug report 3535299):
java.sql.SQLException: bad TEXT table source file - line number: 0 org.hsqldb.HsqlException: file input/output erroropenning file: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory) error: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv in statement [SET TABLE "TXN:zaviation/branches/5.8".T_TEXT SOURCE '/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv;ignore_first=true;fs=\semi;encoding=Cp1252' DESC]
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at consor.tool.delta.helper.HsqldbHelper.executeNoCatch(HsqldbHelper.java:92)
at consor.tool.metadata.data.DataFileManager.attachTextTableSource(DataFileManager.java:139)
... 8 more
Caused by: org.hsqldb.HsqlException: bad TEXT table source file - line number: 0 org.hsqldb.HsqlException: file input/output erroropenning file: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory) error: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.TextTable.connect(Unknown Source)
at org.hsqldb.TextTable.openCache(Unknown Source)
at org.hsqldb.TextTable.setDataSource(Unknown Source)
at org.hsqldb.StatementCommand.getResult(Unknown Source)
at org.hsqldb.StatementCommand.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 12 more
Caused by: org.hsqldb.HsqlException: file input/output erroropenning file: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory) error: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.persist.TextCache.open(Unknown Source)
at org.hsqldb.persist.Logger.openTextFilePersistence(Unknown Source)
... 20 more
Caused by: java.io.FileNotFoundException: /tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv (No such file or directory)
at java.io.RandomAccessFile.open(Native Method)
at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212)
at java.io.RandomAccessFile.<init>(RandomAccessFile.java:98)
at org.hsqldb.persist.ScaledRAFile.<init>(Unknown Source)
at org.hsqldb.persist.ScaledRAFile.newScaledRAFile(Unknown Source)
... 22 more
Please note that the root cause is a FileNotFoundException, complaining that file
"/tmp/2012-06-14T20-32-01.594+0200/meta/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv"
does not exist. That's correct, but HSQLDB is not supposed to open such a file; it should open the file given in the underlying SET TABLE X SOURCE statement 
"/tmp/2012-06-14T20-32-01.594+0200/txn/branches/5.8/zaviation/db/initialdata/t_text.csv"
You guessed it right - my database script resides in "/tmp/2012-06-14T20-32-01.594+0200" having name "meta"; the two paths are concatenated resulting in a wrong file path.
When running my program, I use java -Dtextdb.allow_full_path=true MyClass
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1256
HyperSQL Database Engine (HSQLDB) / Bugs / #1256 Cannot store strings with leading blanks in TEXT tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug report applies to 2.2.9 and probably to earlier versions too.
HSQLDB cannot store strings with leading or trailing blanks in TEXT tables. I do the following:
1. CREATE TEXT TABLE T (I INTEGER, C VARCHAR(20))
2. attach the the csv file
3. INSERT INTO T (I, C) VALUES(1, ' blah') -- note the leading blank
4. COMMIT
5. SELECT C FROM T -- returns one row with one column, containing ' blah' - including the leading blank, that's fine
6. SHUTDOWN COMPACT -- the csv file is reorganized and written to the disk
7. open the database
8. SELECT C FROM T -- returns one row with one column, containing 'blah' - without the leading blank, that's bad
When I look at the csv file, it contains one record:
1; blah
Note the leading blank, it's there but ignored when reading the file.
9. edit the csv file: change the record to
1;" blah"
10. open the database
11. SELECT C FROM T -- returns one row with one column, containing ' blah' - including the leading blank, that's fine
12. SHUTDOWN COMPACT -- the csv file is reorganized and written to the disk
13. open the database
14. SELECT C FROM T -- returns one row with one column, containing 'blah' - without the leading blank, that's bad
I conclude that HSQLDB can read Strings with leading and trailing blanks correctly from the csv file when they are quoted. Unfortunately HSQLDB does not quote strings when they contain leading or trailing blanks.
I suggest the following bugfix
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1257
HyperSQL Database Engine (HSQLDB) / Bugs / #1257 ORDER BY NULL Logic Not Consistent
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use HSQLDB for testing to mimic Oracle.. Just recently I upgraded HSQLDB and was surprised that our test cases were failing when checking if NULL was first or last.
This is when I first learned about NULL FIRST/ NULL LAST. Unfortunately we use Hibernate which doesn't support those options.
https://hibernate.onjira.com/browse/HHH-465
So then I wanted to verify the behavior for Oracle and I found this:
http://docs.oracle.com/javadb/10.8.2.2/ref/rrefsqlj13658.html
In HSQLDB, by default it's either always first or always last. There isn't logic to have a best guess. I would recommend that by default it uses the "best guess" in order to prevent surprises on upgraders.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1258
HyperSQL Database Engine (HSQLDB) / Bugs / #1258 DbBackup overwrite not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When DbBackup attempts to overwrite an existing file, it does not delete the file before renaming the -partial file to the desired file name.
As a result, the rename fails and the -partial file persists.
When another attempt to backup the database to the same file is performed, an IOException is thrown when the -parital file is found and the exception incorrectly suggests that something or someone may be writing to the file.
The resolution to this is simple.
If overwrite is specified, delete the pre-existing file prior to renaming the -partial file.
If the delete fails or if the rename fails, an exception should be thrown.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1259
HyperSQL Database Engine (HSQLDB) / Bugs / #1259 Using Schemas doesn't seem to work with Connection Pools
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We've been using HSQLDB on the XWiki (http://xwiki.org) open source project for years now and it's great. Thank you for such a wonderful DB :)
Now XWiki supports having one DB per wiki in a farm mode and I'm adding support for HSQLDB (this mode works with some other DBs already).
My problem is that even though I set the schema correctly (SET SCHEMA "myschema") the statement is executed on the wrong schema. I've been debugging this and I think I've found the problem:
* We're using DBCP as our connection pool and DBCP caches prepared statement. However it doesn't have any knowledge of schemas and caches based on the SQL and the Catalog only. Thus when we execute the same statement on a different schema we get a prepared statement that is already set on the wrong schema.
* However, in HSQLDB's Session.execute(Result cmd) there's a check when the statement is executed to verify if it requires to be recompiled and this checks verifies the last schema change data compared to the statement last compiled date:
if (cs == null
|| cs.compileTimestamp
< database.schemaManager.schemaChangeTimestamp) {
and later down the stream in StatementManager.getStatement:
if (cs.getCompileTimestamp()
< database.schemaManager.getSchemaChangeTimestamp()) {
cs = recompileStatement(session, cs);
However the problem is in recompileStatement(). It creates a new statement but uses the old schema in the cs as the session schema instead of using the current schema:
private Statement recompileStatement(Session session, Statement cs) {
HsqlName oldSchema = session.getCurrentSchemaHsqlName();
Statement newStatement;
// revalidate with the original schema
try {
HsqlName schema = cs.getSchemaName();
int props = cs.getCursorPropertiesRequest();
if (schema != null) {
// checks the old schema exists
session.setSchema(schema.name);
}
...
} finally {
session.setCurrentSchemaHsqlName(oldSchema);
}
I don't understand why the "session.setSchema(schema.name);" line is needed and this line seems to be causing my issue...
So I see several solutions to my problem:
* Since the DBCP statement cache is per connection, dedicate connections to a given schema. However I don't have much control over DBCP (or other connection pools for that matter)...
* Modify HSQLDB so that every time it executes a statement and when cs.compileTimestamp < database.schemaManager.schemaChangeTimestamp then explicitly set the cs schema to be the current schema
WDYT?
Is this something that could be fixed in HSQLDB?
Thanks a lot
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1260
HyperSQL Database Engine (HSQLDB) / Bugs / #1260 Inserting blob in a db with "res" connection string NPE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When calling an insert statement with a blob parameter: this exception is thrown (the same query is successful when connecting to the sam database using "file" url): 
SQLException sqlCode = S1000 vendorCode = -458 message = java.lang.NullPointerException
java.sql.SQLException: java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source)
.....
.....
.....
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.SessionData.allocateLobForResult(Unknown Source)
at org.hsqldb.Session.allocateResultLob(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.performPreExecute(Unknown Source)
... 42 more
Caused by: java.lang.NullPointerException
at org.hsqldb.lib.ArrayUtil.fillArray(Unknown Source)
at org.hsqldb.persist.LobManager.setBytesIS(Unknown Source)
at org.hsqldb.persist.LobManager.setBytesForNewBlob(Unknown Source)
... 45 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1261
HyperSQL Database Engine (HSQLDB) / Bugs / #1261 Type Coercion Needed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running a query that coalesces a bit field, you should be able to supply a default value as follows:
SELECT COALESCE(aTable.someBitField, 1) FROM ...
In the above example, if 'aTable.someBitField' is NULL, 1 should be returned in the result set. Currently, an exception is thrown with the message 'incompatible data types in combination'. In a similar vein, the following query should return the same result set:
SELECT COALESCE(aTable.someBitField, TRUE) FROM ...
Both queries ran and failed against HSQLDB v2.2.9, running in memory with the following connection string:
jdbc:hsqldb:mem:test-DB;sql.syntax_mys=true
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1262
HyperSQL Database Engine (HSQLDB) / Bugs / #1262 Querying CHAR fields using MySql Syntax
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If a table is created with of field of type CHAR of a defined length as follows:
create table myTable (id char(36) not null, version integer, creationDate timestamp not null)
And the CHAR field is defined in a simple SELECT query as follows:
SELECT id FROM myTable
Only the first character of the field value is returned. In essence, the field is treated as a CHAR, not a CHAR(36).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1263
HyperSQL Database Engine (HSQLDB) / Bugs / #1263 Versions 2.0.0 and higher fail on Sonar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running Sonar analyzer with Maven (mvn sonar:sonar), JUnit tests using HSQLDB fail with segmentation fault.
Regular Maven build (mvn clean install) pass without problems.
My guess would be that Sonar's byte code manipulations somehow interfere with HSQLDB.
When using HSQLDB version 1.8.0.10 the build passes both with Sonar and in regular mode.
Please see dump log attached.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1264
HyperSQL Database Engine (HSQLDB) / Bugs / #1264 NullPointerException on shutdownWithCatalog
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Exception in thread "main" java.lang.NullPointerException
at org.hsqldb.DatabaseManager.shutdownDatabases(Unknown Source)
at org.hsqldb.server.Server.shutdownWithCatalogs(Unknown Source)
I looked into org.hsqldb.DatabaseManager.shutdownDatabases(Unknown Source) and I think following is the problem:
public static void shutdownDatabases(Server server, int shutdownMode) {
HashSet databases = (HashSet) serverMap.get(server); //can be null
Database[] dbArray = new Database[databases.size()]; //if databases is null then we got an NullPointerException
// should be:
Database[] dbArray = new Database[databases == null ? 0 : databases.size()];
databases.toArray(dbArray);
//...
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1265
HyperSQL Database Engine (HSQLDB) / Bugs / #1265 WHERE condition on ROW_NUMBER does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Where conditions on the generated row number generated by ROW_NUMBER() OVER() does not work for lower bounds > 0.
Assuming 5 records matching the SELECT criteria...
SELECT * FROM
(
SELECT ROW_NUMBER() OVER() as row_num, inner.* FROM 
(
SELECT ...
) AS inner 
) AS foo
WHERE row_num > 0 and row_num <= 5;
returns 5 records. 5 records were expected.
Changing the WHERE condition to 
WHERE row_num > 2 and row_num <= 4
returns 0 records. 2 records (row_number 3 and 4) were expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1266
HyperSQL Database Engine (HSQLDB) / Bugs / #1266 UNION in ROW_NUMBER sub-select does not eliminate duplicates
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Assuming 5 unique rows match the SELECT criteria of a ROW_NUMBER sub-select:
SELECT * FROM
(
SELECT ROW_NUMBER() OVER() AS row_num, inner.* FROM 
(
SELECT ...
UNION 
SELECT ...
) AS inner 
) AS outer;
The expected output is 5 rows. In the attached example I get 10, every row duplicated once.
OS is Ubuntu 11.04
JDK is Oracle jdk1.6.0_31
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1267
HyperSQL Database Engine (HSQLDB) / Bugs / #1267 SELECT with a subquery in WHERE sometimes returns nothing
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Having a non-empty table Q, with ID as the primary column, running this query will return no rows:
SELECT * FROM Q o WHERE ID = (SELECT MAX(ID) FROM Q i WHERE o.ID=i.ID)
If ID is not a primary column the query would work. Replacing "WHERE ID = " with "WHERE ID IN " will also work.
The bug is reproducible with 2.2.9 and with the latest snapshot. It is not reproducible with 2.2.8, so it seems to be a regression.
Unit test attached.
The query is actually of the type which is frequently generated by Hibernate Envers, so any project using Envers with HSQLDB 2.2.9 might have some problems doing so.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1268
HyperSQL Database Engine (HSQLDB) / Bugs / #1268 Error while performing connection to previous version of DB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, Fred!
I remember about your mail but had no time to perform database tests.
Today I've checked out latest revision of source tree (5106) and tried to connect to database from 5106 build.
So I'm very disappointed about trying to test engine because I get such error:
This I get when I connect via Swing interface:
2012-11-08T13:12:42.187+0300 WARNING Script processing failure
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0
at org.hsqldb.store.BitMap.get(Unknown Source)
at org.hsqldb.store.BitMap.isSet(Unknown Source)
at org.hsqldb.ParserDQL.readColumnNames(Unknown Source)
at org.hsqldb.ParserDDL.compileCreateView(Unknown Source)
at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
at org.hsqldb.persist.Log.processScript(Unknown Source)
at org.hsqldb.persist.Log.open(Unknown Source)
at org.hsqldb.persist.Logger.openPersistence(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection(DriverManager.java:582)
at java.sql.DriverManager.getConnection(DriverManager.java:185)
at org.hsqldb.util.ConnectionDialogSwing.createConnection(Unknown Source)
at org.hsqldb.util.ConnectionDialogSwing.actionPerformed(Unknown Source)
at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1995)
at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2318)
at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:387)
at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:242)
at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:236)
at java.awt.Component.processMouseEvent(Component.java:6288)
at javax.swing.JComponent.processMouseEvent(JComponent.java:3267)
at java.awt.Component.processEvent(Component.java:6053)
at java.awt.Container.processEvent(Container.java:2041)
at java.awt.Component.dispatchEventImpl(Component.java:4651)
at java.awt.Container.dispatchEventImpl(Container.java:2099)
at java.awt.Component.dispatchEvent(Component.java:4481)
at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4577)
at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4238)
at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4168)
at java.awt.Container.dispatchEventImpl(Container.java:2085)
at java.awt.Window.dispatchEventImpl(Window.java:2478)
at java.awt.Component.dispatchEvent(Component.java:4481)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:643)
at java.awt.EventQueue.access$000(EventQueue.java:84)
at java.awt.EventQueue$1.run(EventQueue.java:602)
at java.awt.EventQueue$1.run(EventQueue.java:600)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:98)
at java.awt.EventQueue$2.run(EventQueue.java:616)
at java.awt.EventQueue$2.run(EventQueue.java:614)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:613)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:178)
at java.awt.Dialog$1.run(Dialog.java:1046)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:641)
at java.awt.EventQueue.access$000(EventQueue.java:84)
at java.awt.EventQueue$1.run(EventQueue.java:602)
at java.awt.EventQueue$1.run(EventQueue.java:600)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:98)
at java.awt.EventQueue$2.run(EventQueue.java:616)
at java.awt.EventQueue$2.run(EventQueue.java:614)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:613)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)
2012-11-08T13:12:42.296+0300 SEVERE could not reopen database
org.hsqldb.HsqlException: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.persist.Log.processScript(Unknown Source)
at org.hsqldb.persist.Log.open(Unknown Source)
at org.hsqldb.persist.Logger.openPersistence(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.newSession(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
at java.sql.DriverManager.getConnection(DriverManager.java:582)
at java.sql.DriverManager.getConnection(DriverManager.java:185)
at org.hsqldb.util.ConnectionDialogSwing.createConnection(Unknown Source)
at org.hsqldb.util.ConnectionDialogSwing.actionPerformed(Unknown Source)
at javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1995)
at javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2318)
at javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:387)
at javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:242)
at javax.swing.plaf.basic.BasicButtonListener.mouseReleased(BasicButtonListener.java:236)
at java.awt.Component.processMouseEvent(Component.java:6288)
at javax.swing.JComponent.processMouseEvent(JComponent.java:3267)
at java.awt.Component.processEvent(Component.java:6053)
at java.awt.Container.processEvent(Container.java:2041)
at java.awt.Component.dispatchEventImpl(Component.java:4651)
at java.awt.Container.dispatchEventImpl(Container.java:2099)
at java.awt.Component.dispatchEvent(Component.java:4481)
at java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4577)
at java.awt.LightweightDispatcher.processMouseEvent(Container.java:4238)
at java.awt.LightweightDispatcher.dispatchEvent(Container.java:4168)
at java.awt.Container.dispatchEventImpl(Container.java:2085)
at java.awt.Window.dispatchEventImpl(Window.java:2478)
at java.awt.Component.dispatchEvent(Component.java:4481)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:643)
at java.awt.EventQueue.access$000(EventQueue.java:84)
at java.awt.EventQueue$1.run(EventQueue.java:602)
at java.awt.EventQueue$1.run(EventQueue.java:600)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:98)
at java.awt.EventQueue$2.run(EventQueue.java:616)
at java.awt.EventQueue$2.run(EventQueue.java:614)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:613)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:178)
at java.awt.Dialog$1.run(Dialog.java:1046)
at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:209)
at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:641)
at java.awt.EventQueue.access$000(EventQueue.java:84)
at java.awt.EventQueue$1.run(EventQueue.java:602)
at java.awt.EventQueue$1.run(EventQueue.java:600)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:98)
at java.awt.EventQueue$2.run(EventQueue.java:616)
at java.awt.EventQueue$2.run(EventQueue.java:614)
at java.security.AccessController.doPrivileged(Native Method)
at java.security.AccessControlContext$1.doIntersectionPrivilege(AccessControlContext.java:87)
at java.awt.EventQueue.dispatchEvent(EventQueue.java:613)
at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:269)
at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:184)
at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:174)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:169)
at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:161)
at java.awt.EventDispatchThread.run(EventDispatchThread.java:122)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0
at org.hsqldb.store.BitMap.get(Unknown Source)
at org.hsqldb.store.BitMap.isSet(Unknown Source)
at org.hsqldb.ParserDQL.readColumnNames(Unknown Source)
at org.hsqldb.ParserDDL.compileCreateView(Unknown Source)
at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
... 67 more
This I get when I connect via my utility:
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0 (java.sql.SQLException)
org.hsqldb.jdbc.Util.sqlException(Unknown Source)
org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
org.hsqldb.jdbc.JDBCDataSource.getConnection(Unknown Source)
org.hsqldb.jdbc.JDBCDataSource.getConnection(Unknown Source)
protei.bulk.connections.jdbc.Tm_SQLConnection.connect(Tm_SQLConnection.java:156)
protei.bulk.ivr.Tm_StatSynchronizer$Tm_SyncroLogic.execute(Unknown Source)
protei.bulk.system.threading.Tm_SeparateThread$Tm_Executor.run(Tm_SeparateThread.java:56)
java.lang.ArrayIndexOutOfBoundsException: Array index out of range: 0 (org.hsqldb.HsqlException)
org.hsqldb.error.Error.error(Unknown Source)
org.hsqldb.persist.Log.processScript(Unknown Source)
org.hsqldb.persist.Log.open(Unknown Source)
org.hsqldb.persist.Logger.openPersistence(Unknown Source)
org.hsqldb.Database.reopen(Unknown Source)
org.hsqldb.Database.open(Unknown Source)
org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
org.hsqldb.DatabaseManager.newSession(Unknown Source)
org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
org.hsqldb.jdbc.JDBCDataSource.getConnection(Unknown Source)
org.hsqldb.jdbc.JDBCDataSource.getConnection(Unknown Source)
protei.bulk.connections.jdbc.Tm_SQLConnection.connect(Tm_SQLConnection.java:156)
protei.bulk.ivr.Tm_StatSynchronizer$Tm_SyncroLogic.execute(Unknown Source)
protei.bulk.system.threading.Tm_SeparateThread$Tm_Executor.run(Tm_SeparateThread.java:56)
Array index out of range: 0 (java.lang.ArrayIndexOutOfBoundsException)
org.hsqldb.store.BitMap.get(Unknown Source)
org.hsqldb.store.BitMap.isSet(Unknown Source)
org.hsqldb.ParserDQL.readColumnNames(Unknown Source)
org.hsqldb.ParserDDL.compileCreateView(Unknown Source)
org.hsqldb.ParserDDL.compileCreate(Unknown Source)
org.hsqldb.ParserCommand.compilePart(Unknown Source)
org.hsqldb.ParserCommand.compileStatement(Unknown Source)
org.hsqldb.Session.compileStatement(Unknown Source)
org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
org.hsqldb.persist.Log.processScript(Unknown Source)
org.hsqldb.persist.Log.open(Unknown Source)
org.hsqldb.persist.Logger.openPersistence(Unknown Source)
org.hsqldb.Database.reopen(Unknown Source)
org.hsqldb.Database.open(Unknown Source)
org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
org.hsqldb.DatabaseManager.newSession(Unknown Source)
org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
org.hsqldb.jdbc.JDBCDataSource.getConnection(Unknown Source)
org.hsqldb.jdbc.JDBCDataSource.getConnection(Unknown Source)
protei.bulk.connections.jdbc.Tm_SQLConnection.connect(Tm_SQLConnection.java:156)
protei.bulk.ivr.Tm_StatSynchronizer$Tm_SyncroLogic.execute(Unknown Source)
protei.bulk.system.threading.Tm_SeparateThread$Tm_Executor.run(Tm_SeparateThread.java:56)
The database dump is in attachement.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1269
HyperSQL Database Engine (HSQLDB) / Bugs / #1269 "incompatible data types in combination" with TRUNC function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB version 2.2.9
JAVA version 1.6.0_30
Executing prepared statement including TRUNC function with timestamp parameter, HsqlException with "incompatible data types in combination" message is thown.
For example, this prepared statement doesn't work: SELECT COUNT(ID) AS TOTAL_ROWS FROM TABLE1 WHERE OPERATION_DATE = TRUNC(?)
Instead this prepared statement works: SELECT COUNT(ID) AS TOTAL_ROWS FROM TABLE1 WHERE OPERATION_DATE = TRUNC(TIMESTAMP'2012-11-01 01:00:00')
In attach junit test for both cases.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1270
HyperSQL Database Engine (HSQLDB) / Bugs / #1270 strange behaviour of exit / continue handler
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A procedure loops through a table and updates each record in a begin / end block. The update sometimes fails due to unique key violation. With having an exit or an continue handler the record to be updated is DELETED! With an undo handler everything is as expected. 
After my opinion deleting the record in such cases is unacceptable.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1271
HyperSQL Database Engine (HSQLDB) / Bugs / #1271 SQL / PSM: aggregate function do not see variables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The problem seems to be similar to 3107413.
Find complete example in attached file, essence is:
CREATE PROCEDURE show_sum_problem()
MODIFIES SQL DATA
BEGIN ATOMIC
test_var: BEGIN ATOMIC
declare v_sum SmallInt;
declare c_const SmallInt;
set c_const = 1;
set v_sum = 
-- works NOT
select sum(c_const) -- same for count, avg, etc.
from test t 
/* works
select sum(t2.test_id) 
from test t
join test t2 on t2.test_id = c_const; 
*/
do_update2:begin atomic
declare undo handler for SQLEXCEPTION leave do_update2;
update test
set num_chk_equal = v_sum
where test_id = 1
;
END do_update2;
END test_var;
end;
Error: user lacks privilege or object not found: C_CONST
SQLState: 42501
ErrorCode: -5501
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1272
HyperSQL Database Engine (HSQLDB) / Bugs / #1272 Resource bundle name causes assertion failure in gwt-dev
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reproduction scenario: unzip the attached zip-file, and run "mvn test" in the folder which has the pom.xml file. This results in a test error: "Could not initialize class org.hsqldb.error.Error". (Alternatively, from the zip-file import the Eclipse project, with m2eclipse installed, and run the provided JUnit launch configuration.)
The error only occurs when assertions are enabled during the unit test run.
In gwt-test-utils (specifically in com.googlecode.gwt.test.internal.GwtClassLoader.GwtClassLoaderWithRewriter.GwtClassLoaderWithRewriter), a call is done to gwt-dev's com.google.gwt.dev.util.Name.BinaryName.toInternalName("org/hsqldb/resources/sql-state-messages"), which fails on an 'assert' which checks that there are no '/' characters in the name.
As far as I can see, the cause is that org.hsqldb.resources.BundleHandler.prefix, which contains '/' characters, and org.hsqldb.error.Error.errPropsName, which contains '-' characters, together result in the call java.util.ResourceBundle.getBundle("org/hsqldb/resources/sql-state-messages", ...). HOWEVER, this method specifies that this String argument must be "the base name of the resource bundle, a fully qualified class name" (see http://docs.oracle.com/javase/6/docs/api/java/util/ResourceBundle.html#getBundle%28java.lang.String,%20java.util.Locale%29).
Therefore it seems to me that both BundleHandler.prefix and Error.errPropsName must be changed, so that ResourceBundle.getBundle() receives a funlly qualified class name; the 'assert' in gwt-dev will then automatically succeed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1273
HyperSQL Database Engine (HSQLDB) / Bugs / #1273 clob AsciiStream read returns arg length everytime
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
in Clob type
method read of InputStream returned by getAsciiStream evrytime returns this arguments array length
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1274
HyperSQL Database Engine (HSQLDB) / Bugs / #1274 null pointer exception while executing stored procedure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
the next example gives a null pointer exception (HSQLDB 2.2.8, server version):
create table test1 (
test_id integer primary key,
test_text VarChar(20)
);
insert into test1 values (1, '1');
insert into test1 values (2, '2');
-- drop PROCEDURE test_bind_var_is_null;
CREATE PROCEDURE test_bind_var_is_null()
MODIFIES SQL DATA
BEGIN ATOMIC
DECLARE v_test_id INTEGER;
declare i, j integer;
set i = 0;
in_i: while i < 2
do
set i = i + 1;
set j = select test_id from test1 where test_id = i;
do_update: begin atomic
--declare undo handler for SQLEXCEPTION leave do_update;
update test1
set test_text = concat(test_id, test_text)
where test_id = j
;
end do_update;
end while in_i;
end; 
call test_bind_var_is_null();
this occurrs only when the do_update block is run inside a loop.
This error occurred inside a more complex procedure and was really hard to find. It would be much easier, if there was a print option as requested (by me) in 3584054. Is there already an internal / unofficial mechanism that helps debugging stored procedures?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1275
HyperSQL Database Engine (HSQLDB) / Bugs / #1275 exception handler problems with stored procedures
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi Fred,
I use latest HSQLDB snapshot from Dec. 2nd 2012 and have several problems with exception handlers. Find attached a file with some tests. Maybe some things are only due to misunderstanding of the documentation (which is quite brief)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1276
HyperSQL Database Engine (HSQLDB) / Bugs / #1276 Bad behaviour of the NULL predicate for row value expression
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The NULL predicate is not implemented correctly for row value expressions. Both the HSQLDB documentation and the SQL 1992 standard specify the same behaviour as specified in §8.6 of the SQL standard documentation paper:
http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt
However, HSQLDB 2.2.9 returns a value for this query here:
select 1
from information_schema.system_users
where (null, null) is not null
... whereas it doesn't return a value for this query here:
select 1
from information_schema.system_users
where (null, null) is null
It seems that IS NOT NULL always returns TRUE, whereas IS NULL always returns FALSE for row value expressions with degree > 1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1277
HyperSQL Database Engine (HSQLDB) / Bugs / #1277 Stored Procedures Can't Have NUMERIC Parameters
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I create a function with a BigDecimal argument and declare it as a stored procedure with a NUMERIC parameter then HSQLDB can't find the function - but if I declare the same static function as having a DECIMAL parameter then it works. I think the patch below fixes this:
Index: src/org/hsqldb/types/Types.java
--- src/org/hsqldb/types/Types.java (revision 5132)
+++ src/org/hsqldb/types/Types.java (working copy)
@@ -566,6 +566,7 @@
javaTypeNumbers.put(ClobClassName, Types.SQL_CLOB);
javaTypeNumbers.put("java.util.Date", Types.SQL_DATE);
javaTypeNumbers.put(DecimalClassName, Types.SQL_DECIMAL);
+ javaTypeNumbers.put(DecimalClassName, Types.SQL_NUMERIC);
javaTypeNumbers.put("boolean", Types.SQL_BOOLEAN);
javaTypeNumbers.put("java.lang.Boolean", Types.SQL_BOOLEAN);
javaTypeNumbers.put("byte", Types.TINYINT);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1278
HyperSQL Database Engine (HSQLDB) / Bugs / #1278 upper() or lower() function limits
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using multiple upper() or lower() functions for comparisons, receive a "java.sql.SQLException: java.io.IOException: Access is denied" error.
For instance, the following works:
SELECT * FROM TABLE WHERE UPPER(TITLE) LIKE '%TEST%'
But this will throw the error:
SELECT * FROM TABLE WHERE UPPER(TITLE) LIKE '%TEST%' OR UPPER(NAME) LIKE '%TEST%'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1279
HyperSQL Database Engine (HSQLDB) / Bugs / #1279 MERGE with constant in <search condition> fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Given a simple table like this:
CREATE TABLE q (id INT PRIMARY KEY)
And trying to run this MERGE statement:
MERGE INTO q USING (VALUES(1)) ON id = 1 WHEN MATCHED THEN UPDATE SET id = 1 WHEN NOT MATCHED THEN INSERT VALUES (1)
I receive this error: "user lacks privilege or object not found: SYSTEM_SUBQUERY".
Exactly same query used to work with HSQLDB 2.2.8 and before, but is not working both on 2.2.9 and latest 2.3.0 snapshot.
This type of queries is used by Liquibase <loadUpdateData> tag on HSQLDB (see this pull request - https://github.com/liquibase/liquibase/pull/22\).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1280
HyperSQL Database Engine (HSQLDB) / Bugs / #1280 Wrong result for left outer join with subselect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a problem with a select statement containing a subselect for a left outer join (see attachment)
It worked fine in version 2.0.1 (previous version we used). Since the upgrade to 2.2.9, this statement returns wrong results.
I guess this is an error in the engine? Im not sure though in which category to put this issue.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1281
HyperSQL Database Engine (HSQLDB) / Bugs / #1281 No view results even though query has results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have just upgraded from version 2.0.8 to 2.2.9, and I am having a problem with certain views not returning results. When I run the actual query that the view is defined as, it returns results, but as a view it does not.
Please open the attached DB - there will be an error at startup about a missing Java stored procedure but this is not relevant.
If you run the query:
select db_user_name as user_name, accelerator, char_code from (select user_name, db_user_name, char_code, accelerator from favourite_special_character natural join db_users where user_name='DEFAULT' or db_user_name=user_name except select 'DEFAULT', user_name, char_code, accelerator from favourite_special_character);
then it returns 18 rows.
if you now do
create view test as select db_user_name as user_name, accelerator, char_code from (select user_name, db_user_name, char_code, accelerator from favourite_special_character natural join db_users where user_name='DEFAULT' or db_user_name=user_name except select 'DEFAULT', user_name, char_code, accelerator from favourite_special_character);
and
select * from test;
then 0 rows are returned.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1282
HyperSQL Database Engine (HSQLDB) / Bugs / #1282 No view results even though query has results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have just upgraded from version 2.0.8 to 2.2.9, and I am having a problem with certain views not returning results. When I run the actual query that the view is defined as, it returns results, but as a view it does not.
Please open the attached DB - there will be an error at startup about a missing Java stored procedure but this is not relevant.
If you run the query:
select db_user_name as user_name, accelerator, char_code from (select user_name, db_user_name, char_code, accelerator from favourite_special_character natural join db_users where user_name='DEFAULT' or db_user_name=user_name except select 'DEFAULT', user_name, char_code, accelerator from favourite_special_character);
then it returns 18 rows.
if you now do
create view test as select db_user_name as user_name, accelerator, char_code from (select user_name, db_user_name, char_code, accelerator from favourite_special_character natural join db_users where user_name='DEFAULT' or db_user_name=user_name except select 'DEFAULT', user_name, char_code, accelerator from favourite_special_character);
and
select * from test;
then 0 rows are returned.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1283
HyperSQL Database Engine (HSQLDB) / Bugs / #1283 UUID() built-in
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
It seems that the UUID() built-in function, called without parameter generates an UUID built with only 8 bytes which are really random.
For example, here is an UUID generated with the function UUID() : 3ddf4f9e3ddf4f9e1bac4a331bac4a33
If we look closer we can see that the first 8 bytes are repeated and the third 8 bytes are repeated.
The same UUID printed differently :
3ddf4f9e
3ddf4f9e
1bac4a33
1bac4a33
Would'nt it be better if the 16 bytes were randomly generated ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1284
HyperSQL Database Engine (HSQLDB) / Bugs / #1284 Natural Join returns duplicate columns.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As recommended in a previous issue I tried the latest snapshot jar. With the attached DB please try this query:
SELECT * FROM COMBO_NODE_FORMAT NATURAL JOIN(SELECT DISTINCT TEMPLATE_GROUP_ID, NODE_ID FROM COMBO_NODE_FORMAT EXCEPT SELECT TEMPLATE_GROUP_ID, NODE_ID FROM LIST_NODE_FORMAT);
The result has two columns called 'TEMPLATE_GROUP_ID', so I am unable to make a view out of this query.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1285
HyperSQL Database Engine (HSQLDB) / Bugs / #1285 More natural join problems
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On the latest snapshot (26/2), please open the attached DB.
select top 1 * from ((SELECT USER_NAME, LIST_NUMBER, LIST_LEVEL, APPEND(TEXT) AS TEXT
FROM USER_OUTLINE_LIST_LEVEL_TEXT_AND_NUMBER GROUP BY USER_NAME, LIST_NUMBER, LIST_LEVEL)
NATURAL JOIN USER_OUTLINE_LIST_LEVEL);
gives several duplicate columns in the result.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1286
HyperSQL Database Engine (HSQLDB) / Bugs / #1286 JDBC ResultSet deleteRow problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When deleting rows on a JDBC ResultSet any following rs.next() on that result set returns false.
This is contrary to any other JDBC implementations (uploaded test code works on both MySQL and ORACLE). Currently, the ResultSet javadoc for HSQLDB does not state this difference from the JDBC standard explicitly.
(Original Question at Stackoverflow > http://stackoverflow.com/questions/15159170/hsqldb-delete-rows-from-jdbc-resultset\)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1287
HyperSQL Database Engine (HSQLDB) / Bugs / #1287 expression not in aggregate or GROUP BY columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I have defined 2 tables:
CREATE TABLE rules (PK INTEGER PRIMARY KEY, code varchar(255));
CREATE TABLE results (PK INTEGER PRIMARY KEY, rule INTEGER, fulfilled boolean, FOREIGN KEY (rule) references rules(PK));
When I execute following query:
SELECT
rul1.code AS RULE,
res1.fulfilled AS FULFILLED,
100*count(res1.PK)
/
(
SELECT
count( res2.PK )
FROM results res2 JOIN rules rul2 ON res2.rule = rul2.PK
WHERE ( rul2.PK = rul1.PK )
)
AS AMOUNT
FROM results res1 JOIN rules rul1 ON res1.rule = rul1.PK 
GROUP BY rul1.code , res1.fulfilled
I receive error:
java.sql.SQLSyntaxErrorException: expression not in aggregate or GROUP BY columns: (100*( COUNT())/(())
This problem appears only on version 2.2.9, on 2.2.8 it works fine. Also, when I run similar query on mysql it also works correctly.
Maybe this problem is somehow related to changes concerning bug with id 3534936.
Regards,
Adam
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1288
HyperSQL Database Engine (HSQLDB) / Bugs / #1288 HTML export not XHTML compliant for sqltool
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HTML exports/reports of results into a file do not have the correct close tag for TBODY to be XML or XHTML compliant. Specifically, hsqldb-2.2.9\src\org\hsqldb\cmdline\SqlFile.java: 4136 add a forward slash to the closing tag:
condlPrintln("</TBODY></TABLE>", true);
Perhaps as a future enhancement, it would be nice to have the tags used for this export/report externalized so I could pick my own tags for rows and columns.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1289
HyperSQL Database Engine (HSQLDB) / Bugs / #1289 Bug in sub-select in aggregated query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We migrated from version 1.8 to 2.2.9 and experienced bug described below.
Look at the query below and notice NEWRATE sub-select query. This sub-query always returns no data and therefore I get null
as a result of this column. I checked this in latest snapshot and (as of 18-03-2013) and it doesn't work there either.
If I remove SUM(...) and Group by query works fine.
SELECT CT.TYPE AS CONTRACT_TYPE,
TI.START_DIVIDEND_REQUIREMENT,
CT.EXTERNAL_POOL_ID,
TI.FINANCIAL_INSTRUMENT,
CT.SELLER_DEPOSITORY,
CT.TRADING_BOOK,
EV.SETTLEMENT_STATUS,
EV.QUANTITY_CHANGE_FUNCTION,
SUM(EV.AMOUNT * EV.SELLER_DIRECTION) AS AMOUNT,
CT.ORIGIN AS REPO_ORIGIN,
EV.EVENT_DATE AS EVENT_DATE,
EV.VALUE_DATE AS VALUE_DATE,
CT.SUBACCOUNT AS SUBACCOUNT,
(SELECT CE.NEW_RATE
FROM CONTRACT_EVENT CE
WHERE CE.TYPE = 21
AND CE.TRADED_INSTRUMENT = TI.ID
AND CE.IS_REVERSED = 0
AND CE.VALUE_DATE =
(SELECT MAX(EVENT.VALUE_DATE)
FROM CONTRACT_EVENT EVENT
WHERE EVENT.TYPE = CE.TYPE
AND EVENT.TRADED_INSTRUMENT = CE.TRADED_INSTRUMENT
AND EVENT.IS_REVERSED = CE.IS_REVERSED
AND EVENT.VALUE_DATE <= null)) AS NEWRATE
FROM CONTRACT CT,
TRADED_INSTRUMENT TI,
CONTRACT_EVENT EV
WHERE CT.ID = TI.CONTRACT
AND TI.ID = EV.TRADED_INSTRUMENT
AND EV.IS_REVERSED = 0
AND EV.SETTLEMENT_STATUS = 2
AND EV.VALUE_DATE > null
AND EV.VALUE_DATE <= null
AND CT.TYPE = 1
GROUP BY CT.TYPE,
CT.ORIGIN,
TI.START_DIVIDEND_REQUIREMENT,
CT.EXTERNAL_POOL_ID,
CT.SELLER_DEPOSITORY,
EV.SETTLEMENT_STATUS,
EV.QUANTITY_CHANGE_FUNCTION,
TI.FINANCIAL_INSTRUMENT,
EV.OWN_SETTLEMENT_INSTRUCTION,
CT.TRADING_BOOK,
EV.EVENT_DATE,
EV.VALUE_DATE,
CT.SUBACCOUNT,
TI.ID
ORDER BY TI.FINANCIAL_INSTRUMENT
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1290
HyperSQL Database Engine (HSQLDB) / Bugs / #1290 Bug in Transaction manager causing NPE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I discovered bug in newest snapshot (as of 18.03.2013 revision 5210 of trunk. We experience NPE in some cases of LOB usage.
NPE occurs when limit of 32 (or N * 32) is reached for size of rowAction.elementData.
Scenario is given in execution flow and solution patch (tested and works) is attached.
Please apply patch given or fix this bug in some different way in next release.
If we have lob column and we reach limit in element data following scenario occurs.
TransactionManagerCommon.adjustLobUsage(Session session) line 171 adjustLobUsageCount is called
SessionData.adjustLobUsageCount(TableBase table, Object[] data, int adjust) line 370 adjustUsageCount is called
LobManager.adjustUsageCount(Session session, long lobID, int delta) line 1750 execute is called
StatementDMQL.execute(Session session) line 196 getResult is called
StatementDML.getResult(Session session) line 197 executeUpdateStatement is called
StatementDML.executeUpdateStatement(Session session) line 550 updateAction is caled
StatementDML.update(Session session, Table table, RowSetNavigatorDataChange navigator, RowSetNavigator generatedNavigator) line 1053 addDeleteAction is called
Session.addDeleteAction(Table table, PersistentStore store, Row row, int[] colMap) line 429 delete action is added by transaction manager
TransactionManager2PL.addDeleteAction(Session session, Table table, PersistentStore store, Row row, int[] colMap) line 214 delete action is added
HSQLArrayList.add(Object element) line 154 call increaseCapacity because limit is reached
HSQLArrayList.increaseCapacity() line 267 call resize
HSQLArrayList.resize() line 284 array is cleared. In this way we clear array which is referred by line variable in adjustLobUsage method
In next iteration in TransactionManagerCommon.adjustLobUsage(Session session) we experieence Null pointer exception in line 156
if (action.type == RowActionBase.ACTION_NONE) {
Therefore we need to copy array instead of making reference to it.
Regards,
Ognjen Milic
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1291
HyperSQL Database Engine (HSQLDB) / Bugs / #1291 TRUNC function causing java.lang.IllegalArgumentException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello. I'm quite new to databases, so forgive me if I use the wrong words.
I've a simple table with a column TIME_STAMP and a column COUNTER. TIME_STAMP contains a timestamp expressed in milliseconds.
I need to group data by week and I use the following query:
SELECT TRUNC(TIMESTAMP(TIME_STAMP/1000),'WW') AS X, SUM(COUNTER) AS Y FROM STATS.CONNECTION WHERE TIME_STAMP>=? AND TIME_STAMP<=? GROUP BY X;
If I use the following TIME_STAMP range in the WHERE clause:
TIME_STAMP>=1227830400000 AND TIME_STAMP<=1230505200000
where:
1227830400000 -> Fri 28 Nov 2008 00:00:00 GMT
1230505200000 -> Sun 28 Dec 2008 23:00:00 GMT
everything works as expected.
Instead, if I use:
TIME_STAMP>=1227830400000 AND TIME_STAMP<=1230591600000
where:
1227830400000 -> Fri 28 Nov 2008 00:00:00 GMT
1230591600000 -> Mon 29 Dec 2008 23:00:00 GMT
the query causes the following error:
java.lang.IllegalArgumentException: YEAR: 2008 -> 2007 java.lang.IllegalArgumentException: YEAR: 2008 -> 2007
[SQL State: S1000]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1292
HyperSQL Database Engine (HSQLDB) / Bugs / #1292 data exception: string data, right truncation in CASE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
I have two string columns with some 'compressed' data in following format: <tagNum>=<value><delimiter><tagNum>=<value><delimiter><tagNum>=<value><delimiter>...
Use-case is two extract some value by tag number that may by in any of two columns.
Below is an example where time is retrieved from date value.
Here delimiter is char 0x1, not displayed in browser unfortunately. I've attached the same in file just in case.
CREATE TABLE TEST_TABLE (Col_1 varchar(2147483647), Col_2 varchar(2147483647))
INSERT INTO TEST_TABLE VALUES ('23=foo52=20130329 10:48:5167=bar98=fake', '105=baz256=qux')
SELECT
CASE WHEN SUBSTRING('' || Col_1 || Col_2
FROM POSITION('52=' IN '' || Col_1 || Col_2)+4+17 
FOR 1)
='.'
THEN SUBSTRING('' || Col_1 || Col_2
FROM POSITION('52=' IN '' || Col_1 || Col_2)+4+9 
FOR 12)
ELSE SUBSTRING('' || Col_1 || Col_2
FROM POSITION('52=' IN '' || Col_1 || Col_2)+4+9 
FOR 8)
END 
FROM TEST_TABLE
Following exception occurs:
Error code: -3401 
SQL state: 22001 
Stack trace of root exception: 
java.sql.SQLDataException: data exception: string data, right truncation 
at org.hsqldb.jdbc.Util.sqlException(Unknown Source) 
at org.hsqldb.jdbc.Util.sqlException(Unknown Source) 
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source) 
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source) 
I'd not be wondered if such exception occurred when columns of this size (Integer.MAX) are concatenated, even though size of their content is small.
But concatenation is executed successfully.
All these expressions are executed successfully individually, but not in this CASE together.
Other two weird things I noticed playing:
1. If in WHERE right argument in comparison is 0x1, then query is executed successfully
2. If ELSE returns any explicit value instead of SUBSTRING function, query would is executed. I repeat, this SUBSTRING itself is executable successfully.
And two related questions with our permission:
1. Is it planned two support kind of VARCHAR(MAX) format to avoid explicit huge sizes defined?
2. Is it planned to implement POSITION in CLOB?
Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1293
HyperSQL Database Engine (HSQLDB) / Bugs / #1293 NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Example below is pretty senseless, but I cut off all insignificant data and expressions to ease debugging.
CREATE TABLE Table_1 (Col int)
CREATE TABLE Table_2 (Col int)
INSERT INTO Table_1 VALUES (1)
INSERT INTO Table_2 VALUES (1)
SELECT * FROM Table_1
WHERE EXISTS 
( SELECT * FROM 
(SELECT Col FROM Table_2) AS o 
JOIN 
(SELECT Col FROM Table_1) AS t 
ON o.Col=t.Col 
WHERE Table_1.Col=t.Col)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1294
HyperSQL Database Engine (HSQLDB) / Bugs / #1294 Starvation issues with LOCKS transaction mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm seeing starvation problems with LOCKS transaction mode.
Basically, in a single-writer/multiple-readers scenario, there seem to
be many reader threads hanging on the latch.await call, with very
little reason, given the waited sessions committed already (which
should count down the latch).
I had some little time to look at the code and I believe it may be an
issue in the transaction manager resetLocks and resetLatches methods:
waited sets are computed by the former in session order, and then
latches are released/updated in the *same* order; this may cause the
first session (the one who got the locks) to terminate *before* the
dependant sessions have inserted themselves as waiting sessions, hence
causing the waiting sessions (the ones who do not got the locks)
hanging forever on the latch (as the session that should have counted
them down completed already).
Here's attached a patch to "unlock" sessions after all waiting sets have been computed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1295
HyperSQL Database Engine (HSQLDB) / Bugs / #1295 TIMESTAMP and AT LOCAL behavior
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm puzzled by the results I get when using TIMESTAMP and AT LOCAL when it comes to time-zone/daylight saving conversions.
I'm not sure if this is a bug or not. Maybe I'm just doing the wrong assumptions. In case please help me to better understand what is wrong.
In one of the columns of the table I have to query there's a number representing a timestamp. For example: 1228086000
I'm located in Italy, current timezone is GMT+2 (due to daylight saving, otherwise it would be GMT+1)
According to website http://www.epochconverter.com that timestamp corresponds to:
GMT: Sun, 30 Nov 2008 23:00:00 GMT
My time zone: 01 dec 2008 00:00:00 CET GMT+1
It is important to notice that the local time is GMT+1, because that date belongs to the range in which no daylight saving is applied.
Now I tested the following statements with the corresponding results (-->):
(A) TIMESTAMP(1228086000) --> 2008-11-30 23:00:00.0
(B) TIMESTAMP'2008-11-30 23:00:00+0:00' --> 2008-11-30 23:00:00.0
(C) TIMESTAMP('2008-11-30 23:00:00+0:00') --> 2008-11-30 23:00:00.0
(A1) TIMESTAMP(1228086000) AT LOCAL --> 2008-11-30 23:00:00.0
(B1) TIMESTAMP'2008-11-30 23:00:00+0:00' AT LOCAL --> 2008-12-01 01:00:00.0
(C1) TIMESTAMP('2008-11-30 23:00:00+0:00') AT LOCAL --> 2008-11-30 23:00:00.0
When "AT LOCAL" is not used, I get the same result for A,B,C.
I would expect A1,B1,C1 to be different from A,B,C and all look the same, but it is not the case.
As it regards A1 and C1 it seems that "AT LOCAL" has no effect.
B1 is different, but still it is wrong. In fact I would expect B1 to return 2008-12-01 00:00:00.0, because on 1st december there's no daylight saving (GMT+1).
Instead it seems that the timestamp is converted to the current time zone (GMT+2).
Am I doing something wrong? If yes, what should I do to go from that number (1228086000) to the correct local date-time (2008-12-01 00:00:00.0) ?
Thank you.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1296
HyperSQL Database Engine (HSQLDB) / Bugs / #1296 Jdbc Batch Selects doesn't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When executing a batch of select queries, HSQLDB 2.2.9 reports an error:
"java.sql.SQLException: statement does not generate a row count"
The problem can be reproduced with the Junit Test in the attachment, or with the
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1297
HyperSQL Database Engine (HSQLDB) / Bugs / #1297 session leaks on initialize
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using hsqldb in combination with hibernate (3.6.8)
I tried to upgrade from hsqldb 1.8 to 2.2.9 and ran into the problem that I could not change the transaction isolation level initially. This did work after I ran my first transaction. When digging a bit I found out that it seems that when reading the metadatadefaults somehow a stale transaction exists which prevents the change of isolation level. Also when checking the getAllSessions().length it still has a session open. 
When I put the property "hibernate.temp.use_jdbc_metadata_defaults" to false I do not encounter this issue. The change of isolation level works from the beginning and no session is open.
I made a simple test to expose this problem. See code below:
public class Hsqldb2Test {
private static final SessionFactory sessionFactory = buildSessionFactory();
private static SessionFactory buildSessionFactory() {
// disabling the property below fixes the issue
// System.setProperty("hibernate.temp.use_jdbc_metadata_defaults", Boolean.FALSE.toString());
return new AnnotationConfiguration().configure().buildSessionFactory();
}
@Test
public void testNoConnectionShouldBeOpenWhenDBJustStarted() {
HsqlProperties properties = DatabaseURL.parseURL("jdbc:hsqldb:mem:test", true, false);
Database database = DatabaseManager.getDatabase("mem:", "test", properties);
SessionManager sessionManager = database.getSessionManager();
if (sessionManager.getAllSessions().length > 0) {
System.err.println(sessionManager.getAllSessions()[0].toString());
}
assertEquals(0, sessionManager.getAllSessions().length);
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1298
HyperSQL Database Engine (HSQLDB) / Bugs / #1298 NPE in StringConverter.byteArrayToSQLHexString
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On version 2.2.9 with sqllog set to 2, HSQL tries to log an insert statement on a table with a BLOB column. For the logging, it tries to convert the BLOB to a hex string. At the time of logging, the field value is of type BlobDataID. As the BlobType.convertToSQLString calls BlobDataID.getBytes() which returns null, the following call to StringConverter.byteArrayToSQLHexString fails with a NPE.
Table format as created by HSQLDB: create table SomeTable (id bigint not null, version varchar(32) not null, data BLOB not null, primary key (id));
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1299
HyperSQL Database Engine (HSQLDB) / Bugs / #1299 LEFT JOIN (SELECT...)  <-> LEFT JOIN .... non-equivalence
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running the following script:
CREATE TABLE A(id INTEGER);
INSERT INTO A VALUES (1), (2), (3), (4);
CREATE TABLE B(id INTEGER);
INSERT INTO B VALUES (2), (4);
-- Statement 1
SELECT *
FROM A
LEFT JOIN B
ON b.id = a.id
WHERE b.id IS NULL;
-- Statement 2
SELECT *
FROM A
LEFT JOIN (SELECT *
FROM B) B
ON b.id = a.id
WHERE b.id IS NULL;
Statement 1 returns results:
A.id, B.id
2, 2
4, 4
Statement 2 returns results:
A.id, B.id
1, NULL
2, NULL
3, NULL
4, NULL
This is extremely non-intuitive, to say the least.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1300
HyperSQL Database Engine (HSQLDB) / Bugs / #1300 subselect and indexes
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a problem with subselects on same table. Table has indexes.
It works fine in 2.2.8 but in 2.2.9 rusult is a empty list. 
Our initial analysis: For subselect is another plan used. In 2.2.8 'full table scan', in 2.2.9 'indexes' used
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1301
HyperSQL Database Engine (HSQLDB) / Bugs / #1301 Create view based  on selection from another view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Failed to create view which based on selection from another already created view.
If it is based on selection from existent table - there is no any problem, it works well.
Environment:
- HSQLDB 2.2.9
- PostgreSQL compatibility mode enabled
- java 1.6
Script:
CREATE VIEW ab AS (
SELECT 'a' as fst, 'b' as snd
);
CREATE VIEW ab_wrapper AS (
SELECT fst, snd FROM ab
);
Error:
Could not execute statement '
CREATE VIEW ab_wrapper AS (
SELECT fst, snd FROM ab
)'
java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: FST
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1302
HyperSQL Database Engine (HSQLDB) / Bugs / #1302 invalid transaction state: active SQL-transaction in stateme
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB: 2.2.9 (also checked for 2.3.0 but problem still exists)
Auto-Commit mode: false
I have two methods. They have test porpouses.
One method executes a lot of insertions and updates in a few concurrent threads for one table. For such concurrent case I'm using MVCC transactional control mode. So, I set such mode before test will do any action.
As soon as first method finished - second method starts and tries to return transactional mode back to defualt (LOCKS).
But it failed with such error:
java.sql.SQLException: invalid transaction state: active SQL-transaction in statement [SET DATABASE TRANSACTION CONTROL LOCKS]
What I've tried and checked:
- I've checked that all statements were closed, all connections were commited.
- I tried to alter session (<alter current session statement> with ALL argument) to release any transactions, reset current session.
- I forced to commit used connection
- I forced to close connection and create new one
Nothing helped me.
Could you check - is there any issues with switching between different transaction modes or I'm doing something totally wrong?
Is it allowed to change such mode for one connection multiple times?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1303
HyperSQL Database Engine (HSQLDB) / Bugs / #1303 Get a Concurrent exception while close connection
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. Evirement: 
HSQLDB 2.2.9
JVM: Java HotSpot(TM) Client VM (16.3-b04, mixed mode)
Java: version 1.6.0_20-rev, vendor Sun Microsystems Inc.
Java Home: C:\Program Files\Java\jre6
JVM Flags: <none>
2. Problem Description:
Execute the following code, there maybe be a exception like bellowing:
java.util.ConcurrentModificationException
at java.util.HashMap$HashIterator.nextEntry(Unknown Source)
at java.util.HashMap$KeyIterator.next(Unknown Source)
at org.hsqldb.lib.FrameworkLogger.clearLoggers(Unknown Source)
at org.hsqldb.Database.close(Unknown Source)
at org.hsqldb.Database.closeIfLast(Unknown Source)
at org.hsqldb.Session.close(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.close(Unknown Source)
at Test$2.run(Test.java:44)
3. Code:
import java.sql.Connection;
import java.sql.DriverManager;
public class Test {
static volatile long idx = System.currentTimeMillis();
static synchronized long getIdx() {
return ++idx;
}
static public void main(String[] args) throws Exception {
try {
Class.forName("org.hsqldb.jdbc.JDBCDriver" );
Class.forName("org.sqlite.JDBC" );
} catch (Exception e) {
System.err.println("ERROR: failed to load HSQLDB JDBC driver.");
e.printStackTrace();
return;
}
for (int i=0; i<100; ++i) {
new Thread() {
public void run() {
while (true) {
try {
Test.open1();
} catch (Exception e) {
e.printStackTrace();
}
}
}
}.start();
} 
}
static void open1() throws Exception {
String db = "jdbc:hsqldb:file:db/conbug/i_" + getIdx();
final Connection cn = DriverManager.getConnection(db+";shutdown=true", "SA", "");
cn.createStatement().execute("CREATE TABLE tb (a INTEGER)");
cn.createStatement().execute("" +
"INSERT INTO tb (a) VALUES (1)");
cn.commit();
new Thread() {
public void run() {
try {
cn.close();
} catch (Exception e) {
e.printStackTrace();
}
}
}.start(); 
}
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1304
HyperSQL Database Engine (HSQLDB) / Bugs / #1304 Error if JRE1.7 is installed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Doesn't matter which JRE you use to compile the code below, if you run it under JRE1.7 you will get the error.
The code:
//------------------------------------------------------------
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
public class TesteFileChooser{
public static void main(String[] args){ 
try{
//If you comment the code below, no error will occur
DriverManager.getConnection(
"jdbc:hsqldb:file:C:/DB_Test/DB_Test", 
"userAdmin", "pass");
}catch(SQLException e){
JOptionPane.showMessageDialog(null,e.getMessage());
} 
JFileChooser chooser = new JFileChooser("C:"); 
chooser.showOpenDialog(null); 
System.exit(0);
}
}
//------------------------------------------------------------
The test (to reproduce the error):
1 - Compile and run the code below with JRE1.7
2 - It will open a JFileChooser
3 - Click the button to List Details of the files (at top right)
4 - It will show a table of the files and its details
5 - Click on the header of the table
6 - The program will exit abruptly and a file hs_err_pid will be created
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1305
HyperSQL Database Engine (HSQLDB) / Bugs / #1305 Implementation of java.sql.Statement is not conformant
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Your implementation of the interface java.sql.Statement is not conformant to the contract.
The JavaDoc reads:
[quote]
By default, only one ResultSet object per Statement object can be open at the same time. Therefore, if the reading of one ResultSet object is interleaved with the reading of another, each must have been generated by different Statement objects. All execution methods in the Statement interface implicitly close a statment's current ResultSet object if an open one exists
[/quote]
But with HSQLDB you can actually use two ResultSets from the same Statement concurrently without a problem. This almost made me report a bug against the MySQL Connector because there it didn't work, I tried with HSQLDB and it worked and thus thought it is a bug in the MySQL Connector until I found that piece of documentation which actually explains what the problem with my code was and that the MySQL Connector behaves exactly as expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1306
HyperSQL Database Engine (HSQLDB) / Bugs / #1306 Incompatible data type in conversion with EXTRACT function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are getting an error "incompatible data type in conversion" when doing a setTimestamp on a PreparedStatement where the parameter value will be inside an Extract function call. Here is an example of the query and attached are a code sample to reproduce easily the problem:
PreparedStatement stmt = conn.prepareStatement("select EXTRACT(HOUR FROM DATE_TS - ?) from MY_DATES");
Timestamp ts = new Timestamp(new Date().getTime());
stmt.setTimestamp(1, ts);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1307
HyperSQL Database Engine (HSQLDB) / Bugs / #1307 SSL Server Doesn't Work On IBM JVM Implementation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Configuring HSQLDB Server to use SSL results in a java.lang.NoClassDefFoundError: sun.security.ec.ECParameters when running with IBM JVM 1.7.0 on AIX 6.1. I verified the missing class is not available in the IBM implementation. I am able to configure an SSL server using a Sun/Oracle JVM on other operating systems.
I think the problem lies in the constructor for HsqlSocketFactorySecure. It looks like it is adding the SunJSSE security provider if it is not available. When I comment out the block of code, I am able to start an SSL server with what I assume is the IBM JSSE implementation.
You should consider removing the code forcing the SunJSSE provider to be available and/or allow it to use other JVM implementation security providers.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1308
HyperSQL Database Engine (HSQLDB) / Bugs / #1308 3609454 reproduced on 2.3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm still getting NPE on 2.3 in this case https://sourceforge.net/tracker/?func=detail&aid=3609454&group_id=23316&atid=378131
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:418)
at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:247)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1818)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(JDBCStatement.java:181)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1309
HyperSQL Database Engine (HSQLDB) / Bugs / #1309 Datatype Not Resolved for Parameterized Escape Character
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When specifying the escape char following a LIKE condition as a parameter, the data type is never resolved and results in exception "data type cast needed for parameter or null literal" when preparing the statement. This problem surfaced using HSQLDB 2.3 within a Spring-Data/Hibernate environment using JDK 1.7. 
Code:
protected static Predicate createLikePredicate(Path<String> path, String keyword, CriteriaBuilder criteriaBuilder) {
return criteriaBuilder.like(criteriaBuilder.lower(path), keyword, criteriaBuilder.literal('!'));
}
Exception Thrown: 
Caused by: org.hsqldb.HsqlException: data type cast needed for parameter or null literal
at org.hsqldb.error.Error.error(Error.java:136)
at org.hsqldb.error.Error.error(Error.java:106)
at org.hsqldb.ExpressionLike.resolveTypes(ExpressionLike.java:133)
at org.hsqldb.QuerySpecification.resolveExpressionTypes(QuerySpecification.java:933)
at org.hsqldb.QuerySpecification.resolveTypesPartOne(QuerySpecification.java:349)
at org.hsqldb.QueryExpression.resolve(QueryExpression.java:228)
at org.hsqldb.ParserDQL.compileCursorSpecification(ParserDQL.java:6258)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:147)
at org.hsqldb.ParserCommand.compileStatement(ParserCommand.java:64)
at org.hsqldb.Session.compileStatement(Session.java:910)
at org.hsqldb.StatementManager.compile(StatementManager.java:377)
at org.hsqldb.Session.execute(Session.java:1014)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:3886)
... 26 more
Test To Reproduce:
@Test
public void testEscapeCharacterAsParameter() throws SQLException {
try (Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:sample");
Statement statement = connection.createStatement()) {
statement.execute("CREATE TABLE Q (ID INT PRIMARY KEY, NAME VARCHAR(30))");
statement.execute("INSERT INTO Q VALUES(2, 'aaa_aaa')");
String sql = "SELECT COUNT(*) FROM Q WHERE NAME LIKE ? ESCAPE ?";
PreparedStatement preparedStatement = connection.prepareStatement(sql);
preparedStatement.setString(1, "%!_%");
preparedStatement.setString(2, "!");
ResultSet rs = preparedStatement.executeQuery();
assertTrue(rs.next());
assertEquals(1, rs.getInt(1));
statement.execute("DROP TABLE Q");
}
}
Fix:
From what I can tell, it appears that data types are resolved from their associated table columns. In this case, no table column applies to an escape character, so the data type is left null, thus failing the condition in StatementDMQL, line 559. I am able to build a patch with the following addition to ParserDQL following line 4083 that resolves the problem:
escape.dataType = CharacterType.getCharacterType(Types.SQL_CHAR, 1);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1310
Page not found
    - SourceForge.net

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1311
HyperSQL Database Engine (HSQLDB) / Bugs / #1311 JDBCPool not supported in JDBCDataSourceFactory
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From the documentation of the factory method JDBCDataSourceFactory#getObjectInstance(Object, Name, Context, Hashtable), it seems that the JDBCPool is one of the four supported data source class names:
http://hsqldb.org/doc/2.0/apidocs/org/hsqldb/jdbc/JDBCDataSourceFactory.html#getObjectInstance\(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable)
However, the method fails to create a data source instance when a JDBCPool is passed in the first parameter. Example code:
JDBCPool pool = new JDBCPool();
Datasource ds = (DataSource) new JDBCDataSourceFactory().getObjectInstance(pool.getReference(), null, null, null);
Error trace:
java.lang.ClassCastException: org.hsqldb.jdbc.JDBCPool cannot be cast to org.hsqldb.jdbc.JDBCCommonDataSource
at org.hsqldb.jdbc.JDBCDataSourceFactory.getObjectInstance(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1312
HyperSQL Database Engine (HSQLDB) / Bugs / #1312 Count Function not working as expected
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Team,
I am facing an issue with the following query.
SELECT users.user_login_name,count(distinct review_hold_queue.review_hold_queue_id ) FROM users 
JOIN user_role ON (users.user_id = user_role.user_id AND users.login_status_code='ACT') 
JOIN role_permission ON (user_role.role_id = role_permission.role_id) 
JOIN permission ON (role_permission.permission_id = permission.permission_id) 
JOIN review_hold_queue_permission ON ( permission.permission_id = review_hold_queue_permission.permission_id) 
JOIN review_hold_queue ON (review_hold_queue_permission.review_hold_queue_id = review_hold_queue.review_hold_queue_id AND review_hold_queue.review_status_code = 'PND') 
GROUP BY users.user_login_name;
It is throwing following exception."Caused by: org.hsqldb.HsqlException: Column not found: COUNT"
But when I visited the HSQL Documentation, it was mentioned that count was supported. Currently using HSQLDB 2.3.0
Please help me to sort this out.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1313
HyperSQL Database Engine (HSQLDB) / Bugs / #1313 SET MESSAGE_TEXT cannot take expression
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a PSM I am trying to set the message text for exceptions. This works when I use a simple string constant, e.g.
SIGNAL SQLSTATE '12345' SET MESSAGE_TEXT='test1';
'test1' is successfully used as the mesage of the SQLException I receive.
However if I want to elaborate this with specific information on the error using either a local variable or string concatentation, it doesn't work, e.g.
SIGNAL SQLSTATE '12345' SET MESSAGE_TEXT='test1'||'test2'; [unexpected token: || required: ;]
or
SIGNAL SQLSTATE '12345' SET MESSAGE_TEXT=CONCAT('test1', 'test2'); [unexpected token: CONCAT]
There is a similar error when using local variables in the PSM.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1314
HyperSQL Database Engine (HSQLDB) / Bugs / #1314 Pessimitic lock is lost after changing a property using SQL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In our application we're synchronizing threads using pessimistic lock on a row in a revision table 
We have following scenario:
- open transaction (using Spring AOP)
- lock concurrent access using entityManager.find( <entity>.class, name, LockModeType.PESSIMISTIC_WRITE ); (Database interaction is like: select ... for update)
- change property of the HSQLDB using SQL (ex.: SET FILES LOG FALSE in order to switch into bulk mode)
- do business logic, switch to normal mode, close transaction
ERROR:
After changing a property in HSQLDB an another thread (with a another transaction) that is waiting in select for update gets the lock (the first transaction is not closed yet!) From this point both threads are thinking, they have the lock they and are doing their job simultaneously. This leads at the end to an inconsistency in our data.
Environment:
- HSQLDB 2.9.0
- Java
- EclipseLink
- Spring 
- Spring AOP
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1315
HyperSQL Database Engine (HSQLDB) / Bugs / #1315  READ COMMITTED isolation level and table locks
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Insert new data to the table block other transactions on the same table.
This does not happens in MySQL and PostgreSql.
This behavior makes it hard to tests complex application using HSQLDB as in memory database.
See example code in attachment.
Is there a workaround for this compatibility problem
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1316
HyperSQL Database Engine (HSQLDB) / Bugs / #1316 Wrong doc Chapter 8. SQL-Invoked Routines (JAVA static SP)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The SQL signature composed from 2 'string' parameters, while the JAVA signature composed of 3.
This will lead to 'unresolved method' SQL exception if one will try this code as a template for its SP
CREATE PROCEDURE new_customer(firstname VARCHAR(50), lastname VARCHAR(50))
MODIFIES SQL DATA 
LANGUAGE JAVA
DYNAMIC RESULT SETS 1
EXTERNAL NAME 'CLASSPATH:org.hsqldb.test.Test01.newCustomerProcedure'
public static void newCustomerProcedure(String firstn, String lastn, String addr,
ResultSet[] result) throws java.sql.SQLException {
result[0] = someresultset;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1317
HyperSQL Database Engine (HSQLDB) / Bugs / #1317 NullPointerException in getColumnNames if no columns defined
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
V.2.3.0:
If you create a table without any columns, then simple "select * from <table-name>" would throw Null Pointer Exception.
It was working in V.2.2.5
The stack trace:
Caused by: java.lang.NullPointerException
at org.hsqldb.Table.getColumnNames(Unknown Source)
at org.hsqldb.RangeVariable.getColumnNames(Unknown Source)
at org.hsqldb.ParserDQL$CompileContext.getSchemaObjectNames(Unknown Source)
at org.hsqldb.StatementDMQL.setDatabseObjects(Unknown Source)
at org.hsqldb.StatementQuery.<init>(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
... 70 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1318
HyperSQL Database Engine (HSQLDB) / Bugs / #1318 HSQL JDBC driver crashes when calling JAVA SP with Array arg
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue observed under 2.2.9 & 2.3.0
0. Compile the following class and add it to the classpath of the DB (it contains JAVA stored procedure implementation)
public class Foo {
public static void getData(Array logicalIds, String xpathCriteria, ResultSet[] result) throws SQLException {
System.out.println("gggg");
return;
}
}
1. Create simple DB using the following script
create PROCEDURE get_data(IN ids VARCHAR(128) ARRAY, IN query LONGVARCHAR) MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 1 EXTERNAL NAME 'CLASSPATH:Foo.getData';
2. Call the get_data SP
CallableStatement proc = con.prepareCall("{ call get_data(?, ?) }");
Object[] data = new Object[]{"m", "d"};
org.hsqldb.types.Type type = Type.SQL_VARCHAR_DEFAULT;
JDBCArrayBasic array = new JDBCArrayBasic(data, type);
proc.setArray(1, array);
proc.setString(2, "modmdmo");
proc.execute();
The JDBC driver crashes on NPE (the same crash also happen when using the MGMT console and using 'call get_data(ARAAY['m','d'], 'foo')
(IMO, something in the translation to SQL Array type is messed up ...)
Here is the stack trace, can't debug further due to 'Unknown source' :(
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCCallableStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.execute(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1319
HyperSQL Database Engine (HSQLDB) / Bugs / #1319 HSQL JDBC driver crashes when calling JAVA SP with Array arg
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Issue observed under 2.2.9 & 2.3.0
0. Compile the following class and add it to the classpath of the DB (it contains JAVA stored procedure implementation)
public class Foo {
public static void getData(Array logicalIds, String xpathCriteria, ResultSet[] result) throws SQLException {
System.out.println("gggg");
return;
}
}
1. Create simple DB using the following script
create PROCEDURE get_data(IN ids VARCHAR(128) ARRAY, IN query LONGVARCHAR) MODIFIES SQL DATA LANGUAGE JAVA DYNAMIC RESULT SETS 1 EXTERNAL NAME 'CLASSPATH:Foo.getData';
2. Call the get_data SP
CallableStatement proc = con.prepareCall("{ call get_data(?, ?) }");
Object[] data = new Object[]{"m", "d"};
org.hsqldb.types.Type type = Type.SQL_VARCHAR_DEFAULT;
JDBCArrayBasic array = new JDBCArrayBasic(data, type);
proc.setArray(1, array);
proc.setString(2, "modmdmo");
proc.execute();
The JDBC driver crashes on NPE (the same crash also happen when using the MGMT console and using 'call get_data(ARAAY['m','d'], 'foo')
(IMO, something in the translation to SQL Array type is messed up ...)
Here is the stack trace, can't debug further due to 'Unknown source' :(
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCCallableStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.execute(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1320
HyperSQL Database Engine (HSQLDB) / Bugs / #1320 JDBCPreparedStatement.setParameter may throw HsqlException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The JDBCPreparedStatement.setParameter() method may throw HsqlException for columns of type VARCHAR if the parameter value is not convertible according to the definition of CharacterType.convertToDefaultType().
It appears the intention of JDBCPreparedStatement.setParameter() is to catch any instances of HsqlException that may be thrown and re-throw them as SQLException. However, the case block for VARCHAR columns (line 4264 in 2.3.0) does not handle any HsqlException that may be thrown by Type.convertToDefaultType(). Thus, the HsqlException is propagated to client code.
For example, calling PreparedStatement.setObject() on a VARCHAR column with an inconvertible value results in the following exception:
org.hsqldb.HsqlException: incompatible data type in conversion
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.types.CharacterType.convertToDefaultType(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.setParameter(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.setObject(Unknown Source)
... more ...
Performing a similar call on a non-VARCHAR column results in an SQLException being thrown, which I believe is the expected behavior.
The attached patch (against 2.3.0) should fix the problem, although I haven't tested it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1321
HyperSQL Database Engine (HSQLDB) / Bugs / #1321 No Result for SELECT with Comparison > and DESC order
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This select statement will produce no result set, which is wrong:
select a.Mandant_Nr , a.Nr from AAA a WHERE a.Mandant_Nr = 1 and a.Nr > -1 order by a.Mandant_Nr DESC, a.Nr DESC
Similar statesment work correctly:
select a.Mandant_Nr , a.Nr from AAA a WHERE a.Mandant_Nr = 1 and a.Nr <> -1 order by a.Mandant_Nr DESC, a.Nr DESC
or
select a.Mandant_Nr , a.Nr from AAA a WHERE a.Mandant_Nr = 1 and a.Nr > -1 order by a.Mandant_Nr DESC, a.Nr
What is the problem?
I'm using hsqldb-2.3.0.jar.
Here is my table AAA:
CREATE TABLE IF NOT EXISTS AAA (
Mandant_Nr int NOT NULL,
Nr int NOT NULL,
Datum_Von date NOT NULL,
Datum_Bis date NOT NULL,
Art int NOT NULL,
Angelegt_Von varchar(20) COLLATE SQL_TEXT_UCC DEFAULT NULL,
Angelegt_Am datetime DEFAULT NULL,
Geaendert_Von varchar(20) COLLATE SQL_TEXT_UCC DEFAULT NULL,
Geaendert_Am datetime DEFAULT NULL,
PRIMARY KEY (Mandant_Nr,Nr)
);
The data is attached as csv-file.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1322
HyperSQL Database Engine (HSQLDB) / Bugs / #1322 Server#handleConnection still called after #shutdown
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After shutting down an instance of org.hsqldb.server.Server and creating a new one with the same connection settings, sometimes the old instance still tries to handle jdbc calls (and of course fails to do so). The problems does not occur always but only in rare case and on some of our test machines.
Version is 2.2.9
I'd guess the cause of the problem is that the change of field socket to null (via method #releaseServerSocket) is not visible in the thread that executes the #run method and the while loop condition "while (socket != null)" remains true. This is because there's no synchronization when accessing the value of field socket and field socket is not marked as volatile. I'd think the field should be made volatile.
Log output (adapted to output System.identityHashCode of the server instance as well) attached. 
You can see that the first instance 428822417 gets started (at 01:22:02,483), then it gets stopped (at 01:22:04,157) with server.shutdownWithCatalogs(Database.CLOSEMODE_NORMAL)
A new instance 2008761310 gets started immediately afterwards (at 01:22:04,162) on the same thread (main).
When used via JDBC (again from same thread 'main') the #handleConnection method of the old instance 428822417 is called - and of course leads to an error because the database has been closed (database alias=testpersistence_alias does not exist)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1323
HyperSQL Database Engine (HSQLDB) / Bugs / #1323 Quoted CSV Import Merges Fields
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is an off by one error in SqlFile.preprocessCsvQuoting that causes it to lose commas and merge fields under certain circumstances. The attached SQL and CSV files demonstrate the issue, and the Java file fixes it.
Specifically, if two quoted fields are separated by a comma with no surrounding whitespace, that comma disappears. That situation results in a segment of length 1 containing just the comma, but the condition tests for "segLen > 1" instead of "segLen >= 1".
Example:
"A1","A2"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1324
HyperSQL Database Engine (HSQLDB) / Bugs / #1324 call database_version() returns wrong version
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
call database_version() still returns "2.3.0" - it should return "2.3.1"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1325
HyperSQL Database Engine (HSQLDB) / Bugs / #1325 driver hang after OutOfMeoryError
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It look like that the hsql need to copy all data of a row in the memory multiple times. 
I have 26829272 bytes free before executeUpdate(). I want save a InputStream with 9170069. I think 26 MB should enough memory to save a single row with 9 MB,
But the fatal error is that it hang after the OutOfMemoryError occur. executeUpdate() never return. See the both stacktraces for details
Blocking Stacktrace:
Thread [main] (Suspended) 
owns: Session (id=62) 
owns: JDBCPreparedStatement (id=63)
Unsafe.park(boolean, long) line: not available [native method]
LockSupport.park(Object) line: not available
CountDownLatch$Sync(AbstractQueuedSynchronizer).parkAndCheckInterrupt() line: not available 
CountDownLatch$Sync(AbstractQueuedSynchronizer).doAcquireSharedInterruptibly(int) line: not available 
CountDownLatch$Sync(AbstractQueuedSynchronizer).acquireSharedInterruptibly(int) line: not available 
CountDownLatch.await() line: not available 
CountUpDownLatch.await() line: 58 
Session.executeCompiledStatement(Statement, Object[], int) line: 1319 
Session.execute(Result) line: 978 
JDBCPreparedStatement.fetchResult() line: 4649 
JDBCPreparedStatement.executeUpdate() line: 310 
java.lang.OutOfMemoryError: Java heap space
at org.hsqldb.lib.HsqlByteArrayOutputStream.ensureRoom(HsqlByteArrayOutputStream.java:381)
at org.hsqldb.rowio.RowOutputTextLog.writeBinary(RowOutputTextLog.java:129)
at org.hsqldb.rowio.RowOutputBase.writeData(RowOutputBase.java:289)
at org.hsqldb.rowio.RowOutputTextLog.writeData(RowOutputTextLog.java:1)
at org.hsqldb.rowio.RowOutputBase.writeData(RowOutputBase.java:185)
at org.hsqldb.rowio.RowOutputTextLog.writeData(RowOutputTextLog.java:1)
at org.hsqldb.rowio.RowOutputBase.writeData(RowOutputBase.java:159)
at org.hsqldb.rowio.RowOutputTextLog.writeData(RowOutputTextLog.java:1)
at org.hsqldb.scriptio.ScriptWriterText.writeRow(ScriptWriterText.java:212)
at org.hsqldb.scriptio.ScriptWriterBase.writeExistingData(ScriptWriterBase.java:345)
at org.hsqldb.scriptio.ScriptWriterBase.writeAll(ScriptWriterBase.java:259)
at org.hsqldb.persist.Log.writeScript(Log.java:751)
at org.hsqldb.persist.Log.checkpointClose(Log.java:420)
at org.hsqldb.persist.Log.checkpoint(Log.java:363)
at org.hsqldb.persist.Log.checkpoint(Log.java:400)
at org.hsqldb.persist.Logger.checkpointInternal(Logger.java:1042)
at org.hsqldb.persist.Logger.checkpoint(Logger.java:1032)
at org.hsqldb.StatementCommand.getResult(StatementCommand.java:296)
at org.hsqldb.StatementCommand.execute(StatementCommand.java:217)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1347)
at org.hsqldb.Database$CheckpointRunner.run(Database.java:841)
at org.hsqldb.lib.HsqlTimer$TaskRunner.run(HsqlTimer.java:644)
at java.lang.Thread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1326
HyperSQL Database Engine (HSQLDB) / Bugs / #1326 Can`t use sysdate as default column value
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I tried to create table:
CREATE TABLE EMP 
(EMPNO NUMBER(4) NOT NULL, 
ENAME VARCHAR2(10),
JOB VARCHAR2(9),
MGR NUMBER(4),
HIREDATE DATE DEFAULT sysdate,
SAL NUMBER(7, 2),
COMM NUMBER(7, 2) DEFAULT 0,
DEPTNO NUMBER(2)); 
It was created successfully, but then, after reconnect to database was throwed exception:
Exception in thread "main" java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(Unknown Source)
at HsqlDb.main(HsqlDb.java:56)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 3 more
Caused by: java.lang.NullPointerException
at org.hsqldb.FunctionCustom.getSQLSimple(Unknown Source)
at org.hsqldb.FunctionCustom.getSQL(Unknown Source)
at org.hsqldb.ColumnSchema.getDefaultSQL(Unknown Source)
at org.hsqldb.dbinfo.DatabaseInformationFull.COLUMNS(Unknown Source)
at org.hsqldb.dbinfo.DatabaseInformationFull.generateTable(Unknown Source)
at org.hsqldb.dbinfo.DatabaseInformationMain.setStore(Unknown Source)
at org.hsqldb.persist.PersistentStoreCollectionSession.getStore(Unknown Source)
at org.hsqldb.Table.getRowStore(Unknown Source)
at org.hsqldb.RangeVariableResolver.reorderRanges(Unknown Source)
at org.hsqldb.RangeVariableResolver.reorder(Unknown Source)
at org.hsqldb.RangeVariableResolver.processConditions(Unknown Source)
at org.hsqldb.QuerySpecification.setRangeVariableConditions(Unknown Source)
at org.hsqldb.QuerySpecification.resolveTypesPartThree(Unknown Source)
at org.hsqldb.QueryExpression.resolve(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
... 5 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1327
HyperSQL Database Engine (HSQLDB) / Bugs / #1327 Cannot use table dual in stored procedure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I create a database like this:
SET DATABASE SQL SYNTAX ORA TRUE;
CREATE SEQUENCE test_id_seq;
CREATE TABLE procedure_test (
id DECIMAL(13) NOT NULL,
name VARCHAR(50)
);
CREATE PROCEDURE test_procedure(IN p_name VARCHAR(50))
MODIFIES SQL DATA
BEGIN ATOMIC
INSERT INTO procedure_test (
id,
name
)
SELECT
test_id_seq.NextVal,
p_name
FROM dual;
END
.;
In the resulting script, the procedure is created as follows:
CREATE PROCEDURE PUBLIC.TEST_PROCEDURE(IN P_NAME VARCHAR(50)) SPECIFIC TEST_PROCEDURE_10096 LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA NEW SAVEPOINT LEVEL BEGIN ATOMIC INSERT INTO PUBLIC.PROCEDURE_TEST(ID,NAME)SELECT TEST_ID_SEQ.NEXTVAL,P_NAME FROM SYSTEM_SCHEMA.DUAL;END
Trying to connect to the database complaints about invalid schema SYSTEM_SCHEMA:
Caused by: org.hsqldb.HsqlException: invalid schema name: SYSTEM_SCHEMA
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.SchemaManager.getSchemaHsqlName(Unknown Source)
at org.hsqldb.SchemaManager.getSchemaName(Unknown Source)
at org.hsqldb.Session.getSchemaName(Unknown Source)
at org.hsqldb.SchemaManager.getTable(Unknown Source)
at org.hsqldb.ParserDQL.readTableName(Unknown Source)
at org.hsqldb.ParserDQL.readTableOrSubquery(Unknown Source)
at org.hsqldb.ParserDQL.XreadTableReference(Unknown Source)
at org.hsqldb.ParserDQL.XreadFromClause(Unknown Source)
at org.hsqldb.ParserDQL.XreadTableExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
at org.hsqldb.ParserDML.compileInsertStatement(Unknown Source)
at org.hsqldb.ParserRoutine.compileSQLProcedureStatementOrNull(Unknown Source)
at org.hsqldb.ParserRoutine.compileSQLProcedureStatementList(Unknown Source)
at org.hsqldb.ParserRoutine.compileCompoundStatement(Unknown Source)
at org.hsqldb.ParserRoutine.compileSQLProcedureStatementOrNull(Unknown Source)
at org.hsqldb.ParserRoutine.readRoutineBody(Unknown Source)
at org.hsqldb.ParserRoutine.compileCreateProcedureOrFunction(Unknown Source)
at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
... 20 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1328
HyperSQL Database Engine (HSQLDB) / Bugs / #1328 Oracle - Limiting rows with "order-by" and "where ROWNUM"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is with regard to oracle compatibility. Limiting the number of rows with "order by" and "where ROWNUM" is returning wrong result set.
sql> select * from (select * from tester order by name ) where ROWNUM < 4;
ID NAME
-- ---------
1 America
2 Venezuela
3 Africa
On Oracle, the result set is
ID NAME
---------- --------------------------------
3 Africa
1 America
11 Borneo
sql> select * from (select a.*, ROWNUM rnum from (select * from tester order by name) a where ROWNUM <= 6) where rnum > 2;
ID NAME RNUM
-- --------- ----
5 Canada 3
6 Denmark 4
4 Greece 5
2 Venezuela 6
On Oracle, result set is
ID NAME RNUM
---------- -------------------------------- ----------
11 Borneo 3
5 Canada 4
6 Denmark 5
7 Egypt 6
This is on Ubuntu 12.04 with Oracle JDK 1.7. Attached is the sql file with the DDL and DML statements required to create the test table.
- Sridhar
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1329
HyperSQL Database Engine (HSQLDB) / Bugs / #1329 Rollback issue v2.3.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, have some strange behaviour after upgrading to v2.3.0.
When I insert a new record, then rollback and try to select it, it is gone as expected. But after shutdown and restart it is inserted into the table.
This happens with MVCC and cached tables. Please see the attached example code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1330
HyperSQL Database Engine (HSQLDB) / Bugs / #1330 Process hangs at 100% CPU usage in server mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
We are using HSQLDB as the primary database in server mode for an open source project (a RSS feed reader, here https://github.com/sismics/reader\).
Sometimes, when no heavy task is performed on the database, the hsqldb-server process hangs and it takes 100% CPU. I've attached a jstack if it can helps you.
The database is quite big, around 500Mo. You can find the structure here : https://github.com/sismics/reader/blob/master/reader-core/src/main/resources/db/update/dbupdate-000-0.sql
Thank you for this great project :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1331
HyperSQL Database Engine (HSQLDB) / Bugs / #1331 trigger execution problem after dropping column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
i found this problem when trying to test my DAO implementation.
Example
We have a create table statement in the first script:
CREATE TABLE TEST (
PK NUMERIC(12) NOT NULL,
AAA VARCHAR(50),
BBB VARCHAR(50),
CCC VARCHAR(50),
MOD_TIME TIMESTAMP
);
In the second script we create trigger to auto set modification time column:
CREATE TRIGGER TEST_BI
BEFORE INSERT ON TEST
REFERENCING NEW AS N 
FOR EACH ROW 
SET MOD_TIME = CURRENT TIMESTAMP
/
In the last script we have a drop column statement:
ALTER TABLE TEST DROP COLUMN CCC;
Ita apears, that droping a column doesn't infulence on trigger definition (trigger sees 5 columns, insert statement sees 4 columns).
After changing order of the second and third script it works just fine.
Here's java stack:
Caused by: org.hsqldb.HsqlException: java.lang.ArrayIndexOutOfBoundsException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementSet.execute(Unknown Source)
at org.hsqldb.TriggerDefSQL.pushPair(Unknown Source)
at org.hsqldb.Table.fireTriggers(Unknown Source)
at org.hsqldb.StatementDML.insertSingleRow(Unknown Source)
at org.hsqldb.StatementInsert.getResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 46 more
Caused by: java.lang.ArrayIndexOutOfBoundsException
at java.lang.System.arraycopy(Native Method)
at org.hsqldb.StatementDML.getUpdatedData(Unknown Source)
at org.hsqldb.StatementSet.executeTriggerSetStatement(Unknown Source)
at org.hsqldb.StatementSet.getResult(Unknown Source)
... 54 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1332
HyperSQL Database Engine (HSQLDB) / Bugs / #1332 DATEADD does not work as expected (documented)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB version 2.3.1
DATEADD( 'hour', 1, CURRENT_DATE ) // works fine
DATEADD( 'hour', 1, CURRENT_TIME) // is not working -> org.hsqldb.HsqlException: incompatible data type in conversion
DATE_ADD works with both, in documentation there is the same type as parameter.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1333
HyperSQL Database Engine (HSQLDB) / Bugs / #1333 ArrayIndexOutOfBoundsException [HSQLDB 2.3.1]
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Exception:
java.lang.ArrayIndexOutOfBoundsException: 4 java.lang.ArrayIndexOutOfBoundsException: 4 / Error Code: -458 / State: S1000
Queries:
CREATE TABLE test_table(column BIT(256) NOT NULL) 
INSERT INTO test_table VALUES (B'1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'))
Details:
https://sourceforge.net/projects/hsqldb/forums/forum/73674/topic/8907755
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1334
HyperSQL Database Engine (HSQLDB) / Bugs / #1334 Use NULL as DEFAULT for INSERTs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Assume the following table:
CREATE TABLE t_identity (
id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1),
val int
);
When I use the following syntax:
INSERT INTO t_identity DEFAULT VALUES;
I usually get the following error message:
DEFAULT keyword cannot be used as column has no DEFAULT
The same happens when I use the DEFAULT keyword for single columns that do not declare a DEFAULT in their DDL. E.g
INSERT INTO t_identity (val) VALUES (DEFAULT);
Pretty much all other databases use NULL as a DEFAULT, when no explicit DEFAULT is defined. I'd say that this is correct according to the SQL-92 standard:
http://www.andrew.cmu.edu/user/shadow/sql/sql1992.txt
See 11.5 <default clause>
2) The default value of a column is
Case:
a) If the column descriptor of a column includes a default value
derived from a <default option>, then the value of that <de-
fault option>.
b) If the column descriptor includes a domain name that iden-
tifies a domain descriptor that includes a default value
derived from a <default option>, then the value of that <de-
fault option>.
c) Otherwise, the null value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1335
HyperSQL Database Engine (HSQLDB) / Bugs / #1335 DBMS ignores redefining of already defined alias.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sample:
--------------
create table test (id int, parent int);
insert into test values (0, 0);
insert into test values (1, 0);
insert into test values (2, 0);
select * 
from test t --define alias 't'
join test t on t.id = t.parent --redefine alias 't'
--------------
We can expected errors in above query, but the db engine successfully fulfills the request.
hsqldb.jar version 2.3.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1336
HyperSQL Database Engine (HSQLDB) / Bugs / #1336 Excessive memory use with "Delete from table" & "Truncate table"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have recently upgraded hsql db from 1.8 to 2.3.1 and started having memory heap space issue. 
Before the upgrade max 500 mb memory needed and there was enough heap space available during the entire test.
After the upgrade 6GB space was not enough so I tried it with every version from 2.0 to 2.3.1 and I had the same problem. 
Now I am dropping tables and recreating the database fresh from scratch and the issue disappeared. 
Using "Delete from table" also "Truncate table" cause the memory issue hsql cannot clear the memory. I can provide more info if needed. 
Tested with 
Hibernate 3 and 4
Dbunit 4.2.7 and 4.2.9
Spring 3.2.4
Struts 1.2.9
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1337
HyperSQL Database Engine (HSQLDB) / Bugs / #1337 "Duplicate column name in derived table" for non-derived, top-level tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query raises a "duplicate column name in derived table" error:
select table_name, * from information_schema.tables

But there is no derived table, and pretty much every database I know of allows for such a query. For example, PostgreSQL:
http://sqlfiddle.com/#!15/d41d8/1115
This query will produce the same error:
select table_name AS x, * from information_schema.tables

These queries, however, are a workaround for the problem:
select table_name, tables.* from information_schema.tables
select table_name, t.* from information_schema.tables t
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1338
HyperSQL Database Engine (HSQLDB) / Bugs / #1338 write_delay can lead to data-loss
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe I have traced a problem in HSQLDB v2.3.1 which is arguably
either poor documentation or a bug -- either way, I only discovered
what was happening by looking at the source-code.
While using v1.2.8 of HikariCP with HSQLDB, I noticed my application
(which makes changes to a database and exits quickly) was suffering
from data-loss: information added as committed transactions were
missing on subsequent runs.
The problem seems to be a combination of two things: v1.2.8 of
HikariCP has a 'shutdown' that does nothing and that HSQLDB, by
default, relies on an orderly shutdown to guarantee data integrity.
I should point out that newer versions of HikariCP shutdown method
close all open connections, which (along with 'shutdown=true' in the
jdbc connection string) eliminates the data-loss problem.
The HSQLDB documentation for WRITE DELAY states:
If the property is true, the default WRITE DELAY property of the
database is used, which is 500 milliseconds. If the property is
false, the WRITE DELAY is set to 0 seconds. The log is written to
file regardless of this property. The property controls the fsync
that forces the written log to be persisted to disk. The SQL
command for this property allows more precise control over the
property.

This strongly suggests that data is written into the OS' file-system
cache (VFS-layer, for Linux) after a COMMIT, and write_delay controls
the periodic calls to fsync. Calling fsync is meant to guard against
certain hardware failures (e.g., power-cut), if the data has been
written to the VFS layer then it will be written to disk after the
application closes (with extremely high likelihood, if not actually
guaranteed), so committed transactions are safe from software
failures.
In practise, org.hsqldb.scriptio.ScriptWriterBase shows that output is
written through a BufferedOutputStream. The forceSync method first
flushes this buffer prior to calling fsync(). This behaviour is not
at all described above.
There are two issues here:


It seems that HSQLDB requires applications to close any open
Connection (and, perhaps shutdown the database) before
guaranteeing transactions have been processed. This doesn't
appear to be mentioned in HSQLDB documentation and IMHO isn't part
of the JDBC spec.


The documentation for WRITE DELAY is misleading: it suggests that
it is limited to delaying calls to fsync and neglects to mention
that there is an internal buffer that is also flushed.


I cannot say whether the performance benefits outweighs the risks
associated with buffering the output in Java; I suspect this is a
decision that can only be made on an application-by-application bases.
If I may, I would suggest two actions:
a. update the WRITE DELAY documentation to better reflect current
behaviour,
b. consider adding an option that removes the write buffer so that
HSQLDB can write data on commit but continue to support delayed
calling fsync.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1339
HyperSQL Database Engine (HSQLDB) / Bugs / #1339 Silent corruption 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am running a simple HSqlDB (v. 2.3.1) application on top of ext3 file system (write-back mode). My application just inserts 100 rows into a memory table. I see that HSqlDB writes the data to a log file before checkpointing the data to the actual script file. In ext3 write back mode, a system crash while writing to the log can result in a state where some part of the log file contains garbage data. In some cases, when the database is reopened from such a crashed state, HSqlDb returns garbage data to the application without detecting the corruption. Please note that this does not happen always - i.e., from most crashed states, HSqlDb can realize a corruption and recover to the old state of the database.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1340
Page not found
    - SourceForge.net

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1341
HyperSQL Database Engine (HSQLDB) / Bugs / #1341 Regression in 2.3.2: Trigger introduces false object dependencies
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following leads to an error:
CREATE TABLE t1 (a bigint, b bigint);
CREATE TABLE t2 (c bigint);
CREATE TRIGGER t AFTER INSERT ON t2 REFERENCING NEW AS new FOR EACH ROW UPDATE t1 SET b=b+1;
ALTER TABLE t1 ALTER COLUMN a RENAME TO d;
I would expect the rename to succeed since the trigger does not refer to the column being renamed and is still valid afterwards. Yet HSQLDB 2.3.2 fails with:
SEVERE SQL Error at '/tmp/sql' line 4:
"ALTER TABLE t1 ALTER COLUMN a RENAME TO d"
dependent objects exist: PUBLIC.T in statement [ALTER TABLE t1 ALTER COLUMN a RENAME TO d]
SEVERE Rolling back SQL transaction.
org.hsqldb.cmdline.SqlTool$SqlToolException
The problem does not exist in version 2.3.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1342
HyperSQL Database Engine (HSQLDB) / Bugs / #1342 unique index behavior change in 2.3.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
2-column UNIQUE constraint



Column 1
Column 2




1
null


1
null



creates unexpected "integrity constraint violation: unique constraint or index violation"
the behavior was different in hsqldb version 2.3.1. (was working fine)
As well in PostgreSql and MySQL
It is not exactly specified here http://hsqldb.org/doc/guide/ch02.html 
"Example 2.1. Column values which satisfy a 2-column UNIQUE constraint"
But I think this breaks the SQL standards
Test:
CREATE TABLE test(id bigint generated by default as identity (start with 1), tenant varchar(80), name varchar(64), CONSTRAINT TEST_PK PRIMARY KEY (id));
CREATE UNIQUE INDEX test_idx ON test (tenant, name);
INSERT INTO test (tenant, name) VALUES ('1', null);
INSERT INTO test (tenant, name) VALUES ('1', null) -> error
1 Attachments


UniqueIndex.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1343
HyperSQL Database Engine (HSQLDB) / Bugs / #1343 Recursive query regression in 2.3.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The example from the docs for recursive queries (with a slight modification) causes an infinite loop in 2.3.2. The same query works fine in 2.3.1. The key difference from the documentation is using "UNION ALL" instead of just "UNION".
CREATE TABLE pptree (pid INT, id INT);
INSERT INTO pptree VALUES (NULL, 1) ,(1,2), (1,3),(2,4),(4,5),(3,6),(3,7);
WITH RECURSIVE tree (gen, par, child) AS (
VALUES(1, CAST(null as int), 1)
UNION ALL
SELECT gen + 1, pid, id FROM pptree, tree WHERE pid = child
) SELECT * FROM tree;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1344
HyperSQL Database Engine (HSQLDB) / Bugs / #1344 NullPointerException org.hsqldb.index.IndexAVL.delete
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have seen a null pointer in the IndexAVL.delete method which occurs infrequently but with different types of SQL (always update or delete SQL). We cannot replicate it. At the time of running the SQL there may be multiple threads performing reads or writes on the DB. We also have some large varchar fields, in this case one that was abount 380,000 characters long.
Exception:
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.executeUpdate(Unknown Source)
at my.package.MyClass.myMethod(Unknown Source)
at java.lang.Thread.run(Thread.java:722)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 10 more
Caused by: java.lang.NullPointerException
at org.hsqldb.index.IndexAVL.delete(Unknown Source)
at org.hsqldb.index.IndexAVL.delete(Unknown Source)
at org.hsqldb.persist.RowStoreAVL.delete(Unknown Source)
at org.hsqldb.TransactionManager2PL.addDeleteAction(Unknown Source)
at org.hsqldb.Session.addDeleteAction(Unknown Source)
at org.hsqldb.StatementDML.update(Unknown Source)
at org.hsqldb.StatementDML.executeUpdateStatement(Unknown Source)
at org.hsqldb.StatementDML.getResult(Unknown Source)
... 14 more
SQL the caused the exception:
UPDATE MYTABLE SET FlagCol = true, TimestampCol1 = '2014-04-17 12:01:00.000', TimestampCol2 = '2014-04-17 12:01:00.000', SmallVarcharCol = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', LargeVarcharCol = '[Approximately 380,000 characters]' WHERE IdentifierCol = 'XXXXXXXXXXXXXXXX'
SQL to setup the table for the example above:
CREATE CACHED TABLE MYTABLE (IdentifierCol VARCHAR_IGNORECASE(255) NOT NULL, FlagCol BOOLEAN NOT NULL, TimestampCol1 TIMESTAMP NOT NULL, TimestampCol2 TIMESTAMP NOT NULL, SmallVarcharCol VARCHAR_IGNORECASE(1000) NOT NULL, LargeVarcharCol LONGVARCHAR NOT NULL)
CREATE UNIQUE INDEX MYTABLE_IdentifierCol ON MYTABLE (IdentifierCol ASC)
CREATE INDEX MYTABLE_SmallVarcharCol ON MYTABLE (SmallVarcharCol ASC)
INSERT INTO MYTABLE VALUES ('XXXXXXXXXXXXXXXX', false, '2014-04-17 12:00:00.000', '2014-04-17 12:00:00.000', 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', '[Approximately 380,000 characters]')
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1345
HyperSQL Database Engine (HSQLDB) / Bugs / #1345 GROUP BY does not support parameters
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Assume table t as
CREATE TABLE t (a INT)

Then you can do: 
SELECT a < 5, COUNT(*)
FROM t
GROUP BY a < 5

What does not work with HSQLDB that however does work with for example MySQL is using a prepared statement like
SELECT a < ?, COUNT(*)
FROM t
GROUP BY a < ?

where both parameters use the same value.
That will produce org.hsqldb.HsqlException "expression not in aggregate or GROUP BY columns"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1346
Page not found
    - SourceForge.net

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1347
HyperSQL Database Engine (HSQLDB) / Bugs / #1347 HSQLDB server mode limited to 2GB ResultSets
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When working with large data sets I noticed that if the ResultSet returned was over a certain amount of rows the server would go into an infinite loop and never return the ResultSet. Upon further investigation the problem was tracked down to the HsqlByteArrayOutputStream class. In server mode HSQLDB creates the ResultSet and passes it over the network as a large byte array. Unfortunately the code in HsqlByteArrayOutputStream uses System.arraycopy() to resize arrays which is limited to using int for the length of the array. The code that ends up getting into an infinite loop is:
public void ensureRoom(int extra) {

    int newcount = count + extra;
    int newsize  = buffer.length;

    if (newcount > newsize) {
        while (newcount > newsize) {
            newsize *= 2;
        }

        byte[] newbuf = new byte[newsize];

        System.arraycopy(buffer, 0, newbuf, 0, count);

        buffer = newbuf;
    }
}

In the while loop above newsize overflows and eventually went to 0 causing an infinite loop in the while loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1348
Page not found
    - SourceForge.net

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1349
HyperSQL Database Engine (HSQLDB) / Bugs / #1349 HSQLDB hangs forever on a dead lock case
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL version 2.3.2.
Get a table with two rows and a primary key:
create table odd_table(column1 integer not null primary key, column2 integer);
insert into odd_table values (1,111),(2,222);
commit;
Then, in two connections: 
query 1 in connection A: update odd_table set column2 = 555 where column1 = 1;
query 2 in connection B: update odd_table set column2 = 666 where column1 = 2;
query 3 in connection B: update odd_table set column2 = 777 where column1 = 1;
query 4 in connection A: update odd_table set column2 = 888 where column1 = 2;
I expect an exception "deadlock" on query 4.
However, HSQL hangs forever yet on query 2 :(
Is there a workaround? How can I detect a dead lock?
My application can work with several different RDBMS, and with other systems I can detect a deadlock, roll the current transaction back and re-try my queries a bit later.
With HSQL DB in this case my application hangs forever :(
Thanks in advance!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1350
HyperSQL Database Engine (HSQLDB) / Bugs / #1350 Servlet mode with WEB-INF=true does only work with Tomcat prior to Version 8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi!
Using hsqldb-svn trunk.
I'm using HSQLDB's Servlet mode in a JavaEE Webapp with Tomcat 8.0.3.0 and hsqldb.server.use_web-inf_path=true.
The problem with this is, Tomcat 8's output of getServletContext().getRealPath("/") is without a trailing slash (/), so the path where our database is saved is not blabla-1.0-SNAPSHOT/WEB-INF/database/db but instead blabla-1.0-SNAPSHOTWEB-INF/database/db ... 
With any version prior to Tomcat 8 it runs flawless, but since Tomcat 8 it doesn't. Also other application servers like WebSphere do handle this like Tomcat 8, as this is a correct behavior (see http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html#getRealPath(java.lang.String) ). 
It might be better to change this according to the API.
I attached a working (but probably dirty) patch.
Thanks in advance!
1 Attachments


org.hsqldb.server.Servlet_missingLeadingSlash.patch
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1351
HyperSQL Database Engine (HSQLDB) / Bugs / #1351 Foreign Key constraint issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Foreign key constraint should not be applied if parent table don't have ref data but HSQLDB is applying the constraint and didn't throw any exception. Below is the sample script.
Create table TestPV (ID INT PRIMARY KEY, Name Varchar(50))
Create table TestPVDetail (DetailID INT PRIMARY KEY, TestPVID INT)
INSERT INTO TestPV(ID, Name) VALUES (100, 'Tahir')
INSERT INTO TestPVDetail(DetailID, TestPVID) VALUES (1, 1)
ALTER TABLE TestPVDetail ADD FOREIGN KEY (TestPVID) REFERENCES TestPV(ID) 
Thanks,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1352
HyperSQL Database Engine (HSQLDB) / Bugs / #1352 JDBC compliance SOURCE_DATA_TYPE in getColumns() result set
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In v2.3.2 the 'getColumns' metadata method documented here:
http://hsqldb.org/doc/2.0/apidocs/org/hsqldb/jdbc/JDBCDatabaseMetaData.html#getColumns%28java.lang.String,%20java.lang.String,%20java.lang.String,%20java.lang.String%29
returns a string in the penultimate column SOURCE_DATA_TYPE instead of a short, as documented both in the HSQLDB spec, and the JDBC interface it inherits from. Currently it returns the literal name of the data type.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1353
HyperSQL Database Engine (HSQLDB) / Bugs / #1353 HSQLDB not working with some IBM Codepages, HSQLDB is not binary compatible between different plattforms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Because in the Class ScriptWriterText the platform (System.getProperty("line.separator") specific line separator is taken, the files are not portable and the database don't start anymore.
The real problem at the end is, that the LineReader Class only detect 0x0A and 0x0D.
On IBM Code Page 500 for example, the line separator is 0x0F.
Resolution:
Define a permanent Hex Code for the line.separator (platform independent).
I have changed the code in the ScriptWriterText Class which resolves the problem.
...
public static byte BYTES_LINE_SEP;
...
BYTES_LINE_SEP = 0x0A;
This version runs now on our system (Linux and IBM USS)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1354
HyperSQL Database Engine (HSQLDB) / Bugs / #1354 Unique constaint does not work correctly if the nullable column is first in the list
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following example should throw an exception, but does not:
CREATE TABLE T1
(
        ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
        P1 BIGINT NOT NULL,
        P2 BIGINT,
        CONSTRAINT C UNIQUE(P2,P1)
);
insert into T1 (P1,p2) values (0, null);
insert into T1 (p1,p2) values (0, null);

But this sql processed correctly:
CREATE TABLE T2
(
        ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
        P1 BIGINT NOT NULL,
        P2 BIGINT,
        CONSTRAINT C2 UNIQUE(P1,P2)
);
insert into T2 (P1,p2) values (0, null);
insert into T2 (p1,p2) values (0, null);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1355
HyperSQL Database Engine (HSQLDB) / Bugs / #1355 SYSTEM_TEXTTABLES id_quoted difference
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the SYSTEM_TEXTTABLES routine of DatabaseInformationFull, when sysTables[SYSTEM_TEXTTABLES] returns null, IS_ALL_QUOTED is created as column 10, IS_QUOTED as 11. If not null, textFileSettings.isQuoted is stored in row[10] and textFileSettings.isAllQuoted is stored in row[11] (through the index variables iiq and iiaq). The Javadoc comments indicate the latter is correct.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1356
HyperSQL Database Engine (HSQLDB) / Bugs / #1356 Results being overridden
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the 2-line for loop at line 270 of ArrayType.java, the result of the first line's call to convertJavaToSQL() is being overridden by the result of the second line's call to convertToTypeLimits(). Possibly the result of the first line s/b passed as a parameter to convertToTypeLimits()?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1357
HyperSQL Database Engine (HSQLDB) / Bugs / #1357 exception on union
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
executing the queries below, hsql crash :
CREATE TABLE TestUnion1(
ku1 VARCHAR(255) NOT NULL ,
b VARCHAR(255),
i INTEGER )
CREATE TABLE TestUnion2(
ku2 VARCHAR(255) NOT NULL ,
b VARCHAR(255),
i INTEGER )
INSERT INTO TestUnion1 ( ku1, b, i ) VALUES ( 'k1', 'b1', 1 ) 
INSERT INTO TestUnion2 ( ku2, b, i ) VALUES ( 'k1', 'b2', 5 ) 
SELECT b,SUM(i) AS sum_i
FROM TestUnion1
GROUP BY TestUnion1.b
UNION ALL 
SELECT b,i
FROM TestUnion2
ORDER BY 1,2
Caused by: java.sql.SQLException: java.lang.ArrayIndexOutOfBoundsException: 2 java.lang.ArrayIndexOutOfBoundsException: 2
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.executeQuery(Unknown Source)
at it.novabyte.ntools.database.NQuery.executeSQL(NQuery.java:526)
... 29 more
Caused by: org.hsqldb.HsqlException: java.lang.ArrayIndexOutOfBoundsException: 2
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 32 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: 2
at org.hsqldb.index.IndexAVL.compareRow(Unknown Source)
at org.hsqldb.navigator.RowSetNavigatorData.compare(Unknown Source)
at java.util.TreeMap.put(Unknown Source)
at org.hsqldb.navigator.RowSetNavigatorData.add(Unknown Source)
at org.hsqldb.navigator.RowSetNavigatorData.unionAll(Unknown Source)
at org.hsqldb.QueryExpression.getResult(Unknown Source)
at org.hsqldb.StatementQuery.getResult(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1358
HyperSQL Database Engine (HSQLDB) / Bugs / #1358 Unable to use decode function in order to transform datatype
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In Oracle database, I can use the decode command to transform the return datatype. For example, I can use in my PreparedStatement decode(:myVar, 'toto', 1, myColumnInNumber). When myVar equals toto, then it returns 1 otherwise, it returns the value of myColumnInNumber.
This syntax is not allowed in hsqldb 2.2.8
I tried to convert myColumnInNumber in String using the to_char function but it doesn't work too.
The stack trace for the decode fucntion :
java.sql.SQLSyntaxErrorException: incompatible data types in combination
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.Util.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
at com.deolan.pnlGeneration.appli.TestLaunch.test(TestLaunch.java:254)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:601)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)
at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.hsqldb.HsqlException: incompatible data types in combination
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.types.NumberType.getAggregateType(Unknown Source)
at org.hsqldb.types.Type.getAggregateType(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypesForCaseWhen(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypes(Unknown Source)
at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
at org.hsqldb.QuerySpecification.resolveExpressionTypes(Unknown Source)
at org.hsqldb.QuerySpecification.resolveTypesPartOne(Unknown Source)
at org.hsqldb.QueryExpression.resolve(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 31 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1359
HyperSQL Database Engine (HSQLDB) / Bugs / #1359 Prepared statement with placeholders: SQLSyntaxErrorException: incompatible data types in combination
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create a table:
CREATE MEMORY TABLE SA.MEMBERSHIP(
EMAIL VARCHAR(64) NOT NULL PRIMARY KEY,
FIRST_NAME VARCHAR(32) NOT NULL,
LAST_NAME VARCHAR(32) NOT NULL,
PRIVILEGE SMALLINT
)
and try to prepare the following statement via JDBC:
UPDATE MEMBERSHIP SET
PRIVILEGE=COALESCE(?,PRIVILEGE),
FIRST_NAME=COALESCE(?,FIRST_NAME),
LAST_NAME=COALESCE(?,LAST_NAME)
WHERE EMAIL=?
HSQLDB throws
java.sql.SQLSyntaxErrorException: incompatible data types in combination
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.types.CharacterType.getAggregateType(Unknown Source)
at org.hsqldb.types.NumberType.getAggregateType(Unknown Source)
at org.hsqldb.types.Type.getAggregateType(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypesForCaseWhen(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypes(Unknown Source)
at org.hsqldb.ParserDML.resolveUpdateExpressions(Unknown Source)
at org.hsqldb.ParserDML.compileUpdateStatement(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
This only seems to happen when the columns in the SET clause belong to different types, here SMALLINT vs. VARCHAR. The following statement compiles without problem.
UPDATE MEMBERSHIP SET
FIRST_NAME=COALESCE(?,FIRST_NAME),
LAST_NAME=COALESCE(?,LAST_NAME)
WHERE EMAIL=?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1360
HyperSQL Database Engine (HSQLDB) / Bugs / #1360 Problem with JDBCPreparedStatement when using "with" clause that include a recursive subquery
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, I am putting a DB2 application on HSQLDB, but I have a strange behavior. (I am using Hsqldb2.3.2)
When I run a statement with all the values in it (in squirrel or in a java statement), the result set is feed with all the expected values.
But
When I run it with a preparedStatement with the same values, the resultSet is empty
So, if I execute this statement with all value set in a sql client, records are returned:
with produit_adhesion as 
(select * from public.tpaos as prod_adhs where prod_adhs.ID_OFSV = 2
and prod_adhs.ID_PRRS = 1301
and prod_adhs.NUM_INFI_DESJ = 815
and prod_adhs.NUM_TRSI_CAIS = 20272), 
produit_compte as 
(select * from public.tpcsf as prod_compte where prod_compte.ID_PRRS = 1301
and prod_compte.NUM_INFI_DESJ = 815 
and prod_compte.NUM_TRSI_CAIS = 20272 ), 
compte as 
(select * from public.tcsfl as cmpt where cmpt.ID_PRRS = 1301
and cmpt.NUM_INFI_DESJ = 20272 
and cmpt.NUM_TRSI_CAIS = 815 
and cmpt.COD_RESU_ATFL in ('1', '7')),
folio_non_retire as 
(select * from public.tfoli as fol_non_ret where fol_non_ret.ID_PRRS = 1301
and fol_non_ret.NUM_INFI_DESJ = 815
and fol_non_ret.NUM_TRSI_CAIS = 20272 
and fol_non_ret.IND_FOLI_RETI = 'N'), 
folio_non_retire_cons as 
(select * from folio_non_retire 
where exists (select 1 from folio_non_retire fol_ferm where 
folio_non_retire.ID_PRRS = fol_ferm.ID_PRRS 
and folio_non_retire.NUM_INFI_DESJ = fol_ferm.NUM_INFI_DESJ
and folio_non_retire.NUM_TRSI_CAIS = fol_ferm.NUM_TRSI_CAIS 
and folio_non_retire.NUM_FLDS = fol_ferm.num_foli 
and fol_ferm.IND_FOLI_RETI = 'N')),
profil_folio as
(select * from public.tmbfl as prof_fol where prof_fol.ID_PRRS = 1301 
and prof_fol.NUM_INFI_DESJ = 815 
and prof_fol.NUM_TRSI_CAIS = 20272 
and prof_fol.IND_MEMB_CONT = 'O') 
select 
[…]
BUT,
If I use it in a prepare statement with the same values, the result set is empty.
with produit_adhesion as 
(select * from public.tpaos as prod_adhs where prod_adhs.ID_OFSV = ?
and prod_adhs.ID_PRRS = ?
and prod_adhs.NUM_INFI_DESJ = ?
and prod_adhs.NUM_TRSI_CAIS = ?), 
produit_compte as 
(select * from public.tpcsf as prod_compte where prod_compte.ID_PRRS = ?
and prod_compte.NUM_INFI_DESJ = ? 
and prod_compte.NUM_TRSI_CAIS = ? ), 
compte as 
(select * from public.tcsfl as cmpt where cmpt.ID_PRRS = ? 
and cmpt.NUM_INFI_DESJ = ? 
and cmpt.NUM_TRSI_CAIS = ? 
and cmpt.COD_RESU_ATFL in ('1', '7')),
folio_non_retire as 
(select * from public.tfoli as fol_non_ret where fol_non_ret.ID_PRRS = ?
and fol_non_ret.NUM_INFI_DESJ = ?
and fol_non_ret.NUM_TRSI_CAIS = ? 
and fol_non_ret.IND_FOLI_RETI = 'N'), 
folio_non_retire_cons as 
(select * from folio_non_retire 
where exists (select 1 from folio_non_retire fol_ferm where 
folio_non_retire.ID_PRRS = fol_ferm.ID_PRRS 
and folio_non_retire.NUM_INFI_DESJ = fol_ferm.NUM_INFI_DESJ
and folio_non_retire.NUM_TRSI_CAIS = fol_ferm.NUM_TRSI_CAIS 
and folio_non_retire.NUM_FLDS = fol_ferm.num_foli 
and fol_ferm.IND_FOLI_RETI = 'N')),
profil_folio as
(select * from public.tmbfl as prof_fol where prof_fol.ID_PRRS = ? 
and prof_fol.NUM_INFI_DESJ = ? 
and prof_fol.NUM_TRSI_CAIS = ? 
and prof_fol.IND_MEMB_CONT = 'O') 
select 
[…]
After debugging a lot, I found that the block in bold below is the problem. If I set it with fix values, the prepared statement will return expected values otherwise, no value will come back from the database…
The cause seems to be in the pre-compilation of the prepared statement.
HSQLDB get mixed up with the subquery using the previous one (folio_non_retire_cons using value from folio_non_retire)
So, if I remove the ? in that block and put fix values, the prepared statement will work just fine :
with produit_adhesion as 
(select * from public.tpaos as prod_adhs where prod_adhs.ID_OFSV = ?
and prod_adhs.ID_PRRS = ?
and prod_adhs.NUM_INFI_DESJ = ?
and prod_adhs.NUM_TRSI_CAIS = ?), 
produit_compte as 
(select * from public.tpcsf as prod_compte where prod_compte.ID_PRRS = ?
and prod_compte.NUM_INFI_DESJ = ? 
and prod_compte.NUM_TRSI_CAIS = ? ), 
compte as 
(select * from public.tcsfl as cmpt where cmpt.ID_PRRS = ? 
and cmpt.NUM_INFI_DESJ = ? 
and cmpt.NUM_TRSI_CAIS = ? 
and cmpt.COD_RESU_ATFL in ('1', '7')),
folio_non_retire as 
(select * from public.tfoli as fol_non_ret where fol_non_ret.ID_PRRS = 1301
and fol_non_ret.NUM_INFI_DESJ = 815
and fol_non_ret.NUM_TRSI_CAIS = 20272
and fol_non_ret.IND_FOLI_RETI = 'N'), 
folio_non_retire_cons as 
(select * from folio_non_retire 
where exists (select 1 from folio_non_retire fol_ferm where 
folio_non_retire.ID_PRRS = fol_ferm.ID_PRRS 
and folio_non_retire.NUM_INFI_DESJ = fol_ferm.NUM_INFI_DESJ
and folio_non_retire.NUM_TRSI_CAIS = fol_ferm.NUM_TRSI_CAIS 
and folio_non_retire.NUM_FLDS = fol_ferm.num_foli 
and fol_ferm.IND_FOLI_RETI = 'N')),
profil_folio as
(select * from public.tmbfl as prof_fol where prof_fol.ID_PRRS = ? 
and prof_fol.NUM_INFI_DESJ = ? 
and prof_fol.NUM_TRSI_CAIS = ? 
and prof_fol.IND_MEMB_CONT = 'O') 
select 
[…]
I attach the table script (without data) and the sql.log when the request pass.
Any idea what is going on???
2 Attachments


rcemdata2.script


rcemdata2.sql.log
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1361
HyperSQL Database Engine (HSQLDB) / Bugs / #1361 Corruption during system crash and power failure scenarios
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue is about what happens during a sudden power failure, if a SHUTDOWN statement is being executed. It is hard to reproduce this scenario normally, but we found it by using a tool that can reproduce such scenarios (we believe the chance of it occurring in a real world is small).
When the SHUTDOWN command is executed, HSQLDB updates the properties file finally, using an unlink(properties) call followed by a rename(properties.new, properties). Before this, HSQLDB unlinks the log file, and updates the script file using an unlink and a rename.
File systems such as btrfs can buffer directory operations, and send them to disk out-of-order. Consider that a file system buffers the unlink(log) call, and instead sends the unlink(properties) call to disk first. In this case, if a system crash happens immediately after the unlink(properties) call, trying to read the database after reboot reveals a corrupted database. Similarly, if the rename(script) call is buffered instead, trying to read the database results in an error.
A slight disclaimer: I am involved more in file-system research than in using databases, so there is a chance that I did not use HSQLDB properly. Please let me know if you suspect that is the case. Also, the exact problematic buffering (sending out-of-order) discussed above might not happen with btrfs; I am not sure. I am, however, sure that btrfs does buffer and send some directory operations out-of-order [1], and it is possible future file systems (or other current file systems I do not know about) will do the problematic buffering.
More details: HSQLDB version is 2.3.1.
[1] https://www.mail-archive.com/linux-btrfs@vger.kernel.org/msg31937.html
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1362
HyperSQL Database Engine (HSQLDB) / Bugs / #1362 Class cast exception with FOR Select
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using 2.3.2 as a server engine, within a stored procedure I am receiving class cast exceptions "String cannot be cast to Number". The example below will fail when trying to execute. If you remove the two varchar's (, VP_PATTERN, VP_CODE) from the select clause of the FOR statement, the code executes.
The example is cluttered because I was trying to reproduce a problem in my development code where the chkpts table showed that in the course of entering the for loop, the variable your_counter jumped in value between chkpts yourCounter 1 and 2 by the number of records that should be returned by the select statement. Thus the VP_LOOP never executed a second time since your_counter exceeded howMany. Very bizarre. If you need this demonstrated I can provide an even more complex example. So two problems here.
/ set up test environment /
DROP PROCEDURE FailedProc IF EXISTS;
DROP TABLE vs.my_chkpts IF EXISTS;
CREATE TABLE vs.my_chkpts (
my_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
my_label VARCHAR(30),
my_counter INTEGER,
my_status VARCHAR(100),
entered_at TIMESTAMP
);
DROP TABLE vs.TESTPATTERN IF EXISTS;
CREATE TABLE vs.TESTPATTERN (
VP_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
VP_PATTERN VARCHAR(32),
VP_CODE VARCHAR(3)
);
INSERT INTO vs.TESTPATTERN VALUES (DEFAULT, 'NORTHEAST', 'AUR' );
INSERT INTO vs.TESTPATTERN VALUES (DEFAULT, 'SOUTHEAST', 'AUR' );
INSERT INTO vs.TESTPATTERN VALUES (DEFAULT, 'SOUTHWEST', 'AUR' );
INSERT INTO vs.TESTPATTERN VALUES (DEFAULT, 'NORTHWEST', 'AUR' );
/ problem example /
DROP PROCEDURE FailedProc IF EXISTS;
CREATE PROCEDURE FailedProc(
) SPECIFIC PROC_FailedProc LANGUAGE SQL NOT DETERMINISTIC MODIFIES SQL DATA FailedProc:BEGIN ATOMIC
DECLARE howMany, yourCounter INTEGER DEFAULT 1;
INSERT INTO my_chkpts VALUES (DEFAULT,'starting sub',-99,'no where yet ',CURRENT_TIMESTAMP);
SET howMany = 4;
TestLoop: WHILE howMany > yourCounter DO
INSERT INTO my_chkpts VALUES (DEFAULT,'looping',yourCounter,'going up ',CURRENT_TIMESTAMP);
SET yourCounter = yourCounter + 1;
INSERT INTO my_chkpts VALUES (DEFAULT,'yourCounter 1: ', yourCounter,' what is it now ',CURRENT_TIMESTAMP);
VP_LOOP: FOR 
SELECT VP_ID, VP_PATTERN,VP_CODE FROM testpattern order by VP_ID DO
INSERT INTO my_chkpts VALUES (DEFAULT,'yourCounter 2: ',yourCounter,' what is it now ',CURRENT_TIMESTAMP);
END FOR VP_LOOP;
INSERT INTO my_chkpts VALUES (DEFAULT,'end looping',yourCounter,'Maybe ',CURRENT_TIMESTAMP);
END WHILE TestLoop;
END FailedProc;
CALL FailedProc();
SELECT * FROM my_chkpts ORDER BY my_id;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1363
HyperSQL Database Engine (HSQLDB) / Bugs / #1363 Modulus function does not return decimal result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The HyperSQL User Guide says of the Modulus function:

MOD: 
Returns the remainder (modulus) of <num value="" expr="" 1=""> divided by <num value="" expr="" 2="">. The data type of the returned value is the same as the second argument. (JDBC and Foundation)

But mod(8.5,3.00) yields '2' not '2.50'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1364
HyperSQL Database Engine (HSQLDB) / Bugs / #1364 Column names are case sensitive when returning Generated Keys
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm new to using HSQLDB. I've found what may or may not be a bug, depending on your point of view, but I do know that this behavior is inconsistent relative to SQLite, Oracle, and Postgres.
When you execute an insert that will return generated keys, if the String array of column names is not capitalized, HSQLDB will fail to find the columns for that table and will fail to execute the statement (and return the new primary keys).
I've tried to 
 CREATE SEQUENCE seq START WITH 1 INCREMENT BY 1;

 create table FolderTable (
     FolderId integer GENERATED BY DEFAULT AS SEQUENCE seq,
     Name varchar(50),
     Parent integer
 );

 insert into FolderTable (FolderId, Name, Parent)
       values(0, 'ROOT', NULL);

Java:
 String sql = "INSERT INTO FolderTable (Name,Parent) VALUES (?,?)";
 String[] retColumns = new String[]{"FolderId"};
 try(PreparedStatement stmt = _conn.prepareStatement( sql, retColumns )) {
     stmt.setString( "etc" );
     stmt.setLong( 0L );
     stmt.executeUpdate();
     try(ResultSet rs = stmt.getGeneratedKeys()){
         rs.next();
         return rs.getLong(1);
     }
 }

By making "FolderId" upper-case, it works fine, aka:
 String[] retColumns = new String[]{"FOLDERID"};
 // etc...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1365
HyperSQL Database Engine (HSQLDB) / Bugs / #1365 Invalid HAVING expression when having a parameter 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I saw an old bug where having a parameter in a having expression generates an invalid HAVING expression exception. It's marked as fixed but I'm having the exact same issue on 2.3.2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1366
HyperSQL Database Engine (HSQLDB) / Bugs / #1366 ArrayIndexOutOfBoundsException in UNION ALL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The query:
 (SELECT ss1.name, ss1.id, COUNT(*) cnt 
  FROM sim_status ss1 INNER JOIN sim ON ss1.id = sim.sim_status_id 
  GROUP BY ss1.name, ss1.id )
 UNION ALL 
 ( SELECT ss2.name, ss2.id, 0 AS cnt FROM sim_status ss2)

fails with the following exception:
 java.sql.SQLException: java.lang.ArrayIndexOutOfBoundsException: 3 java.lang.ArrayIndexOutOfBoundsException: 3
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.executeQuery(Unknown Source)
    ...

It works fine if the 'ALL' option is removed from the UNION and also when the two clauses being unioned are swapped. On its own, the first clause with the GROUP BY returns an empty result set; the second clause does not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1367
HyperSQL Database Engine (HSQLDB) / Bugs / #1367 problem with materialising subquery in exists-Clause when view is involved
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB version 2.3.2.
problem with materialising subquery in exists-Clause when view is involved.
It seems the join-column-expression is not evaluated if it is not in the from-clause of the select.
It was working with hsqldb version 1.8.0.10 and earlier :-)
table setup

create table ViTa1 ( ViJoCo integer, ExtJoCo char(2), dat1 char(15));
create table ViTa2 ( ViJoCo integer, dat2 char(10));
create view vi as select vita1.dat1, vita1.extjoco, vita2.dat2 from ViTa1 join ViTa2 on ViTa1.vijoco = ViTa2.vijoco;
create table ExtJoTa (JoCo char(2), dat3 double);
insert into ViTa1 values (1, 'AA', 'viewbasetable');
insert into vita2 values (1, 'viewext');
insert into extjota values ('AA', 3.14);

-- not working (gives no result, should return the view-record)

select * from vi where exists(select '' from extjota where extjota.joco = vi.extjoco)

-- working (gives expected result)

select * from vi join extjota on vi.extjoco = extjota.joco
select * from vita1 where exists(select '' from extjota where extjota.joco = vita1.extjoco)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1368
HyperSQL Database Engine (HSQLDB) / Bugs / #1368 The NPE raised if there's a subquery in the where cluase
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a query with a subquery in the where clause,say:
SELECT bid, sendTime FROM tb_msg WHERE sendTime > (SELECT IFNULL((SELECT max(sendTime) readT FROM tb_msg_log WHERE receiver = '' AND type = ''),'1970-01-01 00:00:00'))
but I got the following NPE when executed:
java.lang.NullPointerException java.lang.NullPointerException / Error Code: -458 / State: S1000
Here's the DDL for the tables:
CREATE TABLE tb_msg(
id BIGINT NOT NULL PRIMARY KEY,
bid VARCHAR(36) NOT NULL ,
sender VARCHAR(64) NOT NULL,
title VARCHAR(64) NOT NULL ,
content VARCHAR(64) NOT NULL,
type VARCHAR(64) NOT NULL,
status VARCHAR(64) NOT NULL,
sendTime DATETIME NOT NULL NOT NULL,
updateTime DATETIME NOT NULL ,
delTime DATETIME NOT NULL 
) 
CREATE TABLE tb_msg_log (
id BIGINT NOT NULL PRIMARY KEY,
bid VARCHAR(36) NOT NULL ,
receiver VARCHAR(64) NOT NULL,
letterId VARCHAR(36) NOT NULL,
type VARCHAR(64) NOT NULL,
status VARCHAR(64) NOT NULL,
sendTime DATETIME NOT NULL,
readTime DATETIME NOT NULL ,
delTime DATETIME NOT NULL
) 
1 Attachments





hsqldb_NPE.png
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1369
HyperSQL Database Engine (HSQLDB) / Bugs / #1369 Query with filter of NaN characters failed.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have an hsqldb table with -Inf, Inf, NaN and null. Using a select statement to filter using that value is confused. E.g. if using where sqrt(0), it returns 0 and NaN. Using where -Infinity, it returns -Inf and NaN etc. Use these samples to test:
create table testme ( a DOUBLE );
insert into testme values ( -(1.0e0/0.0e0) );
insert into testme values ( sqrt(-1) );
insert into testme values ( (1.0e0/0.0e0) );
insert into testme values ( null );
insert into testme values ( sqrt(0) );
select * from testme where (a = sqrt(0));
select * from testme where (a = sqrt(-1));
select * from testme where ( a = -(1.0e1/0.0e1) );
select * from testme where ( a = (1.0e1/0.0e1) );
select * from testme where (a = sqrt(0)); should return just row with 0
select * from testme where (a = sqrt(-1)); should return just the row with NaN
select * from testme where ( a = -(1.0e1/0.0e1) ); should return just the row with -Infinity
select * from testme where ( a = (1.0e1/0.0e1) ); should return just the row with Infinity
Thanks.
-Aston
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1370
HyperSQL Database Engine (HSQLDB) / Bugs / #1370 PostgreSQL Style Syntax fails on rename column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Greetings.
With HSQLDB 2.3.2, the following "postgres syntax" doesn't seem to work.
SET DATABASE SQL SYNTAX PGS TRUE;
alter table eat_arch_status rename LAST_PACKAGED_DATE TO LAST_DIGITAL_PACKAGED_DATE;
FWIW
-roger-
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1371
HyperSQL Database Engine (HSQLDB) / Bugs / #1371 User defined function. Exception when hsql is starting
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I have the actual hsqldb running (2.3.2). I created a function via dbvisualize and tested it succesfully. After stopping hsqldb and starting it again, I got the following hsql exception.
[Server@47b6617]: [Thread[main,5,main]]: checkRunning(false) entered
[Server@47b6617]: [Thread[main,5,main]]: checkRunning(false) exited
[Server@47b6617]: Startup sequence initiated from main() method
[Server@47b6617]: Could not load properties from file
[Server@47b6617]: Using cli/default properties only
[Server@47b6617]: Initiating startup sequence...
[Server@47b6617]: Server socket opened successfully in 6 ms.
2014-10-15T20:08:53.305+0100 WARNING unexpected token: SELECT
org.hsqldb.HsqlException: unexpected token: SELECT
at org.hsqldb.error.Error.parseError(Unknown Source)
at org.hsqldb.ParserBase.unexpectedToken(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadRowElementList(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpressionOrNull(Unknown Source)
at org.hsqldb.ParserRoutine.compileReturnValue(Unknown Source)
at org.hsqldb.ParserRoutine.compileSQLProcedureStatementOrNull(Unknown Source)
at org.hsqldb.ParserRoutine.readRoutineBody(Unknown Source)
at org.hsqldb.ParserRoutine.compileAlterSpecificRoutine(Unknown Source)
at org.hsqldb.ParserDDL.compileAlter(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
at org.hsqldb.persist.Log.processScript(Unknown Source)
at org.hsqldb.persist.Log.open(Unknown Source)
at org.hsqldb.persist.Logger.open(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.server.Server.openDatabases(Unknown Source)
at org.hsqldb.server.Server.run(Unknown Source)
at org.hsqldb.server.Server.access$000(Unknown Source)
at org.hsqldb.server.Server$ServerThread.run(Unknown Source)
2014-10-15T20:08:53.307+0100 WARNING Script processing failure
org.hsqldb.HsqlException: error in script file line: /Users/christoph/Documents/Daten/hsqldb_server/data/test 247
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
at org.hsqldb.persist.Log.processScript(Unknown Source)
at org.hsqldb.persist.Log.open(Unknown Source)
at org.hsqldb.persist.Logger.open(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.server.Server.openDatabases(Unknown Source)
at org.hsqldb.server.Server.run(Unknown Source)
at org.hsqldb.server.Server.access$000(Unknown Source)
at org.hsqldb.server.Server$ServerThread.run(Unknown Source)
Caused by: org.hsqldb.HsqlException: unexpected token: SELECT
at org.hsqldb.error.Error.parseError(Unknown Source)
at org.hsqldb.ParserBase.unexpectedToken(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadRowElementList(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpressionOrNull(Unknown Source)
at org.hsqldb.ParserRoutine.compileReturnValue(Unknown Source)
at org.hsqldb.ParserRoutine.compileSQLProcedureStatementOrNull(Unknown Source)
at org.hsqldb.ParserRoutine.readRoutineBody(Unknown Source)
at org.hsqldb.ParserRoutine.compileAlterSpecificRoutine(Unknown Source)
at org.hsqldb.ParserDDL.compileAlter(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
... 13 more
line 247 is exactley the function definition that should be executed.
I attach the db script without data and the sql for creating the function.
1 Attachments


test.script
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1372
HyperSQL Database Engine (HSQLDB) / Bugs / #1372 Can't call callable with JDBC{?=call proc()} pattern
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Cross posting aparent bug.... https://sourceforge.net/p/hsqldb/feature-requests/309/
Connection c = jdbcTemplate.getDataSource().getConnection();
        String sql = "{?= call PAR3214.VOID_ALLOCATION(?, ?, ?)}";

        CallableStatement  s = c.prepareCall(sql);

        s.registerOutParameter(1, Types.VARCHAR);
        s.setLong(2, fromLocation);
        s.setString(3, controlNumber);
        s.setString(4, controlNumber);

        boolean b = s.execute();

Straight JDBC in Oracle, fails in HSQLDB
Definition of function is as follows...
CREATE SCHEMA par3214;
CREATE FUNCTION par3214.void_allocation (virt_wh_in NUMERIC, control_nbr_in VARCHAR(10), user_id_in VARCHAR(10))
RETURNS VARCHAR(10)
RETURN 'OK'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1373
HyperSQL Database Engine (HSQLDB) / Bugs / #1373 SELECT query is not working if aggregated column have alias and that column also appear in ORDER BY clause.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SELECT query is not working if aggregated column have alias and that column also appear in ORDER BY clause.
Create the sample table and insert data by executing the following queries:
CREATE TABLE Sample (ID INT, Name VARCHAR(255));
INSERT INTO Sample (ID, Name) VALUES (1, 'Tahir')
These work fine and have no issue. Now execute the following select query it'll throw exception.
QUERY:
Select sum(id) id from Sample order by sum(id)
EXCEPTION:
user lacks privilege or object not found: ID
at org.hsqldb.error.Error.error(Error.java:83)
at org.hsqldb.error.Error.error(Error.java:72)
at org.hsqldb.ExpressionColumn.checkColumnsResolved(ExpressionColumn.java:906)
at org.hsqldb.ExpressionColumn.checkColumnsResolved(ExpressionColumn.java:915)
at org.hsqldb.QueryExpression.resolve(QueryExpression.java:223)
at org.hsqldb.ParserDQL.compileCursorSpecification(ParserDQL.java:6265)
at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:147)
at org.hsqldb.ParserCommand.compileStatements(ParserCommand.java:91)
at org.hsqldb.Session.executeDirectStatement(Session.java:1217)
at org.hsqldb.Session.execute(Session.java:1008)
However above select query work fine if alias not give for aggregated column. e.g Select sum(id) from Sample order by sum(id).
Please check and resolve the issue ASAP.
Thanks,
Tahir Akram
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1374
HyperSQL Database Engine (HSQLDB) / Bugs / #1374 add_months in combination with extract loses bracket
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using version 2.3.2, the datasource has 'sql.syntax_ora=true'.
When I'm using the query:
"SELECT t FROM Table t WHERE 1=1" I get all rows;
"SELECT t FROM Table t WHERE 1=1 OR ADD_MONTHS(sysdate,1) > sysdate" I get all rows;
"SELECT t FROM Table t WHERE 1=1 OR EXTRACT(month FROM sysdate) > 0" I get all rows;
However, when I make a combination:
"SELECT t FROM Table t WHERE 1=1 OR EXTRACT(month FROM ADD_MONTHS(sysdate,1)) > 0" I get an error: util.JDBCExceptionReporter - unexpected token: )
The recompiled SQL shows a missing part ',1)':
Hibernate: select ... as ... from ... where 1=1 or extract(month FROM ADD_MONTHS(sysdate)>0
I tried wrapping things with additional brackets but havent found a working solution yet. The query does run fine in Oracle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1375
HyperSQL Database Engine (HSQLDB) / Bugs / #1375 Time zone change the date or hour in a database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I think the bug is in HSQL but I'm not shure.
The bug comes up from LibreOffice or OpenOffice.
(I'im sorry for my bad english)
To reproduce it...
1. create a new database in LibreOffice (or OpenOffice).
2. create a table with tree fields: DATA, TIME and TIMESTAMP.
3. put some datas in the table, save the file and quit LibreOffice
4. change the time zone of your operating system with a farway zone from yours
5. open again the table
The date or/and hour changed
See olso: https://www.libreoffice.org/bugzilla/show_bug.cgi?id=63566
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1376
HyperSQL Database Engine (HSQLDB) / Bugs / #1376 manual entry for constraint incorrect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm looking at the CONSTRAINT section of the manual (http://hsqldb.org/doc/guide/databaseobjects-chapt.html).
According to that information I should be able to do
ALTER TABLE messaging_messages ADD CONSTRAINT fk_address_person FOREIGN KEY (queue) REFERENCES messaging_queues (id) ON UPDATE RESTRICT ON DELETE CASCADE INITIALLY DEFERRED;
I'm currently getting "Error: unexpected token: INITIALLY".
I've also tried 
ALTER TABLE messaging_messages ADD CONSTRAINT fk_address_person FOREIGN KEY (queue) REFERENCES messaging_queues (id) ON UPDATE RESTRICT ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED; -> "Error: unexpected token: DEFERRABLE".
I'm using hsqldb 2.3.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1377
HyperSQL Database Engine (HSQLDB) / Bugs / #1377 Trigger not fired on every single row when using “insert select” or “merge”
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I defined a BEFORE INSERT trigger for a table and it works as expected for single INSERTstatements, but not for INSERT ... SELECT nor MERGE statements.
These are my database objects (simplified):
CREATE TABLE "COMPANY" (
    "ID" NUMBER NOT NULL,
    "NAME" VARCHAR(100)
);

CREATE TABLE "EMPLOYEE" (
    "ID" NUMBER NOT NULL,
    "COMPANY_ID" NUMBER NOT NULL
);

CREATE UNIQUE INDEX "EMPLOYEE_PK" ON "EMPLOYEE" ("ID");

CREATE SEQUENCE "EMPLOYEE_SEQUENCE";

CREATE TRIGGER "BI_EMPLOYEE" BEFORE INSERT ON "EMPLOYEE" 
    REFERENCING NEW AS newrow FOR EACH ROW BEGIN ATOMIC 
    IF newrow.id IS NULL THEN 
        SET newrow.id = NEXT VALUE FOR employee_sequence;
    END IF;
END;

If single INSERTstatements are executed, everything works as expected, the ÌD is fetched from the sequence. But if I execute something like
INSERT INTO employee (company_id) SELECT id FROM company;

the I get an error:
integrity constraint violation: unique constraint or index violation: "EMPLOYEE_PK"

which could propably mean that it tries to insert the same key from the sequence twice.
I'm using the latests version 2.3.2 of HSQLDB.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1378
HyperSQL Database Engine (HSQLDB) / Bugs / #1378 DDL 'LIKE TABLE" does not copy NULLable property
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the documentation (Ch 4) it says:
"All NOT NULL constraints are copied with the original columns, other constraints are not."
However, this doesn't appear to be the case. All columns appear to have the nullable attribute set. Looks like it's down to this (ParserDDL.java:readLikeTable)
   ColumnSchema[] columnList =
        new ColumnSchema[likeTable.getColumnCount()];

    for (int i = 0; i < columnList.length; i++) {
        ColumnSchema column = likeTable.getColumn(i).duplicate();
        HsqlName name =
            database.nameManager.newColumnSchemaHsqlName(table.getName(),
                column.getName());

        column.setName(name);
        column.setNullable(true);
        column.setPrimaryKey(false);

The penultimate line overrides nullable indiscriminately.
Is this part of the SQL 2008 spec? Either the docs or code should be changed, I think.
I've tested this with 2.3.2, using a temporary table as the source table (though this shouldn't make a difference, I think).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1379
HyperSQL Database Engine (HSQLDB) / Bugs / #1379 Queries are not escaped with `
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there,
I'm using hibernate and some of my entities have attributes like order, language or catalog. I noticed these are reserved words so having a query like this:
from order_entry where order=:attr
will fail in HSQL but succeed in Mysql. The reason is that Hibernate will translate the query to something like this:
select * from order_entry where order=?
and the same query gets translated like this when using HSQL:
select * from order_entry as e where order =?
which fails. I believe the problem is in the hsql driver, so now I have to rename my datamodel and put some unintuitive attribute names, only because HSQL does not escape with `.
I hope you will fix that. Thanks a lot and keep up the good work :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1380
HyperSQL Database Engine (HSQLDB) / Bugs / #1380 ScriptReaderDecode locks filehandle on exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a problem in the ScriptReaderDecode constructor class. If the first constructor is called with a "String fileName", it creates an FileInputStream with the call to "openInputStreamElement(..) and then delegates to this(....)
In our usecase the "new GZIPInputStream(...) throws an exception upon construction (because the DB File is corrupted). HSQLDB then holds on to the filehandle xxxx.script until the finalizer of FileInputStream finalizes that inputstream and closes the filehandle. During that time its not possible to delete the corrupted database.
A solution is needed that frees up all resource if the HSQLDB cannot be started. Below is the current code of HSQLDB 2.3.2 that we use....
public ScriptReaderDecode(Database db, String fileName, Crypto crypto,
 boolean forLog) throws IOException {
this(db, db.logger.getFileAccess().openInputStreamElement(fileName),
crypto, forLog);
}
public ScriptReaderDecode(Database db, InputStream inputStream,
                          Crypto crypto,
                          boolean forLog) throws IOException {

    super(db);

....
if (forLog) {
dataInput =
new DataInputStream(new BufferedInputStream(inputStream));
} else {
InputStream stream =
crypto.getInputStream(new BufferedInputStream(inputStream));
        stream       = new GZIPInputStream(stream);
        dataStreamIn = new LineReader(stream, ScriptWriterText.ISO_8859_1);
    }
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1381
HyperSQL Database Engine (HSQLDB) / Bugs / #1381 Incorrect results from query on temp-tables when spilled to disk
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After upgragding to 2.3.2 I see a problem where I lose results in correlated sub-queries on temp tables that are spilled to disk. Here is the scenario:
Connect and create a database : jdbc:hsqldb:file:C:\Users\DNICOD~1\AppData\Local\Temp\hsDNTst1\hsDNTst1
SET SESSION RESULT MEMORY ROWS 1398 -- This causes the failure, but 1399 and above avoid the problem, presumably by not going to disk.
DECLARE LOCAL TEMPORARY TABLE T0 (K INTEGER,N VARCHAR(4000),B DECIMAL(18, 4)) ON COMMIT PRESERVE ROWS;
<load-data-into T0=""> 
DECLARE LOCAL TEMPORARY TABLE T1 (P DECIMAL(18, 4),K INTEGER) ON COMMIT PRESERVE ROWS;
<load-data-into T1="">
Execute the following query : SELECT T0.N FROM T0 WHERE T0.B <= (SELECT SUM(T1.P) AS C1 FROM T1 WHERE T1.K = T0.K)
It returns a single row : 

N
Customer#000001126
Repeat the above, changing the results memory row setting to 1399
and you get the correct result : 

N
Customer#000000013
Customer#000001126
Customer#000001150
I've attached a stand alone program (including data) that reproduces the problem. If invoked with an argument >=1399, then it returns the correct results
1398 causes the query to return incorrect results. I can narrow it down further or provide more info if that will help.
Thanks for your time,
Dave N
1 Attachments


HsqlProblem2.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1382
HyperSQL Database Engine (HSQLDB) / Bugs / #1382 NullPointerException when unnesting an array
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following SQL statement causes a NullPointerException to be thrown:
select median(x) from (unnest(array[1, 2, 3, 4]))
Perhaps, the statement is invalid per se, but even if that's the case, there shouldn't be a NullPointerException. The full exception stacktrace is:
at org.jooq.impl.Utils.translate(Utils.java:1626)
at org.jooq.impl.DefaultExecuteContext.sqlException(DefaultExecuteContext.java:661)
at org.jooq.impl.AbstractQuery.execute(AbstractQuery.java:352)
at org.jooq.impl.AbstractResultQuery.fetch(AbstractResultQuery.java:292)
at org.jooq.impl.DefaultDSLContext.fetch(DefaultDSLContext.java:461)
at org.jooq.test.all.testcases.AggregateWindowFunctionTests.testAggregateFunction_MEDIAN(AggregateWindowFunctionTests.java:295)
at org.jooq.test.jOOQAbstractTest.testAggregateFunction_MEDIAN(jOOQAbstractTest.java:2774)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

Caused by: java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at org.jooq.impl.ProviderEnabledConnection.prepareStatement(ProviderEnabledConnection.java:112)
at org.jooq.impl.SettingsEnabledConnection.prepareStatement(SettingsEnabledConnection.java:76)
at org.jooq.impl.AbstractResultQuery.prepare(AbstractResultQuery.java:218)
at org.jooq.impl.AbstractQuery.execute(AbstractQuery.java:312)
... 31 more
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 37 more
Caused by: java.lang.NullPointerException
at org.hsqldb.RangeVariable.<init>(Unknown Source)
at org.hsqldb.ParserDQL.readTableOrSubquery(Unknown Source)
at org.hsqldb.ParserDQL.XreadTableReference(Unknown Source)
at org.hsqldb.ParserDQL.XreadFromClause(Unknown Source)
at org.hsqldb.ParserDQL.XreadTableExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1383
HyperSQL Database Engine (HSQLDB) / Bugs / #1383 Wrong calculation of MEDIAN
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB calculates the MEDIAN() value as PERCENTILE_DISC(0.5), rather than PERCENTILE_CONT(0.5). For instance:
select median(x) from unnest(array[1, 2, 3, 4]) t(x)

The above yields 2, instead of 2.5.
Consider for instance the Wikipedia article on the Median:
http://en.wikipedia.org/wiki/Median

If there is an even number of observations, then there is no single middle value; the median is then usually defined to be the mean of the two middle values [1] [2] (the median of {3, 5, 7, 9} is (5 + 7) / 2 = 6), which corresponds to interpreting the median as the fully trimmed mid-range. The median is of central importance in robust statistics, as it is the most resistant statistic, having a breakdown point of 50%: so long as no more than half the data is contaminated, the median will not give an arbitrarily large result.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1384
HyperSQL Database Engine (HSQLDB) / Bugs / #1384 MEDIAN() should ignore NULLs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query yields 1:
select median(x) from unnest(array[1, 2, 3, null]) t(x);

(see also https://sourceforge.net/p/hsqldb/bugs/1383/). Unlike other aggregate functions, MEDIAN() seems to keep nulls in the aggregation set. This is probably not the expected behaviour, e.g. in the SQL standard PERCENTILE_CONT(0.5) function, where NULLs are excluded.
This flaw is particularly interesting when emulating the SQL standard FILTER clause (as supported by PostgreSQL), e.g.
select median(x) filter (x <> 4) 
from unnest(array[1, 2, 3, 4]) t(x);

In HSQLDB, the FILTER clause would be emulated as follows
select median(case when x <> 4 then x end)
from unnest(array[1, 2, 3, 4]) t(x);

In this emulation, again, NULLs are not ignored by HSQLDB, which leads to the MEDIAN() being wrong.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1385
HyperSQL Database Engine (HSQLDB) / Bugs / #1385 RuntimeException when using bind values in FILTER clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I found another bug related to these aggregate functions. When using a bind variable in an aggregate function's FILTER clause:
Connection connection = getConnection();
PreparedStatement stmt = connection.prepareStatement("select median(x) filter (where x <> ?) from unnest(array[1, 2, 3, 4]) t(x)");
stmt.setInt(1, 4);
stmt.executeQuery();

I'm getting:
java.sql.SQLException: java.lang.RuntimeException: unsupported internal operation: Expression java.lang.RuntimeException: unsupported internal operation: Expression
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
at org.jooq.test.all.testcases.AggregateWindowFunctionTests.testAggregateFunction_MEDIAN(AggregateWindowFunctionTests.java:300)
at org.jooq.test.jOOQAbstractTest.testAggregateFunction_MEDIAN(jOOQAbstractTest.java:2774)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: org.hsqldb.HsqlException: java.lang.RuntimeException: unsupported internal operation: Expression
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 31 more
Caused by: java.lang.RuntimeException: unsupported internal operation: Expression
at org.hsqldb.error.Error.runtimeError(Unknown Source)
at org.hsqldb.Expression.getValue(Unknown Source)
at org.hsqldb.QuerySpecification.buildResult(Unknown Source)
at org.hsqldb.QuerySpecification.getSingleResult(Unknown Source)
at org.hsqldb.QuerySpecification.getResult(Unknown Source)
at org.hsqldb.StatementQuery.getResult(Unknown Source)
... 34 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1386
HyperSQL Database Engine (HSQLDB) / Bugs / #1386 sys_extract_utc not recognized in create table statements under Oracle syntax mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Executing the following statement produces 
unexpected token: SYS_EXTRACT_UTC : line: 3 / Error Code: -5581 / State: 42581
SET DATABASE SQL SYNTAX ORA TRUE;

create table other_table
(
column TIMESTAMP(6) default sys_extract_utc(systimestamp)
);

But selects work just fine. 
Select sys_extract_utc(systimestamp) from dual;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1387
HyperSQL Database Engine (HSQLDB) / Bugs / #1387 read
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Even though my connection string has readonly, sqltool tries to expand the data file and throws following exception:
SqlTool v. 5337.
2015-02-25T17:56:05.964+0000  WARNING  data file enlarge failed 
java.io.IOException: Bad file descriptor
    at java.io.RandomAccessFile.write0(Native Method)
    at java.io.RandomAccessFile.write(RandomAccessFile.java:500)
    at org.hsqldb.persist.RAFile.extendLength(Unknown Source)
    at org.hsqldb.persist.RAFile.ensureLength(Unknown Source)
    at org.hsqldb.persist.RAFileHybrid.ensureLength(Unknown Source)
    at org.hsqldb.persist.DataFileCache.enlargeFileSpace(Unknown Source)
    at org.hsqldb.persist.DataSpaceManagerSimple.getFileBlocks(Unknown Source)
    at org.hsqldb.persist.TableSpaceManagerBlocks.getNewMainBlock(Unknown Source)
    at org.hsqldb.persist.TableSpaceManagerBlocks.getNewBlock(Unknown Source)
    at org.hsqldb.persist.TableSpaceManagerBlocks.getFilePosition(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.add(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.getNewCachedObject(Unknown Source)
    at org.hsqldb.Table.insertNoCheckFromLog(Unknown Source)
    at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
    at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
    at org.hsqldb.persist.Log.processLog(Unknown Source)
    at org.hsqldb.persist.Log.open(Unknown Source)
    at org.hsqldb.persist.Logger.open(Unknown Source)
    at org.hsqldb.Database.reopen(Unknown Source)
    at org.hsqldb.Database.open(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.newSession(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
    at java.sql.DriverManager.getConnection(DriverManager.java:571)
    at java.sql.DriverManager.getConnection(DriverManager.java:215)
    at org.hsqldb.lib.RCData.getConnection(Unknown Source)
    at org.hsqldb.cmdline.SqlTool.objectMain(Unknown Source)
    at org.hsqldb.cmdline.SqlTool.main(Unknown Source)
2015-02-25T17:56:05.982+0000  SEVERE  data file cannot be enlarged - disk spacee /mnt/var/hsqldb/data.data
2015-02-25T17:56:05.983+0000  SEVERE  statement error processing log /mnt/var/hsqldb/dataline: 18
org.hsqldb.HsqlException: Data File size limit is reached
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.persist.DataFileCache.enlargeFileSpace(Unknown Source)
    at org.hsqldb.persist.DataSpaceManagerSimple.getFileBlocks(Unknown Source)
    at org.hsqldb.persist.TableSpaceManagerBlocks.getNewMainBlock(Unknown Source)
    at org.hsqldb.persist.TableSpaceManagerBlocks.getNewBlock(Unknown Source)
    at org.hsqldb.persist.TableSpaceManagerBlocks.getFilePosition(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.add(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.getNewCachedObject(Unknown Source)
    at org.hsqldb.Table.insertNoCheckFromLog(Unknown Source)
    at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
    at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
    at org.hsqldb.persist.Log.processLog(Unknown Source)
    at org.hsqldb.persist.Log.open(Unknown Source)
    at org.hsqldb.persist.Logger.open(Unknown Source)
    at org.hsqldb.Database.reopen(Unknown Source)
    at org.hsqldb.Database.open(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.newSession(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
    at java.sql.DriverManager.getConnection(DriverManager.java:571)
    at java.sql.DriverManager.getConnection(DriverManager.java:215)
    at org.hsqldb.lib.RCData.getConnection(Unknown Source)
    at org.hsqldb.cmdline.SqlTool.objectMain(Unknown Source)
    at org.hsqldb.cmdline.SqlTool.main(Unknown Source)

The connection string in question is:
url jdbc:hsqldb:file:/disk1/hsqldb/data;readonly=true

I should probably mention that the data file is in use in "read-write" mode in a separate jvm while i'm trying to open the file using sqltool. Any idea what could be going wrong here or if this is expected?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1388
HyperSQL Database Engine (HSQLDB) / Bugs / #1388 java.lang.ClassCastException: with count(*) and union
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
When the following SQL requests, a classcast exception occurs on the server side, for instance using sqltool:
CREATE TABLE T (
V DECIMAL(28) NOT NULL,
);
SELECT MAX(V) + 1 FROM T UNION SELECT COUNT(*) + 1 FROM T;

On the hsqldb server logs:
2015-03-03 13:06:49.706 3 SELECT MAX(V) + 1 FROM T UNION SELECT COUNT(*) + 1 FROM T 
java.lang.ClassCastException: java.lang.Long cannot be cast to java.math.BigDecimal
        at org.hsqldb.rowio.RowOutputBase.writeData(RowOutputBase.java:232)
        at org.hsqldb.rowio.RowOutputBinary.writeData(RowOutputBinary.java:1)
        at org.hsqldb.rowio.RowOutputBase.writeData(RowOutputBase.java:187)
        at org.hsqldb.rowio.RowOutputBinary.writeData(RowOutputBinary.java:1)
        at org.hsqldb.navigator.RowSetNavigatorData.write(RowSetNavigatorData.java:317)
        at org.hsqldb.result.Result.write(Result.java:1269)
        at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:402)
        at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1533)
        at java.lang.Thread.run(Thread.java:745)

I am using the last snapshot from svn, but it is reproducible with the 2.3.2.
Best regards,
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1389
HyperSQL Database Engine (HSQLDB) / Bugs / #1389 Oracle syntax mode, case statement datatype not resolved
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running the following set of sql statements against HSQL results in a stacktrace, while running them against Oracle successfully executes.
SET DATABASE SQL SYNTAX ORA TRUE;

CREATE TABLE EMPLOYEE
(
ID           NUMBER(18) NOT NULL,
SALARY       NUMBER(18)
);

INSERT INTO EMPLOYEE VALUES (:id, CASE WHEN :salary > 0 THEN :salary  END

results in 
Caused by: java.sql.SQLSyntaxErrorException: data type cast needed for parameter or null literal
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at org.apache.commons.dbcp.DelegatingConnection.prepareStatement(DelegatingConnection.java:281)
at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.prepareStatement(PoolingDataSource.java:313)
at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:245)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:581)
... 35 more
Caused by: org.hsqldb.HsqlException: data type cast needed for parameter or null literal
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypesForCaseWhen(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypes(Unknown Source)
at org.hsqldb.ParserDML.resolveUpdateExpressions(Unknown Source)
at org.hsqldb.ParserDML.compileUpdateStatement(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 41 more
If you explicitly cast the parameter like this:
INSERT INTO EMPLOYEE VALUES (:id, CASE WHEN :salary > 0 THEN CAST(:salary AS NUMBER(18) END

It works in both HSQL and Oracle.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1390
HyperSQL Database Engine (HSQLDB) / Bugs / #1390 ArrayIndexOutOfBoundsException in org.hsqldb.DatabaseManager.getDatabaseObject
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The application has 8 threads opening and closing connections to hundreds of HSQLDB databases. The application is running with the 2.2.9 hsqldb.jar.
java.lang.ArrayIndexOutOfBoundsException: -1
    at org.hsqldb.store.BaseHashMap$BaseHashIterator.next(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabaseObject(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.newSession(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
    at java.sql.DriverManager.getConnection(DriverManager.java:615)
    at java.sql.DriverManager.getConnection(DriverManager.java:167)
    at org.apache.commons.dbcp.DriverManagerConnectionFactory.createConnection(DriverManagerConnectionFactory.java:78)
    at org.apache.commons.dbcp.PoolableConnectionFactory.makeObject(PoolableConnectionFactory.java:582)
    at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1181)
    at org.apache.commons.dbcp.PoolingDataSource.getConnection(PoolingDataSource.java:106)

I suspect the issue is that the fileDatabaseMap isn't synchronized consistently.
In addDatabaseObject, getDatabaseObject, and lookupDatabaseObject, the synchronization is on the DatabaseManager class. In removeDatabase, it's on the map.
I glanced at the 2.3.2 code and it didn't seem to differ here.
Thanks.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1391
HyperSQL Database Engine (HSQLDB) / Bugs / #1391 setObject with UUID throws excepton
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We work with UUIDs. Every time when I call statement.setObject(parameterIndex, java.util.UUID.randumUUID().toString()); it throws an SQL exception. The column is generated with VarChar(100). Though there should be no Error. I solved it like this:
I modified in method setObject of org hsqldb.jdbc at line 1055:

public synchronized void setObject(int parameterIndex, Object x) throws SQLException
{
....if(UUID.randomUUID().getClass().equals(x.getClass()))
........x = x.toString();
....setParameter(parameterIndex, x);
}

It would be nice if Objects would be converted (when possible) to the Type of table. This may could be manged by an boolean.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1392
HyperSQL Database Engine (HSQLDB) / Bugs / #1392 Wrong results from inner join with subquery in join condition
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following code was extracted from https://github.com/slick/slick/blob/tmp/later-resultsetmapping/slick-testkit/src/main/scala/com/typesafe/slick/testkit/tests/MainTest.scala
create table "users" ("id" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,"first" varchar(64) NOT NULL,"last" VARCHAR(254));
create table "orders" ("userID" INTEGER NOT NULL,"orderID" INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,"product" VARCHAR(254) NOT NULL,"shipped" BOOLEAN NOT NULL,"rebate" BOOLEAN);
insert into "users" ("first")  values ('a');
insert into "users" ("first")  values ('c');
insert into "orders" ("userID","product","shipped")  values (1,'x',false);
insert into "orders" ("userID","product","shipped")  values (2,'y',false);
insert into "orders" ("userID","product","shipped")  values (2,'z',false);
select x2."first", x3."orderID"
from (
  select x4."id" as "id", x4."first" as "first", x4."last" as "last"
  from "users" x4
) x2
inner join (
  select x5."rebate" as "rebate", x5."product" as "product", x5."orderID" as "orderID", x5."shipped" as "shipped", x5."userID" as "userID"
  from "orders" x5
) x3
on (x3."userID" = x2."id") and (x3."orderID" = (
  select max(x6."orderID")
  from "orders" x6
  where x3."userID" = x6."userID"
));

On Hsqldb 2.8.2 it produces two rows ('a', 1) and ('c', 3). PostgreSQL, MySQL, H2, SQLite and Derby all agree with this result. Hsqldb 2.3.2 produces an empty result set.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1393
HyperSQL Database Engine (HSQLDB) / Bugs / #1393 Values scalar sub-query causes NullPointerException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A query that uses VALUES inside a scalar sub-query gives a NullPointerException.
Here is the query:
select (values (1)) from "foodmart"."department";
Error: java.lang.NullPointerException java.lang.NullPointerException (state=S1000,code=-458)
java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at sqlline.Commands.execute(Commands.java:822)
    at sqlline.Commands.sql(Commands.java:732)
    at sqlline.SqlLine.dispatch(SqlLine.java:807)
    at sqlline.SqlLine.begin(SqlLine.java:681)
    at sqlline.SqlLine.start(SqlLine.java:398)
    at sqlline.SqlLine.main(SqlLine.java:292)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 8 more
Caused by: java.lang.NullPointerException
    at org.hsqldb.ParserDQL.XreadSimpleValueExpressionPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
    at org.hsqldb.ParserDQL.XreadValueExpression(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSelect(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
    at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
    ... 10 more

FYI, I am developing on Apache Calcite, on https://issues.apache.org/jira/browse/CALCITE-259.
I have a workaround so I don't consider this problem to be urgent. The workaround is as follows:
select (select null from (values 1) union all select null from (values 1)) from "foodmart"."department";

Error: cardinality violation (state=21000,code=-3201)
java.sql.SQLException: cardinality violation

(Yes, the desired effect is to produce a cardinality violation.)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1394
HyperSQL Database Engine (HSQLDB) / Bugs / #1394 Oracle syntax mode, update with sub query aggregation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query runs successfully on Oracle but fails on HSQL
create table outerTable (outerCol NUMBER(9,0));
create table innerTable (innerCol NUMBER(9,0));
update outerTable set outerCol = (Select sum(innerCol) * outerCol from innerTable);

org.hsqldb.HsqlException: expression not in aggregate or GROUP BY columns: PUBLIC.OUTERTABLE.OUTERCOL
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1395
HyperSQL Database Engine (HSQLDB) / Bugs / #1395 Wrong constant used for indexing
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the TABLE_PRIVILEGES function of dbinfo.DatabaseInformationMain.java, the TABLE_PRIVILEGES constant is used to index into sysTables (line 3347) and sysTableHsqlNames (line 3350), but uses SEQUENCES to index into sysTableHsqlNames at line 3362/3.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1396
HyperSQL Database Engine (HSQLDB) / Bugs / #1396 "Error: Incompatible data types" thrown during CASE Statement with Sub-Query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB Version: 2.3.2
SQL Client: SQuirreL SQL Client Version 3.5.0
Error below is thrown,
Error: incompatible data types in combination
SQLState: 42562
ErrorCode: -5562
while running the SQL below,

SELECT 
    CASE (
        SELECT 
            COUNT("ENAME")
        FROM 
            "SCOTT"."EMP"
        WHERE 
            "JOB" = 'PRESIDENT'
        GROUP BY 
            "ENAME") 
    WHEN 0 THEN NULL 
    WHEN 1 THEN "ENAME" 
    ELSE (
        SELECT * FROM (SELECT * FROM (VALUES 1)
        UNION ALL
        SELECT * FROM (VALUES 1))) 
    END AS "$f0"
FROM 
    "SCOTT"."EMP"
WHERE 
    "JOB" = 'PRESIDENT'

Procedure to replicate,
1) Run the DDL.sql to create the Schema and Tables.
2) Run the DML.sql to populate data into the Tables.
3) Run the SQL as decsribed above.
Note,
1) This may be related to https://sourceforge.net/p/hsqldb/bugs/1393/ as I am currently looking into the https://issues.apache.org/jira/browse/CALCITE-259, to rewrite queries and push it down to the underlying data source (in my case HSQLDB).
Thanks!
3 Attachments


DDL.sql


DML.sql





incompatible_data_types.png
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1397
HyperSQL Database Engine (HSQLDB) / Bugs / #1397 Order by log(column) changes the type of column in select list
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the following example o_orderkey and o_customer_key are integers, but in the 2’nd query o_orderkey is returned as a double:
1) SELECT o_orderkey from orders order by log(o_customer_key) – returns o_orderkey as an Integer
2) SELECT o_orderkey from orders order by log(o_orderkey) - returns o_orderkey as a Double
This seems like a bug. It looks like the o_orderkey field in the select list received the type of the order by log(o_orderkey).
Attached program to reproduce the problem, compile and run as follows
javac -cp hsqldb.jar HsqlProblem3.java
java -cp "hsqldb.jar;." HsqlProblem3
Output for me is :
running sql : SELECT o_orderkey from orders order by log(o_customer_key)
O_ORDERKEY ( ClassName : java.lang.Integer , ColumnType : 4 )
1
running sql : SELECT o_orderkey from orders order by log(o_orderkey)
O_ORDERKEY ( ClassName : java.lang.Double , ColumnType : 8 )
1.0E0
1 Attachments


HsqlProblem3.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1398
HyperSQL Database Engine (HSQLDB) / Bugs / #1398 Where exists using an temp table with join has no results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In a specific case, when using a 'where exists' clause the hsqldb should return results, but it doesn't. The next query is used:
SELECT *
FROM (
SELECT T1.ID AS ID
FROM TABLE1 T1
LEFT OUTER JOIN TABLE2 T2 ON ( T1.ID = T2.CASEID )
) TABLE_ALIAS
WHERE EXISTS (
SELECT 1
FROM TABLE3 T3
WHERE (TABLE_ALIAS.ID = T3.CASEID)
)
Strange thing is: when the 'left outer join' clause on TABLE2 is removed, the results are correct.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1399
HyperSQL Database Engine (HSQLDB) / Bugs / #1399 Cannot assign sequence value to a variable in a stored procedure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is not possibile to assign the next value for a sequence to a variable, in a stored procedure. 
Below the example:
(suppose you created a sequence like: create sequence testSequence)
CREATE PROCEDURE test()
MODIFIES SQL DATA
BEGIN ATOMIC
DECLARE a BIGINT ;
SET a = SELECT 1 FROM (VALUES(0));
SET a = SELECT NEXT VALUE FOR testSequence  FROM (VALUES(0));

END
the error is: "sequence expression cannot be used in this context"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1400
HyperSQL Database Engine (HSQLDB) / Bugs / #1400 closing and immediately opening a DB fails
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After writing a medium sized DB (about 100MB) i experience the problem that opening the same DB immediately after closing it fails.
Is there a way i can wait until the DB is finally closed so i can it open again?
This is the sequence as seen in the log file:
2015-05-20 14:37:52,140 [Thread1]  INFO DriverManagerConnectionProviderImpl:281 - HHH000030: Cleaning up connection pool [jdbc:hsqldb:/tmp/MyDB;shutdown=true]

2015-05-20 14:38:14,313 [HSQLDB Timer @64131a9e]  INFO ENGINE:? - checkpointClose end
2015-05-20 14:38:14,316 [HSQLDB Timer @64131a9e]  INFO ENGINE:? - Checkpoint end - txts: 2335208
2015-05-20 14:38:14,375 [HSQLDB Timer @64131a9e]  INFO ENGINE:? - dataFileCache commit start
2015-05-20 14:38:14,382 [HSQLDB Timer @64131a9e]  INFO ENGINE:? - dataFileCache commit end

2015-05-20 14:38:14,857 [Thread1]  WARN MyClass:347 - Warning: Exception during start
org.hibernate.exception.JDBCConnectionException: Error calling Driver#connect
    at org.hibernate.engine.jdbc.connections.internal.BasicConnectionCreator$1$1.convert(BasicConnectionCreator.java:122)
    at org.hibernate.engine.jdbc.connections.internal.BasicConnectionCreator.convertSqlException(BasicConnectionCreator.java:140)
    at org.hibernate.engine.jdbc.connections.internal.DriverConnectionCreator.makeConnection(DriverConnectionCreator.java:58)
    at org.hibernate.engine.jdbc.connections.internal.BasicConnectionCreator.createConnection(BasicConnectionCreator.java:75)
    at org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl.configure(DriverManagerConnectionProviderImpl.java:106)
    at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:111)
    at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:234)
    at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)
    at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.buildJdbcConnectionAccess(JdbcServicesImpl.java:260)
    at org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:94)
    at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.configureService(StandardServiceRegistryImpl.java:111)
    at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:234)
    at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:206)
    at org.hibernate.cfg.Configuration.buildTypeRegistrations(Configuration.java:1887)
    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1845)
    at org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1930)
    [...]
Caused by: java.sql.SQLException: Database lock acquisition failure: attempt to connect while db opening /closing
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
    at org.hibernate.engine.jdbc.connections.internal.DriverConnectionCreator.makeConnection(DriverConnectionCreator.java:55)
    ... 281 more
Caused by: org.hsqldb.HsqlException: Database lock acquisition failure: attempt to connect while db opening /closing
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.newSession(Unknown Source)

2015-05-20 14:38:23,789 [HSQLDB Timer @64131a9e]  INFO ENGINE:? - Database closed
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1401
HyperSQL Database Engine (HSQLDB) / Bugs / #1401 Maven snapshot version numbering
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Currently all snapshots are 
in a directory SNAPSHOT.
I recommend naming this directory based on the version number. E.g. 2.3.3-SNAPSHOT
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1402
HyperSQL Database Engine (HSQLDB) / Bugs / #1402 View using "with" clause cannot be selected
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A view using a "with" clause can be created successfully but cannot be selected.
The following runs successfully on 2.3.2 but not on SNAPSHOT

create table a_table (a_col varchar(42));
create view a_view as with w_clause as (select * from a_table) select * from w_clause;
select * from a_view;

ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - user lacks privilege or object not found: w_clause
Error Code: -5501 / State 42501
Simply executing the select outside the view runs successfully
with w_clause as (select * from a_table) select * from w_clause;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1403
HyperSQL Database Engine (HSQLDB) / Bugs / #1403 Grant examples fail
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We have a project, where we need to invoke some Stored Procedures. Doing so via a Trigger is working, but when trying to access them directly, we got the error:
org.hsqldb.HsqlException: user lacks privilege or object not found: RESET_SEQUENCES
As the Stored Procedure is working via the Trigger, we tried to look at the permissions, and from the documentation: http://www.hsqldb.org/doc/guide/ch09.html#grant-section
We can read how to do it. However, the example there:
GRANT ALL ON CLASS "java.lang.Math.abs" TO PUBLIC;
Is causing the following error:
org.hsqldb.HsqlException: unexpected token: TO
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1404
HyperSQL Database Engine (HSQLDB) / Bugs / #1404 Missing class 'StatementSignal'
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Good day,
I think the class 'StatementSignal' is currently missing on the trunk.
The ParserRoutine is referring it on line 1988
Kind regards,
Richard
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1405
HyperSQL Database Engine (HSQLDB) / Bugs / #1405 Table alias fails for INSERT INTO in Oracle syntax compatibility mode
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using an instance of HSQLDB started with Oracle syntax compatibility (sql.syntax_ora=true), the usage of table alias in INSERT INTO statements will fail with an unexpected token error.
Example:
-- create the example table# create table mytable (my_id varchar2(40 char) not null,my_name varchar2(1000 har),constraint my_id_pk primary key (my_id));
-- this insert will work fine
insert into mytable (my_id,my_name) values ('item1','First item');
-- but this will fail claiming unexpected token for mt
insert into mytable mt (mt.my_id,mt.my_name) values ('item2','Second item');
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1406
HyperSQL Database Engine (HSQLDB) / Bugs / #1406 NPE when a unique constraint is violated
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A null pointer exception is thrown in IndexAVLMemory when a unique constraint is violated:
Caused by: java.lang.NullPointerException
at org.hsqldb.index.IndexAVLMemory.insert(IndexAVLMemory.java:236)
at org.hsqldb.persist.RowStoreAVL.indexRow(RowStoreAVL.java:231)
... 44 more
The old and correct behavior was to get a SQLIntegrityConstraintViolationException in such a case.
Test case provided.
1 Attachments


mavenproject5.tar.gz
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1407
HyperSQL Database Engine (HSQLDB) / Bugs / #1407 incompatible data types in combination when using COALESCE in case of DATE type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In case of DATE type this does not work:
COALESCE(?,date_vale)
This workaround works:
CASE WHEN ? is NULL THEN date_vale ELSE ? END
HSQL 2.3.2
Caused by: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.6.0.v20150309-bf26070): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: incompatible data types in combination
Error Code: -5562
Call: SELECT ID, RELEASE_DOMAIN, RELEASE_DATE, RELEASE_VERSION, MOD_DATE, MOD_USER_ID, REC_DATE, REC_USER_ID, DESCRIPTION, NAME FROM LC_RELEASED_VERSION WHERE ((((RELEASE_DOMAIN = ?) AND (RELEASE_VERSION = COALESCE(?,RELEASE_VERSION ))) AND (NAME = COALESCE(?,NAME ))) AND (RELEASE_DATE = COALESCE(?,RELEASE_DATE )))
bind => [4 parameters bound]
Query: ReadAllQuery(name="ReleasedVersion.findByFilter" referenceClass=ReleasedVersion sql="SELECT ID, RELEASE_DOMAIN, RELEASE_DATE, RELEASE_VERSION, MOD_DATE, MOD_USER_ID, REC_DATE, REC_USER_ID, DESCRIPTION, NAME FROM LC_RELEASED_VERSION WHERE ((((RELEASE_DOMAIN = ?) AND (RELEASE_VERSION = COALESCE(?,RELEASE_VERSION ))) AND (NAME = COALESCE(?,NAME ))) AND (RELEASE_DATE = COALESCE(?,RELEASE_DATE )))")
at org.eclipse.persistence.exceptions.DatabaseException.sqlException(DatabaseException.java:340)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:684)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.executeCall(DatabaseAccessor.java:560)
at org.eclipse.persistence.internal.sessions.AbstractSession.basicExecuteCall(AbstractSession.java:2055)
at org.eclipse.persistence.sessions.server.ServerSession.executeCall(ServerSession.java:570)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:242)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeCall(DatasourceCallQueryMechanism.java:228)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.executeSelectCall(DatasourceCallQueryMechanism.java:299)
at org.eclipse.persistence.internal.queries.DatasourceCallQueryMechanism.selectAllRows(DatasourceCallQueryMechanism.java:694)
at org.eclipse.persistence.internal.queries.ExpressionQueryMechanism.selectAllRowsFromTable(ExpressionQueryMechanism.java:2740)
at org.eclipse.persistence.internal.queries.ExpressionQueryMechanism.selectAllRows(ExpressionQueryMechanism.java:2693)
at org.eclipse.persistence.queries.ReadAllQuery.executeObjectLevelReadQuery(ReadAllQuery.java:541)
at org.eclipse.persistence.queries.ObjectLevelReadQuery.executeDatabaseQuery(ObjectLevelReadQuery.java:1173)
at org.eclipse.persistence.queries.DatabaseQuery.execute(DatabaseQuery.java:904)
at org.eclipse.persistence.queries.ObjectLevelReadQuery.execute(ObjectLevelReadQuery.java:1132)
at org.eclipse.persistence.queries.ReadAllQuery.execute(ReadAllQuery.java:442)
at org.eclipse.persistence.queries.ObjectLevelReadQuery.executeInUnitOfWork(ObjectLevelReadQuery.java:1220)
at org.eclipse.persistence.internal.sessions.UnitOfWorkImpl.internalExecuteQuery(UnitOfWorkImpl.java:2896)
at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1857)
at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1839)
at org.eclipse.persistence.internal.sessions.AbstractSession.executeQuery(AbstractSession.java:1804)
at org.eclipse.persistence.internal.jpa.QueryImpl.executeReadQuery(QueryImpl.java:258)
... 57 more
Caused by: java.sql.SQLSyntaxErrorException: incompatible data types in combination
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at org.apache.commons.dbcp.DelegatingConnection.prepareStatement(DelegatingConnection.java:281)
at org.apache.commons.dbcp.PoolingDataSource$PoolGuardConnectionWrapper.prepareStatement(PoolingDataSource.java:313)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1565)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.prepareStatement(DatabaseAccessor.java:1514)
at org.eclipse.persistence.internal.databaseaccess.DatabaseCall.prepareStatement(DatabaseCall.java:778)
at org.eclipse.persistence.internal.databaseaccess.DatabaseAccessor.basicExecuteCall(DatabaseAccessor.java:621)
... 77 more
Caused by: org.hsqldb.HsqlException: incompatible data types in combination
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.types.CharacterType.getAggregateType(Unknown Source)
at org.hsqldb.types.NumberType.getAggregateType(Unknown Source)
at org.hsqldb.types.Type.getAggregateType(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypesForCaseWhen(Unknown Source)
at org.hsqldb.ExpressionOp.resolveTypes(Unknown Source)
at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
at org.hsqldb.QuerySpecification.resolveExpressionTypes(Unknown Source)
at org.hsqldb.QuerySpecification.resolveTypesPartOne(Unknown Source)
at org.hsqldb.QueryExpression.resolve(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 85 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1408
HyperSQL Database Engine (HSQLDB) / Bugs / #1408 Problem with column labeling in java ResultSet
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Reading a db in locally from file to test a SQL query-generating API. I run the following Natural Join in java using the jdbc:
SELECT ActorID, ResourceID, ResourceType FROM (
(SELECT * FROM ActorGroups WHERE ActorID = 'actor2') 
NATURAL JOIN 
(SELECT * FROM GroupBundles) 
NATURAL JOIN
(SELECT * FROM BundleResources)
)
where the ActorTeams join table includes an ActorID and a GroupIP, GroupBundles join table includes GroupID, BundleID, and a policy string, and BundleResources join table includes a BundleID, ResourceID, and ResourceType string. All fields are strings.
I notice in the ResultSet that the columns are correctly matched to the data in the columns. However, the column labels are mixed up; instead of the columns "ActorID, ResourceID, and ResourceType" I get GroupID, policy, and ResourceID (which are not the columns that I selected). I'm thinking this is a bug.
I ran the same query on the same schema in a different relation DB and it worked as expected.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1409
HyperSQL Database Engine (HSQLDB) / Bugs / #1409 unexpected duplicate rows in result of GROUP BY primary_key on implicit cross-join
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
commands issued on a new in-memory database:
create table p1 (id int, nonid int, primary key (id));
insert into p1 values (1, 1);
insert into p1 values (11, 1);
insert into p1 values (111, 1);
create table p2 (id int, nonid int, primary key (id));
insert into p2 values (2, 1);
insert into p2 values (22, 1);
insert into p2 values (222, 1);
select p1.id from p2, p1 group by p1.id;
expected result:
1
11
111
got result:
1
11
111
1
11
111
1
11
111
select p1.id, count(*) from p2, p1 group by p1.id;
gives the expected result:
1 3
11 3
111 3
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1410
HyperSQL Database Engine (HSQLDB) / Bugs / #1410 General error since version 2.3.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Since version 2.3.2 something is broken and I get a "General error":
org.springframework.dao.TransientDataAccessResourceException: PreparedStatementCallback; SQL [WITH RECURSIVE virtual_category_with_children(parent_id, category_id, name, query, order_index) AS (SELECT parent_virtual_category_id, id, name, query, order_index FROM virtual_category WHERE type='tree' AND id = ? UNION ALL SELECT vc.parent_virtual_category_id, vc.id, vc.name, vc.query, vc.order_index FROM virtual_category_with_children t, virtual_category vc WHERE vc.parent_virtual_category_id=t.category_id) SELECT * FROM virtual_category_with_children]; General error; nested exception is java.sql.SQLException: General error
at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:108)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:73)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:645)
at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:680)
at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:712)
at org.springframework.jdbc.core.JdbcTemplate.query(JdbcTemplate.java:727)
at com.s24.api.entity.internal.jdbc.JdbcVirtualCategoryDao.getCategoryTree(JdbcVirtualCategoryDao.java:56)
at com.s24.api.entity.internal.jdbc.JdbcVirtualCategoryDao.getCategoryTree(JdbcVirtualCategoryDao.java:45)
at com.s24.api.entity.internal.jdbc.JdbcVirtualCategoryDaoTest.testGetCategoryTree(JdbcVirtualCategoryDaoTest.java:75)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
at org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)
at org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)
at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: java.sql.SQLException: General error
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
at org.springframework.jdbc.core.JdbcTemplate$1.doInPreparedStatement(JdbcTemplate.java:688)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:629)
... 36 more
Caused by: org.hsqldb.HsqlException: General error
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.QueryExpression.getResultRecursive(Unknown Source)
at org.hsqldb.QueryExpression.getResult(Unknown Source)
at org.hsqldb.TableDerived.materialise(Unknown Source)
at org.hsqldb.StatementDMQL.materializeSubQueries(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 40 more
1 Attachments


db01.tables.hsqldb.sql
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1411
HyperSQL Database Engine (HSQLDB) / Bugs / #1411 index misses rows "where column < VERY_LARGE_VALUE order by column desc"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create table t (i int);
insert into t values(0);
-- querying without index matches the row.
select i from t where i < 10000000000 order by i desc;
0
create index ix on t(i);
-- querying with index fails to match the row. This is the one problem case.
select i from t where i < 10000000000 order by i desc;
Fetched 0 rows.
-- querying with a slightly smaller value matches the row, as it should.
select i from t where i < 1000000000 order by i desc;
0
-- querying without order by i desc matches the row, as it should.
select i from t where i < 10000000000;
0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1412
HyperSQL Database Engine (HSQLDB) / Bugs / #1412 index causes null values to match "column >= LARGE_NEGATIVE_VALUE"
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
create table t (i int);
insert into t values(0);
insert into t values(null);
-- querying without index correctly matches the 1 non-null row.
select i from t where i >= -10000000000;
0
create index ix on t(i);
-- querying with index incorrectly matches the null row.
select i from t where i >= -10000000000;
0
Fetched 2 rows.
-- strict inequality ">" continues to work correctly
select i from t where i > -10000000000;
0
-- an insufficiently large value also works correctly
select i from t where i >= -1000000000;
0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1413
HyperSQL Database Engine (HSQLDB) / Bugs / #1413 Illegal SQL is persisted for table valued function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider the following table-valued function:
CREATE FUNCTION f_tables5 (v1 INTEGER, v2 INTEGER, v3 INTEGER)
RETURNS TABLE (
    v INTEGER,
    s INTEGER
)
READS SQL DATA
BEGIN ATOMIC
    RETURN TABLE(
        SELECT * FROM 
            (SELECT v1, v2           FROM information_schema.system_users LIMIT 1)
        UNION ALL
        SELECT * FROM 
            (SELECT v2, v1 + v2      FROM information_schema.system_users LIMIT 1)
        UNION ALL
        SELECT * FROM 
            (SELECT v3, v1 + v2 + v3 FROM information_schema.system_users LIMIT 1)
    );
END

When this function is created via jdbc:hsqldb:file:C:/data/hsqldb/test.db, it is effectively stored as
CREATE FUNCTION PUBLIC.F_TABLES5(IN V1 INTEGER,IN V2 INTEGER,IN V3 INTEGER) RETURNS TABLE(V INTEGER,S INTEGER) SPECIFIC F_TABLES5_10249 LANGUAGE SQL NOT DETERMINISTIC READS SQL DATA CALLED ON NULL INPUT BEGIN ATOMIC RETURN TABLE(SELECT C1,C2 FROM(SELECT V1,V2 FROM INFORMATION_SCHEMA.SYSTEM_USERS LIMIT 1)UNION ALL SELECT C1,C2 FROM(SELECT V2,V1+V2 FROM INFORMATION_SCHEMA.SYSTEM_USERS LIMIT 1)UNION ALL SELECT C1,C2 FROM(SELECT V3,V1+V2+V3 FROM INFORMATION_SCHEMA.SYSTEM_USERS LIMIT 1));END

Which is illegal SQL. The column names C1 and C2 do not exist and the following exception is thrown upon reopening the database
java.lang.Error: java.sql.SQLException: error in script file line: 102 C:\data\hsqldb\test.db user lacks privilege or object not found: C1
    at org.jooq.test.jOOQAbstractTest.getConnection0(jOOQAbstractTest.java:1006)
    at org.jooq.test.jOOQAbstractTest.getConnection(jOOQAbstractTest.java:754)
    at org.jooq.test.jOOQAbstractTest.setUp(jOOQAbstractTest.java:578)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.sql.SQLException: error in script file line: 102 C:\data\hsqldb\test.db user lacks privilege or object not found: C1
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
    at org.jooq.test.jOOQAbstractTest.getConnection1(jOOQAbstractTest.java:1026)
    at org.jooq.test.jOOQAbstractTest.getConnection0(jOOQAbstractTest.java:969)
    ... 28 more
Caused by: org.hsqldb.HsqlException: error in script file line: 102 C:\data\hsqldb\test.db user lacks privilege or object not found: C1
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
    at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
    at org.hsqldb.persist.Log.processScript(Unknown Source)
    at org.hsqldb.persist.Log.open(Unknown Source)
    at org.hsqldb.persist.Logger.open(Unknown Source)
    at org.hsqldb.Database.reopen(Unknown Source)
    at org.hsqldb.Database.open(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.newSession(Unknown Source)
    ... 33 more
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: C1
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.ExpressionColumn.checkColumnsResolved(Unknown Source)
    at org.hsqldb.ParserRoutine.resolveOuterReferencesAndTypes(Unknown Source)
    at org.hsqldb.ParserRoutine.resolveOuterReferencesAndTypes(Unknown Source)
    at org.hsqldb.ParserRoutine.compileReturnValue(Unknown Source)
    at org.hsqldb.ParserRoutine.compileSQLProcedureStatementOrNull(Unknown Source)
    at org.hsqldb.ParserRoutine.compileSQLProcedureStatementList(Unknown Source)
    at org.hsqldb.ParserRoutine.compileCompoundStatement(Unknown Source)
    at org.hsqldb.ParserRoutine.compileSQLProcedureStatementOrNull(Unknown Source)
    at org.hsqldb.ParserRoutine.readRoutineSQLBody(Unknown Source)
    at org.hsqldb.ParserRoutine.readRoutineBody(Unknown Source)
    at org.hsqldb.ParserRoutine.readCreateProcedureOrFunction(Unknown Source)
    at org.hsqldb.ParserRoutine.compileCreateProcedureOrFunction(Unknown Source)
    at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
    at org.hsqldb.Session.compileStatement(Unknown Source)
    ... 42 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1414
HyperSQL Database Engine (HSQLDB) / Bugs / #1414 NullPointerException regression in 2.3.3 on INFORMATION_SCHEMA queries
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I believe this is a regression in 2.3.3 as I can reproduce it only after upgrading. Consider the following table:
CREATE TABLE t_dates (
  id int,
  d date,
  t time,
  ts timestamp,
  d_int int,
  ts_bigint bigint,
  i_y interval year to month,
  i_d interval day to second,

  CONSTRAINT pk_t_dates PRIMARY KEY (id)
)

And now this query against the INFORMATION_SCHEMA:
select 
  "INFORMATION_SCHEMA"."COLUMNS"."COLUMN_NAME", 
  "INFORMATION_SCHEMA"."COLUMNS"."ORDINAL_POSITION", 
  nvl("INFORMATION_SCHEMA"."ELEMENT_TYPES"."COLLECTION_TYPE_IDENTIFIER", nvl2("INFORMATION_SCHEMA"."COLUMNS"."INTERVAL_TYPE", ("INFORMATION_SCHEMA"."COLUMNS"."DATA_TYPE" || ' ' || "INFORMATION_SCHEMA"."COLUMNS"."INTERVAL_TYPE"), "INFORMATION_SCHEMA"."COLUMNS"."DATA_TYPE")) as "datatype", 
  "INFORMATION_SCHEMA"."COLUMNS"."IDENTITY_GENERATION", 
  "INFORMATION_SCHEMA"."COLUMNS"."IS_NULLABLE", 
  "INFORMATION_SCHEMA"."COLUMNS"."COLUMN_DEFAULT", 
  "INFORMATION_SCHEMA"."COLUMNS"."CHARACTER_MAXIMUM_LENGTH", 
  "INFORMATION_SCHEMA"."COLUMNS"."NUMERIC_PRECISION", 
  "INFORMATION_SCHEMA"."COLUMNS"."NUMERIC_SCALE", 
  "INFORMATION_SCHEMA"."COLUMNS"."UDT_NAME"
from "INFORMATION_SCHEMA"."COLUMNS"
  left outer join "INFORMATION_SCHEMA"."ELEMENT_TYPES"
  on (
    "INFORMATION_SCHEMA"."COLUMNS"."TABLE_SCHEMA" = "INFORMATION_SCHEMA"."ELEMENT_TYPES"."OBJECT_SCHEMA"
    and "INFORMATION_SCHEMA"."COLUMNS"."TABLE_NAME" = "INFORMATION_SCHEMA"."ELEMENT_TYPES"."OBJECT_NAME"
    and "INFORMATION_SCHEMA"."COLUMNS"."DTD_IDENTIFIER" = "INFORMATION_SCHEMA"."ELEMENT_TYPES"."COLLECTION_TYPE_IDENTIFIER"
  )
where (
  "INFORMATION_SCHEMA"."COLUMNS"."TABLE_SCHEMA" = 'PUBLIC'
  and "INFORMATION_SCHEMA"."COLUMNS"."TABLE_NAME" = 'T_DATES'
)
order by "INFORMATION_SCHEMA"."COLUMNS"."ORDINAL_POSITION" asc

I'm getting a NullPoitnerException as follows:
        at org.jooq.impl.Utils.translate(Utils.java:1673)
        at org.jooq.impl.DefaultExecuteContext.sqlException(DefaultExecuteContext.java:661)
        at org.jooq.impl.AbstractQuery.execute(AbstractQuery.java:356)
        at org.jooq.impl.AbstractResultQuery.fetch(AbstractResultQuery.java:300)
        at org.jooq.impl.SelectImpl.fetch(SelectImpl.java:2398)
        at org.jooq.util.hsqldb.HSQLDBTableDefinition.getElements0(HSQLDBTableDefinition.java:127)
        at org.jooq.util.AbstractElementContainerDefinition.getElements(AbstractElementContainerDefinition.java:89)
        at org.jooq.util.AbstractElementContainerDefinition.getElement(AbstractElementContainerDefinition.java:113)
        at org.jooq.util.AbstractElementContainerDefinition.getElement(AbstractElementContainerDefinition.java:109)
        at org.jooq.util.AbstractTableDefinition.getColumn(AbstractTableDefinition.java:143)
        at org.jooq.util.hsqldb.HSQLDBDatabase.loadPrimaryKeys(HSQLDBDatabase.java:111)
        at org.jooq.util.AbstractDatabase.getRelations0(AbstractDatabase.java:1090)
        at org.jooq.util.AbstractDatabase.getRelations(AbstractDatabase.java:928)
        at org.jooq.util.DefaultColumnDefinition.getPrimaryKey(DefaultColumnDefinition.java:74)
        at org.jooq.util.AbstractTableDefinition.getPrimaryKey(AbstractTableDefinition.java:79)
        at org.jooq.util.JavaGenerator.generateTable(JavaGenerator.java:2742)
        at org.jooq.util.JavaGenerator.generateTable(JavaGenerator.java:2736)
        at org.jooq.util.JavaGenerator.generateTables(JavaGenerator.java:2723)
        at org.jooq.util.JavaGenerator.generate(JavaGenerator.java:307)
        at org.jooq.util.JavaGenerator.generate(JavaGenerator.java:267)
        at org.jooq.util.GenerationTool.run(GenerationTool.java:429)
        at org.jooq.util.GenerationTool.generate(GenerationTool.java:176)
        at org.jooq.util.maven.Plugin.execute(Plugin.java:120)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:347)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:154)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:582)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:214)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:158)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: java.sql.SQLException: java.lang.NullPointerException java.lang.NullPointerException
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
        at org.hsqldb.jdbc.JDBCPreparedStatement.execute(Unknown Source)
        at org.jooq.tools.jdbc.DefaultPreparedStatement.execute(DefaultPreparedStatement.java:194)
        at org.jooq.impl.AbstractResultQuery.execute(AbstractResultQuery.java:257)
        at org.jooq.impl.AbstractQuery.execute(AbstractQuery.java:342)
        ... 41 more
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
        at org.hsqldb.error.Error.error(Unknown Source)
        at org.hsqldb.result.Result.newErrorResult(Unknown Source)
        at org.hsqldb.StatementDMQL.execute(Unknown Source)
        at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
        at org.hsqldb.Session.execute(Unknown Source)
        ... 46 more
Caused by: java.lang.NullPointerException
        at org.hsqldb.ExpressionArithmetic.getValue(Unknown Source)
        at org.hsqldb.ExpressionArithmetic.getValue(Unknown Source)
        at org.hsqldb.Expression.getValue(Unknown Source)
        at org.hsqldb.ExpressionOp.getValue(Unknown Source)
        at org.hsqldb.ExpressionOp.getValue(Unknown Source)
        at org.hsqldb.Expression.getValue(Unknown Source)
        at org.hsqldb.ExpressionOp.getValue(Unknown Source)
        at org.hsqldb.QuerySpecification.buildResult(Unknown Source)
        at org.hsqldb.QuerySpecification.getSingleResult(Unknown Source)
        at org.hsqldb.QuerySpecification.getResult(Unknown Source)
        at org.hsqldb.StatementQuery.getResult(Unknown Source)
        ... 49 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1415
HyperSQL Database Engine (HSQLDB) / Bugs / #1415 bug with queries with more than one "right outer join" since the version 2.2.9
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It seems that there is a bug with queries with more than one "right outer join" since the version 2.2.9.
It looks that the problem is not direct in the database but in the jdbc connector.
I test them in the Server Mode and connect with SQuirrleL.
scenario:
Table: A, B, C
Query: C left outer join B left outer join A
Data: Row in A and B exist but not in C
Database (>=2.2.8), Connector in SQuirrleL (2.2.8) -> found A, B
Database (>=2.2.8), Connector in SQuirrleL (>=2.2.9) -> found only A
Real Example

create table TABLE_A (
id bigint not null,
a_id varchar(8) not null,
primary key (id)
);
create table TABLE_BASE_C (
id bigint not null,
state varchar(255) not null,
primary key (id)
);
create table TABLE_C (
mode varchar(255) not null,
str varchar(255) not null,
id bigint not null,
table_b_id bigint not null,
primary key (id)
);
create table TABLE_B (
id bigint not null,
state varchar(255) not null,
p integer not null,
a_id bigint not null,
primary key (id)
);
insert into TABLE_A(a_id, id) values('1', 1);
insert into TABLE_B(a_id, state, p, id) values (1, 'CLOSE', 5, 5);
select
a.id as aid,
b.id as bid,
b.state as dstate,
c.id as cid 
from
TABLE_C c 
inner join
TABLE_BASE_C bc 
on c.id=bc.id 
right outer join
TABLE_B b 
on c.table_b_id=b.id 
and (
(
c.mode='CLOSE'
and c.str='STR'
) 
) 
right outer join
TABLE_A a 
on b.a_id=a.id 
and (
b.p=5
) 
where
a.a_id='1';

Result with 2.2.8
1, 5, 'CLOSE', null
Result with 2.2.9 and higher
1, null, null, null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1416
HyperSQL Database Engine (HSQLDB) / Bugs / #1416 indexed null comparison gives wrong answer
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
sql> create table t (key int, data int);
sql> insert into t values(1, null);
1 row updated.
sql> select * from t x where exists (select * from t y where y.key > x.data);
KEY DATA

Fetched 0 rows.
-- same query gives wrong answer when using index:
sql> create index tkey on t(key);
sql> select * from t x where exists (select * from t y where y.key > x.data);
KEY DATA

1
sql>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1417
HyperSQL Database Engine (HSQLDB) / Bugs / #1417 Connection does not become invalid after HD loss
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With HSQLDB 2.3.2 on Windows 7.
Create/Connect to a db on a network drive (usb stick).
Disconnect (I suspect a similar behavior occurs with a full hard disk)
You can keep CIUDing without any problems and even close your db without running into any exceptions.
It is very graceful behavior to be able to continue working even if the hd is lost (temporarily), but in my usecase too graceful (a user can work for hours against the database without realizing his changes are never saved).
I'd expect the Connection to become invalid after encountering such a problem, or some driver specific way to detect/notify me of this?
maybe Connection.getWarnings()?
or a Connection.setNetworkTimeout ?
(the attachment contains the exceptions that are printed by the sync thread)
1 Attachments


log.txt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1418
HyperSQL Database Engine (HSQLDB) / Bugs / #1418 Checkpoint deadlock in mvcc read_committed mode versions 2.2.6, 2.3.2, 2.3.3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use HSQLDB for an image caching system. The images themselves are stored on disk but an image statistics (last access, usages etc) and location on disk are stored in HSQLDB. I experience deadlocks at the point the logfile is processed and emptied.
Even though not sure this is because of my own code (it locks rows when updating statistics and when records are evicted, Spring and Hibernate should commit the sessions), I haven't experienced any deadlock issues with MYSQL so far. 
I have a unittest that reproduces this issue on my machine. It runs 10 concurrent threads that read from the database (read and update same record's stats) and 1 thread that inserts records. I tried both direct jdbc:hsqldb:file: connections and standalone instance with jdbc:hsqldb:hsql connections. 
My connection string (issue happens with both cached and normal table settings):

jdbc:hsqldb:file:${java.io.tmpdir}/appdata/imageserver/registry;hsqldb.default_table_type=cached;hsqldb.tx=MVCC;hsqldb.tx_level=READ_COMMITTED

Furthermore I use a 20 connection pool (dbcp2).
I captured the session data together with a threaddump, see attachment.
1 Attachments


image_issue_3.txt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1419
HyperSQL Database Engine (HSQLDB) / Bugs / #1419 executeUpdate does not return the correct number
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
I found a bug during the execution of executeUpdate() of CallableStatement. 
The return value of executeUpdate is equal of the number of row inserted/deleted/updated as written in 
http://hsqldb.org/doc/src/org/hsqldb/jdbc/JDBCPreparedStatement.html#executeUpdate()
I created a small test - the attached file - that creates a very simple scenario:
a table with 2 columns, 4 store procedure for each operation and a test that:
1) Insert a tuple (with data = value), select that tuple
2) Update that tuple (with data = value2), select it
3) Delete it, select it (result = null).
As result of the test, the tuple is inserted, updated, selected and deleted correctly but the value of RowCount is always equal to ZERO!
For this test I used the same types I used in my code to find this bug: CallableStatement, HikariDataSource.
1 Attachments


TestBugHSQLDB.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1420
HyperSQL Database Engine (HSQLDB) / Bugs / #1420 Error on Cascade/No Action delete when I have 3 tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I found a bug in the current release. 
I have 3 tables with these parameters (PGS Syntax):
CREATE TABLE EXAMPLE_CLASS_A3 (
ID BIGINT NOT NULL PRIMARY KEY DEFAULT nextval('serial'),
NAME VARCHAR(255)
);
CREATE TABLE EXAMPLE_CLASS_B3 (
ID BIGINT NOT NULL PRIMARY KEY DEFAULT nextval('serial'),
A_ID INTEGER NOT NULL UNIQUE,
NAME VARCHAR(255)
);
CREATE TABLE EXAMPLE_CLASS_C3 (
ID BIGINT NOT NULL PRIMARY KEY DEFAULT nextval('serial'),
B_ID INTEGER NOT NULL UNIQUE,
NAME VARCHAR(255)
);
I use these alters:
ALTER TABLE EXAMPLE_CLASS_B3
ADD CONSTRAINT FK_EXAMPLE_CLASS_B3_EXAMPLE_CLASS_B3_A_ID
FOREIGN KEY (A_ID)
REFERENCES EXAMPLE_CLASS_A3(ID)
ON DELETE CASCADE;
ALTER TABLE EXAMPLE_CLASS_C3
ADD CONSTRAINT FK_EXAMPLE_CLASS_C3_EXAMPLE_CLASS_C3_B_ID
FOREIGN KEY (B_ID) 
REFERENCES EXAMPLE_CLASS_B3(ID) 
ON DELETE NO ACTION;
Insert rows into the tables (a_id and b_id maybe different):
insert into example_class_a3 (name) values ('a3');
insert into example_class_b3 (name, a_id) values ('b3', 0);
insert into example_class_c3 (name, b_id) values ('c3', 1);
When I would like to delete from 'example_class_b3', I get constrain validation error as expected.
But when I delete from 'example_class_a3' table, the result is 'updated count 1' and my expectation is a constrain validation error. This worked in 2.3.2 release.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1421
HyperSQL Database Engine (HSQLDB) / Bugs / #1421 "call current value for ..." returns null string, if called before "call next value for ..."
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"call current value for mycounter", if executed before "next value for mycounter" returns a null string. It should return the current value, I assume. This is through the DBManager GUI on 2.3.3.
If executed after a 'next value for ...', in the same DBManager session, it appears to work correclty.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1422
HyperSQL Database Engine (HSQLDB) / Bugs / #1422 NullPointerException on add constraint
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
if I try to execute a alter table statement I receive an NPE. I used HSQLDB 2.3.3.
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.persist.RowStoreAVL.indexRow(Unknown Source)
at org.hsqldb.persist.RowStoreAVL.moveData(Unknown Source)
at org.hsqldb.TableWorks.moveData(Unknown Source)
at org.hsqldb.TableWorks.addUniqueConstraint(Unknown Source)
at org.hsqldb.StatementSchema.getResult(Unknown Source)
at org.hsqldb.StatementSchema.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.executeDirectStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 37 more
Caused by: java.lang.NullPointerException
at org.hsqldb.index.IndexAVLMemory.insert(Unknown Source)
... 46 more
My alter table statement:
ALTER TABLE entdecker ADD CONSTRAINT chk_familyunique UNIQUE (nachname);

My create statement:
CREATE MEMORY TABLE PUBLIC.ENTDECKER(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 397) NOT NULL PRIMARY KEY,VORNAME VARCHAR(255),NACHNAME VARCHAR(255) NOT NULL,FACHGEBIET VARCHAR(255),TYP INTEGER);

Please fix this error and use e.g. Sonar to detect NPE before a release is performed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1423
HyperSQL Database Engine (HSQLDB) / Bugs / #1423 Concurrency problem with org.hsqldb.jdbc.JDBCResultSet.getTimestamp()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, 
I have noticed a thread locking problem when concurrently querying database for large results containing timestamps (calling org.hsqldb.jdbc.JDBCResultSet.getTimestamp() repeatedly from different threads).
After some debugging I narrowed it down to this method: HsqlDateTime.convertMillisToCalendar()
which contains synchronized block on a static Calendar field tempCalGMT:
public static long convertMillisToCalendar(Calendar calendar,
            long millis) {

        synchronized (tempCalGMT) {
            synchronized (calendar) {
                calendar.clear();
                tempCalGMT.setTimeInMillis(millis);
                calendar.set(tempCalGMT.get(Calendar.YEAR),
                             tempCalGMT.get(Calendar.MONTH),
                             tempCalGMT.get(Calendar.DAY_OF_MONTH),
                             tempCalGMT.get(Calendar.HOUR_OF_DAY),
                             tempCalGMT.get(Calendar.MINUTE),
                             tempCalGMT.get(Calendar.SECOND));

                return calendar.getTimeInMillis();
            }
        }
    }

This obviously presents a bottleneck when getting timestamp results from ResultSet using multiple threads, so I am wondering if it can perhaps be refactored in order to be more suitable for multithreaded applications?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1424
HyperSQL Database Engine (HSQLDB) / Bugs / #1424 ArrayIndexOutOfBoundsException from XEvent in 2.3.3
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Problem
Reproduced with 2.3.0 and 2.3.3, but NOT 2.2.9. Running Java 1.8.0_60.
When running an application with HSQL on the classpath I see the following error in the console now and then:
2015-11-04T13:15:46.108+0100 WARNING Exception on Toolkit thread
java.lang.ArrayIndexOutOfBoundsException: 85
at sun.awt.X11.XEvent.getFieldsAsString(XEvent.java:86)
at sun.awt.X11.XWrapperBase.toString(XWrapperBase.java:37)
at sun.awt.X11.XEvent.toString(XEvent.java:8)
at java.lang.String.valueOf(String.java:2994)
at sun.util.logging.PlatformLogger$JavaLoggerProxy.doLog(PlatformLogger.java:626)
at sun.util.logging.PlatformLogger.finer(PlatformLogger.java:387)
at sun.awt.X11.XToolkit.run(XToolkit.java:586)
at sun.awt.X11.XToolkit.run(XToolkit.java:532)
at java.lang.Thread.run(Thread.java:745)
After a lot of searching It turned out to be a problem with a xbindkeys mapping I'm using to map my scrollwheel to ALT+Left and ALT+Right (navigate back and forth in browsers and eclipse).
Steps to reproduce
1. Compile TesteFileChooser.java
2. Run it with version 2.3.3 on classpath, e.g. rm -r DB_Test.* ; java -cp hsqldb-2.3.3.jar:./ TesteFileChooser (sometimes an existing database hides the error).
3. Enter the following command in a different console: /usr/bin/xvkbd -xsendevent -text "\[Alt_L]\[Left]"
Comment
I have only been able to reproduce it with the xvkbd. If the -xsendevent argument is used the exception is not thrown.
Potentially related issue:
http://sourceforge.net/p/hsqldb/bugs/1304/
1 Attachments


TesteFileChooser.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1425
HyperSQL Database Engine (HSQLDB) / Bugs / #1425 Sequence generated only once during insert. 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a table using nextval('test_seq') as DEFAULT. It works, as long as I insert only 1 row. With more than one row it complains that the primary key contraint is violated. Is this behaviour intended or is this a bug? I'm attaching code to reproduce the problem, tested on HSQLDB 2.3.3. In PostgreSQL such sequence works as I expect - it generates a unique value for every inserted row.
CREATE TABLE test (
    val1 INTEGER,
    val2 INTEGER
);

INSERT INTO test (val1, val2) VALUES (1, 1);
INSERT INTO test (val1, val2) VALUES (1, 1);

SET DATABASE SQL SYNTAX PGS TRUE;

CREATE SEQUENCE test_seq;

CREATE TABLE test2 (
    id INTEGER PRIMARY KEY,
    val1 INTEGER,
    val2 INTEGER
)

ALTER TABLE test2 ALTER COLUMN id SET DEFAULT nextval('test_seq');

INSERT INTO test2 (val1, val2) SELECT val1, val2 FROM test LIMIT 1;

-- fails
INSERT INTO test2 (val1, val2) SELECT val1, val2 FROM test;

CREATE TABLE test4 (
id integer GENERATED BY DEFAULT AS SEQUENCE test_seq PRIMARY KEY,
val1 integer,
val2 integer
)
-- also fails
INSERT INTO test4 (val1, val2) SELECT val1, val2 FROM test;

CREATE TABLE test5 (
id serial PRIMARY KEY,
val1 integer,
val2 integer
)

--this is ok
INSERT INTO test5 (val1, val2) SELECT val1, val2 FROM test;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1426
HyperSQL Database Engine (HSQLDB) / Bugs / #1426 ENGINE getFromFile failed 10
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
we had this problem when we started up the HSQLDB database in server mode:
2015-11-14 20:17:47.257 [HSQLDB Server @3ce76846] ENGINE - *pathtodatabase*\db\metadata.data getFromFile failed 10
org.hsqldb.HsqlException: java.lang.IllegalArgumentException: Bad arguments
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.persist.DataFileCache.getFromFile(Unknown Source)
    at org.hsqldb.persist.DataFileCache.get(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.get(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.setAccessor(Unknown Source)
    at org.hsqldb.Table.setIndexRoots(Unknown Source)
    at org.hsqldb.Table.setIndexRoots(Unknown Source)
    at org.hsqldb.StatementCommand.getResult(Unknown Source)
    at org.hsqldb.StatementCommand.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
    at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
    at org.hsqldb.persist.Log.processScript(Unknown Source)
    at org.hsqldb.persist.Log.open(Unknown Source)
    at org.hsqldb.persist.Logger.open(Unknown Source)
    at org.hsqldb.Database.reopen(Unknown Source)
    at org.hsqldb.Database.open(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.server.Server.openDatabases(Unknown Source)
    at org.hsqldb.server.Server.run(Unknown Source)
    at org.hsqldb.server.Server.access$000(Unknown Source)
    at org.hsqldb.server.Server$ServerThread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: Bad arguments
    at javax.crypto.Cipher.doFinal(Cipher.java:2373)
    at org.hsqldb.persist.Crypto.decode(Unknown Source)
    at org.hsqldb.rowio.RowInputBinaryDecode.readData(Unknown Source)
    at org.hsqldb.RowAVLDisk.<init>(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.get(Unknown Source)
    ... 22 more
2015-11-14 20:17:47.259 [HSQLDB Server @3ce76846] ENGINE - java.lang.IllegalArgumentException: Bad arguments in statement [SET TABLE PUBLIC.*TABLENAME* INDEX '10 18886 0 0 7']
org.hsqldb.HsqlException: java.lang.IllegalArgumentException: Bad arguments
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.persist.DataFileCache.getFromFile(Unknown Source)
    at org.hsqldb.persist.DataFileCache.get(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.get(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.setAccessor(Unknown Source)
    at org.hsqldb.Table.setIndexRoots(Unknown Source)
    at org.hsqldb.Table.setIndexRoots(Unknown Source)
    at org.hsqldb.StatementCommand.getResult(Unknown Source)
    at org.hsqldb.StatementCommand.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
    at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
    at org.hsqldb.persist.Log.processScript(Unknown Source)
    at org.hsqldb.persist.Log.open(Unknown Source)
    at org.hsqldb.persist.Logger.open(Unknown Source)
    at org.hsqldb.Database.reopen(Unknown Source)
    at org.hsqldb.Database.open(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.server.Server.openDatabases(Unknown Source)
    at org.hsqldb.server.Server.run(Unknown Source)
    at org.hsqldb.server.Server.access$000(Unknown Source)
    at org.hsqldb.server.Server$ServerThread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: Bad arguments
    at javax.crypto.Cipher.doFinal(Cipher.java:2373)
    at org.hsqldb.persist.Crypto.decode(Unknown Source)
    at org.hsqldb.rowio.RowInputBinaryDecode.readData(Unknown Source)
    at org.hsqldb.RowAVLDisk.<init>(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.get(Unknown Source)
    ... 22 more

Please take a look below to our database properties configuration:
Properties hsqlConfig=new Properties();
hsqlConfig.setProperty("hsqldb.default_table_type","cached");
hsqlConfig.setProperty("hsqldb.reconfig_logging","false");
hsqlConfig.setProperty("hsqldb.write_delay","false");
hsqlConfig.setProperty("sql.syntax_mys","true");
hsqlConfig.setProperty("crypt_key", *thekey*);
hsqlConfig.setProperty("crypt_type","blowfish");
hsqlConfig.setProperty("crypt_lobs","true");

Do you believe this problem is related to the cryptography module or not?
Can you help us giving a solution?
Thanks for your attention.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1427
HyperSQL Database Engine (HSQLDB) / Bugs / #1427 BigDecimal precision is lost in NUMERIC(x.y) columns
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQL seems to lose precision of the inserted BigDecimal values in NUMERIC(x,y) columns. Fractional part has always y digits - regardless of what the original value was or whether all these digits are zeros or not. For instance if I have NUMERIC(5,2) and insert 1, I get 1.00 back.
Reproducible with 2.3.3. Seems to be a regression, works with 1.8.0.10.
Test case attached.
1 Attachments


HsqlBigDecimalTest.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1428
HyperSQL Database Engine (HSQLDB) / Bugs / #1428 Session.abortTransaction is set on InterruptedException, never cleared
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was trying to track down a random unit test failure that was associated with this stack trace:
org.hibernate.exception.LockAcquisitionException: could not extract ResultSet
at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:92) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:126) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:112) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:91) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.getResultSet(AbstractLoadPlanBasedLoader.java:449) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
at org.hibernate.loader.plan.exec.internal.AbstractLoadPlanBasedLoader.executeQueryStatement(AbstractLoadPlanBasedLoader.java:202) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
Caused by: java.sql.SQLTransactionRollbackException: transaction rollback: serialization failure
at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:403) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:247) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4655) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(JDBCPreparedStatement.java:284) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52) ~[HikariCP-2.4.2.jar:na]
at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java) ~[HikariCP-2.4.2.jar:na]
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:82) ~[hibernate-core-4.3.6.Final.jar:4.3.6.Final]
Caused by: org.hsqldb.HsqlException: transaction rollback: serialization failure
at org.hsqldb.error.Error.error(Error.java:136) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.error.Error.error(Error.java:106) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.Session.executeCompiledStatement(Session.java:1380) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.Session.execute(Session.java:1001) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4647) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(JDBCPreparedStatement.java:284) ~[hsqldb-2.3.3-jdk6debug.jar:2.3.3]
at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52) ~[HikariCP-2.4.2.jar:na]
I finally tracked it down to the fact that some of the unit tests were testing corner cases around an interrupted thread, and that the interrupted exeption was picked up by hsqldb instead of my code it set Session.abortTransaction flag, which in turned caused the exception I was seeing. That is fine, but the flag is never cleared and subsequent commit/rollback operations on that connection will always fail, leaving that connection only semi-functional. Functional enough that connection pool validation still thinks it's a good connection, but make the connection useless for updates.
See attached for code InterruptBug.java for sample code that duplicates the problem.
1 Attachments


InterruptBug.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1429
HyperSQL Database Engine (HSQLDB) / Bugs / #1429 HsqlException: unexpected token: SELECT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I am using @Formula("select .....") annotation for property in the entity class.
Calling the method with Query that returns my entity leads to following exception:
org.hibernate.exception.SQLGrammarException: could not prepare statement
at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:80)
at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:126)
at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:196)
at org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareQueryStatement(StatementPreparerImpl.java:160)
at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1885)
at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1862)
at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1839)
at org.hibernate.loader.Loader.doQuery(Loader.java:910)
at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:355)
at org.hibernate.loader.Loader.doList(Loader.java:2554)
at org.hibernate.loader.Loader.doList(Loader.java:2540)
at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2370)
at org.hibernate.loader.Loader.list(Loader.java:2365)
at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:497)
at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:387)
at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:236)
at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1300)
at org.hibernate.internal.QueryImpl.list(QueryImpl.java:103)
at org.hibernate.internal.AbstractQueryImpl.uniqueResult(AbstractQueryImpl.java:966)
)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.sql.SQLSyntaxErrorException: unexpected token: SELECT
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:162)
at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:186)
... 45 more
Caused by: org.hsqldb.HsqlException: unexpected token: SELECT
at org.hsqldb.error.Error.parseError(Unknown Source)
at org.hsqldb.ParserBase.unexpectedToken(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadRowElementList(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadSelect(Unknown Source)
at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 49 more
Using @Formula annotation is working in 1.8.0.10 version but not in higher versions.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1430
HyperSQL Database Engine (HSQLDB) / Bugs / #1430 ClobInputStream.read(char[], int, int) does not comform to definition by Reader.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
https://sourceforge.net/p/hsqldb/svn/HEAD/tree/base/tags/2.3.3/src/org/hsqldb/types/ClobInputStream.java#l110
Test case:
ClobInputStream
currentPos=0,
buffer[] = {this is a clob}
availableLength=14
ch[] = new char[14]
reader.read(ch, 2, 12) should have put "this is a cl" in ch[] from 2-13.
The code will actually put "this is a " in ch[] from 2-11.
basically when currentPos+len <= availableLength, the code will do wrong.
Proper implementation should be something like below.
int i = off;
while(currentPos < availableLength && i < cbuf.length && (i - off) <=len) {
cbuf[i] = buffer[currentPos];
currentPos++;
i++;
}
return i-off;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1431
HyperSQL Database Engine (HSQLDB) / Bugs / #1431 HSQLDB setting wrong input parameter name for procedure when preparing callablestatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using HSQLDB as in memory database in one of my junit tests for a generic set of classes that I wrote for calling stored procedures.
(Note: This is also posted in http://stackoverflow.com/questions/34779581/hsqldb-setting-wrong-input-parameter-name-for-procedure-when-preparing-callables)
Initializing the db:
@BeforeClass
public static void initializeDB() throws SQLException, ClassNotFoundException {
    dataSource = new JDBCDataSource();
    dataSource.setDatabase("jdbc:hsqldb:mem:testdb;shutdown=true");
    dataSource.setLoginTimeout(10);
    dataSource.setUser("sa");

    Connection connection = dataSource.getConnection();
    Statement statement = connection.createStatement();
    statement.execute("CREATE TABLE users (id INTEGER, name VARCHAR(25), PRIMARY KEY(id))");
    statement.close();
    statement = connection.createStatement();
    statement.executeUpdate("INSERT INTO users VALUES(1, 'Ramiro')");
    statement.executeUpdate("INSERT INTO users VALUES(2, 'Chanukya')");
    statement.close();

    String storedProcedure1 = "CREATE PROCEDURE sp_say_hi(IN greeting_p VARCHAR(10)) "
            + "READS SQL DATA DYNAMIC RESULT SETS 2 "
            + "BEGIN ATOMIC "
            + "DECLARE result CURSOR WITH RETURN FOR SELECT COALESCE(greeting_p, 'Hi')+' '+name as greeting FROM users FOR READ ONLY; "
            + "DECLARE result1 CURSOR WITH RETURN FOR SELECT * FROM users FOR READ ONLY; "
            + "OPEN result; "
            + "OPEN result1; "
            + "END";

    statement = connection.createStatement();
    statement.execute(storedProcedure1);
    statement.close();

    connection.commit();
}

Then at some point inside the class that prepares the statement I use setObject method to register the input parameter:
...
CallableStatement callableStatement = con.prepareCall(sqlCall);
callableStatement.setObject("greeting_p", "Hola");
...

The setObject method throws a JavaSqlException with cause:
Caused by: org.hsqldb.HsqlException: Column not found: greeting_p
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)

By using the debugger, I was able to find that there is a package private method in org.hsqldb.jdbc.JDBCCallableStatement class which is HSQLDB's implementation of CallableStatement, the method name is findParameterIndex which is called inside the setObject method, which checks if the provided parameter exists in the map of parameters from the procedure:
int findParameterIndex(String parameterName) throws SQLException {
    if (isClosed || connection.isClosed) {
        checkClosed();
    }

    int index = parameterNameMap.get(parameterName, -1);

    if (index >= 0) {
        return index + 1;
    }

    throw JDBCUtil.sqlException(ErrorCode.JDBC_COLUMN_NOT_FOUND,
                            parameterName);
}

by exploring that map using the debugger I was able to see that the parameter name is wrongly set by hsqldb, at least in this map:
[@p1, null, null, null, null, null, null, null]
I was able to verify by changing the name in the setObject method call:
callableStatement.setObject("@p1", "Hola");
After that it worked fine.
The weird thing is that if I retrieve the metadata of that procedure using DatabaseMetaData.getProcedureColumns method, the name of the param is correct from the jdbc metadata perspective:
DatabaseMetaData dbMetadata = con.getMetaData();
    ResultSet rs = dbMetadata.getProcedureColumns(con.getCatalog(),
            con.getSchema(),
            "SP_SAY_HI",
            "%_P");
        while(rs.next()) {
          // get stored procedure metadata
          String procedureCatalog     = rs.getString(1);
          String procedureSchema      = rs.getString(2);
          String procedureName        = rs.getString(3);
          String columnName           = rs.getString(4);
          short  columnReturn         = rs.getShort(5);
          int    columnDataType       = rs.getInt(6);
          String columnReturnTypeName = rs.getString(7);
          int    columnPrecision      = rs.getInt(8);
          int    columnByteLength     = rs.getInt(9);
          short  columnScale          = rs.getShort(10);
          short  columnRadix          = rs.getShort(11);
          short  columnNullable       = rs.getShort(12);
          String columnRemarks        = rs.getString(13);

          System.out.println("stored Procedure name="+procedureName);
          System.out.println("procedureCatalog=" + procedureCatalog);
          System.out.println("procedureSchema=" + procedureSchema);
          System.out.println("procedureName=" + procedureName);
          System.out.println("columnName=" + columnName);
          System.out.println("columnReturn=" + columnReturn);
          System.out.println("columnDataType=" + columnDataType);
          System.out.println("columnReturnTypeName=" + columnReturnTypeName);
          System.out.println("columnPrecision=" + columnPrecision);
          System.out.println("columnByteLength=" + columnByteLength);
          System.out.println("columnScale=" + columnScale);
          System.out.println("columnRadix=" + columnRadix);
          System.out.println("columnNullable=" + columnNullable);
          System.out.println("columnRemarks=" + columnRemarks);
        }

It prints out:
stored Procedure name=SP_SAY_HI
procedureCatalog=PUBLIC
procedureSchema=PUBLIC
procedureName=SP_SAY_HI
columnName=GREETING_P
columnReturn=1
columnDataType=12
columnReturnTypeName=CHARACTER VARYING
columnPrecision=10
columnByteLength=0
columnScale=0
columnRadix=0
columnNullable=1
columnRemarks=null

Note that the name is coming in upper case, I already check that. I changed the registering of the parameter name to upper case in the setObject method to see if that helped, but didn't make a difference.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1432
HyperSQL Database Engine (HSQLDB) / Bugs / #1432 SessionManager <-> Session Dead Lock
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there!
Please, find the attachment with the Bamboo report for the Dead Lock around Session and SessionManager.
The synchronized Session.close() waits for the synchronized SessionManager.removeSession(), when the synchronized SessionManager.close() waits for the synchronized Session.close(). 
Thank you in advance!
1 Attachments


HSQLDB-DeadLock.txt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1433
HyperSQL Database Engine (HSQLDB) / Bugs / #1433 Wrong update when using subselects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider the following setup:
create table foo 
(
   id integer primary key,
   data varchar(100)
);

insert into foo 
values
(1, 'two'),
(2, 'one');

Then run the following UPDATE statement to swap the two values in the column data:
update foo
  set data = case 
               when id = 1 then (select data from foo where id = 2) 
               when id = 2 then (select data from foo where id = 1)
             end
where id in (1,2);

The row with ID = 1 is updated correctly, but the row with ID = 2 contains a NULL value in the data column.
This happens with 2.3.3 and the 2.3.4 RC jar file
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1434
HyperSQL Database Engine (HSQLDB) / Bugs / #1434 MVCC and deletes leaking RowActions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My version is 2.3.3. I'm experiencing unbounded memory growth using MVCC, cached=true, autocommit=true, and deletes. This is not a case of unclosed sessions or statements (AFAIK). What I am seeing is that the rowActionMap in TransactionManagerCommon has RowActions in it that are never cleaned up. I am determining this by looking at a YourKit memory dump. I see many RowActions in the rowActionMap that are for closed sessions. The RowActions are of type ACTION_DELETE_FINAL and deleteComplete is marked as false. The delete code I'm using is:
try (Connection localConn = UnclusteredStore.createDirectStoreConnection(dataDirectory);
  PreparedStatement deleteByClientPst = localConn.prepareStatement("DELETE FROM " + UnclusteredStore.AUDIT_DETAILS_RAW + " WHERE clientid = ?");
  PreparedStatement deleteByClientSummaryPst = localConn.prepareStatement("DELETE FROM " + UnclusteredStore.AUDIT_CLIENT_SUMMARY + " WHERE clientid = ?")) {

  deleteByClientPst.clearParameters();
  deleteByClientPst.setBytes(1, uuidToBytes(clientId));
  deleteByClientPst.executeUpdate();

  deleteByClientSummaryPst.clearParameters();
  deleteByClientSummaryPst.setBytes(1, uuidToBytes(clientId));
  deleteByClientSummaryPst.executeUpdate();
  localConn.commit();

}

As you can see the connection is called withing a try-with-resources statement which closes the connection. I have observed close being called. If I put the prepared statements in the try (and explicitly commit -- I have not verified that both changes are required), the issue still occurs.
It is my understanding the all of the statements and associated results should be cleaned up when the connection is closed. There is a high degree of concurrency in my application. I can provide the YourKit snapshot if needed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1435
HyperSQL Database Engine (HSQLDB) / Feature Requests / #328 ROW_NUMBER() OVER(ORDER BY) Results in Error (HSQLDB 2.3.3)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
We are trying to execute the following SQL command in HSQLDB and are receiving the error below. Our understanding of 2.3.3 (our current HSQLDB version) is that it should honor SQL Server's ROW_NUMBER() OVER() syntax. It does, up until the point we add an ORDER BY clause.
Can you please let us know what we are doing wrong?
Thanks in advance,
Chad
SQL Statement:
SELECT * 
FROM   (SELECT Row_number() 
                 OVER(**ORDER BY (DATE_REPORTED_DATE DESC, ID DESC**)) AS ROW_NUM, 
               id                                             AS ID, 
               dtype                                          AS DTYPE, 
               date_reported_date AS TIMESTAMP               AS DATE_REPORTED_DATE, 
               product_feedback.sku                           AS SKU, 
               product_feedback.description                   AS DESCRIPTION, 
               upc                                            AS UPC, 
               oms_id                                         AS OMS_ID, 
               claim_number                                   AS CLAIM_NUMBER, 
               review_id                                      AS REVIEW_ID, 
               title                                          AS TITLE, 
               date_of_loss_date                              AS DATE_OF_LOSS_DATE, 
               claimant_first_name                            AS CLAIMANT_FIRST_NAME, 
               claimant_last_name                             AS CLAIMANT_LAST_NAME, 
               claimant_address_one                           AS CLAIMANT_ADDRESS_ONE, 
               claimant_city                                  AS CLAIMANT_CITY, 
               claimant_state_province                        AS CLAIMANT_STATE_PROVINCE, 
               claimant_zip_code                              AS CLAIMANT_ZIP_CODE, 
               claimant_country                               AS CLAIMANT_COUNTRY, 
               claimant_phone                                 AS CLAIMANT_PHONE, 
               claimant_email                                 AS CLAIMANT_EMAIL, 
               accident_description                           AS ACCIDENT_DESCRIPTION, 
               vendor_supplier_business_name                  AS VENDOR_SUPPLIER_BUSINESS_NAME, 
               return_id                                      AS RETURN_ID, 
               store_id                                       AS STORE_ID, 
               case_number                                    AS CASE_NUMBER, 
               report_id                                      AS REPORT_ID, 
               severity                                       AS SEVERITY, 
               catalog_number                                 AS CATALOG_NUMBER, 
               comment_type                                   AS COMMENT_TYPE, 
               decision                                       AS DECISION, 
               label_number                                   AS LABEL_NUMBER, 
               product.sku                                    AS PRODUCT_SKU, 
               product.description                            AS PRODUCT_DESCRIPTION, 
               product.NAME                                   AS NAME, 
               product.department_number                      AS DEPT_NUM 
        FROM   product_feedback 
               LEFT OUTER JOIN product 
                            ON product_feedback.sku = product.sku 
        WHERE  date_reported_date >= '2014-02-02' 
               AND date_reported_date <= '2015-02-08' 
               AND dtype IN ( 'CLAIM' ) 
               AND ( decision IS NULL 
                     OR decision = 'UNREVIEWED' )
        ) AS A
WHERE  ROW_NUM BETWEEN 1 AND 50

Error:
ERROR: unexpected token: ORDER required: ) : line: 3
Error Code: -5581
Query = SELECT * 
FROM (SELECT Row_number() 
OVER(ORDER BY (DATE_REPORTED_DATE DESC, ID DESC)) AS ROW_NUM,
id AS ID, dtype AS DTYPE, date_reported_date AS TIMESTAMP AS 
DATE_REPORTED_DATE, product_feedback.sku AS SKU,
product_feedback.description AS DESCRIPTION, upc AS UPC,
oms_id AS OMS_ID, claim_number AS CLAIM_NUMBER, review_id AS 
REVIEW_ID, title AS TITLE, date_of_loss_date AS 
DATE_OF_LOSS_DATE, claimant_first_name AS CLAIMANT_FIRST_NAME, 
claimant_last_name AS CLAIMANT_LAST_NAME,
claimant_address_one AS CLAIMANT_ADDRESS_ONE, claimant_city AS 
CLAIMANT_CITY, claimant_state_province AS 
CLAIMANT_STATE_PROVINCE, claimant_zip_code AS 
CLAIMANT_ZIP_CODE, claimant_country AS CLAIMANT_COUNTRY,
claimant_phone AS CLAIMANT_PHONE, claimant_email AS 
CLAIMANT_EMAIL, accident_description AS ACCIDENT_DESCRIPTION,
vendor_supplier_business_name AS VENDOR_SUPPLIER_BUSINESS_NAME, 
return_id AS RETURN_ID, store_id AS STORE_ID, case_number AS 
CASE_NUMBER, report_id AS REPORT_ID, severity AS SEVERITY,
catalog_number AS CATALOG_NUMBER, comment_type AS 
COMMENT_TYPE, decision AS DECISION, label_number AS 
LABEL_NUMBER, product.sku AS PRODUCT_SKU, product.description 
AS PRODUCT_DESCRIPTION, product.NAME AS NAME,
product.department_number AS DEPT_NUM FROM product_feedback
LEFT OUTER JOIN product ON product_feedback.sku = product.sku
WHERE date_reported_date >= '2014-02-02' AND 
date_reported_date <= '2015-02-08' AND dtype IN ( 'CLAIM' )
AND ( decision IS NULL OR decision = 'UNREVIEWED' ) ) AS A 
WHERE ROW_NUM BETWEEN 1 AND 50
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1436
HyperSQL Database Engine (HSQLDB) / Bugs / #1436 Current Statement not Canceled on ALTER SESSION
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looking for a way to cancel long running Statements on a HSQLDB Standalone Server,
I stumbled upon this Stackoverflow Question and Freds Answer to it. 
Using the current Release Candidate and the svn version from the Date of Freds Answer, I tried to release or close a session in order to abort the Statement using another connection.
I used 
select session_id from information_schema.system_sessions where current_statement='some_sql'
to get the corresponding session id an then called ALTER SESSION <id> RELEASE.
The Statement, however, is not canceled instantly. It seems that HSQL waits for the statement to finish and then returns an rollback:serialization sql error to the connected client.
Is this the way hsql should behave in this case? 
If yes, is there another way to cancel a statement immediately?
Thanks in Advance,
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1437
HyperSQL Database Engine (HSQLDB) / Bugs / #1437 JDBCPooledConnection with allow_empty_batch
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JDBCPooledConnection uses constructor JDBCConnection(JDBCConnection, JDBCConnectionEventListener) to create its connections. This causes the property isEmptyBatchAllowed, and others, to be left on the default setting, thus ignoring the URL properties. 
I think you should add the following statement and its brethren in there as well:
isEmptyBatchAllowed = connProperties.isPropertyTrue(HsqlDatabaseProperties.url_allow_empty_batch, false);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1438
HyperSQL Database Engine (HSQLDB) / Bugs / #1438 Inconsistent case sensitivity in JDBCConnection.prepareStatement(String, String[])
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am using the method JDBCConnection.prepareStatement(String, String[]). As you well know, the last String array argument tells the PreparedStatement which columns to return in the ResultSet from getGeneratedKeys(). 
The column names in that array are case sensitive while in the previous queries, there is no case sensitivity: select id from users is valid, resultSet.getInt("id") is valid, but using new String[]{"id"} is not valid. I would have expected the same case-insensitive column names here.
Here's an SSCCE that demonstrates the situation:
public class IdentityCase {
    public static void main(String[] args) {
        try {
            String[] init = {
                    "drop table users if exists",
                    "drop sequence user_seq if exists",
                    "create sequence user_seq",
                    "create table users ( id integer generated by default as sequence user_seq, name varchar(200) )",
                    "insert into users (name) values ('Alice')",
                    "insert into users (name) values ('Bob')"
            };

            Class.forName("org.hsqldb.jdbcDriver");
            Connection connection = DriverManager.getConnection("jdbc:hsqldb:file:test", "theuser", "thepassword");

            Statement statement = connection.createStatement();
            for (String s : init) {
                statement.executeUpdate(s);
            }

            ResultSet resultSet = statement.executeQuery("select id from users");
            while (resultSet.next()) {
                System.out.println("id = " + resultSet.getInt("id"));
            }
            resultSet.close();
            statement.close();

            PreparedStatement preparedStatement2 = connection.prepareStatement("insert into users (name) values(?)", new String[]{"id"});
            preparedStatement2.setString(1, "Charlie");
            preparedStatement2.executeUpdate();

            ResultSet generatedKeys = preparedStatement2.getGeneratedKeys();
            while (generatedKeys.next()) {
                System.out.println("id = " + generatedKeys.getInt(1));
            }
            generatedKeys.close();
            preparedStatement2.close();

            connection.commit();
            connection.close();
        }
        catch (SQLException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

}

The output shows the first two id's, but crashes at the prepareStatement:
~~~
id = 0
id = 1
java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: id
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at forums.hsqldb.IdentityCase.main(IdentityCase.java:33)
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: id
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.Table.getColumnIndex(Unknown Source)
at org.hsqldb.Table.getColumnIndexes(Unknown Source)
at org.hsqldb.StatementDML.setGeneratedColumnInfo(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 3 more
~~~
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1439
HyperSQL Database Engine (HSQLDB) / Bugs / #1439 Assignment to method parameter in JDBCPreparedStatement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Version: 2.3.4
Class: JDBCPreparedStatement
Line: 3883
sql = c.nativeSQL(sql);
The result of c.nativeSQL(sql) is assigned to parameter sql instead of this.sql. In the end this.sql = sql is executed on line 3955 for toString() as the comment points out, so this might be intentional?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1440
HyperSQL Database Engine (HSQLDB) / Bugs / #1440 unexpected token: , required: ( 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This procedure worked in all previous versions of 2.3, it is objecting to the comma after Period
5/24/16 3:10 PM Executing ... LIST_WEATHER_FORECAST failed unexpected token: , required: ( : line: 9
5/24/16 3:10 PM create procedure LIST_WEATHER_FORECAST(IN xDistrict TYPE_ACCOUNTID)
/ ****************** /
/ LIST_WEATHER_FORECAST /
/ ****************** /
READS SQL DATA DYNAMIC RESULT SETS 1
begin ATOMIC
declare result cursor with return for
select 
Period,
Title,
Forecast,
Icon
from
WEATHER_FORECAST
where
District = xDistrict 
for read only;
open result;
end;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1441
HyperSQL Database Engine (HSQLDB) / Bugs / #1441 Deadlock when using HyperSQL 2.3.4 with Flyway migrations
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using the Flyway database migration system with HyperSQL 2.3.4, the attempted application of migrations results in deadlock.
Version 2.3.3 works as expected and I found that the code change causing the deadlock is the following code added to TransactionManagerCommon.java line 558 in commit r5537:
    if (cs.isCatalogLock()) {
        getTransactionSessions(session);
    }

For some context, one of the first things that Flyway does when it starts is open up a connection to the database and lock its metadata table. The migrations are applied in a separate connection. The code pasted above gets run a few method calls below the executeCompiledStatement method in Session.java (this method is what is trying to execute my first migration).
The getTransactionSessions method is adding the session that Flyway uses to lock its metadata table to the "tempSet" of the session that is executing the migration. This effectively causes the executeCompiledStatement method in Session.java (around line 1355) to wait forever -- the session that Flyway is using to lock its metadata table doesn't commit (and therefore release its lock) until all the migrations have run, so the count down latch will never decrement:
        while (true) {
            try {
                latch.await();
            } catch (InterruptedException e) {
                Thread.interrupted();

                continue;
            }

            break;
        }

The deadlock described above can be replicated by using Spring Boot's flyway sample and modifying the pom.xml so that the application uses HyperSQL 2.3.4 instead of H2. The unit tests for the sample show the deadlock occuring -- the build and units tests get run by running the following command:
    mvn install

The output of the command will stop and lock up after outputting the following:
Executing SQL: CREATE TABLE PERSON (
id BIGINT GENERATED BY DEFAULT AS IDENTITY,
first_name varchar(255) not null,
last_name varchar(255) not null
)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1442
HyperSQL Database Engine (HSQLDB) / Bugs / #1442 Bnary Data Type TableMetaData
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
First I would acknowledge the work that has been done with the HyperSQL
database. Being a fellow developer of a open source project I appreciate
the work involved.
In reviewing changes between v2.2.9 and v2.3.4 my Application MyJSQLView
is reporting a change in Precision and Size for Binary types. Given the
defined table below v2.3.4 is now giving a zero precision and size for
a standard Binary declaration with no length. The documenation indicates
this should result in a single byte Binary field.
Instead of being a single byte field, it appears to be cabable of
receiving a unspecified number of bytes. I'm able to put a larger number
of bytes then one in the field. In additional this is causing an error in
the application output of defining the table, field as Binary(0).
Dana M. Proctor
MyJSQLView Project Manager
http://myjsqlview.com
Reference:
CREATE TABLE "PUBLIC"."BINARY_TYPES" (
"DATA_TYPE_ID" INTEGER IDENTITY NOT NULL,
"BINARY_TYPE" BINARY DEFAULT NULL);
HyperSQL 2.3.4
index Name Class Type Type Name Scale Precision Size
2 BINARY_TYPE [B -2 BINARY 0 0 0
HyperSQL 2.2.9
index Name Class Type Type Name Scale Precision Size
2 BINARY_TYPE [B -2 BINARY 0 1 1
Derived Precsion/Size:
ResultSetMetaData tableMetaData;
ResultSet db_resultSet;
sqlStatement.execute("SELECT * FROM PUBLIC.BINARY_TYPES");
db_resultSet = sqlStatement.getResultSet();
tableMetaData = db_resultSet.getMetaData();
columnPrecision = tableMetaData.getPrecision(2);
columnSize = tableMetaData.getColumnDisplaySize(2);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1443
HyperSQL Database Engine (HSQLDB) / Bugs / #1443 HSQL + Hibernate 5.1 (JDK 8) + JPA unable to insert due to column order and parameter order not aligned
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, 
I have a Spring 4.2, Hibernate 5.1 application which uses Liquibase to create a table. If I switch the application from MySQL 5.x to HSQLDB 2.3.4 it is unable to insert a row into a table (in the meantime it has inserted two rows into Liquibase control tables). The error is "Invalid argument in JDBC call" and the Hibernate-generated insert has the columns listed in alphabetical order but the parameters appear to be in the order that the table was created. If I switch back to MySQL all is fine but back to HSQLDB and it fails. I am not using Hibernate hibernate.hbm2ddl.auto by the way (which would cause the table columns to be created in alphabetical order). Apologies if this has nothing to do with HSQLDB but I can't think of what else it could be. I have also tried it with MS SQL Server and it works. The behavior seems to be Hibernate generates the insert statement with column names in alphabetical order. The parameters in the case of HSQLDB appear to be getting generated in the order the columns are in the table physically. 
Thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1444
HyperSQL Database Engine (HSQLDB) / Bugs / #1444 CallableStatement::prepareCall doesn't work in 2.3.4 for stored function with (at least) one parameter
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've just updated the version from 2.3.3 to 2.3.4 and I discovered a bug in 2.3.4 that was not in 2.3.3. 
The snippet below can be used to reproduce it. 
Basically, what happens in 2.3.4 is that there is an exception thrown in the call to connection.prepareCall("{call return_inparam(?)}"). If I replace the question mark with an actual value, and remove the statement.setString(1, "sometext"); line it works fine also in 2.3.4.
The exception call stack is the following:
Exception in thread "main" java.lang.NullPointerException
at org.hsqldb.StatementProcedure.getParametersMetaData(Unknown Source)
at org.hsqldb.result.Result.newPrepareResponse(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCCallableStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareCall(Unknown Source)
at com.asprotunity.queryiteasy.acceptance_tests.ErrorReproduction.main
Here is the snippet to reproduce it.
import org.hsqldb.jdbc.JDBCDataSource;
import java.sql.*;
public class ErrorReproduction {
public static void main(String[] args) throws SQLException {
    JDBCDataSource dataSource = new JDBCDataSource();
    dataSource.setUrl("jdbc:hsqldb:mem:testdb");
    dataSource.setUser("sa");
    dataSource.setPassword("");

    try (Connection connection = dataSource.getConnection()) {
        connection.setAutoCommit(false);

        try (PreparedStatement statement = connection.prepareStatement("CREATE FUNCTION return_inparam(in inparam VARCHAR(20))\n" +
                                                                               "RETURNS VARCHAR(20)\n" +
                                                                               "BEGIN ATOMIC \n" +
                                                                               "   RETURN inparam;\n" +
                                                                               " END")) {
            statement.execute();
        }

        try (CallableStatement statement = connection.prepareCall("{call return_inparam(?)}")) { // <- Here fails with 2.3.4

            statement.setString(1, "sometext");

            try (ResultSet rs = statement.executeQuery()) {
                while (rs.next()) {
                    System.out.println(rs.getString(1));
                }
            }

        }
    }

}

}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1445
HyperSQL Database Engine (HSQLDB) / Bugs / #1445 create table fails with exists error, but table does not exist
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using HSQLDB in an in-process (Tomcat/WebSphere) multi-thread situation where tables are being created, populated, queried and dropped very rapidly -- usually less than 5s in total. Each table is named uniquely, guaranteed. Each table also has a single compound index applied, and each table has a primary key auto generated via identity.
Infrequently, the create table fails with an "object already exists" error. In the catch block of that create, executing the identical create table script succeeds, in all cases.
In a sample run of 900 table creations (being generated by 10 threads in the pool), this occurred only 3 times. However, we can find no programmatic reason for it to occur at all.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1446
HyperSQL Database Engine (HSQLDB) / Bugs / #1446 ResultSet#getObject not returning UUID
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For a column of type UUID, a SELECT returns org.hsqldb.types.BinaryData as return type for ResultSet#getObject, instead of java.util.UUID.
PreparedStatement#setObject() does accept an UUID as type, so ResultSet#getObject should also return one.
See the attachment for a demo.
1 Attachments


HSQLDBUUIDBug.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1447
HyperSQL Database Engine (HSQLDB) / Bugs / #1447 Joining table with BigDecimal/NUMBER as PK fails when value > MAX_LONG 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi. 
Attached are three Java files that describe my simpel model. I use Hibernate to store the data. Later (using Hibernate or straight SQL over JDBC connection) I get a variable success when joining depending on the value I instansiate the model with (the column "parentkey"). Joining (using WHERE or JOIN) works OK if the value I give to the Java BigDecimal is small, but fails if it is over 9223372036854775807 (which is the MAX_LONG_VALUE). 
The actual SQL that silently fails is:
select
    alias_1x1_.PARENTKEY as PARENTKEY4_0_
from
    CHILD this_ 
inner join
    PARENT alias_1x1_ 
        on this_.PARENTKEY=alias_1x1_.PARENTKEY

So I think this is this a bug, or ?
Regards.
3 Attachments


Child.java


ChildId.java


Parent.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1448
HyperSQL Database Engine (HSQLDB) / Bugs / #1448 DB appears corrupt after INDEX DROP/CREATE on column with a UNIQUE constraint.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We had a schema creation script that drops and creates an index on a column with a unique constraint.
The bug is reproducible with the HSQLDB GUI tool using an in-memory db. Affected are at least 2.2.9 and 2.3.4 versions.
The script to reporduce the problem at the bottom of the post.
After the script is executed, table CLIENT_DETAILS has three entries, however, they are only
availiable to an unrestricted select query:
SELECT * FROM CLIENT_DETAILS
12 d427b3de-b6f6-452b-96ee-e450faf71e52
28 0ea13eaf-7b19-4263-bf1f-3562a97959bd
29 c3ae524f-e7c2-4f6f-9b8b-45a7fef9f179
If one executes a query restricted on column CLIENT_ID, ony one entry is available:
SELECT * FROM CLIENT_DETAILS WHERE CLIENT_ID LIKE '%'
12 d427b3de-b6f6-452b-96ee-e450faf71e52
The entries inserted after DROP/CREATE INDEX are missing in the result set.
The documentation menstions that one should not create custom indices on columns with UNIQUE constraint for performance reasons, since an index is created automatically on such columns. However, in this case the undesired effects seem to go far beyond poor performance.
----- begin execute separately from the rest in GUI tool
CREATE TABLE CLIENT_DETAILS (
  ID                               BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 ) NOT NULL PRIMARY KEY,
  CLIENT_ID                        VARCHAR(256),
  UNIQUE (CLIENT_ID)
);
----- end

CREATE INDEX CD_CI_IDX ON CLIENT_DETAILS (CLIENT_ID);

INSERT INTO CLIENT_DETAILS VALUES(1,'3ffd0009-b4fd-4e35-af95-32c76ebe6762');
INSERT INTO CLIENT_DETAILS VALUES(2, '47504429-481e-49b5-82c8-f894a4eeccf6');
INSERT INTO CLIENT_DETAILS VALUES(12,'d427b3de-b6f6-452b-96ee-e450faf71e52');

DROP INDEX CD_CI_IDX;
CREATE INDEX CD_CI_IDX ON CLIENT_DETAILS (CLIENT_ID);

INSERT INTO CLIENT_DETAILS VALUES(28, '0ea13eaf-7b19-4263-bf1f-3562a97959bd');
DELETE FROM CLIENT_DETAILS WHERE ID = 1;
INSERT INTO CLIENT_DETAILS VALUES(29, 'c3ae524f-e7c2-4f6f-9b8b-45a7fef9f179');
DELETE FROM CLIENT_DETAILS WHERE ID = 2;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1449
HyperSQL Database Engine (HSQLDB) / Bugs / #1449 DROP CONSTRAINT causes SQLIntegrityConstraintViolationException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use hsqldb (2.3.4) inmemory mode for testing and all test uses the same db. 
When we start a full test at first we load data from xml to db as we drop constraints -> load data -> add constraints.
It works properly but some tests load some data again and one of them (and following tests) failed when tried to drop constraints. 
It doesn't make sense because of a constraint (foreign key) dropping cannot cause "SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation"!
I know whcih test methods cause the problem just I don't know why.
Theese tests cointain failed transactions but other ones too and they don't cause any problem.
I attached the log and in debug I found that "olddata" (RowStoreAVL.java:540) contains primary key twice but obviously I found just once in db (with select). 
HSQL version: 2.3.4
url='jdbc:hsqldb:mem:xxx'
connectionProperties.put(url_create, "true");
connectionProperties.put(sql_nulls_first, "false");
connectionProperties.put(sql_nulls_order, "false");
connectionProperties.put(hsqldb_tx, "mvcc"); 
log:
org.apache.ddlutils.DatabaseOperationException: Error while executing SQL ALTER TABLE PROCESS
DROP CONSTRAINT PROCESS_FK_CURRENTACTIVITYID_ACTIVITYDEFINITION
at org.apache.ddlutils.platform.PlatformImplBase.evaluateBatch(PlatformImplBase.java:344)
at org.apache.ddlutils.platform.PlatformImplBase.evaluateBatch(PlatformImplBase.java:279)
at com.ericsson.cas.db.dbunit.DbLoader.executeDataXMLOperation(DbLoader.java:134)
at com.ericsson.cas.componenttest.dbinitializer.PerCaseDbInitializerSpringImpl.initPerCaseDb(PerCaseDbInitializerSpringImpl.java:45)
at com.ericsson.cas.functest.core.db.DbInitalizer.initPerCaseDb(DbInitalizer.java:57)
at com.ericsson.cas.functest.core.CasSystemTest.initDb(CasSystemTest.java:90)
at com.ericsson.cas.functest.core.CasSystemTest.init(CasSystemTest.java:74)
at com.ericsson.cas.inttest.awm.RemoteUserResetPasswordListPresenterIT.init(RemoteUserResetPasswordListPresenterIT.java:83)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:606)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
at mockit.integration.junit4.internal.JUnit4TestRunnerDecorator.invokeExplosively(JUnit4TestRunnerDecorator.java:44)
at mockit.integration.junit4.internal.MockFrameworkMethod.invokeExplosively(MockFrameworkMethod.java:37)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java)
at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)
Caused by: java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation; SYS_PK_11827 table: PROCESS in statement [ALTER TABLE PROCESS
DROP CONSTRAINT PROCESS_FK_CURRENTACTIVITYID_ACTIVITYDEFINITION]
at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:324)
at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:247)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1797)
at org.hsqldb.jdbc.JDBCStatement.executeUpdate(JDBCStatement.java:208)
at org.apache.ddlutils.platform.PlatformImplBase.evaluateBatch(PlatformImplBase.java:323)
... 22 more
Caused by: org.hsqldb.HsqlException: integrity constraint violation: unique constraint or index violation; SYS_PK_11827 table: PROCESS
at org.hsqldb.error.Error.error(Error.java:137)
at org.hsqldb.Constraint.getException(Constraint.java:883)
at org.hsqldb.index.IndexAVLMemory.insert(IndexAVLMemory.java:233)
at org.hsqldb.persist.RowStoreAVL.indexRow(RowStoreAVL.java:241)
at org.hsqldb.persist.RowStoreAVL.moveData(RowStoreAVL.java:564)
at org.hsqldb.TableWorks.moveData(TableWorks.java:1382)
at org.hsqldb.TableWorks.dropConstraint(TableWorks.java:1030)
at org.hsqldb.SchemaManager.dropConstraint(SchemaManager.java:1525)
at org.hsqldb.StatementSchema.getResult(StatementSchema.java:888)
at org.hsqldb.StatementSchema.execute(StatementSchema.java:274)
at org.hsqldb.Session.executeCompiledStatement(Session.java:1384)
at org.hsqldb.Session.executeDirectStatement(Session.java:1259)
at org.hsqldb.Session.execute(Session.java:1024)
at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1789)
... 24 more
2016-09-05T11:04:05 ERROR [ ] [Thread-49 ] c.e.c.f.core.AbstractSpringAwareIntegrationTest - Database loading failed for files: [RemoteUserResetPasswordListPresenterIT_awm.xml] Error message: Error while executing SQL ALTER TABLE PROCESS
DROP CONSTRAINT PROCESS_FK_CURRENTACTIVITYID_ACTIVITYDEFINITION
2016-09-05T11:04:05 INFO [ ] [Thread-49 ] c.e.c.s.interceptor.RestLoggerInterceptor - The process finished successfully
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1450
HyperSQL Database Engine (HSQLDB) / Bugs / #1450 metadata for datetime types incorrect
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In 2.3.3 The table INFORMATION_SCHEMA.SYSTEM_COLUMNS, which just shows the result of the jdbc introspection getColumns has some problems with 'DATA_TYPE' and 'TYPE_NAME' of datetime types. There are two issues I can see:
1) For a column declared as TIMESTAMP WITH ZONE, the 'DATA_TYPE' returned is 93, which corresponds to TIMESTAMP (i.e. without zone) according to the JDBC spec http://docs.oracle.com/javase/8/docs/api/constant-values.html#java.sql.Types.TIMESTAMP_WITH_TIMEZONE . It should be 2014. I suspect the same for TIME WITH ZONE, but haven't checked
2) When declaring a DOMAIN of TIMESTAMP WITH TIMEZONE CHECK VALUE IS NOT NULL, and then declaring a table column with this alias, 'DATA_TYPE' is again 93 as in issue #1, but also, the 'TYPE_NAME' is 'TIMESTAMP' (i.e. without time zone). Again, I suspect a similar problem with other date/time types but haven't checked.
Here is the result of an example, query on SYSTEM_COLUMNS. The first row is declared directly as TIMESTAMP WITH TIME ZONE as in #1, whereas the others all use an alias DOMAIN as in #2 above.
PUBLIC  REXDB   FOO BAR 93  TIMESTAMP WITH TIME ZONE    32              1   [null]  [null]  93  3   0   1   YES [null]  [null]  [null]      NO  NO
PUBLIC  REXDB   BUS_TRADE   VERSION 93  TIMESTAMP   26              0   [null]  CURRENT_TIMESTAMP   93  3   0   11  NO  [null]  [null]  [null]      NO  NO
PUBLIC  REXDB   BUS_ORDER   VERSION 93  TIMESTAMP   26              0   [null]  CURRENT_TIMESTAMP   93  3   0   12  NO  [null]  [null]  [null]      NO  NO
PUBLIC  REXDB   BUS_ORDER_STATE VERSION 93  TIMESTAMP   26              0   [null]  [null]  93  3   0   2   NO  [null]  [null]  [null]      NO  NO
PUBLIC  REXDB   BUS_BOOK_INSTRUMENT_PNL VERSION 93  TIMESTAMP   26              0   [null]  CURRENT_TIMESTAMP   93  3   0   10  NO  [null]  [null]  [null]      NO  NO
PUBLIC  REXDB   BUS_REMOTE_TRADE_CODE   VERSION 93  TIMESTAMP   26              0   [null]  [null]  93  3   0   4   NO  [null]  [null]  [null]      NO  NO
PUBLIC  REXDB   BUS_REMOTE_ORDER_CODE   VERSION 93  TIMESTAMP   26              0   [null]  [null]  93  3   0   4   NO  [null]  [null]  [null]      NO  NO

I guess that not many people care about this, but looking into rising populatrity of Java8 time, the driver should distinguish between these clearly to help the user to cast these as e.g. Time or OffsetTime.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1451
HyperSQL Database Engine (HSQLDB) / Bugs / #1451 HSQL under-relative JEE stress leads to a shower of SQLNonTransientConnectionException: connection exception: closed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While running weblogic 12.1.2 with NON-JTA (as the XA - JTA HSQL db driver seems to be quite problematic), our application systematically would go into connection closed errors "blood-bath" when runing agianst HSQL 2.3.4 stable release.
The type of exceptions that were encountered are listed in the text file uploaded in attachment, with the stac trace with company related code removed.
In this particular case, the HSQL DB 9001 server was running locally, on the exact same server running weblogic.
Nor firewalls, no network communication going exernally.
The connections to HSQL seemed reliable only while the system was not under stress.
As soon as the the testing would create heavier load, suddenly many of the threads executing read or write queries would get pummeled by exceptions such as the one in the stack trac.e
In the end the HSQL in version 2.3.4 even without JTA transaciton was dimmed unsuable.
We had to re-create the domain to run agains Oracle or Microsoft Sql server and all issues were gone.
Of course now we have the network latency in a test server that could very well do with testing on local HSQL db.
I did not try reverting back the HSQLDB JDBC driver and HSQLDB server to version 2.3.2, which is the current stable version of hsql we primarly use for integration tests, but I suspect the HSQLDB non JTA/typical jdbc driver under 2.3.2 as well as the server, is rather more stable.
This situation of weblogic detecting closed connections I had never encountered before on HSQL.
Weblogic will then reconnect and recreate new connects to the DB, but of course then many of the logically correct DB transactions have already be damanged by the previous errors ... so even if connections to HSQL will self-heal, this runtime exceptions are unacceptable, and the server/client driver combination for 2.3.4 had discarded as the only datbase giving us such trouble.
1 Attachments


blowUpExceptions.txt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1452
HyperSQL Database Engine (HSQLDB) / Bugs / #1452 ArrayIndexOfBounds Exception in RowSetNavigatorClient
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
S2R:
1. Create Statement with fetch size = 1
2. Execute select query from table which contains more than 3 rows.
3. Call next() three times on result set
4. Call resultSet.getObject(int)
Expected:
Object from third row recieved
Actual:
ArrayIndexOfBoundsException
Patch with fix attached
1 Attachments


Fix_ArrayIndexOfBoundsException_in_RowSetNavigator.patch
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1453
HyperSQL Database Engine (HSQLDB) / Bugs / #1453 NullPointerException parsing recursive CTE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This bug occurs reliably with HyperSQL 2.3.4. When parsing the following query, a Java NullPointerException is thrown:
WITH RECURSIVE foo (i) AS (
  VALUES(1) UNION
  SELECT i + 1
  FROM foo
  WHERE (SELECT max(i) FROM foo) < 5
) SELECT * FROM foo;

The stack trace is as follows:
java.sql.SQLException: java.lang.NullPointerException
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at org.hsqldb.util.DatabaseManagerSwing.executeSQL(Unknown Source)
    at org.hsqldb.util.DatabaseManagerSwing.access$1000(Unknown Source)
    at org.hsqldb.util.DatabaseManagerSwing$StatementExecRunnable.run(Unknown Source)
    at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
    at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:744)
    at java.awt.EventQueue.access$400(EventQueue.java:97)
    at java.awt.EventQueue$3.run(EventQueue.java:697)
    at java.awt.EventQueue$3.run(EventQueue.java:691)
    at java.security.AccessController.doPrivileged(Native Method)
    at java.security.ProtectionDomain$1.doIntersectionPrivilege(ProtectionDomain.java:75)
    at java.awt.EventQueue.dispatchEvent(EventQueue.java:714)
    at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
    at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
    at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
    at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
    at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
Caused by: org.hsqldb.HsqlException: java.lang.NullPointerException
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 19 more
Caused by: java.lang.NullPointerException
    at org.hsqldb.Scanner.reset(Unknown Source)
    at org.hsqldb.Scanner.reset(Unknown Source)
    at org.hsqldb.ParserBase.reset(Unknown Source)
    at org.hsqldb.ParserDQL.reset(Unknown Source)
    at org.hsqldb.TableDerived.newDerivedTable(Unknown Source)
    at org.hsqldb.ParserDQL.readNamedSubqueryOrNull(Unknown Source)
    at org.hsqldb.ParserDQL.readTableOrSubquery(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableReference(Unknown Source)
    at org.hsqldb.ParserDQL.XreadFromClause(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableExpression(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSubqueryTableBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSubqueryTableBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSimpleValueExpressionPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
    at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
    at org.hsqldb.ParserDQL.XreadBooleanPrimaryOrNull(Unknown Source)
    at org.hsqldb.ParserDQL.XreadBooleanTestOrNull(Unknown Source)
    at org.hsqldb.ParserDQL.XreadBooleanFactorOrNull(Unknown Source)
    at org.hsqldb.ParserDQL.XreadBooleanTermOrNull(Unknown Source)
    at org.hsqldb.ParserDQL.XreadBooleanValueExpression(Unknown Source)
    at org.hsqldb.ParserDQL.readWhereGroupHaving(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableExpression(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
    at org.hsqldb.ParserDQL.XreadRecursiveSubqueryBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableNamedSubqueryBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
    at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
    ... 21 more

The problem appears to be that the recursive name ("foo" in the example) is referenced twice in the query. Although the minimal example query above does not really require require recursing twice, it's useful to be able to use a construction like this to halt the iteration based on some condition on the result of the previous iteration.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1454
HyperSQL Database Engine (HSQLDB) / Bugs / #1454 Null Pointer in CASEWHEN and CASE... WHEN use case
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The last instruction of the script below results in a null pointer exception:
CREATE TABLE Test (
id bigint NOT NULL,
facet VARCHAR(255),
x DOUBLE NOT NULL,
y DOUBLE NOT NULL,
z DOUBLE NOT NULL,
PRIMARY KEY(id)
)
INSERT INTO Test (id, facet, x, y, z) VALUES (1, 'minX', 1, 2, 3)
SELECT CASEWHEN(facet = 'minX', 1, 0)
FROM Test
SELECT CASEWHEN(facet = 'minX', greatest(x, x+y), 0)
FROM Test
SELECT CASEWHEN(facet = 'minX', 1, least(x, x+y))
FROM Test
SELECT CASEWHEN(facet = 'minX', greatest(x, x+y), least(x, x+y))
FROM Test
Same if CASEWHEN is replaced by CASE facet WHEN ...
This is happening with hsqldb 2.3.3 (I'd like to test with 2.3.4, but it needs extra effort due to bug https://sourceforge.net/p/hsqldb/bugs/1441
Thanks
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1455
HyperSQL Database Engine (HSQLDB) / Bugs / #1455 PreparedStatement: setObject(..) throws SQLSyntaxErrorException when binding Arrays to MERGE statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I try to bind an Integer[] to a PreparedStatement that uses MERGE... I get a SQLSyntaxErrorException.
INSERT/UPDATE works fine.
I attached a test case that triggers that behaviour on my system with HSQLDB 2.3.4
Is that a bug or faulty user?
Harald
1 Attachments


HSQLDBTest.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1456
HyperSQL Database Engine (HSQLDB) / Bugs / #1456 Silent option does not always prevent Server to write on stdout
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am starting a HSQLDB server programmatically. Everything is working well, except the silent option, which in despite of being the first method that is invoked on the Server object, one line is written on the standard output:
Server server = new Server();
server.setSilent(true);
server.start();

Outputs:

[Server@2c8d66b2]: [Thread[main,5,main]]: setSilent(true)

A quick look at the code associated to the class org.hsqldb.server.Server let me think it is a bug. The field isSilent is initialized to false by default. Then, its value can be changed with a call to setSilent or setProperties. However, these last methods make use of printWithThread to print a few things before changing the value of the field isSilent. Since value passed to printWithThread is written on the standard output if isSilent not set, there is always at least one line displayed on the standard output.
Is there any other solution to prevent output on standard output with the Server class?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1457
HyperSQL Database Engine (HSQLDB) / Bugs / #1457 org.hsqldb.HsqlException: incompatible data types in combination
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get following exception with v2.3.4:
Exception in thread "main" java.sql.SQLSyntaxErrorException: incompatible data types in combination in statement [select * from testtable where column1 between ?-? and ?]
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)

Caused by: org.hsqldb.HsqlException: incompatible data types in combination
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.ExpressionLogical.resolveTypesForComparison(Unknown Source)
    at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
    at org.hsqldb.ExpressionLogical.resolveTypes(Unknown Source)
    at org.hsqldb.QuerySpecification.resolveExpressionTypes(Unknown Source)
    at org.hsqldb.QuerySpecification.resolveTypesPartOne(Unknown Source)
    at org.hsqldb.QueryExpression.resolve(Unknown Source)
    at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
    at org.hsqldb.Session.compileStatement(Unknown Source)
    at org.hsqldb.StatementManager.compile(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 8 more

Sample test case:
public static void main(String[] args) throws ClassNotFoundException, SQLException
    {
        // load driver and create connection and statement
        Class.forName("org.hsqldb.jdbcDriver");
        try (Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:test", "test", null))
        {
            try (Statement st = conn.createStatement())
            {
                st.execute("CREATE TABLE testtable (column1 DATE)");

                st.execute("INSERT INTO testtable VALUES (sysdate)");
                try (PreparedStatement pst = conn.prepareStatement("select * from testtable where column1 between ?-? and ?"))
                {
                    Date date = new Date(System.currentTimeMillis());
                    pst.setDate(1, date);
                    pst.setInt(2, 3);
                    pst.setDate(3, date);
                    ResultSet resultSet = pst.executeQuery();
                }

            }
        }
    }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1458
HyperSQL Database Engine (HSQLDB) / Bugs / #1458 unexpected token: SELECT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using a formula to execute a select statement and I'm getting the following error: unexpected token: SELECT
Here's the relvant part of the stack trace:
Caused by: java.sql.SQLSyntaxErrorException: unexpected token: SELECT
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.prepareStatement(Unknown Source)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.apache.tomcat.jdbc.pool.ProxyConnection.invoke(ProxyConnection.java:126)
at org.apache.tomcat.jdbc.pool.JdbcInterceptor.invoke(JdbcInterceptor.java:108)
at org.apache.tomcat.jdbc.pool.DisposableConnectionFacade.invoke(DisposableConnectionFacade.java:81)
at com.sun.proxy.$Proxy59.prepareStatement(Unknown Source)
at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$5.doPrepare(StatementPreparerImpl.java:162)
at org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement(StatementPreparerImpl.java:186)
... 90 more
Caused by: org.hsqldb.HsqlException: unexpected token: SELECT
at org.hsqldb.error.Error.parseError(Unknown Source)
at org.hsqldb.ParserBase.unexpectedToken(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadRowElementList(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesValueExpressionPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesFactor(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadAllTypesCommonValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadValueExpression(Unknown Source)
at org.hsqldb.ParserDQL.XreadSelect(Unknown Source)
at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
at org.hsqldb.ParserCommand.compilePart(Unknown Source)
at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
at org.hsqldb.Session.compileStatement(Unknown Source)
at org.hsqldb.StatementManager.compile(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
Here's a snippet of the sql that is generated:
select 
get_foo(table1.col1,
table1.col2,
table1.col3) as formula4_0_,
(select s.col4 from table2 s,
table3 ts where s.s_id = ts.s_id and ts.t_id = get_s_id(table1.col1,
table1.col2,
table1.col3)) as formula5_0_ from test table1 where table1.no_test=?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1459
HyperSQL Database Engine (HSQLDB) / Bugs / #1459 Commands work on embedded, not on server.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a sequence of legal SQL commands that work fine on HSQLDB embedded, but fails when running HSQLDB in server mode. In server mode the last command in the attached file results in a java.sql.SQLException: statement is invalid.
See attached file for SQL statements, including setting up the database and creating tables, server logs and config.
5 Attachments


hsqldbtest.log


hsqldbtest.properties


hsqldbtest.script


runhsqldbserver.sh


stmts.sql
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1460
HyperSQL Database Engine (HSQLDB) / Bugs / #1460 Parser error when RECURSIVE CTE contains parenthesised UNION query
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This works:
WITH RECURSIVE t(a) AS (
   SELECT user_name
   FROM information_schema.system_users
   UNION ALL 
   SELECT a
   FROM t
   WHERE 1 = 0
)
SELECT *
FROM t;

This doesn't:
WITH RECURSIVE t(a) AS ((
    SELECT user_name
    FROM information_schema.system_users
  ) UNION ALL (
    SELECT a
    FROM t
    WHERE 1 = 0
))
SELECT *
FROM t;

Only recursive queries seem to be affected. The following works:
WITH t(a) AS ((
    SELECT user_name
    FROM information_schema.system_users
  ) UNION ALL ( 
    SELECT user_name
    FROM information_schema.system_users
))
SELECT *
FROM t;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1461
HyperSQL Database Engine (HSQLDB) / Bugs / #1461 colon not working as fs separator
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A text table named hello.txt containing only "hello:world" returns "Access is denied" or "constraint violation" when 
SET TABLE iedict SOURCE "hello.txt;fs=:"
is executed. Changing only the colon in hello.txt and the fs value in SET TABLE to another separator, e.g., "!" or "\semi", succeeds.
2 Attachments





bangsuccess.png





colonfail.png
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1462
HyperSQL Database Engine (HSQLDB) / Bugs / #1462 table created via subquery not like a view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http://hsqldb.org/doc/guide/databaseobjects-chapt.html#dbc_table_creation says"An <as subquery="" clause=""> used in table definition creates a table based on a . This kind of table definition is similar to a view definition." Yet after creating a (non-text) table from a text table via an as-subquery clause, and then DROPping the source (text) table, I still have my data in the newer, non-text table. So the latter table is not similar to a VIEW onto the former, dropped table.I don't know enough of HSQLDB's functionality to suggest fixed verbiage.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1463
HyperSQL Database Engine (HSQLDB) / Bugs / #1463 Error DELETE with referential integrity DELETE ON CASCADE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use HSQLDB 2.3.3. We decided not to use 2.3.4 because of bug 1441 (Deadlock when using HyperSQL 2.3.4 with Flyway migrations).
We had a problem trying to delete a record from a table woth referential constraint in DELETE CASCADE.
Below you can find DDL to create some tables of our database
-- *-------------------------------
-- * BUCKETS_ELEMENTS
-- *-------------------------------

CREATE TABLE BUCKETS_ELEMENTS
(
   PROJECT_ID               CHARACTER(36)       NOT NULL,
   BUCKET_HASH              VARCHAR(64)         NOT NULL,
   HASH                     VARCHAR(128)        NOT NULL,
   NAME                     VARCHAR(128)        NOT NULL,
   EXT                      VARCHAR(64),
   TARGET                   VARCHAR(128),
   THUMBNAIL                VARCHAR(128),
   TILES                    VARCHAR(128),
   MIME_TYPE                VARCHAR(128)        NOT NULL,
   CHECKSUM                 VARCHAR(128),
   WIDTH                    INTEGER,
   HEIGHT                   INTEGER,
   ATTRIBUTES               VARCHAR(512),
   METADATA                 VARCHAR(16777216),
   XXXXX_UUID               CHARACTER(36),
   XXXXX_MARKUP_XML         VARCHAR(16777216),
   XXXXX_MARKUP_CHECKSUM    VARCHAR(128),
   PARTITION_KEY            CHARACTER(36)       NOT NULL
);

ALTER TABLE BUCKETS_ELEMENTS
   ADD CONSTRAINT PK_BUCKETS_ELEMENTS
   PRIMARY KEY (PARTITION_KEY, PROJECT_ID, BUCKET_HASH, HASH);

CREATE INDEX BUCKETS_ELEMENTS_IX2
   ON BUCKETS_ELEMENTS (XXXXX_UUID ASC, PARTITION_KEY ASC, PROJECT_ID ASC);

CREATE INDEX BUCKETS_ELEMENTS_IX
   ON BUCKETS_ELEMENTS (PARTITION_KEY ASC, PROJECT_ID ASC, BUCKET_HASH ASC, MIME_TYPE ASC);

-- *-------------------------------
-- * PROJECTS_TAGS
-- *-------------------------------

CREATE TABLE PROJECTS_TAGS
(
   PROJECT_ID     CHARACTER(36)   NOT NULL,
   TAG_ID         VARCHAR(16)     NOT NULL,
   REVISION       TINYINT         NOT NULL,
   NAME           VARCHAR(128)    NOT NULL,
   PARTITION_KEY  CHARACTER(36)
);

ALTER TABLE PROJECTS_TAGS
   ADD CONSTRAINT PK_PROJECTS_TAGS
   PRIMARY KEY (PARTITION_KEY, PROJECT_ID, TAG_ID);

ALTER TABLE PROJECTS_TAGS
  ADD CONSTRAINT FK_PROJECTS_TAGS_PROJECTS FOREIGN KEY (PARTITION_KEY, PROJECT_ID)
  REFERENCES PROJECTS (PARTITION_KEY, ID)
  ON UPDATE NO ACTION
  ON DELETE CASCADE;

-- *-------------------------------
-- * PROJECTS_TAGS
-- *-------------------------------

CREATE TABLE BUCKETS_ELEMENTS_TAGS
(
   PROJECT_ID           CHARACTER(36)   NOT NULL,
   BUCKET_HASH          VARCHAR(128)    NOT NULL,
   BUCKET_ELEMENT_HASH  VARCHAR(128)    NOT NULL,
   TAG_ID               VARCHAR(16)     NOT NULL,
   PARTITION_KEY        CHARACTER(36)
);

ALTER TABLE BUCKETS_ELEMENTS_TAGS
   ADD CONSTRAINT PK_BUCKETS_ELEMENTS_TAGS
   PRIMARY KEY (PARTITION_KEY, PROJECT_ID, BUCKET_HASH, BUCKET_ELEMENT_HASH, TAG_ID);

ALTER TABLE BUCKETS_ELEMENTS_TAGS
  ADD CONSTRAINT FK_BUCKETS_ELEMENTS_TAGS_BUCKETS_ELEMENTS FOREIGN KEY (PARTITION_KEY, PROJECT_ID, BUCKET_HASH, BUCKET_ELEMENT_HASH)
  REFERENCES BUCKETS_ELEMENTS (PARTITION_KEY, PROJECT_ID, BUCKET_HASH, HASH)
  ON UPDATE NO ACTION
  ON DELETE CASCADE;

ALTER TABLE BUCKETS_ELEMENTS_TAGS
  ADD CONSTRAINT FK_BUCKETS_ELEMENTS_TAGS_PROJECTS_TAGS FOREIGN KEY (PARTITION_KEY, PROJECT_ID, TAG_ID)
  REFERENCES PROJECTS_TAGS (PARTITION_KEY, PROJECT_ID, TAG_ID)
  ON UPDATE NO ACTION
  ON DELETE CASCADE;

CREATE INDEX BUCKETS_ELEMENTS_TAGS_IX
   ON BUCKETS_ELEMENTS_TAGS (PARTITION_KEY ASC, PROJECT_ID ASC, TAG_ID ASC);

HSQLDB 2.3.3 server wrote this log
[Server@69983bc2]: 0:SQLCLI:SQLPREPARE DELETE FROM buckets_elements WHERE project_id=? AND bucket_hash=? AND hash=? AND partition_key=?
[Server@69983bc2]: 0:SQLCLI:SQLEXECUTE:276
[Server@69983bc2]: 0:SQLCLI:SQLFREESTMT:276
[Server@69983bc2]: 0:SQLCLI:SQLENDTRAN:ROLLBACK

Below the error stacktrace
java.lang.ArrayIndexOutOfBoundsException: 17
    at org.hsqldb.lib.ArrayUtil.hasNull(ArrayUtil.java:848)
    at org.hsqldb.Constraint.findFkRef(Constraint.java:897)
    at org.hsqldb.StatementDML.performReferentialActions(StatementDML.java:1598)
    at org.hsqldb.StatementDML.delete(StatementDML.java:1366)
    at org.hsqldb.StatementDML.executeDeleteStatement(StatementDML.java:1273)
    at org.hsqldb.StatementDML.getResult(StatementDML.java:238)
    at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:195)
    at org.hsqldb.Session.executeCompiledStatement(Session.java:1388)
    at org.hsqldb.Session.execute(Session.java:1001)
    at org.hsqldb.server.ServerConnection.receiveResult(ServerConnection.java:396)
    at org.hsqldb.server.ServerConnection.run(ServerConnection.java:1533)
    at java.lang.Thread.run(Thread.java:745)

During debug the execution of this method
performReferentialActions(Session session, Table table,
                                          RowSetNavigatorDataChange navigator,
                                          Row row, Object[] data,
                                          int[] changedCols, HashSet path,
                                          boolean deleteCascade)

At row 1598 calls this method below
RowIterator refiterator = c.findFkRef(session, row.getData());
And for every table father or children this method below verifies records that will use DELETE CASCADE
RowIterator findFkRef(Session session, Object[] row) {

    if (row == null || ArrayUtil.hasNull(row, core.mainCols)) {
        return core.refIndex.emptyIterator();
    }

    PersistentStore store = core.refTable.getRowStore(session);

    return core.refIndex.findFirstRow(session, store, row, core.mainCols);
}

In this method below (ArrayUtil.hasNull(Object[] array, int[] columnMap))
public static boolean hasNull(Object[] array, int[] columnMap) {

    int count = columnMap.length;

    for (int i = 0; i < count; i++) {
        if (array[columnMap[i]] == null) {// <- ArrayIndexOutOfBoundsException
            return true;
        }
    }

    return false;
}

The row from table core.mainCols contains a columnMap [17,0,1,2] that throws this exception
java.lang.ArrayIndexOutOfBoundsException
because the number of elements of array is less than columnMap indexes.
FATHER TABLE EXAMPLE (17 column exists and it is correct)
array: (BUCKETS_ELEMENTS)
[abde6189-f85b-4b93-a5dc-cd178a8445a2, xxxxx-Bachstraße-SchwarzWeiß, Station-001_ SW-001, Station-001_ SW-001, null, xxxxx.xml, *Station-001_ SW-001.thumbs, null, pppppp/xxxx, d405f52a440251be9f764b51fb6f3323f2242394, null, null, null, {"data":{"coords":{"x":20507.790083,"y":21300.805724,"z":38.15458},"facemap":{"front":"Img_1_1024.JPG","right":"Img_2_1024.JPG","back":"Img_3_1024.JPG","left":"Img_0_1024.JPG","up":"Img_4_1024.JPG","down":"Img_5_1024.JPG"}}}, 9E3C7C5C-80B6-4F07-A01C-AD35C76EE754, null, null, 497450ee-2fbc-11e5-9c60-0cc47a313c54]
columnMap
[17, 0, 1, 2]

CHILD TABLE EXAMPLE (17 column doesn't exist. Why the system believes that this table has a column 17?)
array: (BUCKETS_ELEMENTS_TAGS)
[abde6189-f85b-4b93-a5dc-cd178a8445a2, xxxxx-Bachstraße-SchwarzWeiß, Station-001_ SW-001, 469838477a844ba5, 497450ee-2fbc-11e5-9c60-0cc47a313c54]
columnMap
[17, 0, 1, 2]  <- This what the system believes for this table but this is wrong
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1464
HyperSQL Database Engine (HSQLDB) / Bugs / #1464 using clob instead of varchar uses lots of memory with mem database
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For junit tests in hibernate I use hsqldb mem database for performance. As soon as I switch a column to use @lob annotation in hibernate the junit tests persisting object graphs fail because out of memory. Obviously the clob type uses lots of memory for the mem database compared to varchar and exhausts available memory.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1465
HyperSQL Database Engine (HSQLDB) / Bugs / #1465 TO_CHAR not work into view
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I create a view on a table, if I use TO_CHAR into the view definition, HSQLDB doesn't find the column.
With an example :
I create a table MY_TABLE
CREATE TABLE MY_TABLE (
NUMBER_COL NUMBER(12,0));

If I create the view where I do a TO_CHAR on NUMBER_COL
create view MY_VIEW(CHAR_COL) 
 AS SELECT TO_CHAR(NUMBER_COL)
FROM MY_TABLE;

I have this error :
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: NUMBER_COL
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.ParserDQL.readTableName(Unknown Source)
    at org.hsqldb.ParserDQL.readTableOrSubquery(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableReference(Unknown Source)
    at org.hsqldb.ParserDQL.XreadJoinedTableAsView(Unknown Source)
    at org.hsqldb.ParserDQL.XreadJoinedTableAsSubqueryOrNull(Unknown Source)
    at org.hsqldb.ParserDQL.readTableOrSubquery(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableReference(Unknown Source)
    at org.hsqldb.ParserDQL.XreadJoinedTableAsView(Unknown Source)
    at org.hsqldb.ParserDDL.compileCreateView(Unknown Source)
    at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)

But, if I create the view without TO_CHAR, it work :
create view MY_VIEW(CHAR_COL) 
 AS SELECT NUMBER_COL
FROM MY_TABLE;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1466
HyperSQL Database Engine (HSQLDB) / Bugs / #1466 java.util.UUID[] type cannot be used as bind variable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The java.util.UUID type is already supported as a valid bind variable type for HSQLDB's UUID type, but it cannot be used for arrays. For instance, the following code fails:
try (Connection c = org.hsqldb.jdbc.JDBCDriver.getConnection(url, properties)) {
    try (PreparedStatement s = c.prepareStatement("select cast(? as uuid array) as a from information_schema.system_users")) {
        s.setObject(1, new UUID[] { UUID.randomUUID(), UUID.randomUUID() });

        try (ResultSet r = s.executeQuery()) {
            r.next();
            System.out.println(r.getObject(1));
        }
    }
}

The exception I'm getting is this:
org.hsqldb.HsqlException: incompatible data type in conversion
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.types.BinaryUUIDType.convertJavaToSQL(Unknown Source)
    at org.hsqldb.jdbc.JDBCPreparedStatement.setParameter(Unknown Source)
    at org.hsqldb.jdbc.JDBCPreparedStatement.setObject(Unknown Source)
    at HSQLDB.main(HSQLDB.java:60)

The logic in the failing method is this:
public Object convertJavaToSQL(SessionInterface session, Object a) {

    if (a == null) {
        return null;
    }

    if (a instanceof byte[]) {
        return new BinaryData((byte[]) a, true);
    }

    throw Error.error(ErrorCode.X_42561);
}

There should also be a section like "if (a intanceof UUID[])".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1467
HyperSQL Database Engine (HSQLDB) / Bugs / #1467 Recursive query runs forever
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This simple recursive query runs forever:
with recursive t1(f1, f2) as (
  select 
    1, 
    cast('a' as varchar(15))
  from (select 1 as dual from information_schema.system_users limit 1) as dual
union all
  select 
    (t1.f1 + 1), 
    cast((t1.f2 || 'a') as varchar(15))
  from t1
  where t1.f1 < 10
)
select 
  t1.f1, 
  t1.f2
from t1

Here are a few thread dumps from jstack:
"DBeaver: Read data [SQL Query / Script.sql]" #28 prio=5 os_prio=0 tid=0x000000001b31f800 nid=0x3ee8 runnable [0x0000000020c4e000]
   java.lang.Thread.State: RUNNABLE
        at org.hsqldb.persist.RowStoreAVLHybrid.getNewCachedObject(Unknown Source)
        at org.hsqldb.navigator.RowSetNavigatorDataTable.add(Unknown Source)
        at org.hsqldb.navigator.RowSetNavigatorData.unionAll(Unknown Source)
        at org.hsqldb.QueryExpression.getResultRecursive(Unknown Source)
        at org.hsqldb.QueryExpression.getResult(Unknown Source)
        at org.hsqldb.TableDerived.materialise(Unknown Source)
        at org.hsqldb.StatementDMQL.materializeSubQueries(Unknown Source)
        at org.hsqldb.StatementDMQL.execute(Unknown Source)
        at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
        at org.hsqldb.Session.executeDirectStatement(Unknown Source)
        at org.hsqldb.Session.execute(Unknown Source)
        - locked <0x00000000822e2780> (a org.hsqldb.Session)
        at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
        at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)

"DBeaver: Read data [SQL Query / Script.sql]" #28 prio=5 os_prio=0 tid=0x000000001b31f800 nid=0x3ee8 runnable [0x0000000020c4e000]
   java.lang.Thread.State: RUNNABLE
        at org.hsqldb.index.IndexAVL.compareRowForInsertOrDelete(Unknown Source)
        at org.hsqldb.index.IndexAVL.insert(Unknown Source)
        at org.hsqldb.persist.RowStoreAVL.indexRow(Unknown Source)
        at org.hsqldb.persist.RowStoreAVLHybrid.indexRow(Unknown Source)
        at org.hsqldb.navigator.RowSetNavigatorDataTable.add(Unknown Source)
        at org.hsqldb.navigator.RowSetNavigatorData.unionAll(Unknown Source)
        at org.hsqldb.QueryExpression.getResultRecursive(Unknown Source)
        at org.hsqldb.QueryExpression.getResult(Unknown Source)
        at org.hsqldb.TableDerived.materialise(Unknown Source)
        at org.hsqldb.StatementDMQL.materializeSubQueries(Unknown Source)
        at org.hsqldb.StatementDMQL.execute(Unknown Source)
        at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
        at org.hsqldb.Session.executeDirectStatement(Unknown Source)
        at org.hsqldb.Session.execute(Unknown Source)
        - locked <0x00000000822e2550> (a org.hsqldb.Session)
        at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
        at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)

"DBeaver: Read data [SQL Query / Script.sql]" #28 prio=5 os_prio=0 tid=0x000000001b31f800 nid=0x3ee8 waiting for monitor entry [0x0000000020c4e000]
   java.lang.Thread.State: BLOCKED (on object monitor)
        at org.hsqldb.persist.RowStoreAVLHybrid.getNewCachedObject(Unknown Source)
        at org.hsqldb.navigator.RowSetNavigatorDataTable.add(Unknown Source)
        at org.hsqldb.navigator.RowSetNavigatorData.unionAll(Unknown Source)
        at org.hsqldb.QueryExpression.getResultRecursive(Unknown Source)
        at org.hsqldb.QueryExpression.getResult(Unknown Source)
        at org.hsqldb.TableDerived.materialise(Unknown Source)
        at org.hsqldb.StatementDMQL.materializeSubQueries(Unknown Source)
        at org.hsqldb.StatementDMQL.execute(Unknown Source)
        at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
        at org.hsqldb.Session.executeDirectStatement(Unknown Source)
        at org.hsqldb.Session.execute(Unknown Source)
        - locked <0x00000000822e2520> (a org.hsqldb.Session)
        at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
        at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1468
HyperSQL Database Engine (HSQLDB) / Bugs / #1468 CallableStatement cannot handle expressions containing bind variables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a procedure like this:
CREATE PROCEDURE p_author_exists (IN author_name VARCHAR(50), OUT result INT)
READS SQL DATA
BEGIN ATOMIC
  SELECT COUNT(*) INTO result
    FROM t_author
   WHERE first_name LIKE author_name
      OR last_name LIKE author_name;
END

I can call the procedure easily using a CallableStatement like this:
CallableStatement s = c.prepareCall("{ call P_AUTHOR_EXISTS(?, ?) }"));
// .. Bind IN parameter
// .. Register OUT parameter

I can also call the procedure using a constant expression for the IN parameter:
CallableStatement s = c.prepareCall("{ call P_AUTHOR_EXISTS('abc' || cast('xyz' as varchar(50)), ?) }"));
// .. Register OUT parameter

However, I cannot use any expression that contains a bind variable, e.g.:
CallableStatement s = c.prepareCall("{ call P_AUTHOR_EXISTS(cast(? as varchar(50)), ?) }"));
// .. Register OUT parameter

This results in the following exception:
java.lang.NullPointerException
    at org.hsqldb.StatementProcedure.getParametersMetaData(Unknown Source)
    at org.hsqldb.result.Result.newPrepareResponse(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    at org.hsqldb.jdbc.JDBCPreparedStatement.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCCallableStatement.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.prepareCall(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1469
HyperSQL Database Engine (HSQLDB) / Bugs / #1469  regression 2.3.4 ADD CHECK CONSTRAINT keyword handling problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While upgrading to 2.3.4 from 2.3.3 a new error started to apper in our tests:
ALTER TABLE line_item ADD CONSTRAINT line_item_period_ck CHECK  (period IN ( 'current',  'next',  'previous'))

Error:
 unexpected token: IN required: (

table creation is handling the column with name "period" just fine:
CREATE TABLE line_item (id bigint generated by default as identity (start with 1), 
period varchar(50));

Full error:
java.sql.SQLSyntaxErrorException: unexpected token: IN required: (
    at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:376)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:247)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:1797)
    at org.hsqldb.jdbc.JDBCStatement.executeUpdate(JDBCStatement.java:208)
    at com.mchange.v2.c3p0.impl.NewProxyStatement.executeUpdate(NewProxyStatement.java:410)

the word period is not mentioned in reserved keywords. http://hsqldb.org/doc/guide/lists-app.html
Also when period is esaped (double quoted) the same statemt dod not work (with different error)
ALTER TABLE line_item ADD CONSTRAINT line_item_period_ck CHECK  ("period" IN ( 'current',  'next',  'previous'))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1470
Page not found
    - SourceForge.net

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1471
HyperSQL Database Engine (HSQLDB) / Bugs / #1471 ArrayIndexOutOfBoundsException in RowStoreAVLHybrid#getAccessor()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Attempting to upgrade from HSQL 2.3.2 to 2.3.4 we observed lots of our integration tests (more than 900) randomly failing with an ArrayIndexOutOfBoundsException in RowStoreAVLHybrid:
    Caused by: java.sql.SQLException: java.lang.ArrayIndexOutOfBoundsException: 1
        ... 78 more
    Caused by: org.hsqldb.HsqlException: java.lang.ArrayIndexOutOfBoundsException: 1
        at org.hsqldb.error.Error.error(Error.java:114)
        at org.hsqldb.result.Result.newErrorResult(Result.java:1069)
        at org.hsqldb.result.Result.newErrorResult(Result.java:1039)
        at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:188)
        at org.hsqldb.Session.executeCompiledStatement(Session.java:1384)
        at org.hsqldb.Session.execute(Session.java:1007)
        at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4667)
        ... 75 more
    Caused by: java.lang.ArrayIndexOutOfBoundsException: 1
        at org.hsqldb.persist.RowStoreAVLHybrid.getAccessor(RowStoreAVLHybrid.java:327)
        at org.hsqldb.persist.RowStoreAVLHybridExtended.getAccessor(RowStoreAVLHybridExtended.java:120)
        at org.hsqldb.index.IndexAVL.getAccessor(IndexAVL.java:1841)
        at org.hsqldb.index.IndexAVL.findNode(IndexAVL.java:1555)
        at org.hsqldb.index.IndexAVL.findFirstRow(IndexAVL.java:1088)
        at org.hsqldb.RangeVariable$RangeIteratorMain.getFirstRow(RangeVariable.java:1419)
        at org.hsqldb.RangeVariable$RangeIteratorMain.initialiseIterator(RangeVariable.java:1313)
        at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:1251)
        at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1576)
        at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1471)
        at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1461)
        at org.hsqldb.StatementQuery.getResult(StatementQuery.java:69)
        at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:186)
        ... 78 more

If I add diagnostics to RowStoreAVL and RowStoreAVLHybrid and let the tests fail again, I see the actual length of accessorList was 1 at the moment the call was made, and the RowStoreAVLHybrid instance has been accessed by 40+ different threads.
This looks like a inconsistent synchronization issue to me, despite all methods which change the array reference (not the array contents itself) seem to be synchronized.
The exception is thrown during both SQL INSERTs and SELECTs, but always from the same (single) place.
The issue is hard to reproduce in a lab, so I'm not providing any code here.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1472
HyperSQL Database Engine (HSQLDB) / Bugs / #1472 ArrayIndexOutOfBoundsException for array_agg(distinct col)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
java.lang.ArrayIndexOutOfBoundsException: 1
    at org.hsqldb.ExpressionArrayAggregate.getAggregatedValue(ExpressionArrayAggregate.java:344)

This seems to occur because list.size() is used on line 343 instead of array.length. List size and array length can differ if distinct clause is used..
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1473
HyperSQL Database Engine (HSQLDB) / Bugs / #1473 SELECT...FOR UPDATE locking unexpected behaviour
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There is a thread about this that has some background info here:
https://sourceforge.net/p/hsqldb/discussion/73674/thread/4bdce697/
Basically, I'm trying to use SELECT...FOR UPDATE to coordinate access to a shared pool of tasks where each task is represented as a row. The goal is to ensure that each task is picked up by one thread only. Each thread queries for a "pending" task and then, while holding the update lock, changes that task from "pending" to "processing" so that no other "pending" query will return that task.
This method has the expected behaviour on other DBs I've tried but not HSql.
I've attached a test program showing the issue. You can just import it into Eclipse. I tried this program against a SAP HANA database and it works in the expected way.
1 Attachments


hsql-lock.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1474
Page not found
    - SourceForge.net

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1475
HyperSQL Database Engine (HSQLDB) / Bugs / #1475 Can't check for index existence by selecting from INFORMATION_SCHEMA.SYSTEM_INDEXINFO
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As of r5720 (2.4.0-SNAPSHOT), I can no longer check whether a particular index exists.
This is a regression compared to v2.3.4.
I'm pretty sure this is a regression compared to r5711, too.
The testcase which demonstrates the issue is attached.
1 Attachments


HsqlIndexTest.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1476
HyperSQL Database Engine (HSQLDB) / Bugs / #1476 Database Lock Acquisition Failure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
We run hsqldb in a web environment, with Servlets under Jboss. Our stable version uses 2.3.2 but we encountered issues with query aggregates which were solved with a 2.3.4 upgrade. However upon restarting, we get a lock acquisition failure, which we have determined to be caused by the Database.reopen failing due to RuntimeException raised by LoggerFramework which is as it turns out because the name of the Database is empty. 
We have created a simple patch to change the database name check, but have not verified any other use cases in hsqldb aside from our own.
The stacktrace 
### Cause: java.sql.SQLException: Database lock acquisition failure: attempt to connect while db opening /closing
    at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:23) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:107) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:98) [mybatis-3.2.2.jar:3.2.2]
    at org.restcomm.connect.dao.mybatis.MybatisMediaServerDao.getMediaServerEntityByIP(MybatisMediaServerDao.java:73) [restcomm-connect.dao-8.1.0.29.jar:8.1.0.29]
    at org.restcomm.connect.mrb.MediaResourceBrokerGeneric.uploadLocalMediaServersInDataBase(MediaResourceBrokerGeneric.java:282) [restcomm-connect.mrb-8.1.0.29.jar:8.1.0.29]
    at org.restcomm.connect.mrb.MediaResourceBrokerGeneric.onStartMediaResourceBroker(MediaResourceBrokerGeneric.java:103) [restcomm-connect.mrb-8.1.0.29.jar:8.1.0.29]
    at org.restcomm.connect.mrb.MediaResourceBrokerGeneric.onReceive(MediaResourceBrokerGeneric.java:90) [restcomm-connect.mrb-8.1.0.29.jar:8.1.0.29]
    at akka.actor.UntypedActor$$anonfun$receive$1.applyOrElse(UntypedActor.scala:159) [akka-actor_2.10-2.1.2.jar:]
    at akka.actor.ActorCell.receiveMessage(ActorCell.scala:425) [akka-actor_2.10-2.1.2.jar:]
    at akka.actor.ActorCell.invoke(ActorCell.scala:386) [akka-actor_2.10-2.1.2.jar:]
    at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:230) [akka-actor_2.10-2.1.2.jar:]
    at akka.dispatch.Mailbox.run(Mailbox.scala:212) [akka-actor_2.10-2.1.2.jar:]
    at akka.dispatch.ForkJoinExecutorConfigurator$MailboxExecutionTask.exec(AbstractDispatcher.scala:506) [akka-actor_2.10-2.1.2.jar:]
    at scala.concurrent.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:262) [scala-library-2.10.1.jar:]
    at scala.concurrent.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:975) [scala-library-2.10.1.jar:]
    at scala.concurrent.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1478) [scala-library-2.10.1.jar:]
    at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104) [scala-library-2.10.1.jar:]
Caused by: java.sql.SQLException: Database lock acquisition failure: attempt to connect while db opening /closing
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at java.sql.DriverManager.getConnection(DriverManager.java:571) [rt.jar:1.7.0_80]
    at java.sql.DriverManager.getConnection(DriverManager.java:187) [rt.jar:1.7.0_80]
    at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:180) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:175) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.getConnection(UnpooledDataSource.java:79) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.datasource.pooled.PooledDataSource.popConnection(PooledDataSource.java:373) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.datasource.pooled.PooledDataSource.getConnection(PooledDataSource.java:82) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.transaction.jdbc.JdbcTransaction.openConnection(JdbcTransaction.java:131) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.transaction.jdbc.JdbcTransaction.getConnection(JdbcTransaction.java:58) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:271) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:69) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:56) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:259) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:132) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:105) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:81) [mybatis-3.2.2.jar:3.2.2]
    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:104) [mybatis-3.2.2.jar:3.2.2]
    ... 15 more
Caused by: org.hsqldb.HsqlException: Database lock acquisition failure: attempt to connect while db opening /closing
    at org.hsqldb.error.Error.error(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.error.Error.error(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.error.Error.error(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    at org.hsqldb.DatabaseManager.newSession(Unknown Source) [hsqldb-2.3.4.jar:2.3.4]
    ... 35 more

Apologies if this is a duplicate issue, we have compared against trunk and saw there are no similar changes.
1 Attachments


20170317_Logger_strcmp_before_Log_instance.patch
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1477
HyperSQL Database Engine (HSQLDB) / Bugs / #1477 SQL batch issue in concurrent  memory DB
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I run the following code in servlet
when I do the performance test, there may be a batch error occur, the batch fail and the table will not be created. I wont get the exception if I remove the "mem" for connection.
I also update my code, if I catch batch error, I will execute the SQL one by one, then the tables are created successfully.
I think there may be some concurrent issue in HSQL, can you help fixing the issue?
thank you!
**code begin
Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + Thread.currentThread().getId() + ";shutdown=true", "sa", "")
Statement stmt = conn.createStatement();
for (String sql : sqls) {
stmt.addBatch(sql);
LogManager.logDebug("Define table : " + sql);
}
stmt.executeBatch();
stmt.close();code end***
the following are the list of SQL in the batch
***SQL begin
CREATE TABLE "COMPANY_DBA_1489727621354" ( COMPANY_DBA_ID_PRIMARY_KEY BIGINT,NAME VARCHAR(255),ADDR1 VARCHAR(255),ADDR2 VARCHAR(255),CITY VARCHAR(255),STATE VARCHAR(255),ZIP BIGINT,PHONE BIGINT,FAX BIGINT,EMAIL VARCHAR(255),COMPANY_LOGO VARCHAR(255),SIGNATURE_FILE VARCHAR(255),EXECUTIVE_NAME VARCHAR(255),TITLE VARCHAR(255),WEB_ADDRESS VARCHAR(255),FREE_TEXT_FOOTER VARCHAR(255),FREE_TEXT_COVER_PAGE_HEADING VARCHAR(255),FREE_TEXT_MKTG_MESSAGE VARCHAR(255),FREE_TEXT_MKTG_MESSAGE_HEADING VARCHAR(255),INCLUDE_COVER_PAGE VARCHAR(255),INCLUDE_SUMMARY VARCHAR(255),INCLUDE_VEHICLE_COVERAGE VARCHAR(255),INCLUDE_NOTICES VARCHAR(255),INCLUDE_INSURANCE_CARDS VARCHAR(255),INCLUDE_CHART VARCHAR(255), PRIMARY KEY ( COMPANY_DBA_ID_PRIMARY_KEY ) )
CREATE TABLE "PRIMARY_ACCOUNT_1489727621354" ( ACCOUNT_ID_PRIMARY_KEY BIGINT,COMPANY_DBA_ID BIGINT,POLICY_NUMBER VARCHAR(255),JURISDICTION VARCHAR(255),EFFECTIVE_DATE VARCHAR(255),TERMINATION_DATE VARCHAR(255),CUSTOMER_SEQUENCE_NUM BIGINT,TITLE VARCHAR(255),FNAME VARCHAR(255),MIDDLE_INITIAL VARCHAR(255),LNAME VARCHAR(255),MAILING_ADDRESS1 VARCHAR(255),MAILING_ADDRESS2 VARCHAR(255),MAILING_ADDRESS_CITY VARCHAR(255),MAILING_ADDRESS_STATE VARCHAR(255),MAILING_ADDRESS_ZIP BIGINT,RESIDENCE_ADDRESS1 VARCHAR(255),RESIDENCE_ADDRESS2 VARCHAR(255),RESIDENCE_ADDRESS_CITY VARCHAR(255),RESIDENCE_ADDRESS_STATE VARCHAR(255),RESIDENCE_ADDRESS_ZIP BIGINT,PHONE BIGINT,FAX BIGINT,EMAIL VARCHAR(255),DOB VARCHAR(255),GENDER VARCHAR(255),MARITAL_STATUS VARCHAR(255),LANGUAGE VARCHAR(255), PRIMARY KEY ( ACCOUNT_ID_PRIMARY_KEY ) )
CREATE TABLE "PRODUCT_1489727621354" ( PK_PRODUCT_ID BIGINT,ACCOUNT_ID_FOREIGN_KEY BIGINT,TYPE VARCHAR(255),NAME VARCHAR(255),DESCRIPTION VARCHAR(255), PRIMARY KEY ( PK_PRODUCT_ID ) )
CREATE TABLE "AUTO_1489727621354" ( PK_AUTO_INSURANCE BIGINT,FK_PRODUCT_ID BIGINT,ACCOUNT_ID_FOREIGN_KEY BIGINT,VIN_NUMBER VARCHAR(255),LIENHOLDER VARCHAR(255),DRIVERS_EXCLUDED VARCHAR(255),TOTAL_PREMIUM FLOAT ,COMBINED_DISCOUNT FLOAT ,YEAR BIGINT,MAKE VARCHAR(255),MODEL VARCHAR(255),ANNUAL_MILES VARCHAR(255),AVERAGE_DAILY_TRIP_MILES VARCHAR(255),DISCOUNT1 VARCHAR(255),DISCOUNT2 VARCHAR(255),DISCOUNT3 VARCHAR(255),DISCOUNT4 VARCHAR(255), PRIMARY KEY ( PK_AUTO_INSURANCE ) )
CREATE TABLE "AUTO_COVERAGE_1489727621354" ( PK_AUTO_INSURANCE_COVERAGE_ID BIGINT,FK_AUTO_INSURANCE BIGINT,DESCRIPTION VARCHAR(255),DEDUCTIBLE VARCHAR(255),PREMIUM FLOAT ,COVERAGE_LIMIT_TEXT VARCHAR(255),COVERAGE_LIMIT_AMOUNT1 VARCHAR(255),COVERAGE_LIMIT_AMOUNT1_DESC VARCHAR(255),COVERAGE_LIMIT_AMOUNT2 VARCHAR(255),COVERAGE_LIMIT_AMOUNT2_DESC VARCHAR(255), PRIMARY KEY ( PK_AUTO_INSURANCE_COVERAGE_ID ) )
CREATE TABLE "AGENT_1489727621354" ( PK_AGENT_ID BIGINT,FK_ACCOUNT_ID BIGINT,TITLE VARCHAR(255),FNAME VARCHAR(255),MIDDLE_INITIAL VARCHAR(255),LNAME VARCHAR(255),ADDRESS1 VARCHAR(255),ADDRESS2 VARCHAR(255),MAILING_ADDRESS_CITY VARCHAR(255),MAILING_ADDRESS_STATE VARCHAR(255),MAILING_ADDRESS_ZIP BIGINT,PHONE BIGINT,FAX BIGINT,EMAIL VARCHAR(255))**SQL end***
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1478
HyperSQL Database Engine (HSQLDB) / Bugs / #1478 OdbcPacketOutputStreamTest can't be compiled in some environments
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If LANG=C and LC_ALL=C are exported, org.hsqldb.server.OdbcPacketOutputStreamTest can't be compiled:

error: unmappable character for encoding ASCII

as it uses UTF-8 characters ("Ein groß Baum\nwith blossom").
So 
 either this file (and maybe some others, too) needs to be ran through native2ascii, 
 or -encoding UTF-8 must be added to javac options, 
* or -Dfile.encoding=UTF-8 must be added to the default JVM options throughout the build files.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1479
HyperSQL Database Engine (HSQLDB) / Bugs / #1479 preprocessor.jar can't be built with gradle
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Unlike the ant preprocessor command, gradlew preprocessor fails with:

        throw new BuildException("Target directory required.");
                 ^
 symbol:   class BuildException
 location: class PreprocessorAntTask

Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
17 errors
:-preprocessor FAILED
FAILURE: Build failed with an exception.

For some reason, Ant runtime (BuildException) can't be found on the class path during the Gradle build.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1480
HyperSQL Database Engine (HSQLDB) / Bugs / #1480 test.xml doesn't make any use of junit38.lib property
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When building hsqldbtest.jar (declared in build.xml), it is possible to specify an external junit.jar location via -Djunit38.lib=... .
This is not the case for make.test.suite and run.test.suite targets from test.xml, however, so one always needs to copy the junit.jar to lib/ first.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1481
HyperSQL Database Engine (HSQLDB) / Bugs / #1481 Provide support for dependency management
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB requires 3 external libraries:

javax.servlet:servlet-api:2.5
junit:junit:3.8.2
org.apache.ant:ant:1.10.1

Gradle has been providing automatic dependency support for ages. Please add support for dependency management via Gradle, so one doesn't need to manually download junit.jar any longer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1482
HyperSQL Database Engine (HSQLDB) / Bugs / #1482 HSQLDB can hang if the database is corrupted
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB can sometimes hang on start after unsuccessful shutdown (e.g.: power loss).
We've observed this against 2.3.2 and subsequent versions.
The stack trace is as follows (trunk). Apparently, if (length == 0) condition, under certain circumstances, can never be met:
 at org.hsqldb.persist.RAFileNIO.read(RAFileNIO.java:216)
 at org.hsqldb.persist.RAFileHybrid.read(RAFileHybrid.java:93)
 at org.hsqldb.persist.DataFileCache.readObject(DataFileCache.java:1198)
 at org.hsqldb.persist.DataFileCache.getFromFile(DataFileCache.java:1038)
 at org.hsqldb.persist.DataFileCache.get(DataFileCache.java:1015)
 at org.hsqldb.persist.RowStoreAVLDisk.get(RowStoreAVLDisk.java:112)
 at org.hsqldb.index.NodeAVLDisk.findNode(NodeAVLDisk.java:202)
 at org.hsqldb.index.NodeAVLDisk.getRight(NodeAVLDisk.java:252)
 at org.hsqldb.index.IndexAVL.findNode(IndexAVL.java:1625)
 at org.hsqldb.index.IndexAVL.findFirstRow(IndexAVL.java:1123)
 at org.hsqldb.RangeVariable$RangeIteratorMain.getFirstRow(RangeVariable.java:1414)
 at org.hsqldb.RangeVariable$RangeIteratorMain.initialiseIterator(RangeVariable.java:1308)
 at org.hsqldb.RangeVariable$RangeIteratorMain.next(RangeVariable.java:1248)
 at org.hsqldb.QuerySpecification.buildResult(QuerySpecification.java:1572)
 at org.hsqldb.QuerySpecification.getSingleResult(QuerySpecification.java:1467)
 at org.hsqldb.QuerySpecification.getResult(QuerySpecification.java:1457)
 at org.hsqldb.StatementQuery.getResult(StatementQuery.java:69)
 at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:171)
 at org.hsqldb.Session.executeCompiledStatement(Session.java:1331)
 at org.hsqldb.Session.execute(Session.java:1007)
 at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(JDBCPreparedStatement.java:4908)
 at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(JDBCPreparedStatement.java:262)

Since database corruption can't be avoided entirely, it makes sense to replace the while (true) loop with at least while (!Thread.interrupted()), so that the client can interrupt the thread and break out of an endless loop.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1483
HyperSQL Database Engine (HSQLDB) / Bugs / #1483 https connection problem
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to use hsqldb using https protocol. But I found a problem when the URL is generated for https.
At this line the s variable receive an http url 
https://sourceforge.net/p/hsqldb/svn/HEAD/tree/base/tags/2.4.0/src/org/hsqldb/ClientConnectionHTTP.java#l93
at this line the https url is generated using the "s" variable with has a full http url.
https://sourceforge.net/p/hsqldb/svn/HEAD/tree/base/tags/2.4.0/src/org/hsqldb/ClientConnectionHTTP.java#l96
The attached diff shows one solution for this problem.
1 Attachments


https_url_problem_hsqldb_2.4.0.diff
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1484
HyperSQL Database Engine (HSQLDB) / Bugs / #1484 Docs Typo: Timstamp
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
while reading the docs on Java Language routines (http://hsqldb.org/doc/2.0/guide/sqlroutines-chapt.html#src_jrt_routines) I stumbled upon a typo in the table mapping SQL types to Java types. It says 'TIMSTAMP WITH TIME ZONE' but should say 'TIMESTAMP WITH TIME ZONE'
Regards,
Florian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1485
HyperSQL Database Engine (HSQLDB) / Bugs / #1485 Invalid character value for cast
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
Previously with HSQLDB 2.3.4 it was possible to execute an SQL query like this one:
select cast(to_char(created, 'IYYYIW') as int) from TemporalEntity
But now with 2.4.0 we get this error: 
WARN org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: -3438, SQLState: 22018
ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - data exception: invalid character value for cast
After some testing I found out that there seems to be a problem with the "to_char" function because if I test the same SQL query but without the casting part then I get this: 2017'18
There is an apostrophe that gets inserted between the date and week values!
Please let me know if you need more details and/or a test case...
Thanks,
Christian
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1486
HyperSQL Database Engine (HSQLDB) / Bugs / #1486 TarGenerator.write outputs progress in stderr
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We are using hsqldb to, among other things, periodically backup our hsql database. When doing so, our service produces log messages marked as ERRORs (since it is coming from stderr) that just show the progress of the backup. This introduces noise in our log monitoring system, and is also misinformative.
The problem is located at src/org/hsqldb/lib/tar/TarGenerator.java and a patch fixing it is attached.
1 Attachments


TarGenerator.java.patch
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1487
HyperSQL Database Engine (HSQLDB) / Bugs / #1487 MVCC: write lock broken on savepoint rollback
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello HSQLDB team. I've just encounter a bug on HSQLDB v 2.3.4. I've updated library to 2.4.0 but bug still exists.
I will attach TestNG test case to illustrate a bug.
Main scenario is (all performs in single transaction) :
- start DB in mvcc mode
- start a new TX (READ_COMMITED)
- insert a single row in some table
- start a savepoint
- "lock" created record using "dummy update" trick (update ... set $col = $col)
- rollback savepoint
- try to select created row in same TX. Fail when nothing found.
I think it is a bug, because:
- this is a single transaction test. 
- Record exists: I can see it, when TX-commit occurs
- locking was made in same TX, and even rolled back
I'm using in-memory MVCC HSQLDB to test my application on a fast embedded DB. 
I know about "select ... for update" statement, but a "dummy update" should be tested too (some DB has bugs with "for update", like MariaDB)
1 Attachments


HsqlDbSavepointBugTest.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1488
HyperSQL Database Engine (HSQLDB) / Bugs / #1488 StackOverflowError in Value Pool mechanism
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
StackOverflowError in Value Pool mechanism
Since HSQLDB version 2.3.4 there is a bug in the area of the ValuePoolHashMap which will eventually cause HSQLDB to crash with a StackOverflowError. In our test environment the crash will reproducibly occur after 5 days of continuous operation. In real operational scenarios the occurrence may be more or less frequent depending of the frequency of updates performed on existing table records.
Characteristics:
The occurrence is characterized by a StackOverflowError, with a stack trace of the following constitution:
java.lang.StackOverflowError
at org.hsqldb.map.BaseHashMap.getAccessCountCeiling(Unknown Source)
at org.hsqldb.map.BaseHashMap.clear(Unknown Source)
at org.hsqldb.map.BaseHashMap.reset(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddString(Unknown Source)
...

Several variants of the stack trace are possible, like:
java.lang.StackOverflowError
at org.hsqldb.map.BaseHashMap.getAccessCountCeiling(Unknown Source)
at org.hsqldb.map.BaseHashMap.clear(Unknown Source)
at org.hsqldb.map.BaseHashMap.reset(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddObject(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddObject(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddObject(Unknown Source)
at org.hsqldb.map.ValuePoolHashMap.getOrAddObject(Unknown Source)
...

Further, in theory, the bug may occur in the methods: org.hsqldb.map.ValuePoolHashMap.getOrAddDate, org.hsqldb.map.ValuePoolHashMap.getOrAddDouble.
After the occurrence, HSQLDB will fail to execute any further query through JDBC with the following error:
connection exception: connection failure: java.io.EOFException Code: 08006
A restart of the HSQLDB is required to get it working again. No database corruption was observed after restart.
Analysis:
The ValuePoolHashmap serves as a mechanism of de-duplication to reduce memory usage when the database contains several entries with equal value. For this purpose it provides a number of type specific methods like getOrAddString() or getOrAddInteger() with accept a primitive type value or object value, respectively and returns a unique, singleton object instance with equal value. It’s implementation relies on the bespoke hash map implementation class BaseHashMap, which behavior is modified in ValuePoolHashmap to achieve a cache-like behavior in order to not endlessly keep value objects that are no longer part of the database entries. At the same time the implementation attempts to keep a balance between holding enough value objects for repeated equal values in the database but not waste memory by keeping value objects in the internal hash map that only occur once of few times in the database. This is realized by access counting.
The typical logic of the de-duplication methods consist of computing a hash index based on the value and attempt to find a matching singleton instance, possibly after several re-hashes. If a matching object is found, the method returns that object right away. Otherwise, if no matching value object can be found in the hash map, a size check of the internal index data is performed:
if (hashIndex.elementCount >= threshold)

When this condition holds, an internal re-organization of the hash map is performed, after which the method invokes itself recursively in a repeated attempt to find a matching value object. When the bug occurs, the recursive invocation of the method does still not find a matching value object and the condition hashIndex.elementCount >= threshold still holds, which leads to an endless recursion.
Related:
On 2015-05-29 a similar bug was discovered and reported by Jesse Barnum in the SF forum, which affected the method getOrAddInteger of HSQLDB in the development trunk for version 2.3.4. That similar bug was then reported to be fixed on 2015-05-30 with commit r5476, which made it to the release of version 2.3.4. The commit however only affected the methods getOrAddInteger() and getOrAddLong(). The other methods like getOrAddString(), the culprit of this bug, was not changed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1489

    
        SourceForge.net: Log In to SourceForge.net
    

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1490
HyperSQL Database Engine (HSQLDB) / Bugs / #1490 File size increase with upper on clob
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you execute a select with in upper on a clob column in the where clause the size of the lobs-file increases. A upper copy of the clob will be created and stored. But if you execute the same statement again the already copied data won't be reused. Further the space is not freed again. Only if you manualy execute a CHECKPOINT the unused data in the lobs-file is removed and the space is available for other data.
If you don't know this behavior the file increases until the disk is full. The size of the lobs-file cannot be shrinked as it was before the execution of the selects with an upper. 
It would be nice if this would be documented and that there is a possibility to shrink the size of a lobs file to the current used defragmented size.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1491
HyperSQL Database Engine (HSQLDB) / Bugs / #1491 NPE in ConnectionDialogSwing.actionPerformed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Launching the Swing GUI (via java -jar hsqldb.jar) and pressing the "Clear Names" button results in an NPE thrown in the AWT event thread. The backtrace is attached.
1 Attachments


hsqldb.log
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1492
HyperSQL Database Engine (HSQLDB) / Bugs / #1492 WHEN clause ignored using Java based triggers
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Trigger:
CREATE TRIGGER task_after_state_change AFTER UPDATE OF int_state ON task
  REFERENCING OLD ROW AS oldrow NEW ROW as newrow 
  FOR EACH ROW WHEN (newrow.int_state != oldrow.int_state AND oldrow.int_state != 0)
  CALL "fxp.cnode.repository.trigger.AfterTaskStateChange"

Java code:
package fxp.cnode.repository.trigger

import org.hsqldb.Trigger
import org.slf4j.LoggerFactory

class AfterTaskStateChange : Trigger {

    private val logger = LoggerFactory.getLogger(javaClass)

    override fun fire(type: Int, name: String?, table: String?, oldRow: Array<out Any>, newRow: Array<out Any>) {
        logger.info("update {} {} {}", type, name, table)
        logger.info("old state {}", oldRow[5])
        logger.info("new state {}", newRow[5])
    }
}

Output should not print rows where initial state is 0 or new/old state is equal, but it does
2017-07-28 09:21:31.023 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : update 5 TASK_AFTER_STATE_CHANGE TASK
2017-07-28 09:21:31.023 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : old state 0
2017-07-28 09:21:31.023 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : new state 0
2017-07-28 09:21:31.033 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : update 5 TASK_AFTER_STATE_CHANGE TASK
2017-07-28 09:21:31.033 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : old state 0
2017-07-28 09:21:31.034 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : new state 1
2017-07-28 09:21:31.041 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : update 5 TASK_AFTER_STATE_CHANGE TASK
2017-07-28 09:21:31.041 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : old state 1
2017-07-28 09:21:31.041 INFO 13520 --- [ main] f.c.r.trigger.AfterTaskStateChange : new state 2
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1493
HyperSQL Database Engine (HSQLDB) / Bugs / #1493 hsqldbmain missing Main-Class in jar file.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Build script for hsqldbmain is missing a main class in the mainfest like
<attribute name="Main-Class" value="org.hsqldb.server.Server"/>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1494
HyperSQL Database Engine (HSQLDB) / Bugs / #1494 Problem with database files initialization in volume of windows docker container
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
While running app in windows docker container with Oracle Java 1.8 within mounted volume HSQLDB library fails to rename files with ".new" prefixes:
C:\volume>java -cp hsqldb-2.3.2.jar;artifact-1.0-SNAPSHOT.jar Main
Table created successfully

C:\volume>dir
 Directory of C:\volume

09/01/2017  05:40 PM    <DIR>          .
09/01/2017  05:40 PM    <DIR>          ..
09/01/2017  05:23 PM             1,224 artifact-1.0-SNAPSHOT.jar
09/01/2017  05:08 PM         1,473,091 hsqldb-2.3.2.jar
09/01/2017  05:40 PM                16 testdb.lck
09/01/2017  05:40 PM                 0 testdb.log
09/01/2017  05:40 PM                90 testdb.properties.new
09/01/2017  05:40 PM             1,578 testdb.script.new
09/01/2017  05:40 PM    <DIR>          testdb.tmp

When it's running in regular directory it succesfully rename files:
C:\directory>java -cp hsqldb-2.3.2.jar;artifact-1.0-SNAPSHOT.jar Main
Table created successfully

C:\directory>dir
 Directory of C:\directory

09/01/2017  05:40 PM    <DIR>          .
09/01/2017  05:40 PM    <DIR>          ..
09/01/2017  05:23 PM             1,224 artifact-1.0-SNAPSHOT.jar
09/01/2017  05:08 PM         1,473,091 hsqldb-2.3.2.jar
09/01/2017  05:40 PM                16 testdb.lck
09/01/2017  05:40 PM                 0 testdb.log
09/01/2017  05:40 PM                90 testdb.properties
09/01/2017  05:40 PM             1,578 testdb.script
09/01/2017  05:40 PM    <DIR>          testdb.tmp

According to the code in the org.hsqldb.lib.FileUtil#renameElement method result of org.hsqldb.lib.FileUtil#renameWithOverwrite method was not checked, so it silently ignores it.
It seems that could be implemented workaround for cases when rename fails.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1495
HyperSQL Database Engine (HSQLDB) / Bugs / #1495 VALUES expression and TIMESTAMP WITH TIME ZONE literals not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Potential bug with VALUES expression and TIMESTAMP WITH TIME ZONE literals
The following highlights the bug.
CREATE TABLE "PUBLIC"."V_A" ("ID" BIGINT GENERATED BY DEFAULT AS 
IDENTITY PRIMARY KEY, "name" TIMESTAMP WITH TIME ZONE ARRAY DEFAULT 
ARRAY[]);

INSERT INTO "PUBLIC"."V_A" ("name") VALUES (ARRAY [TIMESTAMP '2017-08-02 
16:07:15.225+0:00', TIMESTAMP '2017-08-01 16:07:15.225+0:00', TIMESTAMP 
'2017-07-31 16:07:15.225+0:00']);
INSERT INTO "PUBLIC"."V_A" ("name") VALUES (ARRAY [TIMESTAMP '2017-08-11 
16:07:15.221+0:00', TIMESTAMP '2017-08-10 16:07:15.225+0:00', TIMESTAMP 
'2017-08-09 16:07:15.225+0:00']);
INSERT INTO "PUBLIC"."V_A" ("name") VALUES (ARRAY [TIMESTAMP '2017-08-05 
16:07:15.225+0:00', TIMESTAMP '2017-08-04 16:07:15.225+0:00', TIMESTAMP 
'2017-08-03 16:07:15.225+0:00']);

SELECT
   "PUBLIC"."V_A"."ID"   AS "alias1",
   "PUBLIC"."V_A"."name" AS "alias2"
FROM
   "PUBLIC"."V_A"
   INNER JOIN (
                VALUES (ARRAY [TIMESTAMP '2017-08-11 16:07:15.221+0:00', 
TIMESTAMP '2017-08-10 16:07:15.225+0:00', TIMESTAMP '2017-08-09 
16:07:15.225+0:00']),
                       (ARRAY [TIMESTAMP '2017-08-02 16:07:15.225+0:00', 
TIMESTAMP '2017-08-01 16:07:15.225+0:00', TIMESTAMP '2017-07-31 
16:07:15.225+0:00']),
                       (ARRAY [TIMESTAMP '2017-08-05 16:07:15.225+0:00', 
TIMESTAMP '2017-08-04 16:07:15.225+0:00', TIMESTAMP '2017-08-03 
16:07:15.225+0:00']))
AS tmp1(within) ON "PUBLIC"."V_A"."name" = tmp1.within;

This returns no rows.
However an ordinary select statement will work.
SELECT * FROM "PUBLIC"."V_A"
WHERE "name" =
       ARRAY [TIMESTAMP '2017-08-02 16:07:15.225+0:00', TIMESTAMP 
'2017-08-01 16:07:15.225+0:00', TIMESTAMP '2017-07-31 16:07:15.225+0:00']
-- ARRAY [TIMESTAMP '2017-08-11 16:07:15.221+0:00', TIMESTAMP 
'2017-08-10 16:07:15.225+0:00', TIMESTAMP '2017-08-09 16:07:15.225+0:00']
-- ARRAY [TIMESTAMP '2017-08-05 16:07:15.225+0:00', TIMESTAMP 
'2017-08-04 16:07:15.225+0:00', TIMESTAMP '2017-08-03 16:07:15.225+0:00']

Is this a bug?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1496
HyperSQL Database Engine (HSQLDB) / Bugs / #1496 PreparedStatement#setObject with java.time.LocalDate saves incorrect values to DATE column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When using PreparedStatement#setObject with a java.time.LocalDate object to update a DATE column, the stored value appears to deviate from the actual value by 999 days for each day that the actual value differs from the epoch (1970-01-01). That is, a LocalDate of 1970-01-01 works, but 1970-01-02 is stored as 1972-09-27 (999 days after 1970-01-02) and 1970-01-03 is stored as 1975-06-24 (1998 days after 1970-01-03).
Test code:
package hsqldbdemo;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.TimeZone;

public class HsqldbDemoMain {

    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:memdb")) {
            System.out.printf("Info: HSQLDB version %s%n", conn.getMetaData().getDatabaseProductVersion());
            System.out.printf("Info: Local (client) timezone is %s%n", TimeZone.getDefault().getID());

            try (Statement st = conn.createStatement()) {
                st.execute("CREATE TABLE tmp (id INT PRIMARY KEY, dt DATE)");
                st.execute("INSERT INTO tmp (id) VALUES (1)");
            }
            String sql = "UPDATE tmp SET dt=? WHERE id=1";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                for (int day : new int[] { 1, 2, 3}) {
                    System.out.println();
                    LocalDate ldSent = LocalDate.of(1970, 1, day);
                    System.out.printf("LocalDate sent: %s%n", ldSent.toString());
                    ps.setObject(1, ldSent);
                    ps.executeUpdate();
                    try (
                            Statement st = conn.createStatement();
                            ResultSet rs = st.executeQuery("SELECT dt, CAST(dt AS VARCHAR(100)) AS dtstring FROM tmp WHERE id=1")) {
                        rs.next();
                        System.out.printf("String value returned from server: %s%n", rs.getString("dtstring"));
                        java.sql.Date returnedDate = rs.getDate("dt");
                        System.out.println("returnedDate = rs.getDate(\"dt\")");
                        dumpDate(returnedDate);
                        LocalDate returnedLocalDate = rs.getObject("dt", LocalDate.class);
                        System.out.println("returnedLocalDate = rs.getObject(\"dt\", LocalDate.class)");
                        System.out.printf("... %s%n", returnedLocalDate.toString());
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }

    private static void dumpDate (java.sql.Date dt) {
        SimpleDateFormat sdfLocal = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
        SimpleDateFormat sdfUtc = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
        sdfUtc.setCalendar(Calendar.getInstance(TimeZone.getTimeZone("UTC")));
        System.out.printf("... which is %d ms since the epoch%n", dt.getTime());
        System.out.printf("... which is %s%n", sdfUtc.format(dt));
        System.out.printf("... which is %s%n", sdfLocal.format(dt));
    }

}

 
Console output:
Info: HSQLDB version 2.4.0
Info: Local (client) timezone is America/Denver

LocalDate sent: 1970-01-01
String value returned from server: 1970-01-01
returnedDate = rs.getDate("dt")
... which is 25200000 ms since the epoch
... which is 1970-01-01 07:00:00 UTC
... which is 1970-01-01 00:00:00 MST
returnedLocalDate = rs.getObject("dt", LocalDate.class)
... 1970-01-01

LocalDate sent: 1970-01-02
String value returned from server: 1972-09-27
returnedDate = rs.getDate("dt")
... which is 86421600000 ms since the epoch
... which is 1972-09-27 06:00:00 UTC
... which is 1972-09-27 00:00:00 MDT
returnedLocalDate = rs.getObject("dt", LocalDate.class)
... 1972-09-27

LocalDate sent: 1970-01-03
String value returned from server: 1975-06-24
returnedDate = rs.getDate("dt")
... which is 172821600000 ms since the epoch
... which is 1975-06-24 06:00:00 UTC
... which is 1975-06-24 00:00:00 MDT
returnedLocalDate = rs.getObject("dt", LocalDate.class)
... 1975-06-24
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1497
HyperSQL Database Engine (HSQLDB) / Bugs / #1497 unique constraint or index violation: SYS_IDX_10094 when IN predicate contains array larger than 288 elements
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When issuing SELECT (through JDBC with using technique described in HSQLDB guide) in which IN predicate value is an array of 299 lements or larger, exeption "(java.sql.SQLIntegrityConstraintViolationException) java.sql.SQLIntegrityConstraintViolationException: integrity constraint violation: unique constraint or index violation: SYS_IDX_10094" is thrown.
Test-case code:
package hsqltest;
import java.sql.Array;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Random;
public class HsqlTest
{
public static void main(String[] args)
{
final int TABLE_SIZE=100000;
final int SELECT_SIZE=299;
Random lRandom=new Random();
int lResult=0;
try
{
Class.forName("org.hsqldb.jdbc.JDBCDriver" );
}
catch(Exception aEx)
{
System.err.println("ERROR: failed to load HSQLDB JDBC driver.");
return;
}
try
{
Connection lDbConnection=DriverManager.getConnection("jdbc:hsqldb:hsql://localhost:9001/hq_9001", "RA", "RA");
        Statement lCreateStmnt=lDbConnection.createStatement();
        lResult=lCreateStmnt.executeUpdate("CREATE TABLE Customer(CustomerId INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY, CustomerName VARCHAR(64))");

        PreparedStatement lInsertStmnt=lDbConnection.prepareStatement("INSERT INTO Customer VALUES(DEFAULT, ?)", Statement.NO_GENERATED_KEYS);
        for(int lCounter=0; lCounter<TABLE_SIZE; ++lCounter)
        {
            lInsertStmnt.setNString(1, RandomString(lRandom));
            lResult=lInsertStmnt.executeUpdate();
        }

        Integer[] lSelectArray=new Integer[SELECT_SIZE];
        for(int lCounter=0; lCounter<SELECT_SIZE; ++lCounter)
        {
            lSelectArray[lCounter]=lRandom.nextInt(TABLE_SIZE-1);
        }
        PreparedStatement lSelectStmnt=lDbConnection.prepareStatement("SELECT * FROM Customer WHERE CustomerId IN (UNNEST(?))");
        Array lSqlArray=lDbConnection.createArrayOf("INTEGER", lSelectArray);
        lSelectStmnt.setArray(1, lSqlArray);
        ResultSet lSqlResult=lSelectStmnt.executeQuery();
        int lSize=lSqlResult.getFetchSize();
        System.out.println("Resulting set size: "+lSqlResult.getFetchSize());

        while (lSqlResult.next())
        {
            long lCustId=lSqlResult.getInt(1);
            String lCustName=lSqlResult.getString(2);
            System.out.println("| "+lCustId+" | "+lCustName+" |");
        }
    }
    catch(Exception aEx)
    {
        System.err.println("ERROR: failed to execute statement.");
        return;
    }

}

protected static String RandomString(Random aRandom)
{
    final String ALPHABET="ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    int lAlphabetLength=ALPHABET.length();
    StringBuilder lResult=new StringBuilder();        
    while (lResult.length()<7)
    {
        lResult.append(ALPHABET.charAt(aRandom.nextInt(lAlphabetLength-1)));
    }
    return lResult.toString();
}

}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1498
HyperSQL Database Engine (HSQLDB) / Bugs / #1498 IndexOutOfBoundsException from Table.getColumn() while running recursive queries
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running of recursive query causes IndexOutOfBoundsException since 2.3.2. Works fine with 2.3.1 version.
CREATE TABLE entry (
  id INT NOT NULL, title VARCHAR(20) NOT NULL, parent_id INT,
  PRIMARY KEY(id)
);

INSERT INTO entry (id, title, parent_id) VALUES (1, null, 'a');
INSERT INTO entry (id, title, parent_id) VALUES (2, 1, 'a.b');
INSERT INTO entry (id, title, parent_id) VALUES (3, 2, 'a.b.c');
INSERT INTO entry (id, title, parent_id) VALUES (4, 2, 'a.b.d');

 WITH RECURSIVE tree (id, title, parent, target) AS (
   SELECT e.id, e.title, e.parent_id, e.id from entry e WHERE id IN (3, 4)
   UNION
   SELECT e.id, e.title, e.parent_id, t.target FROM entry e, tree t WHERE e.id = t.parent
) SELECT * FROM tree;

The following exception occurs:
Caused by: java.lang.IndexOutOfBoundsException
    at org.hsqldb.lib.HashMappedList.checkRange(Unknown Source)
    at org.hsqldb.lib.HashMappedList.get(Unknown Source)
    at org.hsqldb.Table.getColumn(Unknown Source)
    at org.hsqldb.Table.setColumnTypeVars(Unknown Source)
    at org.hsqldb.Table.setColumnStructures(Unknown Source)
    at org.hsqldb.Table.createPrimaryKey(Unknown Source)
    at org.hsqldb.TableDerived.setTableIndexesForSubquery(Unknown Source)
    at org.hsqldb.TableDerived.prepareTable(Unknown Source)
    at org.hsqldb.TableDerived.prepareTable(Unknown Source)
    at org.hsqldb.ParserDQL.XreadRecursiveSubqueryBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableNamedSubqueryBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
    at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatements(Unknown Source)

Test project attached.
1 Attachments


hsql-IndexOutOfBounds.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1499
HyperSQL Database Engine (HSQLDB) / Bugs / #1499 Merge - Insert does not produce auto-generated keys
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
"Merge-Insert" does not produce auto-generated keys.
Java Code:
           String sqlquery = "MERGE INTO bewertung pu USING "
                .concat("(VALUES ?,?,?) AS ")
                .concat("temp (tid,jurorid,runde) ")
                .concat("ON temp.tid = pu.tid and temp.jurorid=pu.jurorid and temp.runde=pu.runde ")
                .concat("WHEN NOT MATCHED THEN ")
                .concat("INSERT (TID,JURORID,RUNDE) ")
                .concat("VALUES (temp.tid,temp.jurorid,temp.runde)");            

            PreparedStatement preparedStatement = sql.getConnection().prepareStatement(sqlquery,
                                          Statement.RETURN_GENERATED_KEYS);            

            preparedStatement.setInt(1, 1); //TID
            preparedStatement.setInt(2, 2); //JURORID
            preparedStatement.setInt(3, 3); //RUNDE

            int rowsAffected = preparedStatement.executeUpdate();           

            if (rowsAffected == 0) {
                //UPDATE
              //Do SOmething
            }else{
                //INSERT
                try (ResultSet rs = preparedStatement.getGeneratedKeys()) {
                   if (rs.next()) {      
                       System.out.println(rs.getInt(1));
                   }
                }catch (SQLException ex) {
                   //ERROR
                } 
            }     

Structure of table:
CREATE TABLE PUBLIC.BEWERTUNG (
    BEWERTUNGSID INTEGER NOT NULL IDENTITY,
    TID INTEGER,
    JURORID INTEGER NOT NULL,
    RUNDE INTEGER NOT NULL,
    CONSTRAINT SYS_PK_10126 PRIMARY KEY (BEWERTUNGSID),
    CONSTRAINT SYS_FK_10129 FOREIGN KEY (TID) REFERENCES PUBLIC.TANZ(TANZID),
    CONSTRAINT SYS_FK_10130 FOREIGN KEY (JURORID) REFERENCES PUBLIC.JUROR(JURORID)
) ;

Auto-generated keys will produced if it is not a merge statement. Only a If-Statement ist working fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1500
HyperSQL Database Engine (HSQLDB) / Bugs / #1500 TEXT table source parse issue
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Fixed issue with incorrect parsing of text table data when the first field of the first line contains a quoted comma.
",","next field"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1501
HyperSQL Database Engine (HSQLDB) / Bugs / #1501 SELECT ... INTO issue with subquery
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Inside a routine, a SELECT ... INTO statement that relies on a subquery does not work correctly. Example below was reported in the Open Discussion Forum
  DECLARE newest_event_id UUID;
  SELECT id
  INTO newest_event_id    -- THIS IS NEVER SET. WHY?????
  FROM
  (
    SELECT e.id, td.datetime + INTERVAL '1' SECOND(6) * e.offset AS e_datetime
    FROM test_drive td
     ...
    ORDER BY e_datetime DESC
    LIMIT 1 
  ) AS tmp;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1502
HyperSQL Database Engine (HSQLDB) / Bugs / #1502 order by does not work in for loops in SQL-invoked routines
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The order by clause does not work in for loops in SQL-invoked routines. It will be ignored.
This issues exists since before version 2.3.1.
My Example:
create table test_data (
  v varchar(1) not null,
  i integer not null
);

insert into test_data (v, i) values ('A', 3);
insert into test_data (v, i) values ('B', 2);
insert into test_data (v, i) values ('C', 1);

create function get_test_vars()
returns varchar(3)
reads sql data
begin atomic 
  declare v_return varchar(3) default '';

  for (
    select  v 
    from    test_data 
    order by i
  ) do 
    set
    v_return = v_return + v;
  end for;

  return v_return;
end

A "get_test_vars()" call returns "ABC" but it should return "CBA".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1503
HyperSQL Database Engine (HSQLDB) / Bugs / #1503 CHECKPOINT DEFRAG raises IllegalArgumentException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I trying to migrate a table containing 140 millions rows using liquibase.
During the migration script I using multiple time the command 'CHECKPOINT DEFRAG' one of them raises a IllegalArgumentException (see below the stack trace).
Caused by: java.sql.SQLException: java.lang.IllegalArgumentException in statement [CHECKPOINT DEFRAG]
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at com.jolbox.bonecp.StatementHandle.execute(StatementHandle.java:254)
    at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:307)
    ... 26 more
 Caused by: org.hsqldb.HsqlException: java.lang.IllegalArgumentException
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.persist.DataFileDefrag.process(Unknown Source)
    at org.hsqldb.persist.DataFileCache.defrag(Unknown Source)
    at org.hsqldb.persist.Log.defrag(Unknown Source)
    at org.hsqldb.persist.Log.checkpoint(Unknown Source)
    at org.hsqldb.persist.Logger.checkpointInternal(Unknown Source)
    at org.hsqldb.persist.Logger.checkpoint(Unknown Source)
    at org.hsqldb.StatementCommand.getResult(Unknown Source)
    at org.hsqldb.StatementCommand.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 30 more
 Caused by: java.lang.IllegalArgumentException
    at org.hsqldb.lib.DoubleIntIndex.addUnsorted(Unknown Source)
    at org.hsqldb.persist.RowStoreAVLDisk.moveDataToSpace(Unknown Source)
    at org.hsqldb.persist.DataFileDefrag.writeTableToDataFile(Unknown Source)
    ... 41 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1504
HyperSQL Database Engine (HSQLDB) / Bugs / #1504 Delete with inner join not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Delete with inner join is not working. 
For example:
Delete table1 from table1 t1 inner join table2 t2 on t1.ID = t2.ID where t2.X = "something"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1505
HyperSQL Database Engine (HSQLDB) / Bugs / #1505 How to reset identity column?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have many tables which will created and fully deleted from the user.
I couldn't found a way to reset identity column, because the normal command:
"DBCC CHECKIDENT ('[TestTable]', RESEED, 0);" isn't working.
Thank you
//PS: Do you have a plan to release 2.4.1? There are already many bugfixes which are important for me.
Thank you
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1506
HyperSQL Database Engine (HSQLDB) / Bugs / #1506 "natural left outer join" bug
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When I input following SQL statements:
Create table r (A Int, B Int, primary key (A, B));
Create table s (B Int, C Int, primary key (B, C));
Create table t (B Int, D Int, primary key (B, D));
Insert into r values (1, 2);
Insert into s values (3, 4);
Insert into t values (5, 6);

select * from (r natural left outer join s) natural left outer join t

It's supposed to return
| A | B | C | D |
| :--: | :--: | :--: | :--: |
| 1 | 2 | | |
But HSQLDB returns:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1507
HyperSQL Database Engine (HSQLDB) / Bugs / #1507 ALTER TABLE .. ALTER COLUMN doesn't adhere to the documentation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Try the following script:
CREATE TABLE x (i INT);
ALTER TABLE x ALTER COLUMN i BIGINT NOT NULL;

According to the documentation, the above should be perfectly fine
http://www.hsqldb.org/doc/guide/ch09.html#alter_table-section
The relevant section is:

This form of ALTER TABLE ALTER COLUMN accepts a columnDefinition as in a CREATE TABLE command, with the following restrictions.
Restrictions
...
The NOT NULL attribute will be that of the new definition (similar to previous item).

However, the parser rejects the query with "unexpected token: NOT in statement". The same is true when adding a DEFAULT clause and other clauses.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1508
HyperSQL Database Engine (HSQLDB) / Bugs / #1508 DECLARE LOCAL in Stored Procedure
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using "declare local temporary table" within a stored procedure will not compile. In a simple statement it will, however. See proc below.
If schemaless temp tables are not supported then perhaps the docs should be updated to clarify this as the documentation doesn't suggest such a limitation.
Thanks.
This statement results in: unexpected token: LOCAL : line: 5
create procedure pkiAvgAppointmentTime ( numberofcomparables int )
reads sql data
begin atomic
declare local temporary table shallow_appt 
( 
id int primary key, 
patronid int, 
appttime timestamp, 
startedon timestamp,
completedon timestamp 
) on commit delete rows;
-- temporary data to rollup
select top 5 id, patronid, appttime, startedon, completedon
into module.shallow_appt
from appt 
where status = 3 -- complete
group by startedon, completedon, patronid
order by appttime desc 
declare result cursor with return for
select count(*), avg ( datediff( 'hour', startedon, completedon ) ) as duration, patronid
from shallow_appt 
group by patronid;
open result;
end;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1509
HyperSQL Database Engine (HSQLDB) / Bugs / #1509 SPs and Cursors : cannot be cast to org.hsqldb.result.Result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Exception thrown when executing a procedure that returns a cursor on an in-memory db. I have read anything I could find on the subject including this post and I am pretty sure I am following your lead as to how ref cursors are supported.
Thanks in advance!
Monte
The procedure:
create procedure pkiCountCancelations ( months int )
reads sql data
begin atomic
  declare result cursor with return for
   select count (patronid) totalcancelations, patronid
     from appt 
    where status = 5 -- Canceled
      and appttime >= TIMESTAMPADD(SQL_TSI_MONTH, months * -1, current_timestamp)
    group by patronid;
  open result;
end;

The JDBC:
Connection c = SecuredDataFactory.getInstance().getConnection();
String sql = "{call pkiCountCancelations(?)}";
CallableStatement  s = c.prepareCall(sql);
s.setInt(1, 12);
boolean success = s.execute(); // <- Throws here
while ( success && s.getMoreResults() )
{
  //
}

java.sql.SQLException: java.lang.ClassCastException: java.lang.Integer cannot be cast to org.hsqldb.result.Result
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCCallableStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.execute(Unknown Source)
at …
Caused by: org.hsqldb.HsqlException: java.lang.ClassCastException: java.lang.Integer cannot be cast to org.hsqldb.result.Result
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.StatementCompound.executeProtected(Unknown Source)
at org.hsqldb.StatementCompound.executeBlock(Unknown Source)
at org.hsqldb.StatementCompound.execute(Unknown Source)
at org.hsqldb.StatementProcedure.executePSMProcedure(Unknown Source)
at org.hsqldb.StatementProcedure.getProcedureResult(Unknown Source)
at org.hsqldb.StatementProcedure.getResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 54 more
Caused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to org.hsqldb.result.Result
at org.hsqldb.StatementCursor.getResult(Unknown Source)
... 64 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1510
HyperSQL Database Engine (HSQLDB) / Bugs / #1510 Exception after altering a varchar to clob
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
e.g.

alter table MATCH_QUEUE_RULE alter column DIVISIONS_JSON CLOB;

The alter table command seems to execute properly, however on the next launch of the application, I see this stack trace. Any suggestestions would be greatly appreciated.

org.hsqldb.HsqlException: The table data is read only
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.persist.LobManager.setChars(Unknown Source)
at org.hsqldb.Session.performLOBOperation(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
at org.hsqldb.types.ClobDataID.setString(Unknown Source)
at org.hsqldb.types.CharacterType.castOrConvertToType(Unknown Source)
at org.hsqldb.types.CharacterType.convertToType(Unknown Source)
at org.hsqldb.TableWorks.checkConvertColDataType(Unknown Source)
at org.hsqldb.TableWorks.retypeColumn(Unknown Source)
at org.hsqldb.StatementSchema.getResult(Unknown Source)
at org.hsqldb.StatementSchema.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
at org.hsqldb.persist.Log.processLog(Unknown Source)
at org.hsqldb.persist.Log.open(Unknown Source)
at org.hsqldb.persist.Logger.open(Unknown Source)
at org.hsqldb.Database.reopen(Unknown Source)
at org.hsqldb.Database.open(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
at org.hsqldb.server.Server.openDatabases(Unknown Source)
at org.hsqldb.server.Server.run(Unknown Source)
at org.hsqldb.server.Server.access$000(Unknown Source)
at org.hsqldb.server.Server$ServerThread.run(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1511
HyperSQL Database Engine (HSQLDB) / Bugs / #1511 Exception when ordering distinct array_agg
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CREATE TABLE test (
    grp VARCHAR(1),
    string VARCHAR(1),
    number INTEGER
);
INSERT INTO test (grp, string, number) VALUES
    ('G', 'A', 1),
    ('G', 'B', 2)
;
SELECT grp, ARRAY_AGG(DISTINCT string ORDER BY number)
FROM test
GROUP BY grp
;

yields
java.lang.ClassCastException / Error Code: -458 / State: S1000
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1512
HyperSQL Database Engine (HSQLDB) / Bugs / #1512 Collate clause from domains lost in DB script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using v2.4.0, I have created some domains with collate clauses as per the guide:
http://hsqldb.org/doc/guide/guide.html#N114E2
However I discovered my SELECT queries were not working as expected as the collate clause was not being applied during table creation.
Demonstration of issue using sqltool:
$ sqltool
[banner deleted]
sql> create domain ucc_varchar as varchar(200) collate sql_text_ucc;
sql> shutdown;
$ grep -i ucc_varchar testdb.script
CREATE DOMAIN PUBLIC.UCC_VARCHAR AS VARCHAR(200)
$ sqltool
[banner deleted]
sql> create table ucc_test ( name ucc_varchar );
sql> insert into ucc_test values (('AAA'), ('aaa'));
2 rows updated.
sql> commit;
sql> select * from ucc_test where name = 'AAA';
AAA

If I create the table without intervening shutdown then I get expected behaviour:
sql> drop domain ucc_varchar cascade;
sql> drop table ucc_test;
sql> create domain ucc_varchar as varchar(200) collate sql_text_ucc;
sql> create table ucc_test ( name ucc_varchar );
sql> insert into ucc_test values (('AAA'), ('aaa'));
2 rows updated.
sql> commit;
sql> select * from ucc_test where name = 'AAA';
AAA
aaa

Fetched 2 rows.

Alternatively, shutting down the database then manually adding "COLLATE SQL_TEXT_UCC" to the "CREATE DOMAIN" definition in the DB's script file also works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1513
HyperSQL Database Engine (HSQLDB) / Bugs / #1513 Discarding decimal places using Oracle syntax with column type NUMBER
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We use hsqldb with sql.syntax_ora=true.
Switching version from 2.3.4 to 2.3.5-2.4.1 datatype NUMBER shows different behaviour.
With 2.3.4 storing a floating point value in column of type NUMBER the decimal places are preserved like in Oracle (3.141 -> 3.141).
With version >=2.3.5 storing a floating point value in column of type NUMBER the decimal places are lost (3.141 -> 3).
In the changelog appears a fix which may introduced this behavoir:
- fixed issue with queries on DECIMAL or NUMERIC columns containing very large values
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1514
HyperSQL Database Engine (HSQLDB) / Bugs / #1514 WHERE id IN ( UNNEST(?) ) only returns first matching row
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(ref: Stack Overflow question here)
With version 2.4.1, 
... WHERE id IN ( UNNEST(?) ) ...

only returns the first matching row when the column is NUMERIC(5) andthe array is int or smallint.
Repro code:
String connectionUrl;
connectionUrl = "jdbc:hsqldb:mem:memdb";
try (Connection conn = DriverManager.getConnection(connectionUrl, "sa", "")) {
    Statement st = conn.createStatement();
    String sql = null;
    sql = "CREATE TABLE inlist_test_table (id NUMERIC(5) PRIMARY KEY, val VARCHAR(50));";
    st.execute(sql);
    st.execute(
              "INSERT INTO inlist_test_table (id, val) "
            + "VALUES (3, 'Value_00003'),(4, 'Value_00004'),(5, 'Value_00005')");
    sql = "SELECT val FROM inlist_test_table WHERE id IN ( UNNEST(?) ) ORDER BY id";
    PreparedStatement ps = conn.prepareStatement(sql);
    Array array = conn.createArrayOf("int", new Object[] {3, 5});
    ps.setArray(1, array);
    ResultSet rs = ps.executeQuery();
    while (rs.next()) {
        System.out.println(rs.getString("val"));
    }
} catch (Exception e) {
    e.printStackTrace(System.err);
}

prints
Value_00005

However, if we change the column type to INT
    sql = "CREATE TABLE inlist_test_table (id INT PRIMARY KEY, val VARCHAR(50));";

then we get both matching rows
Value_00003
Value_00005
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1515
HyperSQL Database Engine (HSQLDB) / Bugs / #1515 TRANSACTION_SIZE() broken? Or at least doesn't track information_schema
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Using v2.4.0 with auto-commit off.
After a COMMIT or ROLLBACK I'm expecting SELECT TRANSACTION_SIZE() to return 0 but I found its values are all over the place:
$ sqltool
SqlTool v. 4720.
[Rest of banner removed]
sql> \a
Auto-commit is set to false.
sql> \v
Transaction Isolation Level is now R/W  TRANSACTION_READ_COMMITTED
sql> create temporary table txtests ( testcol varchar(200) );
sql> select * from information_schema.system_sessions;
SESSION_ID  CONNECTED              USER_NAME  IS_ADMIN  AUTOCOMMIT  READONLY  LAST_IDENTITY  SCHEMA  TRANSACTION  TRANSACTION_SIZE  WAITING_FOR_THIS  THIS_WAITING_FOR  CURRENT_STATEMENT                                 LATCH_COUNT
----------  ---------------------  ---------  --------  ----------  --------  -------------  ------  -----------  ----------------  ----------------  ----------------  ------------------------------------------------  -----------
         2  2018-06-15 08:46:07.0  SA         TRUE      FALSE       FALSE                 0  PUBLIC  FALSE                       0                                      select * from information_schema.system_sessions            0
sql> rollback;
sql> start transaction;
sql> select * from information_schema.system_sessions;
SESSION_ID  CONNECTED              USER_NAME  IS_ADMIN  AUTOCOMMIT  READONLY  LAST_IDENTITY  SCHEMA  TRANSACTION  TRANSACTION_SIZE  WAITING_FOR_THIS  THIS_WAITING_FOR  CURRENT_STATEMENT                                 LATCH_COUNT
----------  ---------------------  ---------  --------  ----------  --------  -------------  ------  -----------  ----------------  ----------------  ----------------  ------------------------------------------------  -----------
         2  2018-06-15 08:46:07.0  SA         TRUE      FALSE       FALSE                 0  PUBLIC  TRUE                        0                                      select * from information_schema.system_sessions            0
sql> insert into txtests values ('def');
1 row updated.
sql> select * from information_schema.system_sessions;
SESSION_ID  CONNECTED              USER_NAME  IS_ADMIN  AUTOCOMMIT  READONLY  LAST_IDENTITY  SCHEMA  TRANSACTION  TRANSACTION_SIZE  WAITING_FOR_THIS  THIS_WAITING_FOR  CURRENT_STATEMENT                                 LATCH_COUNT
----------  ---------------------  ---------  --------  ----------  --------  -------------  ------  -----------  ----------------  ----------------  ----------------  ------------------------------------------------  -----------
         2  2018-06-15 08:46:07.0  SA         TRUE      FALSE       FALSE                 0  PUBLIC  TRUE                        1                                      select * from information_schema.system_sessions            0
sql> select transaction_size();
 0
sql> select session_id();
 2
sql> delete from txtests values ('def');
def
sql> select * from information_schema.system_sessions;
SESSION_ID  CONNECTED              USER_NAME  IS_ADMIN  AUTOCOMMIT  READONLY  LAST_IDENTITY  SCHEMA  TRANSACTION  TRANSACTION_SIZE  WAITING_FOR_THIS  THIS_WAITING_FOR  CURRENT_STATEMENT                                 LATCH_COUNT
----------  ---------------------  ---------  --------  ----------  --------  -------------  ------  -----------  ----------------  ----------------  ----------------  ------------------------------------------------  -----------
         2  2018-06-15 08:46:07.0  SA         TRUE      FALSE       FALSE                 0  PUBLIC  TRUE                        2                                      select * from information_schema.system_sessions            0
sql> select transaction_size();
 1
sql> commit;
sql> select * from information_schema.system_sessions;
SESSION_ID  CONNECTED              USER_NAME  IS_ADMIN  AUTOCOMMIT  READONLY  LAST_IDENTITY  SCHEMA  TRANSACTION  TRANSACTION_SIZE  WAITING_FOR_THIS  THIS_WAITING_FOR  CURRENT_STATEMENT                                 LATCH_COUNT
----------  ---------------------  ---------  --------  ----------  --------  -------------  ------  -----------  ----------------  ----------------  ----------------  ------------------------------------------------  -----------
         2  2018-06-15 08:46:07.0  SA         TRUE      FALSE       FALSE                 0  PUBLIC  FALSE                       0                                      select * from information_schema.system_sessions            0
sql> select transaction_size();
 1
sql> 

In summary:
 transaction_size() sometimes doesn't increase after an insert
 tranasction_size() sometimes doesn't reset to zero after commit/rollback
* information_schema.system_sessions.transaction_size seems to be accurate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1516
HyperSQL Database Engine (HSQLDB) / Bugs / #1516 Case-insensitive English collation does not work with LIKE clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The docs at http://hsqldb.org/doc/guide/databaseobjects-chapt.html#dbc_collations say (regarding collation strengths) "The value 0 indicates least sensitivity to differences. At this strength the collation is case-insensitive and ignores differences between accented letters." To me, this means that "English 0" should be a case-insensitive collation, and so equality or LIKE clauses should match case-insensitively.
This works as I expect with SQL_TEXT_UCC collation, but with "English 0" collation an equality check is case-insensitive, but a LIKE clause is not. This is inconsistent between those two collations, because I would expect them to be the same in terms of case-insensitivity. I expect the collations to work the same whether it's an equality or a LIKE clause.
SqlTool v. 5736.
JDBC Connection established to a HSQL Database Engine v. 2.4.0 database
sql> create table c1 (s varchar(255) collate "SQL_TEXT_UCC");
sql> insert into c1 values('A'), ('ab');
2 rows updated.
sql> select * from c1 where s='a';
A
sql> select * from c1 where s like 'a%';
A
ab

Fetched 2 rows.

sql> create table c2 (s varchar(255) collate "English 0");
sql> insert into c2 values('A'), ('ab');
2 rows updated.
sql> select * from c2 where s='a';
A
sql> select * from c2 where s like 'a%';
ab
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1517
HyperSQL Database Engine (HSQLDB) / Bugs / #1517 Handling of pos./neg. infinity values in HSQLDB 2.4.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
in an open-source project, quantile values of the F-statistic are calculated and stored to a HSQLDB (version 2.4.1). The F-distribution needs two degree of freedoms (dof). One of the dof can be +Infinity (in this case, the F-distribution is equal to the Chi2-distribution).
The log file of HSQLDB contains the right value for +Infinity, i.e. 1E0/0 
INSERT INTO "TestStatistic" VALUES(0.06798702544489695E0,1E0/0,0.00425324574987072E0,80.0E0,146.9029418952348E0,17.074646805189502E0,-10.06524306765689E0)
(see second VALUES-argument)
If I close the database by shutdown, the sign of the infinity value is changed to -Infinity, i.e. -1E0/0. The corresponding script file contains
INSERT INTO "TestStatistic" VALUES(0.06798702544489695E0,-1E0/0,0.00425324574987072E0,80.0E0,146.9029418952348E0,17.074646805189502E0,-10.06524306765689E0)
(see second VALUES-argument)
For validation of my problem, I create a database, insert one row to the TestStatistic table, and kill the application. Thus, the database is unclosed and the log file still exisits. You can take a look to the log file to validate the Infinity-value. If you open the database, HSQLDB flushs the entries of the log file to the script file. In script file, the sign is now negative. Why?
What is the reason of the sign-change? You can download the short example here.
Tested on Win7, Java 10 using HSQLDB 2.4.1.
Thanks in advance.
Micha
1 Attachments


hsqldb_example.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1518
HyperSQL Database Engine (HSQLDB) / Bugs / #1518 "incompatible data types in combination" for case when statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Here are the tables I was creating:
DROP TABLE IF EXISTS Customer;
CREATE TABLE Customer (
ID INT NOT NULL AUTO_INCREMENT UNIQUE,
HomePhone VARCHAR(255) DEFAULT NULL,
WorkPhone VARCHAR(255) DEFAULT NULL,
CellPhone VARCHAR(255) DEFAULT NULL,
OtherPhone1 VARCHAR(255) DEFAULT NULL,
OtherPhone2 VARCHAR(255) DEFAULT NULL,
PrimaryPhone BIGINT DEFAULT NULL,
PRIMARY KEY (ID)
);
DROP TABLE IF EXISTS CustomerOptions;
CREATE TABLE CustomerOptions (
ID INT NOT NULL AUTO_INCREMENT UNIQUE,
CustomerId INT DEFAULT NULL,
OptionType INT DEFAULT NULL,
OptionValue VARCHAR(255) DEFAULT NULL,
PRIMARY KEY (ID)
);
Here is the SQL query I need to execut:
SELECT c.Id,
CASE WHEN co.optionValue=1 THEN c.PrimaryPhone
WHEN co.optionValue=2 THEN c.CellPhone
WHEN co.optionValue=3 THEN c.WorkPhone
WHEN co.optionValue=4 THEN c.HomePhone
WHEN co.optionValue=5 THEN c.OtherPhone1
WHEN co.optionValue=6 THEN c.OtherPhone2
WHEN co.optionValue=-1 THEN NULL
END AS TextPhone
FROM CustomerOptions co INNER JOIN Customer c ON
c.id = co.CustomerId AND co.OptionType=10500
It complains about "incompatible data types in combination / Error Code: -5562 / State: 42562"
I think mainly because the PrimaryPhone column is bigint while others are varchar. 
a vast system is already built on the above mentioned tables, and changing the column definition isn't really an option.
the same SQL query executes fine on MYSQL (production database).
we are using hsqldb to run unit-tests
so our unit-tests are not passing, but production is working fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1519
HyperSQL Database Engine (HSQLDB) / Bugs / #1519 13.28 "String comparison with padding" documention typos
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This is a very minor ticket, but I ran into the 'silent character padding issue' referenced in ticket #1175.
I found the documentation regarding setting "no pad" in section 13.28 but couldn't get it to work until I realised there was a typo!
The corrections needed are:
SET DEFAULT COLLATION <collation name=""> [ NO PAD | PAD SPACE ]
to become:
SET DATABASE COLLATION <collation name=""> [ NO PAD | PAD SPACE ]
and
By default, when two strings are compared, he shorter string is padded
to become:
By default, when two strings are compared, the shorter string is padded
Set to priority 9 as I assume this is the lowest.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1520
HyperSQL Database Engine (HSQLDB) / Bugs / #1520 In DB script file, CREATE COLLATION with CREATE TYPE broken
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have columns that use a custom defined TYPE via "CREATE TYPE" statements. These columns, in fact the whole database, needs "NO PAD" or "sql.pad_space=false" property.
For non-custom-type columns I can use SET DATABASE COLLATION SQL_TEXT NO PAD and/or the connection property "sql.pad_space=false".
For the custom-type columns, the corresponding CREATE TYPE statement ends with "COLLATE SQL_TEXT_UCC". However there's no way to specify "NO PAD" with "CREATE TYPE" so I had to create a new collation with CREATE COLLATION SQL_TEXT_UCC_NO_PAD FOR SQL_TEXT FROM SQL_TEXT_UCC NO PAD and use this new collation in my CREATE TYPE statements.
This worked the first time I created/opened the database but after shutdown the database cannot be reopened.
The first issue is that in the script file the "CREATE COLLATION" statement is placed after the "CREATE TYPE" statements that use it so I get a "user lacks privilege or object not found: SQL_TEXT_UCC_NO_PAD" error.
If I edit the DB script file and move the CREATE COLLATION statement to just before the CREATE TYPE statements I still get "user lacks privilege or object not found: SQL_TEXT_UCC_NO_PAD" error. 
I noticed the script's version of CREATE COLLATION has "PUBLIC.SQL_TEXT_UCC_NO_PAD" so I changed one of script's CREATE TYPE statements so that the collation name was similarly qualified:
CREATE TYPE PUBLIC.REGISTEREDNAME AS VARCHAR(400) COLLATE PUBLIC.SQL_TEXT_UCC_NO_PAD
But now I hit a new error: "unexpected token: PUBLIC" which suggests CREATE TYPE isn't able to deal with qualified collation names.
I'm now stuck with no way to reopen my database or no way to perform non-padded, case-insensitive string comparisons.
Any ideas for a workaround?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1521
HyperSQL Database Engine (HSQLDB) / Bugs / #1521 stored procedure with output parameter can't call another stored procedure directly 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have a stored procedure 'testDummy1' with output (or input/output) parameter. 
I can't create another stored procedure 'testDummy2' with output (or input/output) parameter. Calling 'testDummy1' passing the parameter directly, got error: 
Errore SQL [42603]: dynamic parameter or variable required as INOUT or OUT argument
Below the sample code:
CREATE PROCEDURE testDummy1( INOUT param1 INTEGER)
MODIFIES SQL DATA
BEGIN ATOMIC
    DECLARE nop INT; 
    SET nop = 1;     
END

CREATE PROCEDURE testDummy2( INOUT param1 INTEGER)
MODIFIES SQL DATA
BEGIN ATOMIC
    CALL testDummy1(param1);         
END
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1522
HyperSQL Database Engine (HSQLDB) / Bugs / #1522 SqlFile throws error on first statement when script file has a BOM
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using SqlFile to execute a SQL script that was generated by SQL Server Management Studio (SSMS). My intention is to run the script against another instance of SQL Server to re-create an entire database.
Because SqlFile does not seem to like the GO statements that SSMS intersperses through the file, I pre-process the file to replace the GO statements with semi-colons. However, I still get an error on the first statement because the file is encoded as UTF-16LE.
SqlFile does not have a problem with subsequent USE ... statements, nor does it have a problem with USE [master] per se, as illustrated by the following test script:
USE [master]
;
SELECT 'current DB_NAME() is: ' + DB_NAME() AS current_db_name
;
USE [comptabilité]
;
SELECT 'current DB_NAME() is: ' + DB_NAME() AS current_db_name
;
USE [master]
;
SELECT 'current DB_NAME() is: ' + DB_NAME() AS current_db_name
;

When I execute that script using SqlFile from SqlTool 2.4.1 via
SqlFile sf = new SqlFile(new java.io.File("C:/Users/Gord/Desktop/script2.sql"), "UTF-16LE");
sf.setConnection(conn);
sf.setContinueOnError(true);
sf.execute();

it produces
SEVERE  SQL Error at 'C:\Users\Gord\Desktop\script2.sql' line 2:
"﻿USE [master]
"
Incorrect syntax near '﻿'.
current DB_NAME() is: myDb
No result.
current DB_NAME() is: comptabilité
No result.
current DB_NAME() is: master

Further testing revealed that if I convert the file to UTF-8 with no BOM the error goes away. If I convert the file to UTF-8 with a BOM (as Windows seems to prefer) then the error comes back.
So, it looks like SqlFile has a bit of a problem with Unicode files that have a BOM, even if the file really does need one (e.g., UTF-16LE).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1523
HyperSQL Database Engine (HSQLDB) / Bugs / #1523 Casting string to TIMETZ and back to VARCHAR yields wrong results
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running this query:
SELECT CAST(CAST('00:00:00+02:00' AS TIME WITH TIME ZONE) AS VARCHAR(100))
FROM (SELECT 1 AS dual FROM information_schema.system_users LIMIT 1) AS dual

I would expect to get the original value back, i.e. '00:00:00+02:00'. Instead, I'm getting '24:00:00+02:00', which cannot be parsed using java.time.OffsetTime.parse(). I'm not too skilled deciphering the SQL standard text, but in any case, the behaviour is inconsistent with this, which raises an error (as expected):
SELECT CAST(CAST('24:00:00+02:00' AS TIME WITH TIME ZONE) AS VARCHAR(100))
FROM (SELECT 1 AS dual FROM information_schema.system_users LIMIT 1) AS dual
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1524
HyperSQL Database Engine (HSQLDB) / Bugs / #1524 System generated constraint name breaks log file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Procedure:
1. Create constraint without specifying a name.
2. Drop the new constraint, specifying the constraint name generated by the system
3. Abnormal shutdown (kill, power fail...)
4. Restart server and connect to database
Server fails to rebuild from log file because create constraint statement with no name specified generated a different name (always or under specific circumstances?). When the drop constraint statement in the log file is reached, the name specified in the drop constraint statement does not exist and the entire log file is thrown out.
Solution: include the system generated constaint names in create constraint statements recorded in the log file?
Excerpted from broken log file:
create table cycle_counts(\u000aid int generated by default as identity primary key,\u000acycle_count_id int references cycle_count_header,\u000apart varchar(128) REFERENCES parts(part),\u000alocation varchar(100),\u000aon_hand int,\u000acounted int,\u000acounted_by varchar(100),\u000acounted_on date,\u000acreated_by varchar(100),\u000acreated_on datetime,\u000aupdated_by varchar(100),\u000aupdated_on datetime,\u000anotes varchar(2000)\u000a)
...
alter table cycle_counts drop constraint sys_fk_14655
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1525
HyperSQL Database Engine (HSQLDB) / Bugs / #1525 Sequence next_value invalid after database restart (from scriptfile)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When creating a table column with GENERATED BY DEFAULT AS SEQUENCE, while restarting the database using the scriptfile, any sequence automatically gets set to MAX() of the corresponding columns.
If the sequence is defined with a MIN/MAXVALUE outside this MAX(), working with the sequence is not possible anymore. Also, another restart (scriptfile contains an invalid RESTART WITH now) is not possible (org.hsqldb.HsqlException: number out of the valid range for sequence generator).
Expectation:
The sequence must use the next-value given in the scriptfile. It should never automagically change these database definitions on restart.
How-To-Reproduce:
Using sqltool.jar, with a defined datasource:

urlid testdb
url jdbc:hsqldb:file:testhqdatabase;shutdown=true

# java -jar sqltool.jar testdb
SqlTool v. 5736.
[...]

sql> CREATE SEQUENCE S1 INCREMENT BY 1 START WITH 1000 MINVALUE 1000 MAXVALUE 1999 NO CYCLE;
sql> CREATE TABLE T1(ID BIGINT GENERATED BY DEFAULT AS SEQUENCE S1 NOT NULL, BLA VARCHAR(10));
sql> insert into t1(BLA) values ('test');
1 row updated.
sql> insert into t1 values (9999,'test2');
1 row updated.
sql> commit;
sql> select START_WITH,NEXT_VALUE from information_schema.sequences where SEQUENCE_NAME = 'S1';
START_WITH  NEXT_VALUE
----------  ----------
1000        1001
sql> \q

All correct so far, also the scriptfile is ok:
# cat testhqdatabase.script
SET DATABASE UNIQUE NAME HSQLDB667CDD98BD
SET DATABASE GC 0
SET DATABASE DEFAULT RESULT MEMORY ROWS 0
SET DATABASE EVENT LOG LEVEL 0
SET DATABASE TRANSACTION CONTROL LOCKS
SET DATABASE DEFAULT ISOLATION LEVEL READ COMMITTED
SET DATABASE TRANSACTION ROLLBACK ON CONFLICT TRUE
SET DATABASE TEXT TABLE DEFAULTS ''
SET DATABASE SQL NAMES FALSE
SET DATABASE SQL REFERENCES FALSE
SET DATABASE SQL SIZE TRUE
SET DATABASE SQL TYPES FALSE
SET DATABASE SQL TDC DELETE TRUE
SET DATABASE SQL TDC UPDATE TRUE
SET DATABASE SQL CONCAT NULLS TRUE
SET DATABASE SQL UNIQUE NULLS TRUE
SET DATABASE SQL CONVERT TRUNCATE TRUE
SET DATABASE SQL AVG SCALE 0
SET DATABASE SQL DOUBLE NAN TRUE
SET FILES WRITE DELAY 500 MILLIS
SET FILES BACKUP INCREMENT TRUE
SET FILES CACHE SIZE 10000
SET FILES CACHE ROWS 50000
SET FILES SCALE 32
SET FILES LOB SCALE 32
SET FILES DEFRAG 0
SET FILES NIO TRUE
SET FILES NIO SIZE 256
SET FILES LOG TRUE
SET FILES LOG SIZE 50
CREATE USER SA PASSWORD DIGEST '3dd6b9265ff18f31dc30df59304b0ca7'
ALTER USER SA SET LOCAL TRUE
CREATE SCHEMA PUBLIC AUTHORIZATION DBA
SET SCHEMA PUBLIC
CREATE SEQUENCE PUBLIC.S1 AS INTEGER START WITH 1000 MINVALUE 1000 MAXVALUE 1999
CREATE MEMORY TABLE PUBLIC.T1(ID BIGINT GENERATED BY DEFAULT AS SEQUENCE PUBLIC.S1 NOT NULL,BLA VARCHAR(10))
ALTER SEQUENCE SYSTEM_LOBS.LOB_ID RESTART WITH 1
ALTER SEQUENCE PUBLIC.S1 RESTART WITH 1001
SET DATABASE DEFAULT INITIAL SCHEMA PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.SQL_IDENTIFIER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.YES_OR_NO TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.TIME_STAMP TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CARDINAL_NUMBER TO PUBLIC
GRANT USAGE ON DOMAIN INFORMATION_SCHEMA.CHARACTER_DATA TO PUBLIC
GRANT DBA TO SA
SET SCHEMA SYSTEM_LOBS
INSERT INTO BLOCKS VALUES(0,2147483647,0)
SET SCHEMA PUBLIC
INSERT INTO T1 VALUES(1000,'test')
INSERT INTO T1 VALUES(9999,'test2')

Now, reload the database from scriptfile:
# java -jar sqltool.jar testdb
SqlTool v. 5736.
[...]

sql> select START_WITH,NEXT_VALUE from information_schema.sequences where SEQUENCE_NAME = 'S1';
START_WITH  NEXT_VALUE
----------  ----------
1000        10000
sql> \q

As some can see, the NEXT_VALUE automagically got set to some value, which is max(id)+1.
And, it's outside MINVALUE/MAXVALUE range now. This is what gets written to the scriptfile then:
# java -jar sqltool.jar testdb
SqlTool v. 5736.
2018-10-16T14:35:45.853+0200  WARNING  number out of the valid range for sequence generator
org.hsqldb.HsqlException: number out of the valid range for sequence generator
        at org.hsqldb.error.Error.error(Unknown Source)
        at org.hsqldb.error.Error.error(Unknown Source)
        at org.hsqldb.NumberSequence.checkValues(Unknown Source)
        at org.hsqldb.ParserTable.readSequenceOptions(Unknown Source)
        at org.hsqldb.ParserDDL.compileAlterSequence(Unknown Source)
        at org.hsqldb.ParserDDL.compileAlter(Unknown Source)
        at org.hsqldb.ParserCommand.compilePart(Unknown Source)
        at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
        at org.hsqldb.Session.compileStatement(Unknown Source)
        at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
        at org.hsqldb.scriptio.ScriptReaderBase.readAll(Unknown Source)
        at org.hsqldb.persist.Log.processScript(Unknown Source)
        at org.hsqldb.persist.Log.open(Unknown Source)
        at org.hsqldb.persist.Logger.open(Unknown Source)
        at org.hsqldb.Database.reopen(Unknown Source)
        at org.hsqldb.Database.open(Unknown Source)
        at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
        at org.hsqldb.DatabaseManager.newSession(Unknown Source)
        at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
        at java.sql.DriverManager.getConnection(DriverManager.java:664)
        at java.sql.DriverManager.getConnection(DriverManager.java:247)
        at org.hsqldb.lib.RCData.getConnection(Unknown Source)
        at org.hsqldb.cmdline.SqlTool.objectMain(Unknown Source)
        at org.hsqldb.cmdline.SqlTool.main(Unknown Source)

2018-10-16T14:35:45.855+0200  SEVERE  bad line in script file 38
org.hsqldb.HsqlException: error in script file line: 38 org.hsqldb.HsqlException: number out of the valid range for sequence generator
        at org.hsqldb.error.Error.error(Unknown Source)
....

The scriptfile line 38:
ALTER SEQUENCE PUBLIC.S1 RESTART WITH 10000
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1526
HyperSQL Database Engine (HSQLDB) / Bugs / #1526 Illegal reflective access warning on JDK11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
From the warning emitted by the JDK:
WARNING: Illegal reflective access by org.hsqldb.persist.RAFileNIO (file:/home/aaime/.m2/repository/org/hsqldb/hsqldb/2.4.1/hsqldb-2.4.1.jar) to method java.nio.DirectByteBuffer.cleaner()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1527
HyperSQL Database Engine (HSQLDB) / Bugs / #1527 Misleading error message when timestamp literal is illegal
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider the following SQL
select
    TIMESTAMPADD ( SQL_TSI_SECOND , 12345, TIMESTAMP '2000-00-00 00:00:00.0' )
from information_schema.system_users;

It contains an illegal timestamp literal. The error message I'm getting, however, is:
SQL Error [42581]: unexpected token: SQL_TSI_SECOND : line: 2

This is quite misleading
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1528
HyperSQL Database Engine (HSQLDB) / Bugs / #1528 sql.sys_index_names doesn't seem to work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I execute the statements below the index gets created as SYS_IDX_13915 (or something like this).
I expected a different name, according to the docs.
SET DATABASE SQL SYS INDEX NAMES TRUE;

SHUTDOWN COMPACT;

CREATE TABLE MYSCHEMA.MYTABLE (ID INT);

ALTER TABLE MYSCHEMA.MYTABLE ADD CONSTRAINT MYTABLE_PK PRIMARY KEY (ID);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1529
HyperSQL Database Engine (HSQLDB) / Bugs / #1529 Possible typo in  missing data impact clause error message
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If execute this:
CREATE FUNCTION MYSCHEMA.MYFUNCTION() RETURNS INT
  RETURN (SELECT MYID FROM MYTABLE WHERE MYCOLUMN = 'MYVALUE');

I get:
[42608][-5608] wrong or missing data impact clause in declaration: READS SQL java.lang.RuntimeException: org.hsqldb.HsqlException: wrong or missing data impact clause in declaration: READS SQL
I would expect READS SQL DATA instead of only READS SQL.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1530
HyperSQL Database Engine (HSQLDB) / Bugs / #1530 Exception when creating foreign key
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The last of these three statements:
CREATE TABLE T1 (C1A INT);
CREATE TABLE T2 (C2A INT PRIMARY KEY);
ALTER TABLE T1 ADD C1B INT NOT NULL FOREIGN KEY REFERENCES T2(C2A);

causes this exception:
[S1000][-458] java.lang.ArrayIndexOutOfBoundsException: 1
java.lang.ArrayIndexOutOfBoundsException: 1
    at org.hsqldb.Table.checkReferentialColumnsMatch(Unknown Source)
    at org.hsqldb.TableWorks.checkCreateForeignKey(Unknown Source)
    at org.hsqldb.TableWorks.addColumn(Unknown Source)
    at org.hsqldb.StatementSchema.getResult(Unknown Source)
    at org.hsqldb.StatementSchema.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1531
HyperSQL Database Engine (HSQLDB) / Bugs / #1531 ALTER TABLE loses ON UPDATE clause
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The table works as expected after being created with:
CREATE TABLE T1 (C1 INT, C2 TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
However after changing it with something like:
ALTER TABLE T1 ADD COLUMN C3 INT;
the ON UPDATE clause stops working.
If it's any help this also happens when adding a foreign key or dropping a column.
I didn't try anything else but I suspect it's tied to ALTER TABLE, no matter what kind of change is done.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1532
HyperSQL Database Engine (HSQLDB) / Bugs / #1532 Can't change padding for string comparison
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After executing these statements:
SET DATABASE COLLATION SQL_TEXT NO PAD;
SHUTDOWN COMPACT;

sql.pad_space is still set to true.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1533
HyperSQL Database Engine (HSQLDB) / Bugs / #1533 Extra whitespace in .script file
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When creating a new database specifying the connection property hsqldb.digest the .script file contains a line like this one:
SET DATABASE PASSWORD DIGEST 'SHA-256'
with an extra space between DATABASE and PASSWORD.
Even if it's removed manually, a SHUTDOWN COMPACT puts it back in its place.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1534
HyperSQL Database Engine (HSQLDB) / Bugs / #1534 Data file size doesn't seem to be as expected after enabling files space
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
On a newly created database if I execute these statements:
SET FILES SPACE TRUE;
CREATE TABLE T1 (C1 INT);
SHUTDOWN COMPACT;

The .data file is 4 MB and I would have expected 2 MB since by default hsqldb.cache_file_scale is 32.
The file size remains the same even if I change the first statement to SET FILES SPACE 1;, where I would have expected 1 MB.
The size is still 4 MB even if before executing the statements above I set hsqldb.cache_file_scale to 256, in this case I would have expected 16 MB.
Maybe this is not a bug but after reading the docs this isn't the behavior I would expect.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1535
HyperSQL Database Engine (HSQLDB) / Bugs / #1535 ClassCastException when using ora_syntax=true and Union ALL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi there!
I'm getting an EOFException (connection closed) with some sqls, like the one below (ora_syntax = true):
SELECT val FROM (SELECT 0 val FROM dual) UNION ALL SELECT cast(0 AS double) FROM dual;

Log message:
Jan 17 14:12:18 server01 java: java.lang.ClassCastException

Running config:
/usr/java/jdk1.8.0_171/bin/java -cp /opt/hsql/lib/hsqldb.jar org.hsqldb.Server -database.0 mem:dev -dbname.0 cache -port 9002

Interestingly enough, this works without any issue:
SELECT 0 FROM dual UNION ALL SELECT  cast(0 AS double) FROM dual;

If you need more info, please let me know.
Thanks!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1536
HyperSQL Database Engine (HSQLDB) / Bugs / #1536 CountUpDownLatch.java: String.format typo $d -> %d
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
https://sourceforge.net/p/hsqldb/svn/HEAD/tree/base/trunk/src/org/hsqldb/lib/CountUpDownLatch.java
$d should be %d
throw new ArithmeticException(
                        String.format("integer overflow: %d + $d", c, amount));

Should be
throw new ArithmeticException(
                        String.format("integer overflow: %d + %dd", c, amount));
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1537
HyperSQL Database Engine (HSQLDB) / Bugs / #1537 alter session close not working with sessions that have an open transaction
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Steps to reproduce:
DB Startup:
java -cp hsqldb-2.4.1/lib/hsqldb.jar org.hsqldb.Server -database.1 mem:mydb1 -dbname.1 cache -port 9001
Session 1 (autocommit=true);
SET DATABASE SQL SYNTAX ORA TRUE; --not sure if this is relevant
create SCHEMA TABLES;
create table TABLES.TEST (a varchar2(255));

Session 2 (autocommit=false, session id=4);
insert into TABLES.TEST values ('asdf asdf');
Back to Session 1:
alter session 4 close;
If we check INFORMATION_SCHEMA.SYSTEM_SESSIONS, we can see that Session2 is still alive and well, even after a few minutes:
select SESSION_ID, TRANSACTION, CURRENT_STATEMENT from INFORMATION_SCHEMA.SYSTEM_SESSIONS where SESSION_ID=4;
SESSION_ID|TRANSACTION|CURRENT_STATEMENT|
----------|-----------|-----------------|
             4|true       |                 |

I've tested another options (RELEASE and END STATEMENT), but the end result is the same.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1538
HyperSQL Database Engine (HSQLDB) / Bugs / #1538 Can't create java.sql.Array with type name TINYINT
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following test errors:
@Test
public void arrayOfBytes() throws SQLException {

    Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:testdb");

    Array tinyint = connection.createArrayOf(JDBCType.TINYINT.getName(), new Byte[]{23, 42, 127});

}

But I think it should succeed just as this one:
@Test
public void arrayOfInt() throws SQLException {

    Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:testdb");

    connection.createArrayOf(JDBCType.INTEGER.getName(), new Integer[]{23, 42, 127});

}

The exception thrown is:
java.sql.SQLException: Invalid argument in JDBC call: TINYINT

at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.invalidArgument(Unknown Source)
at org.hsqldb.jdbc.JDBCConnection.createArrayOf(Unknown Source)
at de.schauderhaft.hsqldb.ByteArrayTest.arrayOfBytes(ByteArrayTest.java:36)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: org.hsqldb.HsqlException: Invalid argument in JDBC call: TINYINT
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
... 26 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1539
HyperSQL Database Engine (HSQLDB) / Bugs / #1539 SSL connections via hsqls not working on JDK 11
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've discovered a strange problem regarding SSL/TLS encrypted connections on JDK 11. I was able to reduce the problem to this short application:
package test;

import java.sql.Connection;
import java.sql.DriverManager;

public class TlsTest {
    public static void main(String[] args) {
        System.setProperty(
                "javax.net.ssl.trustStore",
                "/path/to/my/truststore.jks");
        System.setProperty(
                "javax.net.ssl.trustStorePassword",
                "My-Truststore-Password");

        try {
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
        } catch (Exception ex) {
            System.err.println("Can't load JDBC driver!");
            ex.printStackTrace(System.out);
            return;
        }

        String jdbcUrl = "jdbc:hsqldb:hsqls://localhost:9001/mydatabase";
        String jdbcUser = "SA";
        String jdbcPass = "test1234";

        try {
            Connection c = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPass);
            System.out.println("First connection established...");
            c.close();
        } catch (Exception ex) {
            System.out.println("First connection failed!");
            ex.printStackTrace(System.out);
            return;
        }

        try {
            Connection c = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPass);
            System.out.println("Second connection established...");
            c.close();
        } catch (Exception ex) {
            System.out.println("Second connection failed!");
            ex.printStackTrace(System.out);
            return;
        }
    }
}

The program creates two connections to the database server via hsqls. Of course the server was configured properly and the truststore / truststore password is correct.
Running this application on OpenJDK 8 & OpenJDK 10 leads to the expected output:
First connection established...
Second connection established...

But running this application on OpenJDK 11 leads to an error on the second connection:
First connection established...
Second connection failed!
java.sql.SQLTransientConnectionException: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
        at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:677)
        at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:228)
        at test.TlsTest.main(TlsTest.java:38)
Caused by: org.hsqldb.HsqlException: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
        at org.hsqldb.ClientConnection.openConnection(Unknown Source)
        at org.hsqldb.ClientConnection.initConnection(Unknown Source)
        at org.hsqldb.ClientConnection.<init>(Unknown Source)
        ... 6 more
Caused by: javax.net.ssl.SSLPeerUnverifiedException: peer not authenticated
        at java.base/sun.security.ssl.SSLSessionImpl.getPeerCertificateChain(SSLSessionImpl.java:577)
        at org.hsqldb.server.HsqlSocketFactorySecure.verify(Unknown Source)
        at org.hsqldb.server.HsqlSocketFactorySecure.createSocket(Unknown Source)
        at org.hsqldb.server.HsqlSocketFactorySecure.createSocket(Unknown Source)
        ... 9 more

Obviously the second connection attempt should not fail, if the first connection was properly established.
I was able to reproduce this problem with HSQLDB 2.4.1 and SVN trunk on the following systems: 

Debian testing with OpenJDK 11 provided by Debian
Debian testing with OpenJDK 11 provided by AdoptOpenJDK
Windows 7 64bit with OpenJDK 11 provided by AdoptOpenJDK

I hope there is a solution before HSQLDB 2.5.0 is being released. Maybe you have an idea about this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1540
HyperSQL Database Engine (HSQLDB) / Bugs / #1540 hypersql incompatible data type
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
can someone pls tell me why this error ? 
int blockSize = 100;
" select * from"+
                                        "(" +
                                        " select l.* from lottotable as l where l.city='"+city+"' and  l.date< cast('"+date+"' as date) order by l.date desc " +
                                        ")" +
                                        " order by date asc limit CONVERT('"+blockSize+"', SQL_INTEGER )"

errror is : ava.sql.SQLSyntaxErrorException: incompatible data type in operation: ; in LIMIT, OFFSET or FETCH in statement [ select * from( select l.* from lottotable as l where l.city='milano' and l.date< cast('2018-2-21' as date) order by l.date desc ) order by date asc limit CONVERT('100', SQL_INTEGER )]
Derby shut down normally
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1541
HyperSQL Database Engine (HSQLDB) / Bugs / #1541 Cannot connecto to the Database after renaming PUBLIC schema
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi, 
I have discovered a strange behaviour of the database after a certain sequence of operation. I was able to reduce the problem with this code snippet:
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.UUID;

public class HsqlDbFailure
{
  public static void main(String[] args) throws Exception
  {
    Connection connection = null;
    String name = UUID.randomUUID().toString();
    String db = "jdbc:hsqldb:file:/tmp/test/"+name+"/"+name;
    try
    {
      connection = DriverManager.getConnection(db, "", "");
      Statement stmt = connection.createStatement();
      stmt.executeQuery("ALTER SCHEMA PUBLIC RENAME TO TESTSCHEMA;");
      stmt.executeQuery("CREATE TABLE TESTTABLE (NUMBER INTEGER NOT NULL);");
      stmt.executeQuery("INSERT INTO TESTTABLE VALUES (0);");
      stmt.executeQuery("SHUTDOWN IMMEDIATELY;");
      stmt.close();

      connection = DriverManager.getConnection(db, "", "");
    }
    finally
    {
      connection.close();
    }
  }
}

the program renames the PUBLIC schema and then creates a table and inserts into it a value. After the SHUTDOWN IMMEDIATELY I am not able to recreate a connection to the database again. The error that I have obtained is the following:
SEVERE  statement error processing log - open continued /tmp/test/46273e2f-8c62-4829-b6b7-7a8695b96979/46273e2f-8c62-4829-b6b7-7a8695b96979.log line: 6
org.hsqldb.HsqlException: java.lang.NullPointerException
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.StatementSchema.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
    at org.hsqldb.persist.ScriptRunner.runScript(Unknown Source)
    at org.hsqldb.persist.Log.processLog(Unknown Source)
    at org.hsqldb.persist.Log.open(Unknown Source)
    at org.hsqldb.persist.Logger.open(Unknown Source)
    at org.hsqldb.Database.reopen(Unknown Source)
    at org.hsqldb.Database.open(Unknown Source)
    at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
    at org.hsqldb.DatabaseManager.newSession(Unknown Source)
    at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
    at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
    at java.sql.DriverManager.getConnection(DriverManager.java:664)
    at java.sql.DriverManager.getConnection(DriverManager.java:247)
    at HsqlDbFailure.main(HsqlDbFailure.java:24)
Caused by: java.lang.NullPointerException
    at org.hsqldb.SchemaManager.checkSchemaObjectNotExists(Unknown Source)
    at org.hsqldb.StatementSchema.setOrCheckObjectName(Unknown Source)
    at org.hsqldb.StatementSchema.getResult(Unknown Source)
    ... 17 more

The program was executed with the Oracle JDK8 on Ubuntu 18.04 using both 2.3.6 and 2.4.0 version of HSQLDB maven dependencies. 
If I execute a SET SCHEMA TESTSCHEMA immediately after the ALTER SCHEMA PUBLIC RENAME TO TESTSCHEMA everithing works, as well as if I do not insert values into the db between the table creation and the shutdown.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1542
HyperSQL Database Engine (HSQLDB) / Bugs / #1542 Interruption flag is cleared during statement execution
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I encountered an issue with an application that was occasionally leaking active threads from thread pools that were shutdown. I traced this problem back to HSQLDB suppressing interruption flags during its statement execution. I saw this to be a pattern in for example the Session class where Thread.interrupted() is invoked after catching an interruption exception what clears the flag.
As a consequence, a thread that is currently executing a statement will not be able to shut down as the interruption signal is only sent once. If the thread's event loop is checking for the flag to be set, it will have been cleared by HSQLDB. This is breaking the contract of thread interrupts making ordered shutdown impossible.
Is there a particular reason for you to clear that flag? If it should not be set during the session execution, it would be important to self-interrupt the thread before returing to invoking code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1543
HyperSQL Database Engine (HSQLDB) / Bugs / #1543 Exception with ON UPDATE CURRENT_TIMESTAMP
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I try to execute this statement:
CREATE TABLE T1 (C1 TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL);
I get this exception:
[2019-05-22 03:34:10] [42581][-5581] unexpected token: ON
[2019-05-22 03:34:10] java.lang.RuntimeException: org.hsqldb.HsqlException: unexpected token: ON

I don't think this is the expected behavior but of course I could be wrong.
For what it's worth if I remove WITH TIME ZONE then the statement works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1544
HyperSQL Database Engine (HSQLDB) / Bugs / #1544 data exception: invalid interval format
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I try to execute query like
insert into t (id, pausetime) values (1, now()+interval '200' millisecond)
I get exception
Caused by: org.hsqldb.HsqlException: data exception: invalid interval format
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.types.IntervalType.getIntervalType(Unknown Source)
at org.hsqldb.ParserBase.readIntervalType(Unknown Source)
IntervalType.getIntervalType() contains nothing about milliseconds. Seconds, minutes or another time field works good.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1545
HyperSQL Database Engine (HSQLDB) / Bugs / #1545 bad line numbers in recent jdk8debug Maven artifacts
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying to see what's inside prepareStatement(), but with recent Maven artifacts for jdk8 the line numbers don't match. See the attached screenshot.
Thread [main] (Suspended)   
    owns: JDBCConnection  (id=16)   
    JDBCPreparedStatement.<init>(JDBCConnection, String, int, int, int, int, int[], String[]) line: 4095    
    JDBCConnection.prepareStatement(String) line: 595   
    ParserTest.main(String[]) line: 17  

    <groupId>org.hsqldb</groupId>
    <artifactId>hsqldb</artifactId>
    <version>2.4.1</version>
    <classifier>jdk8debug</classifier>
    </dependency>

$ sha1sum hsqldb-2.4.1-jdk8debug.jar hsqldb-2.4.1-sources.jar
929aa3dd2ecc9580de9048b59d7224cca81c5343 *hsqldb-2.4.1-jdk8debug.jar
39b5e7e988c00331083aaf9231ca4e4fb00ac70d *hsqldb-2.4.1-sources.jar


1 Attachments





source.png
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1546
HyperSQL Database Engine (HSQLDB) / Bugs / #1546 MEDIAN on TIMESTAMP Version 2.5.0
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Congratulations to Fred and Blaine and HSQLDB team on the release of HSQLDB Version 2.5.0 .
I have noted an item ( bug ) where the documentation does not match real world use.
According to the documentation Chapter 7 Aggregate Functions:

The SUM operations can be performed on numeric and interval expressions only. AVG and MEDIAN can be performed on numeric, interval or datetime expressions. AVG returns the average value, while SUM returns the sum of all values. MEDIAN returns the middle value in the sorted list of values.

While AVG works as described with a datetime expression, MEDIAN returns an error incompatible data type in operation / Error Code: -5563 / State: 42563.
The following code example can be used to re-create the issue, NOTE comment line to have it work:
Select 
     TABLE_NAME 
   , COUNT(*) as "COUNT" 
   , AVG(ORDINAL_POSITION) as AVG_ORDINAL_POSITION
   , MEDIAN(ORDINAL_POSITION) as MEDIAN_ORDINAL_POSITION 
   , AVG(CURRENT_TIMESTAMP) as AVG_CUR_TS
   -- MEDIAN on datetime does NOT work but if comment out will work
   , MEDIAN(CURRENT_TIMESTAMP) as MEDIAN_CUR_TS -- MEDIAN on datetime error
From INFORMATION_SCHEMA.SYSTEM_COLUMNS
Group By TABLE_NAME

Sliderule
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1547
HyperSQL Database Engine (HSQLDB) / Bugs / #1547 When trying to access a running HSQLDB process, a NPE ocurs
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
Using HSQLDB 2.3.3 (our current production version), there is no problem.
Our server creates a separate java hsqldb process. When our process is abrupdly stopped, it may not have killed the hsqldb process using a SHUTDOWN sql. The java process then runs alone. To avoid problems when starting again our process, we then try to connect to a potentially running hsqldb process. During this attempt, we now always get a NPE while we never did get one before (using 2.3.3). The NPE is below.
2019-06-10 11:10:46,350 [TelServerDbProcess] INFO TelServerDb - Starting TelServer embedded database...
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: checkRunning(false) entered
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: checkRunning(false) exited
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: setDatabaseName(0,telserver)
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: checkRunning(false) entered
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: checkRunning(false) exited
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: setDatabasePath(0,D:\unigone\development\JavaProject\TelServer-vdev\tests-chat\data\telserver;hsqldb.cache_file_scale=8)
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: checkRunning(false) entered
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: checkRunning(false) exited
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: setPort(9001)
2019-06-10 11:10:46,479 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[main,5,main]]: setTrace(false)
2019-06-10 11:10:46,487 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: Initiating startup sequence...
2019-06-10 11:10:46,492 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: [Thread[HSQLDB Server @6ed3ef1,5,main]]: run()/openServerSocket(): 
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - java.net.BindException: Address already in use: JVM_Bind
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at java.net.DualStackPlainSocketImpl.bind0(Native Method)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at java.net.DualStackPlainSocketImpl.socketBind(DualStackPlainSocketImpl.java:106)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at java.net.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:387)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at java.net.PlainSocketImpl.bind(PlainSocketImpl.java:190)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at java.net.ServerSocket.bind(ServerSocket.java:375)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at java.net.ServerSocket.<init>(ServerSocket.java:237)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at java.net.ServerSocket.<init>(ServerSocket.java:128)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.HsqlSocketFactory.createServerSocket(HsqlSocketFactory.java:94)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server.openServerSocket(Server.java:1867)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server.run(Server.java:2008)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server.access$000(Server.java:238)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server$ServerThread.run(Server.java:310)
2019-06-10 11:10:46,493 [TelServerDbProcess] TRACE TelServerDb - [Server@6ed3ef1]: Initiating shutdown sequence...
2019-06-10 11:10:46,498 [TelServerDbProcess] TRACE TelServerDb - Exception in thread "HSQLDB Server @6ed3ef1" java.lang.NullPointerException
2019-06-10 11:10:46,498 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server.shutdown(Server.java:2164)
2019-06-10 11:10:46,498 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server.run(Server.java:2013)
2019-06-10 11:10:46,498 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server.access$000(Server.java:238)
2019-06-10 11:10:46,498 [TelServerDbProcess] TRACE TelServerDb - at org.hsqldb.server.Server$ServerThread.run(Server.java:310)</init></init>
Thank you for having a look.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1548
HyperSQL Database Engine (HSQLDB) / Bugs / #1548 Error with UNDO and EXIT handlers in procedure creation
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If I try to execute this:
CREATE PROCEDURE p1()
BEGIN ATOMIC
DECLARE temp INTEGER;
DECLARE EXIT HANDLER FOR SQLEXCEPTION;
SET temp = 1;
END

I get this error:
[42581][-5581] unexpected token: UNDO : line: 4
java.lang.RuntimeException: org.hsqldb.HsqlException: unexpected token: UNDO : line: 4

If I change EXIT with UNDO there's a similar error.
CONTINUE works, however.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1549
HyperSQL Database Engine (HSQLDB) / Bugs / #1549 Error when overloading procedures
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This executs properly:
CREATE PROCEDURE P1(IN A BIGINT, IN B BIGINT)
BEGIN ATOMIC
    DECLARE t INTEGER;
    SET t =1;
END

However if after that I try to execute this...
CREATE PROCEDURE P1(IN A BIGINT, IN B DATE)
BEGIN ATOMIC
    DECLARE t INTEGER;
    SET t =1;
END

...I get this error:
[42605][-5605] SQL routine exception: routine signature already exists in statement [CREATE PROCEDURE P1(IN A BIGINT, IN B DATE)
This doesn't seem to be an issue with functions because after succesfully executing this...
CREATE FUNCTION F1(IN A BIGINT, IN B BIGINT) RETURNS BOOLEAN
BEGIN ATOMIC
    RETURN TRUE;
END

...this executes successfully too:
CREATE FUNCTION F2(IN A BIGINT, IN B DATE) RETURNS BOOLEAN
BEGIN ATOMIC
    RETURN TRUE;
END
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1550
HyperSQL Database Engine (HSQLDB) / Bugs / #1550 rs.getObject(x, LocalDateTime.class) returne incorrect values prior to 1582-10-15
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
repro code:
String connUrl = "jdbc:hsqldb:mem:memdb";

try (Connection conn = DriverManager.getConnection(connUrl)) {
    System.out.printf("Info: HSQLDB version %s%n", conn.getMetaData().getDatabaseProductVersion());
    // Info: HSQLDB version 2.5.0

    Statement st = conn.createStatement();
    st.execute("CREATE TABLE t1 (id INT PRIMARY KEY, event VARCHAR(50), occurred TIMESTAMP)");
    st.execute("INSERT INTO t1 (id, event, occurred) VALUES (1, 'Battle of Hastings', '1066-10-14 00:00:00')");
    ResultSet rs = st.executeQuery("SELECT occurred FROM t1 WHERE id=1");
    rs.next();
    LocalDateTime actual = rs.getObject(1, LocalDateTime.class);
    LocalDateTime expected = LocalDateTime.of(1066, 10, 14, 0, 0);
    System.out.printf("%s - actual: %s, expected: %s%n", 
            actual.equals(expected) ? "PASS" : "FAIL", actual, expected);
    // FAIL - actual: 1066-10-20T00:00, expected: 1066-10-14T00:00

} catch (Throwable t) {
    t.printStackTrace(System.err);
    System.exit(999);
}

Interestingly, if the column is DATE then rs.getObject(1, LocalDate.class) returns the correct date.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1551
HyperSQL Database Engine (HSQLDB) / Bugs / #1551 Error with UNDO handler in trigger execution and deletion
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using r6016.
To reproduce create a new in-memory database with DatabaseManagerSwing.
Then execute these:
CREATE TABLE T1 (C1 BIGINT PRIMARY KEY);
CREATE TRIGGER TR1 BEFORE INSERT ON T1
BEGIN ATOMIC
    DECLARE UNDO HANDLER FOR SQLEXCEPTION
        SIGNAL SQLSTATE '12300' SET MESSAGE_TEXT = 'Custom error message';
    SIGNAL SQLSTATE '45600';
END;

INSERT INTO T1 (C1) VALUES (1);
At this point I get this error message:
General error / Error Code: -458 / State: S1000
I'm not sure if that's an error or expected behaviour.
However with CONTINUE or EXIT instead of UNDO I get this:
Custom error message / Error Code: 5800 / State: 12300
Which is what I thought (maybe erroneously) that I would get also with UNDO.
Moreover if I try to delete the trigger:
DROP TRIGGER TR1;
I get this:
Java execution / Error Code: -6000 / State: 46000
and the trigger isn't deleted.
This I'm fairly sure is a a bug, please note that this only happens after executing the trigger, for example with the INSERT above.
The trigger can be deleted just fine after creation, before it's used.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1552
HyperSQL Database Engine (HSQLDB) / Bugs / #1552 EXTRACT ( WEEK_OF_YEAR FROM ... ) does not adhere to ISO 8601 anymore
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Starting with hsqldb 2.5 the statement:
VALUES( EXTRACT ( WEEK_OF_YEAR FROM {d '2000-12-31'} ) )
returns 1 instead of 52. This is a deviation from ISO 8601 as the week should start on Monday, but not on Sunday.
Also the statement :
VALUES( EXTRACT ( WEEK_OF_YEAR FROM {d '2005-01-01'} ) )
returns 1 instead of 52. This is a deviation from ISO 8601 as the week 1 should always contain the 4th of January.
This problem happens, if the Locale.getDefault() is set to en_US. It disappears, if Locale.getDefault() is set to de_DE.
This problem happens on hsqldb 2.5.0 only, it does not happen on 2.4.0 and 2.4.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1553
HyperSQL Database Engine (HSQLDB) / Bugs / #1553 Invalid exception "numeric value out of range" at converting Double in NumberType
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to insert a double value '1.0E+38' to HSQLDB, but I get an error:
java.sql.SQLDataException: data exception: numeric value out of range
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.throwError(Unknown Source)
    at org.hsqldb.jdbc.JDBCPreparedStatement.setParameter(Unknown Source)
    at org.hsqldb.jdbc.JDBCPreparedStatement.setObject(Unknown Source)
    at Test.test(Test.java:24)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:497)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: org.hsqldb.HsqlException: data exception: numeric value out of range
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.types.NumberType.toDouble(Unknown Source)
    at org.hsqldb.types.NumberType.convertToDouble(Unknown Source)
    at org.hsqldb.types.NumberType.convertToDefaultType(Unknown Source)
    ... 25 more

When I insert value '1.4E-45', i don't get this error.
Reproducing test:
public void test() throws SQLException {
        Connection c = DriverManager.getConnection("jdbc:hsqldb:file:testdb", "SA", "");
        Statement st = c.createStatement();
        st.executeQuery("create table test (value Double)");
        System.out.println("Table 'test' created");

        try {
            System.out.println("Inserting '1.4E-45'");
            PreparedStatement ps = c.prepareStatement("insert into test values (?)");
            ps.setObject(1, new BigDecimal("1.4E-45"));
            ps.execute();
            System.out.println("'1.4E-45' inserted");

            System.out.println("Inserting '1.0E+38'");
            ps.setObject(1, new BigDecimal("1.0E+38"));
            ps.execute();
            System.out.println("1.0E+38' inserted");
        } catch (SQLDataException e) {
            e.printStackTrace();
        }

        System.out.println("Table values:");
        ResultSet rs = st.executeQuery("select * from test");
        while (rs.next()) {
            System.out.println("value = " + rs.getDouble(1));
        }
    }

I guess method toDouble(..) in NumberType does wrong comparing (see JPG attachment).
I don't know why author of this code wrote such comparing.
I get this error using UCanAccess driver loading access db with such values to HSQLDB.
1 Attachments





reproduce1.JPG
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1554
HyperSQL Database Engine (HSQLDB) / Bugs / #1554 Wrong result for quantified ALL predicate
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query returns NULL as expected:
SELECT 1 = ALL (SELECT x FROM (VALUES (NULL), (1)) AS t(x))
FROM (VALUES (1)) AS dual

But for the following query the expected result would be FALSE, but HSQLDB evaluates it to NULL again:
SELECT 1 = ALL (SELECT x FROM (VALUES (NULL), (0)) AS t(x))
FROM (VALUES (1)) AS dual
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1555
HyperSQL Database Engine (HSQLDB) / Bugs / #1555 Minor Doc Error hsqldb.cache_size
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http://hsqldb.org/doc/2.0/guide/dbproperties-chapt.html
"Table 13.53. Size of Rows Cached in Memory " contains the following seemingly contradictory text:

The value can range between 100 KB - 4 GB. The default is 10,000, representing 10,000 kilobytes. If the value is set via SET FILES then it becomes effective after the next database SHUTDOWN or CHECKPOINT.

It's 100KB to 4GB but the default is 10KB?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1556
HyperSQL Database Engine (HSQLDB) / Bugs / #1556 Function creation before sequence creation in script file causes problems when function references sequence
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you create a sequence, and a user defined function that accesses that sequence, then the statement to create the function is put before the statement to create the sequence in the script file. This means that, although no errors are reported when creating the script, it will not reopen as the sequence is not recognised.
CREATE SEQUENCE ADDRESS_ID;
.
CREATE FUNCTION NEXT_ADDRESS_ID()
RETURNS VARCHAR(16)
LANGUAGE SQL
CONTAINS SQL
BEGIN ATOMIC
RETURN 'ADR_'||NEXT VALUE FOR ADDRESS_ID;
END;
.;
results in:
CREATE FUNCTION PUBLIC.NEXT_ADDRESS_ID() RETURNS VARCHAR(16) SPECIFIC NEXT_ADDRESS_ID_10266 LANGUAGE SQL NOT DETERMINISTIC CONTAINS SQL CALLED ON NULL INPUT BEGIN ATOMIC RETURN'ADR_'||NEXT VALUE FOR PUBLIC.ADDRESS_ID;END
.....
CREATE SEQUENCE PUBLIC.ADDRESS_ID AS INTEGER START WITH 0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1557
HyperSQL Database Engine (HSQLDB) / Bugs / #1557 Is hsqldb 2.3.7 available somewhere?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
My dears, it is not effectively a bug, but a doubt.
We need HSQLdb to run with Java7, and, so, we need version 2.3.7, not 2.5.0. Is this version available somewhere? Thank you very much!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1558
HyperSQL Database Engine (HSQLDB) / Bugs / #1558 Incorrect domain constraint violation when using 'instead of' trigger.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please load the attached DB.
If you then execute:
insert into order_line_ext(customer_order, product, quantity) values ('ORD_0', 'PRD_4', 7);
Then it incorrectly reports a not-null violation on a domain 'money', for which there is a derived attribute 'unit_cost' in the view 'order_line_ext'.
However if you insert directly into the base table:
insert into order_line(customer_order, product, quantity) values ('ORD_0', 'PRD_4', 7);
Then the violation is correctly not reported; querying from order_line shows that the value for attribute 'unit_cost' is not-null.
On top of this, the 'instead of' trigger for inserting into 'order_line_ext' simply does the insert into order_line which succeeds if executed outside the trigger.
1 Attachments


db.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1559
HyperSQL Database Engine (HSQLDB) / Bugs / #1559 Insert INTO .. SELECT .. UNION ALL SELECT..  fills up varchar with whitspace
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
INSERT INTO with select union will fill up all varchars(x) with trailing whitespaces.
Example:
Syntax: Oracle
CREATE TABLE FOO (
  ID NUMBER(19) NOT NULL,
  NAME VARCHAR2(254 CHAR)
)

INSERT INTO FOO (ID, NAME)
SELECT 1, 'Ben' FROM dual UNION ALL
SELECT 2, 'Jack the Knife' FROM dual;

This will end up with a entry for 1 = "Ben "
despite its declared as varchar2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1560
HyperSQL Database Engine (HSQLDB) / Bugs / #1560 Is PreparedStatement.setFetchSize() works or not?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get an JVM OutOfMemory error on large dataset select. 
PreparedStatement.setFetchSize() seems does nothing. Is it a bug or just not implemented feature in driver?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1561
HyperSQL Database Engine (HSQLDB) / Bugs / #1561 Issues with set table source parameters.. (ignore_first, fs , all_quoted etc..)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello there,
It seems text file interaction still requires refinement .. please see below..
 sql> set table t1 source "soduc.csv;ignore_first=true";
 sql> select count(*) from t1;
 4321
 sql> set table t1 source "soduc.csv;ignore_first=true;all_quoted=true";
 sql> select count(*) from t1;
 8642
 sql> set table t1 source "soduc.csv;ignore_first=true";
 sql> select count(*) from t1;
 12963
 sql> select count(*) from t1;
 12963
 sql> set table t1 source "soduc.csv;ignore_first=true";
 sql> select count(*) from t1;
 12963
 sql> set table t1 source "soduc.csv;ignore_first=true;all_quoted=true";
 sql> select count(*) from t1;
 17284
 sql>

Above file is not opened anywhere else. Just FYI.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1562
HyperSQL Database Engine (HSQLDB) / Bugs / #1562 Rejected update still commits data
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please see the attached DB - I'm running in shared mode with
java -cp hsqldb.jar org.hsqldb.server.Server --database.0 file:~/Mongost/db/server/Mongost --dbname.0 mongost
Please try the following:
SELECT * FROM ORDER_LINE
CUSTOMER_ORDER PRODUCT QUANTITY
ORD_0 PRD_0 12
ORD_0 PRD_1 5
ORD_1 PRD_0 5
UPDATE ORDER_LINE_EXT SET QUANTITY=5000
This correctly gives the error:
SQL Error: Product PRD_0 has insufficient stock / Error Code: 3500 / State: 23000
This is raised by a procedure called by a trigger fired after updates on ORDER_LINE, which is updated by the 'instead of' trigger for view ORDER_LINE_EXT
But now....
SELECT * FROM ORDER_LINE
CUSTOMER_ORDER PRODUCT QUANTITY
ORD_0 PRD_0 5000
ORD_0 PRD_1 5
ORD_1 PRD_0 5
Which is clearly not correct as the update has been committed instead of rejected.
Seems like it's another problem with the 'instead of ' triggers like #1558. If I update the base table ORDER_LINE directly then the problem does not occur.
1 Attachments


db.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1563
HyperSQL Database Engine (HSQLDB) / Bugs / #1563 The value stored in the Timestamp column differs between INSERT and MERGE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The value stored in the Timestamp column differs between INSERT and MERGE.
(NG) java.util.Date 
When INSERT java.util.Date, the value is correct.
When MERGE java.util.Date, the value is incorrect.
(NG) OffsetDateTime
When INSERT OffsetDateTime, the value is incorrect.
When MERGE OffsetDateTime, the value is correct.
(OK) java.sql.Timestamp
When INSERT java.sql.Timestamp, the value is correct.
When MERGE java.sql.Timestamp, the value is correct.
(OK) LocalDateTime
When INSERT LocalDateTime, the value is correct.
When MERGE LocalDateTime, the value is correct.

(result)

java.util.Date

now(java) =Tue Nov 26 14:19:57 JST 2019, offset=9
OP=INSERT, DT=2019-11-26 14:19:57.0
OP=MERGE, DT=2019-11-26 05:19:57.0

OffsetDateTime

now(java) =2019-11-26T14:20:49.554286300+09:00, offset=9
OP=INSERT, DT=2019-11-26 05:20:49.554286
OP=MERGE, DT=2019-11-26 14:20:49.554286

java.sql.Timestamp

now(java) =2019-11-26 14:21:40.52, offset=9
OP=INSERT, DT=2019-11-26 14:21:40.52
OP=MERGE, DT=2019-11-26 14:21:40.52

LocalDateTime

now(java) =2019-11-26T14:21:19.154276200, offset=9
OP=INSERT, DT=2019-11-26 14:21:19.154276
OP=MERGE, DT=2019-11-26 14:21:19.154276

(source)
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.Date;
import java.util.TimeZone;
public class Main {
public static void main(String[] args) throws Exception {
    Connection cn = DriverManager.getConnection("jdbc:hsqldb:mem:.", "SA", "");

    Statement st1 = cn.createStatement();
    st1.execute("CREATE TABLE T ( OP NVARCHAR(10) PRIMARY KEY, DT TIMESTAMP )");
    st1.close();

    // NG group
    java.util.Date now = new java.util.Date();
    //OffsetDateTime now = OffsetDateTime.now();

    // OK group
    //java.sql.Timestamp now = new java.sql.Timestamp(new Date().getTime());
    //LocalDateTime now = LocalDateTime.now();

    System.out.println("now(java) \t  =" + now + ", offset=" + TimeZone.getDefault().getRawOffset() / (60 * 60 * 1000));

    PreparedStatement ps2 = cn.prepareStatement("INSERT INTO T (OP, DT) VALUES (?, ?)");
    ps2.setString(1, "INSERT");
    ps2.setObject(2, now);
    ps2.execute();
    ps2.close();

    PreparedStatement st3 = cn.prepareStatement("" +
            "MERGE INTO T USING (VALUES ?, ?) I (OP, DT) ON (T.OP = I.OP) " +
            "WHEN MATCHED THEN UPDATE SET T.DT = I.DT " +
            "WHEN NOT MATCHED THEN INSERT (OP, DT) VALUES (I.OP, I.DT) ");
    st3.setString(1, "MERGE");
    st3.setObject(2, now);
    st3.execute();
    st3.close();

    Statement st4 = cn.createStatement();
    ResultSet rs = st4.executeQuery("SELECT * FROM T");
    print(rs);
    rs.close();
    st4.close();

    cn.close();
}

public static void print(ResultSet rs) throws SQLException {
    while(rs.next()) {
        int columnCount = rs.getMetaData().getColumnCount();
        for(int i = 1; i <= columnCount; i++) {
            System.out.print(rs.getMetaData().getColumnLabel(i));
            System.out.print("=");
            System.out.print(rs.getObject(i));
            System.out.print(i == columnCount ? "\r\n" : ",\t");
        }
    }
}

}
1 Attachments


Main.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1564
HyperSQL Database Engine (HSQLDB) / Bugs / #1564 JRT mapping for INTERVAL types is invalid
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
According to documentation, INTERVAL types correspond to Period and Duration Java types.
Java mappings for INTERVAL SECOND and INTERVAL MONTH types are invalid in org.hsqldb.types.Types:624.
Here is the opposite mapping in org.hsqldb.types.IntervalType:152.
My guess is that HyperSQL Code Switcher directives are messed up somewhere and that's what causes the issue.
Minimal example presenting the issue (HSQL 2.5.0, Java 8):
package hsqltest;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public final class HsqlIntervalFunctionTest {

    public static String exampleHsqlFunction(final java.time.Period duration) {
        return "In example function, arg: " + duration.toString();
    }

    public static void main(final String... args) throws SQLException {
        try (
            final Connection connection = DriverManager.getConnection(
                "jdbc:hsqldb:mem:testdb",
                "sa",
                "sa"
            );
            final Statement statement = connection.createStatement()
        ) {
            // create function and link it to Java method
            statement.executeUpdate(
                "CREATE FUNCTION EXAMPLE_FUNCTION (duration INTERVAL MONTH)"
              + " RETURNS CHAR VARYING(100)"
              + " LANGUAGE JAVA DETERMINISTIC NO SQL"
              + " EXTERNAL NAME 'CLASSPATH:hsqltest.HsqlIntervalFunctionTest.exampleHsqlFunction';"
            );

            // create dummy table so we have something to SELECT from
            statement.executeUpdate("CREATE TABLE DUMMY(id INT);");
            statement.executeUpdate("INSERT INTO DUMMY VALUES (0);");

            // use the function and print the result
            final ResultSet result = statement.executeQuery(
                "SELECT EXAMPLE_FUNCTION(INTERVAL '3' MONTH) FROM DUMMY;"
            );
            while (result.next()) {
                System.out.println(result.getString(1));
            }
        }
    }

}

Also see this StackOverflow question.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1565
HyperSQL Database Engine (HSQLDB) / Bugs / #1565 Recursion never stops
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider this recursive query:
with recursive t(c) as (
  select 1
  from (values (1)) t
  union all
  select c + 1
  from t
  where c < 10
)
select c
from t;

When running this on HSQLDB 2.5.0, the recursion never stops until we hit an OutOfMemoryException. It works perfectly fine on PostgreSQL. This query works fine on HSQLDB as well:
with recursive t(c) as (
  select 1
  from (values (1)) t
  union 
  select c + 1
  from t
  where c < 10
)
select c
from t;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1566
HyperSQL Database Engine (HSQLDB) / Bugs / #1566 Inconsistent type inference in CTEs with bind variables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've noticed a few interesting inconsistencies when using bind variables and depending on "type inference" of those bind variables when using JDBC. For example, the following logic yields 12, instead of the expected 3:
try (Connection c = dbSetup.getConnection();
    PreparedStatement s = c.prepareStatement("with t1(f1) as (values(?)), t2(f2) as (values(?)) select f1 + f2 from t1, t2")) {

    s.setInt(1, 1);
    s.setInt(2, 2);

    try (ResultSet r = s.executeQuery()) {
        while (r.next())
            System.out.println(r.getInt(1));
    }
}

At first, I was assuming this is because the bind variables are inferred to be of type VARCHAR rather than INT, so the + operation is really concatenation instead of addition. But the result is very different when I do this, instead:
try (Connection c = dbSetup.getConnection();
    PreparedStatement s = c.prepareStatement("with t1(f1) as (select ? from (values(0)) t), t2(f2) as (select ? from (values(0)) t) select f1 + f2 from t1, t2")) {

    s.setInt(1, 1);
    s.setInt(2, 2);

    try (ResultSet r = s.executeQuery()) {
        while (r.next())
            System.out.println(r.getInt(1));
    }
}

Now, I'm getting 11 as an output, which I cannot explain. No luck either when casting the bind variables to int explicitly. This yields 2, not 3:
try (Connection c = dbSetup.getConnection();
    PreparedStatement s = c.prepareStatement("with t1(f1) as (select cast(? as int) from (values(0)) t), t2(f2) as (select cast(? as int) from (values(0)) t) select f1 + f2 from t1, t2")) {

    s.setInt(1, 1);
    s.setInt(2, 2);

    try (ResultSet r = s.executeQuery()) {
        while (r.next())
            System.out.println(r.getInt(1));
    }
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1567
HyperSQL Database Engine (HSQLDB) / Bugs / #1567 'duplicate column name in derived table' when using wildcard
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please create a simple table such as
CREATE TABLE PUBLIC.DEMO(TEXT VARCHAR(1024) PRIMARY KEY);
Then try
SELECT *, LENGTH(TEXT) FROM DEMO;
And there is an error
'duplicate column name in derived table'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1568
HyperSQL Database Engine (HSQLDB) / Bugs / #1568 String truncation in derived view column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Please see the attached DB with a text table and a CSV with some large values for certain columns (>32K).
When you do select * from v_view, you get 'data exception: string data, right truncation'. It seems there is an intermediate VARCHAR of length 32K being used in the view calculation which gets exceeded (the same happens if you just do the view definition query on its own).
Is this perhaps related to, as you state in the guide, "a VARCHAR column declaration that has no size, is given a 32K size"? [but there isn't any way of hinting to the view that the derived column will be >32K]
The table column definitions were LONGVARCHAR in the table definition, but I've tried various combinations, and also doing a e.g LEFT(xxx, 1024) for each column as part of the view definition, but nothing seems to work.
1 Attachments


Demo.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1569
HyperSQL Database Engine (HSQLDB) / Bugs / #1569 Sequence not found when allocation size is above 16383
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I want to set a sequence allocation size of 20.000 ("twenty thousand") within a JPA entity. The parameter allocationSize will be managed by JPA (eclipselink in my case). 
For any reason my tests with hsqldb (v2.5) are failing when the allocation size is greater than 16383. The tests are failing during a sequence restart (see below). Following the documentation (http://www.hsqldb.org/doc/1.8/guide/ch09.html#alter_sequence-section) there nothing special here. Up to 16383 the tests run successfully.
`
private static final String GEN_NAME = "BOOKS_ID_GENERATOR";
public static final String SEQ_NAME = "BOOKS_SEQ";
@Id
@SequenceGenerator(name = GEN_NAME, sequenceName = SEQ_NAME, allocationSize = 16383)
@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = GEN_NAME)
private Long id;
`

`

class SequenceReset 
private static final int START_NUMBER = 1000; 
...
entityManager.createNativeQuery(format("alter sequence %s RESTART WITH %s", sequenceName, START_NUMBER)).executeUpdate();
Stacktrace when increment above 16383, here 16384:
javax.persistence.PersistenceException: Exception [EclipseLink-4002] (Eclipse Persistence Services - 2.7.3.v20180807-4be1041): org.eclipse.persistence.exceptions.DatabaseException
Internal Exception: java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: BOOKS_SEQ in statement [alter sequence BOOKS_SEQ RESTART WITH 16384]
Error Code: -5501
Call: alter sequence BOOKS_SEQ RESTART WITH 1000
Query: DataModifyQuery(sql="alter sequence BOOKS_SEQ RESTART WITH 1000")
at org.eclipse.persistence.internal.jpa.QueryImpl.executeUpdate(QueryImpl.java:312)
at xy.SequenceReset.run(SequenceReset.java:40)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1570
HyperSQL Database Engine (HSQLDB) / Bugs / #1570 Document capability of aliasing INSERT tables
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This seems to work (just like in Oracle or PostgreSQL):
create table t (i int);
insert into t as u values (1);

But it isn't documented here:
http://hsqldb.org/doc/2.0/guide/dataaccess-chapt.html#dac_insert_statement
Aliasing DML target tables is documented for UPDATE, DELETE, and MERGE statements, so I'd say this is merely a documentation bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1571
HyperSQL Database Engine (HSQLDB) / Bugs / #1571 Small typo in manual
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The manual contains a small typo in the syntax example for "OVERRIDING SYSTEM VALUES"
http://hsqldb.org/doc/2.0/guide/databaseobjects-chapt.html#N1120C
It says "ORERRIDING"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1572
HyperSQL Database Engine (HSQLDB) / Bugs / #1572 Parser error when using FOR SYSTEM_TIME BETWEEN syntax
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm playing around with the temporal table syntax in HSQLDB. Given this table:
CREATE TABLE t_sys_time_period (
  id INT,
  value INT,

  start_ts TIMESTAMP GENERATED ALWAYS AS ROW START,
  end_ts TIMESTAMP GENERATED ALWAYS AS ROW END,

  PERIOD FOR SYSTEM_TIME (start_ts, end_ts),
  CONSTRAINT pk_t_sys_time_period PRIMARY KEY (id)
) WITH SYSTEM VERSIONING

I'd like to run a query like this, but it fails:
SELECT *
FROM public.t_sys_time_period
  FOR system_time 
    BETWEEN timestamp '2000-01-01 00:00:00' 
    AND timestamp '2020-01-01 00:00:00'

The error is:
Caused by: org.hsqldb.HsqlException: unexpected end of statement:  required: AND : line: 6
    at org.hsqldb.error.Error.parseError(Unknown Source)
    at org.hsqldb.ParserBase.unexpectedTokenRequire(Unknown Source)
    at org.hsqldb.ParserBase.readThis(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQuerySystemPeriodSpecOrNull(Unknown Source)
    at org.hsqldb.ParserDQL.readTableOrSubquery(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableReference(Unknown Source)
    at org.hsqldb.ParserDQL.XreadFromClause(Unknown Source)
    at org.hsqldb.ParserDQL.XreadTableExpression(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQuerySpecification(Unknown Source)
    at org.hsqldb.ParserDQL.XreadSimpleTable(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryPrimary(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryTerm(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpressionBody(Unknown Source)
    at org.hsqldb.ParserDQL.XreadQueryExpression(Unknown Source)
    at org.hsqldb.ParserDQL.compileCursorSpecification(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 16 more

The other syntaxes work, including:
SELECT *
FROM public.t_sys_time_period
  FOR system_time 
    FROM timestamp '2000-01-01 00:00:00' 
    TO timestamp '2020-01-01 00:00:00'

As a workaround, this syntax also works:
SELECT *
FROM public.t_sys_time_period
  FOR system_time 
    BETWEEN timestamp '2000-01-01 00:00:00' + INTERVAL 0 DAY
    AND timestamp '2020-01-01 00:00:00'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1573
HyperSQL Database Engine (HSQLDB) / Bugs / #1573 trunk rev 6100 breaks scripts with wrong CREATE TABLE ordering
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I need to use the bugfix mentioned in this discussion: https://sourceforge.net/p/hsqldb/discussion/73674/thread/d8d35adb5d/
To this end, I checked out the SVN repo to rev 6100 and built a new JAR from trunk.
However, opening a database, created by v2.5.0, with HSQLDB rev 6100 corrupts the DB script on shutdown.
Somehow the table creation order is wrong. It has certainly changed since v2.5.0!
I've attached a tiny demo database script.
Open this using sqltool & hsqldb rev 6100 then type "SHUTDOWN" and quit sqltool.
Attempting to re-open using sqltool & hsqldb rev 6100 gives me this error:
SEVERE: error in script file line: 42 org.hsqldb.HsqlException: user lacks privilege or object not found: GROUPS

As you can see from the newly mangled script, hsqldb is trying to create table GROUPADMINS, which has a foreign key constraint on GROUPS.group_id, before creating the GROUPS table.
Sadly I can't seem to get Eclipse IDE to play nicely with gradle and so help debug exactly why this happens.
Good luck!
1 Attachments


demo.script
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1574
HyperSQL Database Engine (HSQLDB) / Bugs / #1574 Non deterministic INSERT statements generated by ScriptWriterText
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm using the ScriptWriterText class to export databases between computers with differents JREs, and sometimes there is a mismatch between the order of the columns exported in the VALUES part of the INSERT statements, and the order of the column of the database where the script is imported.
I suspect the iteration order of the columns is a not deterministic and may vary depending on the JRE used, maybe due to the use of non-ordered hashmaps?
I've only tested with HSQLDB 1.8, but the 2.x code looks quite similar.
To work around this issue I'd suggest adding the name of the columns in the INSERT statements generated:
INSERT INTO foo (A, B, C) VALUES (value1, value2, value3);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1575
HyperSQL Database Engine (HSQLDB) / Bugs / #1575 Parser error when system_time refers to a variable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying out the temporal tables but have run into a problem trying to use them from within a stored procedure (or function too). In particualr, I want to have the time specification be a variable.
For example, given the following table:
create table test_tbl (
    id  integer not null,

    PS  timestamp generated always as row start,
    PE  timestamp generated always as row end,
    period for system_time (PS, PE)
) with system versioning;

I would like to do this, but it does not compile: "user lacks privilege or object not found: SINCE / Error Code: -5501 / State: 42501"
create procedure get_temporal_data (
    in since timestamp with time zone,
    out result1 integer
)
reads sql data
begin atomic
    set result1 = (select count(*) from test_tbl for system_time between since and current_timestamp);
end

(Obviously the given procedure doesn't do anything useful).
It seems that the period specification doesn't know about variables. I'm not sure how this is possible since using variables/parameters in the WHERE part of a SELECT works just fine.
Having traced through the code with the debugger a little bit, I think the problem is around ParserDML.java:978 in trunk (r6102). That is, the call to XreadSubqueryTableBody().
This is because, later on, the references to variables are resolved, but the rangeVars (which the input variable belongs to) aren't saved anywhere (except for targets by XreadTargetSpecification() , but since the input variable is not a target, that doesn't get saved).
I am not sure if my hypothesis is correct, or if so how to fix it. I will try to work on a fix and post it here if I come up with one.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1576
HyperSQL Database Engine (HSQLDB) / Bugs / #1576 DatabaseManagerSwing doesn't show returned result from PROCEDURE call
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If you have any procedure with a DYNAMIC RESULT SET then this will not be shown in the GUI (even though the procedure will correctly evaluate).
The following patch will show the first result in the table:
~~~
Index: src/org/hsqldb/util/DatabaseManagerSwing.java
===================================================================
--- src/org/hsqldb/util/DatabaseManagerSwing.java (revision 6102)
+++ src/org/hsqldb/util/DatabaseManagerSwing.java (working copy)
@@ -1584,6 +1584,22 @@
                 gResult.addRow(g);
             }


} else if (sStatement.getMoreResults()) { // repeated for if a procedure returns a result set
ResultSet rs = sStatement.getResultSet();
+
try {
formatResultSet(rs);
} catch (Throwable t) {
g[0] = "Error displaying the ResultSet";
+
gResult.setHead(g);
+
String s = t.getMessage();
+
g[0] = s;
+
gResult.addRow(g);
}
} else {
g[0] = "update count";
~~~

I'm not sure if this is written correctly so that it works in all cases but I thought I would put it here in case someone else finds it helpful.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1577
HyperSQL Database Engine (HSQLDB) / Bugs / #1577 Issue with select for update statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
I am encountering an issue using hsqldb and "select for update" statement
In a nutshell, when the "select for update" is executed, it does not seem to lock the row (or the table) during the time of the transaction.
I have made a small program that reproduces the issue on hsqldb which can be found in the attachment. The same program works with Oracle and other dbs.
The program executes the following statements by 3 threads:
SELECT OID FROM ID_TABLE FOR UDPATE;
UPDATE ID_TABLE SET = 'newOID'
COMMIT;
Then each thread updates a global oid. If another thread founds the same oid as it own, the program stops. As it is, the program should not stop.
I have the same behavior with the 2.5.0 version and the trunk version. All the configuration I am using can be found in the resources directory.
Thank you.
Best regards,
Ludovic
1 Attachments


hsqldb-select-for-update.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1578
HyperSQL Database Engine (HSQLDB) / Bugs / #1578 using clob as a column type will result in a out of mem (or ever growing file)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Sample code below.
Problem is if you are using "clob" as a column then if you insert a clob then that will be at once 32kb of memory or disk usage (depending on mem: or file:)
by itself not a big problem (thats why we do use clobs right? but it would be nice if they only took the amount of memory that they really are, with a few bytes of meta data like length)
But the problem is if you delete the row with the clob, or even drop the whole table, then nothing is clean up, the clob manager (File or Mem based) just keeps growing
If you are using for example mem based and you use hsqldb really as a caching database (so you create temp tables, use that in your app, then drop the table complete) then the memory will grow and grow and you will get an out of mem in the end...
This can be "worked" around by using then the file: so that at least the file will grow and grow.
The test below is based on file because then it is easier to be seen. But mem works the same way (only file is even persistent after restart so you see the file grow and grow even over restarts when there is really no table at all in memory at first start)
package test;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
public class Main {
public static void main(String[] args) throws ClassNotFoundException, SQLException {
Class.forName("org.hsqldb.jdbcDriver");// to register
    // if you run this program a few times without deleting the file in this dir specified here, then the clobs file will grow and grow and grow
    Connection connection = DriverManager.getConnection("jdbc:hsqldb:file:D:\\temp\\hsql2\\hsqldb", "SA", "");

    String create = "create table atable  (rowid integer generated by default as identity (start with 1), reference_number clob , primary key (rowid))";
    Statement createStatement = connection.createStatement();
    createStatement.execute(create);
    createStatement.close();

    String insert = "insert into atable (reference_number) values (?)";

    int p = 0;
    // loop a few times to fill and delete it all from a table. if you make this just 1 then a 3200kb file is created 
    // but with 10 that file is 10 times as big, don't expect that, a delete should just clean stuff up.
    while (p++ < 10) {
        connection.setAutoCommit(false);
        PreparedStatement insertStatement = connection.prepareStatement(insert);
        int i = 0;
        while (i++ < 100) {
            insertStatement.setString(1, "00057434.5" + Math.random());
            insertStatement.execute();
        }
        connection.setAutoCommit(true);
        insertStatement.close();
        Statement delete = connection.createStatement();
        // this should delete the clobs
        delete.execute("delete from atable");
        delete.close();
    }

    Statement select = connection.createStatement();
    ResultSet executeQuery = select.executeQuery("select * from atable");
    //  this prints false, there is really no more data. but the file is 32000kb big
    System.err.println(executeQuery.next());
    executeQuery.close();
    select.close();

    Statement delete = connection.createStatement();
    // even after dropping the whole table nothing is clean up.
    delete.execute("drop table atable");

    connection.close();
}

}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1579
HyperSQL Database Engine (HSQLDB) / Bugs / #1579 General error when using DISTINCT predicate for row value expressions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running the following query produces a "General error"
select (1, 2) is distinct from (
  select 2, 1 from (values (1)) t
)
from (values (1)) t;

Stack trace:
org.jkiss.dbeaver.model.sql.DBSQLException: SQL-Fehler [S1000]: General error
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:134)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeStatement(SQLQueryJob.java:488)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.lambda$0(SQLQueryJob.java:425)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:170)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeSingleQuery(SQLQueryJob.java:417)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.extractData(SQLQueryJob.java:775)
    at org.jkiss.dbeaver.ui.editors.sql.SQLEditor$QueryResultsContainer.readData(SQLEditor.java:2914)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.lambda$0(ResultSetJobDataRead.java:111)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:170)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.run(ResultSetJobDataRead.java:109)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetViewer$17.run(ResultSetViewer.java:3423)
    at org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:103)
    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.sql.SQLException: General error
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.execute(JDBCStatementImpl.java:338)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:131)
    ... 12 more
Caused by: org.hsqldb.HsqlException: General error
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 16 more

Using row value expressions without subqueries works:
select (1, 2) is distinct from (2, 1)
from (values (1)) t;

Subqueries also work when not using row value expressions:
select 1 is distinct from (
  select 2 from (values (1)) t
)
from (values (1)) t;
 ~~~

 A workaround might be to use an auxiliary derived table or CTE:

select (1, 2) is distinct from (a, b)
from (select 2, 1 from (values (1)) t) t (a, b);
~~~
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1580
HyperSQL Database Engine (HSQLDB) / Bugs / #1580 General error with LATERAL and transitive join column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(Might be related to #1579)
General case, using v2.5.0:
SELECT col3 FROM tableA JOIN tableB USING (col1) CROSS JOIN LATERAL(SELECT col2 FROM tableC WHERE col2 = col1) AS table (col3)
Results in a "General Error" due to col1 inside the LATERAL(). 
col1 shouldn't be ambiguous because it's the same colum in tableA and tableB, even though it's not qualified with a table name.
Requires tableC.col2 to be primary key:
create table tableA (col1 int);
create table tableB (col1 int);
create table tableC (col2 int, primary key (col2));
These variations don't cause the error:
When tableC.col2 is not primary key.
When you qualify col1 inside LATERAL():
SELECT col3 FROM tableA JOIN tableB USING (col1) CROSS JOIN LATERAL(SELECT col2 FROM tableC WHERE col2 = tableA.col1) AS tableC (col3)
or:
SELECT col3 FROM tableA JOIN tableB USING (col1) CROSS JOIN LATERAL(SELECT col2 FROM tableC WHERE col2 = tableB.col1) AS tableC (col3)
When you remove ambiguity from transitive join column:
SELECT col3 FROM tableA CROSS JOIN LATERAL(SELECT col2 FROM tableC WHERE col2 = col1) AS tableC (col3)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1581
HyperSQL Database Engine (HSQLDB) / Bugs / #1581 General error when table valued function returns values constructor
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Run this script:
DROP SCHEMA IF EXISTS stored_functions CASCADE;
CREATE SCHEMA stored_functions;

CREATE FUNCTION stored_functions.f_tables_0 ()
RETURNS TABLE (
    c1 int
)
READS SQL DATA
BEGIN ATOMIC
    RETURN TABLE (VALUES (1));
END


SELECT * FROM TABLE (stored_functions.f_tables_0());

And get a General Error:
org.jkiss.dbeaver.model.sql.DBSQLException: SQL-Fehler [S1000]: General error
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:134)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeStatement(SQLQueryJob.java:488)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.lambda$0(SQLQueryJob.java:425)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:170)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeSingleQuery(SQLQueryJob.java:417)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.extractData(SQLQueryJob.java:775)
    at org.jkiss.dbeaver.ui.editors.sql.SQLEditor$QueryResultsContainer.readData(SQLEditor.java:2914)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.lambda$0(ResultSetJobDataRead.java:111)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:170)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.run(ResultSetJobDataRead.java:109)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetViewer$17.run(ResultSetViewer.java:3423)
    at org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:103)
    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.sql.SQLException: General error
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.execute(JDBCStatementImpl.java:338)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:131)
    ... 12 more
Caused by: org.hsqldb.HsqlException: General error
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.StatementExpression.execute(Unknown Source)
    at org.hsqldb.StatementCompound.executeProtected(Unknown Source)
    at org.hsqldb.StatementCompound.executeBlock(Unknown Source)
    at org.hsqldb.StatementCompound.execute(Unknown Source)
    at org.hsqldb.Routine.invoke(Unknown Source)
    at org.hsqldb.FunctionSQLInvoked.getValueInternal(Unknown Source)
    at org.hsqldb.FunctionSQLInvoked.getResult(Unknown Source)
    at org.hsqldb.ExpressionTable.insertTableValues(Unknown Source)
    at org.hsqldb.ExpressionTable.insertValuesIntoSubqueryTable(Unknown Source)
    at org.hsqldb.TableDerived.materialise(Unknown Source)
    at org.hsqldb.StatementDMQL.materializeSubQueries(Unknown Source)
    at org.hsqldb.StatementDMQL.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 16 more

This version of the function works as expected:
DROP SCHEMA IF EXISTS stored_functions CASCADE;
CREATE SCHEMA stored_functions;

CREATE FUNCTION stored_functions.f_tables_0 ()
RETURNS TABLE (
    c1 int
)
READS SQL DATA
BEGIN ATOMIC
    RETURN TABLE (SELECT 1 FROM (VALUES (1)));
END


SELECT * FROM TABLE (stored_functions.f_tables_0());
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1582
HyperSQL Database Engine (HSQLDB) / Bugs / #1582 ALTER DOMAIN does not update DEFAULT on existing usages
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider this script:
create domain d as int;
create table t (i d);
alter domain d set default 1;
insert into t default values;
select * from t;

I would expect the result to be 1, as it is also e.g. in PostgreSQL and Firebird, but it is null. The default value is not updated on existing columns as it should be.
Likewise, when dropping a default from a domain:
create domain d as int default 1;
create table t (i d);
alter domain d drop default;
insert into t default values;
select * from t;

The result should be null, but it is 1. The existing column's default is not affected by the change of domain.
This is not the case when adding / removing CHECK constraints, in case of which the behaviour is as expected. The following script fails with a constraint violation, as expected:
create domain d as int;
create table t (i d);
alter domain d add check (value = 1);
insert into t values (2);
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1583
HyperSQL Database Engine (HSQLDB) / Bugs / #1583 General Error when trying to use MICROSECOND with DATEDIFF()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Try this query:
select datediff(microsecond, cast(date '1999-04-04' as timestamp), cast(date '2002-01-01' as timestamp)) from (values(1)) t(v)

It produces a "general error":
org.jkiss.dbeaver.model.sql.DBSQLException: SQL-Fehler [S1000]: General error
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:134)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeStatement(SQLQueryJob.java:488)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.lambda$0(SQLQueryJob.java:425)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:170)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeSingleQuery(SQLQueryJob.java:417)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.extractData(SQLQueryJob.java:775)
    at org.jkiss.dbeaver.ui.editors.sql.SQLEditor$QueryResultsContainer.readData(SQLEditor.java:2914)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.lambda$0(ResultSetJobDataRead.java:111)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:170)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.run(ResultSetJobDataRead.java:109)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetViewer$17.run(ResultSetViewer.java:3423)
    at org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:103)
    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.sql.SQLException: General error
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.execute(JDBCStatementImpl.java:338)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:131)
    ... 12 more
Caused by: org.hsqldb.HsqlException: General error
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.StatementDMQL.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 16 more

I'm not sure if this is because MICROSECOND isn't supported, or if there's a bug? Trying an arbitrary date part yields a more specific message, though:
select datediff(xyz, cast(date '1999-04-04' as timestamp), cast(date '2002-01-01' as timestamp)) from (values(1)) t(v)

Yields:
SQL-Fehler [42566]: interval qualifier missing or not valid: XYZ
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1584
HyperSQL Database Engine (HSQLDB) / Bugs / #1584 HSQLDB Deadlock using 2.4.1 and MVCC
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We encounter a recurrent deadlock issue using the 2.4.1 version in one production environment. We have been using this version for a long time in various environments and have not seen deadlock issues until now.
The issue appeared recently in this production environment, and is reappearing regularly after restarting the application and waiting for a few day of usage.
The database is quite big, with million rows in some tables.
The hsqldb server is configured in MVCC mode and sessions use READ_COMMITED transaction isolation.
We did not change the defaults for
hsqldb.tx_conflict_rollback or hsqldb.tx_interrupt_rollback
I wonder if these settings should be modified to prevent the deadlock from happening.
After connecting to the database manually and inspecting the session, we observed that a checkpoint session is waiting for the following session, which never seems to terminate:
SESSION_ID CONNECTED USER_NAME IS_ADMIN AUTOCOMMIT READONLY LAST_IDENTITY SCHEMA TRANSACTION TRANSACTION_SIZE WAITING_FOR_THIS THIS_WAITING_FOR CURRENT_STATEMENT LATCH_COUNT

  5969  2020-06-09 12:05:04.0  scheduler  TRUE      FALSE       FALSE                 0  PUBLIC  TRUE                        0  6076

The checkpoint statement, on the other hand is preventing many transactions to complete (which I believe is expected).
We tried to manually end the blocking session 5969 using ALTER SESSION RELEASE (and then CLOSE), but the session does not seem to respond, we tried as well END STATEMENT without success.
We tried as well to use ALTER SESSION RELEASE | CLOSE on the CHECKPOINT (6076), and here it disappeared, but all other sessions waiting for this checkpoint session 6076 were not unlocked and are still displaying THIS_WAITING_FOR 6076.
It is quite difficult to understand the root cause of the issue as we cannot identify the origin of the 5969 session, which statement it ran, etc. If we could forcefully provoke an error on this transaction, we could hopefully see in our logs the error and thus could identify the origin. For now we are leaving the server in this deadlock state to hopefully investigate further.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1585
HyperSQL Database Engine (HSQLDB) / Bugs / #1585 Timestamp loses precision when stored and retrieved
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This issue occurs when using JDBC with Java 9+ and HSQLDB 2.5.1.
This does not occur on HSQLDB 2.5.0.
In Java 9+, the Instant precision increased from milliseconds (2020-06-30T13:51:30.875Z) to microseconds (2020-06-30T13:51:30.875297Z).
When storing and retrieving a timestamp with microsecond precision, it is returned with millisecond precision, making it less precise.
The following example illustrates this, when run on Java 9 or greater.
Statement statement = connection.createStatement();

statement.execute("DROP TABLE IF EXISTS test_timestamp CASCADE");
statement.execute(
        "CREATE TABLE IF NOT EXISTS test_timestamp (id INTEGER, expiry TIMESTAMP, PRIMARY KEY(id))");

String insert = "INSERT INTO test_timestamp (id, expiry) VALUES(1, ?)";
PreparedStatement preparedStatement = connection.prepareStatement(insert);
Timestamp timestampBefore = Timestamp.from(Instant.now());
preparedStatement.setTimestamp(1, timestampBefore);
preparedStatement.executeUpdate();

ResultSet resultSet = statement.executeQuery("SELECT id, expiry from test_timestamp where id = 1");
if (resultSet.next()) {
    Timestamp timestampAfter = resultSet.getTimestamp("expiry");
    assertEquals(timestampBefore, timestampAfter);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1586
HyperSQL Database Engine (HSQLDB) / Bugs / #1586 Performance issues in queries with joins
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I've noticed an unexpected performance issue on a few queries in my system, when they contain join clause.s For instance:
-- tableA has around 3k lines, tableB around 50k lines
SELECT count(*) FROM tableA a JOIN tableB b ON a.CITY = b.CITY AND a.STATE = b.STATE;

This takes around 20s to complete in my test environment (the original query takes over a minute). These tables are not really huge, so 20s seemed a little bit excessive to me. 
My test setup (table data attached):
# DB Startup (v2.5.1)
java -cp hsqldb.jar org.hsqldb.Server --database.0 mem --dbname.0 cache -port 9001 &

# Data load & issue reproduction
java -jar sqltool.jar --inlineRc=url=jdbc:hsqldb:hsql://localhost:9001/cache,user=SA,password=

sql> \t true
sql> create table TABLEA (CITY varchar(255), STATE varchar(255));
sql> create table TABLEB (CITY varchar(255), STATE varchar(255));
sql> \m tableA.dsv
sql> \m tableB.dsv
sql> commit;

sql> SELECT count(*) FROM tableA a JOIN tableB b ON a.CITY = b.CITY AND a.STATE = b.STATE;

I think HSQL is using an inefficient join strategy in this case, but I wanted to see what you guys think about this.
On a side note, if you create indexes for both tables, the response time is as expected (even though the amount of data processed in both cases should be roughly the same):
CREATE INDEX idx_t_a_city ON tableA(CITY, STATE);
CREATE INDEX idx_t_b_city ON tableB(CITY, STATE);

SELECT count(*) FROM tableA a JOIN tableB b ON a.CITY = b.CITY AND a.STATE = b.STATE;

Thanks, 
Raphael.
1 Attachments


tableData.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1587
HyperSQL Database Engine (HSQLDB) / Bugs / #1587 Regression when reading timestamp bind value around epoch
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This seems to be a regression introduced in 2.5.1. I haven't seen this in 2.5.0:
This works:
try (PreparedStatement s = c.prepareStatement("select cast(? as timestamp) from (values(1)) t(a)")) {
    s.setTimestamp(1, Timestamp.valueOf("1970-01-02 00:00:00.123"));

    try (ResultSet rs = s.executeQuery()) {
        rs.next();
        System.out.println(rs.getTimestamp(1));
    }
}

But this doesn't:
try (PreparedStatement s = c.prepareStatement("select cast(? as timestamp) from (values(1)) t(a)")) {
    s.setTimestamp(1, Timestamp.valueOf("1970-01-01 00:00:00.123"));

    try (ResultSet rs = s.executeQuery()) {
        rs.next();
        System.out.println(rs.getTimestamp(1));
    }
}

The exception is:
Exception in thread "main" java.lang.IllegalArgumentException: nanos > 999999999 or < 0
    at java.sql/java.sql.Timestamp.setNanos(Timestamp.java:336)
    at org.hsqldb.types.DateTimeType.convertSQLToJava(Unknown Source)
    at org.hsqldb.jdbc.JDBCResultSet.getTimestamp(Unknown Source)
    at org.jooq.testscripts.JDBC.main(JDBC.java:29)

A nano second value of -877000000 is being set to the timestamp with value 1970-01-01 00:00:00.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1588
HyperSQL Database Engine (HSQLDB) / Bugs / #1588 At '@/'  path dereferencing doesn't work in certain situations on Windows
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When running on Windows, @ dereferencing doesn't work when using paths with backslashes in sqltool command-lines, nor with the SqlFile constructions that accept File arguments.
For instance, for a script check-db-setup.sql that includes other scripts via \i @/other-script.sql, this constructor works,
new SqlFile(new URL("file", null, "sql/check-db-setup.sql"));
while this does not
new SqlFile(new File("sql/check-db-setup.sql"));
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1589
Page not found
    - SourceForge.net

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[]
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1590
HyperSQL Database Engine (HSQLDB) / Bugs / #1590 Bug with selection of multiple boolean constants
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Thank you for great database. We use it a lot for automatic testing of our DB layer. We have found strange issue related to selecting constants together with the actual data from the table. If we select two boolean constants with different names, the result set contains duplicated name. Query:
CREATE TABLE IF NOT EXISTS device (
id uuid NOT NULL CONSTRAINT device_pkey PRIMARY KEY
);
insert into device (id) values ('13814000-1dd2-11b2-8080-808080808080');
select
id,
True as read_flag,
True as write_flag
from device;
While this might be bad design for most cases, we use this functionality in a very specific case. 
Attaching the image that shows that the result set contains two "WRITE_FLAG" columns. Please note that this is not the IDE bug, since the issue happends during automatic tests built with mvn.
Also, the following query works fine:
select
id,
1 as read_flag,
1 as write_flag
from device;
1 Attachments





HSQLDB_ISSUE.png
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1591
HyperSQL Database Engine (HSQLDB) / Bugs / #1591 Documentation: Database Limitations unclear
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I can't find any reliable statements about the technical limitations of HSQL.
E.g. from the FAQ:

The current size limit of an HSQLDB database is 8 TB for all CACHED tables and 256GB for each TEXT table. In addition, maximum totall lob size is 64TB.

It's unclear, if the 8TB limit is per cached table or for all cached tables total. The Features page is equally ambiguous:

Disk tables (CACHED TABLE) up to 8TB and text tables up to 256GB each

It's clear that the 256GB limit applies to each text table. But it's ambiguous again, if the 8TB limit applies per cached table or for all cached tables total.
In Data Types and Operations there's no mention of max. length, e.g. of the different character types like VARCHAR.
Please clarify on these limitations and it would be great to have an overview like this one for MS Access
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1592
HyperSQL Database Engine (HSQLDB) / Bugs / #1592 DB2 dialect issue with FETCH FIRST x ROWS ONLY FOR UPDATE
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is a specific DB2 dialect statement which fails only on HSQLDB.
SELECT * FROM anytable FETCH FIRST 10 ROWS ONLY FOR UPDATE
When try fetch limited rows for update it fails on delete such row with message attempt to assign to non-updatable column. 
But FOR UPDATE works like expected when is without FETCH FIRST 10 ROWS ONLY
Code which fails:
count = jdbcTemplate.query(sql, params, types,  new ResultSetExtractor<Integer>() {
                public Integer extractData(ResultSet rs) throws SQLException {
                    int c = 0;
                    while(rs.next()) {
                        rs.deleteRow();
                        c++;
                    }
                    return c;
                }
            });

and exception:
org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [SELECT * FROM anytable FETCH FIRST 10 ROWS ONLY FOR UPDATE]; SQL state [0U000]; error code [-2500]; attempt to assign to non-updatable column; nested exception is java.sql.SQLException: attempt to assign to non-updatable column
.....
Caused by: java.sql.SQLException: attempt to assign to non-updatable column
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.notUpdatableColumn(Unknown Source)
    at org.hsqldb.jdbc.JDBCResultSet.checkUpdatable(Unknown Source)
    at org.hsqldb.jdbc.JDBCResultSet.performDelete(Unknown Source)
    at org.hsqldb.jdbc.JDBCResultSet.deleteRow(Unknown Source)
Caused by: org.hsqldb.HsqlException: attempt to assign to non-updatable column
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    ... 79 more

Notice that this statement works perfectly on real DB2 database but our unit tests which are based on hsqldb not.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1593
HyperSQL Database Engine (HSQLDB) / Bugs / #1593 Duplicative code
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In the source file SchemaManager.java, the removeSchemaObjects method starting at line 2228 contains two identical back-to-back loops. This does not cause buggish behavior, but it is poor code.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1594
HyperSQL Database Engine (HSQLDB) / Bugs / #1594 Sensitive information may be leaked in condlPrint of org.hsqldb.cmdline.SqlFile
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In org.hsqldb.cmdline.SqlFile,
public String streamToString(InputStream is, final String cs)
throws IOException {
while (bytesread < ba.length &&
(retval = is.read(
ba, bytesread, ba.length - bytesread)) > 0) {
bytesread += retval;
} 
}
......
private void condlPrint(final String s, final boolean printHtml) {
if ((printHtml && !htmlMode) || (htmlMode && !printHtml)) return;
    if (shared.psStd != null) shared.psStd.print(s);

    if (pwQuery != null) {
        pwQuery.print(s);
        pwQuery.flush();
    }
}

The sensitive information (String s) may be leaked.
We may be able to add control on it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1595
HyperSQL Database Engine (HSQLDB) / Bugs / #1595 Sensitive information may be leaked in displaySqlResults of org.hsqldb.cmdline.SqlFile
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In org.hsqldb.cmdline.SqlFile,
public String streamToString(InputStream is, final String cs)
throws IOException {
while (bytesread < ba.length &&
(retval = is.read(
ba, bytesread, ba.length - bytesread)) > 0) {
bytesread += retval;
} 
}
......
private void displaySqlResults(Statement statement,
ResultSet r, final int[] incCols, final String filterString,
final boolean updateStatus) throws SQLException, SqlToolError {
......
if (excludeSysSchemas && interactive)
stdprintln(SqltoolRB.vendor_nosup_sysschemas.getString());
......
for (int i = 0; i < headerArray.length; i++) {
dsvSafe(headerArray[i]);
pwDsv.print(headerArray[i]);
        if (i < headerArray.length - 1)
            pwDsv.print(dsvColDelim);
    }
    pwDsv.print(dsvRowDelim);
    ......  
    for (int j = 0; j < fArray.length; j++) {
        if (pwDsv == null) dsvSafe(fArray[j]);
        pwDsv.print((fArray[j] == null)
                    ? (autonulls[j] ? "" : nullRepToken)
                    : fArray[j]);

        if (j < fArray.length - 1) pwDsv.print(dsvColDelim);
    }

    pwDsv.print(dsvRowDelim);

The sensitive information (for headerArray and dsvColDelim) may be leaked.
We may be able to add control on them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1596
HyperSQL Database Engine (HSQLDB) / Bugs / #1596 General error when using TRUNC in GROUP BY
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Running the following script produces a "General error":
DROP TABLE T_TABLE IF EXISTS;

CREATE TABLE T_TABLE (
    ID INT,
    RELEASEDDATETIME DATETIME
 );

INSERT INTO T_TABLE (ID, RELEASEDDATETIME) VALUES (1, TO_DATE('10-10-2020 14.41.21','DD-MM-YYYY HH24.MI.SS'));
INSERT INTO T_TABLE (ID, RELEASEDDATETIME) VALUES (2, TO_DATE('10-10-2020 14.42.21','DD-MM-YYYY HH24.MI.SS'));
INSERT INTO T_TABLE (ID, RELEASEDDATETIME) VALUES (3, TO_DATE('05-10-2020 06.20.45','DD-MM-YYYY HH24.MI.SS'));
INSERT INTO T_TABLE (ID, RELEASEDDATETIME) VALUES (4, TO_DATE('09-09-2020 11.34.48','DD-MM-YYYY HH24.MI.SS'));
INSERT INTO T_TABLE (ID, RELEASEDDATETIME) VALUES (5, TO_DATE('09-09-2020 11.35.48','DD-MM-YYYY HH24.MI.SS'));

SELECT RELEASEDDATETIME, COUNT(1) FROM T_TABLE GROUP BY RELEASEDDATETIME;

-- General error / Error Code: -458 / State: S1000
SELECT TRUNC(RELEASEDDATETIME), COUNT(1) FROM T_TABLE GROUP BY TRUNC(RELEASEDDATETIME);

DROP TABLE T_TABLE IF EXISTS;

It seems a regression in 2.5.1, because with 2.5.0 the script works.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1597
HyperSQL Database Engine (HSQLDB) / Bugs / #1597 Sensitive information may be leaked in write of org.hsqldb.result.Result from org.hsqldb.ParserDDL
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In org.hsqldb.ParserDDL, 
private StatementSchema compileRoleGrantOrRevoke(boolean grant) {
......
while (true) {
checkIsSimpleName();
roleList.add(token.tokenString);
read();
        if (token.tokenType == Tokens.COMMA) {
            read();

            continue;
        }

        break;
    }
......
}

In org.hsqldb.result.Result,
public void write(SessionInterface session, DataOutputStream dataOut,
RowOutputInterface rowOut) throws IOException {
...... 
parameterMetaData.write(rowOut);
......
}
The sensitive information (rowOut) may be leaked.
We may be able to add control on them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1598
HyperSQL Database Engine (HSQLDB) / Bugs / #1598 Sensitive information may be leaked in write of org.hsqldb.result.Result from org.hsqldb.dbinfo.DatabaseInformationFull
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In org.hsqldb.dbinfo.DatabaseInformationFull{
Table TRIGGERS(Session session, PersistentStore store) {
...... 
row[action_order] = ValuePool.getLong(order);
...... 
} 
}
In org.hsqldb.result.Result,
public void write(SessionInterface session, DataOutputStream dataOut,
RowOutputInterface rowOut) throws IOException {
...... 
parameterMetaData.write(rowOut);
......
}
The sensitive information (rowOut) may be leaked.
We may be able to add control on them.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1599
HyperSQL Database Engine (HSQLDB) / Bugs / #1599 Hsqldb should not ignore case of the user name
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
In org.hsqldb.Database, 
synchronized Session connect(String username, String password,
String zoneString, int timeZoneSeconds) {
...... 
if (username.equalsIgnoreCase("SA")) {
username = "SA";
}
...... 
}
Java is case sensitive language. Strings "SA", "Sa", "sA", and "sa" are different. Thus Hsqldb should only have one super user "SA" or "sa".
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1600
HyperSQL Database Engine (HSQLDB) / Bugs / #1600 In displaySqlResults of org.hsqldb.cmdline.SqlFile, logger.warning(...) should be logger.error(...) to record exception
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
package org.hsqldb.cmdline;
public class SqlFile {
private static FrameworkLogger logger =
FrameworkLogger.getLog(SqlFile.class);
......
private void displaySqlResults(Statement statement,
ResultSet r, final int[] incCols, final String filterString,
final boolean updateStatus) throws SQLException, SqlToolError {
try {
...... 
} finally {
if (r != null) try {
r.close();
} catch (SQLException se) {
logger.warning("Failed to close SQL result set: " + se);
} finally {
r = null;
}
if (statement != null) try {
statement.close();
} catch (SQLException se) {
logger.warning("Failed to close SQL statement: " + se);
} finally {
statement = null;
}
}
}
Two statements logger.warning("Failed to close SQL result set: " + se) and logger.warning("Failed to close SQL statement: " + se) should be logger.error("Failed to close SQL result set: " + se) and logger.error("Failed to close SQL statement: " + se), respectively.
The reason is that they record exception messages.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1601
HyperSQL Database Engine (HSQLDB) / Bugs / #1601 Sensitive messages (URL and username) may leak in getConnection of org.hsqldb.lib.RCData when throwing MalformedURLException
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
package org.hsqldb.lib;
public class RCData {
public Connection getConnection(String curDriverIn, String curTrustStoreIn)
throws ClassNotFoundException,
MalformedURLException,
SQLException {
    ......
    try {
        urlString = expandSysPropVars(url);
    } catch (IllegalArgumentException iae) {
        throw new MalformedURLException(iae.toString() + " for URL '"
                                        + url + "'");
    }
    String userString = null;
    if (username != null) try {
        userString = expandSysPropVars(username);
    } catch (IllegalArgumentException iae) {
        throw new MalformedURLException(iae.toString()
                                        + " for user name '" + username
                                        + "'");
    }
    ...
}

}
Sensitive messages (URL and username) are outputted directly and may leak when throwing MalformedURLException.
logger.error(...) may be better than 'throw new MalformedURLException(...)'.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1602
HyperSQL Database Engine (HSQLDB) / Bugs / #1602 HSQL files growing since update to 2.5.1
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello,
since I updated my Software to HSQL Version 2.5.1 from Verion 2.5.0, all Database files grow in an unexpected way. Most db sizes grow from 1Gb to over 14Gb, since the update to 2.5.1, without having significant more data stored.
Most records in this databases get regulary updated by the System.
I am using HSQL in embedded mode. 
Is this a Bug or do I have to change db setting that we used in 2.5.0 for 2.5.1 to get rid of this behaviour?
Best regards
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1603
HyperSQL Database Engine (HSQLDB) / Bugs / #1603 Queries aborted with timeout long before timeout is reached
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm seeing occasional queries aborted with timeout long before timeout is reached.
Symptoms sound very similar to https://sourceforge.net/p/hsqldb/discussion/73674/thread/1441bdff47/ which was marked as fixed already.
I'm using Hsqldb via Hibernate using c3p0 for connection pooling. 
I'm looking at a log file where the query could have started no more than 3 milliseconds prior to the "timeout reached" message, when the query should have a timeout on the order of 10s of seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1604
HyperSQL Database Engine (HSQLDB) / Bugs / #1604 Session.java: unused variable sessionTxId
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Looks like Session sessionTxId is totally not used?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1605
HyperSQL Database Engine (HSQLDB) / Bugs / #1605 Session sessionStartTimestamp is assigned but never accessed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Session.java sessionStartTimestamp has value assigned which seems to never be accessed
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1606
HyperSQL Database Engine (HSQLDB) / Bugs / #1606 CREATE TABLE IF NOT EXISTS combined with WITH DATA not working
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I tried to create a table with some data, if this table doesn't already exists.
CREATE TABLE IF NOT EXISTS dummy_table (x, y) AS (VALUES (1, 2)) WITH DATA;
SELECT * FROM dummy_table;

This works as expected.
However, if I try to repeat the same statement, an expection is thrown.
CREATE TABLE IF NOT EXISTS dummy_table (x, y) AS (VALUES (1, 2)) WITH DATA;
CREATE TABLE IF NOT EXISTS dummy_table (x, y) AS (VALUES (3, 4)) WITH DATA;

java.sql.SQLSyntaxErrorException: object name already exists: DUMMY_TABLE in statement [CREATE TABLE IF NOT EXISTS dummy_table (x, y) AS (VALUES (3, 4)) WITH DATA]

    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at org.example.HsqlTest.dummy(HsqlTest.java:32)
Caused by: org.hsqldb.HsqlException: object name already exists: DUMMY_TABLE
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.SchemaObjectSet.checkAdd(Unknown Source)
    at org.hsqldb.SchemaManager.checkSchemaObjectNotExists(Unknown Source)
    at org.hsqldb.StatementSchema.setOrCheckObjectName(Unknown Source)
    at org.hsqldb.StatementSchema.getResult(Unknown Source)
    at org.hsqldb.StatementSchema.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 25 more

Tested with: v2.5.1
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1607
HyperSQL Database Engine (HSQLDB) / Bugs / #1607 General error if GROUP BY using an alias for a function result
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi,
I'm using the HSQLDB version 2.5.1 as a standalone server instance (later I will switch to the file-based instance).
Like the bug #1596 reported by Stefano Ravera, but more generally, I'm unable to group-by a result of a function call, e.g. 
SELECT
    substr(name, locate(' ', name)) AS fname,
    count(1) "#",
    floor(age),
    avg(age)
FROM
    test_person
GROUP BY
    fname;

will result in a 

General error

SELECT
    substr(name, locate(' ', name)),
    count(1) "#",
    floor(age),
    avg(age)
FROM
    test_person
GROUP BY
    1;

will result in a 

expression not in aggregate or GROUP BY columns: SUBSTRING(PUBLIC.TEST_PERSON.NAME FROM LOCATE(' ',PUBLIC.TEST_PERSON.NAME))

1 Attachments


hsqldb_group_by_bug.sql
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1608
HyperSQL Database Engine (HSQLDB) / Bugs / #1608 General error thrown while running SELECT query with group by time period
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
The following query worked for us with hsqldb version 2.3.1 and even 2.5.0. But starting from 2.5.1 version it fails:
SELECT AVG(VALUE) AS VALUE,TIMESTAMP(UNIX_TIMESTAMP(TIME) - mod(UNIX_TIMESTAMP(TIME), 60) ) AS TIME FROM ( SELECT PID, HOST, TIME, VALUE FROM PROCESS_CPU_USED_PERCENT WHERE TIME < now() AND PU_NAME!='' AND PU_INSTANCE_ID!='' GROUP BY PID, HOST, TIME, VALUE ) GROUP BY TIMESTAMP(UNIX_TIMESTAMP(TIME) - mod ( UNIX_TIMESTAMP(TIME), 60))
In code it fails due to org.hsqldb.HsqlException: General error
In HSQL Database Manager client I see :
General error / Error Code: -458 / State: S1000
I simplified query and figured out that following query stopped to work starting from 2.5.1 version due to the same error:
SELECT AVG(VALUE) AS VALUE FROM PROCESS_CPU_USED_PERCENT GROUP BY TIMESTAMP(UNIX_TIMESTAMP(TIME) - mod ( UNIX_TIMESTAMP(TIME), 60))
I'm attaching screenshot of error and table description.
Thank you
1 Attachments





Screenshot from 2021-01-17 14-09-57.png
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1609
HyperSQL Database Engine (HSQLDB) / Bugs / #1609 CREATE PROCEDURE should not allow duplicate parameter names
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I was trying to test something related to procedures and made a copy paste mistake, where I accidentally re-declared the same parameter names:
create procedure p(
  "i1" int,
  inout "o1" int,
  out "o1" int,
  "i2" int,
  inout "o2" int,
  out "o2" int
)
contains sql
begin atomic
  set "o1" = "o1";
  set "o1" = "i1";
  set "o2" = "o2";
  set "o2" = "i2";
end;

What I meant to do is this:
create procedure p(
  "i1" int,
  inout "io1" int,
  out "o1" int,
  "i2" int,
  inout "io2" int,
  out "o2" int
)
contains sql
begin atomic
  set "o1" = "io1";
  set "io1" = "i1";
  set "o2" = "io2";
  set "io2" = "i2";
end;

HSQLDB didn't complain about the non-sensical creation, but instead told me this:
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.RoutineSchema.getSpecificRoutine(Unknown Source)
    at org.hsqldb.ParserDML.compileProcedureCall(Unknown Source)
    at org.hsqldb.ParserDML.compileCallStatement(Unknown Source)
    at org.hsqldb.ParserCommand.compilePart(Unknown Source)
    at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
    at org.hsqldb.Session.compileStatement(Unknown Source)
    at org.hsqldb.StatementManager.compile(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 50 more

The reason being that the procedure was created as if I hadn't declared the OUT parameters:
 create procedure p(
  "i1" int,
  inout "o1" int,
  "i2" int,
  inout "o2" int
)
contains sql
begin atomic
  set "o1" = "o1";
  set "o1" = "i1";
  set "o2" = "o2";
  set "o2" = "i2";
end;

See also:
SELECT parameter_name, parameter_mode 
FROM INFORMATION_SCHEMA.parameters
WHERE specific_name like 'P_51545'

Resulting in:
i1  IN
o1  INOUT
i2  IN
o2  INOUT

I think the parser should reject duplicate parameter names.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1610
HyperSQL Database Engine (HSQLDB) / Bugs / #1610 Variables declared in nested blocks in routines don't work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider this table:
create table "t" (
  "a" int
);

Now create this procedure:
create procedure "proc"()
modifies sql data
begin atomic
  declare "i" int default 0;
  while "i" <= 1 do
    begin atomic
      declare "j" int default 1;
      while "j" <= 5 do
        insert into "t" ("a")
        values ((("i" * 5) + "j"));
        set "j" = ("j" + 1);
      end while;
    end;
    set "i" = ("i" + 1);
  end while;
end;

And call it as such:
call "proc"();

I would expect t to contain 10 records from 1-10, but it is empty:
select * from "t";

Trying it a bit differently, avoiding the DEFAULT clause:
create procedure "proc"()
modifies sql data
begin atomic
  declare "i" int;
  set "i" = 0;
  while "i" <= 1 do
    begin atomic
      declare "j" int;
      set "j" = 1;
      while "j" <= 5 do
        insert into "t" ("a")
        values ((("i" * 5) + "j"));
        set "j" = ("j" + 1);
      end while;
    end;
    set "i" = ("i" + 1);
  end while;
end;

Now, this inserts 5 NULL values!
This seems to work correctly, when I completely avoid declaring variables in nested scopes:
create procedure "proc"()
modifies sql data
begin atomic
  declare "i" int;
  declare "j" int;
  set "i" = 0;
  while "i" <= 1 do
    set "j" = 1;
    while "j" <= 5 do
      insert into "t" ("a")
      values ((("i" * 5) + "j"));
      set "j" = ("j" + 1);
    end while;
    set "i" = ("i" + 1);
  end while;
end
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1611
HyperSQL Database Engine (HSQLDB) / Bugs / #1611 Functions returning a table are returned with DatabaseMetaData.functionNoTable instead of functionReturnsTable
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
For a function declared as RETURNS TABLE(...) DatabaseMetaData.getFunctions() returns the value "functionNoTable" in the column FUNCTION_TYPE of the ResultSet. As such a function does return a table I think the value "functionReturnsTable" would be correct
Tested with HyperSQL 2.5.1 and OpenJDK 11
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1612
HyperSQL Database Engine (HSQLDB) / Bugs / #1612 TEXT TABLE connection gets lost
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I use a csv.file for importing data. The text table is attached by
SET TABLE kto_auszug SOURCE "umsatz.CSV;fs=\semi;ignore_first=true" DESC
The data base is embedded in LibreOffice Base.
When it happens that in a session the csv-file doesn't exist the connection is lost in following sessions, also if a new csv-file with the given name exists.
The only way is to make a new connection.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1613
HyperSQL Database Engine (HSQLDB) / Bugs / #1613 General error when using FILTER (WHERE FALSE) on an aggregate function
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following query produces a "General error" in HSQLDB 2.5.1:
SELECT count(*) FILTER (WHERE FALSE)
FROM (VALUES(1)) AS t (a)

This works:
SELECT count(*) FILTER (WHERE NOT TRUE)
FROM (VALUES(1)) AS t (a)

And so does this:
SELECT count(*) FILTER (WHERE 1 = 0)
FROM (VALUES(1)) AS t (a)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1614
HyperSQL Database Engine (HSQLDB) / Bugs / #1614 Regression in regexp_replace
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I'm trying out HSQLDB 2.6.0, the Thu, 04 Mar 2021 22:14:17 GMT from here:
http://hsqldb.org/download/hsqldb_260_jdk11_rc/
This no longer works:
try (PreparedStatement s = connection.prepareStatement("select regexp_replace('a', 'a', '0') from (values (1)) t")) {
    try (ResultSet rs = s.executeQuery()) {
        while (rs.next())
            System.out.println(rs.getString(1));
    }
}

It causes a general error:
~~~
Exception in thread "main" java.sql.SQLException: General error
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeQuery(Unknown Source)
at org.jooq.testscripts.JDBC.main(JDBC.java:19)
Caused by: org.hsqldb.HsqlException: General error
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.error.Error.error(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.result.Result.newErrorResult(Unknown Source)
at org.hsqldb.StatementDMQL.execute(Unknown Source)
at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at org.hsqldb.Session.execute(Unknown Source)
... 3 more
~~~
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1615
HyperSQL Database Engine (HSQLDB) / Bugs / #1615 HSQL 2.6.0 Release Candidate SCRIPT Error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Fred:
While using my HSQLDB Version 2.5.1 and using the 2.6.0 Release Candidate ( RC ) JAR Version 3 ( as well as prior RC candidates ), when starting the database, the following error(s) result:
2021-03-11T06:17:18.885-0800  WARNING  Script processing failure
java.lang.NullPointerException
        at org.hsqldb.lib.HashSet.add(Unknown Source)
        at org.hsqldb.ParserDQL$CompileContext.getRoutines(Unknown Source)
        at org.hsqldb.StatementDMQL.setDatabaseObjects(Unknown Source)
        at org.hsqldb.StatementQuery.<init>(Unknown Source)
        at org.hsqldb.ParserDDL.compileCreateView(Unknown Source)
        at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
        at org.hsqldb.ParserCommand.compilePart(Unknown Source)
        at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
        at org.hsqldb.Session.compileStatement(Unknown Source)
        at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
        at org.hsqldb.scriptio.ScriptReaderText.readAll(Unknown Source)
        at org.hsqldb.persist.Log.processScript(Unknown Source)
        at org.hsqldb.persist.Log.open(Unknown Source)
        at org.hsqldb.persist.Logger.open(Unknown Source)
        at org.hsqldb.Database.reopen(Unknown Source)
        at org.hsqldb.Database.open(Unknown Source)
        at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
        at org.hsqldb.DatabaseManager.newSession(Unknown Source)
        at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
        at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:677)
        at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:228)
        at org.hsqldb.util.ConnectionDialogSwing.createConnection(Unknown Source)
        at org.hsqldb.util.DatabaseManagerSwing.main(Unknown Source)

2021-03-11T06:17:19.010-0800  SEVERE  could not reopen database
org.hsqldb.HsqlException: java.lang.NullPointerException
        at org.hsqldb.error.Error.error(Unknown Source)
        at org.hsqldb.persist.Log.processScript(Unknown Source)
        at org.hsqldb.persist.Log.open(Unknown Source)
        at org.hsqldb.persist.Logger.open(Unknown Source)
        at org.hsqldb.Database.reopen(Unknown Source)
        at org.hsqldb.Database.open(Unknown Source)
        at org.hsqldb.DatabaseManager.getDatabase(Unknown Source)
        at org.hsqldb.DatabaseManager.newSession(Unknown Source)
        at org.hsqldb.jdbc.JDBCConnection.<init>(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.getConnection(Unknown Source)
        at org.hsqldb.jdbc.JDBCDriver.connect(Unknown Source)
        at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:677)
        at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:228)
        at org.hsqldb.util.ConnectionDialogSwing.createConnection(Unknown Source)
        at org.hsqldb.util.DatabaseManagerSwing.main(Unknown Source)
Caused by: java.lang.NullPointerException
        at org.hsqldb.lib.HashSet.add(Unknown Source)
        at org.hsqldb.ParserDQL$CompileContext.getRoutines(Unknown Source)
        at org.hsqldb.StatementDMQL.setDatabaseObjects(Unknown Source)
        at org.hsqldb.StatementQuery.<init>(Unknown Source)
        at org.hsqldb.ParserDDL.compileCreateView(Unknown Source)
        at org.hsqldb.ParserDDL.compileCreate(Unknown Source)
        at org.hsqldb.ParserCommand.compilePart(Unknown Source)
        at org.hsqldb.ParserCommand.compileStatement(Unknown Source)
        at org.hsqldb.Session.compileStatement(Unknown Source)
        at org.hsqldb.scriptio.ScriptReaderText.readDDL(Unknown Source)
        at org.hsqldb.scriptio.ScriptReaderText.readAll(Unknown Source)
        ... 14 more

I ultimately created a Version 2.6.0 database, starting from scratch, issuing commands to CREATE CACHED TABLES, CREATE FUNCTION, etc, and, INSERT data . . . I was able to create HSQL Version 2.6.0.
I mention the able because the issue is NOT my connection to the JAR or JAVA Version, but rather something in the SCRIPT file. I would be happy to email the database ( a working HSQL 2.5.1 backup file ) to you if you want to investigate it, so, hopefully others will not have a similar issue.
Sliderule
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1616
HyperSQL Database Engine (HSQLDB) / Bugs / #1616 Wrong line number displayed with parser error messages
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Consider this wrong statement:
connection.createStatement().executeQuery("SELECT (WITH\n)");

It produces this misleading error:
Caused by: org.hsqldb.HsqlException: unexpected token: WITH : line: 3

1) There is no line 3
2) The token WITH is on line 1
I've run into similar bad line counts in more complex queries, making the error message very confusing.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1617
HyperSQL Database Engine (HSQLDB) / Bugs / #1617 CTE cannot be used in some scalar subqueries
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
There are some scalar subqueries that cannot use WITH, others can. Here it doesn't work:
SELECT (
  WITH t(a) AS (
    SELECT 1
    FROM (VALUES(1))
  )
  SELECT a FROM t
)
FROM (VALUES (1));

SELECT 1 = (
  WITH t(a) AS (
    SELECT 1
    FROM (VALUES(1))
  )
  SELECT a FROM t
)
FROM (VALUES (1));

SELECT 1 IS NOT DISTINCT FROM (
  WITH t(a) AS (
    SELECT 1
    FROM (VALUES(1))
  )
  SELECT a FROM t
)
FROM (VALUES (1));

Here it works:
SELECT 1 IN (
  WITH t(a) AS (
    SELECT 1
    FROM (VALUES(1))
  )
  SELECT a FROM t
)
FROM (VALUES (1));

Derived tables also work, as a generic workaround:
SELECT (SELECT * FROM (
  WITH t(a) AS (
    SELECT 1
    FROM (VALUES(1))
  )
  SELECT a FROM t
))
FROM (VALUES (1));

Given that the distinction seems arbitrary (especially in the 1 IN (WITH ...) vs 1 = (WITH ...) case, this might just be a parser bug? If it's by design, then consider this to be a feature request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1618
HyperSQL Database Engine (HSQLDB) / Bugs / #1618 UNION ALL or UNION With LIMIT Integer Error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Fred:
Just as an FYI, the issue described here, has been present within HSQL for a long time ( prior versions ), but, perhaps never reported. It is present with HSQL 2.6.0 Beta ( RC6 ) as well.
When using UNION ALL or UNION, when a Select ends with LIMIT INTEGER , for example LIMIT 5 , an error is returned ( Error Code: -5581 / State: 42581 ), however, the statement can be surrounded by parentheses and it will work, OR, use of TOP, for example ( TOP 5 ), parentheses are not required.
For example:
Select 
   INFORMATION_SCHEMA.SYSTEM_TYPEINFO.TYPE_NAME, 
   INFORMATION_SCHEMA.SYSTEM_TYPEINFO.DATA_TYPE 
From INFORMATION_SCHEMA.SYSTEM_TYPEINFO

   UNION ALL 

-- BELOW DOES NOT WORK, Error: unexpected token: UNION : line: 17 / Error Code: -5581 / State: 42581
Select NULL, NULL From INFORMATION_SCHEMA.SYSTEM_TABLES LIMIT 5

-- BELOW DOES WORK, NOTE: parentheses around Select statement, since ends with LIMIT 5 or OFFSET
-- (Select NULL, NULL From INFORMATION_SCHEMA.SYSTEM_TABLES LIMIT 5)  

-- BELOW DOES WORK, NOTE: using TOP 5 rather than LIMIT 5 at end
-- Select TOP 5 NULL, NULL From INFORMATION_SCHEMA.SYSTEM_TABLES

   UNION ALL

Select 
   INFORMATION_SCHEMA.SYSTEM_TABLESTATS.TABLE_NAME,
   INFORMATION_SCHEMA.SYSTEM_TABLESTATS.CARDINALITY as "NUM_RECORDS"
From INFORMATION_SCHEMA.SYSTEM_TABLESTATS
Where INFORMATION_SCHEMA.SYSTEM_TABLESTATS.TABLE_SCHEMA = CURRENT_SCHEMA

I am providing the above example ( not realistic ) so you have an example to work with, after the first UNION ALL.
Sliderule
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1619
HyperSQL Database Engine (HSQLDB) / Bugs / #1619 General error when fetching two empty arrays
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Try this in a SQL editor like DBeaver:
select array[] as "a", array[] as "b" from (values(1)) as t

It fails with
org.jkiss.dbeaver.model.sql.DBSQLException: SQL Error [S1000]: General error
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:133)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeStatement(SQLQueryJob.java:509)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.lambda$0(SQLQueryJob.java:440)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:168)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.executeSingleQuery(SQLQueryJob.java:427)
    at org.jkiss.dbeaver.ui.editors.sql.execute.SQLQueryJob.extractData(SQLQueryJob.java:812)
    at org.jkiss.dbeaver.ui.editors.sql.SQLEditor$QueryResultsContainer.readData(SQLEditor.java:3226)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.lambda$0(ResultSetJobDataRead.java:118)
    at org.jkiss.dbeaver.model.exec.DBExecUtils.tryExecuteRecover(DBExecUtils.java:168)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetJobDataRead.run(ResultSetJobDataRead.java:116)
    at org.jkiss.dbeaver.ui.controls.resultset.ResultSetViewer$ResultSetDataPumpJob.run(ResultSetViewer.java:4516)
    at org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)
    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.sql.SQLException: General error
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
    at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.execute(JDBCStatementImpl.java:327)
    at org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCStatementImpl.executeStatement(JDBCStatementImpl.java:130)
    ... 12 more
Caused by: org.hsqldb.HsqlException: General error
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.result.Result.newErrorResult(Unknown Source)
    at org.hsqldb.Session.executeDirectStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 16 more

All of these work:
select array['a'] as "a", array[] as "b" from (values(1)) as t
select array[] as "a", array['a'] as "b" from (values(1)) as t
select a as "a", a as "b" from (values(array[])) as t (a)

The error seems to appear only when there are two empty arrays
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1620
HyperSQL Database Engine (HSQLDB) / Bugs / #1620 Cannot fetch a constant NULL array without explicit cast
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This works:
try (ResultSet rs = connection.createStatement().executeQuery("SELECT cast(null as varchar(10) array), array['a'] FROM (VALUES (1))")) {
    while (rs.next()) {
        System.out.println(rs.getArray(1));
        System.out.println(rs.getArray(2));
    }
}

Producing:
null
ARRAY['a']

But this doesn't work
try (ResultSet rs = connection.createStatement().executeQuery("SELECT null, array['a'] FROM (VALUES (1))")) {
    while (rs.next()) {
        System.out.println(rs.getArray(1));
        System.out.println(rs.getArray(2));
    }
}

Throwing this error:
Exception in thread "main" java.sql.SQLSyntaxErrorException: incompatible data type in conversion
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
    at org.hsqldb.jdbc.JDBCResultSet.getArray(Unknown Source)
    at org.jooq.testscripts.JDBC.main(JDBC.java:43)
Caused by: org.hsqldb.HsqlException: incompatible data type in conversion
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    ... 3 more

The reason seems to be that HSQLDB assumes the type of NULL is VARCHAR, which cannot be converted to an array. But given that I haven't explicitly set the type to VARCHAR, I suspect that it might be possible to delay such a typing decision? I shouldn't have to cast this array, I think...
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1621
HyperSQL Database Engine (HSQLDB) / Bugs / #1621 jdbcDriver 2.6.0  is unusable in JRE8
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
https://repo.maven.apache.org/maven2/org/hsqldb/hsqldb/2.6.0/ is unusable in JRE 8 environment
java.lang.UnsupportedClassVersionError: org/hsqldb/jdbcDriver has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
I see no artifact with classifier jdk8 or new artifactId with jdk8 suffix.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1622
HyperSQL Database Engine (HSQLDB) / Bugs / #1622 JDBC meta on READ_ONLY role returns empty
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I am getting some failing tests since upgrading to 2.6.0
The test is to test a READ_ONLY role in HSQLDB.
CREATE USER "sqlgReadOnly" PASSWORD 'sqlgReadOnly';
CREATE ROLE "READ_ONLY";
GRANT READ_ONLY TO "sqlgReadOnly";

as normal user
CREATE TABLE "PUBLIC"."V_A" ("ID" BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    "name" LONGVARCHAR);
GRANT SELECT ON TABLE "PUBLIC"."V_A" TO READ_ONLY;
INSERT INTO "PUBLIC"."V_A" ("name") VALUES (?);

As the 'sqlgReadOnly' user
ResultSet schemaRs = metadata.getSchemas(null, "PUBLIC");
boolean result = schemaRs.next();
return result;

In 2.5.1 result is true, indicating that the "PUBLIC" schema exist.
In 2.6.0 result is false, which in turn causes the code to try create the schema that then fails as the role is READ_ONLY. However the 'PUBLIC' schema does exist.
Not really sure if the bug is in the JDBC driver or not. Using Intellij's database tool I can browse the 'PUBLIC' schema using the 'sqlgReadOnly' user. Trying to make any change fails as its READ_ONLY.
Thanks
Pieter
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1623
HyperSQL Database Engine (HSQLDB) / Bugs / #1623 Odd behavior for nvl2 in 2.5.2
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hello, I just tried upgrading from 2.4.0 to 2.5.2 and noticed a change in behavior for the nvl2 function that was quite unexpected:
select nvl2(null, 'A', 'BC') from (values(0))
2.4.0 result = BC
2.5.2 result = B
select nvl2(null, 'AB', 'C') from (values(0))
2.4.0 result = C
2.5.2 result = C
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1624
HyperSQL Database Engine (HSQLDB) / Bugs / #1624 Insert statement for BLOBs broken.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Insert statement for BLOBs broken.
I have upgraded from 2.5 to 2.6 and now insert statements are broken.
CREATE TABLE IWA_TaskData
(
  TaskId BIGINT NOT NULL REFERENCES IWA_Task(TaskId) ON DELETE CASCADE,
  TaskData BLOB NOT NULL,
  PRIMARY KEY (TaskId)
);

INSERT INTO IWA_TaskData VALUES
(
    1, #TaskId 
    '00' #TaskData
);

The insert will now end up in this: 

Error 'incompatible data type in conversion' while executing statement 'INSERT INTO IWA_TaskData VALUES (1, '00' )'
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1625
HyperSQL Database Engine (HSQLDB) / Bugs / #1625 Validating a Hibernate Schema causes a org.hsqldb.HsqlException: General error
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
A Spring Boot application that sets the property spring.jpa.hibernate.ddl-auto=validate will run the following SQL on startup (note - I have created tables within the schema "WEBSITE"):
SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TYPEINFO
CALL CURRENT_SCHEMA
CALL CURRENT_SCHEMA
select * from information_schema.sequences
SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TYPEINFO
select * from information_schema.sequences
SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TABLES WHERE TRUE AND TABLE_SCHEM = 'WEBSITE' AND TABLE_NAME LIKE '%' AND TABLE_TYPE IN ('TABLE','VIEW')
SELECT * FROM INFORMATION_SCHEMA.SYSTEM_COLUMNS WHERE TRUE AND TABLE_SCHEM = 'WEBSITE' AND COLUMN_NAME LIKE '%'

Versions 2.6.0 and 2.5.2 throw an exception on the last line of the above SQL.
o.h.e.j.s.SqlExceptionHelper : SQL Error: -458, SQLState: S1000
o.h.e.j.s.SqlExceptionHelper : General error
Caused by: org.hsqldb.HsqlException: General error
    at org.hsqldb.error.Error.error(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.error.Error.error(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.result.Result.newErrorResult(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.result.Result.newErrorResult(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.StatementDMQL.execute(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.Session.executeDirectStatement(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.Session.execute(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:2067) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.jdbc.JDBCStatement.executeQuery(JDBCStatement.java:145) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.jdbc.JDBCDatabaseMetaData.execute(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at org.hsqldb.jdbc.JDBCDatabaseMetaData.getColumns(Unknown Source) ~[hsqldb-2.6.0.jar:private-2021/05/06-20:51:03]
    at com.zaxxer.hikari.pool.ProxyDatabaseMetaData.getColumns(ProxyDatabaseMetaData.java:109) ~[HikariCP-3.4.5.jar:?]
    at com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData.getColumns(HikariProxyDatabaseMetaData.java) ~[HikariCP-3.4.5.jar:?]
    at org.hibernate.tool.schema.extract.internal.InformationExtractorJdbcDatabaseMetaDataImpl.populateTablesWithColumns(InformationExtractorJdbcDatabaseMetaDataImpl.java:354) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.tool.schema.extract.internal.InformationExtractorJdbcDatabaseMetaDataImpl.getTables(InformationExtractorJdbcDatabaseMetaDataImpl.java:341) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.tool.schema.extract.internal.DatabaseInformationImpl.getTablesInformation(DatabaseInformationImpl.java:120) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.tool.schema.internal.GroupedSchemaValidatorImpl.validateTables(GroupedSchemaValidatorImpl.java:39) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.tool.schema.internal.AbstractSchemaValidator.performValidation(AbstractSchemaValidator.java:89) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.tool.schema.internal.AbstractSchemaValidator.doValidation(AbstractSchemaValidator.java:68) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:192) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:73) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:318) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:468) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1259) ~[hibernate-core-5.4.30.Final.jar:5.4.30.Final]
    at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58) ~[spring-orm-5.3.6.jar:5.3.6]
    at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365) ~[spring-orm-5.3.6.jar:5.3.6]
    at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409) ~[spring-orm-5.3.6.jar:5.3.6]
    at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396) ~[spring-orm-5.3.6.jar:5.3.6]
    at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341) ~[spring-orm-5.3.6.jar:5.3.6]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845) ~[spring-beans-5.3.6.jar:5.3.6]
    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782) ~[spring-beans-5.3.6.jar:5.3.6]
    ... 22 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1626
HyperSQL Database Engine (HSQLDB) / Bugs / #1626 2.6.0 often get Timeouts during selects
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With HSQDB 2.6.0 we often get 
java.sql.SQLTransactionRollbackException: statement execution aborted: timeout reached 
Exceptions for normal select statements. The Timeout seems to come after only 2 Seconds.
Possible the 2.6.0 driver does not use the set timeout value?
When we rollback to 2.5.1 this Timeouts do not happen.
We are using the HSQLDb in Embedded Mode.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1627
HyperSQL Database Engine (HSQLDB) / Bugs / #1627 Constraint violation exception somtimes in mvcc mode 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I have some transactional problem when set hsqldb.tx to mvcc. I can not reproduce it all the time but sometimes it occurs.
Scenario
I have two tables A and B.
B has a foreign key to A with column X.

INSERT INTO A
INSERT INTO B and set column X with an existing key of table A.
UPDATE multiple times B (other columns). And sometimes it fails then with "constraint violation exception" that the foreign key is invalid.

This all happens really fast ("under high pressure). Sometimes it works. Sometimes not.
Does anyone has any clue about this?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1628
HyperSQL Database Engine (HSQLDB) / Bugs / #1628 numeric value out of range error on basic arithmetic
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
I get a data exception: numeric value out of range error (SQL Error: -3403, SQLState: 22003) with a very simple SQL queries:
This fails:
em.createQuery("SELECT :concurrency * 1.0 FROM MyTable").setParameter("concurrency", 100d).getResultList();
select ?*1.0 as col_0_0_ from my_table
This fails:
em.createQuery("SELECT :concurrency + 0.0 FROM MyTable").setParameter("concurrency", 100d).getResultList();
select ?+0.0 as col_0_0_ from my_table
This works
em.createQuery("SELECT :concurrency * 1.0 FROM MyTable").setParameter("concurrency", 10d).getResultList();
This works
em.createQuery("SELECT 100.0 * 1.0 FROM MyTable").getResultList();
When it fails, the stack is:
Caused by: org.hsqldb.HsqlException: data exception: numeric value out of range
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.error.Error.error(Unknown Source)
    at org.hsqldb.types.NumberType.convertToTypeLimits(Unknown Source)
    at org.hsqldb.types.NumberType.multiply(Unknown Source)
    at org.hsqldb.ExpressionArithmetic.getValue(Unknown Source)
    at org.hsqldb.QuerySpecification.buildResult(Unknown Source)
    at org.hsqldb.QuerySpecification.getSingleResult(Unknown Source)
    at org.hsqldb.QuerySpecification.getResult(Unknown Source)
    at org.hsqldb.StatementQuery.getResult(Unknown Source)
    at org.hsqldb.StatementDMQL.execute(Unknown Source)
    at org.hsqldb.Session.executeCompiledStatement(Unknown Source)
    at org.hsqldb.Session.execute(Unknown Source)
    ... 89 more

Version used: 2.6.0
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1629
HyperSQL Database Engine (HSQLDB) / Bugs / #1629 like expression does not allow addition expression as its right expression
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
This query does not parse:
select * from information_schema.domains where domain_catalog like '%' + 'PUBLIC' + '%'
addition expression should have a higher precedence than like, so Hsql should evaluate '%' + 'PUBLIC' + '%' first then apply it to like expression.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1630
HyperSQL Database Engine (HSQLDB) / Bugs / #1630 Release 2.6.0 is missing OSGi metadata
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The release 2.6.0 is missing the OSGi metadata in the manifest. Both 2.5.1 and 2.5.2 are still properly including it (see META-INF/MANIFEST.MF).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1631
HyperSQL Database Engine (HSQLDB) / Bugs / #1631 null value causes NPE in JDBCResultSet.getObject
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
JDBCResultSet.getObject(int columnIndex, Class<t> type) causes a NPE if the value in DB is NULL.
Worked on 2.4.1
Broken on 2.5.2, 2.6.0</t>
Test to reproduce:
package hsqldb.bugs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;

import org.junit.jupiter.api.Test;

class NpeGetObjectTest
{
    @Test
    void getObjectShouldNotThrowNPE()
        throws Exception
    {
        try (final Connection connection = DriverManager.getConnection( "jdbc:hsqldb:mem:testdb", "sa", "" );
                final Statement statement = connection.createStatement();)
        {
            statement.execute( "CREATE TABLE test (id INT, value_date DATE)" );
            statement.executeUpdate( "INSERT INTO test VALUES (1, '2021-06-09')" );
            statement.executeUpdate( "INSERT INTO test VALUES (2, NULL)" );
            try (ResultSet resultSet = statement.executeQuery( "SELECT * FROM test" ))
            {
                while( resultSet.next() )
                {
                    System.out.println( resultSet.getLong( 1 ) + ": " + resultSet.getObject( 2, LocalDate.class ) );
                }
            }
        }
    }
}

Expected output is (as on <= 2.4.1):
1: 2021-06-09
2: null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1632
HyperSQL Database Engine (HSQLDB) / Bugs / #1632 Spurious unique index constraint violation on inserts
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When inserting rows into the following table:
create table crumbles
  (
    resource_name varchar(64) not null,
    idx int not null,
    parent int,
    level int not null,
    model varbinary(64k) not null,

    constraint pk_crumbles primary key (resource_name, idx)
  );

using READ_COMMITTED / MVCC mode, and multiple threads to do inserting, spurious SQLIntegrityConstraintViolations are thrown (and also, mysteriously, all my stderr output seems to get consumed, don't know why but it's made debugging this very tricky)
Having checked to ensure that there is in fact no violation of the constraint actually occurring, I wondered whether it might be that the unique index itself is failing because the resource_name field contents are "too big".
Sure enough, using much shorter resource_names makes the problem go away.
Spent all day tracking this one down :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1633
HyperSQL Database Engine (HSQLDB) / Bugs / #1633 timeout reached HsqlException thrown when using setQueryTimeout
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi
Starting from version 2.5.2 we are trying to use method setQueryTimeout for PreparedStatement, timeout value provided in seconds, I tried to pass 15, 40 or even 60. But anyway I get following exception:
org.hsqldb.HsqlException: statement execution aborted: timeout reached
If query timeout not defined then any exception is not thrown. When I measure how much time such queries take I get maximum 100-110 msec, so always less than 1 second. I tried also to provide large number of seconds as a timeout, so in the case of 500 seconds exceptions were not thrown. Stack trace of exceptions and queries are attached.
It seems me that seconds are considering as a msec.
Thank you,
Evgeny
1 Attachments


timeout_exception.txt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1634
HyperSQL Database Engine (HSQLDB) / Bugs / #1634 org.hsqldb.HsqlException: statement is invalid thrown while deleting table rows using prepared statement
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following exception happens after upgrading from 2.3.2 to 2.5.2 ( full stack trace is attached ) while deleting data from tables, probably happens when there are thousands of rows that must be deleted:
org.hsqldb.HsqlException: statement is invalid
We are reusing PreparedStatement instances, but there is no access to the same instance at the same time, regression is after upgrading to 2.5.2.
Thank you
1 Attachments


invalid-statement-exception.txt
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1635
HyperSQL Database Engine (HSQLDB) / Bugs / #1635 NoSuchMethodException (invokeCleaner) on Android
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We're using HSQL on embedded Android tablets running Android 4.2 (API level 17) and Android 8.0 (API level 26). After upgrading to 2.6.x I noticed the following error in our logs when we perform a CHECKPOINT DEFRAG command:

07-15 10:20:51.787 32675 1448 W System.err: 2021-07-15T10:20:51.783+0200 WARNING NIO buffer unmap exception
07-15 10:20:51.787 32675 1448 W System.err: java.lang.NoSuchMethodException: invokeCleaner [class java.nio.ByteBuffer]
07-15 10:20:51.788 32675 1448 W System.err: at java.lang.Class.getMethod(Class.java:2068)
07-15 10:20:51.788 32675 1448 W System.err: at java.lang.Class.getMethod(Class.java:1690)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.lib.java.JavaSystem.unmap(Unknown Source:39)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.persist.RAFileNIO.close(Unknown Source:42)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.persist.RAFileHybrid.close(Unknown Source:2)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.persist.DataFileCache.close(Unknown Source:20)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.persist.Log.defrag(Unknown Source:85)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.persist.Log.checkpoint(Unknown Source:20)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.persist.Logger.checkpointInternal(Unknown Source:11)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.persist.Logger.checkpoint(Unknown Source:18)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.StatementCommand.getResult(Unknown Source:2868)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.StatementCommand.execute(Unknown Source:0)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.Session.executeCompiledStatement(Unknown Source:254)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.Session.executeDirectStatement(Unknown Source:118)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.Session.execute(Unknown Source:228)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.server.ServerConnection.receiveResult(Unknown Source:51)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.server.ServerConnection.access$200(Unknown Source:0)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.server.ServerConnection$HsqlInResultProcessor.receiveResult(Unknown Source:2)
07-15 10:20:51.788 32675 1448 W System.err: at org.hsqldb.server.ServerConnection.run(Unknown Source:20)
07-15 10:20:51.788 32675 1448 W System.err: at java.lang.Thread.run(Thread.java:764)

This error occurs because the Java version detection in JavaSystem.java doesn't work correctly on Android platforms:

System.getProperty("java.specification.version", "6")

returns "0.9" on our tablets and some random phones I tried it on. This causes the javaVersion variable to default to 11.
To fix this, I slightly modified the existing code in the "unmap" method. When the javaVersion is > 8, then the "sun.misc.Unsafe" code branch is tried first, but it falls back to the existing code branch should a reflection error occur:
public static Throwable unmap(MappedByteBuffer buffer) {

        if (buffer == null) {
            return null;
        }

        if (javaVersion > 8) {
            try {
                Class<?> unsafeClass = Class.forName("sun.misc.Unsafe");
                Field unsafeField = unsafeClass.getDeclaredField("theUnsafe");

                unsafeField.setAccessible(true);

                Object unsafe = unsafeField.get(null);
                Method invokeCleaner = unsafeClass.getMethod("invokeCleaner",
                    java.nio.ByteBuffer.class);

                invokeCleaner.invoke(unsafe, buffer);
                return null;
            } catch (NoSuchMethodException e) {
            } catch (NoSuchFieldException e) {
            } catch (IllegalAccessException e) {
            } catch (ClassNotFoundException e) {
            } catch (InvocationTargetException e) {
                return e;
            } catch (Throwable t) {
                return t;
            }
            //on any reflection error we assume that we made a mistake guessing the java version
            //and try the old code instead
        }

        try {
            Method cleanerMethod = buffer.getClass().getMethod("cleaner");

            cleanerMethod.setAccessible(true);

            Object cleaner     = cleanerMethod.invoke(buffer);
            Method cleanMethod = cleaner.getClass().getMethod("clean");

            cleanMethod.invoke(cleaner);
        } catch (NoSuchMethodException e) {
            // no cleaner
            return e;
        } catch (InvocationTargetException e) {
            // means we're not dealing with a Sun JVM?
            return e;
        } catch (Throwable t) {
            return t;
        }

        return null;
    }

I'm perfectly happy with maintaining my own branch if this is too obscure, but I figured you might be interested in this.
Cheers!
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1636
HyperSQL Database Engine (HSQLDB) / Bugs / #1636 DDL blocking on transaction in other connection with mvcc transaction model
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When a transaction is running on one connection, and some data is selected in that transaction,
then DDL in another connection will hang, but only with the MVCC transaction mode.
From the docs it seems to me there should be no blocking in this case.
See attached sample java program, run agains the latest 2.6.1 build
1 Attachments


HsqlTest.java
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1637
HyperSQL Database Engine (HSQLDB) / Bugs / #1637 Unique Key constraint cannot be dropped
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. DDL Statement: CREATE TABLE
CREATE TABLE PUBLIC.KXN_SCHEMA.COUNTRY (
    PK_COUNTRY_ID BIGINT NOT NULL,
    COUNTRY_MAP BLOB,
    CREATED TIMESTAMP NOT NULL,
    ISO3166 VARCHAR(50),
    MODIFIED TIMESTAMP,
    NAME VARCHAR(100) NOT NULL,
    CONSTRAINT SYS_PK_10095 PRIMARY KEY (PK_COUNTRY_ID)
);
CREATE UNIQUE INDEX SYS_IDX_SYS_CT_10098_10103 ON PUBLIC.KXN_SCHEMA.COUNTRY (NAME);
CREATE UNIQUE INDEX SYS_IDX_SYS_PK_10095_10099 ON PUBLIC.KXN_SCHEMA.COUNTRY (PK_COUNTRY_ID);

2. DDL Statement: DROP CONSTRAINT
ALTER TABLE COUNTRY DROP CONSTRAINT SYS_IDX_SYS_PK_10289_10293

3. Error message:
2021-07-29 12:37:21,595 [DatabaseSeeder.java] INFO  Start HSQLDB [client]
java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: SYS_IDX_SYS_PK_10289_10293
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
        at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
        at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.executeSQLStmnts(AbstractJdbcSeeder.java:1309)
        at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.dropTableConstraints(AbstractJdbcSeeder.java:1206)
        at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:408)
        at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:166)
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: SYS_IDX_SYS_PK_10289_10293
        at org.hsqldb.error.Error.error(Unknown Source)
        at org.hsqldb.result.Result.getException(Unknown Source)
        ... 7 more
Processing of the script was aborted, error code=1

4. Database table CONSTRAINT_COLUMN_USAGE
PUBLIC  KXN_SCHEMA  COUNTRY CREATED         PUBLIC  KXN_SCHEMA  SYS_CT_10290
PUBLIC  KXN_SCHEMA  COUNTRY NAME            PUBLIC  KXN_SCHEMA  SYS_CT_10291
PUBLIC  KXN_SCHEMA  COUNTRY NAME            PUBLIC  KXN_SCHEMA  SYS_CT_10292
PUBLIC  KXN_SCHEMA  COUNTRY PK_COUNTRY_ID   PUBLIC  KXN_SCHEMA  SYS_CT_10288

5. Database table CONSTRAINT_TABLE_USAGE
PUBLIC  KXN_SCHEMA  COUNTRY PUBLIC  KXN_SCHEMA  SYS_CT_10288
PUBLIC  KXN_SCHEMA  COUNTRY PUBLIC  KXN_SCHEMA  SYS_CT_10290
PUBLIC  KXN_SCHEMA  COUNTRY PUBLIC  KXN_SCHEMA  SYS_CT_10291
PUBLIC  KXN_SCHEMA  COUNTRY PUBLIC  KXN_SCHEMA  SYS_CT_10292

6. Delivered by JDBC DatabaseMetaData.getIndexInfo():
getIndexInfo(null,KXN_SCHEMA,COUNTRY,false,true)
TABLE_CAT       =PUBLIC
TABLE_SCHEM     =KXN_SCHEMA
TABLE_NAME      =COUNTRY
NON_UNIQUE      =false
INDEX_QUALIFIER =PUBLIC
INDEX_NAME      =SYS_IDX_SYS_PK_10289_10293
TYPE            =3
ORDINAL_POSITION=1
COLUMN_NAME     =PK_COUNTRY_ID
ASC_OR_DESC     =A
CARDINALITY     =0
PAGES           =0
FILTER_CONDITION=null

getIndexInfo(null,KXN_SCHEMA,COUNTRY,false,true)
TABLE_CAT       =PUBLIC
TABLE_SCHEM     =KXN_SCHEMA
TABLE_NAME      =COUNTRY
NON_UNIQUE      =false
INDEX_QUALIFIER =PUBLIC
INDEX_NAME      =SYS_IDX_SYS_CT_10292_10297
TYPE            =3
ORDINAL_POSITION=1
COLUMN_NAME     =NAME
ASC_OR_DESC     =A
CARDINALITY     =0
PAGES           =0
FILTER_CONDITION=null
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1638
HyperSQL Database Engine (HSQLDB) / Bugs / #1638 getObject return value influenced by getting previous column
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
When getting a primitive type column that was NULL, the wasNullValue of the JDBCResultSet is set to true, which is correct. However, wasNullValue then takes effect for future calls to getObject(columnNumber, type) before actually checking the data in the column in question. This gives the surprise result that a NOT NULL column could return a null value. This effectively breaks the invariant on the column.
This is confirmed in 2.6.0 and 2.5.2, and does not affect 2.5.1. I have not tested trunk as we use maven dependencies for hsqldb.
This bug appears to be related to #1631 "null value causes NPE in JDBCResultSet.getObject", and I suspect that the fix for that issue will also resolve this bug. However in my view this is top priority; it's not possible to rely on returned data in any situation where getObject is used after any other nullable column, with an NPE being the more preferable outcome, but in many cases the symptoms may be far more insidious with nullable columns ignoring actual values. Not all users may realise they are experiencing this bug, as a result. Therfore 2.5.2+ has a very high priority bug and a fix should be pushed out to 2.5.x and 2.6.x to maven central to minimise the impact on users, IMHO.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1639
HyperSQL Database Engine (HSQLDB) / Bugs / #1639 Condition does not work for CTE WITH RECURSIVE .. WHERE ... IN (SELECT * FROM unnest(ARRAY[UUID('...')])...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi guys!
I have built the graph query with a loop prevent condition. 
The problem is 'in array' condition doesn't work during CTE WITH RECURSIVE. 
But works fine outside CTE or on stand-alone tests;
Also query works fine on PostgreSQL with correct output.
Arrays contains uuid type values. 
The problem is located on that line:
r.from_id NOT IN (SELECT * FROM unnest(re.path)) and --this does not work

versions affected: 2.5.0, 2.6.0
Schema:
        DROP TABLE IF EXISTS relation_test;
        CREATE TABLE IF NOT EXISTS relation_test
        (
            from_id             uuid,
            from_type           varchar(255),
            to_id               uuid,
            to_type             varchar(255),
            relation_type_group varchar(255),
            relation_type       varchar(255),
            additional_info     varchar,
            CONSTRAINT relation_test_pkey PRIMARY KEY (from_id, from_type, relation_type_group, relation_type, to_id, to_type)
        );

Data:
INSERT INTO relation_test (from_id, from_type, to_id, to_type, relation_type_group, relation_type, additional_info) 
 VALUES 
 ('11111111-0f19-11ec-ba23-e981fc95500d', 'TENANT', '22222222-0f19-11ec-ba23-e981fc95500d', 'ASSET', 'COMMON', 'Contains', null), --head
 ('22222222-0f19-11ec-ba23-e981fc95500d', 'ASSET',  '33333333-0f19-11ec-ba23-e981fc95500d', 'DEVICE', 'COMMON', 'Contains', null),
 ('33333333-0f19-11ec-ba23-e981fc95500d', 'DEVICE', '11111111-0f19-11ec-ba23-e981fc95500d', 'TENANT', 'COMMON', 'Contains', null); --loop 

Query:
WITH RECURSIVE related_entities(from_id, from_type, to_id, to_type, lvl, path)
                   AS (SELECT from_id,
                              from_type,
                              to_id,
                              to_type,
                              1               as lvl,
                              ARRAY [from_id] as path
                       FROM relation_test r
                       WHERE from_id = '11111111-0f19-11ec-ba23-e981fc95500d'
                         and from_type = 'TENANT'
                         and relation_type_group = 'COMMON'
                       GROUP BY r.from_id, r.from_type, r.to_id, r.to_type, 1, ARRAY [from_id]
                       UNION ALL
                       SELECT r.from_id,
                              r.from_type,
                              r.to_id,
                              r.to_type,
                              (re.lvl + 1)                   as lvl,
                              (re.path || ARRAY [r.from_id]) as path
                       FROM relation_test r
                                INNER JOIN related_entities re
                                           ON r.from_id = re.to_id and
                                              r.from_type = re.to_type and
                                              relation_type_group = 'COMMON' and
                                              r.from_id NOT IN (SELECT * FROM unnest(re.path)) and --this does not work
                                              re.lvl <= 7
                       GROUP BY r.from_id, r.from_type, r.to_id, r.to_type,
                                (re.lvl + 1), (re.path || ARRAY [r.from_id]))
SELECT lvl, from_id, from_type, to_id, to_type, path
from related_entities r_int  

Output (wrong, only 3 lines expected):
1 [LVL, FROM_ID, FROM_TYPE, TO_ID, TO_TYPE, PATH]
2 [1, 11111111-0f19-11ec-ba23-e981fc95500d, TENANT, 22222222-0f19-11ec-ba23-e981fc95500d, ASSET, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d]]
3 [2, 22222222-0f19-11ec-ba23-e981fc95500d, ASSET, 33333333-0f19-11ec-ba23-e981fc95500d, DEVICE, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d]]
4 [3, 33333333-0f19-11ec-ba23-e981fc95500d, DEVICE, 11111111-0f19-11ec-ba23-e981fc95500d, TENANT, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d]]
5 [4, 11111111-0f19-11ec-ba23-e981fc95500d, TENANT, 22222222-0f19-11ec-ba23-e981fc95500d, ASSET, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d,11111111-0f19-11ec-ba23-e981fc95500d]]
6 [5, 22222222-0f19-11ec-ba23-e981fc95500d, ASSET, 33333333-0f19-11ec-ba23-e981fc95500d, DEVICE, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d,11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d]]
7 [6, 33333333-0f19-11ec-ba23-e981fc95500d, DEVICE, 11111111-0f19-11ec-ba23-e981fc95500d, TENANT, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d,11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d]]
8 [7, 11111111-0f19-11ec-ba23-e981fc95500d, TENANT, 22222222-0f19-11ec-ba23-e981fc95500d, ASSET, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d,11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d,11111111-0f19-11ec-ba23-e981fc95500d]]
9 [8, 22222222-0f19-11ec-ba23-e981fc95500d, ASSET, 33333333-0f19-11ec-ba23-e981fc95500d, DEVICE, ARRAY[11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d,11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d,33333333-0f19-11ec-ba23-e981fc95500d,11111111-0f19-11ec-ba23-e981fc95500d,22222222-0f19-11ec-ba23-e981fc95500d]]

Note: without lvl control (re.lvl <= 7) we got the org.hsqldb.HsqlException: query execution reached limit of recursion
Outside of CTE the 'in array' condition works fine (stand-alone test)
SELECT UUID('463e5c80-0f38-11ec-8153-55a9f38b54f3') IN (SELECT * FROM unnest(ARRAY[UUID('463e5c80-0f38-11ec-8153-55a9f38b54f3')] || ARRAY[UUID('46957d30-0f38-11ec-8153-55a9f38b54f3')] )) 

properties:
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.url=jdbc:hsqldb:file:target/tmp/testDb;sql.enforce_size=false
spring.datasource.driverClassName=org.hsqldb.jdbc.JDBCDriver

pom.xml
<properties>
          <hsqldb.version>2.6.0</hsqldb.version>
 </properties>
...
 <dependency>
                <groupId>org.hsqldb</groupId>
                <artifactId>hsqldb</artifactId>
                <version>${hsqldb.version}</version>
</dependency>

I hope it will help to perpoduce and fix the problem
1 Attachments





2021-09-07_15-53.png
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1640
HyperSQL Database Engine (HSQLDB) / Bugs / #1640 Changing table from CACHED to MEMORY does not work
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
If using a file based database it seems it is not possible to change a table from cached to memory.
Creating the table as memory and then changing it to cached works fine.
A "General error" exception is thrown with SQLState = S1000 and vendorCode = -458. 
The problem exists both in 2.6.0 and 2.6.1 but not in earlier versions.
The problem does not occur is using memory database.
CREATE CACHED TABLE THETABLE(ID INTEGER)
SET TABLE THETABLE TYPE MEMORY

The problem is reproduced in a simple Spring Boot project using a junit test here: https://github.com/nytro77/hsqldb-cached-to-memory-bug
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1641
HyperSQL Database Engine (HSQLDB) / Bugs / #1641 Issues with timestamps in JPA named queries
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Hi all,
We're seeing strange issues when executing queries via JPA using HSQLDB 2.5.2.
These queries perform null checks on incoming placeholder values. This causes data type conversion issues when the incoming placeholder is a SQL TIMESTAMP data type.
These queries worked when using HSQLDB 2.5.1.
Broken query example:
    @NamedQuery(name = "BrokenQueryTest",
        query = "SELECT COUNT(me) from MyEntity me WHERE (:date IS NULL OR :date > me.date)"
    )

Calling code: 
entityManager.createNamedQuery("BrokenQueryTest")
            .setParameter("date", new java.util.Date())
            .getSingleResult();

This query results in an HsqlException: "incompatible data type in conversion"
This query worked as expected using HSQLDB 2.5.1, but this query fails under 2.5.2, 2.6.0, and 2.6.1.
The query works when removing the :date IS NULL condition from the WHERE-clause.
I've attached an example Spring Boot project which demonstrates this issue.
This can be run using mvnw spring-boot:run using JDK 11.
Full stack trace of the error when running the query:
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v2.5.6)
2021-12-08 15:07:39.989  INFO 57368 --- [           main] c.e.hsqldbbug.HsqldbBugApplication       : Starting HsqldbBugApplication using Java 11.0.12 on smiths-1mbpsh.local with PID 57368 (/System/Volumes/Data/development/reference/hsqldb-bug/target/classes started by smithsh in /System/Volumes/Data/development/reference/hsqldb-bug)
2021-12-08 15:07:39.991  INFO 57368 --- [           main] c.e.hsqldbbug.HsqldbBugApplication       : No active profile set, falling back to default profiles: default
2021-12-08 15:07:40.367  INFO 57368 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2021-12-08 15:07:40.376  INFO 57368 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 3 ms. Found 0 JPA repository interfaces.
2021-12-08 15:07:40.570  INFO 57368 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2021-12-08 15:07:40.791  INFO 57368 --- [           main] com.zaxxer.hikari.pool.PoolBase          : HikariPool-1 - Driver does not support get/set network timeout for connections. (feature not supported)
2021-12-08 15:07:40.794  INFO 57368 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2021-12-08 15:07:40.871  INFO 57368 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2021-12-08 15:07:40.910  INFO 57368 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.32.Final
2021-12-08 15:07:41.009  INFO 57368 --- [           main] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
2021-12-08 15:07:41.093  INFO 57368 --- [           main] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.HSQLDialect
2021-12-08 15:07:41.555  INFO 57368 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2021-12-08 15:07:41.648  INFO 57368 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2021-12-08 15:07:41.768  INFO 57368 --- [           main] c.e.hsqldbbug.HsqldbBugApplication       : Started HsqldbBugApplication in 2.076 seconds (JVM running for 2.397)
2021-12-08 15:07:41.773  INFO 57368 --- [           main] com.example.hsqldbbug.FailureScenario    : Running query without null check
2021-12-08 15:07:41.859  INFO 57368 --- [           main] com.example.hsqldbbug.FailureScenario    : Running query with null check
2021-12-08 15:07:41.862  WARN 57368 --- [           main] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: -5561, SQLState: 42561
2021-12-08 15:07:41.862 ERROR 57368 --- [           main] o.h.engine.jdbc.spi.SqlExceptionHelper   : incompatible data type in conversion
2021-12-08 15:07:41.902 ERROR 57368 --- [           main] o.s.boot.SpringApplication               : Application run failed
javax.persistence.PersistenceException: org.hibernate.exception.SQLGrammarException: could not execute query
    at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:154) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1613) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.query.internal.AbstractProducedQuery.getSingleResult(AbstractProducedQuery.java:1652) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
    at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]
    at org.springframework.orm.jpa.SharedEntityManagerCreator$DeferredQueryInvocationHandler.invoke(SharedEntityManagerCreator.java:406) ~[spring-orm-5.3.12.jar:5.3.12]
    at com.sun.proxy.$Proxy69.getSingleResult(Unknown Source) ~[na:na]
    at com.example.hsqldbbug.FailureScenario.doSomethingAfterStartup(FailureScenario.java:46) ~[classes/:na]
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
    at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]
    at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:344) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:229) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:166) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:176) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:169) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:143) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:421) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:378) ~[spring-context-5.3.12.jar:5.3.12]
    at org.springframework.boot.context.event.EventPublishingRunListener.running(EventPublishingRunListener.java:111) ~[spring-boot-2.5.6.jar:2.5.6]
    at org.springframework.boot.SpringApplicationRunListeners.lambda$running$6(SpringApplicationRunListeners.java:79) ~[spring-boot-2.5.6.jar:2.5.6]
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1541) ~[na:na]
    at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:117) ~[spring-boot-2.5.6.jar:2.5.6]
    at org.springframework.boot.SpringApplicationRunListeners.doWithListeners(SpringApplicationRunListeners.java:111) ~[spring-boot-2.5.6.jar:2.5.6]
    at org.springframework.boot.SpringApplicationRunListeners.running(SpringApplicationRunListeners.java:79) ~[spring-boot-2.5.6.jar:2.5.6]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:353) ~[spring-boot-2.5.6.jar:2.5.6]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343) ~[spring-boot-2.5.6.jar:2.5.6]
    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332) ~[spring-boot-2.5.6.jar:2.5.6]
    at com.example.hsqldbbug.HsqldbBugApplication.main(HsqldbBugApplication.java:11) ~[classes/:na]
Caused by: org.hibernate.exception.SQLGrammarException: could not execute query
    at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:63) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:42) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:113) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.doList(Loader.java:2846) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.doList(Loader.java:2825) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2657) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.list(Loader.java:2652) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.hql.QueryLoader.list(QueryLoader.java:506) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.list(QueryTranslatorImpl.java:400) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.engine.query.spi.HQLQueryPlan.performList(HQLQueryPlan.java:219) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1414) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.query.internal.AbstractProducedQuery.doList(AbstractProducedQuery.java:1636) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.query.internal.AbstractProducedQuery.list(AbstractProducedQuery.java:1604) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    ... 30 common frames omitted
Caused by: java.sql.SQLSyntaxErrorException: incompatible data type in conversion
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) ~[hsqldb-2.5.2.jar:2.5.2]
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) ~[hsqldb-2.5.2.jar:2.5.2]
    at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source) ~[hsqldb-2.5.2.jar:2.5.2]
    at org.hsqldb.jdbc.JDBCPreparedStatement.setTimestamp(Unknown Source) ~[hsqldb-2.5.2.jar:2.5.2]
    at org.hsqldb.jdbc.JDBCPreparedStatement.setTimestamp(Unknown Source) ~[hsqldb-2.5.2.jar:2.5.2]
    at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.setTimestamp(HikariProxyPreparedStatement.java) ~[HikariCP-4.0.3.jar:na]
    at org.hibernate.type.descriptor.sql.TimestampTypeDescriptor$1.doBind(TimestampTypeDescriptor.java:56) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:73) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:276) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:271) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.param.NamedParameterSpecification.bind(NamedParameterSpecification.java:53) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.hql.QueryLoader.bindParameterValues(QueryLoader.java:648) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.bindPreparedStatement(Loader.java:2125) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:2102) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2034) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.executeQueryStatement(Loader.java:2012) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.doQuery(Loader.java:948) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:349) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    at org.hibernate.loader.Loader.doList(Loader.java:2843) ~[hibernate-core-5.4.32.Final.jar:5.4.32.Final]
    ... 39 common frames omitted
Caused by: org.hsqldb.HsqlException: incompatible data type in conversion
    at org.hsqldb.error.Error.error(Unknown Source) ~[hsqldb-2.5.2.jar:2.5.2]
    at org.hsqldb.error.Error.error(Unknown Source) ~[hsqldb-2.5.2.jar:2.5.2]
    ... 56 common frames omitted
2021-12-08 15:07:41.906  INFO 57368 --- [           main] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2021-12-08 15:07:41.908  INFO 57368 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2021-12-08 15:07:41.914  INFO 57368 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

Let me know if you need further details.
1 Attachments


hsqldb-bug.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1642
HyperSQL Database Engine (HSQLDB) / Bugs / #1642 java.sql.SQLSyntaxErrorException: user lacks privilege or object not found
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
HSQLDB Version 2.61
Dropping a unique key gives an error of type SQLSyntaxErrorException - this error occurs only with the embedded version - no problem with the client version.
2021-12-16 13:22:06,564 [AbstractJdbcSeeder.java] DEBUG constraint type=R name='SYS_FK_10115'
2021-12-16 13:22:06,564 [AbstractJdbcSeeder.java] DEBUG constraint type=R name='SYS_FK_10117'
2021-12-16 13:22:06,564 [AbstractJdbcSeeder.java] DEBUG constraint type=R name='SYS_FK_10133'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=R name='SYS_FK_10145'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=P name='SYS_PK_10093'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=P name='SYS_PK_10102'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=P name='SYS_PK_10113'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=P name='SYS_PK_10132'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=P name='SYS_PK_10143'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=U name='SYS_IDX_KXN_26_10100'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=U name='SYS_IDX_KXN_28_10111'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=U name='SYS_IDX_KXN_27_10130'
2021-12-16 13:22:06,565 [AbstractJdbcSeeder.java] DEBUG constraint type=U name='SYS_IDX_KXN_25_10157'
2021-12-16 13:22:06,566 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,566 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE COUNTRY_STATE DROP CONSTRAINT SYS_FK_10115
2021-12-16 13:22:06,567 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,567 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,567 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE COUNTRY_STATE DROP CONSTRAINT SYS_FK_10117
2021-12-16 13:22:06,569 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,569 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,569 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE CITY DROP CONSTRAINT SYS_FK_10133
2021-12-16 13:22:06,569 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,569 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,569 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE COMPANY DROP CONSTRAINT SYS_FK_10145
2021-12-16 13:22:06,570 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,570 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,570 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE COUNTRY DROP CONSTRAINT SYS_PK_10093
2021-12-16 13:22:06,570 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,571 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,571 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE TIMEZONE DROP CONSTRAINT SYS_PK_10102
2021-12-16 13:22:06,571 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,571 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,572 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE COUNTRY_STATE DROP CONSTRAINT SYS_PK_10113
2021-12-16 13:22:06,572 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,572 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,572 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE CITY DROP CONSTRAINT SYS_PK_10132
2021-12-16 13:22:06,573 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,573 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,573 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE COMPANY DROP CONSTRAINT SYS_PK_10143
2021-12-16 13:22:06,573 [AbstractJdbcSeeder.java] DEBUG End
2021-12-16 13:22:06,573 [AbstractJdbcSeeder.java] DEBUG Start
2021-12-16 13:22:06,573 [AbstractJdbcSeeder.java] DEBUG next SQL statement=ALTER TABLE COUNTRY DROP CONSTRAINT SYS_IDX_KXN_26_10100
java.sql.SQLSyntaxErrorException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
        at org.hsqldb.jdbc.JDBCStatement.fetchResult(Unknown Source)
        at org.hsqldb.jdbc.JDBCStatement.execute(Unknown Source)
        at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.executeSQLStmnts(AbstractJdbcSeeder.java:1362)
        at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.dropTableConstraints(AbstractJdbcSeeder.java:1231)
        at ch.konnexions.db_seeder.jdbc.AbstractJdbcSeeder.createData(AbstractJdbcSeeder.java:427)
        at ch.konnexions.db_seeder.DatabaseSeeder.main(DatabaseSeeder.java:160)
Caused by: org.hsqldb.HsqlException: user lacks privilege or object not found: SYS_IDX_KXN_26_10100
        at org.hsqldb.error.Error.error(Unknown Source)
        at org.hsqldb.error.Error.error(Unknown Source)
        at org.hsqldb.SchemaManager.getSchemaObject(Unknown Source)
        at org.hsqldb.ParserDQL.readSchemaObjectName(Unknown Source)
        at org.hsqldb.ParserDDL.compileAlterTableDropConstraint(Unknown Source)
        at org.hsqldb.ParserDDL.compileAlterTable(Unknown Source)
        at org.hsqldb.ParserDDL.compileAlter(Unknown Source)
        at org.hsqldb.ParserCommand.compilePart(Unknown Source)
        at org.hsqldb.ParserCommand.compileStatements(Unknown Source)
        at org.hsqldb.Session.executeDirectStatement(Unknown Source)
        at org.hsqldb.Session.execute(Unknown Source)
        ... 6 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1643
HyperSQL Database Engine (HSQLDB) / Bugs / #1643 HSQLDB fails to compile query with complex conditions
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
The following schema:
create table Asset (id integer not null, identifier varchar(255), type_id integer, primary key (id))
create table Asset_AUD (id integer not null, REV integer not null, REVTYPE tinyint, REVEND integer, identifier varchar(255), type_id integer, primary key (REV, id))
create table Asset_multiSymbols (Asset_id integer not null, identifier varchar(255), type_id integer)
create table Asset_multiSymbols_AUD (REV integer not null, REVTYPE tinyint not null, Asset_id integer not null, SETORDINAL integer not null, REVEND integer, identifier varchar(255), type_id integer, primary key (Asset_id, REV, REVTYPE, SETORDINAL))
create table REVINFO (REV integer not null, REVTSTMP bigint, primary key (REV))
create table SymbolType (id integer not null, name varchar(255), primary key (id))
create table SymbolType_AUD (id integer not null, REV integer not null, REVTYPE tinyint, REVEND integer, name varchar(255), primary key (REV, id))
alter table Asset add constraint FK2f83ywwlm8nbtrpte9efuo9pj foreign key (type_id) references SymbolType
alter table Asset_AUD add constraint FKlq7kauhigk0mdew67qs2l39ci foreign key (REV) references REVINFO
alter table Asset_AUD add constraint FKsqd511m6x7wbydqv5c5icaeoh foreign key (REVEND) references REVINFO
alter table Asset_multiSymbols add constraint FKmm741vymx81uim920vcv1owtc foreign key (type_id) references SymbolType
alter table Asset_multiSymbols add constraint FK8js19bkrmg12sa857bhnsfw2p foreign key (Asset_id) references Asset
alter table Asset_multiSymbols_AUD add constraint FK5i68350rhlddsnjuv72k2sje8 foreign key (REV) references REVINFO
alter table Asset_multiSymbols_AUD add constraint FK60svqjg5pb6p0rwh27re3vpi4 foreign key (REVEND) references REVINFO
alter table SymbolType_AUD add constraint FKgdc9rrst0megcvg7p1sbyf86t foreign key (REV) references REVINFO
alter table SymbolType_AUD add constraint FKinjef90jcd35j2j3of2ybyf5i foreign key (REVEND) references REVINFO

along with the following query:
select a1_0.id 
from Asset_AUD a1_0 
join Asset_multiSymbols_AUD a2_0 on a2_0.Asset_id IS NOT DISTINCT FROM a1_0.id 
join SymbolType_AUD s1_0 on a2_0.type_id IS NOT DISTINCT FROM s1_0.id 
where a1_0.REV<=2 and a1_0.REVTYPE!=1 and (a1_0.REVEND>1 or a1_0.REVEND is null) 
and s1_0.REV<=2 and s1_0.name='' and (s1_0.REVEND>1 or s1_0.REVEND is null) and a2_0.REVTYPE!=1  and (a2_0.REVEND>1 or a2_0.REVEND is null)
and a2_0.REV<=2 

fails with this exception:
Caused by: org.hsqldb.HsqlException: java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
    at app//org.hsqldb.error.Error.error(Error.java:114)
    at app//org.hsqldb.result.Result.newErrorResult(Result.java:1084)
    at app//org.hsqldb.Session.execute(Session.java:1051)
    at app//org.hsqldb.jdbc.JDBCPreparedStatement.<init>(JDBCPreparedStatement.java:4125)
    ... 94 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
    at org.hsqldb.RangeVariableResolver.reorderRanges(RangeVariableResolver.java:746)
    at org.hsqldb.RangeVariableResolver.reorder(RangeVariableResolver.java:628)
    at org.hsqldb.RangeVariableResolver.processConditions(RangeVariableResolver.java:246)
    at org.hsqldb.QuerySpecification.setRangeVariableConditions(QuerySpecification.java:1030)
    at org.hsqldb.QuerySpecification.resolveTypesPartThree(QuerySpecification.java:425)
    at org.hsqldb.QueryExpression.resolve(QueryExpression.java:230)
    at org.hsqldb.ParserDQL.compileCursorSpecification(ParserDQL.java:6669)
    at org.hsqldb.ParserCommand.compilePart(ParserCommand.java:156)
    at org.hsqldb.ParserCommand.compileStatement(ParserCommand.java:64)
    at org.hsqldb.Session.compileStatement(Session.java:943)
    at org.hsqldb.StatementManager.compile(StatementManager.java:363)
    at org.hsqldb.Session.execute(Session.java:1047)
    ... 95 more

Interestingly, if the last where condition is omitted, the query works. It also works if the "is not distinct from" predicate is replaced with a "=" predicate. I also tried to use "decode" or an emulation that involves an intersect exists subquery, but all approaches to execute such a query failed so far.
The stack trace is from executing this with 2.3.6 as newer versions report just a "general error" without any context.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1644
HyperSQL Database Engine (HSQLDB) / Bugs / #1644 Push JDK8 compatible jar to Maven Central
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It would be nice to have the Java 8 compatible jar pushed to Central. The current coordinate org.hsqldb:hsqldb will not run on Java 8. Specifically, the error follows:
% java -jar hsqldb-2.6.1.jar
Error: A JNI error has occurred, please check your installation and try again
Exception in thread "main" java.lang.UnsupportedClassVersionError: org/hsqldb/util/DatabaseManagerSwing has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
...

I'm currently leveraging a workaround using a file:// repo in my project. My coordinate for this solution is org.hsqldb:hsqldb-jdk8:2.6.1. Your free to borrow that. :)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1645
HyperSQL Database Engine (HSQLDB) / Bugs / #1645 CLOB value saved truncated when encryption is used
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
After upgrading to 2.16 we faced the issue that CLOB fields are saved corrupted (truncated) when flushed/persisted to the file.
Environment:
 Windows, Linux
 JDBC driver hsqldb-2.6.0 and 2.6.1
 Hibernate 5.5.8.Final
 Spring Boot 2.5.6
Steps to reproduce:
1. Configure JDBC connection string with blowfish encryption and lob crypt:
jdbc:hsqldb:file:XXXXXXX;crypt_key=11111111111111111111111111111111;crypt_type=blowfish;crypt_lobs=true
2. Configure @Entity with @Lob String filed and explicit size more than 512 KiB (otherwise default 255 symbols length would be applied):
@Lob
@Column(length = 1024 * 1024 * 1024) // 1GiB
 private String corruptedValue;


Create Spring CRUD repository for this entity.
Save value with large string (about 1 MiB) to the repository
Force writing to disk (you better know how to do this, i waited 1 second, also stop application persists to disk)
Read persisted value and compare saved String with the original one

Actual Result:
String is truncated to 512 KiB
Expected Result:
String is not changed
Note:
 BLOB type still works fine (byte[] java type)
 Without encryption - works fine
 Less than 512 KiB - works fine
 Version 2.15.0 - works fine 
I created this test repository:
 https://github.com/celonis/hsqldb-corruption-demo
 https://github.com/celonis/hsqldb-corruption-demo/runs/4806333508?check_suite_focus=true#step:4:160
* duplicated in the attached hsqldb-corruption-demo-develop.zip
pls follow the PersistenceConfiguration, test the behavior in CorruptedDataSavedExample (Spring Boot Application) and provided test classes.
Pls contact me in case of any question - happy to collaborate with you.
1 Attachments


hsqldb-corruption-demo-develop.zip
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1646
HyperSQL Database Engine (HSQLDB) / Bugs / #1646 Can't use SHEMA other than PUBLIC in 2.61
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
With hsqldb 2.61:
 If I create a schema, a simple user can't see table and view.
 If I create user with ADMIN option: user can see table and view but can't use the set default schema Alternative: user see all table and view. 
If I use 2.51, all work fine....
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1647
HyperSQL Database Engine (HSQLDB) / Bugs / #1647 NoSuchMethodError when using org.hsqldb.jdbc.JDBCClobClient.getAsciiStream() from alternative jar (Java 8)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Due to incompatible changes in java.nio.ByteBuffer between Java 8 and 11 (methods clear() and flip() of class java.nio.ByteBuffer) calling org.hsqldb.jdbc.JDBCClobClient.getAsciiStream() from alternative jar using JDK8 throws a NoSuchMethodError. The issue as well as resolutions are described at https://stackoverflow.com/questions/61267495/exception-in-thread-main-java-lang-nosuchmethoderror-java-nio-bytebuffer-flip.
In order to reproduce the issue compile and run the following piece of code using JDK8:
        try (
                Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:.");
                Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT CAST('test_value' AS CLOB) FROM INFORMATION_SCHEMA.SYSTEM_USERS")
        ) {
            if (resultSet.next()) {
                Clob clob = resultSet.getClob(1);
                try (InputStream asciiStreamFromClob = clob.getAsciiStream()) { }
            }
        }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1648
HyperSQL Database Engine (HSQLDB) / Bugs / #1648 org.hsqldb.jdbc.JDBCClobClient.getAsciiStream() returns an input stream with trailing ASCII control character 0 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It looks like there is an issue in org.hsqldb.jdbc.JDBCClobClient.getAsciiStream() since it returns an input stream with lots of trailing ASCII control characters 0. I.e., an input stream created by calling java.sql.ResultSet.getAsciiStream(int) has different content than an input stream created by calling org.hsqldb.jdbc.JDBCClobClient.getAsciiStream() on the result of java.sql.ResultSet.getClob(int).
The issue can be reproduced by running the following Unit test:
import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.*;
import java.sql.*;

import org.junit.*;

public class ReadClobTest {

    @Test
    public void testReadClob() throws SQLException, IOException {
        try (
                Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:.");
                Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery("SELECT CAST('test_value' AS CLOB) FROM INFORMATION_SCHEMA.SYSTEM_USERS")
        ) {
            Assert.assertEquals("The returned result set does not have the expected column count.", 1, resultSet.getMetaData().getColumnCount());
            Assert.assertTrue("The returned result set does not contain any row.", resultSet.next());
            Clob clob = resultSet.getClob(1);
            try (
                    InputStream asciiStreamFromClob = clob.getAsciiStream();
                    InputStream asciiStreamFromResultSet = resultSet.getAsciiStream(1);
            ) {
                Assert.assertEquals("The ASCII stream returned by the CLOB and the ASCII stream returned by the result set do not match.", new String(asciiStreamFromResultSet.readAllBytes(), UTF_8), new String(asciiStreamFromClob.readAllBytes(), UTF_8));
            }
            Assert.assertEquals("The returned string does not match the data that was stored.", "test_value", resultSet.getString(1));
            Assert.assertFalse("The returned result set does contain more than one row.", resultSet.next());
        }
    }

}

I have tested versions 2.5.2 as well as 2.6.1.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1649
HyperSQL Database Engine (HSQLDB) / Bugs / #1649 Sporadic lock timeout
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
We see sporadic errors with HSQLDB (2.3.6+) that have to do with lock timeouts. The error is unfortunately not easily reproducible, but it happens a few times a week in the Hibernate testsuite. You can download the report here which contains more information about the error in documentation/target/reports/tests/test/index.html:
https://github.com/hibernate/hibernate-orm/suites/5217185761/artifacts/159824105
The test failing here is org.hibernate.userguide.sql.SQLTest#test_sql_hibernate_scalar_named_query_example, but sometimes it's a different test that fails. Here is another failure in a different test: https://github.com/hibernate/hibernate-orm/suites/5202913265/artifacts/158945685
The relevant portion of the stacktrace is this:
Caused by: java.sql.SQLTransactionRollbackException: statement execution aborted: timeout reached
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCUtil.sqlException(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.fetchResult(Unknown Source)
at org.hsqldb.jdbc.JDBCPreparedStatement.executeUpdate(Unknown Source)
at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:197)
... 34 more
Caused by: org.hsqldb.HsqlException: statement execution aborted: timeout reached
at app//org.hsqldb.error.Error.error(Unknown Source)
at app//org.hsqldb.error.Error.error(Unknown Source)
at app//org.hsqldb.Session.executeCompiledStatement(Unknown Source)
at app//org.hsqldb.Session.execute(Unknown Source)
... 37 more
No idea why it runs into a timeout only from time to time. Other databases work fine.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

1650
HyperSQL Database Engine (HSQLDB) / Bugs / #1650 Column altered with set default  nextval() causes org.hsqldb.HsqlException: General error 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
versions:
    <dependency>
        <groupId>org.hsqldb</groupId>
        <version>2.5.1</version>
        <artifactId>hsqldb</artifactId>
        <classifier>debug</classifier>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.hsqldb</groupId>
        <version>2.5.1</version>
        <artifactId>hsqldb</artifactId>
        <classifier>sources</classifier>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.liquibase</groupId>
        <artifactId>liquibase-core</artifactId>
        <version>3.8.9</version>
        <scope>test</scope>
    </dependency>

description:
create liquibase script kind of:
create table...;
alter table the_table alter column col set default nextval('my_seq');
When test is finishing, liquibase cannot execute remove script 
liquibase.exception.DatabaseException: liquibase.command.CommandExecutionException: liquibase.exception.DatabaseException: java.sql.SQLException: General error

    at liquibase.Liquibase.dropAll(Liquibase.java:1160)
    at liquibase.Liquibase.dropAll(Liquibase.java:1140)
    at liquibase.integration.spring.SpringLiquibase.createLiquibase(SpringLiquibase.java:382)
    at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:312)
    at com.peterservice.bssbox.openapi.bfam.backend.testutils.db.cleanup.DatabaseCleanupTestExecutionListener.afterTestClass(DatabaseCleanupTestExecutionListener.java:25)
    at org.springframework.test.context.TestContextManager.afterTestClass(TestContextManager.java:488)
    at org.springframework.test.context.junit.jupiter.SpringExtension.afterAll(SpringExtension.java:86)
    at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeAfterAllCallbacks$13(ClassBasedTestDescriptor.java:425)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeAfterAllCallbacks$14(ClassBasedTestDescriptor.java:425)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
    at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeAfterAllCallbacks(ClassBasedTestDescriptor.java:425)
    at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.after(ClassBasedTestDescriptor.java:213)
    at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.after(ClassBasedTestDescriptor.java:78)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:145)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:145)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
    at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
    at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
    at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
    at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)
    at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)
    at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)
    at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)
    at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)
    at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
    at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
    at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)
Caused by: liquibase.command.CommandExecutionException: liquibase.exception.DatabaseException: java.sql.SQLException: General error
    at liquibase.command.AbstractCommand.execute(AbstractCommand.java:24)
    at liquibase.Liquibase.dropAll(Liquibase.java:1158)
    ... 43 more
Caused by: liquibase.exception.DatabaseException: java.sql.SQLException: General error
    at liquibase.snapshot.ResultSetCache.get(ResultSetCache.java:105)
    at liquibase.snapshot.JdbcDatabaseSnapshot$CachingDatabaseMetaData.getColumns(JdbcDatabaseSnapshot.java:301)
    at liquibase.snapshot.jvm.ColumnSnapshotGenerator.addTo(ColumnSnapshotGenerator.java:166)
    at liquibase.snapshot.jvm.JdbcSnapshotGenerator.snapshot(JdbcSnapshotGenerator.java:79)
    at liquibase.snapshot.SnapshotGeneratorChain.snapshot(SnapshotGeneratorChain.java:49)
    at liquibase.snapshot.DatabaseSnapshot.include(DatabaseSnapshot.java:316)
    at liquibase.snapshot.DatabaseSnapshot.init(DatabaseSnapshot.java:107)
    at liquibase.snapshot.DatabaseSnapshot.<init>(DatabaseSnapshot.java:60)
    at liquibase.snapshot.JdbcDatabaseSnapshot.<init>(JdbcDatabaseSnapshot.java:39)
    at liquibase.snapshot.SnapshotGeneratorFactory.createSnapshot(SnapshotGeneratorFactory.java:217)
    at liquibase.snapshot.SnapshotGeneratorFactory.createSnapshot(SnapshotGeneratorFactory.java:246)
    at liquibase.snapshot.SnapshotGeneratorFactory.createSnapshot(SnapshotGeneratorFactory.java:230)
    at liquibase.lockservice.StandardLockService.destroy(StandardLockService.java:446)
    at liquibase.command.core.DropAllCommand.run(DropAllCommand.java:96)
    at liquibase.command.AbstractCommand.execute(AbstractCommand.java:19)
    ... 44 more
Caused by: java.sql.SQLException: General error
    at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:313)
    at org.hsqldb.jdbc.JDBCUtil.sqlException(JDBCUtil.java:157)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:2075)
    at org.hsqldb.jdbc.JDBCStatement.executeQuery(JDBCStatement.java:145)
    at org.hsqldb.jdbc.JDBCDatabaseMetaData.execute(JDBCDatabaseMetaData.java:6087)
    at org.hsqldb.jdbc.JDBCDatabaseMetaData.getColumns(JDBCDatabaseMetaData.java:3388)
    at com.zaxxer.hikari.pool.ProxyDatabaseMetaData.getColumns(ProxyDatabaseMetaData.java:108)
    at com.zaxxer.hikari.pool.HikariProxyDatabaseMetaData.getColumns(HikariProxyDatabaseMetaData.java)
    at liquibase.snapshot.JdbcDatabaseSnapshot$CachingDatabaseMetaData$GetColumnResultSetCache.fastFetchQuery(JdbcDatabaseSnapshot.java:370)
    at liquibase.snapshot.ResultSetCache$SingleResultSetExtractor.fastFetch(ResultSetCache.java:367)
    at liquibase.snapshot.ResultSetCache.get(ResultSetCache.java:72)
    ... 58 more
Caused by: org.hsqldb.HsqlException: General error
    at org.hsqldb.error.Error.error(Error.java:138)
    at org.hsqldb.error.Error.error(Error.java:107)
    at org.hsqldb.result.Result.newErrorResult(Result.java:1085)
    at org.hsqldb.result.Result.newErrorResult(Result.java:1055)
    at org.hsqldb.StatementDMQL.execute(StatementDMQL.java:175)
    at org.hsqldb.Session.executeCompiledStatement(Session.java:1323)
    at org.hsqldb.Session.executeDirectStatement(Session.java:1249)
    at org.hsqldb.Session.execute(Session.java:1014)
    at org.hsqldb.jdbc.JDBCStatement.fetchResult(JDBCStatement.java:2067)
    ... 66 more
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

